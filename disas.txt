core::fmt::ArgumentV1::new_display<u128>:
063ac000 sub       $0x38,%rsp
063ac004 mov       %rcx,0x30(%rsp)
063ac009 lea       0x63B`DE40,%rdx
063ac010 call      0x0000`0000`063A`C030
063ac015 mov       %rax,0x20(%rsp)
063ac01a mov       %rdx,0x28(%rsp)
063ac01f mov       0x28(%rsp),%rdx
063ac024 mov       0x20(%rsp),%rax
063ac029 add       $0x38,%rsp
063ac02d ret

core::fmt::ArgumentV1::new<u128>:
063ac030 sub       $0x48,%rsp
063ac034 mov       %rcx,8(%rsp)
063ac039 mov       %rcx,0x28(%rsp)
063ac03e mov       %rdx,0x30(%rsp)
063ac043 mov       %rdx,0x38(%rsp)
063ac048 mov       0x38(%rsp),%rax
063ac04d mov       %rax,0x10(%rsp)
063ac052 mov       8(%rsp),%rax
063ac057 mov       %rax,0x40(%rsp)
063ac05c mov       0x40(%rsp),%rax
063ac061 mov       %rax,(%rsp)
063ac065 mov       0x10(%rsp),%rax
063ac06a mov       (%rsp),%rcx
063ac06e mov       %rcx,0x18(%rsp)
063ac073 mov       %rax,0x20(%rsp)
063ac078 mov       0x18(%rsp),%rax
063ac07d mov       0x20(%rsp),%rdx
063ac082 add       $0x48,%rsp
063ac086 ret

core::fmt::ArgumentV1::new<ptr_const$<tuple$<> > >:
063ac090 sub       $0x48,%rsp
063ac094 mov       %rcx,8(%rsp)
063ac099 mov       %rcx,0x28(%rsp)
063ac09e mov       %rdx,0x30(%rsp)
063ac0a3 mov       %rdx,0x38(%rsp)
063ac0a8 mov       0x38(%rsp),%rax
063ac0ad mov       %rax,0x10(%rsp)
063ac0b2 mov       8(%rsp),%rax
063ac0b7 mov       %rax,0x40(%rsp)
063ac0bc mov       0x40(%rsp),%rax
063ac0c1 mov       %rax,(%rsp)
063ac0c5 mov       0x10(%rsp),%rax
063ac0ca mov       (%rsp),%rcx
063ac0ce mov       %rcx,0x18(%rsp)
063ac0d3 mov       %rax,0x20(%rsp)
063ac0d8 mov       0x18(%rsp),%rax
063ac0dd mov       0x20(%rsp),%rdx
063ac0e2 add       $0x48,%rsp
063ac0e6 ret

core::fmt::ArgumentV1::new_debug<ptr_const$<tuple$<> > >:
063ac0f0 sub       $0x38,%rsp
063ac0f4 mov       %rcx,0x30(%rsp)
063ac0f9 lea       0x63C`10F0,%rdx
063ac100 call      0x0000`0000`063A`C090
063ac105 mov       %rax,0x20(%rsp)
063ac10a mov       %rdx,0x28(%rsp)
063ac10f mov       0x28(%rsp),%rdx
063ac114 mov       0x20(%rsp),%rax
063ac119 add       $0x38,%rsp
063ac11d ret

core::fmt::Arguments::new_v1_formatted:
063ac120 push      %rsi
063ac121 sub       $0x48,%rsp
063ac125 mov       %rdx,%r10
063ac128 mov       %rcx,%rax
063ac12b mov       0x88(%rsp),%r11
063ac133 mov       0x80(%rsp),%rsi
063ac13b mov       0x78(%rsp),%rdx
063ac140 mov       %r10,0x10(%rsp)
063ac145 mov       %r8,0x18(%rsp)
063ac14a mov       %r9,0x20(%rsp)
063ac14f mov       %rdx,0x28(%rsp)
063ac154 mov       %rsi,0x30(%rsp)
063ac159 mov       %r11,0x38(%rsp)
063ac15e mov       %rsi,(%rsp)
063ac162 mov       %r11,8(%rsp)
063ac167 mov       %r10,(%rcx)
063ac16a mov       %r8,8(%rcx)
063ac16e mov       (%rsp),%r10
063ac172 mov       8(%rsp),%r8
063ac177 mov       %r10,0x10(%rcx)
063ac17b mov       %r8,0x18(%rcx)
063ac17f mov       %r9,0x20(%rcx)
063ac183 mov       %rdx,0x28(%rcx)
063ac187 add       $0x48,%rsp
063ac18b pop       %rsi
063ac18c ret

core::fmt::Arguments::new_v1:
063ac190 sub       $0xC8,%rsp
063ac197 mov       %r9,0x30(%rsp)
063ac19c mov       %r8,0x38(%rsp)
063ac1a1 mov       %rdx,0x40(%rsp)
063ac1a6 mov       %rcx,0x48(%rsp)
063ac1ab mov       %rcx,0x50(%rsp)
063ac1b0 mov       0xF0(%rsp),%rax
063ac1b8 mov       %rax,0x58(%rsp)
063ac1bd mov       %rdx,0xA8(%rsp)
063ac1c5 mov       %r8,0xB0(%rsp)
063ac1cd mov       %r9,0xB8(%rsp)
063ac1d5 mov       %rax,0xC0(%rsp)
063ac1dd cmp       %rax,%r8
063ac1e0 jb        0x0000`0000`063A`C1F9
063ac1e2 mov       0x58(%rsp),%rax
063ac1e7 add       $1,%rax
063ac1eb mov       %rax,0x28(%rsp)
063ac1f0 setb      %al
063ac1f3 test      $1,%al
063ac1f5 jne       0x0000`0000`063A`C223
063ac1f7 jmp       0x0000`0000`063A`C20B
063ac1f9 movb      $1,0x67(%rsp)
063ac1fe testb     $1,0x67(%rsp)
063ac203 jne       0x0000`0000`063A`C296
063ac209 jmp       0x0000`0000`063A`C23D
063ac20b mov       0x38(%rsp),%rax
063ac210 mov       0x28(%rsp),%rcx
063ac215 cmp       %rcx,%rax
063ac218 seta      %al
063ac21b and       $1,%al
063ac21d mov       %al,0x67(%rsp)
063ac221 jmp       0x0000`0000`063A`C1FE
063ac223 lea       0x63C`D090,%rcx
063ac22a lea       0x63C`D078,%r8
063ac231 mov       $0x1C,%edx
063ac236 call      0x0000`0000`063B`9FF0
063ac23b ud2
063ac23d mov       0x50(%rsp),%rax
063ac242 mov       0x48(%rsp),%rcx
063ac247 mov       0x58(%rsp),%rdx
063ac24c mov       0x30(%rsp),%r8
063ac251 mov       0x38(%rsp),%r9
063ac256 mov       0x40(%rsp),%r10
063ac25b movq      $0,0x98(%rsp)
063ac267 mov       %r10,(%rcx)
063ac26a mov       %r9,8(%rcx)
063ac26e mov       0x98(%rsp),%r10
063ac276 mov       0xA0(%rsp),%r9
063ac27e mov       %r10,0x10(%rcx)
063ac282 mov       %r9,0x18(%rcx)
063ac286 mov       %r8,0x20(%rcx)
063ac28a mov       %rdx,0x28(%rcx)
063ac28e add       $0xC8,%rsp
063ac295 ret
063ac296 lea       0x68(%rsp),%rcx
063ac29b lea       0x63C`D0B8,%rdx
063ac2a2 mov       $1,%r8d
063ac2a8 lea       0x63C`D0C8,%r9
063ac2af xor       %eax,%eax
063ac2b1 movq      $0,0x20(%rsp)
063ac2ba call      0x0000`0000`063A`C190
063ac2bf lea       0x63C`D0C8,%rdx
063ac2c6 lea       0x68(%rsp),%rcx
063ac2cb call      0x0000`0000`063B`A100
063ac2d0 ud2

core::sync::atomic::AtomicUsize::load:
063ac2e0 sub       $0x58,%rsp
063ac2e4 mov       %dl,0x37(%rsp)
063ac2e8 mov       %rcx,0x40(%rsp)
063ac2ed mov       %dl,0x4F(%rsp)
063ac2f1 mov       %rcx,0x38(%rsp)
063ac2f6 mov       %rcx,0x50(%rsp)
063ac2fb mov       0x37(%rsp),%dl
063ac2ff mov       0x38(%rsp),%rcx
063ac304 call      0x0000`0000`063B`A970
063ac309 mov       %rax,0x28(%rsp)
063ac30e mov       0x28(%rsp),%rax
063ac313 add       $0x58,%rsp
063ac317 ret

log::impl$4::le:
063ac320 sub       $0x10,%rsp
063ac324 mov       %rcx,(%rsp)
063ac328 mov       %rdx,8(%rsp)
063ac32d mov       (%rcx),%rax
063ac330 mov       (%rdx),%rcx
063ac333 cmp       %rcx,%rax
063ac336 setbe     %al
063ac339 and       $1,%al
063ac33b movzbl    %al,%eax
063ac33e add       $0x10,%rsp
063ac342 ret

uefi_div_bug::hide_u128:
063ac350 sub       $0x10,%rsp
063ac354 mov       %rcx,%rax
063ac357 mov       %rax,(%rsp)
063ac35b mov       %rdx,8(%rsp)
063ac360 add       $0x10,%rsp
063ac364 ret

uefi_div_bug::do_div:
063ac370 sub       $0x88,%rsp
063ac377 mov       %r9,0x20(%rsp)
063ac37c mov       %r8,0x28(%rsp)
063ac381 mov       %rdx,0x30(%rsp)
063ac386 mov       %rcx,0x38(%rsp)
063ac38b mov       %rcx,0x68(%rsp)
063ac390 mov       %rdx,0x70(%rsp)
063ac395 mov       %r9,0x80(%rsp)
063ac39d mov       %r8,0x78(%rsp)
063ac3a2 or        %r9,%r8
063ac3a5 sete      %al
063ac3a8 test      $1,%al
063ac3aa jne       0x0000`0000`063A`C3EB
063ac3ac mov       0x28(%rsp),%rax
063ac3b1 mov       0x20(%rsp),%rcx
063ac3b6 mov       0x30(%rsp),%rdx
063ac3bb mov       0x38(%rsp),%r8
063ac3c0 mov       %r8,0x50(%rsp)
063ac3c5 mov       %rdx,0x58(%rsp)
063ac3ca mov       %rcx,0x48(%rsp)
063ac3cf mov       %rax,0x40(%rsp)
063ac3d4 lea       0x50(%rsp),%rcx
063ac3d9 lea       0x40(%rsp),%rdx
063ac3de call      0x0000`0000`063C`BC60
063ac3e3 add       $0x88,%rsp
063ac3ea ret
063ac3eb lea       0x63C`D110,%rcx
063ac3f2 lea       0x63C`D0F0,%r8
063ac3f9 mov       $0x19,%edx
063ac3fe call      0x0000`0000`063B`9FF0
063ac403 ud2

uefi_div_bug::efi_main:
063ac410 sub       $0x458,%rsp
063ac417 mov       %rdx,0x138(%rsp)
063ac41f mov       %rcx,0x3F0(%rsp)
063ac427 lea       0x138(%rsp),%rcx
063ac42f call      0x0000`0000`063A`D570
063ac434 mov       %rax,0x128(%rsp)
063ac43c mov       %rdx,0x130(%rsp)
063ac444 mov       0x130(%rsp),%rdx
063ac44c mov       0x128(%rsp),%rcx
063ac454 lea       0x63C`D130,%r8
063ac45b call      0x0000`0000`063B`0020
063ac460 movq      $3,0x140(%rsp)
063ac46c lea       0x140(%rsp),%rcx
063ac474 lea       0x63C`D148,%rdx
063ac47b call      0x0000`0000`063A`C320
063ac480 mov       %al,0x127(%rsp)
063ac487 mov       0x127(%rsp),%al
063ac48e test      $1,%al
063ac490 jne       0x0000`0000`063A`C49E
063ac492 jmp       0x0000`0000`063A`C494
063ac494 movb      $0,0x14F(%rsp)
063ac49c jmp       0x0000`0000`063A`C4FD
063ac49e movb      $0,0x44F(%rsp)
063ac4a6 mov       0x44F(%rsp),%dl
063ac4ad mov       0x63D`3010,%rcx
063ac4b4 call      0x0000`0000`063A`C2E0
063ac4b9 mov       %rax,0x450(%rsp)
063ac4c1 mov       0x450(%rsp),%rax
063ac4c9 mov       %rax,0x150(%rsp)
063ac4d1 lea       0x140(%rsp),%rcx
063ac4d9 lea       0x150(%rsp),%rdx
063ac4e1 call      0x0000`0000`063A`C320
063ac4e6 mov       %al,0x126(%rsp)
063ac4ed mov       0x126(%rsp),%al
063ac4f4 and       $1,%al
063ac4f6 mov       %al,0x14F(%rsp)
063ac4fd testb     $1,0x14F(%rsp)
063ac505 jne       0x0000`0000`063A`C52A
063ac507 xor       %eax,%eax
063ac509 mov       %eax,%edx
063ac50b mov       $0x88`CC88,%ecx
063ac510 call      0x0000`0000`063A`C350
063ac515 mov       %rdx,0x1A0(%rsp)
063ac51d mov       %rax,0x198(%rsp)
063ac525 jmp       0x0000`0000`063A`C5D7
063ac52a lea       0x63C`D170,%rcx
063ac531 call      0x0000`0000`063A`C0F0
063ac536 mov       %rax,0x110(%rsp)
063ac53e mov       %rdx,0x118(%rsp)
063ac546 mov       0x118(%rsp),%rax
063ac54e mov       0x110(%rsp),%rcx
063ac556 mov       %rcx,0x188(%rsp)
063ac55e mov       %rax,0x190(%rsp)
063ac566 lea       0x188(%rsp),%rax
063ac56e mov       %rax,0x108(%rsp)
063ac576 mov       0x108(%rsp),%r9
063ac57e lea       0x158(%rsp),%rcx
063ac586 lea       0x63C`D160,%rdx
063ac58d mov       $1,%r8d
063ac593 lea       0x63C`D178,%rax
063ac59a movq      $1,0x20(%rsp)
063ac5a3 mov       %rax,0x28(%rsp)
063ac5a8 movq      $1,0x30(%rsp)
063ac5b1 call      0x0000`0000`063A`C120
063ac5b6 mov       0x140(%rsp),%rdx
063ac5be lea       0x158(%rsp),%rcx
063ac5c6 lea       0x63C`D1C0,%r8
063ac5cd call      0x0000`0000`063B`5200
063ac5d2 jmp       0x0000`0000`063A`C507
063ac5d7 xor       %eax,%eax
063ac5d9 mov       %eax,%edx
063ac5db mov       $0x77`BB77,%ecx
063ac5e0 call      0x0000`0000`063A`C350
063ac5e5 mov       %rdx,0x1B0(%rsp)
063ac5ed mov       %rax,0x1A8(%rsp)
063ac5f5 movq      $3,0x1B8(%rsp)
063ac601 lea       0x1B8(%rsp),%rcx
063ac609 lea       0x63C`D148,%rdx
063ac610 call      0x0000`0000`063A`C320
063ac615 mov       %al,0x107(%rsp)
063ac61c mov       0x107(%rsp),%al
063ac623 test      $1,%al
063ac625 jne       0x0000`0000`063A`C633
063ac627 jmp       0x0000`0000`063A`C629
063ac629 movb      $0,0x1C7(%rsp)
063ac631 jmp       0x0000`0000`063A`C692
063ac633 movb      $0,0x43F(%rsp)
063ac63b mov       0x43F(%rsp),%dl
063ac642 mov       0x63D`3010,%rcx
063ac649 call      0x0000`0000`063A`C2E0
063ac64e mov       %rax,0x440(%rsp)
063ac656 mov       0x440(%rsp),%rax
063ac65e mov       %rax,0x1C8(%rsp)
063ac666 lea       0x1B8(%rsp),%rcx
063ac66e lea       0x1C8(%rsp),%rdx
063ac676 call      0x0000`0000`063A`C320
063ac67b mov       %al,0x106(%rsp)
063ac682 mov       0x106(%rsp),%al
063ac689 and       $1,%al
063ac68b mov       %al,0x1C7(%rsp)
063ac692 testb     $1,0x1C7(%rsp)
063ac69a jne       0x0000`0000`063A`C6C8
063ac69c movq      $3,0x220(%rsp)
063ac6a8 lea       0x220(%rsp),%rcx
063ac6b0 lea       0x63C`D148,%rdx
063ac6b7 call      0x0000`0000`063A`C320
063ac6bc mov       %al,0x105(%rsp)
063ac6c3 jmp       0x0000`0000`063A`C78E
063ac6c8 lea       0x198(%rsp),%rcx
063ac6d0 call      0x0000`0000`063A`C000
063ac6d5 mov       %rax,0xF0(%rsp)
063ac6dd mov       %rdx,0xF8(%rsp)
063ac6e5 lea       0x1A8(%rsp),%rcx
063ac6ed call      0x0000`0000`063A`C000
063ac6f2 mov       %rax,0xE0(%rsp)
063ac6fa mov       %rdx,0xE8(%rsp)
063ac702 mov       0xE8(%rsp),%rax
063ac70a mov       0xE0(%rsp),%rcx
063ac712 mov       0xF8(%rsp),%rdx
063ac71a mov       0xF0(%rsp),%r8
063ac722 mov       %r8,0x200(%rsp)
063ac72a mov       %rdx,0x208(%rsp)
063ac732 mov       %rcx,0x210(%rsp)
063ac73a mov       %rax,0x218(%rsp)
063ac742 lea       0x200(%rsp),%r9
063ac74a lea       0x1D0(%rsp),%rcx
063ac752 lea       0x63C`D200,%rdx
063ac759 mov       $2,%r8d
063ac75f movq      $2,0x20(%rsp)
063ac768 call      0x0000`0000`063A`C190
063ac76d mov       0x1B8(%rsp),%rdx
063ac775 lea       0x1D0(%rsp),%rcx
063ac77d lea       0x63C`D220,%r8
063ac784 call      0x0000`0000`063B`5200
063ac789 jmp       0x0000`0000`063A`C69C
063ac78e mov       0x105(%rsp),%al
063ac795 test      $1,%al
063ac797 jne       0x0000`0000`063A`C7A5
063ac799 jmp       0x0000`0000`063A`C79B
063ac79b movb      $0,0x22F(%rsp)
063ac7a3 jmp       0x0000`0000`063A`C804
063ac7a5 movb      $0,0x42F(%rsp)
063ac7ad mov       0x42F(%rsp),%dl
063ac7b4 mov       0x63D`3010,%rcx
063ac7bb call      0x0000`0000`063A`C2E0
063ac7c0 mov       %rax,0x430(%rsp)
063ac7c8 mov       0x430(%rsp),%rax
063ac7d0 mov       %rax,0x230(%rsp)
063ac7d8 lea       0x220(%rsp),%rcx
063ac7e0 lea       0x230(%rsp),%rdx
063ac7e8 call      0x0000`0000`063A`C320
063ac7ed mov       %al,0xDF(%rsp)
063ac7f4 mov       0xDF(%rsp),%al
063ac7fb and       $1,%al
063ac7fd mov       %al,0x22F(%rsp)
063ac804 testb     $1,0x22F(%rsp)
063ac80c jne       0x0000`0000`063A`C83A
063ac80e movq      $3,0x288(%rsp)
063ac81a lea       0x288(%rsp),%rcx
063ac822 lea       0x63C`D148,%rdx
063ac829 call      0x0000`0000`063A`C320
063ac82e mov       %al,0xDE(%rsp)
063ac835 jmp       0x0000`0000`063A`C93C
063ac83a mov       0x198(%rsp),%rdx
063ac842 mov       0x1A0(%rsp),%rcx
063ac84a mov       0x1A8(%rsp),%r8
063ac852 mov       0x1B0(%rsp),%rax
063ac85a add       %r8,%rdx
063ac85d mov       %rdx,0xC8(%rsp)
063ac865 adc       %rax,%rcx
063ac868 setb      %al
063ac86b mov       %rcx,0xD0(%rsp)
063ac873 test      $1,%al
063ac875 jne       0x0000`0000`063A`C8B6
063ac877 mov       0xD0(%rsp),%rax
063ac87f mov       0xC8(%rsp),%rcx
063ac887 mov       %rcx,0x278(%rsp)
063ac88f mov       %rax,0x280(%rsp)
063ac897 lea       0x278(%rsp),%rcx
063ac89f call      0x0000`0000`063A`C000
063ac8a4 mov       %rax,0xB8(%rsp)
063ac8ac mov       %rdx,0xC0(%rsp)
063ac8b4 jmp       0x0000`0000`063A`C8D0
063ac8b6 lea       0x63C`D090,%rcx
063ac8bd lea       0x63C`D270,%r8
063ac8c4 mov       $0x1C,%edx
063ac8c9 call      0x0000`0000`063B`9FF0
063ac8ce ud2
063ac8d0 mov       0xC0(%rsp),%rax
063ac8d8 mov       0xB8(%rsp),%rcx
063ac8e0 mov       %rcx,0x268(%rsp)
063ac8e8 mov       %rax,0x270(%rsp)
063ac8f0 lea       0x268(%rsp),%r9
063ac8f8 lea       0x238(%rsp),%rcx
063ac900 lea       0x63C`D260,%rdx
063ac907 mov       $1,%r8d
063ac90d movq      $1,0x20(%rsp)
063ac916 call      0x0000`0000`063A`C190
063ac91b mov       0x220(%rsp),%rdx
063ac923 lea       0x238(%rsp),%rcx
063ac92b lea       0x63C`D288,%r8
063ac932 call      0x0000`0000`063B`5200
063ac937 jmp       0x0000`0000`063A`C80E
063ac93c mov       0xDE(%rsp),%al
063ac943 test      $1,%al
063ac945 jne       0x0000`0000`063A`C953
063ac947 jmp       0x0000`0000`063A`C949
063ac949 movb      $0,0x297(%rsp)
063ac951 jmp       0x0000`0000`063A`C9B2
063ac953 movb      $0,0x41F(%rsp)
063ac95b mov       0x41F(%rsp),%dl
063ac962 mov       0x63D`3010,%rcx
063ac969 call      0x0000`0000`063A`C2E0
063ac96e mov       %rax,0x420(%rsp)
063ac976 mov       0x420(%rsp),%rax
063ac97e mov       %rax,0x298(%rsp)
063ac986 lea       0x288(%rsp),%rcx
063ac98e lea       0x298(%rsp),%rdx
063ac996 call      0x0000`0000`063A`C320
063ac99b mov       %al,0xB7(%rsp)
063ac9a2 mov       0xB7(%rsp),%al
063ac9a9 and       $1,%al
063ac9ab mov       %al,0x297(%rsp)
063ac9b2 testb     $1,0x297(%rsp)
063ac9ba jne       0x0000`0000`063A`C9E8
063ac9bc movq      $3,0x2F0(%rsp)
063ac9c8 lea       0x2F0(%rsp),%rcx
063ac9d0 lea       0x63C`D148,%rdx
063ac9d7 call      0x0000`0000`063A`C320
063ac9dc mov       %al,0xB6(%rsp)
063ac9e3 jmp       0x0000`0000`063A`CAEA
063ac9e8 mov       0x198(%rsp),%rdx
063ac9f0 mov       0x1A0(%rsp),%rcx
063ac9f8 mov       0x1A8(%rsp),%r8
063aca00 mov       0x1B0(%rsp),%rax
063aca08 sub       %r8,%rdx
063aca0b mov       %rdx,0xA0(%rsp)
063aca13 sbb       %rax,%rcx
063aca16 setb      %al
063aca19 mov       %rcx,0xA8(%rsp)
063aca21 test      $1,%al
063aca23 jne       0x0000`0000`063A`CA64
063aca25 mov       0xA8(%rsp),%rax
063aca2d mov       0xA0(%rsp),%rcx
063aca35 mov       %rcx,0x2E0(%rsp)
063aca3d mov       %rax,0x2E8(%rsp)
063aca45 lea       0x2E0(%rsp),%rcx
063aca4d call      0x0000`0000`063A`C000
063aca52 mov       %rax,0x90(%rsp)
063aca5a mov       %rdx,0x98(%rsp)
063aca62 jmp       0x0000`0000`063A`CA7E
063aca64 lea       0x63C`D2F0,%rcx
063aca6b lea       0x63C`D2D8,%r8
063aca72 mov       $0x21,%edx
063aca77 call      0x0000`0000`063B`9FF0
063aca7c ud2
063aca7e mov       0x98(%rsp),%rax
063aca86 mov       0x90(%rsp),%rcx
063aca8e mov       %rcx,0x2D0(%rsp)
063aca96 mov       %rax,0x2D8(%rsp)
063aca9e lea       0x2D0(%rsp),%r9
063acaa6 lea       0x2A0(%rsp),%rcx
063acaae lea       0x63C`D2C8,%rdx
063acab5 mov       $1,%r8d
063acabb movq      $1,0x20(%rsp)
063acac4 call      0x0000`0000`063A`C190
063acac9 mov       0x288(%rsp),%rdx
063acad1 lea       0x2A0(%rsp),%rcx
063acad9 lea       0x63C`D318,%r8
063acae0 call      0x0000`0000`063B`5200
063acae5 jmp       0x0000`0000`063A`C9BC
063acaea mov       0xB6(%rsp),%al
063acaf1 test      $1,%al
063acaf3 jne       0x0000`0000`063A`CB01
063acaf5 jmp       0x0000`0000`063A`CAF7
063acaf7 movb      $0,0x2FF(%rsp)
063acaff jmp       0x0000`0000`063A`CB60
063acb01 movb      $0,0x40F(%rsp)
063acb09 mov       0x40F(%rsp),%dl
063acb10 mov       0x63D`3010,%rcx
063acb17 call      0x0000`0000`063A`C2E0
063acb1c mov       %rax,0x410(%rsp)
063acb24 mov       0x410(%rsp),%rax
063acb2c mov       %rax,0x300(%rsp)
063acb34 lea       0x2F0(%rsp),%rcx
063acb3c lea       0x300(%rsp),%rdx
063acb44 call      0x0000`0000`063A`C320
063acb49 mov       %al,0x8F(%rsp)
063acb50 mov       0x8F(%rsp),%al
063acb57 and       $1,%al
063acb59 mov       %al,0x2FF(%rsp)
063acb60 testb     $1,0x2FF(%rsp)
063acb68 jne       0x0000`0000`063A`CB96
063acb6a movq      $3,0x358(%rsp)
063acb76 lea       0x358(%rsp),%rcx
063acb7e lea       0x63C`D148,%rdx
063acb85 call      0x0000`0000`063A`C320
063acb8a mov       %al,0x8E(%rsp)
063acb91 jmp       0x0000`0000`063A`CCDC
063acb96 mov       0x198(%rsp),%rax
063acb9e mov       %rax,0x68(%rsp)
063acba3 mov       0x1A0(%rsp),%rax
063acbab mov       0x1A8(%rsp),%rcx
063acbb3 mov       0x1B0(%rsp),%rdx
063acbbb mov       %rdx,0x60(%rsp)
063acbc0 test      %rdx,%rdx
063acbc3 setne     %dl
063acbc6 test      %rax,%rax
063acbc9 setne     %r9b
063acbcd and       %dl,%r9b
063acbd0 mul       %rcx
063acbd3 mov       0x68(%rsp),%rdx
063acbd8 mov       %rax,%r8
063acbdb mov       0x60(%rsp),%rax
063acbe0 seto      %r10b
063acbe4 or        %r10b,%r9b
063acbe7 mul       %rdx
063acbea mov       %rax,%rdx
063acbed mov       0x68(%rsp),%rax
063acbf2 seto      %r10b
063acbf6 or        %r10b,%r9b
063acbf9 mov       %r9b,0x77(%rsp)
063acbfe add       %rdx,%r8
063acc01 mul       %rcx
063acc04 mov       %rax,%rcx
063acc07 mov       0x77(%rsp),%al
063acc0b add       %r8,%rdx
063acc0e mov       %rdx,0x78(%rsp)
063acc13 setb      %r8b
063acc17 or        %r8b,%al
063acc1a mov       %rcx,0x80(%rsp)
063acc22 test      $1,%al
063acc24 jne       0x0000`0000`063A`CC5C
063acc26 mov       0x78(%rsp),%rax
063acc2b mov       0x80(%rsp),%rcx
063acc33 mov       %rcx,0x348(%rsp)
063acc3b mov       %rax,0x350(%rsp)
063acc43 lea       0x348(%rsp),%rcx
063acc4b call      0x0000`0000`063A`C000
063acc50 mov       %rax,0x50(%rsp)
063acc55 mov       %rdx,0x58(%rsp)
063acc5a jmp       0x0000`0000`063A`CC76
063acc5c lea       0x63C`D380,%rcx
063acc63 lea       0x63C`D368,%r8
063acc6a mov       $0x21,%edx
063acc6f call      0x0000`0000`063B`9FF0
063acc74 ud2
063acc76 mov       0x58(%rsp),%rax
063acc7b mov       0x50(%rsp),%rcx
063acc80 mov       %rcx,0x338(%rsp)
063acc88 mov       %rax,0x340(%rsp)
063acc90 lea       0x338(%rsp),%r9
063acc98 lea       0x308(%rsp),%rcx
063acca0 lea       0x63C`D358,%rdx
063acca7 mov       $1,%r8d
063accad movq      $1,0x20(%rsp)
063accb6 call      0x0000`0000`063A`C190
063accbb mov       0x2F0(%rsp),%rdx
063accc3 lea       0x308(%rsp),%rcx
063acccb lea       0x63C`D3A8,%r8
063accd2 call      0x0000`0000`063B`5200
063accd7 jmp       0x0000`0000`063A`CB6A
063accdc mov       0x8E(%rsp),%al
063acce3 test      $1,%al
063acce5 jne       0x0000`0000`063A`CCF3
063acce7 jmp       0x0000`0000`063A`CCE9
063acce9 movb      $0,0x367(%rsp)
063accf1 jmp       0x0000`0000`063A`CD4C
063accf3 movb      $0,0x3FF(%rsp)
063accfb mov       0x3FF(%rsp),%dl
063acd02 mov       0x63D`3010,%rcx
063acd09 call      0x0000`0000`063A`C2E0
063acd0e mov       %rax,0x400(%rsp)
063acd16 mov       0x400(%rsp),%rax
063acd1e mov       %rax,0x368(%rsp)
063acd26 lea       0x358(%rsp),%rcx
063acd2e lea       0x368(%rsp),%rdx
063acd36 call      0x0000`0000`063A`C320
063acd3b mov       %al,0x4F(%rsp)
063acd3f mov       0x4F(%rsp),%al
063acd43 and       $1,%al
063acd45 mov       %al,0x367(%rsp)
063acd4c testb     $1,0x367(%rsp)
063acd54 jne       0x0000`0000`063A`CD87
063acd56 lea       0x3C0(%rsp),%rcx
063acd5e lea       0x63C`D440,%rdx
063acd65 mov       $1,%r8d
063acd6b lea       0x63C`D0C8,%r9
063acd72 xor       %eax,%eax
063acd74 movq      $0,0x20(%rsp)
063acd7d call      0x0000`0000`063A`C190
063acd82 jmp       0x0000`0000`063A`CE39
063acd87 mov       0x198(%rsp),%rcx
063acd8f mov       0x1A0(%rsp),%rdx
063acd97 mov       0x1A8(%rsp),%r8
063acd9f mov       0x1B0(%rsp),%r9
063acda7 call      0x0000`0000`063A`C370
063acdac mov       %rdx,0x3B8(%rsp)
063acdb4 mov       %rax,0x3B0(%rsp)
063acdbc lea       0x3B0(%rsp),%rcx
063acdc4 call      0x0000`0000`063A`C000
063acdc9 mov       %rax,0x38(%rsp)
063acdce mov       %rdx,0x40(%rsp)
063acdd3 mov       0x40(%rsp),%rax
063acdd8 mov       0x38(%rsp),%rcx
063acddd mov       %rcx,0x3A0(%rsp)
063acde5 mov       %rax,0x3A8(%rsp)
063acded lea       0x3A0(%rsp),%r9
063acdf5 lea       0x370(%rsp),%rcx
063acdfd lea       0x63C`D3E8,%rdx
063ace04 mov       $1,%r8d
063ace0a movq      $1,0x20(%rsp)
063ace13 call      0x0000`0000`063A`C190
063ace18 mov       0x358(%rsp),%rdx
063ace20 lea       0x370(%rsp),%rcx
063ace28 lea       0x63C`D3F8,%r8
063ace2f call      0x0000`0000`063B`5200
063ace34 jmp       0x0000`0000`063A`CD56
063ace39 lea       0x63C`D450,%rdx
063ace40 lea       0x3C0(%rsp),%rcx
063ace48 call      0x0000`0000`063B`A100
063ace4d ud2

log::set_max_level:
063ace50 sub       $0x38,%rsp
063ace54 mov       %rcx,%rdx
063ace57 mov       %rdx,0x30(%rsp)
063ace5c movb      $4,0x2F(%rsp)
063ace61 mov       0x2F(%rsp),%r8b
063ace66 mov       0x63D`3010,%rcx
063ace6d call      0x0000`0000`063A`D220
063ace72 add       $0x38,%rsp
063ace76 ret

core::iter::range::impl$35::forward_unchecked:
063ace80 sub       $0x30,%rsp
063ace84 mov       %rcx,8(%rsp)
063ace89 mov       %rdx,0x10(%rsp)
063ace8e mov       %rcx,0x18(%rsp)
063ace93 mov       %rdx,0x20(%rsp)
063ace98 add       %rdx,%rcx
063ace9b mov       %rcx,0x28(%rsp)
063acea0 mov       0x28(%rsp),%rax
063acea5 mov       %rax,(%rsp)
063acea9 mov       (%rsp),%rax
063acead add       $0x30,%rsp
063aceb1 ret

core::intrinsics::is_aligned_and_not_null<u64>:
063acec0 sub       $0x38,%rsp
063acec4 mov       %rcx,0x20(%rsp)
063acec9 mov       %rcx,0x30(%rsp)
063acece call      0x0000`0000`063A`EAF0
063aced3 mov       %al,0x2E(%rsp)
063aced7 mov       0x2E(%rsp),%al
063acedb xor       $0xFF,%al
063acedd test      $1,%al
063acedf jne       0x0000`0000`063A`CEE8
063acee1 movb      $0,0x2F(%rsp)
063acee6 jmp       0x0000`0000`063A`CF2A
063acee8 mov       $8,%eax
063aceed cmp       $0,%rax
063acef1 sete      %al
063acef4 test      $1,%al
063acef6 jne       0x0000`0000`063A`CF10
063acef8 mov       0x20(%rsp),%rax
063acefd and       $7,%rax
063acf01 cmp       $0,%rax
063acf05 sete      %al
063acf08 and       $1,%al
063acf0a mov       %al,0x2F(%rsp)
063acf0e jmp       0x0000`0000`063A`CF2A
063acf10 lea       0x63C`D500,%rcx
063acf17 lea       0x63C`D4E8,%r8
063acf1e mov       $0x39,%edx
063acf23 call      0x0000`0000`063B`9FF0
063acf28 ud2
063acf2a mov       0x2F(%rsp),%al
063acf2e and       $1,%al
063acf30 movzbl    %al,%eax
063acf33 add       $0x38,%rsp
063acf37 ret

core::cmp::impls::impl$62::lt:
063acf40 sub       $0x10,%rsp
063acf44 mov       %rcx,(%rsp)
063acf48 mov       %rdx,8(%rsp)
063acf4d mov       (%rcx),%rax
063acf50 cmp       (%rdx),%rax
063acf53 setb      %al
063acf56 and       $1,%al
063acf58 movzbl    %al,%eax
063acf5b add       $0x10,%rsp
063acf5f ret

core::fmt::Arguments::new_v1:
063acf60 sub       $0xC8,%rsp
063acf67 mov       %r9,0x30(%rsp)
063acf6c mov       %r8,0x38(%rsp)
063acf71 mov       %rdx,0x40(%rsp)
063acf76 mov       %rcx,0x48(%rsp)
063acf7b mov       %rcx,0x50(%rsp)
063acf80 mov       0xF0(%rsp),%rax
063acf88 mov       %rax,0x58(%rsp)
063acf8d mov       %rdx,0xA8(%rsp)
063acf95 mov       %r8,0xB0(%rsp)
063acf9d mov       %r9,0xB8(%rsp)
063acfa5 mov       %rax,0xC0(%rsp)
063acfad cmp       %rax,%r8
063acfb0 jb        0x0000`0000`063A`CFC9
063acfb2 mov       0x58(%rsp),%rax
063acfb7 add       $1,%rax
063acfbb mov       %rax,0x28(%rsp)
063acfc0 setb      %al
063acfc3 test      $1,%al
063acfc5 jne       0x0000`0000`063A`CFF3
063acfc7 jmp       0x0000`0000`063A`CFDB
063acfc9 movb      $1,0x67(%rsp)
063acfce testb     $1,0x67(%rsp)
063acfd3 jne       0x0000`0000`063A`D066
063acfd9 jmp       0x0000`0000`063A`D00D
063acfdb mov       0x38(%rsp),%rax
063acfe0 mov       0x28(%rsp),%rcx
063acfe5 cmp       %rcx,%rax
063acfe8 seta      %al
063acfeb and       $1,%al
063acfed mov       %al,0x67(%rsp)
063acff1 jmp       0x0000`0000`063A`CFCE
063acff3 lea       0x63C`D5D0,%rcx
063acffa lea       0x63C`D5B0,%r8
063ad001 mov       $0x1C,%edx
063ad006 call      0x0000`0000`063B`9FF0
063ad00b ud2
063ad00d mov       0x50(%rsp),%rax
063ad012 mov       0x48(%rsp),%rcx
063ad017 mov       0x58(%rsp),%rdx
063ad01c mov       0x30(%rsp),%r8
063ad021 mov       0x38(%rsp),%r9
063ad026 mov       0x40(%rsp),%r10
063ad02b movq      $0,0x98(%rsp)
063ad037 mov       %r10,(%rcx)
063ad03a mov       %r9,8(%rcx)
063ad03e mov       0x98(%rsp),%r10
063ad046 mov       0xA0(%rsp),%r9
063ad04e mov       %r10,0x10(%rcx)
063ad052 mov       %r9,0x18(%rcx)
063ad056 mov       %r8,0x20(%rcx)
063ad05a mov       %rdx,0x28(%rcx)
063ad05e add       $0xC8,%rsp
063ad065 ret
063ad066 lea       0x68(%rsp),%rcx
063ad06b lea       0x63C`D5F8,%rdx
063ad072 mov       $1,%r8d
063ad078 lea       0x63C`D608,%r9
063ad07f xor       %eax,%eax
063ad081 movq      $0,0x20(%rsp)
063ad08a call      0x0000`0000`063A`CF60
063ad08f lea       0x63C`D608,%rdx
063ad096 lea       0x68(%rsp),%rcx
063ad09b call      0x0000`0000`063B`A100
063ad0a0 ud2

core::mem::replace<u64>:
063ad0b0 sub       $0x58,%rsp
063ad0b4 mov       %rdx,0x28(%rsp)
063ad0b9 mov       %rcx,0x30(%rsp)
063ad0be mov       %rcx,0x40(%rsp)
063ad0c3 mov       %rdx,0x48(%rsp)
063ad0c8 call      0x0000`0000`063A`D160
063ad0cd mov       %rax,0x38(%rsp)
063ad0d2 mov       %rax,0x50(%rsp)
063ad0d7 mov       0x28(%rsp),%rdx
063ad0dc mov       0x30(%rsp),%rcx
063ad0e1 call      0x0000`0000`063A`E900
063ad0e6 mov       0x38(%rsp),%rax
063ad0eb add       $0x58,%rsp
063ad0ef ret

core::ptr::write_volatile<u64>:
063ad0f0 sub       $0x48,%rsp
063ad0f4 mov       %rdx,0x20(%rsp)
063ad0f9 mov       %rcx,0x28(%rsp)
063ad0fe mov       %rcx,0x38(%rsp)
063ad103 mov       %rdx,0x40(%rsp)
063ad108 call      0x0000`0000`063A`CEC0
063ad10d mov       %al,0x37(%rsp)
063ad111 mov       0x37(%rsp),%al
063ad115 xor       $0xFF,%al
063ad117 test      $1,%al
063ad119 jne       0x0000`0000`063A`D12A
063ad11b mov       0x28(%rsp),%rax
063ad120 mov       0x20(%rsp),%rcx
063ad125 mov       %rcx,(%rax)
063ad128 jmp       0x0000`0000`063A`D12E
063ad12a ud2
063ad12c ud2
063ad12e add       $0x48,%rsp
063ad132 ret

core::ptr::drop_in_place<log::SetLoggerError>:
063ad140 push      %rax
063ad141 mov       %rcx,(%rsp)
063ad145 pop       %rax
063ad146 ret

core::ptr::drop_in_place<uefi::logger::Logger>:
063ad150 push      %rax
063ad151 mov       %rcx,(%rsp)
063ad155 pop       %rax
063ad156 ret

core::ptr::read<u64>:
063ad160 sub       $0x40,%rsp
063ad164 mov       %rcx,8(%rsp)
063ad169 mov       %rcx,0x18(%rsp)
063ad16e mov       0x30(%rsp),%rax
063ad173 mov       %rax,0x10(%rsp)
063ad178 lea       0x10(%rsp),%rax
063ad17d mov       %rax,0x20(%rsp)
063ad182 mov       8(%rsp),%rax
063ad187 mov       (%rax),%rax
063ad18a mov       %rax,0x10(%rsp)
063ad18f mov       0x10(%rsp),%rax
063ad194 mov       %rax,(%rsp)
063ad198 mov       %rax,0x28(%rsp)
063ad19d mov       %rax,0x38(%rsp)
063ad1a2 mov       (%rsp),%rax
063ad1a6 add       $0x40,%rsp
063ad1aa ret

core::iter::range::impl$3::next<u64>:
063ad1b0 sub       $0x38,%rsp
063ad1b4 mov       %rcx,0x30(%rsp)
063ad1b9 call      0x0000`0000`063A`D4D0
063ad1be mov       %rax,0x20(%rsp)
063ad1c3 mov       %rdx,0x28(%rsp)
063ad1c8 mov       0x28(%rsp),%rdx
063ad1cd mov       0x20(%rsp),%rax
063ad1d2 add       $0x38,%rsp
063ad1d6 ret

core::sync::atomic::AtomicUsize::load:
063ad1e0 sub       $0x58,%rsp
063ad1e4 mov       %dl,0x37(%rsp)
063ad1e8 mov       %rcx,0x40(%rsp)
063ad1ed mov       %dl,0x4F(%rsp)
063ad1f1 mov       %rcx,0x38(%rsp)
063ad1f6 mov       %rcx,0x50(%rsp)
063ad1fb mov       0x37(%rsp),%dl
063ad1ff mov       0x38(%rsp),%rcx
063ad204 call      0x0000`0000`063B`A970
063ad209 mov       %rax,0x28(%rsp)
063ad20e mov       0x28(%rsp),%rax
063ad213 add       $0x58,%rsp
063ad217 ret

core::sync::atomic::AtomicUsize::store:
063ad220 sub       $0x58,%rsp
063ad224 mov       %r8b,0x27(%rsp)
063ad229 mov       %rdx,0x28(%rsp)
063ad22e mov       %rcx,0x38(%rsp)
063ad233 mov       %rdx,0x40(%rsp)
063ad238 mov       %r8b,0x4F(%rsp)
063ad23d mov       %rcx,0x30(%rsp)
063ad242 mov       %rcx,0x50(%rsp)
063ad247 mov       0x27(%rsp),%r8b
063ad24c mov       0x28(%rsp),%rdx
063ad251 mov       0x30(%rsp),%rcx
063ad256 call      0x0000`0000`063B`43F0
063ad25b add       $0x58,%rsp
063ad25f ret

core::clone::impls::impl$9::clone:
063ad260 push      %rax
063ad261 mov       %rcx,(%rsp)
063ad265 mov       (%rcx),%rax
063ad268 pop       %rcx
063ad269 ret

enum$<core::option::Option<uefi::table::system::SystemTable<uefi::table::system::Boot> >, 1, 18446744073709551615, Some>::as_ref<uefi::table::system::SystemTable<uefi::table::system::Boot> >:
063ad270 sub       $0x20,%rsp
063ad274 mov       %rcx,(%rsp)
063ad278 mov       %rcx,0x10(%rsp)
063ad27d mov       (%rcx),%rax
063ad280 test      %rax,%rax
063ad283 setne     %al
063ad286 movzbl    %al,%eax
063ad289 je        0x0000`0000`063A`D291
063ad28b jmp       0x0000`0000`063A`D28D
063ad28d jmp       0x0000`0000`063A`D29C
063ad28f ud2
063ad291 movq      $0,8(%rsp)
063ad29a jmp       0x0000`0000`063A`D2AA
063ad29c mov       (%rsp),%rax
063ad2a0 mov       %rax,0x18(%rsp)
063ad2a5 mov       %rax,8(%rsp)
063ad2aa mov       8(%rsp),%rax
063ad2af add       $0x20,%rsp
063ad2b3 ret

enum$<core::option::Option<uefi::logger::Logger> >::as_ref<uefi::logger::Logger>:
063ad2c0 sub       $0x20,%rsp
063ad2c4 mov       %rcx,(%rsp)
063ad2c8 mov       %rcx,0x10(%rsp)
063ad2cd mov       (%rcx),%rax
063ad2d0 test      %rax,%rax
063ad2d3 je        0x0000`0000`063A`D2DB
063ad2d5 jmp       0x0000`0000`063A`D2D7
063ad2d7 jmp       0x0000`0000`063A`D2E6
063ad2d9 ud2
063ad2db movq      $0,8(%rsp)
063ad2e4 jmp       0x0000`0000`063A`D2F8
063ad2e6 mov       (%rsp),%rax
063ad2ea add       $8,%rax
063ad2ee mov       %rax,0x18(%rsp)
063ad2f3 mov       %rax,8(%rsp)
063ad2f8 mov       8(%rsp),%rax
063ad2fd add       $0x20,%rsp
063ad301 ret

enum$<core::option::Option<ref$<uefi::logger::Logger> >, 1, 18446744073709551615, Some>::unwrap<ref$<uefi::logger::Logger> >:
063ad310 sub       $0x38,%rsp
063ad314 mov       %rdx,0x20(%rsp)
063ad319 mov       %rcx,0x28(%rsp)
063ad31e mov       0x28(%rsp),%rax
063ad323 test      %rax,%rax
063ad326 setne     %al
063ad329 movzbl    %al,%eax
063ad32c je        0x0000`0000`063A`D334
063ad32e jmp       0x0000`0000`063A`D330
063ad330 jmp       0x0000`0000`063A`D34C
063ad332 ud2
063ad334 mov       0x20(%rsp),%r8
063ad339 lea       0x63C`D620,%rcx
063ad340 mov       $0x2B,%edx
063ad345 call      0x0000`0000`063B`9FF0
063ad34a ud2
063ad34c mov       0x28(%rsp),%rax
063ad351 mov       %rax,0x30(%rsp)
063ad356 add       $0x38,%rsp
063ad35a ret

enum$<core::option::Option<uefi::table::system::SystemTable<uefi::table::system::Boot> >, 1, 18446744073709551615, Some>::is_some<uefi::table::system::SystemTable<uefi::table::system::Boot> >:
063ad360 sub       $0x10,%rsp
063ad364 mov       %rcx,%rdx
063ad367 mov       %rdx,8(%rsp)
063ad36c mov       $1,%eax
063ad371 xor       %ecx,%ecx
063ad373 cmpq      $0,(%rdx)
063ad377 cmove     %rcx,%rax
063ad37b cmp       $1,%rax
063ad37f jne       0x0000`0000`063A`D388
063ad381 movb      $1,7(%rsp)
063ad386 jmp       0x0000`0000`063A`D38D
063ad388 movb      $0,7(%rsp)
063ad38d mov       7(%rsp),%al
063ad391 and       $1,%al
063ad393 movzbl    %al,%eax
063ad396 add       $0x10,%rsp
063ad39a ret

enum$<core::result::Result<uefi::data_types::Event,uefi::result::error::Error<tuple$<> > > >::map<uefi::data_types::Event,uefi::result::error::Error<tuple$<> >,tuple$<>,uefi_services::init::closure_env$0>:
063ad3a0 sub       $0x68,%rsp
063ad3a4 mov       %rcx,0x28(%rsp)
063ad3a9 movb      $0,0x4F(%rsp)
063ad3ae movb      $1,0x4F(%rsp)
063ad3b3 mov       (%rcx),%rax
063ad3b6 test      %rax,%rax
063ad3b9 je        0x0000`0000`063A`D3C1
063ad3bb jmp       0x0000`0000`063A`D3BD
063ad3bd jmp       0x0000`0000`063A`D3E5
063ad3bf ud2
063ad3c1 mov       0x28(%rsp),%rax
063ad3c6 mov       8(%rax),%rax
063ad3ca mov       %rax,0x60(%rsp)
063ad3cf movb      $0,0x4F(%rsp)
063ad3d4 mov       %rax,0x40(%rsp)
063ad3d9 mov       0x40(%rsp),%rcx
063ad3de call      0x0000`0000`063A`D680
063ad3e3 jmp       0x0000`0000`063A`D40A
063ad3e5 mov       0x28(%rsp),%rax
063ad3ea mov       8(%rax),%rax
063ad3ee mov       %rax,0x58(%rsp)
063ad3f3 mov       %rax,0x38(%rsp)
063ad3f8 movq      $1,0x30(%rsp)
063ad401 testb     $1,0x4F(%rsp)
063ad406 jne       0x0000`0000`063A`D424
063ad408 jmp       0x0000`0000`063A`D415
063ad40a movq      $0,0x30(%rsp)
063ad413 jmp       0x0000`0000`063A`D401
063ad415 mov       0x30(%rsp),%rax
063ad41a mov       0x38(%rsp),%rdx
063ad41f add       $0x68,%rsp
063ad423 ret
063ad424 jmp       0x0000`0000`063A`D415

core::result::Result::unwrap<tuple$<>,log::SetLoggerError>:
063ad430 sub       $0x48,%rsp
063ad434 mov       %rdx,0x28(%rsp)
063ad439 and       $1,%cl
063ad43c mov       %cl,0x37(%rsp)
063ad440 movzbl    0x37(%rsp),%eax
063ad445 test      $1,%al
063ad447 je        0x0000`0000`063A`D44F
063ad449 jmp       0x0000`0000`063A`D44B
063ad44b jmp       0x0000`0000`063A`D454
063ad44d ud2
063ad44f add       $0x48,%rsp
063ad453 ret
063ad454 mov       0x28(%rsp),%rcx
063ad459 mov       %rsp,%rax
063ad45c mov       %rcx,0x20(%rax)
063ad460 lea       0x63C`D64B,%rcx
063ad467 lea       0x63C`D678,%r9
063ad46e mov       $0x2B,%edx
063ad473 lea       0x38(%rsp),%r8
063ad478 call      0x0000`0000`063B`A710
063ad47d ud2

core::iter::traits::collect::impl$0::into_iter<core::ops::range::Range<u64> >:
063ad480 sub       $0x10,%rsp
063ad484 mov       %rcx,%rax
063ad487 mov       %rax,(%rsp)
063ad48b mov       %rdx,8(%rsp)
063ad490 add       $0x10,%rsp
063ad494 ret

log::impl$4::le:
063ad4a0 sub       $0x10,%rsp
063ad4a4 mov       %rcx,(%rsp)
063ad4a8 mov       %rdx,8(%rsp)
063ad4ad mov       (%rcx),%rax
063ad4b0 mov       (%rdx),%rcx
063ad4b3 cmp       %rcx,%rax
063ad4b6 setbe     %al
063ad4b9 and       $1,%al
063ad4bb movzbl    %al,%eax
063ad4be add       $0x10,%rsp
063ad4c2 ret

core::iter::range::impl$2::spec_next<u64>:
063ad4d0 sub       $0x68,%rsp
063ad4d4 mov       %rcx,%rdx
063ad4d7 mov       %rdx,0x38(%rsp)
063ad4dc mov       %rdx,0x58(%rsp)
063ad4e1 mov       %rdx,%rcx
063ad4e4 add       $8,%rdx
063ad4e8 call      0x0000`0000`063A`CF40
063ad4ed mov       %al,0x47(%rsp)
063ad4f1 mov       0x47(%rsp),%al
063ad4f5 test      $1,%al
063ad4f7 jne       0x0000`0000`063A`D506
063ad4f9 jmp       0x0000`0000`063A`D4FB
063ad4fb movq      $0,0x48(%rsp)
063ad504 jmp       0x0000`0000`063A`D555
063ad506 mov       0x38(%rsp),%rcx
063ad50b call      0x0000`0000`063A`D260
063ad510 mov       %rax,0x30(%rsp)
063ad515 mov       0x30(%rsp),%rcx
063ad51a mov       $1,%edx
063ad51f call      0x0000`0000`063A`CE80
063ad524 mov       %rax,0x28(%rsp)
063ad529 mov       %rax,0x60(%rsp)
063ad52e mov       0x28(%rsp),%rdx
063ad533 mov       0x38(%rsp),%rcx
063ad538 call      0x0000`0000`063A`D0B0
063ad53d mov       %rax,0x20(%rsp)
063ad542 mov       0x20(%rsp),%rax
063ad547 mov       %rax,0x50(%rsp)
063ad54c movq      $1,0x48(%rsp)
063ad555 mov       0x48(%rsp),%rax
063ad55a mov       0x50(%rsp),%rdx
063ad55f add       $0x68,%rsp
063ad563 ret

uefi_services::init:
063ad570 sub       $0x98,%rsp
063ad577 mov       %rcx,0x40(%rsp)
063ad57c mov       %rcx,0x88(%rsp)
063ad584 lea       0x63D`3018,%rcx
063ad58b call      0x0000`0000`063A`D360
063ad590 mov       %al,0x4F(%rsp)
063ad594 mov       0x4F(%rsp),%al
063ad598 test      $1,%al
063ad59a jne       0x0000`0000`063A`D5AF
063ad59c jmp       0x0000`0000`063A`D59E
063ad59e mov       0x40(%rsp),%rcx
063ad5a3 call      0x0000`0000`063B`1D40
063ad5a8 mov       %rax,0x38(%rsp)
063ad5ad jmp       0x0000`0000`063A`D5D4
063ad5af xor       %eax,%eax
063ad5b1 mov       %eax,%ecx
063ad5b3 call      0x0000`0000`063B`0CF0
063ad5b8 mov       %rdx,0x58(%rsp)
063ad5bd mov       %rax,0x50(%rsp)
063ad5c2 mov       0x50(%rsp),%rax
063ad5c7 mov       0x58(%rsp),%rdx
063ad5cc add       $0x98,%rsp
063ad5d3 ret
063ad5d4 mov       0x40(%rsp),%rcx
063ad5d9 mov       0x38(%rsp),%rax
063ad5de mov       %rax,0x60(%rsp)
063ad5e3 mov       0x60(%rsp),%rax
063ad5e8 mov       %rax,0x63D`3018
063ad5ef call      0x0000`0000`063A`D690
063ad5f4 mov       0x40(%rsp),%rcx
063ad5f9 call      0x0000`0000`063B`1D30
063ad5fe mov       %rax,0x30(%rsp)
063ad603 mov       %rax,0x90(%rsp)
063ad60b mov       0x30(%rsp),%rcx
063ad610 call      0x0000`0000`063B`2610
063ad615 mov       0x30(%rsp),%rdx
063ad61a lea       0x63A`D750,%rax
063ad621 mov       %rax,0x78(%rsp)
063ad626 movq      $0,0x80(%rsp)
063ad632 mov       0x78(%rsp),%r10
063ad637 mov       0x80(%rsp),%rax
063ad63f lea       0x68(%rsp),%rcx
063ad644 mov       $0x201,%r8d
063ad64a mov       $0x10,%r9d
063ad650 mov       %r10,0x20(%rsp)
063ad655 mov       %rax,0x28(%rsp)
063ad65a call      0x0000`0000`063B`1D60
063ad65f lea       0x68(%rsp),%rcx
063ad664 call      0x0000`0000`063A`D3A0
063ad669 mov       %rdx,0x58(%rsp)
063ad66e mov       %rax,0x50(%rsp)
063ad673 jmp       0x0000`0000`063A`D5C2

uefi_services::init::closure$0:
063ad680 sub       $0x10,%rsp
063ad684 mov       %rcx,8(%rsp)
063ad689 add       $0x10,%rsp
063ad68d ret

uefi_services::init_logger:
063ad690 sub       $0x78,%rsp
063ad694 mov       %rcx,0x60(%rsp)
063ad699 call      0x0000`0000`063B`1CF0
063ad69e mov       %rax,0x40(%rsp)
063ad6a3 mov       %rax,0x68(%rsp)
063ad6a8 mov       0x40(%rsp),%rcx
063ad6ad call      0x0000`0000`063B`2660
063ad6b2 mov       %rax,0x38(%rsp)
063ad6b7 mov       0x38(%rsp),%rax
063ad6bc mov       %rax,0x50(%rsp)
063ad6c1 movq      $1,0x48(%rsp)
063ad6ca mov       0x48(%rsp),%rcx
063ad6cf mov       0x50(%rsp),%rax
063ad6d4 mov       %rcx,0x63D`3020
063ad6db mov       %rax,0x63D`3028
063ad6e2 lea       0x63D`3020,%rcx
063ad6e9 call      0x0000`0000`063A`D2C0
063ad6ee mov       %rax,0x30(%rsp)
063ad6f3 mov       0x30(%rsp),%rcx
063ad6f8 lea       0x63C`D700,%rdx
063ad6ff call      0x0000`0000`063A`D310
063ad704 mov       %rax,0x28(%rsp)
063ad709 mov       %rax,0x70(%rsp)
063ad70e mov       0x28(%rsp),%rcx
063ad713 lea       0x63C`D730,%rdx
063ad71a call      0x0000`0000`063B`4FD0
063ad71f mov       %al,0x27(%rsp)
063ad723 mov       0x27(%rsp),%cl
063ad727 and       $1,%cl
063ad72a lea       0x63C`D768,%rdx
063ad731 call      0x0000`0000`063A`D430
063ad736 movq      $3,0x58(%rsp)
063ad73f mov       0x58(%rsp),%rcx
063ad744 call      0x0000`0000`063A`CE50
063ad749 add       $0x78,%rsp
063ad74d ret

uefi_services::exit_boot_services:
063ad750 sub       $0x48,%rsp
063ad754 mov       %rcx,0x30(%rsp)
063ad759 mov       %rdx,0x38(%rsp)
063ad75e movq      $0,0x28(%rsp)
063ad767 mov       0x28(%rsp),%rax
063ad76c mov       %rax,0x63D`3018
063ad773 cmpq      $1,0x63D`3020
063ad77b jne       0x0000`0000`063A`D79D
063ad77d lea       0x63D`3020,%rax
063ad784 add       $8,%rax
063ad788 mov       %rax,0x40(%rsp)
063ad78d lea       0x63D`3020,%rcx
063ad794 add       $8,%rcx
063ad798 call      0x0000`0000`063B`2690
063ad79d call      0x0000`0000`063B`2640
063ad7a2 add       $0x48,%rsp
063ad7a6 ret

uefi_services::panic_handler:
063ad7b0 sub       $0x2B8,%rsp
063ad7b7 mov       %rcx,0xB0(%rsp)
063ad7bf mov       %rcx,0x260(%rsp)
063ad7c7 call      0x0000`0000`063B`9FD0
063ad7cc mov       %rax,0xB8(%rsp)
063ad7d4 mov       $1,%eax
063ad7d9 xor       %ecx,%ecx
063ad7db cmpq      $0,0xB8(%rsp)
063ad7e4 cmove     %rcx,%rax
063ad7e8 cmp       $1,%rax
063ad7ec jne       0x0000`0000`063A`D82F
063ad7ee mov       0xB8(%rsp),%rax
063ad7f6 mov       %rax,0xA0(%rsp)
063ad7fe mov       %rax,0x268(%rsp)
063ad806 movq      $1,0xC0(%rsp)
063ad812 lea       0xC0(%rsp),%rcx
063ad81a lea       0x63C`D780,%rdx
063ad821 call      0x0000`0000`063A`D4A0
063ad826 mov       %al,0xAF(%rsp)
063ad82d jmp       0x0000`0000`063A`D848
063ad82f lea       0x63D`3018,%rcx
063ad836 call      0x0000`0000`063A`D270
063ad83b mov       %rax,0x1B8(%rsp)
063ad843 jmp       0x0000`0000`063A`DB62
063ad848 mov       0xAF(%rsp),%al
063ad84f test      $1,%al
063ad851 jne       0x0000`0000`063A`D85F
063ad853 jmp       0x0000`0000`063A`D855
063ad855 movb      $0,0xCF(%rsp)
063ad85d jmp       0x0000`0000`063A`D8BE
063ad85f movb      $0,0x2AF(%rsp)
063ad867 mov       0x2AF(%rsp),%dl
063ad86e mov       0x63D`3010,%rcx
063ad875 call      0x0000`0000`063A`D1E0
063ad87a mov       %rax,0x2B0(%rsp)
063ad882 mov       0x2B0(%rsp),%rax
063ad88a mov       %rax,0xD0(%rsp)
063ad892 lea       0xC0(%rsp),%rcx
063ad89a lea       0xD0(%rsp),%rdx
063ad8a2 call      0x0000`0000`063A`D4A0
063ad8a7 mov       %al,0x9F(%rsp)
063ad8ae mov       0x9F(%rsp),%al
063ad8b5 and       $1,%al
063ad8b7 mov       %al,0xCF(%rsp)
063ad8be testb     $1,0xCF(%rsp)
063ad8c6 jne       0x0000`0000`063A`D8E2
063ad8c8 mov       0xB0(%rsp),%rcx
063ad8d0 call      0x0000`0000`063B`9FC0
063ad8d5 mov       %rax,0x150(%rsp)
063ad8dd jmp       0x0000`0000`063A`DA18
063ad8e2 mov       0xA0(%rsp),%rcx
063ad8ea call      0x0000`0000`063B`9F40
063ad8ef mov       %rdx,0x140(%rsp)
063ad8f7 mov       %rax,0x138(%rsp)
063ad8ff lea       0x138(%rsp),%rcx
063ad907 call      0x0000`0000`063C`9A80
063ad90c mov       %rax,0x88(%rsp)
063ad914 mov       %rdx,0x90(%rsp)
063ad91c mov       0xA0(%rsp),%rcx
063ad924 call      0x0000`0000`063B`9F50
063ad929 mov       %eax,0x148(%rsp)
063ad930 lea       0x148(%rsp),%rcx
063ad938 call      0x0000`0000`063C`9A20
063ad93d mov       %rax,0x78(%rsp)
063ad942 mov       %rdx,0x80(%rsp)
063ad94a mov       0xA0(%rsp),%rcx
063ad952 call      0x0000`0000`063B`9F60
063ad957 mov       %eax,0x14C(%rsp)
063ad95e lea       0x14C(%rsp),%rcx
063ad966 call      0x0000`0000`063C`9A20
063ad96b mov       %rax,0x68(%rsp)
063ad970 mov       %rdx,0x70(%rsp)
063ad975 mov       0x70(%rsp),%rax
063ad97a mov       0x68(%rsp),%rcx
063ad97f mov       0x80(%rsp),%rdx
063ad987 mov       0x78(%rsp),%r8
063ad98c mov       0x90(%rsp),%r9
063ad994 mov       0x88(%rsp),%r10
063ad99c mov       %r10,0x108(%rsp)
063ad9a4 mov       %r9,0x110(%rsp)
063ad9ac mov       %r8,0x118(%rsp)
063ad9b4 mov       %rdx,0x120(%rsp)
063ad9bc mov       %rcx,0x128(%rsp)
063ad9c4 mov       %rax,0x130(%rsp)
063ad9cc lea       0x108(%rsp),%r9
063ad9d4 lea       0xD8(%rsp),%rcx
063ad9dc lea       0x63C`D7A0,%rdx
063ad9e3 mov       $4,%r8d
063ad9e9 movq      $3,0x20(%rsp)
063ad9f2 call      0x0000`0000`063A`CF60
063ad9f7 mov       0xC0(%rsp),%rdx
063ad9ff lea       0xD8(%rsp),%rcx
063ada07 lea       0x63C`D7F0,%r8
063ada0e call      0x0000`0000`063B`5200
063ada13 jmp       0x0000`0000`063A`D8C8
063ada18 mov       $1,%eax
063ada1d xor       %ecx,%ecx
063ada1f cmpq      $0,0x150(%rsp)
063ada28 cmove     %rcx,%rax
063ada2c cmp       $1,%rax
063ada30 jne       0x0000`0000`063A`D82F
063ada36 mov       0x150(%rsp),%rax
063ada3e mov       %rax,0x158(%rsp)
063ada46 movq      $1,0x160(%rsp)
063ada52 lea       0x160(%rsp),%rcx
063ada5a lea       0x63C`D780,%rdx
063ada61 call      0x0000`0000`063A`D4A0
063ada66 mov       %al,0x67(%rsp)
063ada6a mov       0x67(%rsp),%al
063ada6e test      $1,%al
063ada70 jne       0x0000`0000`063A`DA7E
063ada72 jmp       0x0000`0000`063A`DA74
063ada74 movb      $0,0x16F(%rsp)
063ada7c jmp       0x0000`0000`063A`DAD7
063ada7e movb      $0,0x29F(%rsp)
063ada86 mov       0x29F(%rsp),%dl
063ada8d mov       0x63D`3010,%rcx
063ada94 call      0x0000`0000`063A`D1E0
063ada99 mov       %rax,0x2A0(%rsp)
063adaa1 mov       0x2A0(%rsp),%rax
063adaa9 mov       %rax,0x170(%rsp)
063adab1 lea       0x160(%rsp),%rcx
063adab9 lea       0x170(%rsp),%rdx
063adac1 call      0x0000`0000`063A`D4A0
063adac6 mov       %al,0x66(%rsp)
063adaca mov       0x66(%rsp),%al
063adace and       $1,%al
063adad0 mov       %al,0x16F(%rsp)
063adad7 testb     $1,0x16F(%rsp)
063adadf je        0x0000`0000`063A`D82F
063adae5 lea       0x158(%rsp),%rcx
063adaed call      0x0000`0000`063C`99F0
063adaf2 mov       %rax,0x50(%rsp)
063adaf7 mov       %rdx,0x58(%rsp)
063adafc mov       0x58(%rsp),%rax
063adb01 mov       0x50(%rsp),%rcx
063adb06 mov       %rcx,0x1A8(%rsp)
063adb0e mov       %rax,0x1B0(%rsp)
063adb16 lea       0x1A8(%rsp),%r9
063adb1e lea       0x178(%rsp),%rcx
063adb26 lea       0x63C`D828,%rdx
063adb2d mov       $1,%r8d
063adb33 movq      $1,0x20(%rsp)
063adb3c call      0x0000`0000`063A`CF60
063adb41 mov       0x160(%rsp),%rdx
063adb49 lea       0x178(%rsp),%rcx
063adb51 lea       0x63C`D838,%r8
063adb58 call      0x0000`0000`063B`5200
063adb5d jmp       0x0000`0000`063A`D82F
063adb62 mov       $1,%eax
063adb67 xor       %ecx,%ecx
063adb69 cmpq      $0,0x1B8(%rsp)
063adb72 cmove     %rcx,%rax
063adb76 cmp       $1,%rax
063adb7a jne       0x0000`0000`063A`DB9B
063adb7c mov       0x1B8(%rsp),%rcx
063adb84 mov       %rcx,0x278(%rsp)
063adb8c call      0x0000`0000`063B`1D30
063adb91 mov       %rax,0x48(%rsp)
063adb96 jmp       0x0000`0000`063A`DC5D
063adb9b movq      $0,0x1C0(%rsp)
063adba7 movq      $0,0x1C8(%rsp)
063adbb3 movq      $0x11E1`A300,0x1D0(%rsp)
063adbbf mov       0x1C8(%rsp),%rcx
063adbc7 mov       0x1D0(%rsp),%rdx
063adbcf call      0x0000`0000`063A`D480
063adbd4 mov       %rax,0x38(%rsp)
063adbd9 mov       %rdx,0x40(%rsp)
063adbde mov       0x40(%rsp),%rax
063adbe3 mov       0x38(%rsp),%rcx
063adbe8 mov       %rcx,0x1D8(%rsp)
063adbf0 mov       %rax,0x1E0(%rsp)
063adbf8 lea       0x1D8(%rsp),%rcx
063adc00 call      0x0000`0000`063A`D1B0
063adc05 mov       %rdx,0x1F0(%rsp)
063adc0d mov       %rax,0x1E8(%rsp)
063adc15 mov       0x1E8(%rsp),%rax
063adc1d test      %rax,%rax
063adc20 je        0x0000`0000`063A`DC28
063adc22 jmp       0x0000`0000`063A`DC24
063adc24 jmp       0x0000`0000`063A`DC3E
063adc26 ud2
063adc28 lea       0x63D`3018,%rcx
063adc2f call      0x0000`0000`063A`D270
063adc34 mov       %rax,0x1F8(%rsp)
063adc3c jmp       0x0000`0000`063A`DC6E
063adc3e mov       0x1F0(%rsp),%rdx
063adc46 mov       %rdx,0x270(%rsp)
063adc4e lea       0x1C0(%rsp),%rcx
063adc56 call      0x0000`0000`063A`D0F0
063adc5b jmp       0x0000`0000`063A`DBF8
063adc5d mov       0x48(%rsp),%rcx
063adc62 mov       $0x98`9680,%edx
063adc67 call      0x0000`0000`063B`1E50
063adc6c jmp       0x0000`0000`063A`DC28
063adc6e mov       $1,%eax
063adc73 xor       %ecx,%ecx
063adc75 cmpq      $0,0x1F8(%rsp)
063adc7e cmove     %rcx,%rax
063adc82 cmp       $1,%rax
063adc86 jne       0x0000`0000`063A`DCA7
063adc88 mov       0x1F8(%rsp),%rcx
063adc90 mov       %rcx,0x280(%rsp)
063adc98 call      0x0000`0000`063B`1D20
063adc9d mov       %rax,0x30(%rsp)
063adca2 jmp       0x0000`0000`063A`DD8F
063adca7 movq      $1,0x218(%rsp)
063adcb3 lea       0x218(%rsp),%rcx
063adcbb lea       0x63C`D780,%rdx
063adcc2 call      0x0000`0000`063A`D4A0
063adcc7 mov       %al,0x2F(%rsp)
063adccb mov       0x2F(%rsp),%al
063adccf test      $1,%al
063adcd1 jne       0x0000`0000`063A`DCDF
063adcd3 jmp       0x0000`0000`063A`DCD5
063adcd5 movb      $0,0x227(%rsp)
063adcdd jmp       0x0000`0000`063A`DD38
063adcdf movb      $0,0x28F(%rsp)
063adce7 mov       0x28F(%rsp),%dl
063adcee mov       0x63D`3010,%rcx
063adcf5 call      0x0000`0000`063A`D1E0
063adcfa mov       %rax,0x290(%rsp)
063add02 mov       0x290(%rsp),%rax
063add0a mov       %rax,0x228(%rsp)
063add12 lea       0x218(%rsp),%rcx
063add1a lea       0x228(%rsp),%rdx
063add22 call      0x0000`0000`063A`D4A0
063add27 mov       %al,0x2E(%rsp)
063add2b mov       0x2E(%rsp),%al
063add2f and       $1,%al
063add31 mov       %al,0x227(%rsp)
063add38 testb     $1,0x227(%rsp)
063add40 jne       0x0000`0000`063A`DD45
063add42 hlt
063add43 jmp       0x0000`0000`063A`DD42
063add45 lea       0x230(%rsp),%rcx
063add4d lea       0x63C`D8B0,%rdx
063add54 mov       $1,%r8d
063add5a lea       0x63C`D608,%r9
063add61 xor       %eax,%eax
063add63 movq      $0,0x20(%rsp)
063add6c call      0x0000`0000`063A`CF60
063add71 mov       0x218(%rsp),%rdx
063add79 lea       0x230(%rsp),%rcx
063add81 lea       0x63C`D8C0,%r8
063add88 call      0x0000`0000`063B`5200
063add8d jmp       0x0000`0000`063A`DD42
063add8f mov       0x30(%rsp),%rcx
063add94 movl      $2,0x204(%rsp)
063add9f movq      $0,0x208(%rsp)
063addab mov       0x204(%rsp),%edx
063addb2 mov       0x208(%rsp),%r9
063addba mov       0x210(%rsp),%r8
063addc2 mov       %rsp,%rax
063addc5 mov       %r8,0x20(%rax)
063addc9 movabs    $0x8000`0000`0000`0015,%r8
063addd3 call      0x0000`0000`063B`1F10
063addd8 ud2

core::str::iter::impl$70::next<char>:
063adde0 sub       $0x38,%rsp
063adde4 mov       %rcx,0x30(%rsp)
063adde9 call      0x0000`0000`063A`F180
063addee mov       %rax,0x20(%rsp)
063addf3 mov       %rdx,0x28(%rsp)
063addf8 mov       0x28(%rsp),%rdx
063addfd mov       0x20(%rsp),%rax
063ade02 add       $0x38,%rsp
063ade06 ret

core::iter::adapters::map::impl$2::next<str,core::str::iter::SplitTerminator<char>,core::str::LinesAnyMap>:
063ade10 sub       $0x58,%rsp
063ade14 mov       %rcx,0x38(%rsp)
063ade19 mov       %rcx,0x50(%rsp)
063ade1e call      0x0000`0000`063A`DDE0
063ade23 mov       %rax,0x40(%rsp)
063ade28 mov       %rdx,0x48(%rsp)
063ade2d mov       0x48(%rsp),%rdx
063ade32 mov       0x40(%rsp),%rcx
063ade37 mov       0x38(%rsp),%r8
063ade3c call      0x0000`0000`063A`FEB0
063ade41 mov       %rax,0x28(%rsp)
063ade46 mov       %rdx,0x30(%rsp)
063ade4b mov       0x30(%rsp),%rdx
063ade50 mov       0x28(%rsp),%rax
063ade55 add       $0x58,%rsp
063ade59 ret

core::slice::index::impl$3::get_unchecked<u16>:
063ade60 sub       $0xB8,%rsp
063ade67 mov       %r9,0x48(%rsp)
063ade6c mov       %r8,0x58(%rsp)
063ade71 mov       %rdx,%rax
063ade74 mov       0x48(%rsp),%rdx
063ade79 mov       %rax,0x50(%rsp)
063ade7e mov       %rcx,%r8
063ade81 mov       0x58(%rsp),%rcx
063ade86 mov       %r8,0x60(%rsp)
063ade8b mov       %r8,0x70(%rsp)
063ade90 mov       %rax,0x78(%rsp)
063ade95 mov       %rcx,0x80(%rsp)
063ade9d mov       %rdx,0x88(%rsp)
063adea5 call      0x0000`0000`063A`EB20
063adeaa mov       %rax,0x68(%rsp)
063adeaf mov       0x68(%rsp),%rax
063adeb4 mov       0x60(%rsp),%rcx
063adeb9 mov       %rax,0x90(%rsp)
063adec1 mov       %rcx,0x98(%rsp)
063adec9 mov       %rax,0xA0(%rsp)
063aded1 mov       %rcx,0xA8(%rsp)
063aded9 shl       $1,%rcx
063adedd add       %rcx,%rax
063adee0 mov       %rax,0xB0(%rsp)
063adee8 mov       0xB0(%rsp),%rax
063adef0 mov       %rax,0x40(%rsp)
063adef5 mov       0x60(%rsp),%rcx
063adefa mov       0x50(%rsp),%rax
063adeff sub       %rcx,%rax
063adf02 mov       %rax,0x38(%rsp)
063adf07 setb      %al
063adf0a test      $1,%al
063adf0c jne       0x0000`0000`063A`DF29
063adf0e mov       0x38(%rsp),%rdx
063adf13 mov       0x40(%rsp),%rcx
063adf18 call      0x0000`0000`063A`E870
063adf1d mov       %rax,0x28(%rsp)
063adf22 mov       %rdx,0x30(%rsp)
063adf27 jmp       0x0000`0000`063A`DF43
063adf29 lea       0x63C`D990,%rcx
063adf30 lea       0x63C`D978,%r8
063adf37 mov       $0x21,%edx
063adf3c call      0x0000`0000`063B`9FF0
063adf41 ud2
063adf43 mov       0x30(%rsp),%rdx
063adf48 mov       0x28(%rsp),%rax
063adf4d add       $0xB8,%rsp
063adf54 ret

core::slice::index::impl$3::index<u16>:
063adf60 sub       $0x78,%rsp
063adf64 mov       %r9,0x30(%rsp)
063adf69 mov       %r8,0x38(%rsp)
063adf6e mov       %rdx,0x40(%rsp)
063adf73 mov       %rcx,0x48(%rsp)
063adf78 mov       0xA0(%rsp),%rax
063adf80 mov       %rax,0x50(%rsp)
063adf85 mov       %rcx,0x58(%rsp)
063adf8a mov       %rdx,0x60(%rsp)
063adf8f mov       %r8,0x68(%rsp)
063adf94 mov       %r9,0x70(%rsp)
063adf99 cmp       %rdx,%rcx
063adf9c ja        0x0000`0000`063A`DFAF
063adf9e mov       0x40(%rsp),%rax
063adfa3 mov       0x30(%rsp),%rcx
063adfa8 cmp       %rcx,%rax
063adfab ja        0x0000`0000`063A`DFEA
063adfad jmp       0x0000`0000`063A`DFC5
063adfaf mov       0x50(%rsp),%r8
063adfb4 mov       0x40(%rsp),%rdx
063adfb9 mov       0x48(%rsp),%rcx
063adfbe call      0x0000`0000`063C`1CA0
063adfc3 ud2
063adfc5 mov       0x30(%rsp),%r9
063adfca mov       0x38(%rsp),%r8
063adfcf mov       0x40(%rsp),%rdx
063adfd4 mov       0x48(%rsp),%rcx
063adfd9 call      0x0000`0000`063A`DE60
063adfde mov       %rax,0x20(%rsp)
063adfe3 mov       %rdx,0x28(%rsp)
063adfe8 jmp       0x0000`0000`063A`E000
063adfea mov       0x50(%rsp),%r8
063adfef mov       0x30(%rsp),%rdx
063adff4 mov       0x40(%rsp),%rcx
063adff9 call      0x0000`0000`063C`1BF0
063adffe ud2
063ae000 mov       0x28(%rsp),%rdx
063ae005 mov       0x20(%rsp),%rax
063ae00a add       $0x78,%rsp
063ae00e ret

core::iter::adapters::enumerate::impl$1::next<core::slice::iter::Iter<u16> >:
063ae010 sub       $0x98,%rsp
063ae017 mov       %rcx,0x38(%rsp)
063ae01c mov       %rcx,0x70(%rsp)
063ae021 call      0x0000`0000`063C`C290
063ae026 mov       %rax,0x40(%rsp)
063ae02b mov       0x40(%rsp),%rcx
063ae030 call      0x0000`0000`063B`0EE0
063ae035 mov       %rax,0x58(%rsp)
063ae03a mov       0x58(%rsp),%rax
063ae03f test      %rax,%rax
063ae042 sete      %al
063ae045 movzbl    %al,%eax
063ae048 jne       0x0000`0000`063A`E050
063ae04a jmp       0x0000`0000`063A`E04C
063ae04c jmp       0x0000`0000`063A`E096
063ae04e ud2
063ae050 mov       0x38(%rsp),%rax
063ae055 mov       0x58(%rsp),%rcx
063ae05a mov       %rcx,0x20(%rsp)
063ae05f mov       %rcx,0x80(%rsp)
063ae067 mov       %rcx,0x88(%rsp)
063ae06f mov       0x10(%rax),%rcx
063ae073 mov       %rcx,0x28(%rsp)
063ae078 mov       %rcx,0x90(%rsp)
063ae080 mov       0x10(%rax),%rax
063ae084 add       $1,%rax
063ae088 mov       %rax,0x30(%rsp)
063ae08d setb      %al
063ae090 test      $1,%al
063ae092 jne       0x0000`0000`063A`E0EF
063ae094 jmp       0x0000`0000`063A`E0B7
063ae096 call      0x0000`0000`063B`1470
063ae09b mov       %rdx,0x50(%rsp)
063ae0a0 mov       %rax,0x48(%rsp)
063ae0a5 mov       0x48(%rsp),%rax
063ae0aa mov       0x50(%rsp),%rdx
063ae0af add       $0x98,%rsp
063ae0b6 ret
063ae0b7 mov       0x20(%rsp),%rax
063ae0bc mov       0x28(%rsp),%rcx
063ae0c1 mov       0x38(%rsp),%rdx
063ae0c6 mov       0x30(%rsp),%r8
063ae0cb mov       %r8,0x10(%rdx)
063ae0cf mov       %rcx,0x60(%rsp)
063ae0d4 mov       %rax,0x68(%rsp)
063ae0d9 mov       0x60(%rsp),%rcx
063ae0de mov       0x68(%rsp),%rax
063ae0e3 mov       %rcx,0x48(%rsp)
063ae0e8 mov       %rax,0x50(%rsp)
063ae0ed jmp       0x0000`0000`063A`E0A5
063ae0ef lea       0x63C`DA50,%rcx
063ae0f6 lea       0x63C`DA38,%r8
063ae0fd mov       $0x1C,%edx
063ae102 call      0x0000`0000`063B`9FF0
063ae107 ud2

core::slice::index::impl$7::index<u16>:
063ae110 sub       $0x98,%rsp
063ae117 mov       %r9,0x48(%rsp)
063ae11c mov       %r8,0x50(%rsp)
063ae121 mov       %rdx,0x58(%rsp)
063ae126 mov       %rcx,0x60(%rsp)
063ae12b mov       %rdx,0x88(%rsp)
063ae133 mov       %r8,0x90(%rsp)
063ae13b call      0x0000`0000`063B`7B20
063ae140 mov       %rax,0x68(%rsp)
063ae145 mov       0x68(%rsp),%rax
063ae14a cmpq      $0xFFFF`FFFF`FFFF`FFFF,(%rax)
063ae14e je        0x0000`0000`063A`E188
063ae150 mov       0x60(%rsp),%rax
063ae155 mov       (%rax),%rcx
063ae158 mov       %rcx,0x70(%rsp)
063ae15d mov       8(%rax),%rcx
063ae161 mov       %rcx,0x78(%rsp)
063ae166 mov       0x10(%rax),%rax
063ae16a mov       %rax,0x80(%rsp)
063ae172 lea       0x70(%rsp),%rcx
063ae177 call      0x0000`0000`063A`E790
063ae17c mov       %rax,0x38(%rsp)
063ae181 mov       %rdx,0x40(%rsp)
063ae186 jmp       0x0000`0000`063A`E194
063ae188 mov       0x48(%rsp),%rcx
063ae18d call      0x0000`0000`063C`1D50
063ae192 ud2
063ae194 mov       0x48(%rsp),%rax
063ae199 mov       0x50(%rsp),%r9
063ae19e mov       0x58(%rsp),%r8
063ae1a3 mov       0x40(%rsp),%rdx
063ae1a8 mov       0x38(%rsp),%rcx
063ae1ad mov       %rax,0x20(%rsp)
063ae1b2 call      0x0000`0000`063A`DF60
063ae1b7 mov       %rax,0x28(%rsp)
063ae1bc mov       %rdx,0x30(%rsp)
063ae1c1 mov       0x30(%rsp),%rdx
063ae1c6 mov       0x28(%rsp),%rax
063ae1cb add       $0x98,%rsp
063ae1d2 ret

core::slice::index::impl$8::index<u16>:
063ae1e0 sub       $0x78,%rsp
063ae1e4 mov       %r9,0x30(%rsp)
063ae1e9 mov       %r8,%rax
063ae1ec mov       %rax,0x38(%rsp)
063ae1f1 mov       %rdx,0x40(%rsp)
063ae1f6 mov       %rcx,%r8
063ae1f9 mov       %r8,0x60(%rsp)
063ae1fe mov       %rdx,0x68(%rsp)
063ae203 mov       %rax,0x70(%rsp)
063ae208 lea       0x48(%rsp),%rcx
063ae20d xor       %eax,%eax
063ae20f mov       %eax,%edx
063ae211 call      0x0000`0000`063B`7B00
063ae216 mov       0x30(%rsp),%r9
063ae21b mov       0x38(%rsp),%r8
063ae220 mov       0x40(%rsp),%rdx
063ae225 lea       0x48(%rsp),%rcx
063ae22a call      0x0000`0000`063A`E110
063ae22f mov       %rax,0x20(%rsp)
063ae234 mov       %rdx,0x28(%rsp)
063ae239 mov       0x28(%rsp),%rdx
063ae23e mov       0x20(%rsp),%rax
063ae243 add       $0x78,%rsp
063ae247 ret

enum$<log::MaybeStaticStr>::get:
063ae250 sub       $0x40,%rsp
063ae254 mov       %rcx,(%rsp)
063ae258 mov       %rcx,0x18(%rsp)
063ae25d mov       (%rcx),%rax
063ae260 test      %rax,%rax
063ae263 je        0x0000`0000`063A`E26B
063ae265 jmp       0x0000`0000`063A`E267
063ae267 jmp       0x0000`0000`063A`E28D
063ae269 ud2
063ae26b mov       (%rsp),%rax
063ae26f mov       8(%rax),%rcx
063ae273 mov       0x10(%rax),%rax
063ae277 mov       %rcx,0x30(%rsp)
063ae27c mov       %rax,0x38(%rsp)
063ae281 mov       %rcx,8(%rsp)
063ae286 mov       %rax,0x10(%rsp)
063ae28b jmp       0x0000`0000`063A`E2AD
063ae28d mov       (%rsp),%rax
063ae291 mov       8(%rax),%rcx
063ae295 mov       0x10(%rax),%rax
063ae299 mov       %rcx,0x20(%rsp)
063ae29e mov       %rax,0x28(%rsp)
063ae2a3 mov       %rcx,8(%rsp)
063ae2a8 mov       %rax,0x10(%rsp)
063ae2ad mov       8(%rsp),%rax
063ae2b2 mov       0x10(%rsp),%rdx
063ae2b7 add       $0x40,%rsp
063ae2bb ret

log::Record::args:
063ae2c0 push      %rax
063ae2c1 mov       %rcx,%rax
063ae2c4 mov       %rax,(%rsp)
063ae2c8 add       $0x18,%rax
063ae2cc pop       %rcx
063ae2cd ret

log::Record::file:
063ae2d0 sub       $0x58,%rsp
063ae2d4 mov       %rcx,0x50(%rsp)
063ae2d9 mov       0x60(%rcx),%rax
063ae2dd mov       %rax,0x38(%rsp)
063ae2e2 mov       0x68(%rcx),%rax
063ae2e6 mov       %rax,0x40(%rsp)
063ae2eb mov       0x70(%rcx),%rax
063ae2ef mov       %rax,0x48(%rsp)
063ae2f4 lea       0x38(%rsp),%rcx
063ae2f9 call      0x0000`0000`063A`FDB0
063ae2fe mov       %rax,0x28(%rsp)
063ae303 mov       %rdx,0x30(%rsp)
063ae308 mov       0x30(%rsp),%rdx
063ae30d mov       0x28(%rsp),%rax
063ae312 add       $0x58,%rsp
063ae316 ret

log::impl$19::file::closure$0:
063ae320 sub       $0x38,%rsp
063ae324 call      0x0000`0000`063A`E250
063ae329 mov       %rax,0x20(%rsp)
063ae32e mov       %rdx,0x28(%rsp)
063ae333 mov       0x28(%rsp),%rdx
063ae338 mov       0x20(%rsp),%rax
063ae33d add       $0x38,%rsp
063ae341 ret

log::Record::line:
063ae350 push      %rax
063ae351 mov       %rcx,(%rsp)
063ae355 mov       0x78(%rcx),%eax
063ae358 mov       0x7C(%rcx),%edx
063ae35b pop       %rcx
063ae35c ret

log::Record::level:
063ae360 sub       $0x38,%rsp
063ae364 mov       %rcx,0x30(%rsp)
063ae369 call      0x0000`0000`063A`E380
063ae36e mov       %rax,0x28(%rsp)
063ae373 mov       0x28(%rsp),%rax
063ae378 add       $0x38,%rsp
063ae37c ret

log::Metadata::level:
063ae380 push      %rax
063ae381 mov       %rcx,(%rsp)
063ae385 mov       (%rcx),%rax
063ae388 pop       %rcx
063ae389 ret

core::fmt::impl$52::fmt<uefi::result::status::Status>:
063ae390 sub       $0x38,%rsp
063ae394 mov       %rcx,0x28(%rsp)
063ae399 mov       %rdx,0x30(%rsp)
063ae39e mov       (%rcx),%rcx
063ae3a1 call      0x0000`0000`063B`2FD0
063ae3a6 mov       %al,0x27(%rsp)
063ae3aa mov       0x27(%rsp),%al
063ae3ae and       $1,%al
063ae3b0 movzbl    %al,%eax
063ae3b3 add       $0x38,%rsp
063ae3b7 ret

core::fmt::ArgumentV1::new_display<enum$<log::Level> >:
063ae3c0 sub       $0x38,%rsp
063ae3c4 mov       %rcx,0x30(%rsp)
063ae3c9 lea       0x63B`4B40,%rdx
063ae3d0 call      0x0000`0000`063A`E3F0
063ae3d5 mov       %rax,0x20(%rsp)
063ae3da mov       %rdx,0x28(%rsp)
063ae3df mov       0x28(%rsp),%rdx
063ae3e4 mov       0x20(%rsp),%rax
063ae3e9 add       $0x38,%rsp
063ae3ed ret

core::fmt::ArgumentV1::new<enum$<log::Level> >:
063ae3f0 sub       $0x48,%rsp
063ae3f4 mov       %rcx,8(%rsp)
063ae3f9 mov       %rcx,0x28(%rsp)
063ae3fe mov       %rdx,0x30(%rsp)
063ae403 mov       %rdx,0x38(%rsp)
063ae408 mov       0x38(%rsp),%rax
063ae40d mov       %rax,0x10(%rsp)
063ae412 mov       8(%rsp),%rax
063ae417 mov       %rax,0x40(%rsp)
063ae41c mov       0x40(%rsp),%rax
063ae421 mov       %rax,(%rsp)
063ae425 mov       0x10(%rsp),%rax
063ae42a mov       (%rsp),%rcx
063ae42e mov       %rcx,0x18(%rsp)
063ae433 mov       %rax,0x20(%rsp)
063ae438 mov       0x18(%rsp),%rax
063ae43d mov       0x20(%rsp),%rdx
063ae442 add       $0x48,%rsp
063ae446 ret

core::fmt::Write::write_char<uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output> >:
063ae450 sub       $0x68,%rsp
063ae454 mov       %edx,0x3C(%rsp)
063ae458 mov       %rcx,0x30(%rsp)
063ae45d mov       %rcx,0x58(%rsp)
063ae462 mov       %edx,0x64(%rsp)
063ae466 lea       0x54(%rsp),%rcx
063ae46b xor       %edx,%edx
063ae46d mov       $4,%r8d
063ae473 call      0x0000`0000`063C`BCC0
063ae478 mov       0x3C(%rsp),%ecx
063ae47c lea       0x54(%rsp),%rdx
063ae481 mov       $4,%r8d
063ae487 call      0x0000`0000`063A`FAD0
063ae48c mov       %rax,0x40(%rsp)
063ae491 mov       %rdx,0x48(%rsp)
063ae496 mov       0x48(%rsp),%r8
063ae49b mov       0x40(%rsp),%rdx
063ae4a0 mov       0x30(%rsp),%rcx
063ae4a5 call      0x0000`0000`063B`2930
063ae4aa mov       %al,0x2F(%rsp)
063ae4ae mov       0x2F(%rsp),%al
063ae4b2 and       $1,%al
063ae4b4 movzbl    %al,%eax
063ae4b7 add       $0x68,%rsp
063ae4bb ret

core::fmt::Write::write_char<uefi::proto::console::text::output::Output>:
063ae4c0 sub       $0x68,%rsp
063ae4c4 mov       %edx,0x3C(%rsp)
063ae4c8 mov       %rcx,0x30(%rsp)
063ae4cd mov       %rcx,0x58(%rsp)
063ae4d2 mov       %edx,0x64(%rsp)
063ae4d6 lea       0x54(%rsp),%rcx
063ae4db xor       %edx,%edx
063ae4dd mov       $4,%r8d
063ae4e3 call      0x0000`0000`063C`BCC0
063ae4e8 mov       0x3C(%rsp),%ecx
063ae4ec lea       0x54(%rsp),%rdx
063ae4f1 mov       $4,%r8d
063ae4f7 call      0x0000`0000`063A`FAD0
063ae4fc mov       %rax,0x40(%rsp)
063ae501 mov       %rdx,0x48(%rsp)
063ae506 mov       0x48(%rsp),%r8
063ae50b mov       0x40(%rsp),%rdx
063ae510 mov       0x30(%rsp),%rcx
063ae515 call      0x0000`0000`063B`2070
063ae51a mov       %al,0x2F(%rsp)
063ae51e mov       0x2F(%rsp),%al
063ae522 and       $1,%al
063ae524 movzbl    %al,%eax
063ae527 add       $0x68,%rsp
063ae52b ret

core::fmt::Write::write_fmt<uefi::proto::console::text::output::Output>:
063ae530 sub       $0x68,%rsp
063ae534 mov       %rcx,0x30(%rsp)
063ae539 lea       0x30(%rsp),%rax
063ae53e mov       %rax,0x20(%rsp)
063ae543 lea       0x38(%rsp),%rcx
063ae548 mov       $0x30,%r8d
063ae54e call      0x0000`0000`063C`BD50
063ae553 mov       0x20(%rsp),%rcx
063ae558 lea       0x63C`DA70,%rdx
063ae55f lea       0x38(%rsp),%r8
063ae564 call      0x0000`0000`063B`F1A0
063ae569 mov       %al,0x2F(%rsp)
063ae56d mov       0x2F(%rsp),%al
063ae571 and       $1,%al
063ae573 movzbl    %al,%eax
063ae576 add       $0x68,%rsp
063ae57a ret

core::fmt::Write::write_fmt<uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output> >:
063ae580 sub       $0x68,%rsp
063ae584 mov       %rcx,0x30(%rsp)
063ae589 lea       0x30(%rsp),%rax
063ae58e mov       %rax,0x20(%rsp)
063ae593 lea       0x38(%rsp),%rcx
063ae598 mov       $0x30,%r8d
063ae59e call      0x0000`0000`063C`BD50
063ae5a3 mov       0x20(%rsp),%rcx
063ae5a8 lea       0x63C`DAA0,%rdx
063ae5af lea       0x38(%rsp),%r8
063ae5b4 call      0x0000`0000`063B`F1A0
063ae5b9 mov       %al,0x2F(%rsp)
063ae5bd mov       0x2F(%rsp),%al
063ae5c1 and       $1,%al
063ae5c3 movzbl    %al,%eax
063ae5c6 add       $0x68,%rsp
063ae5ca ret

core::fmt::Arguments::new_v1_formatted:
063ae5d0 push      %rsi
063ae5d1 sub       $0x48,%rsp
063ae5d5 mov       %rdx,%r10
063ae5d8 mov       %rcx,%rax
063ae5db mov       0x88(%rsp),%r11
063ae5e3 mov       0x80(%rsp),%rsi
063ae5eb mov       0x78(%rsp),%rdx
063ae5f0 mov       %r10,0x10(%rsp)
063ae5f5 mov       %r8,0x18(%rsp)
063ae5fa mov       %r9,0x20(%rsp)
063ae5ff mov       %rdx,0x28(%rsp)
063ae604 mov       %rsi,0x30(%rsp)
063ae609 mov       %r11,0x38(%rsp)
063ae60e mov       %rsi,(%rsp)
063ae612 mov       %r11,8(%rsp)
063ae617 mov       %r10,(%rcx)
063ae61a mov       %r8,8(%rcx)
063ae61e mov       (%rsp),%r10
063ae622 mov       8(%rsp),%r8
063ae627 mov       %r10,0x10(%rcx)
063ae62b mov       %r8,0x18(%rcx)
063ae62f mov       %r9,0x20(%rcx)
063ae633 mov       %rdx,0x28(%rcx)
063ae637 add       $0x48,%rsp
063ae63b pop       %rsi
063ae63c ret

core::fmt::Arguments::new_v1:
063ae640 sub       $0xC8,%rsp
063ae647 mov       %r9,0x30(%rsp)
063ae64c mov       %r8,0x38(%rsp)
063ae651 mov       %rdx,0x40(%rsp)
063ae656 mov       %rcx,0x48(%rsp)
063ae65b mov       %rcx,0x50(%rsp)
063ae660 mov       0xF0(%rsp),%rax
063ae668 mov       %rax,0x58(%rsp)
063ae66d mov       %rdx,0xA8(%rsp)
063ae675 mov       %r8,0xB0(%rsp)
063ae67d mov       %r9,0xB8(%rsp)
063ae685 mov       %rax,0xC0(%rsp)
063ae68d cmp       %rax,%r8
063ae690 jb        0x0000`0000`063A`E6A9
063ae692 mov       0x58(%rsp),%rax
063ae697 add       $1,%rax
063ae69b mov       %rax,0x28(%rsp)
063ae6a0 setb      %al
063ae6a3 test      $1,%al
063ae6a5 jne       0x0000`0000`063A`E6D3
063ae6a7 jmp       0x0000`0000`063A`E6BB
063ae6a9 movb      $1,0x67(%rsp)
063ae6ae testb     $1,0x67(%rsp)
063ae6b3 jne       0x0000`0000`063A`E746
063ae6b9 jmp       0x0000`0000`063A`E6ED
063ae6bb mov       0x38(%rsp),%rax
063ae6c0 mov       0x28(%rsp),%rcx
063ae6c5 cmp       %rcx,%rax
063ae6c8 seta      %al
063ae6cb and       $1,%al
063ae6cd mov       %al,0x67(%rsp)
063ae6d1 jmp       0x0000`0000`063A`E6AE
063ae6d3 lea       0x63C`DA50,%rcx
063ae6da lea       0x63C`DB48,%r8
063ae6e1 mov       $0x1C,%edx
063ae6e6 call      0x0000`0000`063B`9FF0
063ae6eb ud2
063ae6ed mov       0x50(%rsp),%rax
063ae6f2 mov       0x48(%rsp),%rcx
063ae6f7 mov       0x58(%rsp),%rdx
063ae6fc mov       0x30(%rsp),%r8
063ae701 mov       0x38(%rsp),%r9
063ae706 mov       0x40(%rsp),%r10
063ae70b movq      $0,0x98(%rsp)
063ae717 mov       %r10,(%rcx)
063ae71a mov       %r9,8(%rcx)
063ae71e mov       0x98(%rsp),%r10
063ae726 mov       0xA0(%rsp),%r9
063ae72e mov       %r10,0x10(%rcx)
063ae732 mov       %r9,0x18(%rcx)
063ae736 mov       %r8,0x20(%rcx)
063ae73a mov       %rdx,0x28(%rcx)
063ae73e add       $0xC8,%rsp
063ae745 ret
063ae746 lea       0x68(%rsp),%rcx
063ae74b lea       0x63C`DB70,%rdx
063ae752 mov       $1,%r8d
063ae758 lea       0x63C`DB80,%r9
063ae75f xor       %eax,%eax
063ae761 movq      $0,0x20(%rsp)
063ae76a call      0x0000`0000`063A`E640
063ae76f lea       0x63C`DB80,%rdx
063ae776 lea       0x68(%rsp),%rcx
063ae77b call      0x0000`0000`063B`A100
063ae780 ud2

core::ops::range::RangeInclusive<usize>::into_slice_range:
063ae790 sub       $0x58,%rsp
063ae794 mov       %rcx,0x28(%rsp)
063ae799 mov       8(%rcx),%rax
063ae79d add       $1,%rax
063ae7a1 mov       %rax,0x30(%rsp)
063ae7a6 setb      %al
063ae7a9 test      $1,%al
063ae7ab jne       0x0000`0000`063A`E7C4
063ae7ad mov       0x28(%rsp),%rax
063ae7b2 mov       0x30(%rsp),%rcx
063ae7b7 mov       %rcx,0x50(%rsp)
063ae7bc testb     $1,0x10(%rax)
063ae7c0 jne       0x0000`0000`063A`E7ED
063ae7c2 jmp       0x0000`0000`063A`E7DE
063ae7c4 lea       0x63C`DA50,%rcx
063ae7cb lea       0x63C`DC10,%r8
063ae7d2 mov       $0x1C,%edx
063ae7d7 call      0x0000`0000`063B`9FF0
063ae7dc ud2
063ae7de mov       0x28(%rsp),%rax
063ae7e3 mov       (%rax),%rax
063ae7e6 mov       %rax,0x48(%rsp)
063ae7eb jmp       0x0000`0000`063A`E7F7
063ae7ed mov       0x30(%rsp),%rax
063ae7f2 mov       %rax,0x48(%rsp)
063ae7f7 mov       0x30(%rsp),%rax
063ae7fc mov       0x48(%rsp),%rcx
063ae801 mov       %rcx,0x38(%rsp)
063ae806 mov       %rax,0x40(%rsp)
063ae80b mov       0x38(%rsp),%rax
063ae810 mov       0x40(%rsp),%rdx
063ae815 add       $0x58,%rsp
063ae819 ret

core::ops::function::impls::impl$4::call_once<tuple$<str>,core::str::LinesAnyMap>:
063ae820 sub       $0x48,%rsp
063ae824 mov       %rdx,0x30(%rsp)
063ae829 mov       %r8,0x38(%rsp)
063ae82e mov       %rcx,0x40(%rsp)
063ae833 mov       0x30(%rsp),%rdx
063ae838 mov       0x38(%rsp),%r8
063ae83d call      0x0000`0000`063B`1690
063ae842 mov       %rax,0x20(%rsp)
063ae847 mov       %rdx,0x28(%rsp)
063ae84c mov       0x28(%rsp),%rdx
063ae851 mov       0x20(%rsp),%rax
063ae856 add       $0x48,%rsp
063ae85a ret

core::ptr::drop_in_place<ref_mut$<uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output> > >:
063ae860 push      %rax
063ae861 mov       %rcx,(%rsp)
063ae865 pop       %rax
063ae866 ret

core::ptr::slice_from_raw_parts<u16>:
063ae870 sub       $0x58,%rsp
063ae874 mov       %rdx,0x38(%rsp)
063ae879 mov       %rcx,0x48(%rsp)
063ae87e mov       %rdx,0x50(%rsp)
063ae883 call      0x0000`0000`063A`EAE0
063ae888 mov       %rax,0x40(%rsp)
063ae88d mov       0x38(%rsp),%rdx
063ae892 mov       0x40(%rsp),%rcx
063ae897 call      0x0000`0000`063A`E990
063ae89c mov       %rax,0x28(%rsp)
063ae8a1 mov       %rdx,0x30(%rsp)
063ae8a6 mov       0x30(%rsp),%rdx
063ae8ab mov       0x28(%rsp),%rax
063ae8b0 add       $0x58,%rsp
063ae8b4 ret

core::ptr::drop_in_place<ref$<tuple$<> > >:
063ae8c0 push      %rax
063ae8c1 mov       %rcx,(%rsp)
063ae8c5 pop       %rax
063ae8c6 ret

core::ptr::drop_in_place<core::fmt::Error>:
063ae8d0 push      %rax
063ae8d1 mov       %rcx,(%rsp)
063ae8d5 pop       %rax
063ae8d6 ret

core::ptr::drop_in_place<uefi::result::error::Error<tuple$<> > >:
063ae8e0 push      %rax
063ae8e1 mov       %rcx,(%rsp)
063ae8e5 pop       %rax
063ae8e6 ret

core::ptr::drop_in_place<ref$<uefi::result::status::Status> >:
063ae8f0 push      %rax
063ae8f1 mov       %rcx,(%rsp)
063ae8f5 pop       %rax
063ae8f6 ret

core::ptr::write<u64>:
063ae900 sub       $0x10,%rsp
063ae904 mov       %rdx,(%rsp)
063ae908 mov       %rcx,8(%rsp)
063ae90d mov       (%rsp),%rax
063ae911 mov       %rax,(%rcx)
063ae914 add       $0x10,%rsp
063ae918 ret

core::ptr::drop_in_place<ref_mut$<uefi::proto::console::text::output::Output> >:
063ae920 push      %rax
063ae921 mov       %rcx,(%rsp)
063ae925 pop       %rax
063ae926 ret

core::ptr::mut_ptr::impl$0::is_null<uefi::table::boot::BootServices>:
063ae930 sub       $0x38,%rsp
063ae934 mov       %rcx,0x30(%rsp)
063ae939 mov       %rcx,0x28(%rsp)
063ae93e mov       0x28(%rsp),%rcx
063ae943 xor       %eax,%eax
063ae945 mov       %eax,%edx
063ae947 call      0x0000`0000`063B`6920
063ae94c mov       %al,0x27(%rsp)
063ae950 mov       0x27(%rsp),%al
063ae954 and       $1,%al
063ae956 movzbl    %al,%eax
063ae959 add       $0x38,%rsp
063ae95d ret

core::ptr::mut_ptr::impl$0::is_null<uefi::proto::console::text::output::Output>:
063ae960 sub       $0x38,%rsp
063ae964 mov       %rcx,0x30(%rsp)
063ae969 mov       %rcx,0x28(%rsp)
063ae96e mov       0x28(%rsp),%rcx
063ae973 xor       %eax,%eax
063ae975 mov       %eax,%edx
063ae977 call      0x0000`0000`063B`6920
063ae97c mov       %al,0x27(%rsp)
063ae980 mov       0x27(%rsp),%al
063ae984 and       $1,%al
063ae986 movzbl    %al,%eax
063ae989 add       $0x38,%rsp
063ae98d ret

core::ptr::metadata::from_raw_parts<slice$<u16> >:
063ae990 sub       $0x30,%rsp
063ae994 mov       %rcx,0x20(%rsp)
063ae999 mov       %rdx,0x28(%rsp)
063ae99e mov       %rcx,0x10(%rsp)
063ae9a3 mov       %rdx,0x18(%rsp)
063ae9a8 mov       0x10(%rsp),%rcx
063ae9ad mov       0x18(%rsp),%rax
063ae9b2 mov       %rcx,(%rsp)
063ae9b6 mov       %rax,8(%rsp)
063ae9bb mov       (%rsp),%rax
063ae9bf mov       8(%rsp),%rdx
063ae9c4 add       $0x30,%rsp
063ae9c8 ret

core::ptr::non_null::NonNull<uefi::table::boot::BootServices>::new_unchecked<uefi::table::boot::BootServices>:
063ae9d0 sub       $0x10,%rsp
063ae9d4 mov       %rcx,8(%rsp)
063ae9d9 mov       %rcx,(%rsp)
063ae9dd mov       (%rsp),%rax
063ae9e1 add       $0x10,%rsp
063ae9e5 ret

core::ptr::non_null::NonNull<uefi::proto::console::text::output::Output>::new_unchecked<uefi::proto::console::text::output::Output>:
063ae9f0 sub       $0x10,%rsp
063ae9f4 mov       %rcx,8(%rsp)
063ae9f9 mov       %rcx,(%rsp)
063ae9fd mov       (%rsp),%rax
063aea01 add       $0x10,%rsp
063aea05 ret

core::ptr::non_null::NonNull<uefi::proto::console::text::output::Output>::new<uefi::proto::console::text::output::Output>:
063aea10 sub       $0x48,%rsp
063aea14 mov       %rcx,0x28(%rsp)
063aea19 mov       %rcx,0x40(%rsp)
063aea1e call      0x0000`0000`063A`E960
063aea23 mov       %al,0x37(%rsp)
063aea27 mov       0x37(%rsp),%al
063aea2b xor       $0xFF,%al
063aea2d test      $1,%al
063aea2f jne       0x0000`0000`063A`EA3C
063aea31 movq      $0,0x38(%rsp)
063aea3a jmp       0x0000`0000`063A`EA55
063aea3c mov       0x28(%rsp),%rcx
063aea41 call      0x0000`0000`063A`E9F0
063aea46 mov       %rax,0x20(%rsp)
063aea4b mov       0x20(%rsp),%rax
063aea50 mov       %rax,0x38(%rsp)
063aea55 mov       0x38(%rsp),%rax
063aea5a add       $0x48,%rsp
063aea5e ret

core::ptr::non_null::NonNull<uefi::table::boot::BootServices>::new<uefi::table::boot::BootServices>:
063aea60 sub       $0x48,%rsp
063aea64 mov       %rcx,0x28(%rsp)
063aea69 mov       %rcx,0x40(%rsp)
063aea6e call      0x0000`0000`063A`E930
063aea73 mov       %al,0x37(%rsp)
063aea77 mov       0x37(%rsp),%al
063aea7b xor       $0xFF,%al
063aea7d test      $1,%al
063aea7f jne       0x0000`0000`063A`EA8C
063aea81 movq      $0,0x38(%rsp)
063aea8a jmp       0x0000`0000`063A`EAA5
063aea8c mov       0x28(%rsp),%rcx
063aea91 call      0x0000`0000`063A`E9D0
063aea96 mov       %rax,0x20(%rsp)
063aea9b mov       0x20(%rsp),%rax
063aeaa0 mov       %rax,0x38(%rsp)
063aeaa5 mov       0x38(%rsp),%rax
063aeaaa add       $0x48,%rsp
063aeaae ret

core::ptr::non_null::NonNull<uefi::proto::console::text::output::Output>::as_mut<uefi::proto::console::text::output::Output>:
063aeab0 sub       $0x38,%rsp
063aeab4 mov       %rcx,0x30(%rsp)
063aeab9 mov       (%rcx),%rcx
063aeabc call      0x0000`0000`063A`EAD0
063aeac1 mov       %rax,0x28(%rsp)
063aeac6 mov       0x28(%rsp),%rax
063aeacb add       $0x38,%rsp
063aeacf ret

core::ptr::non_null::NonNull<uefi::proto::console::text::output::Output>::as_ptr<uefi::proto::console::text::output::Output>:
063aead0 push      %rax
063aead1 mov       %rcx,%rax
063aead4 mov       %rax,(%rsp)
063aead8 pop       %rcx
063aead9 ret

core::ptr::const_ptr::impl$0::cast<u16,tuple$<> >:
063aeae0 push      %rax
063aeae1 mov       %rcx,%rax
063aeae4 mov       %rax,(%rsp)
063aeae8 pop       %rcx
063aeae9 ret

core::ptr::const_ptr::impl$0::is_null<u64>:
063aeaf0 sub       $0x38,%rsp
063aeaf4 mov       %rcx,0x30(%rsp)
063aeaf9 mov       %rcx,0x28(%rsp)
063aeafe mov       0x28(%rsp),%rcx
063aeb03 xor       %eax,%eax
063aeb05 mov       %eax,%edx
063aeb07 call      0x0000`0000`063B`64E0
063aeb0c mov       %al,0x27(%rsp)
063aeb10 mov       0x27(%rsp),%al
063aeb14 and       $1,%al
063aeb16 movzbl    %al,%eax
063aeb19 add       $0x38,%rsp
063aeb1d ret

core::ptr::const_ptr::impl$1::as_ptr<u16>:
063aeb20 sub       $0x10,%rsp
063aeb24 mov       %rcx,%rax
063aeb27 mov       %rax,(%rsp)
063aeb2b mov       %rdx,8(%rsp)
063aeb30 add       $0x10,%rsp
063aeb34 ret

core::str::validations::utf8_first_byte:
063aeb40 sub       $0x28,%rsp
063aeb44 mov       %cl,0x21(%rsp)
063aeb48 mov       %cl,0x23(%rsp)
063aeb4c mov       %edx,0x24(%rsp)
063aeb50 mov       %edx,%eax
063aeb52 and       $0xFFFF`FFF8,%eax
063aeb55 cmp       $0,%eax
063aeb58 setne     %al
063aeb5b mov       %dl,%cl
063aeb5d and       $7,%cl
063aeb60 mov       $0x7F,%dl
063aeb62 shr       %cl,%dl
063aeb64 mov       %dl,0x22(%rsp)
063aeb68 test      $1,%al
063aeb6a jne       0x0000`0000`063A`EB7E
063aeb6c mov       0x22(%rsp),%cl
063aeb70 mov       0x21(%rsp),%al
063aeb74 and       %cl,%al
063aeb76 movzbl    %al,%eax
063aeb79 add       $0x28,%rsp
063aeb7d ret
063aeb7e lea       0x63C`DCC0,%rcx
063aeb85 lea       0x63C`DCA8,%r8
063aeb8c mov       $0x24,%edx
063aeb91 call      0x0000`0000`063B`9FF0
063aeb96 ud2

core::str::validations::utf8_is_cont_byte:
063aeba0 push      %rax
063aeba1 mov       %cl,7(%rsp)
063aeba5 cmp       $0xC0,%cl
063aeba8 setl      %al
063aebab and       $1,%al
063aebad movzbl    %al,%eax
063aebb0 pop       %rcx
063aebb1 ret

core::str::validations::utf8_acc_cont_byte:
063aebc0 sub       $0x10,%rsp
063aebc4 mov       %dl,3(%rsp)
063aebc8 mov       %ecx,8(%rsp)
063aebcc mov       %dl,0xF(%rsp)
063aebd0 shl       $6,%ecx
063aebd3 mov       %ecx,4(%rsp)
063aebd7 mov       4(%rsp),%eax
063aebdb mov       3(%rsp),%cl
063aebdf and       $0x3F,%cl
063aebe2 movzbl    %cl,%ecx
063aebe5 or        %ecx,%eax
063aebe7 add       $0x10,%rsp
063aebeb ret

core::str::validations::next_code_point_reverse<core::slice::iter::Iter<u8> >:
063aebf0 sub       $0xD8,%rsp
063aebf7 mov       %rcx,0x88(%rsp)
063aebff mov       %rcx,0xB0(%rsp)
063aec07 call      0x0000`0000`063C`AB40
063aec0c mov       %rax,0x90(%rsp)
063aec14 mov       0x90(%rsp),%rcx
063aec1c call      0x0000`0000`063B`9E10
063aec21 mov       %rax,0xA0(%rsp)
063aec29 mov       0xA0(%rsp),%rax
063aec31 test      %rax,%rax
063aec34 sete      %al
063aec37 movzbl    %al,%eax
063aec3a jne       0x0000`0000`063A`EC42
063aec3c jmp       0x0000`0000`063A`EC3E
063aec3e jmp       0x0000`0000`063A`EC69
063aec40 ud2
063aec42 mov       0xA0(%rsp),%rax
063aec4a mov       %rax,0x80(%rsp)
063aec52 mov       %rax,0xC0(%rsp)
063aec5a mov       %rax,0xC8(%rsp)
063aec62 cmpb      $0x80,(%rax)
063aec65 jb        0x0000`0000`063A`ECC2
063aec67 jmp       0x0000`0000`063A`EC92
063aec69 call      0x0000`0000`063B`9F00
063aec6e mov       %edx,0x9C(%rsp)
063aec75 mov       %eax,0x98(%rsp)
063aec7c mov       0x98(%rsp),%eax
063aec83 mov       0x9C(%rsp),%edx
063aec8a add       $0xD8,%rsp
063aec91 ret
063aec92 mov       0x88(%rsp),%rcx
063aec9a mov       0x80(%rsp),%rax
063aeca2 mov       (%rax),%al
063aeca4 mov       %al,0x77(%rsp)
063aeca8 mov       %al,0xD3(%rsp)
063aecaf mov       %al,0xD4(%rsp)
063aecb6 call      0x0000`0000`063C`AB40
063aecbb mov       %rax,0x78(%rsp)
063aecc0 jmp       0x0000`0000`063A`ECEA
063aecc2 mov       0x80(%rsp),%rax
063aecca mov       (%rax),%al
063aeccc mov       %al,0xD2(%rsp)
063aecd3 movzbl    %al,%eax
063aecd6 mov       %eax,0x9C(%rsp)
063aecdd movl      $1,0x98(%rsp)
063aece8 jmp       0x0000`0000`063A`EC7C
063aecea mov       0x78(%rsp),%rcx
063aecef lea       0x63C`DCE8,%rdx
063aecf6 call      0x0000`0000`063B`9890
063aecfb mov       %rax,0x68(%rsp)
063aed00 mov       0x68(%rsp),%rax
063aed05 mov       (%rax),%cl
063aed07 mov       %cl,0x63(%rsp)
063aed0b mov       %cl,0xD5(%rsp)
063aed12 mov       $2,%edx
063aed17 call      0x0000`0000`063A`EB40
063aed1c mov       %eax,0x64(%rsp)
063aed20 mov       0x63(%rsp),%cl
063aed24 mov       0x64(%rsp),%eax
063aed28 mov       %eax,0xAC(%rsp)
063aed2f call      0x0000`0000`063A`EBA0
063aed34 mov       %al,0x62(%rsp)
063aed38 mov       0x62(%rsp),%al
063aed3c test      $1,%al
063aed3e jne       0x0000`0000`063A`ED5B
063aed40 jmp       0x0000`0000`063A`ED42
063aed42 mov       0x77(%rsp),%dl
063aed46 mov       0xAC(%rsp),%ecx
063aed4d call      0x0000`0000`063A`EBC0
063aed52 mov       %eax,0x5C(%rsp)
063aed56 jmp       0x0000`0000`063A`EE5E
063aed5b mov       0x88(%rsp),%rcx
063aed63 call      0x0000`0000`063C`AB40
063aed68 mov       %rax,0x50(%rsp)
063aed6d mov       0x50(%rsp),%rcx
063aed72 lea       0x63C`DD00,%rdx
063aed79 call      0x0000`0000`063B`9890
063aed7e mov       %rax,0x48(%rsp)
063aed83 mov       0x48(%rsp),%rax
063aed88 mov       (%rax),%cl
063aed8a mov       %cl,0x43(%rsp)
063aed8e mov       %cl,0xD6(%rsp)
063aed95 mov       $3,%edx
063aed9a call      0x0000`0000`063A`EB40
063aed9f mov       %eax,0x44(%rsp)
063aeda3 mov       0x43(%rsp),%cl
063aeda7 mov       0x44(%rsp),%eax
063aedab mov       %eax,0xAC(%rsp)
063aedb2 call      0x0000`0000`063A`EBA0
063aedb7 mov       %al,0x42(%rsp)
063aedbb mov       0x42(%rsp),%al
063aedbf test      $1,%al
063aedc1 jne       0x0000`0000`063A`EDDB
063aedc3 jmp       0x0000`0000`063A`EDC5
063aedc5 mov       0x63(%rsp),%dl
063aedc9 mov       0xAC(%rsp),%ecx
063aedd0 call      0x0000`0000`063A`EBC0
063aedd5 mov       %eax,0x3C(%rsp)
063aedd9 jmp       0x0000`0000`063A`EE4E
063aeddb mov       0x88(%rsp),%rcx
063aede3 call      0x0000`0000`063C`AB40
063aede8 mov       %rax,0x30(%rsp)
063aeded mov       0x30(%rsp),%rcx
063aedf2 lea       0x63C`DD18,%rdx
063aedf9 call      0x0000`0000`063B`9890
063aedfe mov       %rax,0x28(%rsp)
063aee03 mov       0x28(%rsp),%rax
063aee08 mov       (%rax),%cl
063aee0a mov       %cl,0xD7(%rsp)
063aee11 mov       $4,%edx
063aee16 call      0x0000`0000`063A`EB40
063aee1b mov       %eax,0x24(%rsp)
063aee1f mov       0x43(%rsp),%dl
063aee23 mov       0x24(%rsp),%eax
063aee27 mov       %eax,0xAC(%rsp)
063aee2e mov       0xAC(%rsp),%ecx
063aee35 call      0x0000`0000`063A`EBC0
063aee3a mov       %eax,0x20(%rsp)
063aee3e mov       0x20(%rsp),%eax
063aee42 mov       %eax,0xAC(%rsp)
063aee49 jmp       0x0000`0000`063A`EDC5
063aee4e mov       0x3C(%rsp),%eax
063aee52 mov       %eax,0xAC(%rsp)
063aee59 jmp       0x0000`0000`063A`ED42
063aee5e mov       0x5C(%rsp),%eax
063aee62 mov       %eax,0xAC(%rsp)
063aee69 mov       0xAC(%rsp),%eax
063aee70 mov       %eax,0x9C(%rsp)
063aee77 movl      $1,0x98(%rsp)
063aee82 jmp       0x0000`0000`063A`EC7C

core::str::impl$0::get_unchecked<core::ops::range::Range<usize> >:
063aee90 sub       $0x68,%rsp
063aee94 mov       %r9,0x28(%rsp)
063aee99 mov       %r8,0x30(%rsp)
063aee9e mov       %rdx,%r9
063aeea1 mov       0x28(%rsp),%rdx
063aeea6 mov       %rcx,%r8
063aeea9 mov       0x30(%rsp),%rcx
063aeeae mov       %r8,0x48(%rsp)
063aeeb3 mov       %r9,0x50(%rsp)
063aeeb8 mov       %rcx,0x58(%rsp)
063aeebd mov       %rdx,0x60(%rsp)
063aeec2 call      0x0000`0000`063A`F3E0
063aeec7 mov       %rax,0x38(%rsp)
063aeecc mov       %rdx,0x40(%rsp)
063aeed1 mov       0x40(%rsp),%rdx
063aeed6 mov       0x38(%rsp),%rax
063aeedb add       $0x68,%rsp
063aeedf ret

core::str::impl$0::split_terminator<char>:
063aeee0 sub       $0xD8,%rsp
063aeee7 mov       %rcx,0x20(%rsp)
063aeeec mov       %rcx,0x28(%rsp)
063aeef1 mov       %rdx,0xC0(%rsp)
063aeef9 mov       %r8,0xC8(%rsp)
063aef01 mov       %r9d,0xD4(%rsp)
063aef09 lea       0x78(%rsp),%rcx
063aef0e call      0x0000`0000`063A`F0B0
063aef13 mov       0x78(%rsp),%rax
063aef18 mov       %rax,0x30(%rsp)
063aef1d mov       0x80(%rsp),%rax
063aef25 mov       %rax,0x38(%rsp)
063aef2a lea       0x30(%rsp),%rcx
063aef2f add       $0x10,%rcx
063aef33 lea       0x78(%rsp),%rdx
063aef38 add       $0x10,%rdx
063aef3c mov       $0x30,%r8d
063aef42 call      0x0000`0000`063C`BD50
063aef47 mov       0x20(%rsp),%rcx
063aef4c movb      $0,0x70(%rsp)
063aef51 mov       0xB9(%rsp),%al
063aef58 and       $1,%al
063aef5a mov       %al,0x71(%rsp)
063aef5e lea       0x30(%rsp),%rdx
063aef63 mov       $0x48,%r8d
063aef69 call      0x0000`0000`063C`BD50
063aef6e mov       0x28(%rsp),%rax
063aef73 add       $0xD8,%rsp
063aef7a ret

core::str::impl$0::len:
063aef80 sub       $0x38,%rsp
063aef84 mov       %rcx,8(%rsp)
063aef89 mov       %rdx,0x10(%rsp)
063aef8e mov       %rcx,0x18(%rsp)
063aef93 mov       %rdx,0x20(%rsp)
063aef98 mov       %rcx,0x28(%rsp)
063aef9d mov       %rdx,0x30(%rsp)
063aefa2 mov       0x28(%rsp),%rax
063aefa7 mov       0x30(%rsp),%rax
063aefac mov       %rax,(%rsp)
063aefb0 mov       (%rsp),%rax
063aefb4 add       $0x38,%rsp
063aefb8 ret

core::str::impl$0::chars:
063aefc0 sub       $0x88,%rsp
063aefc7 mov       %rcx,0x58(%rsp)
063aefcc mov       %rdx,0x60(%rsp)
063aefd1 mov       %rcx,0x68(%rsp)
063aefd6 mov       %rdx,0x70(%rsp)
063aefdb mov       %rcx,0x78(%rsp)
063aefe0 mov       %rdx,0x80(%rsp)
063aefe8 mov       0x78(%rsp),%rax
063aefed mov       %rax,0x38(%rsp)
063aeff2 mov       0x80(%rsp),%rax
063aeffa mov       %rax,0x40(%rsp)
063aefff mov       0x40(%rsp),%rdx
063af004 mov       0x38(%rsp),%rcx
063af009 call      0x0000`0000`063C`3E90
063af00e mov       %rax,0x28(%rsp)
063af013 mov       %rdx,0x30(%rsp)
063af018 mov       0x30(%rsp),%rax
063af01d mov       0x28(%rsp),%rcx
063af022 mov       %rcx,0x48(%rsp)
063af027 mov       %rax,0x50(%rsp)
063af02c mov       0x48(%rsp),%rax
063af031 mov       0x50(%rsp),%rdx
063af036 add       $0x88,%rsp
063af03d ret

core::str::impl$0::lines:
063af040 sub       $0xD8,%rsp
063af047 mov       %rcx,0x28(%rsp)
063af04c mov       %rcx,0x30(%rsp)
063af051 mov       %rdx,0xC8(%rsp)
063af059 mov       %r8,0xD0(%rsp)
063af061 lea       0x80(%rsp),%rcx
063af069 mov       $0xA,%r9d
063af06f call      0x0000`0000`063A`EEE0
063af074 lea       0x38(%rsp),%rcx
063af079 lea       0x80(%rsp),%rdx
063af081 call      0x0000`0000`063A`FBC0
063af086 mov       0x28(%rsp),%rcx
063af08b lea       0x38(%rsp),%rdx
063af090 mov       $0x48,%r8d
063af096 call      0x0000`0000`063C`BD50
063af09b mov       0x30(%rsp),%rax
063af0a0 add       $0xD8,%rsp
063af0a7 ret

core::str::impl$0::split<char>:
063af0b0 sub       $0xE8,%rsp
063af0b7 mov       %r9d,0x2C(%rsp)
063af0bc mov       %r8,0x30(%rsp)
063af0c1 mov       %rdx,%rax
063af0c4 mov       0x30(%rsp),%rdx
063af0c9 mov       %rax,0x38(%rsp)
063af0ce mov       %rcx,%rax
063af0d1 mov       0x38(%rsp),%rcx
063af0d6 mov       %rax,0x40(%rsp)
063af0db mov       %rax,0x48(%rsp)
063af0e0 mov       %rcx,0xD0(%rsp)
063af0e8 mov       %rdx,0xD8(%rsp)
063af0f0 mov       %r9d,0xE4(%rsp)
063af0f8 call      0x0000`0000`063A`EF80
063af0fd mov       %rax,0x50(%rsp)
063af102 mov       0x30(%rsp),%r9
063af107 mov       0x38(%rsp),%r8
063af10c mov       0x2C(%rsp),%edx
063af110 lea       0xA0(%rsp),%rcx
063af118 call      0x0000`0000`063B`0D20
063af11d mov       0x50(%rsp),%rax
063af122 movq      $0,0x58(%rsp)
063af12b mov       %rax,0x60(%rsp)
063af130 lea       0x58(%rsp),%rcx
063af135 add       $0x10,%rcx
063af139 lea       0xA0(%rsp),%rdx
063af141 mov       $0x30,%r8d
063af147 call      0x0000`0000`063C`BD50
063af14c mov       0x40(%rsp),%rcx
063af151 movb      $1,0x98(%rsp)
063af159 movb      $0,0x99(%rsp)
063af161 lea       0x58(%rsp),%rdx
063af166 mov       $0x48,%r8d
063af16c call      0x0000`0000`063C`BD50
063af171 mov       0x48(%rsp),%rax
063af176 add       $0xE8,%rsp
063af17d ret

core::str::iter::SplitInternal<char>::next<char>:
063af180 sub       $0xC8,%rsp
063af187 mov       %rcx,0x50(%rsp)
063af18c mov       %rcx,0x90(%rsp)
063af194 testb     $1,0x41(%rcx)
063af198 jne       0x0000`0000`063A`F1C4
063af19a mov       0x50(%rsp),%rcx
063af19f add       $0x10,%rcx
063af1a3 call      0x0000`0000`063B`1460
063af1a8 mov       %rax,0x40(%rsp)
063af1ad mov       %rdx,0x48(%rsp)
063af1b2 mov       %rax,0x98(%rsp)
063af1ba mov       %rdx,0xA0(%rsp)
063af1c2 jmp       0x0000`0000`063A`F1DF
063af1c4 movq      $0,0x58(%rsp)
063af1cd mov       0x58(%rsp),%rax
063af1d2 mov       0x60(%rsp),%rdx
063af1d7 add       $0xC8,%rsp
063af1de ret
063af1df mov       0x50(%rsp),%rdx
063af1e4 add       $0x10,%rdx
063af1e8 lea       0x68(%rsp),%rcx
063af1ed call      0x0000`0000`063B`0FB0
063af1f2 mov       0x68(%rsp),%rax
063af1f7 test      %rax,%rax
063af1fa je        0x0000`0000`063A`F202
063af1fc jmp       0x0000`0000`063A`F1FE
063af1fe jmp       0x0000`0000`063A`F218
063af200 ud2
063af202 mov       0x50(%rsp),%rcx
063af207 call      0x0000`0000`063A`F2B0
063af20c mov       %rdx,0x60(%rsp)
063af211 mov       %rax,0x58(%rsp)
063af216 jmp       0x0000`0000`063A`F1CD
063af218 mov       0x48(%rsp),%rdx
063af21d mov       0x40(%rsp),%rcx
063af222 mov       0x50(%rsp),%r8
063af227 mov       0x70(%rsp),%rax
063af22c mov       %rax,0xA8(%rsp)
063af234 mov       0x78(%rsp),%r9
063af239 mov       %r9,0x28(%rsp)
063af23e mov       %r9,0xB0(%rsp)
063af246 mov       (%r8),%r8
063af249 mov       %r8,0x80(%rsp)
063af251 mov       %rax,0x88(%rsp)
063af259 mov       0x80(%rsp),%r8
063af261 mov       0x88(%rsp),%r9
063af269 call      0x0000`0000`063A`EE90
063af26e mov       %rax,0x30(%rsp)
063af273 mov       %rdx,0x38(%rsp)
063af278 mov       %rax,0xB8(%rsp)
063af280 mov       %rdx,0xC0(%rsp)
063af288 mov       0x38(%rsp),%rax
063af28d mov       0x30(%rsp),%rcx
063af292 mov       0x50(%rsp),%rdx
063af297 mov       0x28(%rsp),%r8
063af29c mov       %r8,(%rdx)
063af29f mov       %rcx,0x58(%rsp)
063af2a4 mov       %rax,0x60(%rsp)
063af2a9 jmp       0x0000`0000`063A`F1CD

core::str::iter::SplitInternal<char>::get_end<char>:
063af2b0 sub       $0x98,%rsp
063af2b7 mov       %rcx,0x50(%rsp)
063af2bc mov       %rcx,0x80(%rsp)
063af2c4 mov       0x41(%rcx),%al
063af2c7 xor       $0xFF,%al
063af2c9 test      $1,%al
063af2cb jne       0x0000`0000`063A`F2D4
063af2cd movb      $0,0x6E(%rsp)
063af2d2 jmp       0x0000`0000`063A`F338
063af2d4 mov       0x50(%rsp),%rax
063af2d9 testb     $1,0x40(%rax)
063af2dd jne       0x0000`0000`063A`F2F9
063af2df mov       0x50(%rsp),%rcx
063af2e4 mov       8(%rcx),%rax
063af2e8 sub       (%rcx),%rax
063af2eb mov       %rax,0x48(%rsp)
063af2f0 setb      %al
063af2f3 test      $1,%al
063af2f5 jne       0x0000`0000`063A`F31E
063af2f7 jmp       0x0000`0000`063A`F30A
063af2f9 movb      $1,0x6F(%rsp)
063af2fe mov       0x6F(%rsp),%al
063af302 and       $1,%al
063af304 mov       %al,0x6E(%rsp)
063af308 jmp       0x0000`0000`063A`F338
063af30a mov       0x48(%rsp),%rax
063af30f cmp       $0,%rax
063af313 seta      %al
063af316 and       $1,%al
063af318 mov       %al,0x6F(%rsp)
063af31c jmp       0x0000`0000`063A`F2FE
063af31e lea       0x63C`D990,%rcx
063af325 lea       0x63C`DDA8,%r8
063af32c mov       $0x21,%edx
063af331 call      0x0000`0000`063B`9FF0
063af336 ud2
063af338 testb     $1,0x6E(%rsp)
063af33d jne       0x0000`0000`063A`F34A
063af33f movq      $0,0x58(%rsp)
063af348 jmp       0x0000`0000`063A`F3C3
063af34a mov       0x50(%rsp),%rcx
063af34f movb      $1,0x41(%rcx)
063af353 add       $0x10,%rcx
063af357 call      0x0000`0000`063B`1460
063af35c mov       %rax,0x38(%rsp)
063af361 mov       %rdx,0x40(%rsp)
063af366 mov       0x40(%rsp),%rdx
063af36b mov       0x38(%rsp),%rcx
063af370 mov       0x50(%rsp),%rax
063af375 mov       (%rax),%r8
063af378 mov       8(%rax),%rax
063af37c mov       %r8,0x70(%rsp)
063af381 mov       %rax,0x78(%rsp)
063af386 mov       0x70(%rsp),%r8
063af38b mov       0x78(%rsp),%r9
063af390 call      0x0000`0000`063A`EE90
063af395 mov       %rax,0x28(%rsp)
063af39a mov       %rdx,0x30(%rsp)
063af39f mov       %rax,0x88(%rsp)
063af3a7 mov       %rdx,0x90(%rsp)
063af3af mov       0x30(%rsp),%rax
063af3b4 mov       0x28(%rsp),%rcx
063af3b9 mov       %rcx,0x58(%rsp)
063af3be mov       %rax,0x60(%rsp)
063af3c3 mov       0x58(%rsp),%rax
063af3c8 mov       0x60(%rsp),%rdx
063af3cd add       $0x98,%rsp
063af3d4 ret

core::str::traits::impl$7::get_unchecked:
063af3e0 sub       $0xD8,%rsp
063af3e7 mov       %r9,0x48(%rsp)
063af3ec mov       %r8,0x58(%rsp)
063af3f1 mov       %rdx,%rax
063af3f4 mov       0x48(%rsp),%rdx
063af3f9 mov       %rax,0x50(%rsp)
063af3fe mov       %rcx,%r8
063af401 mov       0x58(%rsp),%rcx
063af406 mov       %r8,0x60(%rsp)
063af40b mov       %r8,0x70(%rsp)
063af410 mov       %rax,0x78(%rsp)
063af415 mov       %rcx,0x80(%rsp)
063af41d mov       %rdx,0x88(%rsp)
063af425 mov       %rcx,0x90(%rsp)
063af42d mov       %rdx,0x98(%rsp)
063af435 call      0x0000`0000`063B`6790
063af43a mov       %rax,0x68(%rsp)
063af43f mov       0x60(%rsp),%rcx
063af444 mov       0x68(%rsp),%rax
063af449 mov       %rax,0xB0(%rsp)
063af451 mov       %rcx,0xB8(%rsp)
063af459 mov       %rax,0xC0(%rsp)
063af461 mov       %rcx,0xC8(%rsp)
063af469 add       %rcx,%rax
063af46c mov       %rax,0xD0(%rsp)
063af474 mov       0xD0(%rsp),%rax
063af47c mov       %rax,0x40(%rsp)
063af481 mov       %rax,0xA0(%rsp)
063af489 mov       0x60(%rsp),%rcx
063af48e mov       0x50(%rsp),%rax
063af493 sub       %rcx,%rax
063af496 mov       %rax,0x38(%rsp)
063af49b setb      %al
063af49e test      $1,%al
063af4a0 jne       0x0000`0000`063A`F4C5
063af4a2 mov       0x38(%rsp),%rdx
063af4a7 mov       0x40(%rsp),%rcx
063af4ac mov       %rdx,0xA8(%rsp)
063af4b4 call      0x0000`0000`063B`69A0
063af4b9 mov       %rax,0x28(%rsp)
063af4be mov       %rdx,0x30(%rsp)
063af4c3 jmp       0x0000`0000`063A`F4DF
063af4c5 lea       0x63C`D990,%rcx
063af4cc lea       0x63C`DE40,%r8
063af4d3 mov       $0x21,%edx
063af4d8 call      0x0000`0000`063B`9FF0
063af4dd ud2
063af4df mov       0x30(%rsp),%rdx
063af4e4 mov       0x28(%rsp),%rax
063af4e9 add       $0xD8,%rsp
063af4f0 ret

core::str::converts::from_utf8_unchecked_mut:
063af500 sub       $0x10,%rsp
063af504 mov       %rcx,%rax
063af507 mov       %rax,(%rsp)
063af50b mov       %rdx,8(%rsp)
063af510 add       $0x10,%rsp
063af514 ret

core::char::convert::char_try_from_u32:
063af520 sub       $0x20,%rsp
063af524 mov       %ecx,%eax
063af526 mov       %eax,4(%rsp)
063af52a mov       %eax,0x10(%rsp)
063af52e xor       $0xD800,%eax
063af533 mov       %eax,0x18(%rsp)
063af537 movl      $0x800,0x1C(%rsp)
063af53f sub       $0x800,%eax
063af544 mov       %eax,8(%rsp)
063af548 mov       8(%rsp),%eax
063af54c cmp       $0x10`F800,%eax
063af551 jae       0x0000`0000`063A`F564
063af553 mov       4(%rsp),%eax
063af557 mov       %eax,0x14(%rsp)
063af55b mov       0x14(%rsp),%eax
063af55f mov       %eax,(%rsp)
063af562 jmp       0x0000`0000`063A`F575
063af564 movl      $0x11`0000,0xC(%rsp)
063af56c mov       0xC(%rsp),%eax
063af570 add       $0x20,%rsp
063af574 ret
063af575 mov       (%rsp),%eax
063af578 mov       %eax,0xC(%rsp)
063af57c jmp       0x0000`0000`063A`F56C

core::char::convert::from_u32_unchecked:
063af580 sub       $0x38,%rsp
063af584 mov       %ecx,0x34(%rsp)
063af588 call      0x0000`0000`063A`FB20
063af58d mov       %eax,0x30(%rsp)
063af591 mov       0x30(%rsp),%ecx
063af595 lea       0x63C`DED8,%rdx
063af59c call      0x0000`0000`063B`9630
063af5a1 mov       %eax,0x2C(%rsp)
063af5a5 mov       0x2C(%rsp),%eax
063af5a9 add       $0x38,%rsp
063af5ad ret

core::char::convert::impl$8::try_from:
063af5b0 sub       $0x28,%rsp
063af5b4 mov       %ecx,0x24(%rsp)
063af5b8 call      0x0000`0000`063A`F520
063af5bd mov       %eax,0x20(%rsp)
063af5c1 mov       0x20(%rsp),%eax
063af5c5 add       $0x28,%rsp
063af5c9 ret

core::char::convert::from_u32:
063af5d0 sub       $0x38,%rsp
063af5d4 mov       %ecx,0x30(%rsp)
063af5d8 call      0x0000`0000`063A`F520
063af5dd mov       %eax,0x2C(%rsp)
063af5e1 mov       0x2C(%rsp),%eax
063af5e5 add       $0xFFEF`0000,%eax
063af5ea sete      %al
063af5ed movzbl    %al,%eax
063af5f0 jne       0x0000`0000`063A`F5F8
063af5f2 jmp       0x0000`0000`063A`F5F4
063af5f4 jmp       0x0000`0000`063A`F606
063af5f6 ud2
063af5f8 mov       0x2C(%rsp),%eax
063af5fc mov       %eax,0x34(%rsp)
063af600 mov       %eax,0x28(%rsp)
063af604 jmp       0x0000`0000`063A`F60E
063af606 movl      $0x11`0000,0x28(%rsp)
063af60e mov       0x28(%rsp),%eax
063af612 add       $0x38,%rsp
063af616 ret

core::char::methods::encode_utf8_raw:
063af620 sub       $0x1F8,%rsp
063af627 mov       %r8,0xF0(%rsp)
063af62f mov       %rdx,0xF8(%rsp)
063af637 mov       %ecx,0x104(%rsp)
063af63e mov       %rdx,0x198(%rsp)
063af646 mov       %r8,0x1A0(%rsp)
063af64e mov       0x104(%rsp),%ecx
063af655 call      0x0000`0000`063A`FB40
063af65a mov       %rax,0x108(%rsp)
063af662 mov       0xF0(%rsp),%rdx
063af66a mov       0xF8(%rsp),%rcx
063af672 mov       0x108(%rsp),%rax
063af67a mov       %rax,0xD8(%rsp)
063af682 lea       0x63C`DF70,%r8
063af689 call      0x0000`0000`063C`1B10
063af68e mov       %rax,0xE0(%rsp)
063af696 mov       %rdx,0xE8(%rsp)
063af69e mov       0xE8(%rsp),%rax
063af6a6 mov       0xE0(%rsp),%rcx
063af6ae mov       0xD8(%rsp),%rdx
063af6b6 mov       %rdx,0x110(%rsp)
063af6be mov       %rcx,0x118(%rsp)
063af6c6 mov       %rax,0x120(%rsp)
063af6ce mov       0x110(%rsp),%rax
063af6d6 add       $0xFFFF`FFFF`FFFF`FFFF,%rax
063af6da mov       %rax,0xD0(%rsp)
063af6e2 sub       $3,%rax
063af6e6 ja        0x0000`0000`063A`F700
063af6e8 mov       0xD0(%rsp),%rax
063af6f0 lea       0x63A`FAB4,%rcx
063af6f7 movslq    (%rcx,%rax,4),%rax
063af6fb add       %rcx,%rax
063af6fe jmp       *%rax
063af700 lea       0x108(%rsp),%rcx
063af708 call      0x0000`0000`063C`9990
063af70d mov       %rax,0xC0(%rsp)
063af715 mov       %rdx,0xC8(%rsp)
063af71d jmp       0x0000`0000`063A`F9DE
063af722 cmpq      $1,0x120(%rsp)
063af72b jae       0x0000`0000`063A`F9A8
063af731 jmp       0x0000`0000`063A`F700
063af733 cmpq      $2,0x120(%rsp)
063af73c jae       0x0000`0000`063A`F942
063af742 jmp       0x0000`0000`063A`F700
063af744 cmpq      $3,0x120(%rsp)
063af74d jae       0x0000`0000`063A`F8A4
063af753 jmp       0x0000`0000`063A`F700
063af755 cmpq      $4,0x120(%rsp)
063af75e jb        0x0000`0000`063A`F700
063af760 mov       0x118(%rsp),%rax
063af768 mov       %rax,0x98(%rsp)
063af770 mov       %rax,0x1A8(%rsp)
063af778 mov       0x118(%rsp),%rax
063af780 add       $1,%rax
063af784 mov       %rax,0xA0(%rsp)
063af78c mov       %rax,0x1B0(%rsp)
063af794 mov       0x118(%rsp),%rax
063af79c add       $2,%rax
063af7a0 mov       %rax,0xA8(%rsp)
063af7a8 mov       %rax,0x1B8(%rsp)
063af7b0 mov       0x118(%rsp),%rax
063af7b8 add       $3,%rax
063af7bc mov       %rax,0xB0(%rsp)
063af7c4 mov       %rax,0x1C0(%rsp)
063af7cc mov       0x104(%rsp),%eax
063af7d3 shr       $0x12,%eax
063af7d6 mov       %eax,0xBC(%rsp)
063af7dd mov       0x98(%rsp),%rax
063af7e5 mov       0xBC(%rsp),%ecx
063af7ec and       $7,%ecx
063af7ef or        $0xF0,%cl
063af7f2 mov       %cl,(%rax)
063af7f4 mov       0x104(%rsp),%eax
063af7fb shr       $0xC,%eax
063af7fe mov       %eax,0x94(%rsp)
063af805 mov       0xA0(%rsp),%rax
063af80d mov       0x94(%rsp),%ecx
063af814 and       $0x3F,%ecx
063af817 or        $0x80,%cl
063af81a mov       %cl,(%rax)
063af81c mov       0x104(%rsp),%eax
063af823 shr       $6,%eax
063af826 mov       %eax,0x90(%rsp)
063af82d mov       0xB0(%rsp),%rax
063af835 mov       0xA8(%rsp),%rcx
063af83d mov       0x90(%rsp),%edx
063af844 and       $0x3F,%edx
063af847 or        $0x80,%dl
063af84a mov       %dl,(%rcx)
063af84c mov       0x104(%rsp),%ecx
063af853 and       $0x3F,%ecx
063af856 or        $0x80,%cl
063af859 mov       %cl,(%rax)
063af85b mov       0xF0(%rsp),%rdx
063af863 mov       0xF8(%rsp),%rcx
063af86b mov       0x108(%rsp),%rax
063af873 mov       %rax,0x190(%rsp)
063af87b mov       0x190(%rsp),%r8
063af883 lea       0x63C`DF88,%r9
063af88a call      0x0000`0000`063C`1AC0
063af88f mov       %rax,0x80(%rsp)
063af897 mov       %rdx,0x88(%rsp)
063af89f jmp       0x0000`0000`063A`F9C6
063af8a4 mov       0x118(%rsp),%rax
063af8ac mov       %rax,0x60(%rsp)
063af8b1 mov       %rax,0x1C8(%rsp)
063af8b9 mov       0x118(%rsp),%rax
063af8c1 add       $1,%rax
063af8c5 mov       %rax,0x68(%rsp)
063af8ca mov       %rax,0x1D0(%rsp)
063af8d2 mov       0x118(%rsp),%rax
063af8da add       $2,%rax
063af8de mov       %rax,0x70(%rsp)
063af8e3 mov       %rax,0x1D8(%rsp)
063af8eb mov       0x104(%rsp),%eax
063af8f2 shr       $0xC,%eax
063af8f5 mov       %eax,0x7C(%rsp)
063af8f9 mov       0x60(%rsp),%rax
063af8fe mov       0x7C(%rsp),%ecx
063af902 and       $0xF,%ecx
063af905 or        $0xE0,%cl
063af908 mov       %cl,(%rax)
063af90a mov       0x104(%rsp),%eax
063af911 shr       $6,%eax
063af914 mov       %eax,0x5C(%rsp)
063af918 mov       0x70(%rsp),%rax
063af91d mov       0x68(%rsp),%rcx
063af922 mov       0x5C(%rsp),%edx
063af926 and       $0x3F,%edx
063af929 or        $0x80,%dl
063af92c mov       %dl,(%rcx)
063af92e mov       0x104(%rsp),%ecx
063af935 and       $0x3F,%ecx
063af938 or        $0x80,%cl
063af93b mov       %cl,(%rax)
063af93d jmp       0x0000`0000`063A`F85B
063af942 mov       0x118(%rsp),%rax
063af94a mov       %rax,0x48(%rsp)
063af94f mov       %rax,0x1E0(%rsp)
063af957 mov       0x118(%rsp),%rax
063af95f add       $1,%rax
063af963 mov       %rax,0x50(%rsp)
063af968 mov       %rax,0x1E8(%rsp)
063af970 mov       0x104(%rsp),%eax
063af977 shr       $6,%eax
063af97a mov       %eax,0x58(%rsp)
063af97e mov       0x50(%rsp),%rax
063af983 mov       0x48(%rsp),%rcx
063af988 mov       0x58(%rsp),%edx
063af98c and       $0x1F,%edx
063af98f or        $0xC0,%dl
063af992 mov       %dl,(%rcx)
063af994 mov       0x104(%rsp),%ecx
063af99b and       $0x3F,%ecx
063af99e or        $0x80,%cl
063af9a1 mov       %cl,(%rax)
063af9a3 jmp       0x0000`0000`063A`F85B
063af9a8 mov       0x118(%rsp),%rax
063af9b0 mov       %rax,0x1F0(%rsp)
063af9b8 mov       0x104(%rsp),%ecx
063af9bf mov       %cl,(%rax)
063af9c1 jmp       0x0000`0000`063A`F85B
063af9c6 mov       0x88(%rsp),%rdx
063af9ce mov       0x80(%rsp),%rax
063af9d6 add       $0x1F8,%rsp
063af9dd ret
063af9de lea       0x104(%rsp),%rcx
063af9e6 call      0x0000`0000`063C`9B40
063af9eb mov       %rax,0x38(%rsp)
063af9f0 mov       %rdx,0x40(%rsp)
063af9f5 mov       0xF0(%rsp),%rax
063af9fd mov       %rax,0x188(%rsp)
063afa05 lea       0x188(%rsp),%rcx
063afa0d call      0x0000`0000`063C`9990
063afa12 mov       %rax,0x28(%rsp)
063afa17 mov       %rdx,0x30(%rsp)
063afa1c mov       0x30(%rsp),%rax
063afa21 mov       0x28(%rsp),%rcx
063afa26 mov       0x40(%rsp),%rdx
063afa2b mov       0x38(%rsp),%r8
063afa30 mov       0xC8(%rsp),%r9
063afa38 mov       0xC0(%rsp),%r10
063afa40 mov       %r10,0x158(%rsp)
063afa48 mov       %r9,0x160(%rsp)
063afa50 mov       %r8,0x168(%rsp)
063afa58 mov       %rdx,0x170(%rsp)
063afa60 mov       %rcx,0x178(%rsp)
063afa68 mov       %rax,0x180(%rsp)
063afa70 lea       0x158(%rsp),%r9
063afa78 lea       0x128(%rsp),%rcx
063afa80 lea       0x63C`DFE0,%rdx
063afa87 mov       $3,%r8d
063afa8d movq      $3,0x20(%rsp)
063afa96 call      0x0000`0000`063A`E640
063afa9b lea       0x63C`E010,%rdx
063afaa2 lea       0x128(%rsp),%rcx
063afaaa call      0x0000`0000`063B`A100
063afaaf ud2

core::char::methods::impl$0::encode_utf8:
063afad0 sub       $0x58,%rsp
063afad4 mov       %ecx,0x44(%rsp)
063afad8 mov       %rdx,0x48(%rsp)
063afadd mov       %r8,0x50(%rsp)
063afae2 call      0x0000`0000`063A`F620
063afae7 mov       %rax,0x30(%rsp)
063afaec mov       %rdx,0x38(%rsp)
063afaf1 mov       0x38(%rsp),%rdx
063afaf6 mov       0x30(%rsp),%rcx
063afafb call      0x0000`0000`063A`F500
063afb00 mov       %rax,0x20(%rsp)
063afb05 mov       %rdx,0x28(%rsp)
063afb0a mov       0x28(%rsp),%rdx
063afb0f mov       0x20(%rsp),%rax
063afb14 add       $0x58,%rsp
063afb18 ret

core::char::methods::impl$0::from_u32:
063afb20 sub       $0x28,%rsp
063afb24 mov       %ecx,0x24(%rsp)
063afb28 call      0x0000`0000`063A`F5D0
063afb2d mov       %eax,0x20(%rsp)
063afb31 mov       0x20(%rsp),%eax
063afb35 add       $0x28,%rsp
063afb39 ret

core::char::methods::len_utf8:
063afb40 sub       $0x18,%rsp
063afb44 mov       %ecx,4(%rsp)
063afb48 mov       %ecx,0x14(%rsp)
063afb4c cmp       $0x80,%ecx
063afb52 jb        0x0000`0000`063A`FB61
063afb54 mov       4(%rsp),%eax
063afb58 cmp       $0x800,%eax
063afb5d jb        0x0000`0000`063A`FB81
063afb5f jmp       0x0000`0000`063A`FB74
063afb61 movq      $1,8(%rsp)
063afb6a mov       8(%rsp),%rax
063afb6f add       $0x18,%rsp
063afb73 ret
063afb74 mov       4(%rsp),%eax
063afb78 cmp       $0x1`0000,%eax
063afb7d jb        0x0000`0000`063A`FB97
063afb7f jmp       0x0000`0000`063A`FB8C
063afb81 movq      $2,8(%rsp)
063afb8a jmp       0x0000`0000`063A`FB6A
063afb8c movq      $4,8(%rsp)
063afb95 jmp       0x0000`0000`063A`FB6A
063afb97 movq      $3,8(%rsp)
063afba0 jmp       0x0000`0000`063A`FB6A

core::hint::unreachable_unchecked:
063afbb0 ud2

core::iter::traits::iterator::Iterator::map<core::str::iter::SplitTerminator<char>,str,core::str::LinesAnyMap>:
063afbc0 sub       $0x88,%rsp
063afbc7 mov       %rcx,0x30(%rsp)
063afbcc mov       %rcx,0x28(%rsp)
063afbd1 lea       0x38(%rsp),%rcx
063afbd6 mov       $0x48,%r8d
063afbdc call      0x0000`0000`063C`BD50
063afbe1 mov       0x30(%rsp),%rcx
063afbe6 lea       0x38(%rsp),%rdx
063afbeb call      0x0000`0000`063A`FC30
063afbf0 mov       0x28(%rsp),%rax
063afbf5 add       $0x88,%rsp
063afbfc ret

core::iter::traits::iterator::Iterator::enumerate<core::slice::iter::Iter<u16> >:
063afc00 sub       $0x38,%rsp
063afc04 mov       %rcx,%rax
063afc07 mov       %rax,0x20(%rsp)
063afc0c mov       %rdx,0x28(%rsp)
063afc11 mov       %r8,0x30(%rsp)
063afc16 call      0x0000`0000`063A`FC80
063afc1b mov       0x20(%rsp),%rax
063afc20 add       $0x38,%rsp
063afc24 ret

core::iter::adapters::map::Map<core::str::iter::SplitTerminator<char>,core::str::LinesAnyMap>::new<core::str::iter::SplitTerminator<char>,core::str::LinesAnyMap>:
063afc30 sub       $0x88,%rsp
063afc37 mov       %rcx,0x28(%rsp)
063afc3c mov       %rcx,0x30(%rsp)
063afc41 lea       0x38(%rsp),%rcx
063afc46 mov       $0x48,%r8d
063afc4c call      0x0000`0000`063C`BD50
063afc51 mov       0x28(%rsp),%rcx
063afc56 lea       0x38(%rsp),%rdx
063afc5b mov       $0x48,%r8d
063afc61 call      0x0000`0000`063C`BD50
063afc66 mov       0x30(%rsp),%rax
063afc6b add       $0x88,%rsp
063afc72 ret

core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<u16> >::new<core::slice::iter::Iter<u16> >:
063afc80 sub       $0x10,%rsp
063afc84 mov       %rcx,%rax
063afc87 mov       %rdx,(%rsp)
063afc8b mov       %r8,8(%rsp)
063afc90 mov       %rdx,(%rcx)
063afc93 mov       %r8,8(%rcx)
063afc97 movq      $0,0x10(%rcx)
063afc9f add       $0x10,%rsp
063afca3 ret

core::slice::impl$0::as_ptr<uefi::data_types::chars::Char16>:
063afcb0 sub       $0x10,%rsp
063afcb4 mov       %rcx,%rax
063afcb7 mov       %rax,(%rsp)
063afcbb mov       %rdx,8(%rsp)
063afcc0 add       $0x10,%rsp
063afcc4 ret

core::slice::index::impl$0::index<u16,core::ops::range::RangeToInclusive<usize> >:
063afcd0 sub       $0x58,%rsp
063afcd4 mov       %r8,0x28(%rsp)
063afcd9 mov       %rdx,%r8
063afcdc mov       %rcx,%rdx
063afcdf mov       0x28(%rsp),%rcx
063afce4 mov       %rdx,0x40(%rsp)
063afce9 mov       %r8,0x48(%rsp)
063afcee mov       %rcx,0x50(%rsp)
063afcf3 call      0x0000`0000`063A`E1E0
063afcf8 mov       %rax,0x30(%rsp)
063afcfd mov       %rdx,0x38(%rsp)
063afd02 mov       0x38(%rsp),%rdx
063afd07 mov       0x30(%rsp),%rax
063afd0c add       $0x58,%rsp
063afd10 ret

core::slice::memchr::memchr:
063afd20 sub       $0x78,%rsp
063afd24 mov       %r8,0x28(%rsp)
063afd29 mov       %rdx,0x30(%rsp)
063afd2e mov       %cl,0x3F(%rsp)
063afd32 mov       %rdx,0x68(%rsp)
063afd37 mov       %r8,0x70(%rsp)
063afd3c cmp       $0x10,%r8
063afd40 jb        0x0000`0000`063A`FD61
063afd42 mov       0x28(%rsp),%r8
063afd47 mov       0x30(%rsp),%rdx
063afd4c mov       0x3F(%rsp),%cl
063afd50 call      0x0000`0000`063C`12E0
063afd55 mov       %rdx,0x48(%rsp)
063afd5a mov       %rax,0x40(%rsp)
063afd5f jmp       0x0000`0000`063A`FD9D
063afd61 mov       0x28(%rsp),%rdx
063afd66 mov       0x30(%rsp),%rcx
063afd6b call      0x0000`0000`063C`3E90
063afd70 mov       %rdx,0x58(%rsp)
063afd75 mov       %rax,0x50(%rsp)
063afd7a lea       0x3F(%rsp),%rax
063afd7f mov       %rax,0x60(%rsp)
063afd84 mov       0x60(%rsp),%rdx
063afd89 lea       0x50(%rsp),%rcx
063afd8e call      0x0000`0000`063C`A530
063afd93 mov       %rdx,0x48(%rsp)
063afd98 mov       %rax,0x40(%rsp)
063afd9d mov       0x40(%rsp),%rax
063afda2 mov       0x48(%rsp),%rdx
063afda7 add       $0x78,%rsp
063afdab ret

enum$<core::option::Option<enum$<log::MaybeStaticStr> >, 0, 1, Some>::map<enum$<log::MaybeStaticStr>,str,log::impl$19::file::closure_env$0>:
063afdb0 sub       $0xA8,%rsp
063afdb7 mov       %rcx,0x38(%rsp)
063afdbc movb      $0,0x9F(%rsp)
063afdc4 movb      $1,0x9F(%rsp)
063afdcc mov       (%rcx),%rax
063afdcf add       $0xFFFF`FFFF`FFFF`FFFE,%rax
063afdd3 setne     %al
063afdd6 movzbl    %al,%eax
063afdd9 je        0x0000`0000`063A`FDE1
063afddb jmp       0x0000`0000`063A`FDDD
063afddd jmp       0x0000`0000`063A`FDEF
063afddf ud2
063afde1 movq      $0,0x40(%rsp)
063afdea jmp       0x0000`0000`063A`FE8C
063afdef mov       0x38(%rsp),%rax
063afdf4 mov       (%rax),%rcx
063afdf7 mov       %rcx,0x50(%rsp)
063afdfc mov       8(%rax),%rcx
063afe00 mov       %rcx,0x58(%rsp)
063afe05 mov       0x10(%rax),%rax
063afe09 mov       %rax,0x60(%rsp)
063afe0e movb      $0,0x9F(%rsp)
063afe16 mov       0x50(%rsp),%rax
063afe1b mov       %rax,0x80(%rsp)
063afe23 mov       0x58(%rsp),%rax
063afe28 mov       %rax,0x88(%rsp)
063afe30 mov       0x60(%rsp),%rax
063afe35 mov       %rax,0x90(%rsp)
063afe3d mov       0x80(%rsp),%rax
063afe45 mov       %rax,0x68(%rsp)
063afe4a mov       0x88(%rsp),%rax
063afe52 mov       %rax,0x70(%rsp)
063afe57 mov       0x90(%rsp),%rax
063afe5f mov       %rax,0x78(%rsp)
063afe64 lea       0x68(%rsp),%rcx
063afe69 call      0x0000`0000`063A`E320
063afe6e mov       %rax,0x28(%rsp)
063afe73 mov       %rdx,0x30(%rsp)
063afe78 mov       0x30(%rsp),%rax
063afe7d mov       0x28(%rsp),%rcx
063afe82 mov       %rcx,0x40(%rsp)
063afe87 mov       %rax,0x48(%rsp)
063afe8c testb     $1,0x9F(%rsp)
063afe94 jne       0x0000`0000`063A`FEA8
063afe96 mov       0x40(%rsp),%rax
063afe9b mov       0x48(%rsp),%rdx
063afea0 add       $0xA8,%rsp
063afea7 ret
063afea8 jmp       0x0000`0000`063A`FE96

enum$<core::option::Option<str>, 1, 18446744073709551615, Some>::map<str,str,ref_mut$<core::str::LinesAnyMap> >:
063afeb0 sub       $0x88,%rsp
063afeb7 mov       %r8,0x30(%rsp)
063afebc mov       %rcx,0x38(%rsp)
063afec1 mov       %rdx,0x40(%rsp)
063afec6 mov       %r8,0x70(%rsp)
063afecb movb      $0,0x6F(%rsp)
063afed0 movb      $1,0x6F(%rsp)
063afed5 mov       0x38(%rsp),%rax
063afeda test      %rax,%rax
063afedd setne     %al
063afee0 movzbl    %al,%eax
063afee3 je        0x0000`0000`063A`FEEB
063afee5 jmp       0x0000`0000`063A`FEE7
063afee7 jmp       0x0000`0000`063A`FEF6
063afee9 ud2
063afeeb movq      $0,0x48(%rsp)
063afef4 jmp       0x0000`0000`063A`FF4E
063afef6 mov       0x30(%rsp),%rcx
063afefb mov       0x38(%rsp),%rdx
063aff00 mov       0x40(%rsp),%rax
063aff05 mov       %rdx,0x78(%rsp)
063aff0a mov       %rax,0x80(%rsp)
063aff12 movb      $0,0x6F(%rsp)
063aff17 mov       %rdx,0x58(%rsp)
063aff1c mov       %rax,0x60(%rsp)
063aff21 mov       0x58(%rsp),%rdx
063aff26 mov       0x60(%rsp),%r8
063aff2b call      0x0000`0000`063A`E820
063aff30 mov       %rax,0x20(%rsp)
063aff35 mov       %rdx,0x28(%rsp)
063aff3a mov       0x28(%rsp),%rax
063aff3f mov       0x20(%rsp),%rcx
063aff44 mov       %rcx,0x48(%rsp)
063aff49 mov       %rax,0x50(%rsp)
063aff4e testb     $1,0x6F(%rsp)
063aff53 jne       0x0000`0000`063A`FF67
063aff55 mov       0x48(%rsp),%rax
063aff5a mov       0x50(%rsp),%rdx
063aff5f add       $0x88,%rsp
063aff66 ret
063aff67 jmp       0x0000`0000`063A`FF55

enum$<core::option::Option<u32> >::map<u32,char,core::str::iter::impl$2::next_back::closure_env$0>:
063aff70 sub       $0x48,%rsp
063aff74 mov       %ecx,0x28(%rsp)
063aff78 mov       %edx,0x2C(%rsp)
063aff7c movb      $0,0x3F(%rsp)
063aff81 movb      $1,0x3F(%rsp)
063aff86 mov       0x28(%rsp),%eax
063aff8a test      %rax,%rax
063aff8d je        0x0000`0000`063A`FF95
063aff8f jmp       0x0000`0000`063A`FF91
063aff91 jmp       0x0000`0000`063A`FF9F
063aff93 ud2
063aff95 movl      $0x11`0000,0x34(%rsp)
063aff9d jmp       0x0000`0000`063A`FFC5
063aff9f mov       0x2C(%rsp),%eax
063affa3 mov       %eax,0x44(%rsp)
063affa7 movb      $0,0x3F(%rsp)
063affac mov       %eax,0x38(%rsp)
063affb0 mov       0x38(%rsp),%ecx
063affb4 call      0x0000`0000`063B`1720
063affb9 mov       %eax,0x24(%rsp)
063affbd mov       0x24(%rsp),%eax
063affc1 mov       %eax,0x34(%rsp)
063affc5 testb     $1,0x3F(%rsp)
063affca jne       0x0000`0000`063A`FFD5
063affcc mov       0x34(%rsp),%eax
063affd0 add       $0x48,%rsp
063affd4 ret
063affd5 jmp       0x0000`0000`063A`FFCC

enum$<core::option::Option<core::ptr::non_null::NonNull<uefi::proto::console::text::output::Output> >, 1, 18446744073709551615, Some>::is_some<core::ptr::non_null::NonNull<uefi::proto::console::text::output::Output> >:
063affe0 sub       $0x10,%rsp
063affe4 mov       %rcx,%rdx
063affe7 mov       %rdx,8(%rsp)
063affec mov       $1,%eax
063afff1 xor       %ecx,%ecx
063afff3 cmpq      $0,(%rdx)
063afff7 cmove     %rcx,%rax
063afffb cmp       $1,%rax
063affff jne       0x0000`0000`063B`0008
063b0001 movb      $1,7(%rsp)
063b0006 jmp       0x0000`0000`063B`000D
063b0008 movb      $0,7(%rsp)
063b000d mov       7(%rsp),%al
063b0011 and       $1,%al
063b0013 movzbl    %al,%eax
063b0016 add       $0x10,%rsp
063b001a ret

enum$<core::result::Result<tuple$<>,uefi::result::error::Error<tuple$<> > > >::unwrap<tuple$<>,uefi::result::error::Error<tuple$<> > >:
063b0020 sub       $0x58,%rsp
063b0024 mov       %r8,0x30(%rsp)
063b0029 mov       %rcx,0x38(%rsp)
063b002e mov       %rdx,0x40(%rsp)
063b0033 mov       0x38(%rsp),%rax
063b0038 test      %rax,%rax
063b003b je        0x0000`0000`063B`0043
063b003d jmp       0x0000`0000`063B`003F
063b003f jmp       0x0000`0000`063B`0048
063b0041 ud2
063b0043 add       $0x58,%rsp
063b0047 ret
063b0048 mov       0x30(%rsp),%rcx
063b004d mov       0x40(%rsp),%rax
063b0052 mov       %rax,0x48(%rsp)
063b0057 mov       %rsp,%rax
063b005a mov       %rcx,0x20(%rax)
063b005e lea       0x63C`E048,%rcx
063b0065 lea       0x63C`E028,%r9
063b006c mov       $0x2B,%edx
063b0071 lea       0x48(%rsp),%r8
063b0076 call      0x0000`0000`063B`A710
063b007b ud2

core::result::Result::unwrap<tuple$<>,core::fmt::Error>:
063b0080 sub       $0x48,%rsp
063b0084 mov       %rdx,0x28(%rsp)
063b0089 and       $1,%cl
063b008c mov       %cl,0x37(%rsp)
063b0090 movzbl    0x37(%rsp),%eax
063b0095 test      $1,%al
063b0097 je        0x0000`0000`063B`009F
063b0099 jmp       0x0000`0000`063B`009B
063b009b jmp       0x0000`0000`063B`00A4
063b009d ud2
063b009f add       $0x48,%rsp
063b00a3 ret
063b00a4 mov       0x28(%rsp),%rcx
063b00a9 mov       %rsp,%rax
063b00ac mov       %rcx,0x20(%rax)
063b00b0 lea       0x63C`E048,%rcx
063b00b7 lea       0x63C`E078,%r9
063b00be mov       $0x2B,%edx
063b00c3 lea       0x38(%rsp),%r8
063b00c8 call      0x0000`0000`063B`A710
063b00cd ud2

enum$<core::result::Result<tuple$<>,enum$<ucs2::Error> >, 0, 1, Err>::map_err<tuple$<>,enum$<ucs2::Error>,core::fmt::Error,uefi::proto::console::text::output::impl$1::write_str::closure_env$3>:
063b00d0 sub       $0x38,%rsp
063b00d4 mov       %cl,0x24(%rsp)
063b00d8 movb      $0,0x27(%rsp)
063b00dd movb      $1,0x27(%rsp)
063b00e2 mov       0x24(%rsp),%al
063b00e6 add       $0xFE,%al
063b00e8 setne     %al
063b00eb movzbl    %al,%eax
063b00ee je        0x0000`0000`063B`00F6
063b00f0 jmp       0x0000`0000`063B`00F2
063b00f2 jmp       0x0000`0000`063B`00FD
063b00f4 ud2
063b00f6 movb      $0,0x25(%rsp)
063b00fb jmp       0x0000`0000`063B`0126
063b00fd mov       0x24(%rsp),%al
063b0101 mov       %al,%cl
063b0103 and       $1,%cl
063b0106 mov       %cl,0x37(%rsp)
063b010a movb      $0,0x27(%rsp)
063b010f and       $1,%al
063b0111 mov       %al,0x26(%rsp)
063b0115 mov       0x26(%rsp),%cl
063b0119 and       $1,%cl
063b011c call      0x0000`0000`063B`2600
063b0121 movb      $1,0x25(%rsp)
063b0126 testb     $1,0x27(%rsp)
063b012b jne       0x0000`0000`063B`013B
063b012d mov       0x25(%rsp),%al
063b0131 and       $1,%al
063b0133 movzbl    %al,%eax
063b0136 add       $0x38,%rsp
063b013a ret
063b013b jmp       0x0000`0000`063B`012D

enum$<core::result::Result<ref$<uefi::data_types::strs::CStr16>,enum$<uefi::data_types::strs::FromSliceWithNulError> > >::map_err<ref$<uefi::data_types::strs::CStr16>,enum$<uefi::data_types::strs::FromSliceWithNulError>,core::fmt::Error,uefi::proto::console::text::output::impl$1::write_str::closure$0::closure_env$0>:
063b0140 sub       $0x78,%rsp
063b0144 mov       %rcx,0x20(%rsp)
063b0149 movb      $0,0x4F(%rsp)
063b014e movb      $1,0x4F(%rsp)
063b0153 mov       (%rcx),%rax
063b0156 test      %rax,%rax
063b0159 je        0x0000`0000`063B`0161
063b015b jmp       0x0000`0000`063B`015D
063b015d jmp       0x0000`0000`063B`0184
063b015f ud2
063b0161 mov       0x20(%rsp),%rax
063b0166 mov       8(%rax),%rcx
063b016a mov       0x10(%rax),%rax
063b016e mov       %rcx,0x68(%rsp)
063b0173 mov       %rax,0x70(%rsp)
063b0178 mov       %rcx,0x28(%rsp)
063b017d mov       %rax,0x30(%rsp)
063b0182 jmp       0x0000`0000`063B`01C2
063b0184 mov       0x20(%rsp),%rax
063b0189 mov       8(%rax),%rcx
063b018d mov       0x10(%rax),%rax
063b0191 mov       %rcx,0x58(%rsp)
063b0196 mov       %rax,0x60(%rsp)
063b019b movb      $0,0x4F(%rsp)
063b01a0 mov       %rcx,0x38(%rsp)
063b01a5 mov       %rax,0x40(%rsp)
063b01aa mov       0x38(%rsp),%rcx
063b01af mov       0x40(%rsp),%rdx
063b01b4 call      0x0000`0000`063B`23A0
063b01b9 movq      $0,0x28(%rsp)
063b01c2 testb     $1,0x4F(%rsp)
063b01c7 jne       0x0000`0000`063B`01D8
063b01c9 mov       0x28(%rsp),%rax
063b01ce mov       0x30(%rsp),%rdx
063b01d3 add       $0x78,%rsp
063b01d7 ret
063b01d8 jmp       0x0000`0000`063B`01C9

core::result::Result::map_err<tuple$<>,core::fmt::Error,enum$<ucs2::Error>,uefi::proto::console::text::output::impl$1::write_str::closure$1::closure_env$0>:
063b01e0 sub       $0x48,%rsp
063b01e4 and       $1,%cl
063b01e7 mov       %cl,0x26(%rsp)
063b01eb movb      $0,0x2F(%rsp)
063b01f0 movb      $1,0x2F(%rsp)
063b01f5 movzbl    0x26(%rsp),%eax
063b01fa test      $1,%al
063b01fc je        0x0000`0000`063B`0204
063b01fe jmp       0x0000`0000`063B`0200
063b0200 jmp       0x0000`0000`063B`020B
063b0202 ud2
063b0204 movb      $2,0x27(%rsp)
063b0209 jmp       0x0000`0000`063B`0223
063b020b movb      $0,0x2F(%rsp)
063b0210 call      0x0000`0000`063B`2520
063b0215 mov       %al,0x25(%rsp)
063b0219 mov       0x25(%rsp),%al
063b021d and       $1,%al
063b021f mov       %al,0x27(%rsp)
063b0223 testb     $1,0x2F(%rsp)
063b0228 jne       0x0000`0000`063B`0233
063b022a mov       0x27(%rsp),%al
063b022e add       $0x48,%rsp
063b0232 ret
063b0233 jmp       0x0000`0000`063B`022A

enum$<core::result::Result<tuple$<>,uefi::result::error::Error<tuple$<> > > >::map_err<tuple$<>,uefi::result::error::Error<tuple$<> >,core::fmt::Error,uefi::proto::console::text::output::impl$1::write_str::closure$0::closure_env$1>:
063b0240 sub       $0x68,%rsp
063b0244 mov       %rcx,0x28(%rsp)
063b0249 mov       %rdx,0x30(%rsp)
063b024e movb      $0,0x4F(%rsp)
063b0253 movb      $1,0x4F(%rsp)
063b0258 mov       0x28(%rsp),%rax
063b025d test      %rax,%rax
063b0260 je        0x0000`0000`063B`0268
063b0262 jmp       0x0000`0000`063B`0264
063b0264 jmp       0x0000`0000`063B`026F
063b0266 ud2
063b0268 movb      $0,0x3F(%rsp)
063b026d jmp       0x0000`0000`063B`0292
063b026f mov       0x30(%rsp),%rax
063b0274 mov       %rax,0x60(%rsp)
063b0279 movb      $0,0x4F(%rsp)
063b027e mov       %rax,0x40(%rsp)
063b0283 mov       0x40(%rsp),%rcx
063b0288 call      0x0000`0000`063B`23C0
063b028d movb      $1,0x3F(%rsp)
063b0292 testb     $1,0x4F(%rsp)
063b0297 jne       0x0000`0000`063B`02A7
063b0299 mov       0x3F(%rsp),%al
063b029d and       $1,%al
063b029f movzbl    %al,%eax
063b02a2 add       $0x68,%rsp
063b02a6 ret
063b02a7 jmp       0x0000`0000`063B`0299

core::convert::num::impl$38::from:
063b02b0 push      %rax
063b02b1 mov       %cl,7(%rsp)
063b02b5 movzbl    %cl,%eax
063b02b8 pop       %rcx
063b02b9 ret

core::convert::num::impl$43::from:
063b02c0 push      %rax
063b02c1 mov       %cx,6(%rsp)
063b02c6 movzwl    %cx,%eax
063b02c9 pop       %rcx
063b02ca ret

core::panicking::assert_failed<uefi::result::status::Status,uefi::result::status::Status>:
063b02d0 sub       $0x88,%rsp
063b02d7 mov       %rdx,%rax
063b02da mov       0xB0(%rsp),%rdx
063b02e2 mov       %rax,0x40(%rsp)
063b02e7 mov       %r8,0x48(%rsp)
063b02ec mov       %cl,0x87(%rsp)
063b02f3 mov       0x28(%r9),%rax
063b02f7 mov       %rax,0x78(%rsp)
063b02fc mov       0x20(%r9),%rax
063b0300 mov       %rax,0x70(%rsp)
063b0305 mov       0x18(%r9),%rax
063b0309 mov       %rax,0x68(%rsp)
063b030e mov       0x10(%r9),%rax
063b0312 mov       %rax,0x60(%rsp)
063b0317 mov       (%r9),%rax
063b031a mov       8(%r9),%r8
063b031e mov       %r8,0x58(%rsp)
063b0323 mov       %rax,0x50(%rsp)
063b0328 mov       %rsp,%rax
063b032b mov       %rdx,0x30(%rax)
063b032f lea       0x50(%rsp),%rdx
063b0334 mov       %rdx,0x28(%rax)
063b0338 lea       0x63C`E098,%r8
063b033f mov       %r8,0x20(%rax)
063b0343 lea       0x40(%rsp),%rdx
063b0348 lea       0x48(%rsp),%r9
063b034d call      0x0000`0000`063B`A1E0
063b0352 ud2

ucs2::encode_with<uefi::proto::console::text::output::impl$1::write_str::closure_env$2>:
063b0360 sub       $0x168,%rsp
063b0367 mov       %r8,0xE8(%rsp)
063b036f mov       %rcx,0x108(%rsp)
063b0377 mov       %rdx,0x110(%rsp)
063b037f mov       %rcx,0x148(%rsp)
063b0387 mov       %rdx,0x150(%rsp)
063b038f mov       %rcx,0x158(%rsp)
063b0397 mov       %rdx,0x160(%rsp)
063b039f mov       0x158(%rsp),%rcx
063b03a7 mov       %rcx,0xD8(%rsp)
063b03af mov       0x160(%rsp),%rax
063b03b7 mov       %rax,0xE0(%rsp)
063b03bf mov       %rcx,0x120(%rsp)
063b03c7 mov       %rax,0x128(%rsp)
063b03cf mov       0xE0(%rsp),%rax
063b03d7 mov       %rax,0x130(%rsp)
063b03df movq      $0,0xF8(%rsp)
063b03eb mov       0xE0(%rsp),%rax
063b03f3 cmp       %rax,0xF8(%rsp)
063b03fb jb        0x0000`0000`063B`040A
063b03fd movb      $2,0xF7(%rsp)
063b0405 jmp       0x0000`0000`063B`0B5D
063b040a mov       0xE0(%rsp),%rcx
063b0412 mov       0xF8(%rsp),%rax
063b041a mov       %rax,0xD0(%rsp)
063b0422 cmp       %rcx,%rax
063b0425 setb      %al
063b0428 test      $1,%al
063b042a jne       0x0000`0000`063B`042E
063b042c jmp       0x0000`0000`063B`0449
063b042e mov       0xD8(%rsp),%rax
063b0436 mov       0xD0(%rsp),%rcx
063b043e mov       (%rax,%rcx),%al
063b0441 and       $0x80,%al
063b0443 cmp       $0,%al
063b0445 je        0x0000`0000`063B`0467
063b0447 jmp       0x0000`0000`063B`0492
063b0449 mov       0xE0(%rsp),%rdx
063b0451 mov       0xD0(%rsp),%rcx
063b0459 lea       0x63C`E110,%r8
063b0460 call      0x0000`0000`063B`A050
063b0465 ud2
063b0467 mov       0xE0(%rsp),%rcx
063b046f mov       0xF8(%rsp),%rax
063b0477 mov       %rax,0xC8(%rsp)
063b047f cmp       %rcx,%rax
063b0482 setb      %al
063b0485 test      $1,%al
063b0487 jne       0x0000`0000`063B`0A77
063b048d jmp       0x0000`0000`063B`0A96
063b0492 mov       0xE0(%rsp),%rcx
063b049a mov       0xF8(%rsp),%rax
063b04a2 mov       %rax,0xC0(%rsp)
063b04aa cmp       %rcx,%rax
063b04ad setb      %al
063b04b0 test      $1,%al
063b04b2 jne       0x0000`0000`063B`04B6
063b04b4 jmp       0x0000`0000`063B`04D1
063b04b6 mov       0xD8(%rsp),%rax
063b04be mov       0xC0(%rsp),%rcx
063b04c6 mov       (%rax,%rcx),%al
063b04c9 and       $0xE0,%al
063b04cb cmp       $0xC0,%al
063b04cd je        0x0000`0000`063B`04EF
063b04cf jmp       0x0000`0000`063B`0513
063b04d1 mov       0xE0(%rsp),%rdx
063b04d9 mov       0xC0(%rsp),%rcx
063b04e1 lea       0x63C`E128,%r8
063b04e8 call      0x0000`0000`063B`A050
063b04ed ud2
063b04ef mov       0xF8(%rsp),%rax
063b04f7 add       $1,%rax
063b04fb mov       %rax,0xB8(%rsp)
063b0503 setb      %al
063b0506 test      $1,%al
063b0508 jne       0x0000`0000`063B`08FF
063b050e jmp       0x0000`0000`063B`08E8
063b0513 mov       0xE0(%rsp),%rcx
063b051b mov       0xF8(%rsp),%rax
063b0523 mov       %rax,0xB0(%rsp)
063b052b cmp       %rcx,%rax
063b052e setb      %al
063b0531 test      $1,%al
063b0533 jne       0x0000`0000`063B`0537
063b0535 jmp       0x0000`0000`063B`0552
063b0537 mov       0xD8(%rsp),%rax
063b053f mov       0xB0(%rsp),%rcx
063b0547 mov       (%rax,%rcx),%al
063b054a and       $0xF0,%al
063b054c cmp       $0xE0,%al
063b054e je        0x0000`0000`063B`0570
063b0550 jmp       0x0000`0000`063B`0591
063b0552 mov       0xE0(%rsp),%rdx
063b055a mov       0xB0(%rsp),%rcx
063b0562 lea       0x63C`E140,%r8
063b0569 call      0x0000`0000`063B`A050
063b056e ud2
063b0570 mov       0xF8(%rsp),%rax
063b0578 add       $2,%rax
063b057c mov       %rax,0xA8(%rsp)
063b0584 setb      %al
063b0587 test      $1,%al
063b0589 jne       0x0000`0000`063B`061B
063b058f jmp       0x0000`0000`063B`0604
063b0591 mov       0xE0(%rsp),%rcx
063b0599 mov       0xF8(%rsp),%rax
063b05a1 mov       %rax,0xA0(%rsp)
063b05a9 cmp       %rcx,%rax
063b05ac setb      %al
063b05af test      $1,%al
063b05b1 jne       0x0000`0000`063B`05B5
063b05b3 jmp       0x0000`0000`063B`05D0
063b05b5 mov       0xD8(%rsp),%rax
063b05bd mov       0xA0(%rsp),%rcx
063b05c5 mov       (%rax,%rcx),%al
063b05c8 and       $0xF0,%al
063b05ca cmp       $0xF0,%al
063b05cc je        0x0000`0000`063B`05EE
063b05ce jmp       0x0000`0000`063B`05F8
063b05d0 mov       0xE0(%rsp),%rdx
063b05d8 mov       0xA0(%rsp),%rcx
063b05e0 lea       0x63C`E158,%r8
063b05e7 call      0x0000`0000`063B`A050
063b05ec ud2
063b05ee movb      $1,0xF7(%rsp)
063b05f6 jmp       0x0000`0000`063B`05FF
063b05f8 call      0x0000`0000`063A`FBB0
063b05fd ud2
063b05ff jmp       0x0000`0000`063B`0B5D
063b0604 mov       0xA8(%rsp),%rax
063b060c mov       0xE0(%rsp),%rcx
063b0614 cmp       %rcx,%rax
063b0617 jae       0x0000`0000`063B`0652
063b0619 jmp       0x0000`0000`063B`0635
063b061b lea       0x63C`DA50,%rcx
063b0622 lea       0x63C`E170,%r8
063b0629 mov       $0x1C,%edx
063b062e call      0x0000`0000`063B`9FF0
063b0633 ud2
063b0635 mov       0xF8(%rsp),%rax
063b063d add       $1,%rax
063b0641 mov       %rax,0x98(%rsp)
063b0649 setb      %al
063b064c test      $1,%al
063b064e jne       0x0000`0000`063B`0687
063b0650 jmp       0x0000`0000`063B`0666
063b0652 movb      $1,0x104(%rsp)
063b065a testb     $1,0x104(%rsp)
063b0662 jne       0x0000`0000`063B`06C5
063b0664 jmp       0x0000`0000`063B`06A1
063b0666 mov       0x98(%rsp),%rax
063b066e mov       0xE0(%rsp),%rcx
063b0676 cmp       %rcx,%rax
063b0679 setae     %al
063b067c and       $1,%al
063b067e mov       %al,0x104(%rsp)
063b0685 jmp       0x0000`0000`063B`065A
063b0687 lea       0x63C`DA50,%rcx
063b068e lea       0x63C`E188,%r8
063b0695 mov       $0x1C,%edx
063b069a call      0x0000`0000`063B`9FF0
063b069f ud2
063b06a1 mov       0xE0(%rsp),%rcx
063b06a9 mov       0xF8(%rsp),%rax
063b06b1 mov       %rax,0x90(%rsp)
063b06b9 cmp       %rcx,%rax
063b06bc setb      %al
063b06bf test      $1,%al
063b06c1 jne       0x0000`0000`063B`06CC
063b06c3 jmp       0x0000`0000`063B`06F9
063b06c5 call      0x0000`0000`063A`FBB0
063b06ca ud2
063b06cc mov       0xD8(%rsp),%rax
063b06d4 mov       0x90(%rsp),%rcx
063b06dc mov       (%rax,%rcx),%cl
063b06df and       $0xF,%cl
063b06e2 call      0x0000`0000`063B`02B0
063b06e7 mov       %ax,0x8E(%rsp)
063b06ef mov       %ax,0x13C(%rsp)
063b06f7 jmp       0x0000`0000`063B`0717
063b06f9 mov       0xE0(%rsp),%rdx
063b0701 mov       0x90(%rsp),%rcx
063b0709 lea       0x63C`E1A0,%r8
063b0710 call      0x0000`0000`063B`A050
063b0715 ud2
063b0717 mov       0xF8(%rsp),%rax
063b071f add       $1,%rax
063b0723 mov       %rax,0x80(%rsp)
063b072b setb      %al
063b072e test      $1,%al
063b0730 jne       0x0000`0000`063B`074E
063b0732 mov       0x80(%rsp),%rax
063b073a mov       0xE0(%rsp),%rcx
063b0742 cmp       %rcx,%rax
063b0745 setb      %al
063b0748 test      $1,%al
063b074a jne       0x0000`0000`063B`0768
063b074c jmp       0x0000`0000`063B`0792
063b074e lea       0x63C`DA50,%rcx
063b0755 lea       0x63C`E1B8,%r8
063b075c mov       $0x1C,%edx
063b0761 call      0x0000`0000`063B`9FF0
063b0766 ud2
063b0768 mov       0xD8(%rsp),%rax
063b0770 mov       0x80(%rsp),%rcx
063b0778 mov       (%rax,%rcx),%cl
063b077b and       $0x3F,%cl
063b077e call      0x0000`0000`063B`02B0
063b0783 mov       %ax,0x7E(%rsp)
063b0788 mov       %ax,0x13E(%rsp)
063b0790 jmp       0x0000`0000`063B`07B0
063b0792 mov       0xE0(%rsp),%rdx
063b079a mov       0x80(%rsp),%rcx
063b07a2 lea       0x63C`E1D0,%r8
063b07a9 call      0x0000`0000`063B`A050
063b07ae ud2
063b07b0 mov       0xF8(%rsp),%rax
063b07b8 add       $2,%rax
063b07bc mov       %rax,0x70(%rsp)
063b07c1 setb      %al
063b07c4 test      $1,%al
063b07c6 jne       0x0000`0000`063B`07E1
063b07c8 mov       0x70(%rsp),%rax
063b07cd mov       0xE0(%rsp),%rcx
063b07d5 cmp       %rcx,%rax
063b07d8 setb      %al
063b07db test      $1,%al
063b07dd jne       0x0000`0000`063B`07FB
063b07df jmp       0x0000`0000`063B`0822
063b07e1 lea       0x63C`DA50,%rcx
063b07e8 lea       0x63C`E1E8,%r8
063b07ef mov       $0x1C,%edx
063b07f4 call      0x0000`0000`063B`9FF0
063b07f9 ud2
063b07fb mov       0xD8(%rsp),%rax
063b0803 mov       0x70(%rsp),%rcx
063b0808 mov       (%rax,%rcx),%cl
063b080b and       $0x3F,%cl
063b080e call      0x0000`0000`063B`02B0
063b0813 mov       %ax,0x6E(%rsp)
063b0818 mov       %ax,0x140(%rsp)
063b0820 jmp       0x0000`0000`063B`083D
063b0822 mov       0xE0(%rsp),%rdx
063b082a mov       0x70(%rsp),%rcx
063b082f lea       0x63C`E200,%r8
063b0836 call      0x0000`0000`063B`A050
063b083b ud2
063b083d mov       0x8E(%rsp),%ax
063b0845 shl       $0xC,%ax
063b0849 mov       %ax,0x6C(%rsp)
063b084e mov       0x7E(%rsp),%ax
063b0853 shl       $6,%ax
063b0857 mov       %ax,0x6A(%rsp)
063b085c mov       0x6E(%rsp),%cx
063b0861 mov       0x6A(%rsp),%dx
063b0866 mov       0x6C(%rsp),%ax
063b086b or        %dx,%ax
063b086e or        %cx,%ax
063b0871 mov       %ax,0x102(%rsp)
063b0879 mov       0xF8(%rsp),%rax
063b0881 add       $3,%rax
063b0885 mov       %rax,0x60(%rsp)
063b088a setb      %al
063b088d test      $1,%al
063b088f jne       0x0000`0000`063B`08A0
063b0891 mov       0x60(%rsp),%rax
063b0896 mov       %rax,0xF8(%rsp)
063b089e jmp       0x0000`0000`063B`08BA
063b08a0 lea       0x63C`DA50,%rcx
063b08a7 lea       0x63C`E218,%r8
063b08ae mov       $0x1C,%edx
063b08b3 call      0x0000`0000`063B`9FF0
063b08b8 ud2
063b08ba mov       0x102(%rsp),%ax
063b08c2 mov       %ax,0x106(%rsp)
063b08ca mov       0x106(%rsp),%dx
063b08d2 lea       0xE8(%rsp),%rcx
063b08da call      0x0000`0000`063B`2540
063b08df mov       %al,0x5F(%rsp)
063b08e3 jmp       0x0000`0000`063B`0B05
063b08e8 mov       0xB8(%rsp),%rax
063b08f0 mov       0xE0(%rsp),%rcx
063b08f8 cmp       %rcx,%rax
063b08fb jae       0x0000`0000`063B`093A
063b08fd jmp       0x0000`0000`063B`0919
063b08ff lea       0x63C`DA50,%rcx
063b0906 lea       0x63C`E230,%r8
063b090d mov       $0x1C,%edx
063b0912 call      0x0000`0000`063B`9FF0
063b0917 ud2
063b0919 mov       0xE0(%rsp),%rcx
063b0921 mov       0xF8(%rsp),%rax
063b0929 mov       %rax,0x50(%rsp)
063b092e cmp       %rcx,%rax
063b0931 setb      %al
063b0934 test      $1,%al
063b0936 jne       0x0000`0000`063B`0941
063b0938 jmp       0x0000`0000`063B`0968
063b093a call      0x0000`0000`063A`FBB0
063b093f ud2
063b0941 mov       0xD8(%rsp),%rax
063b0949 mov       0x50(%rsp),%rcx
063b094e mov       (%rax,%rcx),%cl
063b0951 and       $0x1F,%cl
063b0954 call      0x0000`0000`063B`02B0
063b0959 mov       %ax,0x4E(%rsp)
063b095e mov       %ax,0x142(%rsp)
063b0966 jmp       0x0000`0000`063B`0983
063b0968 mov       0xE0(%rsp),%rdx
063b0970 mov       0x50(%rsp),%rcx
063b0975 lea       0x63C`E248,%r8
063b097c call      0x0000`0000`063B`A050
063b0981 ud2
063b0983 mov       0xF8(%rsp),%rax
063b098b add       $1,%rax
063b098f mov       %rax,0x40(%rsp)
063b0994 setb      %al
063b0997 test      $1,%al
063b0999 jne       0x0000`0000`063B`09B4
063b099b mov       0x40(%rsp),%rax
063b09a0 mov       0xE0(%rsp),%rcx
063b09a8 cmp       %rcx,%rax
063b09ab setb      %al
063b09ae test      $1,%al
063b09b0 jne       0x0000`0000`063B`09CE
063b09b2 jmp       0x0000`0000`063B`09F5
063b09b4 lea       0x63C`DA50,%rcx
063b09bb lea       0x63C`E260,%r8
063b09c2 mov       $0x1C,%edx
063b09c7 call      0x0000`0000`063B`9FF0
063b09cc ud2
063b09ce mov       0xD8(%rsp),%rax
063b09d6 mov       0x40(%rsp),%rcx
063b09db mov       (%rax,%rcx),%cl
063b09de and       $0x3F,%cl
063b09e1 call      0x0000`0000`063B`02B0
063b09e6 mov       %ax,0x3E(%rsp)
063b09eb mov       %ax,0x144(%rsp)
063b09f3 jmp       0x0000`0000`063B`0A10
063b09f5 mov       0xE0(%rsp),%rdx
063b09fd mov       0x40(%rsp),%rcx
063b0a02 lea       0x63C`E278,%r8
063b0a09 call      0x0000`0000`063B`A050
063b0a0e ud2
063b0a10 mov       0x4E(%rsp),%ax
063b0a15 shl       $6,%ax
063b0a19 mov       %ax,0x3C(%rsp)
063b0a1e mov       0x3E(%rsp),%cx
063b0a23 mov       0x3C(%rsp),%ax
063b0a28 or        %cx,%ax
063b0a2b mov       %ax,0x102(%rsp)
063b0a33 mov       0xF8(%rsp),%rax
063b0a3b add       $2,%rax
063b0a3f mov       %rax,0x30(%rsp)
063b0a44 setb      %al
063b0a47 test      $1,%al
063b0a49 jne       0x0000`0000`063B`0A5D
063b0a4b mov       0x30(%rsp),%rax
063b0a50 mov       %rax,0xF8(%rsp)
063b0a58 jmp       0x0000`0000`063B`08BA
063b0a5d lea       0x63C`DA50,%rcx
063b0a64 lea       0x63C`E290,%r8
063b0a6b mov       $0x1C,%edx
063b0a70 call      0x0000`0000`063B`9FF0
063b0a75 ud2
063b0a77 mov       0xD8(%rsp),%rax
063b0a7f mov       0xC8(%rsp),%rcx
063b0a87 mov       (%rax,%rcx),%cl
063b0a8a call      0x0000`0000`063B`02B0
063b0a8f mov       %ax,0x2E(%rsp)
063b0a94 jmp       0x0000`0000`063B`0AB4
063b0a96 mov       0xE0(%rsp),%rdx
063b0a9e mov       0xC8(%rsp),%rcx
063b0aa6 lea       0x63C`E2A8,%r8
063b0aad call      0x0000`0000`063B`A050
063b0ab2 ud2
063b0ab4 mov       0x2E(%rsp),%ax
063b0ab9 mov       %ax,0x102(%rsp)
063b0ac1 mov       0xF8(%rsp),%rax
063b0ac9 add       $1,%rax
063b0acd mov       %rax,0x20(%rsp)
063b0ad2 setb      %al
063b0ad5 test      $1,%al
063b0ad7 jne       0x0000`0000`063B`0AEB
063b0ad9 mov       0x20(%rsp),%rax
063b0ade mov       %rax,0xF8(%rsp)
063b0ae6 jmp       0x0000`0000`063B`08BA
063b0aeb lea       0x63C`DA50,%rcx
063b0af2 lea       0x63C`E2C0,%r8
063b0af9 mov       $0x1C,%edx
063b0afe call      0x0000`0000`063B`9FF0
063b0b03 ud2
063b0b05 mov       0x5F(%rsp),%cl
063b0b09 call      0x0000`0000`063C`C240
063b0b0e mov       %al,0x105(%rsp)
063b0b15 mov       0x105(%rsp),%al
063b0b1c add       $0xFE,%al
063b0b1e setne     %al
063b0b21 movzbl    %al,%eax
063b0b24 je        0x0000`0000`063B`03EB
063b0b2a jmp       0x0000`0000`063B`0B2C
063b0b2c jmp       0x0000`0000`063B`0B30
063b0b2e ud2
063b0b30 mov       0x105(%rsp),%cl
063b0b37 mov       %cl,%al
063b0b39 and       $1,%al
063b0b3b mov       %al,0x147(%rsp)
063b0b42 and       $1,%cl
063b0b45 lea       0x63C`E2D8,%rdx
063b0b4c call      0x0000`0000`063C`BFF0
063b0b51 mov       %al,0xF7(%rsp)
063b0b58 jmp       0x0000`0000`063B`05FF
063b0b5d mov       0xF7(%rsp),%al
063b0b64 add       $0x168,%rsp
063b0b6b ret

core::fmt::impl$0::write_char<uefi::proto::console::text::output::Output>:
063b0b70 sub       $0x38,%rsp
063b0b74 mov       %rcx,0x28(%rsp)
063b0b79 mov       %edx,0x34(%rsp)
063b0b7d mov       (%rcx),%rcx
063b0b80 call      0x0000`0000`063A`E4C0
063b0b85 mov       %al,0x27(%rsp)
063b0b89 mov       0x27(%rsp),%al
063b0b8d and       $1,%al
063b0b8f movzbl    %al,%eax
063b0b92 add       $0x38,%rsp
063b0b96 ret

core::fmt::impl$0::write_char<uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output> >:
063b0ba0 sub       $0x38,%rsp
063b0ba4 mov       %rcx,0x28(%rsp)
063b0ba9 mov       %edx,0x34(%rsp)
063b0bad mov       (%rcx),%rcx
063b0bb0 call      0x0000`0000`063A`E450
063b0bb5 mov       %al,0x27(%rsp)
063b0bb9 mov       0x27(%rsp),%al
063b0bbd and       $1,%al
063b0bbf movzbl    %al,%eax
063b0bc2 add       $0x38,%rsp
063b0bc6 ret

core::fmt::impl$0::write_fmt<uefi::proto::console::text::output::Output>:
063b0bd0 sub       $0x68,%rsp
063b0bd4 mov       %rcx,0x60(%rsp)
063b0bd9 mov       (%rcx),%rax
063b0bdc mov       %rax,0x20(%rsp)
063b0be1 lea       0x30(%rsp),%rcx
063b0be6 mov       $0x30,%r8d
063b0bec call      0x0000`0000`063C`BD50
063b0bf1 mov       0x20(%rsp),%rcx
063b0bf6 lea       0x30(%rsp),%rdx
063b0bfb call      0x0000`0000`063A`E530
063b0c00 mov       %al,0x2F(%rsp)
063b0c04 mov       0x2F(%rsp),%al
063b0c08 and       $1,%al
063b0c0a movzbl    %al,%eax
063b0c0d add       $0x68,%rsp
063b0c11 ret

core::fmt::impl$0::write_fmt<uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output> >:
063b0c20 sub       $0x68,%rsp
063b0c24 mov       %rcx,0x60(%rsp)
063b0c29 mov       (%rcx),%rax
063b0c2c mov       %rax,0x20(%rsp)
063b0c31 lea       0x30(%rsp),%rcx
063b0c36 mov       $0x30,%r8d
063b0c3c call      0x0000`0000`063C`BD50
063b0c41 mov       0x20(%rsp),%rcx
063b0c46 lea       0x30(%rsp),%rdx
063b0c4b call      0x0000`0000`063A`E580
063b0c50 mov       %al,0x2F(%rsp)
063b0c54 mov       0x2F(%rsp),%al
063b0c58 and       $1,%al
063b0c5a movzbl    %al,%eax
063b0c5d add       $0x68,%rsp
063b0c61 ret

core::fmt::impl$0::write_str<uefi::proto::console::text::output::Output>:
063b0c70 sub       $0x48,%rsp
063b0c74 mov       %rcx,0x30(%rsp)
063b0c79 mov       %rdx,0x38(%rsp)
063b0c7e mov       %r8,0x40(%rsp)
063b0c83 mov       (%rcx),%rcx
063b0c86 call      0x0000`0000`063B`2070
063b0c8b mov       %al,0x2F(%rsp)
063b0c8f mov       0x2F(%rsp),%al
063b0c93 and       $1,%al
063b0c95 movzbl    %al,%eax
063b0c98 add       $0x48,%rsp
063b0c9c ret

core::fmt::impl$0::write_str<uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output> >:
063b0ca0 sub       $0x48,%rsp
063b0ca4 mov       %rcx,0x30(%rsp)
063b0ca9 mov       %rdx,0x38(%rsp)
063b0cae mov       %r8,0x40(%rsp)
063b0cb3 mov       (%rcx),%rcx
063b0cb6 call      0x0000`0000`063B`2930
063b0cbb mov       %al,0x2F(%rsp)
063b0cbf mov       0x2F(%rsp),%al
063b0cc3 and       $1,%al
063b0cc5 movzbl    %al,%eax
063b0cc8 add       $0x48,%rsp
063b0ccc ret

core::convert::impl$3::into<uefi::result::status::Status,uefi::result::error::Error<tuple$<> > >:
063b0cd0 sub       $0x38,%rsp
063b0cd4 mov       %rcx,0x30(%rsp)
063b0cd9 call      0x0000`0000`063B`1AF0
063b0cde mov       %rax,0x28(%rsp)
063b0ce3 mov       0x28(%rsp),%rax
063b0ce8 add       $0x38,%rsp
063b0cec ret

core::convert::impl$3::into<uefi::result::status::Status,enum$<core::result::Result<tuple$<>,uefi::result::error::Error<tuple$<> > > > >:
063b0cf0 sub       $0x38,%rsp
063b0cf4 mov       %rcx,0x30(%rsp)
063b0cf9 call      0x0000`0000`063B`1CA0
063b0cfe mov       %rax,0x20(%rsp)
063b0d03 mov       %rdx,0x28(%rsp)
063b0d08 mov       0x28(%rsp),%rdx
063b0d0d mov       0x20(%rsp),%rax
063b0d12 add       $0x38,%rsp
063b0d16 ret

core::str::pattern::impl$3::into_searcher:
063b0d20 push      %rsi
063b0d21 sub       $0x90,%rsp
063b0d28 mov       %r9,0x30(%rsp)
063b0d2d mov       %r8,0x38(%rsp)
063b0d32 mov       %edx,0x54(%rsp)
063b0d36 mov       %rcx,0x40(%rsp)
063b0d3b mov       %rcx,0x48(%rsp)
063b0d40 mov       %edx,0x74(%rsp)
063b0d44 mov       %r8,0x78(%rsp)
063b0d49 mov       %r9,0x80(%rsp)
063b0d51 lea       0x6C(%rsp),%rcx
063b0d56 xor       %edx,%edx
063b0d58 mov       $4,%r8d
063b0d5e call      0x0000`0000`063C`BCC0
063b0d63 mov       0x54(%rsp),%ecx
063b0d67 lea       0x6C(%rsp),%rdx
063b0d6c mov       $4,%r8d
063b0d72 call      0x0000`0000`063A`FAD0
063b0d77 mov       %rax,0x58(%rsp)
063b0d7c mov       %rdx,0x60(%rsp)
063b0d81 mov       0x60(%rsp),%rdx
063b0d86 mov       0x58(%rsp),%rcx
063b0d8b call      0x0000`0000`063A`EF80
063b0d90 mov       %rax,0x28(%rsp)
063b0d95 mov       %rax,0x88(%rsp)
063b0d9d mov       0x30(%rsp),%rdx
063b0da2 mov       0x38(%rsp),%rcx
063b0da7 call      0x0000`0000`063A`EF80
063b0dac mov       %rax,0x20(%rsp)
063b0db1 mov       0x48(%rsp),%rax
063b0db6 mov       0x40(%rsp),%rcx
063b0dbb mov       0x28(%rsp),%rdx
063b0dc0 mov       0x54(%rsp),%r8d
063b0dc5 mov       0x20(%rsp),%r9
063b0dca mov       0x30(%rsp),%r10
063b0dcf mov       0x38(%rsp),%r11
063b0dd4 mov       0x6C(%rsp),%esi
063b0dd8 mov       %esi,0x70(%rsp)
063b0ddc mov       %r11,(%rcx)
063b0ddf mov       %r10,8(%rcx)
063b0de3 movq      $0,0x10(%rcx)
063b0deb mov       %r9,0x18(%rcx)
063b0def mov       %r8d,0x28(%rcx)
063b0df3 mov       %rdx,0x20(%rcx)
063b0df7 mov       0x70(%rsp),%edx
063b0dfb mov       %edx,0x2C(%rcx)
063b0dfe add       $0x90,%rsp
063b0e05 pop       %rsi
063b0e06 ret

core::convert::impl$6::try_into<u32,char>:
063b0e10 sub       $0x28,%rsp
063b0e14 mov       %ecx,0x24(%rsp)
063b0e18 call      0x0000`0000`063A`F5B0
063b0e1d mov       %eax,0x20(%rsp)
063b0e21 mov       0x20(%rsp),%eax
063b0e25 add       $0x28,%rsp
063b0e29 ret

core::convert::impl$6::try_into<char,uefi::data_types::chars::Char16>:
063b0e30 sub       $0x28,%rsp
063b0e34 mov       %ecx,0x24(%rsp)
063b0e38 call      0x0000`0000`063B`1740
063b0e3d mov       %ax,0x20(%rsp)
063b0e42 mov       %dx,0x22(%rsp)
063b0e47 mov       0x22(%rsp),%dx
063b0e4c mov       0x20(%rsp),%ax
063b0e51 add       $0x28,%rsp
063b0e55 ret

core::convert::impl$6::try_into<u16,uefi::data_types::chars::Char16>:
063b0e60 sub       $0x28,%rsp
063b0e64 mov       %cx,0x26(%rsp)
063b0e69 call      0x0000`0000`063B`1790
063b0e6e mov       %ax,0x22(%rsp)
063b0e73 mov       %dx,0x24(%rsp)
063b0e78 mov       0x24(%rsp),%dx
063b0e7d mov       0x22(%rsp),%ax
063b0e82 add       $0x28,%rsp
063b0e86 ret

core::iter::traits::collect::impl$0::into_iter<core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<u16> > >:
063b0e90 mov       %rcx,%rax
063b0e93 mov       (%rdx),%r8
063b0e96 mov       %r8,(%rcx)
063b0e99 mov       8(%rdx),%r8
063b0e9d mov       %r8,8(%rcx)
063b0ea1 mov       0x10(%rdx),%rdx
063b0ea5 mov       %rdx,0x10(%rcx)
063b0ea9 ret

core::iter::traits::collect::impl$0::into_iter<core::str::iter::Lines>:
063b0eb0 sub       $0x28,%rsp
063b0eb4 mov       %rcx,%rax
063b0eb7 mov       %rax,0x20(%rsp)
063b0ebc mov       $0x48,%r8d
063b0ec2 call      0x0000`0000`063C`BD50
063b0ec7 mov       0x20(%rsp),%rax
063b0ecc add       $0x28,%rsp
063b0ed0 ret

core::option::impl$35::branch<ref$<u16> >:
063b0ee0 sub       $0x18,%rsp
063b0ee4 mov       %rcx,(%rsp)
063b0ee8 mov       (%rsp),%rax
063b0eec test      %rax,%rax
063b0eef setne     %al
063b0ef2 movzbl    %al,%eax
063b0ef5 je        0x0000`0000`063B`0EFD
063b0ef7 jmp       0x0000`0000`063B`0EF9
063b0ef9 jmp       0x0000`0000`063B`0F08
063b0efb ud2
063b0efd movq      $0,8(%rsp)
063b0f06 jmp       0x0000`0000`063B`0F16
063b0f08 mov       (%rsp),%rax
063b0f0c mov       %rax,0x10(%rsp)
063b0f11 mov       %rax,8(%rsp)
063b0f16 mov       8(%rsp),%rax
063b0f1b add       $0x18,%rsp
063b0f1f ret

core::result::impl$27::branch<ref$<uefi::data_types::strs::CStr16>,core::fmt::Error>:
063b0f20 sub       $0x40,%rsp
063b0f24 mov       %rcx,(%rsp)
063b0f28 mov       %rdx,8(%rsp)
063b0f2d mov       (%rsp),%rax
063b0f31 test      %rax,%rax
063b0f34 sete      %al
063b0f37 movzbl    %al,%eax
063b0f3a jne       0x0000`0000`063B`0F42
063b0f3c jmp       0x0000`0000`063B`0F3E
063b0f3e jmp       0x0000`0000`063B`0F61
063b0f40 ud2
063b0f42 mov       (%rsp),%rcx
063b0f46 mov       8(%rsp),%rax
063b0f4b mov       %rcx,0x30(%rsp)
063b0f50 mov       %rax,0x38(%rsp)
063b0f55 mov       %rcx,0x10(%rsp)
063b0f5a mov       %rax,0x18(%rsp)
063b0f5f jmp       0x0000`0000`063B`0F6A
063b0f61 movq      $0,0x10(%rsp)
063b0f6a mov       0x10(%rsp),%rax
063b0f6f mov       0x18(%rsp),%rdx
063b0f74 add       $0x40,%rsp
063b0f78 ret

core::str::iter::impl$30::next:
063b0f80 sub       $0x38,%rsp
063b0f84 mov       %rcx,0x30(%rsp)
063b0f89 call      0x0000`0000`063A`DE10
063b0f8e mov       %rax,0x20(%rsp)
063b0f93 mov       %rdx,0x28(%rsp)
063b0f98 mov       0x28(%rsp),%rdx
063b0f9d mov       0x20(%rsp),%rax
063b0fa2 add       $0x38,%rsp
063b0fa6 ret

core::str::pattern::impl$0::next_match:
063b0fb0 sub       $0x1D8,%rsp
063b0fb7 mov       %rdx,0xA8(%rsp)
063b0fbf mov       %rcx,0xB0(%rsp)
063b0fc7 mov       %rcx,0xB8(%rsp)
063b0fcf mov       %rdx,0x150(%rsp)
063b0fd7 mov       0xA8(%rsp),%rax
063b0fdf mov       (%rax),%rcx
063b0fe2 mov       8(%rax),%rax
063b0fe6 mov       %rcx,0x1B8(%rsp)
063b0fee mov       %rax,0x1C0(%rsp)
063b0ff6 mov       %rcx,0x1C8(%rsp)
063b0ffe mov       %rax,0x1D0(%rsp)
063b1006 mov       0x1C8(%rsp),%rax
063b100e mov       %rax,0x98(%rsp)
063b1016 mov       0x1D0(%rsp),%rax
063b101e mov       %rax,0xA0(%rsp)
063b1026 mov       0xA0(%rsp),%rdx
063b102e mov       0x98(%rsp),%rcx
063b1036 mov       0xA8(%rsp),%rax
063b103e mov       0x10(%rax),%r8
063b1042 mov       0x18(%rax),%rax
063b1046 mov       %r8,0xD0(%rsp)
063b104e mov       %rax,0xD8(%rsp)
063b1056 mov       0xD0(%rsp),%r8
063b105e mov       0xD8(%rsp),%r9
063b1066 call      0x0000`0000`063C`3AD0
063b106b mov       %rax,0x88(%rsp)
063b1073 mov       %rdx,0x90(%rsp)
063b107b mov       0x90(%rsp),%rdx
063b1083 mov       0x88(%rsp),%rcx
063b108b call      0x0000`0000`063B`9DB0
063b1090 mov       %rdx,0xC8(%rsp)
063b1098 mov       %rax,0xC0(%rsp)
063b10a0 mov       0xC0(%rsp),%rax
063b10a8 test      %rax,%rax
063b10ab sete      %al
063b10ae movzbl    %al,%eax
063b10b1 jne       0x0000`0000`063B`10B9
063b10b3 jmp       0x0000`0000`063B`10B5
063b10b5 jmp       0x0000`0000`063B`1120
063b10b7 ud2
063b10b9 mov       0xA8(%rsp),%rax
063b10c1 mov       0xC0(%rsp),%rdx
063b10c9 mov       %rdx,0x68(%rsp)
063b10ce mov       0xC8(%rsp),%rcx
063b10d6 mov       %rcx,0x70(%rsp)
063b10db mov       %rdx,0x160(%rsp)
063b10e3 mov       %rcx,0x168(%rsp)
063b10eb mov       %rdx,0x170(%rsp)
063b10f3 mov       %rcx,0x178(%rsp)
063b10fb mov       %rax,%rcx
063b10fe add       $0x2C,%rcx
063b1102 mov       %rcx,0x78(%rsp)
063b1107 mov       0x20(%rax),%rax
063b110b sub       $1,%rax
063b110f mov       %rax,0x80(%rsp)
063b1117 setb      %al
063b111a test      $1,%al
063b111c jne       0x0000`0000`063B`115B
063b111e jmp       0x0000`0000`063B`113D
063b1120 mov       0xB0(%rsp),%rcx
063b1128 call      0x0000`0000`063B`9E90
063b112d mov       0xB8(%rsp),%rax
063b1135 add       $0x1D8,%rsp
063b113c ret
063b113d mov       0x80(%rsp),%r8
063b1145 mov       0x78(%rsp),%rcx
063b114a mov       $4,%edx
063b114f call      0x0000`0000`063C`3C80
063b1154 mov       %rax,0x60(%rsp)
063b1159 jmp       0x0000`0000`063B`1175
063b115b lea       0x63C`D990,%rcx
063b1162 lea       0x63C`E370,%r8
063b1169 mov       $0x21,%edx
063b116e call      0x0000`0000`063B`9FF0
063b1173 ud2
063b1175 mov       0x70(%rsp),%r8
063b117a mov       0x68(%rsp),%rdx
063b117f mov       0x60(%rsp),%rax
063b1184 mov       (%rax),%cl
063b1186 mov       %cl,0x187(%rsp)
063b118d call      0x0000`0000`063A`FD20
063b1192 mov       %rdx,0xE8(%rsp)
063b119a mov       %rax,0xE0(%rsp)
063b11a2 cmpq      $1,0xE0(%rsp)
063b11ab jne       0x0000`0000`063B`11CF
063b11ad mov       0xE8(%rsp),%rax
063b11b5 mov       %rax,0x188(%rsp)
063b11bd add       $1,%rax
063b11c1 mov       %rax,0x58(%rsp)
063b11c6 setb      %al
063b11c9 test      $1,%al
063b11cb jne       0x0000`0000`063B`1212
063b11cd jmp       0x0000`0000`063B`11F3
063b11cf mov       0xB0(%rsp),%rax
063b11d7 mov       0xA8(%rsp),%rcx
063b11df mov       0x18(%rcx),%rdx
063b11e3 mov       %rdx,0x10(%rcx)
063b11e7 movq      $0,(%rax)
063b11ee jmp       0x0000`0000`063B`112D
063b11f3 mov       0xA8(%rsp),%rcx
063b11fb mov       0x58(%rsp),%rax
063b1200 add       0x10(%rcx),%rax
063b1204 mov       %rax,0x50(%rsp)
063b1209 setb      %al
063b120c test      $1,%al
063b120e jne       0x0000`0000`063B`124C
063b1210 jmp       0x0000`0000`063B`122C
063b1212 lea       0x63C`DA50,%rcx
063b1219 lea       0x63C`E388,%r8
063b1220 mov       $0x1C,%edx
063b1225 call      0x0000`0000`063B`9FF0
063b122a ud2
063b122c mov       0xA8(%rsp),%rcx
063b1234 mov       0x50(%rsp),%rax
063b1239 mov       %rax,0x10(%rcx)
063b123d mov       0x10(%rcx),%rax
063b1241 cmp       0x20(%rcx),%rax
063b1245 jae       0x0000`0000`063B`1266
063b1247 jmp       0x0000`0000`063B`0FD7
063b124c lea       0x63C`DA50,%rcx
063b1253 lea       0x63C`E3A0,%r8
063b125a mov       $0x1C,%edx
063b125f call      0x0000`0000`063B`9FF0
063b1264 ud2
063b1266 mov       0xA8(%rsp),%rcx
063b126e mov       0x10(%rcx),%rax
063b1272 sub       0x20(%rcx),%rax
063b1276 mov       %rax,0x48(%rsp)
063b127b setb      %al
063b127e test      $1,%al
063b1280 jne       0x0000`0000`063B`12DA
063b1282 mov       0xA8(%rsp),%rax
063b128a mov       0x48(%rsp),%rcx
063b128f mov       %rcx,0x190(%rsp)
063b1297 mov       (%rax),%rcx
063b129a mov       8(%rax),%rax
063b129e mov       %rcx,0x198(%rsp)
063b12a6 mov       %rax,0x1A0(%rsp)
063b12ae mov       %rcx,0x1A8(%rsp)
063b12b6 mov       %rax,0x1B0(%rsp)
063b12be mov       0x1A8(%rsp),%rax
063b12c6 mov       %rax,0x38(%rsp)
063b12cb mov       0x1B0(%rsp),%rax
063b12d3 mov       %rax,0x40(%rsp)
063b12d8 jmp       0x0000`0000`063B`12F4
063b12da lea       0x63C`D990,%rcx
063b12e1 lea       0x63C`E3B8,%r8
063b12e8 mov       $0x21,%edx
063b12ed call      0x0000`0000`063B`9FF0
063b12f2 ud2
063b12f4 mov       0x40(%rsp),%rdx
063b12f9 mov       0x38(%rsp),%rcx
063b12fe mov       0x48(%rsp),%r8
063b1303 mov       0xA8(%rsp),%rax
063b130b mov       0x10(%rax),%rax
063b130f mov       %r8,0x100(%rsp)
063b1317 mov       %rax,0x108(%rsp)
063b131f mov       0x100(%rsp),%r8
063b1327 mov       0x108(%rsp),%r9
063b132f call      0x0000`0000`063C`3AD0
063b1334 mov       %rdx,0xF8(%rsp)
063b133c mov       %rax,0xF0(%rsp)
063b1344 mov       $1,%eax
063b1349 xor       %ecx,%ecx
063b134b cmpq      $0,0xF0(%rsp)
063b1354 cmove     %rcx,%rax
063b1358 cmp       $1,%rax
063b135c jne       0x0000`0000`063B`0FD7
063b1362 mov       0xA8(%rsp),%rax
063b136a mov       0xF0(%rsp),%rdx
063b1372 mov       0xF8(%rsp),%rcx
063b137a mov       %rdx,0x110(%rsp)
063b1382 mov       %rcx,0x118(%rsp)
063b138a mov       %rax,%rcx
063b138d add       $0x2C,%rcx
063b1391 mov       0x20(%rax),%rax
063b1395 movq      $0,0x130(%rsp)
063b13a1 mov       %rax,0x138(%rsp)
063b13a9 mov       0x130(%rsp),%rdx
063b13b1 mov       0x138(%rsp),%r8
063b13b9 lea       0x63C`E3D0,%r9
063b13c0 call      0x0000`0000`063B`7C40
063b13c5 mov       %rax,0x28(%rsp)
063b13ca mov       %rdx,0x30(%rsp)
063b13cf mov       0x30(%rsp),%rax
063b13d4 mov       0x28(%rsp),%rcx
063b13d9 mov       %rcx,0x120(%rsp)
063b13e1 mov       %rax,0x128(%rsp)
063b13e9 lea       0x110(%rsp),%rcx
063b13f1 lea       0x120(%rsp),%rdx
063b13f9 call      0x0000`0000`063B`7950
063b13fe mov       %al,0x27(%rsp)
063b1402 mov       0x27(%rsp),%al
063b1406 test      $1,%al
063b1408 jne       0x0000`0000`063B`140F
063b140a jmp       0x0000`0000`063B`0FD7
063b140f mov       0xB0(%rsp),%rax
063b1417 mov       0x48(%rsp),%rdx
063b141c mov       0xA8(%rsp),%rcx
063b1424 mov       0x10(%rcx),%rcx
063b1428 mov       %rdx,0x140(%rsp)
063b1430 mov       %rcx,0x148(%rsp)
063b1438 mov       0x140(%rsp),%rdx
063b1440 mov       0x148(%rsp),%rcx
063b1448 mov       %rdx,8(%rax)
063b144c mov       %rcx,0x10(%rax)
063b1450 movq      $1,(%rax)
063b1457 jmp       0x0000`0000`063B`112D

core::str::pattern::impl$0::haystack:
063b1460 push      %rax
063b1461 mov       %rcx,(%rsp)
063b1465 mov       (%rcx),%rax
063b1468 mov       8(%rcx),%rdx
063b146c pop       %rcx
063b146d ret

core::option::impl$36::from_residual<tuple$<usize,ref$<u16> > >:
063b1470 sub       $0x18,%rsp
063b1474 movq      $0,8(%rsp)
063b147d mov       (%rsp),%rax
063b1481 mov       8(%rsp),%rdx
063b1486 add       $0x18,%rsp
063b148a ret

core::str::impl$4::call:
063b1490 sub       $0xE8,%rsp
063b1497 mov       %rdx,0x70(%rsp)
063b149c mov       %r8,0x78(%rsp)
063b14a1 mov       %rcx,0xA8(%rsp)
063b14a9 mov       0x70(%rsp),%rcx
063b14ae mov       %rcx,0x58(%rsp)
063b14b3 mov       0x78(%rsp),%rdx
063b14b8 mov       %rdx,0x60(%rsp)
063b14bd mov       %rcx,0xB0(%rsp)
063b14c5 mov       %rdx,0xB8(%rsp)
063b14cd call      0x0000`0000`063A`EF80
063b14d2 mov       %rax,0x68(%rsp)
063b14d7 mov       %rax,0xC0(%rsp)
063b14df mov       0x68(%rsp),%rax
063b14e4 cmp       $0,%rax
063b14e8 ja        0x0000`0000`063B`14F7
063b14ea movb      $0,0x97(%rsp)
063b14f2 jmp       0x0000`0000`063B`15B4
063b14f7 mov       0x60(%rsp),%rax
063b14fc mov       0x58(%rsp),%rcx
063b1501 mov       %rcx,0xC8(%rsp)
063b1509 mov       %rax,0xD0(%rsp)
063b1511 mov       %rcx,0xD8(%rsp)
063b1519 mov       %rax,0xE0(%rsp)
063b1521 mov       0xD8(%rsp),%rax
063b1529 mov       %rax,0x48(%rsp)
063b152e mov       0xE0(%rsp),%rax
063b1536 mov       %rax,0x50(%rsp)
063b153b mov       0x68(%rsp),%rax
063b1540 sub       $1,%rax
063b1544 mov       %rax,0x40(%rsp)
063b1549 setb      %al
063b154c test      $1,%al
063b154e jne       0x0000`0000`063B`1566
063b1550 mov       0x40(%rsp),%rax
063b1555 mov       0x50(%rsp),%rcx
063b155a cmp       %rcx,%rax
063b155d setb      %al
063b1560 test      $1,%al
063b1562 jne       0x0000`0000`063B`1580
063b1564 jmp       0x0000`0000`063B`159C
063b1566 lea       0x63C`D990,%rcx
063b156d lea       0x63C`E460,%r8
063b1574 mov       $0x21,%edx
063b1579 call      0x0000`0000`063B`9FF0
063b157e ud2
063b1580 mov       0x48(%rsp),%rax
063b1585 mov       0x40(%rsp),%rcx
063b158a cmpb      $0xD,(%rax,%rcx)
063b158e sete      %al
063b1591 and       $1,%al
063b1593 mov       %al,0x97(%rsp)
063b159a jmp       0x0000`0000`063B`15B4
063b159c mov       0x50(%rsp),%rdx
063b15a1 mov       0x40(%rsp),%rcx
063b15a6 lea       0x63C`E478,%r8
063b15ad call      0x0000`0000`063B`A050
063b15b2 ud2
063b15b4 testb     $1,0x97(%rsp)
063b15bc jne       0x0000`0000`063B`15DD
063b15be mov       0x60(%rsp),%rax
063b15c3 mov       0x58(%rsp),%rcx
063b15c8 mov       %rcx,0x80(%rsp)
063b15d0 mov       %rax,0x88(%rsp)
063b15d8 jmp       0x0000`0000`063B`1676
063b15dd mov       0x68(%rsp),%rax
063b15e2 sub       $1,%rax
063b15e6 mov       %rax,0x38(%rsp)
063b15eb setb      %al
063b15ee test      $1,%al
063b15f0 jne       0x0000`0000`063B`1642
063b15f2 mov       0x60(%rsp),%rdx
063b15f7 mov       0x58(%rsp),%rcx
063b15fc mov       0x38(%rsp),%rax
063b1601 movq      $0,0x98(%rsp)
063b160d mov       %rax,0xA0(%rsp)
063b1615 mov       0x98(%rsp),%r8
063b161d mov       0xA0(%rsp),%r9
063b1625 lea       0x63C`E4A8,%rax
063b162c mov       %rax,0x20(%rsp)
063b1631 call      0x0000`0000`063C`5E20
063b1636 mov       %rax,0x28(%rsp)
063b163b mov       %rdx,0x30(%rsp)
063b1640 jmp       0x0000`0000`063B`165C
063b1642 lea       0x63C`D990,%rcx
063b1649 lea       0x63C`E490,%r8
063b1650 mov       $0x21,%edx
063b1655 call      0x0000`0000`063B`9FF0
063b165a ud2
063b165c mov       0x30(%rsp),%rax
063b1661 mov       0x28(%rsp),%rcx
063b1666 mov       %rcx,0x80(%rsp)
063b166e mov       %rax,0x88(%rsp)
063b1676 mov       0x80(%rsp),%rax
063b167e mov       0x88(%rsp),%rdx
063b1686 add       $0xE8,%rsp
063b168d ret

core::str::impl$5::call_mut:
063b1690 sub       $0x68,%rsp
063b1694 mov       %rdx,0x30(%rsp)
063b1699 mov       %r8,0x38(%rsp)
063b169e mov       %rcx,0x50(%rsp)
063b16a3 mov       0x30(%rsp),%rdx
063b16a8 mov       0x38(%rsp),%rax
063b16ad mov       %rdx,0x58(%rsp)
063b16b2 mov       %rax,0x60(%rsp)
063b16b7 mov       %rdx,0x40(%rsp)
063b16bc mov       %rax,0x48(%rsp)
063b16c1 mov       0x40(%rsp),%rdx
063b16c6 mov       0x48(%rsp),%r8
063b16cb call      0x0000`0000`063B`1490
063b16d0 mov       %rax,0x20(%rsp)
063b16d5 mov       %rdx,0x28(%rsp)
063b16da mov       0x28(%rsp),%rdx
063b16df mov       0x20(%rsp),%rax
063b16e4 add       $0x68,%rsp
063b16e8 ret

core::str::iter::impl$2::next_back:
063b16f0 sub       $0x38,%rsp
063b16f4 mov       %rcx,0x30(%rsp)
063b16f9 call      0x0000`0000`063A`EBF0
063b16fe mov       %eax,0x28(%rsp)
063b1702 mov       %edx,0x2C(%rsp)
063b1706 mov       0x2C(%rsp),%edx
063b170a mov       0x28(%rsp),%ecx
063b170e call      0x0000`0000`063A`FF70
063b1713 mov       %eax,0x24(%rsp)
063b1717 mov       0x24(%rsp),%eax
063b171b add       $0x38,%rsp
063b171f ret

core::str::iter::impl$2::next_back::closure$0:
063b1720 sub       $0x38,%rsp
063b1724 mov       %ecx,0x34(%rsp)
063b1728 call      0x0000`0000`063A`F580
063b172d mov       %eax,0x2C(%rsp)
063b1731 mov       0x2C(%rsp),%eax
063b1735 add       $0x38,%rsp
063b1739 ret

uefi::data_types::chars::impl$6::try_from:
063b1740 sub       $0x18,%rsp
063b1744 mov       %ecx,4(%rsp)
063b1748 mov       %ecx,0x10(%rsp)
063b174c mov       %ecx,0x14(%rsp)
063b1750 cmp       $0xFFFF,%ecx
063b1756 jbe       0x0000`0000`063B`1761
063b1758 movw      $1,8(%rsp)
063b175f jmp       0x0000`0000`063B`177B
063b1761 mov       4(%rsp),%eax
063b1765 mov       %ax,0xE(%rsp)
063b176a mov       0xE(%rsp),%ax
063b176f mov       %ax,0xA(%rsp)
063b1774 movw      $0,8(%rsp)
063b177b mov       8(%rsp),%ax
063b1780 mov       0xA(%rsp),%dx
063b1785 add       $0x18,%rsp
063b1789 ret

uefi::data_types::chars::impl$8::try_from:
063b1790 sub       $0x38,%rsp
063b1794 mov       %cx,0x32(%rsp)
063b1799 call      0x0000`0000`063B`02C0
063b179e mov       %eax,0x24(%rsp)
063b17a2 mov       0x24(%rsp),%ecx
063b17a6 call      0x0000`0000`063B`0E10
063b17ab mov       %eax,0x2C(%rsp)
063b17af mov       0x2C(%rsp),%edx
063b17b3 sub       $0x11`0000,%edx
063b17b9 xor       %eax,%eax
063b17bb mov       $1,%ecx
063b17c0 cmp       $0,%edx
063b17c3 cmove     %rcx,%rax
063b17c7 cmp       $0,%rax
063b17cb jne       0x0000`0000`063B`17E6
063b17cd mov       0x2C(%rsp),%ecx
063b17d1 mov       %ecx,0x34(%rsp)
063b17d5 call      0x0000`0000`063B`0E30
063b17da mov       %dx,0x2A(%rsp)
063b17df mov       %ax,0x28(%rsp)
063b17e4 jmp       0x0000`0000`063B`17ED
063b17e6 movw      $1,0x28(%rsp)
063b17ed mov       0x28(%rsp),%ax
063b17f2 mov       0x2A(%rsp),%dx
063b17f7 add       $0x38,%rsp
063b17fb ret

uefi::data_types::strs::CStr16::from_u16_with_nul:
063b1800 sub       $0x128,%rsp
063b1807 mov       %r8,0x48(%rsp)
063b180c mov       %rdx,%rax
063b180f mov       0x48(%rsp),%rdx
063b1814 mov       %rax,0x50(%rsp)
063b1819 mov       %rcx,%rax
063b181c mov       0x50(%rsp),%rcx
063b1821 mov       %rax,0x58(%rsp)
063b1826 mov       %rax,0x60(%rsp)
063b182b mov       %rcx,0x108(%rsp)
063b1833 mov       %rdx,0x110(%rsp)
063b183b call      0x0000`0000`063C`C0C0
063b1840 mov       %rax,0x68(%rsp)
063b1845 mov       %rdx,0x70(%rsp)
063b184a mov       0x70(%rsp),%r8
063b184f mov       0x68(%rsp),%rdx
063b1854 lea       0x90(%rsp),%rcx
063b185c call      0x0000`0000`063A`FC00
063b1861 lea       0x78(%rsp),%rcx
063b1866 lea       0x90(%rsp),%rdx
063b186e call      0x0000`0000`063B`0E90
063b1873 mov       0x78(%rsp),%rax
063b1878 mov       %rax,0xA8(%rsp)
063b1880 mov       0x80(%rsp),%rax
063b1888 mov       %rax,0xB0(%rsp)
063b1890 mov       0x88(%rsp),%rax
063b1898 mov       %rax,0xB8(%rsp)
063b18a0 lea       0xA8(%rsp),%rcx
063b18a8 call      0x0000`0000`063A`E010
063b18ad mov       %rdx,0xC8(%rsp)
063b18b5 mov       %rax,0xC0(%rsp)
063b18bd mov       0xC8(%rsp),%rax
063b18c5 test      %rax,%rax
063b18c8 setne     %al
063b18cb movzbl    %al,%eax
063b18ce je        0x0000`0000`063B`18D6
063b18d0 jmp       0x0000`0000`063B`18D2
063b18d2 jmp       0x0000`0000`063B`190B
063b18d4 ud2
063b18d6 mov       0x58(%rsp),%rax
063b18db movq      $2,0xF8(%rsp)
063b18e7 mov       0xF8(%rsp),%rdx
063b18ef mov       0x100(%rsp),%rcx
063b18f7 mov       %rdx,8(%rax)
063b18fb mov       %rcx,0x10(%rax)
063b18ff movq      $1,(%rax)
063b1906 jmp       0x0000`0000`063B`19A8
063b190b mov       0xC8(%rsp),%rax
063b1913 mov       (%rax),%cx
063b1916 mov       %cx,0x11E(%rsp)
063b191e mov       0xC0(%rsp),%rax
063b1926 mov       %rax,0x40(%rsp)
063b192b mov       %rax,0x120(%rsp)
063b1933 call      0x0000`0000`063B`0E60
063b1938 mov       %dx,0xD2(%rsp)
063b1940 mov       %ax,0xD0(%rsp)
063b1948 movzwl    0xD0(%rsp),%eax
063b1950 test      %rax,%rax
063b1953 je        0x0000`0000`063B`195B
063b1955 jmp       0x0000`0000`063B`1957
063b1957 jmp       0x0000`0000`063B`196B
063b1959 ud2
063b195b cmpw      $0,0xD2(%rsp)
063b1964 je        0x0000`0000`063B`19B5
063b1966 jmp       0x0000`0000`063B`18A0
063b196b mov       0x58(%rsp),%rax
063b1970 mov       0x40(%rsp),%rcx
063b1975 mov       %rcx,0xF0(%rsp)
063b197d movq      $0,0xE8(%rsp)
063b1989 mov       0xE8(%rsp),%rdx
063b1991 mov       0xF0(%rsp),%rcx
063b1999 mov       %rdx,8(%rax)
063b199d mov       %rcx,0x10(%rax)
063b19a1 movq      $1,(%rax)
063b19a8 mov       0x60(%rsp),%rax
063b19ad add       $0x128,%rsp
063b19b4 ret
063b19b5 mov       0x48(%rsp),%rax
063b19ba sub       $1,%rax
063b19be mov       %rax,0x38(%rsp)
063b19c3 setb      %al
063b19c6 test      $1,%al
063b19c8 jne       0x0000`0000`063B`19DB
063b19ca mov       0x40(%rsp),%rax
063b19cf mov       0x38(%rsp),%rcx
063b19d4 cmp       %rcx,%rax
063b19d7 jne       0x0000`0000`063B`1A10
063b19d9 jmp       0x0000`0000`063B`19F5
063b19db lea       0x63C`D990,%rcx
063b19e2 lea       0x63C`E548,%r8
063b19e9 mov       $0x21,%edx
063b19ee call      0x0000`0000`063B`9FF0
063b19f3 ud2
063b19f5 mov       0x48(%rsp),%rdx
063b19fa mov       0x50(%rsp),%rcx
063b19ff call      0x0000`0000`063B`1A80
063b1a04 mov       %rax,0x28(%rsp)
063b1a09 mov       %rdx,0x30(%rsp)
063b1a0e jmp       0x0000`0000`063B`1A52
063b1a10 mov       0x58(%rsp),%rax
063b1a15 mov       0x40(%rsp),%rcx
063b1a1a mov       %rcx,0xE0(%rsp)
063b1a22 movq      $1,0xD8(%rsp)
063b1a2e mov       0xD8(%rsp),%rdx
063b1a36 mov       0xE0(%rsp),%rcx
063b1a3e mov       %rdx,8(%rax)
063b1a42 mov       %rcx,0x10(%rax)
063b1a46 movq      $1,(%rax)
063b1a4d jmp       0x0000`0000`063B`19A8
063b1a52 mov       0x58(%rsp),%rax
063b1a57 mov       0x30(%rsp),%rcx
063b1a5c mov       0x28(%rsp),%rdx
063b1a61 mov       %rdx,8(%rax)
063b1a65 mov       %rcx,0x10(%rax)
063b1a69 movq      $0,(%rax)
063b1a70 jmp       0x0000`0000`063B`19A8

uefi::data_types::strs::CStr16::from_u16_with_nul_unchecked:
063b1a80 sub       $0x10,%rsp
063b1a84 mov       %rcx,%rax
063b1a87 mov       %rax,(%rsp)
063b1a8b mov       %rdx,8(%rsp)
063b1a90 add       $0x10,%rsp
063b1a94 ret

uefi::data_types::strs::CStr16::as_ptr:
063b1aa0 sub       $0x38,%rsp
063b1aa4 mov       %rcx,0x28(%rsp)
063b1aa9 mov       %rdx,0x30(%rsp)
063b1aae call      0x0000`0000`063A`FCB0
063b1ab3 mov       %rax,0x20(%rsp)
063b1ab8 mov       0x20(%rsp),%rax
063b1abd add       $0x38,%rsp
063b1ac1 ret

uefi::result::error::Error<tuple$<> >::new<tuple$<> >:
063b1ad0 sub       $0x18,%rsp
063b1ad4 mov       %rcx,8(%rsp)
063b1ad9 mov       %rcx,(%rsp)
063b1add mov       (%rsp),%rax
063b1ae1 add       $0x18,%rsp
063b1ae5 ret

uefi::result::error::impl$1::from:
063b1af0 sub       $0x10,%rsp
063b1af4 mov       %rcx,8(%rsp)
063b1af9 mov       %rcx,(%rsp)
063b1afd mov       (%rsp),%rax
063b1b01 add       $0x10,%rsp
063b1b05 ret

uefi::result::status::Status::is_success:
063b1b10 sub       $0x38,%rsp
063b1b14 mov       %rcx,0x30(%rsp)
063b1b19 lea       0x30(%rsp),%rcx
063b1b1e lea       0x63C`E4C0,%rdx
063b1b25 call      0x0000`0000`063B`4110
063b1b2a mov       %al,0x2F(%rsp)
063b1b2e mov       0x2F(%rsp),%al
063b1b32 and       $1,%al
063b1b34 movzbl    %al,%eax
063b1b37 add       $0x38,%rsp
063b1b3b ret

uefi::result::status::Status::into_with_val<uefi::data_types::Event,uefi::table::boot::impl$0::create_event::closure_env$0>:
063b1b40 sub       $0x68,%rsp
063b1b44 mov       %r8,0x30(%rsp)
063b1b49 mov       %rdx,0x38(%rsp)
063b1b4e mov       %rcx,%rax
063b1b51 mov       0x38(%rsp),%rcx
063b1b56 mov       %rax,0x40(%rsp)
063b1b5b mov       %rax,0x48(%rsp)
063b1b60 mov       %rcx,0x58(%rsp)
063b1b65 mov       %r8,0x60(%rsp)
063b1b6a movb      $0,0x57(%rsp)
063b1b6f movb      $1,0x57(%rsp)
063b1b74 call      0x0000`0000`063B`1B10
063b1b79 mov       %al,0x56(%rsp)
063b1b7d mov       0x56(%rsp),%al
063b1b81 test      $1,%al
063b1b83 jne       0x0000`0000`063B`1B98
063b1b85 jmp       0x0000`0000`063B`1B87
063b1b87 mov       0x38(%rsp),%rcx
063b1b8c call      0x0000`0000`063B`0CD0
063b1b91 mov       %rax,0x28(%rsp)
063b1b96 jmp       0x0000`0000`063B`1BCA
063b1b98 mov       0x30(%rsp),%rcx
063b1b9d movb      $0,0x57(%rsp)
063b1ba2 call      0x0000`0000`063B`1E30
063b1ba7 mov       %rax,0x20(%rsp)
063b1bac mov       0x40(%rsp),%rax
063b1bb1 mov       0x20(%rsp),%rcx
063b1bb6 mov       %rcx,8(%rax)
063b1bba movq      $0,(%rax)
063b1bc1 testb     $1,0x57(%rsp)
063b1bc6 jne       0x0000`0000`063B`1BEB
063b1bc8 jmp       0x0000`0000`063B`1BE1
063b1bca mov       0x40(%rsp),%rax
063b1bcf mov       0x28(%rsp),%rcx
063b1bd4 mov       %rcx,8(%rax)
063b1bd8 movq      $1,(%rax)
063b1bdf jmp       0x0000`0000`063B`1BC1
063b1be1 mov       0x48(%rsp),%rax
063b1be6 add       $0x68,%rsp
063b1bea ret
063b1beb jmp       0x0000`0000`063B`1BE1

uefi::result::status::Status::into_with<tuple$<>,tuple$<>,uefi::result::status::impl$1::from::closure_env$0,uefi::result::status::impl$1::from::closure_env$1>:
063b1bf0 sub       $0x78,%rsp
063b1bf4 mov       %rcx,0x30(%rsp)
063b1bf9 mov       %rcx,0x60(%rsp)
063b1bfe movb      $0,0x5F(%rsp)
063b1c03 movb      $0,0x5E(%rsp)
063b1c08 movb      $1,0x5F(%rsp)
063b1c0d movb      $1,0x5E(%rsp)
063b1c12 call      0x0000`0000`063B`1B10
063b1c17 mov       %al,0x3F(%rsp)
063b1c1b mov       0x3F(%rsp),%al
063b1c1f test      $1,%al
063b1c21 jne       0x0000`0000`063B`1C40
063b1c23 jmp       0x0000`0000`063B`1C25
063b1c25 mov       0x30(%rsp),%rax
063b1c2a movb      $0,0x5E(%rsp)
063b1c2f mov       %rax,0x50(%rsp)
063b1c34 mov       0x50(%rsp),%rcx
063b1c39 call      0x0000`0000`063B`1CE0
063b1c3e jmp       0x0000`0000`063B`1C5C
063b1c40 movb      $0,0x5F(%rsp)
063b1c45 call      0x0000`0000`063B`1CD0
063b1c4a movq      $0,0x40(%rsp)
063b1c53 testb     $1,0x5E(%rsp)
063b1c58 jne       0x0000`0000`063B`1C89
063b1c5a jmp       0x0000`0000`063B`1C80
063b1c5c mov       0x30(%rsp),%rcx
063b1c61 call      0x0000`0000`063B`1AD0
063b1c66 mov       %rax,0x28(%rsp)
063b1c6b mov       0x28(%rsp),%rax
063b1c70 mov       %rax,0x48(%rsp)
063b1c75 movq      $1,0x40(%rsp)
063b1c7e jmp       0x0000`0000`063B`1C53
063b1c80 testb     $1,0x5F(%rsp)
063b1c85 jne       0x0000`0000`063B`1C9A
063b1c87 jmp       0x0000`0000`063B`1C8B
063b1c89 jmp       0x0000`0000`063B`1C80
063b1c8b mov       0x40(%rsp),%rax
063b1c90 mov       0x48(%rsp),%rdx
063b1c95 add       $0x78,%rsp
063b1c99 ret
063b1c9a jmp       0x0000`0000`063B`1C8B

uefi::result::status::impl$1::from:
063b1ca0 sub       $0x38,%rsp
063b1ca4 mov       %rcx,0x30(%rsp)
063b1ca9 call      0x0000`0000`063B`1BF0
063b1cae mov       %rax,0x20(%rsp)
063b1cb3 mov       %rdx,0x28(%rsp)
063b1cb8 mov       0x28(%rsp),%rdx
063b1cbd mov       0x20(%rsp),%rax
063b1cc2 add       $0x38,%rsp
063b1cc6 ret

uefi::result::status::impl$1::from::closure$0:
063b1cd0 push      %rax
063b1cd1 pop       %rax
063b1cd2 ret

uefi::result::status::impl$1::from::closure$1:
063b1ce0 sub       $0x10,%rsp
063b1ce4 mov       %rcx,8(%rsp)
063b1ce9 add       $0x10,%rsp
063b1ced ret

uefi::table::system::SystemTable<uefi::table::system::Boot>::stdout:
063b1cf0 sub       $0x18,%rsp
063b1cf4 mov       %rcx,8(%rsp)
063b1cf9 mov       (%rcx),%rax
063b1cfc mov       0x40(%rax),%rax
063b1d00 mov       %rax,(%rsp)
063b1d04 mov       %rax,0x10(%rsp)
063b1d09 mov       (%rsp),%rax
063b1d0d add       $0x18,%rsp
063b1d11 ret

uefi::table::system::SystemTable<uefi::table::system::Boot>::runtime_services:
063b1d20 push      %rax
063b1d21 mov       %rcx,(%rsp)
063b1d25 mov       (%rcx),%rax
063b1d28 mov       0x58(%rax),%rax
063b1d2c pop       %rcx
063b1d2d ret

uefi::table::system::SystemTable<uefi::table::system::Boot>::boot_services:
063b1d30 push      %rax
063b1d31 mov       %rcx,(%rsp)
063b1d35 mov       (%rcx),%rax
063b1d38 mov       0x60(%rax),%rax
063b1d3c pop       %rcx
063b1d3d ret

uefi::table::system::SystemTable<uefi::table::system::Boot>::unsafe_clone:
063b1d40 sub       $0x10,%rsp
063b1d44 mov       %rcx,8(%rsp)
063b1d49 mov       (%rcx),%rax
063b1d4c mov       %rax,(%rsp)
063b1d50 mov       (%rsp),%rax
063b1d54 add       $0x10,%rsp
063b1d58 ret

uefi::table::boot::BootServices::create_event:
063b1d60 sub       $0xA8,%rsp
063b1d67 mov       %r9,0x38(%rsp)
063b1d6c mov       %r8d,0x44(%rsp)
063b1d71 mov       %rdx,0x48(%rsp)
063b1d76 mov       %rcx,0x50(%rsp)
063b1d7b mov       %rcx,0x58(%rsp)
063b1d80 mov       0xD8(%rsp),%rax
063b1d88 mov       %rax,0x60(%rsp)
063b1d8d mov       0xD0(%rsp),%rax
063b1d95 mov       %rax,0x68(%rsp)
063b1d9a mov       %rdx,0x80(%rsp)
063b1da2 mov       %r8d,0x8C(%rsp)
063b1daa mov       %r9,0x90(%rsp)
063b1db2 mov       0xA0(%rsp),%rax
063b1dba mov       %rax,0x70(%rsp)
063b1dbf mov       0x48(%rsp),%rax
063b1dc4 mov       0x50(%rax),%rax
063b1dc8 mov       %rax,0x30(%rsp)
063b1dcd lea       0x70(%rsp),%rax
063b1dd2 mov       %rax,0x98(%rsp)
063b1dda mov       0x30(%rsp),%rax
063b1ddf mov       0x60(%rsp),%r9
063b1de4 mov       0x68(%rsp),%r8
063b1de9 mov       0x38(%rsp),%rdx
063b1dee mov       0x44(%rsp),%ecx
063b1df2 lea       0x70(%rsp),%r10
063b1df7 mov       %r10,0x20(%rsp)
063b1dfc call      *%rax
063b1dfe mov       %rax,0x28(%rsp)
063b1e03 mov       0x28(%rsp),%rdx
063b1e08 mov       0x50(%rsp),%rcx
063b1e0d mov       0x70(%rsp),%rax
063b1e12 mov       %rax,0x78(%rsp)
063b1e17 mov       0x78(%rsp),%r8
063b1e1c call      0x0000`0000`063B`1B40
063b1e21 mov       0x58(%rsp),%rax
063b1e26 add       $0xA8,%rsp
063b1e2d ret

uefi::table::boot::impl$0::create_event::closure$0:
063b1e30 sub       $0x20,%rsp
063b1e34 mov       %rcx,(%rsp)
063b1e38 mov       %rcx,8(%rsp)
063b1e3d mov       %rcx,0x10(%rsp)
063b1e42 mov       %rcx,0x18(%rsp)
063b1e47 mov       (%rsp),%rax
063b1e4b add       $0x20,%rsp
063b1e4f ret

uefi::table::boot::BootServices::stall:
063b1e50 sub       $0xB8,%rsp
063b1e57 mov       %rdx,0x40(%rsp)
063b1e5c mov       %rcx,%rax
063b1e5f mov       0x40(%rsp),%rcx
063b1e64 mov       %rax,0x98(%rsp)
063b1e6c mov       %rcx,0xA0(%rsp)
063b1e74 callq     *0xF8(%rax)
063b1e7a mov       %rax,0x58(%rsp)
063b1e7f lea       0x58(%rsp),%rax
063b1e84 mov       %rax,0x48(%rsp)
063b1e89 lea       0x63C`E4C0,%rax
063b1e90 mov       %rax,0x50(%rsp)
063b1e95 mov       0x48(%rsp),%rcx
063b1e9a mov       %rcx,0x28(%rsp)
063b1e9f mov       %rcx,0xA8(%rsp)
063b1ea7 mov       0x50(%rsp),%rdx
063b1eac mov       %rdx,0x30(%rsp)
063b1eb1 mov       %rdx,0xB0(%rsp)
063b1eb9 call      0x0000`0000`063B`4110
063b1ebe mov       %al,0x3F(%rsp)
063b1ec2 mov       0x3F(%rsp),%al
063b1ec6 xor       $0xFF,%al
063b1ec8 test      $1,%al
063b1eca jne       0x0000`0000`063B`1ED4
063b1ecc add       $0xB8,%rsp
063b1ed3 ret
063b1ed4 mov       0x30(%rsp),%r8
063b1ed9 mov       0x28(%rsp),%rdx
063b1ede movb      $0,0x67(%rsp)
063b1ee3 movq      $0,0x68(%rsp)
063b1eec lea       0x63C`E5C0,%rcx
063b1ef3 mov       %rsp,%rax
063b1ef6 mov       %rcx,0x20(%rax)
063b1efa xor       %eax,%eax
063b1efc mov       %al,%cl
063b1efe lea       0x68(%rsp),%r9
063b1f03 call      0x0000`0000`063B`02D0
063b1f08 ud2

uefi::table::runtime::RuntimeServices::reset:
063b1f10 sub       $0xA8,%rsp
063b1f17 mov       %r8,0x38(%rsp)
063b1f1c mov       %edx,0x44(%rsp)
063b1f20 mov       %rcx,0x48(%rsp)
063b1f25 mov       0xD0(%rsp),%rax
063b1f2d mov       %r9,0x50(%rsp)
063b1f32 mov       %rax,0x58(%rsp)
063b1f37 mov       %rcx,0x70(%rsp)
063b1f3c mov       %edx,0x7C(%rsp)
063b1f40 mov       %r8,0x80(%rsp)
063b1f48 mov       0x50(%rsp),%rax
063b1f4d test      %rax,%rax
063b1f50 setne     %al
063b1f53 movzbl    %al,%eax
063b1f56 je        0x0000`0000`063B`1F5E
063b1f58 jmp       0x0000`0000`063B`1F5A
063b1f5a jmp       0x0000`0000`063B`1F60
063b1f5c ud2
063b1f5e jmp       0x0000`0000`063B`1FCD
063b1f60 mov       0x50(%rsp),%rcx
063b1f65 mov       0x58(%rsp),%rdx
063b1f6a mov       %rdx,0x28(%rsp)
063b1f6f mov       %rcx,0x88(%rsp)
063b1f77 mov       %rdx,0x90(%rsp)
063b1f7f call      0x0000`0000`063C`3DA0
063b1f84 mov       %rax,0x30(%rsp)
063b1f89 mov       0x30(%rsp),%rax
063b1f8e mov       0x28(%rsp),%rcx
063b1f93 mov       %rcx,0x60(%rsp)
063b1f98 mov       %rax,0x68(%rsp)
063b1f9d mov       0x38(%rsp),%rdx
063b1fa2 mov       0x44(%rsp),%ecx
063b1fa6 mov       0x48(%rsp),%rax
063b1fab mov       0x60(%rsp),%r8
063b1fb0 mov       %r8,0x98(%rsp)
063b1fb8 mov       0x68(%rsp),%r9
063b1fbd mov       %r9,0xA0(%rsp)
063b1fc5 mov       0x68(%rax),%rax
063b1fc9 call      *%rax
063b1fcb ud2
063b1fcd movq      $0,0x60(%rsp)
063b1fd6 movq      $0,0x68(%rsp)
063b1fdf jmp       0x0000`0000`063B`1F9D

uefi::proto::console::text::output::Output::output_string:
063b1ff0 sub       $0x78,%rsp
063b1ff4 mov       %r8,0x38(%rsp)
063b1ff9 mov       %rdx,%rax
063b1ffc mov       0x38(%rsp),%rdx
063b2001 mov       %rax,0x40(%rsp)
063b2006 mov       %rcx,%rax
063b2009 mov       0x40(%rsp),%rcx
063b200e mov       %rax,0x48(%rsp)
063b2013 mov       %rax,0x60(%rsp)
063b2018 mov       %rcx,0x68(%rsp)
063b201d mov       %rdx,0x70(%rsp)
063b2022 mov       8(%rax),%rax
063b2026 mov       %rax,0x50(%rsp)
063b202b call      0x0000`0000`063B`1AA0
063b2030 mov       %rax,0x58(%rsp)
063b2035 mov       0x50(%rsp),%rax
063b203a mov       0x58(%rsp),%rdx
063b203f mov       0x48(%rsp),%rcx
063b2044 call      *%rax
063b2046 mov       %rax,0x30(%rsp)
063b204b mov       0x30(%rsp),%rcx
063b2050 call      0x0000`0000`063B`0CF0
063b2055 mov       %rax,0x20(%rsp)
063b205a mov       %rdx,0x28(%rsp)
063b205f mov       0x28(%rsp),%rdx
063b2064 mov       0x20(%rsp),%rax
063b2069 add       $0x78,%rsp
063b206d ret

uefi::proto::console::text::output::impl$1::write_str:
063b2070 sub       $0x1C8,%rsp
063b2077 mov       %r8,0x40(%rsp)
063b207c mov       %rdx,0x38(%rsp)
063b2081 mov       %rcx,0x30(%rsp)
063b2086 mov       %rcx,0x1A0(%rsp)
063b208e mov       %rdx,0x1A8(%rsp)
063b2096 mov       %r8,0x1B0(%rsp)
063b209e lea       0x4E(%rsp),%rcx
063b20a3 xor       %edx,%edx
063b20a5 mov       $0x102,%r8d
063b20ab call      0x0000`0000`063C`BCC0
063b20b0 mov       0x30(%rsp),%rax
063b20b5 mov       0x38(%rsp),%rcx
063b20ba mov       0x40(%rsp),%rdx
063b20bf movq      $0,0x150(%rsp)
063b20cb mov       %rax,0x158(%rsp)
063b20d3 lea       0x4E(%rsp),%rax
063b20d8 mov       %rax,0x160(%rsp)
063b20e0 lea       0x150(%rsp),%rax
063b20e8 mov       %rax,0x168(%rsp)
063b20f0 lea       0x158(%rsp),%rax
063b20f8 mov       %rax,0x170(%rsp)
063b2100 lea       0x160(%rsp),%rax
063b2108 mov       %rax,0x178(%rsp)
063b2110 mov       0x178(%rsp),%r8
063b2118 call      0x0000`0000`063B`0360
063b211d mov       %al,0x4C(%rsp)
063b2121 mov       0x4C(%rsp),%cl
063b2125 call      0x0000`0000`063B`00D0
063b212a mov       %al,0x2F(%rsp)
063b212e mov       0x2F(%rsp),%cl
063b2132 and       $1,%cl
063b2135 call      0x0000`0000`063B`A8B0
063b213a and       $1,%al
063b213c mov       %al,0x187(%rsp)
063b2143 movzbl    0x187(%rsp),%eax
063b214b test      $1,%al
063b214d je        0x0000`0000`063B`2155
063b214f jmp       0x0000`0000`063B`2151
063b2151 jmp       0x0000`0000`063B`21AB
063b2153 ud2
063b2155 lea       0x4E(%rsp),%rax
063b215a mov       %rax,0x188(%rsp)
063b2162 movq      $0x81,0x190(%rsp)
063b216e lea       0x150(%rsp),%rax
063b2176 mov       %rax,0x198(%rsp)
063b217e mov       0x188(%rsp),%rdx
063b2186 mov       0x190(%rsp),%r8
063b218e mov       0x198(%rsp),%r9
063b2196 lea       0x158(%rsp),%rcx
063b219e call      0x0000`0000`063B`21D0
063b21a3 and       $1,%al
063b21a5 mov       %al,0x4D(%rsp)
063b21a9 jmp       0x0000`0000`063B`21BD
063b21ab lea       0x63C`E648,%rcx
063b21b2 call      0x0000`0000`063B`A930
063b21b7 and       $1,%al
063b21b9 mov       %al,0x4D(%rsp)
063b21bd mov       0x4D(%rsp),%al
063b21c1 and       $1,%al
063b21c3 movzbl    %al,%eax
063b21c6 add       $0x1C8,%rsp
063b21cd ret

uefi::proto::console::text::output::impl$1::write_str::closure$0:
063b21d0 sub       $0x118,%rsp
063b21d7 mov       %r9,0x58(%rsp)
063b21dc mov       %r8,0x60(%rsp)
063b21e1 mov       %rdx,0x68(%rsp)
063b21e6 mov       %rcx,0x70(%rsp)
063b21eb mov       %rcx,0xB8(%rsp)
063b21f3 mov       0xB8(%rsp),%rax
063b21fb mov       (%rax),%rax
063b21fe mov       %rax,0xC0(%rsp)
063b2206 mov       %rdx,0xC8(%rsp)
063b220e mov       %r8,0xD0(%rsp)
063b2216 mov       %r9,0xD8(%rsp)
063b221e mov       (%r9),%rax
063b2221 mov       %rax,0x78(%rsp)
063b2226 cmp       %r8,%rax
063b2229 setb      %al
063b222c test      $1,%al
063b222e jne       0x0000`0000`063B`2232
063b2230 jmp       0x0000`0000`063B`2278
063b2232 mov       0x60(%rsp),%rdx
063b2237 mov       0x68(%rsp),%rcx
063b223c mov       0x58(%rsp),%rax
063b2241 mov       0x78(%rsp),%r8
063b2246 movw      $0,(%rcx,%r8,2)
063b224d mov       (%rax),%rax
063b2250 mov       %rax,0x88(%rsp)
063b2258 mov       0x88(%rsp),%r8
063b2260 lea       0x63C`E678,%r9
063b2267 call      0x0000`0000`063A`FCD0
063b226c mov       %rax,0x48(%rsp)
063b2271 mov       %rdx,0x50(%rsp)
063b2276 jmp       0x0000`0000`063B`2290
063b2278 mov       0x60(%rsp),%rdx
063b227d mov       0x78(%rsp),%rcx
063b2282 lea       0x63C`E660,%r8
063b2289 call      0x0000`0000`063B`A050
063b228e ud2
063b2290 mov       0x50(%rsp),%r8
063b2295 mov       0x48(%rsp),%rdx
063b229a mov       0x58(%rsp),%rax
063b229f mov       %rdx,0xE8(%rsp)
063b22a7 mov       %r8,0xF0(%rsp)
063b22af movq      $0,(%rax)
063b22b6 lea       0xA0(%rsp),%rcx
063b22be call      0x0000`0000`063B`1800
063b22c3 lea       0xA0(%rsp),%rcx
063b22cb call      0x0000`0000`063B`0140
063b22d0 mov       %rax,0x38(%rsp)
063b22d5 mov       %rdx,0x40(%rsp)
063b22da mov       0x40(%rsp),%rdx
063b22df mov       0x38(%rsp),%rcx
063b22e4 call      0x0000`0000`063B`0F20
063b22e9 mov       %rdx,0x98(%rsp)
063b22f1 mov       %rax,0x90(%rsp)
063b22f9 mov       0x90(%rsp),%rax
063b2301 test      %rax,%rax
063b2304 sete      %al
063b2307 movzbl    %al,%eax
063b230a jne       0x0000`0000`063B`2312
063b230c jmp       0x0000`0000`063B`230E
063b230e jmp       0x0000`0000`063B`235B
063b2310 ud2
063b2312 mov       0x70(%rsp),%rax
063b2317 mov       0x90(%rsp),%rdx
063b231f mov       0x98(%rsp),%r8
063b2327 mov       %rdx,0xF8(%rsp)
063b232f mov       %r8,0x100(%rsp)
063b2337 mov       %rdx,0x108(%rsp)
063b233f mov       %r8,0x110(%rsp)
063b2347 mov       (%rax),%rcx
063b234a call      0x0000`0000`063B`1FF0
063b234f mov       %rax,0x28(%rsp)
063b2354 mov       %rdx,0x30(%rsp)
063b2359 jmp       0x0000`0000`063B`2384
063b235b lea       0x63C`E690,%rcx
063b2362 call      0x0000`0000`063B`A930
063b2367 and       $1,%al
063b2369 mov       %al,0x87(%rsp)
063b2370 mov       0x87(%rsp),%al
063b2377 and       $1,%al
063b2379 movzbl    %al,%eax
063b237c add       $0x118,%rsp
063b2383 ret
063b2384 mov       0x30(%rsp),%rdx
063b2389 mov       0x28(%rsp),%rcx
063b238e call      0x0000`0000`063B`0240
063b2393 and       $1,%al
063b2395 mov       %al,0x87(%rsp)
063b239c jmp       0x0000`0000`063B`2370

uefi::proto::console::text::output::impl$1::write_str::closure$0::closure$0:
063b23a0 sub       $0x18,%rsp
063b23a4 mov       %rcx,8(%rsp)
063b23a9 mov       %rdx,0x10(%rsp)
063b23ae add       $0x18,%rsp
063b23b2 ret

uefi::proto::console::text::output::impl$1::write_str::closure$0::closure$1:
063b23c0 sub       $0x10,%rsp
063b23c4 mov       %rcx,8(%rsp)
063b23c9 add       $0x10,%rsp
063b23cd ret

uefi::proto::console::text::output::impl$1::write_str::closure$1:
063b23d0 sub       $0x98,%rsp
063b23d7 mov       %dx,0x3E(%rsp)
063b23dc mov       %rcx,0x40(%rsp)
063b23e1 mov       %rcx,0x70(%rsp)
063b23e6 mov       0x70(%rsp),%rax
063b23eb mov       (%rax),%rax
063b23ee mov       %rax,0x78(%rsp)
063b23f3 mov       0x70(%rsp),%rax
063b23f8 mov       8(%rax),%rax
063b23fc mov       %rax,0x80(%rsp)
063b2404 mov       0x70(%rsp),%rax
063b2409 mov       0x10(%rax),%rax
063b240d mov       %rax,0x88(%rsp)
063b2415 mov       %dx,0x96(%rsp)
063b241d mov       8(%rcx),%rax
063b2421 mov       (%rax),%rax
063b2424 mov       %rax,0x48(%rsp)
063b2429 cmp       $0x81,%rax
063b242f setb      %al
063b2432 test      $1,%al
063b2434 jne       0x0000`0000`063B`2438
063b2436 jmp       0x0000`0000`063B`2469
063b2438 mov       0x40(%rsp),%rax
063b243d mov       0x48(%rsp),%rdx
063b2442 mov       0x3E(%rsp),%r8w
063b2448 mov       (%rax),%rcx
063b244b mov       %r8w,(%rcx,%rdx,2)
063b2450 mov       8(%rax),%rax
063b2454 mov       (%rax),%rax
063b2457 add       $1,%rax
063b245b mov       %rax,0x30(%rsp)
063b2460 setb      %al
063b2463 test      $1,%al
063b2465 jne       0x0000`0000`063B`24A1
063b2467 jmp       0x0000`0000`063B`2481
063b2469 mov       0x48(%rsp),%rcx
063b246e lea       0x63C`E6A8,%r8
063b2475 mov       $0x81,%edx
063b247a call      0x0000`0000`063B`A050
063b247f ud2
063b2481 mov       0x40(%rsp),%rax
063b2486 mov       0x30(%rsp),%rdx
063b248b mov       8(%rax),%rcx
063b248f mov       %rdx,(%rcx)
063b2492 mov       8(%rax),%rax
063b2496 cmpq      $0x80,(%rax)
063b249d je        0x0000`0000`063B`24C2
063b249f jmp       0x0000`0000`063B`24BB
063b24a1 lea       0x63C`DA50,%rcx
063b24a8 lea       0x63C`E6C0,%r8
063b24af mov       $0x1C,%edx
063b24b4 call      0x0000`0000`063B`9FF0
063b24b9 ud2
063b24bb movb      $2,0x57(%rsp)
063b24c0 jmp       0x0000`0000`063B`250D
063b24c2 mov       0x40(%rsp),%rax
063b24c7 mov       0x10(%rax),%rcx
063b24cb mov       (%rax),%rdx
063b24ce mov       8(%rax),%rax
063b24d2 mov       %rdx,0x58(%rsp)
063b24d7 movq      $0x81,0x60(%rsp)
063b24e0 mov       %rax,0x68(%rsp)
063b24e5 mov       0x58(%rsp),%rdx
063b24ea mov       0x60(%rsp),%r8
063b24ef mov       0x68(%rsp),%r9
063b24f4 call      0x0000`0000`063B`21D0
063b24f9 mov       %al,0x2F(%rsp)
063b24fd mov       0x2F(%rsp),%cl
063b2501 and       $1,%cl
063b2504 call      0x0000`0000`063B`01E0
063b2509 mov       %al,0x57(%rsp)
063b250d mov       0x57(%rsp),%al
063b2511 add       $0x98,%rsp
063b2518 ret

uefi::proto::console::text::output::impl$1::write_str::closure$1::closure$0:
063b2520 sub       $0x18,%rsp
063b2524 movb      $0,7(%rsp)
063b2529 mov       7(%rsp),%al
063b252d and       $1,%al
063b252f movzbl    %al,%eax
063b2532 add       $0x18,%rsp
063b2536 ret

uefi::proto::console::text::output::impl$1::write_str::closure$2:
063b2540 sub       $0x58,%rsp
063b2544 mov       %dx,0x26(%rsp)
063b2549 mov       %rcx,0x28(%rsp)
063b254e mov       %rcx,0x38(%rsp)
063b2553 mov       0x38(%rsp),%rax
063b2558 mov       (%rax),%rax
063b255b mov       %rax,0x40(%rsp)
063b2560 mov       %dx,0x4E(%rsp)
063b2565 cmp       $0xA,%dx
063b2569 je        0x0000`0000`063B`258D
063b256b mov       0x26(%rsp),%ax
063b2570 mov       0x28(%rsp),%rcx
063b2575 mov       (%rcx),%rcx
063b2578 mov       %ax,0x36(%rsp)
063b257d mov       0x36(%rsp),%dx
063b2582 call      0x0000`0000`063B`23D0
063b2587 mov       %al,0x32(%rsp)
063b258b jmp       0x0000`0000`063B`25EA
063b258d mov       0x28(%rsp),%rax
063b2592 mov       (%rax),%rcx
063b2595 movw      $0xD,0x34(%rsp)
063b259c mov       0x34(%rsp),%dx
063b25a1 call      0x0000`0000`063B`23D0
063b25a6 mov       %al,0x25(%rsp)
063b25aa mov       0x25(%rsp),%cl
063b25ae call      0x0000`0000`063C`C240
063b25b3 mov       %al,0x33(%rsp)
063b25b7 mov       0x33(%rsp),%al
063b25bb add       $0xFE,%al
063b25bd setne     %al
063b25c0 movzbl    %al,%eax
063b25c3 je        0x0000`0000`063B`256B
063b25c5 jmp       0x0000`0000`063B`25C7
063b25c7 jmp       0x0000`0000`063B`25CB
063b25c9 ud2
063b25cb mov       0x33(%rsp),%cl
063b25cf mov       %cl,%al
063b25d1 and       $1,%al
063b25d3 mov       %al,0x57(%rsp)
063b25d7 and       $1,%cl
063b25da lea       0x63C`E6D8,%rdx
063b25e1 call      0x0000`0000`063C`BFF0
063b25e6 mov       %al,0x32(%rsp)
063b25ea mov       0x32(%rsp),%al
063b25ee add       $0x58,%rsp
063b25f2 ret

uefi::proto::console::text::output::impl$1::write_str::closure$3:
063b2600 push      %rax
063b2601 and       $1,%cl
063b2604 mov       %cl,7(%rsp)
063b2608 pop       %rax
063b2609 ret

uefi::alloc::init:
063b2610 sub       $0x38,%rsp
063b2614 mov       %rcx,0x30(%rsp)
063b2619 call      0x0000`0000`063A`EA60
063b261e mov       %rax,0x28(%rsp)
063b2623 mov       0x28(%rsp),%rax
063b2628 mov       %rax,0x63D`3030
063b262f add       $0x38,%rsp
063b2633 ret

uefi::alloc::exit_boot_services:
063b2640 push      %rax
063b2641 movq      $0,(%rsp)
063b2649 mov       (%rsp),%rax
063b264d mov       %rax,0x63D`3030
063b2654 pop       %rax
063b2655 ret

uefi::logger::Logger::new:
063b2660 sub       $0x38,%rsp
063b2664 mov       %rcx,0x30(%rsp)
063b2669 call      0x0000`0000`063A`EA10
063b266e mov       %rax,0x20(%rsp)
063b2673 mov       0x20(%rsp),%rax
063b2678 mov       %rax,0x28(%rsp)
063b267d mov       0x28(%rsp),%rax
063b2682 add       $0x38,%rsp
063b2686 ret

uefi::logger::Logger::disable:
063b2690 sub       $0x10,%rsp
063b2694 mov       %rcx,8(%rsp)
063b2699 movq      $0,(%rsp)
063b26a1 mov       (%rsp),%rax
063b26a5 mov       %rax,(%rcx)
063b26a8 add       $0x10,%rsp
063b26ac ret

uefi::logger::impl$1::enabled:
063b26b0 sub       $0x38,%rsp
063b26b4 mov       %rcx,0x28(%rsp)
063b26b9 mov       %rdx,0x30(%rsp)
063b26be call      0x0000`0000`063A`FFE0
063b26c3 mov       %al,0x27(%rsp)
063b26c7 mov       0x27(%rsp),%al
063b26cb and       $1,%al
063b26cd movzbl    %al,%eax
063b26d0 add       $0x38,%rsp
063b26d4 ret

uefi::logger::impl$1::log:
063b26e0 sub       $0xB8,%rsp
063b26e7 mov       %rdx,%rax
063b26ea mov       %rax,0x80(%rsp)
063b26f2 mov       %rcx,%rdx
063b26f5 mov       %rdx,0x88(%rsp)
063b26fd mov       %rdx,0x98(%rsp)
063b2705 mov       %rax,0xA0(%rsp)
063b270d mov       $1,%eax
063b2712 xor       %ecx,%ecx
063b2714 cmpq      $0,(%rdx)
063b2718 cmove     %rcx,%rax
063b271c cmp       $1,%rax
063b2720 jne       0x0000`0000`063B`2749
063b2722 mov       0x88(%rsp),%rax
063b272a mov       (%rax),%rax
063b272d mov       %rax,0x90(%rsp)
063b2735 lea       0x90(%rsp),%rcx
063b273d call      0x0000`0000`063A`EAB0
063b2742 mov       %rax,0x78(%rsp)
063b2747 jmp       0x0000`0000`063B`2751
063b2749 add       $0xB8,%rsp
063b2750 ret
063b2751 mov       0x80(%rsp),%rcx
063b2759 mov       0x78(%rsp),%rax
063b275e mov       %rax,0xA8(%rsp)
063b2766 call      0x0000`0000`063A`E360
063b276b mov       %rax,0x70(%rsp)
063b2770 mov       0x80(%rsp),%rcx
063b2778 call      0x0000`0000`063A`E2C0
063b277d mov       %rax,0x68(%rsp)
063b2782 mov       0x80(%rsp),%rcx
063b278a call      0x0000`0000`063A`E2D0
063b278f mov       %rax,0x58(%rsp)
063b2794 mov       %rdx,0x60(%rsp)
063b2799 mov       0x60(%rsp),%rdx
063b279e mov       0x58(%rsp),%rcx
063b27a3 lea       0x63C`E6F4,%r8
063b27aa mov       $0xE,%r9d
063b27b0 call      0x0000`0000`063B`9720
063b27b5 mov       %rax,0x48(%rsp)
063b27ba mov       %rdx,0x50(%rsp)
063b27bf mov       0x80(%rsp),%rcx
063b27c7 call      0x0000`0000`063A`E350
063b27cc mov       %eax,0x40(%rsp)
063b27d0 mov       %edx,0x44(%rsp)
063b27d4 mov       0x44(%rsp),%edx
063b27d8 mov       0x40(%rsp),%ecx
063b27dc xor       %r8d,%r8d
063b27df call      0x0000`0000`063B`97C0
063b27e4 mov       %eax,0x3C(%rsp)
063b27e8 mov       0x3C(%rsp),%eax
063b27ec mov       0x50(%rsp),%r10
063b27f1 mov       0x48(%rsp),%r9
063b27f6 mov       0x68(%rsp),%r8
063b27fb mov       0x70(%rsp),%rdx
063b2800 mov       0x78(%rsp),%rcx
063b2805 mov       %r10,0x20(%rsp)
063b280a mov       %eax,0x28(%rsp)
063b280e call      0x0000`0000`063B`2850
063b2813 mov       %al,0x3B(%rsp)
063b2817 and       $1,%al
063b2819 mov       %al,0xB7(%rsp)
063b2820 mov       0x3B(%rsp),%cl
063b2824 and       $1,%cl
063b2827 lea       0x63C`E760,%rdx
063b282e call      0x0000`0000`063B`0080
063b2833 jmp       0x0000`0000`063B`2749

uefi::logger::impl$1::flush:
063b2840 push      %rax
063b2841 mov       %rcx,(%rsp)
063b2845 pop       %rax
063b2846 ret

uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output>::write<uefi::proto::console::text::output::Output>:
063b2850 sub       $0xD8,%rsp
063b2857 mov       %r8,0x30(%rsp)
063b285c mov       %rdx,%r8
063b285f mov       %rcx,%r10
063b2862 mov       0x30(%rsp),%rcx
063b2867 mov       0x108(%rsp),%eax
063b286e mov       0x100(%rsp),%rdx
063b2876 mov       %r10,0xB0(%rsp)
063b287e mov       %r8,0xB8(%rsp)
063b2886 mov       %rcx,0xC0(%rsp)
063b288e mov       %r9,0xC8(%rsp)
063b2896 mov       %rdx,0xD0(%rsp)
063b289e mov       %r10,0x48(%rsp)
063b28a3 mov       %r8,0x50(%rsp)
063b28a8 movb      $1,0x6C(%rsp)
063b28ad mov       %r9,0x58(%rsp)
063b28b2 mov       %rdx,0x60(%rsp)
063b28b7 mov       %eax,0x68(%rsp)
063b28bb call      0x0000`0000`063C`9A50
063b28c0 mov       %rax,0x38(%rsp)
063b28c5 mov       %rdx,0x40(%rsp)
063b28ca mov       0x40(%rsp),%rax
063b28cf mov       0x38(%rsp),%rcx
063b28d4 mov       %rcx,0xA0(%rsp)
063b28dc mov       %rax,0xA8(%rsp)
063b28e4 lea       0xA0(%rsp),%r9
063b28ec lea       0x70(%rsp),%rcx
063b28f1 lea       0x63C`E780,%rdx
063b28f8 mov       $2,%r8d
063b28fe movq      $1,0x20(%rsp)
063b2907 call      0x0000`0000`063A`E640
063b290c lea       0x48(%rsp),%rcx
063b2911 lea       0x70(%rsp),%rdx
063b2916 call      0x0000`0000`063A`E580
063b291b mov       %al,0x2F(%rsp)
063b291f mov       0x2F(%rsp),%al
063b2923 and       $1,%al
063b2925 movzbl    %al,%eax
063b2928 add       $0xD8,%rsp
063b292f ret

uefi::logger::impl$5::write_str<uefi::proto::console::text::output::Output>:
063b2930 sub       $0x408,%rsp
063b2937 mov       %r8,0xE8(%rsp)
063b293f mov       %rdx,0xF0(%rsp)
063b2947 mov       %rcx,0xF8(%rsp)
063b294f mov       %rcx,0x3B0(%rsp)
063b2957 mov       %rdx,0x3B8(%rsp)
063b295f mov       %r8,0x3C0(%rsp)
063b2967 lea       0x108(%rsp),%rcx
063b296f call      0x0000`0000`063A`F040
063b2974 lea       0x108(%rsp),%rcx
063b297c call      0x0000`0000`063B`0F80
063b2981 mov       %rax,0xD8(%rsp)
063b2989 mov       %rdx,0xE0(%rsp)
063b2991 mov       0xE0(%rsp),%rdx
063b2999 mov       0xD8(%rsp),%rcx
063b29a1 lea       0x63C`DB80,%r8
063b29a8 xor       %eax,%eax
063b29aa mov       %eax,%r9d
063b29ad call      0x0000`0000`063B`9720
063b29b2 mov       %rdx,0x158(%rsp)
063b29ba mov       %rax,0x150(%rsp)
063b29c2 mov       0xF8(%rsp),%rax
063b29ca testb     $1,0x24(%rax)
063b29ce jne       0x0000`0000`063B`2A05
063b29d0 mov       0xF8(%rsp),%rax
063b29d8 mov       (%rax),%rax
063b29db mov       %rax,0xC0(%rsp)
063b29e3 lea       0x150(%rsp),%rcx
063b29eb call      0x0000`0000`063C`9A80
063b29f0 mov       %rax,0xC8(%rsp)
063b29f8 mov       %rdx,0xD0(%rsp)
063b2a00 jmp       0x0000`0000`063B`2B9D
063b2a05 mov       0xF8(%rsp),%rcx
063b2a0d mov       (%rcx),%rax
063b2a10 mov       %rax,0xA8(%rsp)
063b2a18 add       $8,%rcx
063b2a1c call      0x0000`0000`063A`E3C0
063b2a21 mov       %rax,0xB0(%rsp)
063b2a29 mov       %rdx,0xB8(%rsp)
063b2a31 mov       0xF8(%rsp),%rcx
063b2a39 add       $0x10,%rcx
063b2a3d call      0x0000`0000`063C`9A80
063b2a42 mov       %rax,0x98(%rsp)
063b2a4a mov       %rdx,0xA0(%rsp)
063b2a52 mov       0xF8(%rsp),%rcx
063b2a5a add       $0x20,%rcx
063b2a5e call      0x0000`0000`063C`9A20
063b2a63 mov       %rax,0x88(%rsp)
063b2a6b mov       %rdx,0x90(%rsp)
063b2a73 mov       0x90(%rsp),%rax
063b2a7b mov       0x88(%rsp),%rcx
063b2a83 mov       0xA0(%rsp),%rdx
063b2a8b mov       0x98(%rsp),%r8
063b2a93 mov       0xB8(%rsp),%r9
063b2a9b mov       0xB0(%rsp),%r10
063b2aa3 mov       %r10,0x198(%rsp)
063b2aab mov       %r9,0x1A0(%rsp)
063b2ab3 mov       %r8,0x1A8(%rsp)
063b2abb mov       %rdx,0x1B0(%rsp)
063b2ac3 mov       %rcx,0x1B8(%rsp)
063b2acb mov       %rax,0x1C0(%rsp)
063b2ad3 lea       0x198(%rsp),%rax
063b2adb mov       %rax,0x80(%rsp)
063b2ae3 mov       0x80(%rsp),%r9
063b2aeb lea       0x168(%rsp),%rcx
063b2af3 lea       0x63C`E7A8,%rdx
063b2afa mov       $4,%r8d
063b2b00 lea       0x63C`E7E8,%rax
063b2b07 movq      $3,0x20(%rsp)
063b2b10 mov       %rax,0x28(%rsp)
063b2b15 movq      $3,0x30(%rsp)
063b2b1e call      0x0000`0000`063A`E5D0
063b2b23 mov       0xA8(%rsp),%rcx
063b2b2b lea       0x168(%rsp),%rdx
063b2b33 call      0x0000`0000`063A`E530
063b2b38 mov       %al,0x7F(%rsp)
063b2b3c mov       0x7F(%rsp),%cl
063b2b40 and       $1,%cl
063b2b43 call      0x0000`0000`063B`A8B0
063b2b48 and       $1,%al
063b2b4a mov       %al,0x167(%rsp)
063b2b51 movzbl    0x167(%rsp),%eax
063b2b59 test      $1,%al
063b2b5b je        0x0000`0000`063B`2B63
063b2b5d jmp       0x0000`0000`063B`2B5F
063b2b5f jmp       0x0000`0000`063B`2B74
063b2b61 ud2
063b2b63 mov       0xF8(%rsp),%rax
063b2b6b movb      $0,0x24(%rax)
063b2b6f jmp       0x0000`0000`063B`29D0
063b2b74 lea       0x63C`E890,%rcx
063b2b7b call      0x0000`0000`063B`A930
063b2b80 and       $1,%al
063b2b82 mov       %al,0x107(%rsp)
063b2b89 mov       0x107(%rsp),%al
063b2b90 and       $1,%al
063b2b92 movzbl    %al,%eax
063b2b95 add       $0x408,%rsp
063b2b9c ret
063b2b9d mov       0xD0(%rsp),%rax
063b2ba5 mov       0xC8(%rsp),%rcx
063b2bad mov       %rcx,0x200(%rsp)
063b2bb5 mov       %rax,0x208(%rsp)
063b2bbd lea       0x200(%rsp),%r9
063b2bc5 lea       0x1D0(%rsp),%rcx
063b2bcd lea       0x63C`E4D0,%rdx
063b2bd4 mov       $1,%r8d
063b2bda movq      $1,0x20(%rsp)
063b2be3 call      0x0000`0000`063A`E640
063b2be8 mov       0xC0(%rsp),%rcx
063b2bf0 lea       0x1D0(%rsp),%rdx
063b2bf8 call      0x0000`0000`063A`E530
063b2bfd mov       %al,0x7E(%rsp)
063b2c01 mov       0x7E(%rsp),%cl
063b2c05 and       $1,%cl
063b2c08 call      0x0000`0000`063B`A8B0
063b2c0d and       $1,%al
063b2c0f mov       %al,0x1CF(%rsp)
063b2c16 movzbl    0x1CF(%rsp),%eax
063b2c1e test      $1,%al
063b2c20 je        0x0000`0000`063B`2C28
063b2c22 jmp       0x0000`0000`063B`2C24
063b2c24 jmp       0x0000`0000`063B`2C5A
063b2c26 ud2
063b2c28 lea       0x258(%rsp),%rcx
063b2c30 lea       0x108(%rsp),%rdx
063b2c38 mov       $0x48,%r8d
063b2c3e call      0x0000`0000`063C`BD50
063b2c43 lea       0x210(%rsp),%rcx
063b2c4b lea       0x258(%rsp),%rdx
063b2c53 call      0x0000`0000`063B`0EB0
063b2c58 jmp       0x0000`0000`063B`2C74
063b2c5a lea       0x63C`E8A8,%rcx
063b2c61 call      0x0000`0000`063B`A930
063b2c66 and       $1,%al
063b2c68 mov       %al,0x107(%rsp)
063b2c6f jmp       0x0000`0000`063B`2B89
063b2c74 lea       0x2A0(%rsp),%rcx
063b2c7c lea       0x210(%rsp),%rdx
063b2c84 mov       $0x48,%r8d
063b2c8a call      0x0000`0000`063C`BD50
063b2c8f lea       0x2A0(%rsp),%rcx
063b2c97 call      0x0000`0000`063B`0F80
063b2c9c mov       %rdx,0x2F0(%rsp)
063b2ca4 mov       %rax,0x2E8(%rsp)
063b2cac mov       0x2E8(%rsp),%rax
063b2cb4 test      %rax,%rax
063b2cb7 setne     %al
063b2cba movzbl    %al,%eax
063b2cbd je        0x0000`0000`063B`2CC5
063b2cbf jmp       0x0000`0000`063B`2CC1
063b2cc1 jmp       0x0000`0000`063B`2CEF
063b2cc3 ud2
063b2cc5 mov       0xE8(%rsp),%rdx
063b2ccd mov       0xF0(%rsp),%rcx
063b2cd5 call      0x0000`0000`063A`EFC0
063b2cda mov       %rdx,0x370(%rsp)
063b2ce2 mov       %rax,0x368(%rsp)
063b2cea jmp       0x0000`0000`063B`2E03
063b2cef mov       0xF8(%rsp),%rcx
063b2cf7 mov       0x2E8(%rsp),%rdx
063b2cff mov       0x2F0(%rsp),%rax
063b2d07 mov       %rdx,0x2F8(%rsp)
063b2d0f mov       %rax,0x300(%rsp)
063b2d17 mov       (%rcx),%rax
063b2d1a mov       %rax,0x60(%rsp)
063b2d1f add       $8,%rcx
063b2d23 call      0x0000`0000`063A`E3C0
063b2d28 mov       %rax,0x68(%rsp)
063b2d2d mov       %rdx,0x70(%rsp)
063b2d32 lea       0x2F8(%rsp),%rcx
063b2d3a call      0x0000`0000`063C`9A80
063b2d3f mov       %rax,0x50(%rsp)
063b2d44 mov       %rdx,0x58(%rsp)
063b2d49 mov       0x58(%rsp),%rax
063b2d4e mov       0x50(%rsp),%rcx
063b2d53 mov       0x70(%rsp),%rdx
063b2d58 mov       0x68(%rsp),%r8
063b2d5d mov       %r8,0x340(%rsp)
063b2d65 mov       %rdx,0x348(%rsp)
063b2d6d mov       %rcx,0x350(%rsp)
063b2d75 mov       %rax,0x358(%rsp)
063b2d7d lea       0x340(%rsp),%r9
063b2d85 lea       0x310(%rsp),%rcx
063b2d8d lea       0x63C`E8C0,%rdx
063b2d94 mov       $2,%r8d
063b2d9a movq      $2,0x20(%rsp)
063b2da3 call      0x0000`0000`063A`E640
063b2da8 mov       0x60(%rsp),%rcx
063b2dad lea       0x310(%rsp),%rdx
063b2db5 call      0x0000`0000`063A`E530
063b2dba mov       %al,0x4F(%rsp)
063b2dbe mov       0x4F(%rsp),%cl
063b2dc2 and       $1,%cl
063b2dc5 call      0x0000`0000`063B`A8B0
063b2dca and       $1,%al
063b2dcc mov       %al,0x30F(%rsp)
063b2dd3 movzbl    0x30F(%rsp),%eax
063b2ddb test      $1,%al
063b2ddd je        0x0000`0000`063B`2C8F
063b2de3 jmp       0x0000`0000`063B`2DE5
063b2de5 jmp       0x0000`0000`063B`2DE9
063b2de7 ud2
063b2de9 lea       0x63C`E8E0,%rcx
063b2df0 call      0x0000`0000`063B`A930
063b2df5 and       $1,%al
063b2df7 mov       %al,0x107(%rsp)
063b2dfe jmp       0x0000`0000`063B`2B89
063b2e03 lea       0x368(%rsp),%rcx
063b2e0b call      0x0000`0000`063B`16F0
063b2e10 mov       %eax,0x364(%rsp)
063b2e17 mov       0x364(%rsp),%edx
063b2e1e sub       $0x11`0000,%edx
063b2e24 mov       $1,%eax
063b2e29 xor       %ecx,%ecx
063b2e2b cmp       $0,%edx
063b2e2e cmove     %rcx,%rax
063b2e32 cmp       $1,%rax
063b2e36 jne       0x0000`0000`063B`2E42
063b2e38 cmpl      $0xA,0x364(%rsp)
063b2e40 je        0x0000`0000`063B`2E4F
063b2e42 movb      $0,0x107(%rsp)
063b2e4a jmp       0x0000`0000`063B`2B89
063b2e4f mov       0xF8(%rsp),%rax
063b2e57 mov       (%rax),%rax
063b2e5a mov       %rax,0x40(%rsp)
063b2e5f lea       0x380(%rsp),%rcx
063b2e67 lea       0x63C`E8F8,%rdx
063b2e6e mov       $1,%r8d
063b2e74 lea       0x63C`DB80,%r9
063b2e7b xor       %eax,%eax
063b2e7d movq      $0,0x20(%rsp)
063b2e86 call      0x0000`0000`063A`E640
063b2e8b mov       0x40(%rsp),%rcx
063b2e90 lea       0x380(%rsp),%rdx
063b2e98 call      0x0000`0000`063A`E530
063b2e9d mov       %al,0x3F(%rsp)
063b2ea1 mov       0x3F(%rsp),%cl
063b2ea5 and       $1,%cl
063b2ea8 call      0x0000`0000`063B`A8B0
063b2ead and       $1,%al
063b2eaf mov       %al,0x37F(%rsp)
063b2eb6 movzbl    0x37F(%rsp),%eax
063b2ebe test      $1,%al
063b2ec0 je        0x0000`0000`063B`2EC8
063b2ec2 jmp       0x0000`0000`063B`2EC4
063b2ec4 jmp       0x0000`0000`063B`2ED9
063b2ec6 ud2
063b2ec8 mov       0xF8(%rsp),%rax
063b2ed0 movb      $1,0x24(%rax)
063b2ed4 jmp       0x0000`0000`063B`2E42
063b2ed9 lea       0x63C`E908,%rcx
063b2ee0 call      0x0000`0000`063B`A930
063b2ee5 and       $1,%al
063b2ee7 mov       %al,0x107(%rsp)
063b2eee jmp       0x0000`0000`063B`2B89

uefi::result::error::impl$3::fmt<tuple$<> >:
063b2f00 sub       $0x88,%rsp
063b2f07 mov       %rcx,0x30(%rsp)
063b2f0c mov       %rcx,0x60(%rsp)
063b2f11 mov       %rdx,0x68(%rsp)
063b2f16 mov       %rcx,0x70(%rsp)
063b2f1b mov       %rcx,0x38(%rsp)
063b2f20 mov       %rcx,0x78(%rsp)
063b2f25 lea       0x40(%rsp),%rcx
063b2f2a lea       0x63C`E920,%r8
063b2f31 mov       $5,%r9d
063b2f37 call      0x0000`0000`063C`0D50
063b2f3c mov       0x30(%rsp),%rax
063b2f41 lea       0x40(%rsp),%rcx
063b2f46 mov       %rcx,0x80(%rsp)
063b2f4e mov       %rax,0x50(%rsp)
063b2f53 lea       0x50(%rsp),%r9
063b2f58 lea       0x40(%rsp),%rcx
063b2f5d lea       0x63C`E925,%rdx
063b2f64 mov       $6,%r8d
063b2f6a lea       0x63C`E098,%rax
063b2f71 mov       %rax,0x20(%rsp)
063b2f76 call      0x0000`0000`063B`AE40
063b2f7b mov       0x38(%rsp),%rax
063b2f80 mov       %rax,0x58(%rsp)
063b2f85 lea       0x58(%rsp),%r9
063b2f8a lea       0x40(%rsp),%rcx
063b2f8f lea       0x63C`E6F0,%rdx
063b2f96 mov       $4,%r8d
063b2f9c lea       0x63C`E930,%rax
063b2fa3 mov       %rax,0x20(%rsp)
063b2fa8 call      0x0000`0000`063B`AE40
063b2fad lea       0x40(%rsp),%rcx
063b2fb2 call      0x0000`0000`063B`B270
063b2fb7 mov       %al,0x2F(%rsp)
063b2fbb mov       0x2F(%rsp),%al
063b2fbf and       $1,%al
063b2fc1 movzbl    %al,%eax
063b2fc4 add       $0x88,%rsp
063b2fcb ret

uefi::result::status::impl$8::fmt:
063b2fd0 sub       $0x888,%rsp
063b2fd7 mov       %rdx,0x50(%rsp)
063b2fdc mov       %rcx,0x58(%rsp)
063b2fe1 mov       %rcx,0x878(%rsp)
063b2fe9 mov       %rdx,0x880(%rsp)
063b2ff1 mov       (%rcx),%rax
063b2ff4 mov       %rax,0x60(%rsp)
063b2ff9 movabs    $0x8000`0000`0000`0001,%rcx
063b3003 sub       %rcx,%rax
063b3006 je        0x0000`0000`063B`3585
063b300c jmp       0x0000`0000`063B`300E
063b300e mov       0x60(%rsp),%rax
063b3013 movabs    $0x8000`0000`0000`0002,%rcx
063b301d sub       %rcx,%rax
063b3020 je        0x0000`0000`063B`35B6
063b3026 jmp       0x0000`0000`063B`3028
063b3028 mov       0x60(%rsp),%rax
063b302d movabs    $0x8000`0000`0000`0003,%rcx
063b3037 sub       %rcx,%rax
063b303a je        0x0000`0000`063B`35E7
063b3040 jmp       0x0000`0000`063B`3042
063b3042 mov       0x60(%rsp),%rax
063b3047 movabs    $0x8000`0000`0000`0004,%rcx
063b3051 sub       %rcx,%rax
063b3054 je        0x0000`0000`063B`3618
063b305a jmp       0x0000`0000`063B`305C
063b305c mov       0x60(%rsp),%rax
063b3061 movabs    $0x8000`0000`0000`0005,%rcx
063b306b sub       %rcx,%rax
063b306e je        0x0000`0000`063B`3649
063b3074 jmp       0x0000`0000`063B`3076
063b3076 mov       0x60(%rsp),%rax
063b307b movabs    $0x8000`0000`0000`0006,%rcx
063b3085 sub       %rcx,%rax
063b3088 je        0x0000`0000`063B`367A
063b308e jmp       0x0000`0000`063B`3090
063b3090 mov       0x60(%rsp),%rax
063b3095 movabs    $0x8000`0000`0000`0007,%rcx
063b309f sub       %rcx,%rax
063b30a2 je        0x0000`0000`063B`36AB
063b30a8 jmp       0x0000`0000`063B`30AA
063b30aa mov       0x60(%rsp),%rax
063b30af movabs    $0x8000`0000`0000`0008,%rcx
063b30b9 sub       %rcx,%rax
063b30bc je        0x0000`0000`063B`36DC
063b30c2 jmp       0x0000`0000`063B`30C4
063b30c4 mov       0x60(%rsp),%rax
063b30c9 movabs    $0x8000`0000`0000`0009,%rcx
063b30d3 sub       %rcx,%rax
063b30d6 je        0x0000`0000`063B`370D
063b30dc jmp       0x0000`0000`063B`30DE
063b30de mov       0x60(%rsp),%rax
063b30e3 movabs    $0x8000`0000`0000`000A,%rcx
063b30ed sub       %rcx,%rax
063b30f0 je        0x0000`0000`063B`373E
063b30f6 jmp       0x0000`0000`063B`30F8
063b30f8 mov       0x60(%rsp),%rax
063b30fd movabs    $0x8000`0000`0000`000B,%rcx
063b3107 sub       %rcx,%rax
063b310a je        0x0000`0000`063B`376F
063b3110 jmp       0x0000`0000`063B`3112
063b3112 mov       0x60(%rsp),%rax
063b3117 movabs    $0x8000`0000`0000`000C,%rcx
063b3121 sub       %rcx,%rax
063b3124 je        0x0000`0000`063B`37A0
063b312a jmp       0x0000`0000`063B`312C
063b312c mov       0x60(%rsp),%rax
063b3131 movabs    $0x8000`0000`0000`000D,%rcx
063b313b sub       %rcx,%rax
063b313e je        0x0000`0000`063B`37D1
063b3144 jmp       0x0000`0000`063B`3146
063b3146 mov       0x60(%rsp),%rax
063b314b movabs    $0x8000`0000`0000`000E,%rcx
063b3155 sub       %rcx,%rax
063b3158 je        0x0000`0000`063B`3802
063b315e jmp       0x0000`0000`063B`3160
063b3160 mov       0x60(%rsp),%rax
063b3165 movabs    $0x8000`0000`0000`000F,%rcx
063b316f sub       %rcx,%rax
063b3172 je        0x0000`0000`063B`3833
063b3178 jmp       0x0000`0000`063B`317A
063b317a mov       0x60(%rsp),%rax
063b317f movabs    $0x8000`0000`0000`0010,%rcx
063b3189 sub       %rcx,%rax
063b318c je        0x0000`0000`063B`3864
063b3192 jmp       0x0000`0000`063B`3194
063b3194 mov       0x60(%rsp),%rax
063b3199 movabs    $0x8000`0000`0000`0011,%rcx
063b31a3 sub       %rcx,%rax
063b31a6 je        0x0000`0000`063B`3895
063b31ac jmp       0x0000`0000`063B`31AE
063b31ae mov       0x60(%rsp),%rax
063b31b3 movabs    $0x8000`0000`0000`0012,%rcx
063b31bd sub       %rcx,%rax
063b31c0 je        0x0000`0000`063B`38C6
063b31c6 jmp       0x0000`0000`063B`31C8
063b31c8 mov       0x60(%rsp),%rax
063b31cd movabs    $0x8000`0000`0000`0013,%rcx
063b31d7 sub       %rcx,%rax
063b31da je        0x0000`0000`063B`38F7
063b31e0 jmp       0x0000`0000`063B`31E2
063b31e2 mov       0x60(%rsp),%rax
063b31e7 movabs    $0x8000`0000`0000`0014,%rcx
063b31f1 sub       %rcx,%rax
063b31f4 je        0x0000`0000`063B`3928
063b31fa jmp       0x0000`0000`063B`31FC
063b31fc mov       0x60(%rsp),%rax
063b3201 movabs    $0x8000`0000`0000`0015,%rcx
063b320b sub       %rcx,%rax
063b320e je        0x0000`0000`063B`3959
063b3214 jmp       0x0000`0000`063B`3216
063b3216 mov       0x60(%rsp),%rax
063b321b movabs    $0x8000`0000`0000`0016,%rcx
063b3225 sub       %rcx,%rax
063b3228 je        0x0000`0000`063B`398A
063b322e jmp       0x0000`0000`063B`3230
063b3230 mov       0x60(%rsp),%rax
063b3235 movabs    $0x8000`0000`0000`0017,%rcx
063b323f sub       %rcx,%rax
063b3242 je        0x0000`0000`063B`39BB
063b3248 jmp       0x0000`0000`063B`324A
063b324a mov       0x60(%rsp),%rax
063b324f movabs    $0x8000`0000`0000`0018,%rcx
063b3259 sub       %rcx,%rax
063b325c je        0x0000`0000`063B`39EC
063b3262 jmp       0x0000`0000`063B`3264
063b3264 mov       0x60(%rsp),%rax
063b3269 movabs    $0x8000`0000`0000`0019,%rcx
063b3273 sub       %rcx,%rax
063b3276 je        0x0000`0000`063B`3A1D
063b327c jmp       0x0000`0000`063B`327E
063b327e mov       0x60(%rsp),%rax
063b3283 movabs    $0x8000`0000`0000`001A,%rcx
063b328d sub       %rcx,%rax
063b3290 je        0x0000`0000`063B`3A4E
063b3296 jmp       0x0000`0000`063B`3298
063b3298 mov       0x60(%rsp),%rax
063b329d movabs    $0x8000`0000`0000`001B,%rcx
063b32a7 sub       %rcx,%rax
063b32aa je        0x0000`0000`063B`3A7F
063b32b0 jmp       0x0000`0000`063B`32B2
063b32b2 mov       0x60(%rsp),%rax
063b32b7 movabs    $0x8000`0000`0000`001C,%rcx
063b32c1 sub       %rcx,%rax
063b32c4 je        0x0000`0000`063B`3AB0
063b32ca jmp       0x0000`0000`063B`32CC
063b32cc mov       0x60(%rsp),%rax
063b32d1 movabs    $0x8000`0000`0000`001F,%rcx
063b32db sub       %rcx,%rax
063b32de je        0x0000`0000`063B`3AE1
063b32e4 jmp       0x0000`0000`063B`32E6
063b32e6 mov       0x60(%rsp),%rax
063b32eb movabs    $0x8000`0000`0000`0020,%rcx
063b32f5 sub       %rcx,%rax
063b32f8 je        0x0000`0000`063B`3B12
063b32fe jmp       0x0000`0000`063B`3300
063b3300 mov       0x60(%rsp),%rax
063b3305 movabs    $0x8000`0000`0000`0021,%rcx
063b330f sub       %rcx,%rax
063b3312 je        0x0000`0000`063B`3B43
063b3318 jmp       0x0000`0000`063B`331A
063b331a mov       0x60(%rsp),%rax
063b331f movabs    $0x8000`0000`0000`0022,%rcx
063b3329 sub       %rcx,%rax
063b332c je        0x0000`0000`063B`3B74
063b3332 jmp       0x0000`0000`063B`3334
063b3334 mov       0x60(%rsp),%rax
063b3339 movabs    $0x8000`0000`0000`0023,%rcx
063b3343 sub       %rcx,%rax
063b3346 je        0x0000`0000`063B`3BA5
063b334c jmp       0x0000`0000`063B`334E
063b334e mov       0x60(%rsp),%rax
063b3353 test      %rax,%rax
063b3356 je        0x0000`0000`063B`3400
063b335c jmp       0x0000`0000`063B`335E
063b335e mov       0x60(%rsp),%rax
063b3363 sub       $1,%rax
063b3367 je        0x0000`0000`063B`342E
063b336d jmp       0x0000`0000`063B`336F
063b336f mov       0x60(%rsp),%rax
063b3374 sub       $2,%rax
063b3378 je        0x0000`0000`063B`345F
063b337e jmp       0x0000`0000`063B`3380
063b3380 mov       0x60(%rsp),%rax
063b3385 sub       $3,%rax
063b3389 je        0x0000`0000`063B`3490
063b338f jmp       0x0000`0000`063B`3391
063b3391 mov       0x60(%rsp),%rax
063b3396 sub       $4,%rax
063b339a je        0x0000`0000`063B`34C1
063b33a0 jmp       0x0000`0000`063B`33A2
063b33a2 mov       0x60(%rsp),%rax
063b33a7 sub       $5,%rax
063b33ab je        0x0000`0000`063B`34F2
063b33b1 jmp       0x0000`0000`063B`33B3
063b33b3 mov       0x60(%rsp),%rax
063b33b8 sub       $6,%rax
063b33bc je        0x0000`0000`063B`3523
063b33c2 jmp       0x0000`0000`063B`33C4
063b33c4 mov       0x60(%rsp),%rax
063b33c9 sub       $7,%rax
063b33cd je        0x0000`0000`063B`3554
063b33d3 jmp       0x0000`0000`063B`33D5
063b33d5 mov       0x58(%rsp),%rax
063b33da mov       (%rax),%rax
063b33dd mov       %rax,0x820(%rsp)
063b33e5 lea       0x63C`E990,%rcx
063b33ec call      0x0000`0000`063C`9A80
063b33f1 mov       %rax,0x40(%rsp)
063b33f6 mov       %rdx,0x48(%rsp)
063b33fb jmp       0x0000`0000`063B`3BD6
063b3400 lea       0x70(%rsp),%rcx
063b3405 lea       0x63C`EED8,%rdx
063b340c mov       $1,%r8d
063b3412 lea       0x63C`DB80,%r9
063b3419 xor       %eax,%eax
063b341b movq      $0,0x20(%rsp)
063b3424 call      0x0000`0000`063A`E640
063b3429 jmp       0x0000`0000`063B`40F1
063b342e lea       0xA0(%rsp),%rcx
063b3436 lea       0x63C`EEC0,%rdx
063b343d mov       $1,%r8d
063b3443 lea       0x63C`DB80,%r9
063b344a xor       %eax,%eax
063b344c movq      $0,0x20(%rsp)
063b3455 call      0x0000`0000`063A`E640
063b345a jmp       0x0000`0000`063B`40D4
063b345f lea       0xD0(%rsp),%rcx
063b3467 lea       0x63C`EE98,%rdx
063b346e mov       $1,%r8d
063b3474 lea       0x63C`DB80,%r9
063b347b xor       %eax,%eax
063b347d movq      $0,0x20(%rsp)
063b3486 call      0x0000`0000`063A`E640
063b348b jmp       0x0000`0000`063B`40B7
063b3490 lea       0x100(%rsp),%rcx
063b3498 lea       0x63C`EE70,%rdx
063b349f mov       $1,%r8d
063b34a5 lea       0x63C`DB80,%r9
063b34ac xor       %eax,%eax
063b34ae movq      $0,0x20(%rsp)
063b34b7 call      0x0000`0000`063A`E640
063b34bc jmp       0x0000`0000`063B`409A
063b34c1 lea       0x130(%rsp),%rcx
063b34c9 lea       0x63C`EE48,%rdx
063b34d0 mov       $1,%r8d
063b34d6 lea       0x63C`DB80,%r9
063b34dd xor       %eax,%eax
063b34df movq      $0,0x20(%rsp)
063b34e8 call      0x0000`0000`063A`E640
063b34ed jmp       0x0000`0000`063B`407D
063b34f2 lea       0x160(%rsp),%rcx
063b34fa lea       0x63C`EE20,%rdx
063b3501 mov       $1,%r8d
063b3507 lea       0x63C`DB80,%r9
063b350e xor       %eax,%eax
063b3510 movq      $0,0x20(%rsp)
063b3519 call      0x0000`0000`063A`E640
063b351e jmp       0x0000`0000`063B`4060
063b3523 lea       0x190(%rsp),%rcx
063b352b lea       0x63C`EE00,%rdx
063b3532 mov       $1,%r8d
063b3538 lea       0x63C`DB80,%r9
063b353f xor       %eax,%eax
063b3541 movq      $0,0x20(%rsp)
063b354a call      0x0000`0000`063A`E640
063b354f jmp       0x0000`0000`063B`4043
063b3554 lea       0x1C0(%rsp),%rcx
063b355c lea       0x63C`EDE0,%rdx
063b3563 mov       $1,%r8d
063b3569 lea       0x63C`DB80,%r9
063b3570 xor       %eax,%eax
063b3572 movq      $0,0x20(%rsp)
063b357b call      0x0000`0000`063A`E640
063b3580 jmp       0x0000`0000`063B`4026
063b3585 lea       0x1F0(%rsp),%rcx
063b358d lea       0x63C`EDB8,%rdx
063b3594 mov       $1,%r8d
063b359a lea       0x63C`DB80,%r9
063b35a1 xor       %eax,%eax
063b35a3 movq      $0,0x20(%rsp)
063b35ac call      0x0000`0000`063A`E640
063b35b1 jmp       0x0000`0000`063B`4009
063b35b6 lea       0x220(%rsp),%rcx
063b35be lea       0x63C`ED98,%rdx
063b35c5 mov       $1,%r8d
063b35cb lea       0x63C`DB80,%r9
063b35d2 xor       %eax,%eax
063b35d4 movq      $0,0x20(%rsp)
063b35dd call      0x0000`0000`063A`E640
063b35e2 jmp       0x0000`0000`063B`3FEC
063b35e7 lea       0x250(%rsp),%rcx
063b35ef lea       0x63C`ED70,%rdx
063b35f6 mov       $1,%r8d
063b35fc lea       0x63C`DB80,%r9
063b3603 xor       %eax,%eax
063b3605 movq      $0,0x20(%rsp)
063b360e call      0x0000`0000`063A`E640
063b3613 jmp       0x0000`0000`063B`3FCF
063b3618 lea       0x280(%rsp),%rcx
063b3620 lea       0x63C`ED50,%rdx
063b3627 mov       $1,%r8d
063b362d lea       0x63C`DB80,%r9
063b3634 xor       %eax,%eax
063b3636 movq      $0,0x20(%rsp)
063b363f call      0x0000`0000`063A`E640
063b3644 jmp       0x0000`0000`063B`3FB2
063b3649 lea       0x2B0(%rsp),%rcx
063b3651 lea       0x63C`ED30,%rdx
063b3658 mov       $1,%r8d
063b365e lea       0x63C`DB80,%r9
063b3665 xor       %eax,%eax
063b3667 movq      $0,0x20(%rsp)
063b3670 call      0x0000`0000`063A`E640
063b3675 jmp       0x0000`0000`063B`3F95
063b367a lea       0x2E0(%rsp),%rcx
063b3682 lea       0x63C`ED10,%rdx
063b3689 mov       $1,%r8d
063b368f lea       0x63C`DB80,%r9
063b3696 xor       %eax,%eax
063b3698 movq      $0,0x20(%rsp)
063b36a1 call      0x0000`0000`063A`E640
063b36a6 jmp       0x0000`0000`063B`3F78
063b36ab lea       0x310(%rsp),%rcx
063b36b3 lea       0x63C`ECF0,%rdx
063b36ba mov       $1,%r8d
063b36c0 lea       0x63C`DB80,%r9
063b36c7 xor       %eax,%eax
063b36c9 movq      $0,0x20(%rsp)
063b36d2 call      0x0000`0000`063A`E640
063b36d7 jmp       0x0000`0000`063B`3F5B
063b36dc lea       0x340(%rsp),%rcx
063b36e4 lea       0x63C`ECD0,%rdx
063b36eb mov       $1,%r8d
063b36f1 lea       0x63C`DB80,%r9
063b36f8 xor       %eax,%eax
063b36fa movq      $0,0x20(%rsp)
063b3703 call      0x0000`0000`063A`E640
063b3708 jmp       0x0000`0000`063B`3F3E
063b370d lea       0x370(%rsp),%rcx
063b3715 lea       0x63C`ECB0,%rdx
063b371c mov       $1,%r8d
063b3722 lea       0x63C`DB80,%r9
063b3729 xor       %eax,%eax
063b372b movq      $0,0x20(%rsp)
063b3734 call      0x0000`0000`063A`E640
063b3739 jmp       0x0000`0000`063B`3F21
063b373e lea       0x3A0(%rsp),%rcx
063b3746 lea       0x63C`EC90,%rdx
063b374d mov       $1,%r8d
063b3753 lea       0x63C`DB80,%r9
063b375a xor       %eax,%eax
063b375c movq      $0,0x20(%rsp)
063b3765 call      0x0000`0000`063A`E640
063b376a jmp       0x0000`0000`063B`3F04
063b376f lea       0x3D0(%rsp),%rcx
063b3777 lea       0x63C`EC70,%rdx
063b377e mov       $1,%r8d
063b3784 lea       0x63C`DB80,%r9
063b378b xor       %eax,%eax
063b378d movq      $0,0x20(%rsp)
063b3796 call      0x0000`0000`063A`E640
063b379b jmp       0x0000`0000`063B`3EE7
063b37a0 lea       0x400(%rsp),%rcx
063b37a8 lea       0x63C`EC50,%rdx
063b37af mov       $1,%r8d
063b37b5 lea       0x63C`DB80,%r9
063b37bc xor       %eax,%eax
063b37be movq      $0,0x20(%rsp)
063b37c7 call      0x0000`0000`063A`E640
063b37cc jmp       0x0000`0000`063B`3ECA
063b37d1 lea       0x430(%rsp),%rcx
063b37d9 lea       0x63C`EC38,%rdx
063b37e0 mov       $1,%r8d
063b37e6 lea       0x63C`DB80,%r9
063b37ed xor       %eax,%eax
063b37ef movq      $0,0x20(%rsp)
063b37f8 call      0x0000`0000`063A`E640
063b37fd jmp       0x0000`0000`063B`3EAD
063b3802 lea       0x460(%rsp),%rcx
063b380a lea       0x63C`EC18,%rdx
063b3811 mov       $1,%r8d
063b3817 lea       0x63C`DB80,%r9
063b381e xor       %eax,%eax
063b3820 movq      $0,0x20(%rsp)
063b3829 call      0x0000`0000`063A`E640
063b382e jmp       0x0000`0000`063B`3E90
063b3833 lea       0x490(%rsp),%rcx
063b383b lea       0x63C`EBF8,%rdx
063b3842 mov       $1,%r8d
063b3848 lea       0x63C`DB80,%r9
063b384f xor       %eax,%eax
063b3851 movq      $0,0x20(%rsp)
063b385a call      0x0000`0000`063A`E640
063b385f jmp       0x0000`0000`063B`3E73
063b3864 lea       0x4C0(%rsp),%rcx
063b386c lea       0x63C`EBD8,%rdx
063b3873 mov       $1,%r8d
063b3879 lea       0x63C`DB80,%r9
063b3880 xor       %eax,%eax
063b3882 movq      $0,0x20(%rsp)
063b388b call      0x0000`0000`063A`E640
063b3890 jmp       0x0000`0000`063B`3E56
063b3895 lea       0x4F0(%rsp),%rcx
063b389d lea       0x63C`EBB8,%rdx
063b38a4 mov       $1,%r8d
063b38aa lea       0x63C`DB80,%r9
063b38b1 xor       %eax,%eax
063b38b3 movq      $0,0x20(%rsp)
063b38bc call      0x0000`0000`063A`E640
063b38c1 jmp       0x0000`0000`063B`3E39
063b38c6 lea       0x520(%rsp),%rcx
063b38ce lea       0x63C`EB98,%rdx
063b38d5 mov       $1,%r8d
063b38db lea       0x63C`DB80,%r9
063b38e2 xor       %eax,%eax
063b38e4 movq      $0,0x20(%rsp)
063b38ed call      0x0000`0000`063A`E640
063b38f2 jmp       0x0000`0000`063B`3E1C
063b38f7 lea       0x550(%rsp),%rcx
063b38ff lea       0x63C`EB80,%rdx
063b3906 mov       $1,%r8d
063b390c lea       0x63C`DB80,%r9
063b3913 xor       %eax,%eax
063b3915 movq      $0,0x20(%rsp)
063b391e call      0x0000`0000`063A`E640
063b3923 jmp       0x0000`0000`063B`3DFF
063b3928 lea       0x580(%rsp),%rcx
063b3930 lea       0x63C`EB60,%rdx
063b3937 mov       $1,%r8d
063b393d lea       0x63C`DB80,%r9
063b3944 xor       %eax,%eax
063b3946 movq      $0,0x20(%rsp)
063b394f call      0x0000`0000`063A`E640
063b3954 jmp       0x0000`0000`063B`3DE2
063b3959 lea       0x5B0(%rsp),%rcx
063b3961 lea       0x63C`EB40,%rdx
063b3968 mov       $1,%r8d
063b396e lea       0x63C`DB80,%r9
063b3975 xor       %eax,%eax
063b3977 movq      $0,0x20(%rsp)
063b3980 call      0x0000`0000`063A`E640
063b3985 jmp       0x0000`0000`063B`3DC5
063b398a lea       0x5E0(%rsp),%rcx
063b3992 lea       0x63C`EB28,%rdx
063b3999 mov       $1,%r8d
063b399f lea       0x63C`DB80,%r9
063b39a6 xor       %eax,%eax
063b39a8 movq      $0,0x20(%rsp)
063b39b1 call      0x0000`0000`063A`E640
063b39b6 jmp       0x0000`0000`063B`3DA8
063b39bb lea       0x610(%rsp),%rcx
063b39c3 lea       0x63C`EB08,%rdx
063b39ca mov       $1,%r8d
063b39d0 lea       0x63C`DB80,%r9
063b39d7 xor       %eax,%eax
063b39d9 movq      $0,0x20(%rsp)
063b39e2 call      0x0000`0000`063A`E640
063b39e7 jmp       0x0000`0000`063B`3D8B
063b39ec lea       0x640(%rsp),%rcx
063b39f4 lea       0x63C`EAE8,%rdx
063b39fb mov       $1,%r8d
063b3a01 lea       0x63C`DB80,%r9
063b3a08 xor       %eax,%eax
063b3a0a movq      $0,0x20(%rsp)
063b3a13 call      0x0000`0000`063A`E640
063b3a18 jmp       0x0000`0000`063B`3D6E
063b3a1d lea       0x670(%rsp),%rcx
063b3a25 lea       0x63C`EAC8,%rdx
063b3a2c mov       $1,%r8d
063b3a32 lea       0x63C`DB80,%r9
063b3a39 xor       %eax,%eax
063b3a3b movq      $0,0x20(%rsp)
063b3a44 call      0x0000`0000`063A`E640
063b3a49 jmp       0x0000`0000`063B`3D51
063b3a4e lea       0x6A0(%rsp),%rcx
063b3a56 lea       0x63C`EAA0,%rdx
063b3a5d mov       $1,%r8d
063b3a63 lea       0x63C`DB80,%r9
063b3a6a xor       %eax,%eax
063b3a6c movq      $0,0x20(%rsp)
063b3a75 call      0x0000`0000`063A`E640
063b3a7a jmp       0x0000`0000`063B`3D34
063b3a7f lea       0x6D0(%rsp),%rcx
063b3a87 lea       0x63C`EA78,%rdx
063b3a8e mov       $1,%r8d
063b3a94 lea       0x63C`DB80,%r9
063b3a9b xor       %eax,%eax
063b3a9d movq      $0,0x20(%rsp)
063b3aa6 call      0x0000`0000`063A`E640
063b3aab jmp       0x0000`0000`063B`3D17
063b3ab0 lea       0x700(%rsp),%rcx
063b3ab8 lea       0x63C`EA58,%rdx
063b3abf mov       $1,%r8d
063b3ac5 lea       0x63C`DB80,%r9
063b3acc xor       %eax,%eax
063b3ace movq      $0,0x20(%rsp)
063b3ad7 call      0x0000`0000`063A`E640
063b3adc jmp       0x0000`0000`063B`3CFA
063b3ae1 lea       0x730(%rsp),%rcx
063b3ae9 lea       0x63C`EA38,%rdx
063b3af0 mov       $1,%r8d
063b3af6 lea       0x63C`DB80,%r9
063b3afd xor       %eax,%eax
063b3aff movq      $0,0x20(%rsp)
063b3b08 call      0x0000`0000`063A`E640
063b3b0d jmp       0x0000`0000`063B`3CDD
063b3b12 lea       0x760(%rsp),%rcx
063b3b1a lea       0x63C`EA18,%rdx
063b3b21 mov       $1,%r8d
063b3b27 lea       0x63C`DB80,%r9
063b3b2e xor       %eax,%eax
063b3b30 movq      $0,0x20(%rsp)
063b3b39 call      0x0000`0000`063A`E640
063b3b3e jmp       0x0000`0000`063B`3CC3
063b3b43 lea       0x790(%rsp),%rcx
063b3b4b lea       0x63C`E9F8,%rdx
063b3b52 mov       $1,%r8d
063b3b58 lea       0x63C`DB80,%r9
063b3b5f xor       %eax,%eax
063b3b61 movq      $0,0x20(%rsp)
063b3b6a call      0x0000`0000`063A`E640
063b3b6f jmp       0x0000`0000`063B`3CA9
063b3b74 lea       0x7C0(%rsp),%rcx
063b3b7c lea       0x63C`E9D8,%rdx
063b3b83 mov       $1,%r8d
063b3b89 lea       0x63C`DB80,%r9
063b3b90 xor       %eax,%eax
063b3b92 movq      $0,0x20(%rsp)
063b3b9b call      0x0000`0000`063A`E640
063b3ba0 jmp       0x0000`0000`063B`3C8F
063b3ba5 lea       0x7F0(%rsp),%rcx
063b3bad lea       0x63C`E9B0,%rdx
063b3bb4 mov       $1,%r8d
063b3bba lea       0x63C`DB80,%r9
063b3bc1 xor       %eax,%eax
063b3bc3 movq      $0,0x20(%rsp)
063b3bcc call      0x0000`0000`063A`E640
063b3bd1 jmp       0x0000`0000`063B`3C75
063b3bd6 lea       0x820(%rsp),%rcx
063b3bde call      0x0000`0000`063C`9990
063b3be3 mov       %rax,0x30(%rsp)
063b3be8 mov       %rdx,0x38(%rsp)
063b3bed mov       0x38(%rsp),%rax
063b3bf2 mov       0x30(%rsp),%rcx
063b3bf7 mov       0x48(%rsp),%rdx
063b3bfc mov       0x40(%rsp),%r8
063b3c01 mov       %r8,0x858(%rsp)
063b3c09 mov       %rdx,0x860(%rsp)
063b3c11 mov       %rcx,0x868(%rsp)
063b3c19 mov       %rax,0x870(%rsp)
063b3c21 lea       0x858(%rsp),%r9
063b3c29 lea       0x828(%rsp),%rcx
063b3c31 lea       0x63C`E958,%rdx
063b3c38 mov       $3,%r8d
063b3c3e movq      $2,0x20(%rsp)
063b3c47 call      0x0000`0000`063A`E640
063b3c4c mov       0x50(%rsp),%rcx
063b3c51 lea       0x828(%rsp),%rdx
063b3c59 call      0x0000`0000`063C`0C50
063b3c5e and       $1,%al
063b3c60 mov       %al,0x6F(%rsp)
063b3c64 mov       0x6F(%rsp),%al
063b3c68 and       $1,%al
063b3c6a movzbl    %al,%eax
063b3c6d add       $0x888,%rsp
063b3c74 ret
063b3c75 mov       0x50(%rsp),%rcx
063b3c7a lea       0x7F0(%rsp),%rdx
063b3c82 call      0x0000`0000`063C`0C50
063b3c87 and       $1,%al
063b3c89 mov       %al,0x6F(%rsp)
063b3c8d jmp       0x0000`0000`063B`3C64
063b3c8f mov       0x50(%rsp),%rcx
063b3c94 lea       0x7C0(%rsp),%rdx
063b3c9c call      0x0000`0000`063C`0C50
063b3ca1 and       $1,%al
063b3ca3 mov       %al,0x6F(%rsp)
063b3ca7 jmp       0x0000`0000`063B`3C64
063b3ca9 mov       0x50(%rsp),%rcx
063b3cae lea       0x790(%rsp),%rdx
063b3cb6 call      0x0000`0000`063C`0C50
063b3cbb and       $1,%al
063b3cbd mov       %al,0x6F(%rsp)
063b3cc1 jmp       0x0000`0000`063B`3C64
063b3cc3 mov       0x50(%rsp),%rcx
063b3cc8 lea       0x760(%rsp),%rdx
063b3cd0 call      0x0000`0000`063C`0C50
063b3cd5 and       $1,%al
063b3cd7 mov       %al,0x6F(%rsp)
063b3cdb jmp       0x0000`0000`063B`3C64
063b3cdd mov       0x50(%rsp),%rcx
063b3ce2 lea       0x730(%rsp),%rdx
063b3cea call      0x0000`0000`063C`0C50
063b3cef and       $1,%al
063b3cf1 mov       %al,0x6F(%rsp)
063b3cf5 jmp       0x0000`0000`063B`3C64
063b3cfa mov       0x50(%rsp),%rcx
063b3cff lea       0x700(%rsp),%rdx
063b3d07 call      0x0000`0000`063C`0C50
063b3d0c and       $1,%al
063b3d0e mov       %al,0x6F(%rsp)
063b3d12 jmp       0x0000`0000`063B`3C64
063b3d17 mov       0x50(%rsp),%rcx
063b3d1c lea       0x6D0(%rsp),%rdx
063b3d24 call      0x0000`0000`063C`0C50
063b3d29 and       $1,%al
063b3d2b mov       %al,0x6F(%rsp)
063b3d2f jmp       0x0000`0000`063B`3C64
063b3d34 mov       0x50(%rsp),%rcx
063b3d39 lea       0x6A0(%rsp),%rdx
063b3d41 call      0x0000`0000`063C`0C50
063b3d46 and       $1,%al
063b3d48 mov       %al,0x6F(%rsp)
063b3d4c jmp       0x0000`0000`063B`3C64
063b3d51 mov       0x50(%rsp),%rcx
063b3d56 lea       0x670(%rsp),%rdx
063b3d5e call      0x0000`0000`063C`0C50
063b3d63 and       $1,%al
063b3d65 mov       %al,0x6F(%rsp)
063b3d69 jmp       0x0000`0000`063B`3C64
063b3d6e mov       0x50(%rsp),%rcx
063b3d73 lea       0x640(%rsp),%rdx
063b3d7b call      0x0000`0000`063C`0C50
063b3d80 and       $1,%al
063b3d82 mov       %al,0x6F(%rsp)
063b3d86 jmp       0x0000`0000`063B`3C64
063b3d8b mov       0x50(%rsp),%rcx
063b3d90 lea       0x610(%rsp),%rdx
063b3d98 call      0x0000`0000`063C`0C50
063b3d9d and       $1,%al
063b3d9f mov       %al,0x6F(%rsp)
063b3da3 jmp       0x0000`0000`063B`3C64
063b3da8 mov       0x50(%rsp),%rcx
063b3dad lea       0x5E0(%rsp),%rdx
063b3db5 call      0x0000`0000`063C`0C50
063b3dba and       $1,%al
063b3dbc mov       %al,0x6F(%rsp)
063b3dc0 jmp       0x0000`0000`063B`3C64
063b3dc5 mov       0x50(%rsp),%rcx
063b3dca lea       0x5B0(%rsp),%rdx
063b3dd2 call      0x0000`0000`063C`0C50
063b3dd7 and       $1,%al
063b3dd9 mov       %al,0x6F(%rsp)
063b3ddd jmp       0x0000`0000`063B`3C64
063b3de2 mov       0x50(%rsp),%rcx
063b3de7 lea       0x580(%rsp),%rdx
063b3def call      0x0000`0000`063C`0C50
063b3df4 and       $1,%al
063b3df6 mov       %al,0x6F(%rsp)
063b3dfa jmp       0x0000`0000`063B`3C64
063b3dff mov       0x50(%rsp),%rcx
063b3e04 lea       0x550(%rsp),%rdx
063b3e0c call      0x0000`0000`063C`0C50
063b3e11 and       $1,%al
063b3e13 mov       %al,0x6F(%rsp)
063b3e17 jmp       0x0000`0000`063B`3C64
063b3e1c mov       0x50(%rsp),%rcx
063b3e21 lea       0x520(%rsp),%rdx
063b3e29 call      0x0000`0000`063C`0C50
063b3e2e and       $1,%al
063b3e30 mov       %al,0x6F(%rsp)
063b3e34 jmp       0x0000`0000`063B`3C64
063b3e39 mov       0x50(%rsp),%rcx
063b3e3e lea       0x4F0(%rsp),%rdx
063b3e46 call      0x0000`0000`063C`0C50
063b3e4b and       $1,%al
063b3e4d mov       %al,0x6F(%rsp)
063b3e51 jmp       0x0000`0000`063B`3C64
063b3e56 mov       0x50(%rsp),%rcx
063b3e5b lea       0x4C0(%rsp),%rdx
063b3e63 call      0x0000`0000`063C`0C50
063b3e68 and       $1,%al
063b3e6a mov       %al,0x6F(%rsp)
063b3e6e jmp       0x0000`0000`063B`3C64
063b3e73 mov       0x50(%rsp),%rcx
063b3e78 lea       0x490(%rsp),%rdx
063b3e80 call      0x0000`0000`063C`0C50
063b3e85 and       $1,%al
063b3e87 mov       %al,0x6F(%rsp)
063b3e8b jmp       0x0000`0000`063B`3C64
063b3e90 mov       0x50(%rsp),%rcx
063b3e95 lea       0x460(%rsp),%rdx
063b3e9d call      0x0000`0000`063C`0C50
063b3ea2 and       $1,%al
063b3ea4 mov       %al,0x6F(%rsp)
063b3ea8 jmp       0x0000`0000`063B`3C64
063b3ead mov       0x50(%rsp),%rcx
063b3eb2 lea       0x430(%rsp),%rdx
063b3eba call      0x0000`0000`063C`0C50
063b3ebf and       $1,%al
063b3ec1 mov       %al,0x6F(%rsp)
063b3ec5 jmp       0x0000`0000`063B`3C64
063b3eca mov       0x50(%rsp),%rcx
063b3ecf lea       0x400(%rsp),%rdx
063b3ed7 call      0x0000`0000`063C`0C50
063b3edc and       $1,%al
063b3ede mov       %al,0x6F(%rsp)
063b3ee2 jmp       0x0000`0000`063B`3C64
063b3ee7 mov       0x50(%rsp),%rcx
063b3eec lea       0x3D0(%rsp),%rdx
063b3ef4 call      0x0000`0000`063C`0C50
063b3ef9 and       $1,%al
063b3efb mov       %al,0x6F(%rsp)
063b3eff jmp       0x0000`0000`063B`3C64
063b3f04 mov       0x50(%rsp),%rcx
063b3f09 lea       0x3A0(%rsp),%rdx
063b3f11 call      0x0000`0000`063C`0C50
063b3f16 and       $1,%al
063b3f18 mov       %al,0x6F(%rsp)
063b3f1c jmp       0x0000`0000`063B`3C64
063b3f21 mov       0x50(%rsp),%rcx
063b3f26 lea       0x370(%rsp),%rdx
063b3f2e call      0x0000`0000`063C`0C50
063b3f33 and       $1,%al
063b3f35 mov       %al,0x6F(%rsp)
063b3f39 jmp       0x0000`0000`063B`3C64
063b3f3e mov       0x50(%rsp),%rcx
063b3f43 lea       0x340(%rsp),%rdx
063b3f4b call      0x0000`0000`063C`0C50
063b3f50 and       $1,%al
063b3f52 mov       %al,0x6F(%rsp)
063b3f56 jmp       0x0000`0000`063B`3C64
063b3f5b mov       0x50(%rsp),%rcx
063b3f60 lea       0x310(%rsp),%rdx
063b3f68 call      0x0000`0000`063C`0C50
063b3f6d and       $1,%al
063b3f6f mov       %al,0x6F(%rsp)
063b3f73 jmp       0x0000`0000`063B`3C64
063b3f78 mov       0x50(%rsp),%rcx
063b3f7d lea       0x2E0(%rsp),%rdx
063b3f85 call      0x0000`0000`063C`0C50
063b3f8a and       $1,%al
063b3f8c mov       %al,0x6F(%rsp)
063b3f90 jmp       0x0000`0000`063B`3C64
063b3f95 mov       0x50(%rsp),%rcx
063b3f9a lea       0x2B0(%rsp),%rdx
063b3fa2 call      0x0000`0000`063C`0C50
063b3fa7 and       $1,%al
063b3fa9 mov       %al,0x6F(%rsp)
063b3fad jmp       0x0000`0000`063B`3C64
063b3fb2 mov       0x50(%rsp),%rcx
063b3fb7 lea       0x280(%rsp),%rdx
063b3fbf call      0x0000`0000`063C`0C50
063b3fc4 and       $1,%al
063b3fc6 mov       %al,0x6F(%rsp)
063b3fca jmp       0x0000`0000`063B`3C64
063b3fcf mov       0x50(%rsp),%rcx
063b3fd4 lea       0x250(%rsp),%rdx
063b3fdc call      0x0000`0000`063C`0C50
063b3fe1 and       $1,%al
063b3fe3 mov       %al,0x6F(%rsp)
063b3fe7 jmp       0x0000`0000`063B`3C64
063b3fec mov       0x50(%rsp),%rcx
063b3ff1 lea       0x220(%rsp),%rdx
063b3ff9 call      0x0000`0000`063C`0C50
063b3ffe and       $1,%al
063b4000 mov       %al,0x6F(%rsp)
063b4004 jmp       0x0000`0000`063B`3C64
063b4009 mov       0x50(%rsp),%rcx
063b400e lea       0x1F0(%rsp),%rdx
063b4016 call      0x0000`0000`063C`0C50
063b401b and       $1,%al
063b401d mov       %al,0x6F(%rsp)
063b4021 jmp       0x0000`0000`063B`3C64
063b4026 mov       0x50(%rsp),%rcx
063b402b lea       0x1C0(%rsp),%rdx
063b4033 call      0x0000`0000`063C`0C50
063b4038 and       $1,%al
063b403a mov       %al,0x6F(%rsp)
063b403e jmp       0x0000`0000`063B`3C64
063b4043 mov       0x50(%rsp),%rcx
063b4048 lea       0x190(%rsp),%rdx
063b4050 call      0x0000`0000`063C`0C50
063b4055 and       $1,%al
063b4057 mov       %al,0x6F(%rsp)
063b405b jmp       0x0000`0000`063B`3C64
063b4060 mov       0x50(%rsp),%rcx
063b4065 lea       0x160(%rsp),%rdx
063b406d call      0x0000`0000`063C`0C50
063b4072 and       $1,%al
063b4074 mov       %al,0x6F(%rsp)
063b4078 jmp       0x0000`0000`063B`3C64
063b407d mov       0x50(%rsp),%rcx
063b4082 lea       0x130(%rsp),%rdx
063b408a call      0x0000`0000`063C`0C50
063b408f and       $1,%al
063b4091 mov       %al,0x6F(%rsp)
063b4095 jmp       0x0000`0000`063B`3C64
063b409a mov       0x50(%rsp),%rcx
063b409f lea       0x100(%rsp),%rdx
063b40a7 call      0x0000`0000`063C`0C50
063b40ac and       $1,%al
063b40ae mov       %al,0x6F(%rsp)
063b40b2 jmp       0x0000`0000`063B`3C64
063b40b7 mov       0x50(%rsp),%rcx
063b40bc lea       0xD0(%rsp),%rdx
063b40c4 call      0x0000`0000`063C`0C50
063b40c9 and       $1,%al
063b40cb mov       %al,0x6F(%rsp)
063b40cf jmp       0x0000`0000`063B`3C64
063b40d4 mov       0x50(%rsp),%rcx
063b40d9 lea       0xA0(%rsp),%rdx
063b40e1 call      0x0000`0000`063C`0C50
063b40e6 and       $1,%al
063b40e8 mov       %al,0x6F(%rsp)
063b40ec jmp       0x0000`0000`063B`3C64
063b40f1 mov       0x50(%rsp),%rcx
063b40f6 lea       0x70(%rsp),%rdx
063b40fb call      0x0000`0000`063C`0C50
063b4100 and       $1,%al
063b4102 mov       %al,0x6F(%rsp)
063b4106 jmp       0x0000`0000`063B`3C64

uefi::result::status::impl$14::eq:
063b4110 sub       $0x20,%rsp
063b4114 mov       %rcx,(%rsp)
063b4118 mov       %rdx,8(%rsp)
063b411d mov       %rdx,0x10(%rsp)
063b4122 mov       %rcx,0x18(%rsp)
063b4127 mov       (%rcx),%rax
063b412a cmp       (%rdx),%rax
063b412d sete      %al
063b4130 and       $1,%al
063b4132 movzbl    %al,%eax
063b4135 add       $0x20,%rsp
063b4139 ret

core::fmt::Arguments::new_v1:
063b4140 sub       $0xC8,%rsp
063b4147 mov       %r9,0x30(%rsp)
063b414c mov       %r8,0x38(%rsp)
063b4151 mov       %rdx,0x40(%rsp)
063b4156 mov       %rcx,0x48(%rsp)
063b415b mov       %rcx,0x50(%rsp)
063b4160 mov       0xF0(%rsp),%rax
063b4168 mov       %rax,0x58(%rsp)
063b416d mov       %rdx,0xA8(%rsp)
063b4175 mov       %r8,0xB0(%rsp)
063b417d mov       %r9,0xB8(%rsp)
063b4185 mov       %rax,0xC0(%rsp)
063b418d cmp       %rax,%r8
063b4190 jb        0x0000`0000`063B`41A9
063b4192 mov       0x58(%rsp),%rax
063b4197 add       $1,%rax
063b419b mov       %rax,0x28(%rsp)
063b41a0 setb      %al
063b41a3 test      $1,%al
063b41a5 jne       0x0000`0000`063B`41D3
063b41a7 jmp       0x0000`0000`063B`41BB
063b41a9 movb      $1,0x67(%rsp)
063b41ae testb     $1,0x67(%rsp)
063b41b3 jne       0x0000`0000`063B`4246
063b41b9 jmp       0x0000`0000`063B`41ED
063b41bb mov       0x38(%rsp),%rax
063b41c0 mov       0x28(%rsp),%rcx
063b41c5 cmp       %rcx,%rax
063b41c8 seta      %al
063b41cb and       $1,%al
063b41cd mov       %al,0x67(%rsp)
063b41d1 jmp       0x0000`0000`063B`41AE
063b41d3 lea       0x63C`EEF0,%rcx
063b41da lea       0x63C`EF88,%r8
063b41e1 mov       $0x1C,%edx
063b41e6 call      0x0000`0000`063B`9FF0
063b41eb ud2
063b41ed mov       0x50(%rsp),%rax
063b41f2 mov       0x48(%rsp),%rcx
063b41f7 mov       0x58(%rsp),%rdx
063b41fc mov       0x30(%rsp),%r8
063b4201 mov       0x38(%rsp),%r9
063b4206 mov       0x40(%rsp),%r10
063b420b movq      $0,0x98(%rsp)
063b4217 mov       %r10,(%rcx)
063b421a mov       %r9,8(%rcx)
063b421e mov       0x98(%rsp),%r10
063b4226 mov       0xA0(%rsp),%r9
063b422e mov       %r10,0x10(%rcx)
063b4232 mov       %r9,0x18(%rcx)
063b4236 mov       %r8,0x20(%rcx)
063b423a mov       %rdx,0x28(%rcx)
063b423e add       $0xC8,%rsp
063b4245 ret
063b4246 lea       0x68(%rsp),%rcx
063b424b lea       0x63C`EFB0,%rdx
063b4252 mov       $1,%r8d
063b4258 lea       0x63C`EFC0,%r9
063b425f xor       %eax,%eax
063b4261 movq      $0,0x20(%rsp)
063b426a call      0x0000`0000`063B`4140
063b426f lea       0x63C`EFC0,%rdx
063b4276 lea       0x68(%rsp),%rcx
063b427b call      0x0000`0000`063B`A100
063b4280 ud2

core::ops::function::FnOnce::call_once<enum$<log::MaybeStaticStr> (*)(str),tuple$<str> >:
063b4290 sub       $0x48,%rsp
063b4294 mov       %rcx,%rax
063b4297 mov       %rax,0x28(%rsp)
063b429c mov       %rdx,0x30(%rsp)
063b42a1 mov       %r8,0x38(%rsp)
063b42a6 mov       0x30(%rsp),%rdx
063b42ab mov       0x38(%rsp),%r8
063b42b0 call      0x0000`0000`063B`5420
063b42b5 mov       0x28(%rsp),%rax
063b42ba add       $0x48,%rsp
063b42be ret

core::ptr::drop_in_place<ref$<tuple$<> > >:
063b42c0 push      %rax
063b42c1 mov       %rcx,(%rsp)
063b42c5 pop       %rax
063b42c6 ret

core::ptr::drop_in_place<log::NopLogger>:
063b42d0 push      %rax
063b42d1 mov       %rcx,(%rsp)
063b42d5 pop       %rax
063b42d6 ret

core::hint::spin_loop:
063b42e0 ret

core::sync::atomic::AtomicUsize::compare_exchange:
063b42f0 sub       $0x88,%rsp
063b42f7 mov       %r9b,0x3F(%rsp)
063b42fc mov       %r8,0x40(%rsp)
063b4301 mov       %rdx,0x48(%rsp)
063b4306 mov       0xB0(%rsp),%al
063b430d mov       %al,0x57(%rsp)
063b4311 mov       %rcx,0x60(%rsp)
063b4316 mov       %rdx,0x68(%rsp)
063b431b mov       %r8,0x70(%rsp)
063b4320 mov       %r9b,0x7F(%rsp)
063b4325 mov       %rcx,0x58(%rsp)
063b432a mov       %rcx,0x80(%rsp)
063b4332 mov       0x57(%rsp),%al
063b4336 mov       0x3F(%rsp),%r9b
063b433b mov       0x40(%rsp),%r8
063b4340 mov       0x48(%rsp),%rdx
063b4345 mov       0x58(%rsp),%rcx
063b434a mov       %al,0x20(%rsp)
063b434e call      0x0000`0000`063B`4510
063b4353 mov       %rax,0x28(%rsp)
063b4358 mov       %rdx,0x30(%rsp)
063b435d mov       0x30(%rsp),%rdx
063b4362 mov       0x28(%rsp),%rax
063b4367 add       $0x88,%rsp
063b436e ret

core::sync::atomic::AtomicUsize::load:
063b4370 sub       $0x58,%rsp
063b4374 mov       %dl,0x37(%rsp)
063b4378 mov       %rcx,0x40(%rsp)
063b437d mov       %dl,0x4F(%rsp)
063b4381 mov       %rcx,0x38(%rsp)
063b4386 mov       %rcx,0x50(%rsp)
063b438b mov       0x37(%rsp),%dl
063b438f mov       0x38(%rsp),%rcx
063b4394 call      0x0000`0000`063B`A970
063b4399 mov       %rax,0x28(%rsp)
063b439e mov       0x28(%rsp),%rax
063b43a3 add       $0x58,%rsp
063b43a7 ret

core::sync::atomic::AtomicUsize::store:
063b43b0 sub       $0x58,%rsp
063b43b4 mov       %r8b,0x27(%rsp)
063b43b9 mov       %rdx,0x28(%rsp)
063b43be mov       %rcx,0x38(%rsp)
063b43c3 mov       %rdx,0x40(%rsp)
063b43c8 mov       %r8b,0x4F(%rsp)
063b43cd mov       %rcx,0x30(%rsp)
063b43d2 mov       %rcx,0x50(%rsp)
063b43d7 mov       0x27(%rsp),%r8b
063b43dc mov       0x28(%rsp),%rdx
063b43e1 mov       0x30(%rsp),%rcx
063b43e6 call      0x0000`0000`063B`43F0
063b43eb add       $0x58,%rsp
063b43ef ret

core::sync::atomic::atomic_store<usize>:
063b43f0 sub       $0xB8,%rsp
063b43f7 mov       %rdx,0x28(%rsp)
063b43fc mov       %rcx,0x30(%rsp)
063b4401 mov       %r8b,0x47(%rsp)
063b4406 mov       %rcx,0xA8(%rsp)
063b440e mov       %rdx,0xB0(%rsp)
063b4416 movzbl    0x47(%rsp),%eax
063b441b mov       %rax,0x38(%rsp)
063b4420 mov       0x38(%rsp),%rax
063b4425 lea       0x63B`44E8,%rcx
063b442c movslq    (%rcx,%rax,4),%rax
063b4430 add       %rcx,%rax
063b4433 jmp       *%rax
063b4435 ud2
063b4437 mov       0x30(%rsp),%rax
063b443c mov       0x28(%rsp),%rcx
063b4441 mov       %rcx,(%rax)
063b4444 jmp       0x0000`0000`063B`44B8
063b4446 mov       0x30(%rsp),%rax
063b444b mov       0x28(%rsp),%rcx
063b4450 mov       %rcx,(%rax)
063b4453 jmp       0x0000`0000`063B`44B8
063b4455 lea       0x48(%rsp),%rcx
063b445a lea       0x63C`F0E8,%rdx
063b4461 mov       $1,%r8d
063b4467 lea       0x63C`EFC0,%r9
063b446e xor       %eax,%eax
063b4470 movq      $0,0x20(%rsp)
063b4479 call      0x0000`0000`063B`4140
063b447e jmp       0x0000`0000`063B`44D3
063b4480 lea       0x78(%rsp),%rcx
063b4485 lea       0x63C`F010,%rdx
063b448c mov       $1,%r8d
063b4492 lea       0x63C`EFC0,%r9
063b4499 xor       %eax,%eax
063b449b movq      $0,0x20(%rsp)
063b44a4 call      0x0000`0000`063B`4140
063b44a9 jmp       0x0000`0000`063B`44C0
063b44ab mov       0x30(%rsp),%rcx
063b44b0 mov       0x28(%rsp),%rax
063b44b5 xchg      %rax,(%rcx)
063b44b8 add       $0xB8,%rsp
063b44bf ret
063b44c0 lea       0x63C`F0A0,%rdx
063b44c7 lea       0x78(%rsp),%rcx
063b44cc call      0x0000`0000`063B`A100
063b44d1 ud2
063b44d3 lea       0x63C`F0F8,%rdx
063b44da lea       0x48(%rsp),%rcx
063b44df call      0x0000`0000`063B`A100
063b44e4 ud2

core::sync::atomic::spin_loop_hint:
063b4500 sub       $0x28,%rsp
063b4504 call      0x0000`0000`063B`42E0
063b4509 add       $0x28,%rsp
063b450d ret

core::sync::atomic::atomic_compare_exchange<usize>:
063b4510 sub       $0x158,%rsp
063b4517 mov       %r8,0x50(%rsp)
063b451c mov       %rdx,0x58(%rsp)
063b4521 mov       %rcx,0x60(%rsp)
063b4526 mov       0x180(%rsp),%al
063b452d mov       %rcx,0x128(%rsp)
063b4535 mov       %rdx,0x130(%rsp)
063b453d mov       %r8,0x138(%rsp)
063b4545 mov       %r9b,0x147(%rsp)
063b454d mov       %r9b,0x90(%rsp)
063b4555 mov       %al,0x91(%rsp)
063b455c movzbl    0x90(%rsp),%eax
063b4564 mov       %rax,0x68(%rsp)
063b4569 mov       0x68(%rsp),%rax
063b456e lea       0x63B`493C,%rcx
063b4575 movslq    (%rcx,%rax,4),%rax
063b4579 add       %rcx,%rax
063b457c jmp       *%rax
063b457e ud2
063b4580 movzbl    0x91(%rsp),%eax
063b4588 cmp       $0,%rax
063b458c je        0x0000`0000`063B`4806
063b4592 jmp       0x0000`0000`063B`4632
063b4597 movzbl    0x91(%rsp),%eax
063b459f cmp       $0,%rax
063b45a3 je        0x0000`0000`063B`47D6
063b45a9 jmp       0x0000`0000`063B`4632
063b45ae movzbl    0x91(%rsp),%eax
063b45b6 mov       %rax,0x48(%rsp)
063b45bb test      %rax,%rax
063b45be je        0x0000`0000`063B`4776
063b45c4 jmp       0x0000`0000`063B`45C6
063b45c6 mov       0x48(%rsp),%rax
063b45cb sub       $2,%rax
063b45cf je        0x0000`0000`063B`47A6
063b45d5 jmp       0x0000`0000`063B`4632
063b45d7 movzbl    0x91(%rsp),%eax
063b45df mov       %rax,0x40(%rsp)
063b45e4 test      %rax,%rax
063b45e7 je        0x0000`0000`063B`4719
063b45ed jmp       0x0000`0000`063B`45EF
063b45ef mov       0x40(%rsp),%rax
063b45f4 sub       $2,%rax
063b45f8 je        0x0000`0000`063B`4746
063b45fe jmp       0x0000`0000`063B`4632
063b4600 movzbl    0x91(%rsp),%eax
063b4608 mov       %rax,0x38(%rsp)
063b460d test      %rax,%rax
063b4610 je        0x0000`0000`063B`465F
063b4612 jmp       0x0000`0000`063B`4614
063b4614 mov       0x38(%rsp),%rax
063b4619 sub       $2,%rax
063b461d je        0x0000`0000`063B`468C
063b461f jmp       0x0000`0000`063B`4621
063b4621 mov       0x38(%rsp),%rax
063b4626 sub       $4,%rax
063b462a je        0x0000`0000`063B`46B9
063b4630 jmp       0x0000`0000`063B`4632
063b4632 movzbl    0x91(%rsp),%eax
063b463a mov       %rax,0x30(%rsp)
063b463f sub       $1,%rax
063b4643 je        0x0000`0000`063B`4864
063b4649 jmp       0x0000`0000`063B`464B
063b464b mov       0x30(%rsp),%rax
063b4650 sub       $3,%rax
063b4654 je        0x0000`0000`063B`4892
063b465a jmp       0x0000`0000`063B`4836
063b465f mov       0x60(%rsp),%rcx
063b4664 mov       0x50(%rsp),%rdx
063b4669 mov       0x58(%rsp),%rax
063b466e lock cmpxchg %rdx,(%rcx)
063b4673 mov       %rax,%rcx
063b4676 sete      %al
063b4679 and       $1,%al
063b467b mov       %rcx,0x80(%rsp)
063b4683 mov       %al,0x88(%rsp)
063b468a jmp       0x0000`0000`063B`46E4
063b468c mov       0x60(%rsp),%rcx
063b4691 mov       0x50(%rsp),%rdx
063b4696 mov       0x58(%rsp),%rax
063b469b lock cmpxchg %rdx,(%rcx)
063b46a0 mov       %rax,%rcx
063b46a3 sete      %al
063b46a6 and       $1,%al
063b46a8 mov       %rcx,0x80(%rsp)
063b46b0 mov       %al,0x88(%rsp)
063b46b7 jmp       0x0000`0000`063B`46E4
063b46b9 mov       0x60(%rsp),%rcx
063b46be mov       0x50(%rsp),%rdx
063b46c3 mov       0x58(%rsp),%rax
063b46c8 lock cmpxchg %rdx,(%rcx)
063b46cd mov       %rax,%rcx
063b46d0 sete      %al
063b46d3 and       $1,%al
063b46d5 mov       %rcx,0x80(%rsp)
063b46dd mov       %al,0x88(%rsp)
063b46e4 mov       0x80(%rsp),%rax
063b46ec mov       %rax,0x28(%rsp)
063b46f1 mov       %rax,0x148(%rsp)
063b46f9 mov       0x88(%rsp),%al
063b4700 mov       %al,%cl
063b4702 and       $1,%cl
063b4705 mov       %cl,0x157(%rsp)
063b470c test      $1,%al
063b470e jne       0x0000`0000`063B`4917
063b4714 jmp       0x0000`0000`063B`4902
063b4719 mov       0x60(%rsp),%rcx
063b471e mov       0x50(%rsp),%rdx
063b4723 mov       0x58(%rsp),%rax
063b4728 lock cmpxchg %rdx,(%rcx)
063b472d mov       %rax,%rcx
063b4730 sete      %al
063b4733 and       $1,%al
063b4735 mov       %rcx,0x80(%rsp)
063b473d mov       %al,0x88(%rsp)
063b4744 jmp       0x0000`0000`063B`46E4
063b4746 mov       0x60(%rsp),%rcx
063b474b mov       0x50(%rsp),%rdx
063b4750 mov       0x58(%rsp),%rax
063b4755 lock cmpxchg %rdx,(%rcx)
063b475a mov       %rax,%rcx
063b475d sete      %al
063b4760 and       $1,%al
063b4762 mov       %rcx,0x80(%rsp)
063b476a mov       %al,0x88(%rsp)
063b4771 jmp       0x0000`0000`063B`46E4
063b4776 mov       0x60(%rsp),%rcx
063b477b mov       0x50(%rsp),%rdx
063b4780 mov       0x58(%rsp),%rax
063b4785 lock cmpxchg %rdx,(%rcx)
063b478a mov       %rax,%rcx
063b478d sete      %al
063b4790 and       $1,%al
063b4792 mov       %rcx,0x80(%rsp)
063b479a mov       %al,0x88(%rsp)
063b47a1 jmp       0x0000`0000`063B`46E4
063b47a6 mov       0x60(%rsp),%rcx
063b47ab mov       0x50(%rsp),%rdx
063b47b0 mov       0x58(%rsp),%rax
063b47b5 lock cmpxchg %rdx,(%rcx)
063b47ba mov       %rax,%rcx
063b47bd sete      %al
063b47c0 and       $1,%al
063b47c2 mov       %rcx,0x80(%rsp)
063b47ca mov       %al,0x88(%rsp)
063b47d1 jmp       0x0000`0000`063B`46E4
063b47d6 mov       0x60(%rsp),%rcx
063b47db mov       0x50(%rsp),%rdx
063b47e0 mov       0x58(%rsp),%rax
063b47e5 lock cmpxchg %rdx,(%rcx)
063b47ea mov       %rax,%rcx
063b47ed sete      %al
063b47f0 and       $1,%al
063b47f2 mov       %rcx,0x80(%rsp)
063b47fa mov       %al,0x88(%rsp)
063b4801 jmp       0x0000`0000`063B`46E4
063b4806 mov       0x60(%rsp),%rcx
063b480b mov       0x50(%rsp),%rdx
063b4810 mov       0x58(%rsp),%rax
063b4815 lock cmpxchg %rdx,(%rcx)
063b481a mov       %rax,%rcx
063b481d sete      %al
063b4820 and       $1,%al
063b4822 mov       %rcx,0x80(%rsp)
063b482a mov       %al,0x88(%rsp)
063b4831 jmp       0x0000`0000`063B`46E4
063b4836 lea       0xF8(%rsp),%rcx
063b483e lea       0x63C`F150,%rdx
063b4845 mov       $1,%r8d
063b484b lea       0x63C`EFC0,%r9
063b4852 xor       %eax,%eax
063b4854 movq      $0,0x20(%rsp)
063b485d call      0x0000`0000`063B`4140
063b4862 jmp       0x0000`0000`063B`48C0
063b4864 lea       0xC8(%rsp),%rcx
063b486c lea       0x63C`F218,%rdx
063b4873 mov       $1,%r8d
063b4879 lea       0x63C`EFC0,%r9
063b4880 xor       %eax,%eax
063b4882 movq      $0,0x20(%rsp)
063b488b call      0x0000`0000`063B`4140
063b4890 jmp       0x0000`0000`063B`48EC
063b4892 lea       0x98(%rsp),%rcx
063b489a lea       0x63C`F1B8,%rdx
063b48a1 mov       $1,%r8d
063b48a7 lea       0x63C`EFC0,%r9
063b48ae xor       %eax,%eax
063b48b0 movq      $0,0x20(%rsp)
063b48b9 call      0x0000`0000`063B`4140
063b48be jmp       0x0000`0000`063B`48D6
063b48c0 lea       0x63C`F160,%rdx
063b48c7 lea       0xF8(%rsp),%rcx
063b48cf call      0x0000`0000`063B`A100
063b48d4 ud2
063b48d6 lea       0x63C`F1C8,%rdx
063b48dd lea       0x98(%rsp),%rcx
063b48e5 call      0x0000`0000`063B`A100
063b48ea ud2
063b48ec lea       0x63C`F228,%rdx
063b48f3 lea       0xC8(%rsp),%rcx
063b48fb call      0x0000`0000`063B`A100
063b4900 ud2
063b4902 mov       0x28(%rsp),%rax
063b4907 mov       %rax,0x78(%rsp)
063b490c movq      $1,0x70(%rsp)
063b4915 jmp       0x0000`0000`063B`492A
063b4917 mov       0x28(%rsp),%rax
063b491c mov       %rax,0x78(%rsp)
063b4921 movq      $0,0x70(%rsp)
063b492a mov       0x70(%rsp),%rax
063b492f mov       0x78(%rsp),%rdx
063b4934 add       $0x158,%rsp
063b493b ret

core::clone::impls::impl$8::clone:
063b4950 push      %rax
063b4951 mov       %rcx,(%rsp)
063b4955 mov       (%rcx),%eax
063b4957 pop       %rcx
063b4958 ret

enum$<core::option::Option<str>, 1, 18446744073709551615, Some>::map<str,enum$<log::MaybeStaticStr>,enum$<log::MaybeStaticStr> (*)(str)>:
063b4960 sub       $0x88,%rsp
063b4967 mov       %rcx,0x20(%rsp)
063b496c mov       %rcx,0x28(%rsp)
063b4971 mov       %rdx,0x30(%rsp)
063b4976 mov       %r8,0x38(%rsp)
063b497b movb      $0,0x6F(%rsp)
063b4980 movb      $1,0x6F(%rsp)
063b4985 mov       0x30(%rsp),%rax
063b498a test      %rax,%rax
063b498d setne     %al
063b4990 movzbl    %al,%eax
063b4993 je        0x0000`0000`063B`499B
063b4995 jmp       0x0000`0000`063B`4997
063b4997 jmp       0x0000`0000`063B`49A9
063b4999 ud2
063b499b mov       0x20(%rsp),%rax
063b49a0 movq      $2,(%rax)
063b49a7 jmp       0x0000`0000`063B`4A02
063b49a9 mov       0x30(%rsp),%rcx
063b49ae mov       0x38(%rsp),%rax
063b49b3 mov       %rcx,0x78(%rsp)
063b49b8 mov       %rax,0x80(%rsp)
063b49c0 movb      $0,0x6F(%rsp)
063b49c5 mov       %rcx,0x58(%rsp)
063b49ca mov       %rax,0x60(%rsp)
063b49cf mov       0x58(%rsp),%rdx
063b49d4 mov       0x60(%rsp),%r8
063b49d9 lea       0x40(%rsp),%rcx
063b49de call      0x0000`0000`063B`4290
063b49e3 mov       0x20(%rsp),%rax
063b49e8 mov       0x40(%rsp),%rcx
063b49ed mov       %rcx,(%rax)
063b49f0 mov       0x48(%rsp),%rcx
063b49f5 mov       %rcx,8(%rax)
063b49f9 mov       0x50(%rsp),%rcx
063b49fe mov       %rcx,0x10(%rax)
063b4a02 testb     $1,0x6F(%rsp)
063b4a07 jne       0x0000`0000`063B`4A16
063b4a09 mov       0x28(%rsp),%rax
063b4a0e add       $0x88,%rsp
063b4a15 ret
063b4a16 jmp       0x0000`0000`063B`4A09

core::fmt::impl$51::clone:
063b4a20 sub       $0x38,%rsp
063b4a24 mov       %rcx,%rax
063b4a27 mov       %rax,0x28(%rsp)
063b4a2c mov       %rdx,0x30(%rsp)
063b4a31 mov       $0x30,%r8d
063b4a37 call      0x0000`0000`063C`BD50
063b4a3c mov       0x28(%rsp),%rax
063b4a41 add       $0x38,%rsp
063b4a45 ret

core::option::impl$5::clone<u32>:
063b4a50 sub       $0x48,%rsp
063b4a54 mov       %rcx,0x28(%rsp)
063b4a59 mov       %rcx,0x38(%rsp)
063b4a5e mov       (%rcx),%eax
063b4a60 test      %rax,%rax
063b4a63 je        0x0000`0000`063B`4A6B
063b4a65 jmp       0x0000`0000`063B`4A67
063b4a67 jmp       0x0000`0000`063B`4A75
063b4a69 ud2
063b4a6b movl      $0,0x30(%rsp)
063b4a73 jmp       0x0000`0000`063B`4A9C
063b4a75 mov       0x28(%rsp),%rcx
063b4a7a add       $4,%rcx
063b4a7e mov       %rcx,0x40(%rsp)
063b4a83 call      0x0000`0000`063B`4950
063b4a88 mov       %eax,0x24(%rsp)
063b4a8c mov       0x24(%rsp),%eax
063b4a90 mov       %eax,0x34(%rsp)
063b4a94 movl      $1,0x30(%rsp)
063b4a9c mov       0x30(%rsp),%eax
063b4aa0 mov       0x34(%rsp),%edx
063b4aa4 add       $0x48,%rsp
063b4aa8 ret

core::option::impl$5::clone<enum$<log::MaybeStaticStr> >:
063b4ab0 sub       $0x68,%rsp
063b4ab4 mov       %rdx,0x28(%rsp)
063b4ab9 mov       %rcx,0x30(%rsp)
063b4abe mov       %rcx,0x38(%rsp)
063b4ac3 mov       %rdx,0x58(%rsp)
063b4ac8 mov       (%rdx),%rax
063b4acb add       $0xFFFF`FFFF`FFFF`FFFE,%rax
063b4acf setne     %al
063b4ad2 movzbl    %al,%eax
063b4ad5 je        0x0000`0000`063B`4ADD
063b4ad7 jmp       0x0000`0000`063B`4AD9
063b4ad9 jmp       0x0000`0000`063B`4AEB
063b4adb ud2
063b4add mov       0x30(%rsp),%rax
063b4ae2 movq      $2,(%rax)
063b4ae9 jmp       0x0000`0000`063B`4B1E
063b4aeb mov       0x28(%rsp),%rdx
063b4af0 mov       %rdx,0x60(%rsp)
063b4af5 lea       0x40(%rsp),%rcx
063b4afa call      0x0000`0000`063B`5450
063b4aff mov       0x30(%rsp),%rax
063b4b04 mov       0x40(%rsp),%rcx
063b4b09 mov       %rcx,(%rax)
063b4b0c mov       0x48(%rsp),%rcx
063b4b11 mov       %rcx,8(%rax)
063b4b15 mov       0x50(%rsp),%rcx
063b4b1a mov       %rcx,0x10(%rax)
063b4b1e mov       0x38(%rsp),%rax
063b4b23 add       $0x68,%rsp
063b4b27 ret

log::impl$0::clone:
063b4b30 push      %rax
063b4b31 mov       %rcx,(%rsp)
063b4b35 mov       (%rcx),%rax
063b4b38 pop       %rcx
063b4b39 ret

log::impl$7::fmt:
063b4b40 sub       $0x58,%rsp
063b4b44 mov       %rdx,0x30(%rsp)
063b4b49 mov       %rcx,0x48(%rsp)
063b4b4e mov       %rdx,0x50(%rsp)
063b4b53 call      0x0000`0000`063B`4B90
063b4b58 mov       %rax,0x38(%rsp)
063b4b5d mov       %rdx,0x40(%rsp)
063b4b62 mov       0x40(%rsp),%r8
063b4b67 mov       0x38(%rsp),%rdx
063b4b6c mov       0x30(%rsp),%rcx
063b4b71 call      0x0000`0000`063C`0540
063b4b76 mov       %al,0x2F(%rsp)
063b4b7a mov       0x2F(%rsp),%al
063b4b7e and       $1,%al
063b4b80 movzbl    %al,%eax
063b4b83 add       $0x58,%rsp
063b4b87 ret

log::Level::as_str:
063b4b90 sub       $0x38,%rsp
063b4b94 mov       %rcx,0x30(%rsp)
063b4b99 mov       (%rcx),%rax
063b4b9c mov       %rax,0x28(%rsp)
063b4ba1 cmp       $6,%rax
063b4ba5 setb      %al
063b4ba8 test      $1,%al
063b4baa jne       0x0000`0000`063B`4BAE
063b4bac jmp       0x0000`0000`063B`4BCC
063b4bae mov       0x28(%rsp),%rcx
063b4bb3 shl       $4,%rcx
063b4bb7 lea       0x63C`F2B0,%rdx
063b4bbe mov       (%rcx,%rdx),%rax
063b4bc2 mov       8(%rcx,%rdx),%rdx
063b4bc7 add       $0x38,%rsp
063b4bcb ret
063b4bcc mov       0x28(%rsp),%rcx
063b4bd1 lea       0x63C`F368,%r8
063b4bd8 mov       $6,%edx
063b4bdd call      0x0000`0000`063B`A050
063b4be2 ud2

log::Record::builder:
063b4bf0 sub       $0x28,%rsp
063b4bf4 mov       %rcx,%rax
063b4bf7 mov       %rax,0x20(%rsp)
063b4bfc call      0x0000`0000`063B`4C10
063b4c01 mov       0x20(%rsp),%rax
063b4c06 add       $0x28,%rsp
063b4c0a ret

log::RecordBuilder::new:
063b4c10 sub       $0x158,%rsp
063b4c17 mov       %rcx,0x30(%rsp)
063b4c1c mov       %rcx,0x38(%rsp)
063b4c21 lea       0xC0(%rsp),%rcx
063b4c29 lea       0x63C`EFC0,%r9
063b4c30 mov       %r9,%rdx
063b4c33 xor       %eax,%eax
063b4c35 mov       %eax,%r8d
063b4c38 movq      $0,0x20(%rsp)
063b4c41 call      0x0000`0000`063B`4140
063b4c46 lea       0x108(%rsp),%rcx
063b4c4e call      0x0000`0000`063B`4EF0
063b4c53 lea       0xF0(%rsp),%rcx
063b4c5b lea       0x108(%rsp),%rdx
063b4c63 call      0x0000`0000`063B`4F60
063b4c68 movq      $2,0x120(%rsp)
063b4c74 movq      $2,0x138(%rsp)
063b4c80 movl      $0,0x150(%rsp)
063b4c8b mov       0xF0(%rsp),%rax
063b4c93 mov       %rax,0x40(%rsp)
063b4c98 mov       0xF8(%rsp),%rax
063b4ca0 mov       %rax,0x48(%rsp)
063b4ca5 mov       0x100(%rsp),%rax
063b4cad mov       %rax,0x50(%rsp)
063b4cb2 lea       0x40(%rsp),%rcx
063b4cb7 add       $0x18,%rcx
063b4cbb lea       0xC0(%rsp),%rdx
063b4cc3 mov       $0x30,%r8d
063b4cc9 call      0x0000`0000`063C`BD50
063b4cce mov       0x30(%rsp),%rcx
063b4cd3 mov       0x120(%rsp),%rax
063b4cdb mov       %rax,0x88(%rsp)
063b4ce3 mov       0x128(%rsp),%rax
063b4ceb mov       %rax,0x90(%rsp)
063b4cf3 mov       0x130(%rsp),%rax
063b4cfb mov       %rax,0x98(%rsp)
063b4d03 mov       0x138(%rsp),%rax
063b4d0b mov       %rax,0xA0(%rsp)
063b4d13 mov       0x140(%rsp),%rax
063b4d1b mov       %rax,0xA8(%rsp)
063b4d23 mov       0x148(%rsp),%rax
063b4d2b mov       %rax,0xB0(%rsp)
063b4d33 mov       0x150(%rsp),%edx
063b4d3a mov       0x154(%rsp),%eax
063b4d41 mov       %edx,0xB8(%rsp)
063b4d48 mov       %eax,0xBC(%rsp)
063b4d4f lea       0x40(%rsp),%rdx
063b4d54 mov       $0x80,%r8d
063b4d5a call      0x0000`0000`063C`BD50
063b4d5f mov       0x38(%rsp),%rax
063b4d64 add       $0x158,%rsp
063b4d6b ret

log::RecordBuilder::args:
063b4d70 sub       $0x68,%rsp
063b4d74 mov       %rcx,0x28(%rsp)
063b4d79 mov       %rcx,0x60(%rsp)
063b4d7e lea       0x30(%rsp),%rcx
063b4d83 mov       $0x30,%r8d
063b4d89 call      0x0000`0000`063C`BD50
063b4d8e mov       0x28(%rsp),%rcx
063b4d93 add       $0x18,%rcx
063b4d97 lea       0x30(%rsp),%rdx
063b4d9c mov       $0x30,%r8d
063b4da2 call      0x0000`0000`063C`BD50
063b4da7 mov       0x28(%rsp),%rax
063b4dac add       $0x68,%rsp
063b4db0 ret

log::RecordBuilder::level:
063b4dc0 sub       $0x10,%rsp
063b4dc4 mov       %rcx,%rax
063b4dc7 mov       %rax,(%rsp)
063b4dcb mov       %rdx,8(%rsp)
063b4dd0 mov       %rdx,(%rax)
063b4dd3 add       $0x10,%rsp
063b4dd7 ret

log::RecordBuilder::target:
063b4de0 sub       $0x18,%rsp
063b4de4 mov       %rcx,%rax
063b4de7 mov       %rax,(%rsp)
063b4deb mov       %rdx,8(%rsp)
063b4df0 mov       %r8,0x10(%rsp)
063b4df5 mov       %rdx,8(%rax)
063b4df9 mov       %r8,0x10(%rax)
063b4dfd add       $0x18,%rsp
063b4e01 ret

log::RecordBuilder::module_path_static:
063b4e10 sub       $0x58,%rsp
063b4e14 mov       %rcx,0x20(%rsp)
063b4e19 mov       %rcx,0x40(%rsp)
063b4e1e mov       %rdx,0x48(%rsp)
063b4e23 mov       %r8,0x50(%rsp)
063b4e28 lea       0x28(%rsp),%rcx
063b4e2d call      0x0000`0000`063B`4960
063b4e32 mov       0x20(%rsp),%rax
063b4e37 mov       0x28(%rsp),%rcx
063b4e3c mov       %rcx,0x48(%rax)
063b4e40 mov       0x30(%rsp),%rcx
063b4e45 mov       %rcx,0x50(%rax)
063b4e49 mov       0x38(%rsp),%rcx
063b4e4e mov       %rcx,0x58(%rax)
063b4e52 add       $0x58,%rsp
063b4e56 ret

log::RecordBuilder::file_static:
063b4e60 sub       $0x58,%rsp
063b4e64 mov       %rcx,0x20(%rsp)
063b4e69 mov       %rcx,0x40(%rsp)
063b4e6e mov       %rdx,0x48(%rsp)
063b4e73 mov       %r8,0x50(%rsp)
063b4e78 lea       0x28(%rsp),%rcx
063b4e7d call      0x0000`0000`063B`4960
063b4e82 mov       0x20(%rsp),%rax
063b4e87 mov       0x28(%rsp),%rcx
063b4e8c mov       %rcx,0x60(%rax)
063b4e90 mov       0x30(%rsp),%rcx
063b4e95 mov       %rcx,0x68(%rax)
063b4e99 mov       0x38(%rsp),%rcx
063b4e9e mov       %rcx,0x70(%rax)
063b4ea2 add       $0x58,%rsp
063b4ea6 ret

log::RecordBuilder::line:
063b4eb0 sub       $0x10,%rsp
063b4eb4 mov       %rcx,%rax
063b4eb7 mov       %rax,(%rsp)
063b4ebb mov       %edx,8(%rsp)
063b4ebf mov       %r8d,0xC(%rsp)
063b4ec4 mov       %edx,0x78(%rax)
063b4ec7 mov       %r8d,0x7C(%rax)
063b4ecb add       $0x10,%rsp
063b4ecf ret

log::RecordBuilder::build:
063b4ed0 sub       $0x38,%rsp
063b4ed4 mov       %rcx,%rax
063b4ed7 mov       %rax,0x28(%rsp)
063b4edc mov       %rdx,0x30(%rsp)
063b4ee1 call      0x0000`0000`063B`5470
063b4ee6 mov       0x28(%rsp),%rax
063b4eeb add       $0x38,%rsp
063b4eef ret

log::Metadata::builder:
063b4ef0 sub       $0x28,%rsp
063b4ef4 mov       %rcx,%rax
063b4ef7 mov       %rax,0x20(%rsp)
063b4efc call      0x0000`0000`063B`4F10
063b4f01 mov       0x20(%rsp),%rax
063b4f06 add       $0x28,%rsp
063b4f0a ret

log::MetadataBuilder::new:
063b4f10 sub       $0x18,%rsp
063b4f14 mov       %rcx,%rax
063b4f17 movq      $3,(%rsp)
063b4f1f lea       0x63C`EFC0,%rdx
063b4f26 mov       %rdx,8(%rsp)
063b4f2b movq      $0,0x10(%rsp)
063b4f34 mov       (%rsp),%rdx
063b4f38 mov       %rdx,(%rcx)
063b4f3b mov       8(%rsp),%rdx
063b4f40 mov       %rdx,8(%rcx)
063b4f44 mov       0x10(%rsp),%rdx
063b4f49 mov       %rdx,0x10(%rcx)
063b4f4d add       $0x18,%rsp
063b4f51 ret

log::MetadataBuilder::build:
063b4f60 sub       $0x38,%rsp
063b4f64 mov       %rcx,%rax
063b4f67 mov       %rax,0x28(%rsp)
063b4f6c mov       %rdx,0x30(%rsp)
063b4f71 call      0x0000`0000`063B`55D0
063b4f76 mov       0x28(%rsp),%rax
063b4f7b add       $0x38,%rsp
063b4f7f ret

log::impl$23::enabled:
063b4f80 sub       $0x10,%rsp
063b4f84 mov       %rcx,(%rsp)
063b4f88 mov       %rdx,8(%rsp)
063b4f8d xor       %eax,%eax
063b4f8f and       $1,%al
063b4f91 movzbl    %al,%eax
063b4f94 add       $0x10,%rsp
063b4f98 ret

log::impl$23::log:
063b4fa0 sub       $0x10,%rsp
063b4fa4 mov       %rcx,(%rsp)
063b4fa8 mov       %rdx,8(%rsp)
063b4fad add       $0x10,%rsp
063b4fb1 ret

log::impl$23::flush:
063b4fc0 push      %rax
063b4fc1 mov       %rcx,(%rsp)
063b4fc5 pop       %rax
063b4fc6 ret

log::set_logger:
063b4fd0 sub       $0x48,%rsp
063b4fd4 mov       %rcx,0x30(%rsp)
063b4fd9 mov       %rdx,0x38(%rsp)
063b4fde lea       0x30(%rsp),%rax
063b4fe3 mov       %rax,0x40(%rsp)
063b4fe8 mov       0x40(%rsp),%rcx
063b4fed call      0x0000`0000`063B`5020
063b4ff2 mov       %al,0x2F(%rsp)
063b4ff6 mov       0x2F(%rsp),%al
063b4ffa and       $1,%al
063b4ffc movzbl    %al,%eax
063b4fff add       $0x48,%rsp
063b5003 ret

log::set_logger::closure$0:
063b5010 push      %rax
063b5011 mov       %rcx,(%rsp)
063b5015 mov       (%rcx),%rax
063b5018 mov       8(%rcx),%rdx
063b501c pop       %rcx
063b501d ret

log::set_logger_inner<log::set_logger::closure_env$0>:
063b5020 sub       $0x98,%rsp
063b5027 mov       %rcx,0x50(%rsp)
063b502c mov       %rcx,0x88(%rsp)
063b5034 movb      $0,0x87(%rsp)
063b503c movb      $1,0x87(%rsp)
063b5044 movb      $4,0x76(%rsp)
063b5049 movb      $4,0x77(%rsp)
063b504e mov       0x76(%rsp),%r9b
063b5053 mov       0x77(%rsp),%cl
063b5057 mov       %rsp,%rax
063b505a mov       %cl,0x20(%rax)
063b505d lea       0x63D`3038,%rcx
063b5064 xor       %eax,%eax
063b5066 mov       %eax,%edx
063b5068 mov       $1,%r8d
063b506e call      0x0000`0000`063B`42F0
063b5073 mov       %rdx,0x68(%rsp)
063b5078 mov       %rax,0x60(%rsp)
063b507d mov       0x60(%rsp),%rax
063b5082 test      %rax,%rax
063b5085 je        0x0000`0000`063B`508D
063b5087 jmp       0x0000`0000`063B`5089
063b5089 jmp       0x0000`0000`063B`5099
063b508b ud2
063b508d mov       0x68(%rsp),%rax
063b5092 mov       %rax,0x78(%rsp)
063b5097 jmp       0x0000`0000`063B`50A3
063b5099 mov       0x68(%rsp),%rax
063b509e mov       %rax,0x78(%rsp)
063b50a3 mov       0x78(%rsp),%rax
063b50a8 mov       %rax,0x48(%rsp)
063b50ad mov       %rax,0x90(%rsp)
063b50b5 test      %rax,%rax
063b50b8 je        0x0000`0000`063B`50D0
063b50ba jmp       0x0000`0000`063B`50BC
063b50bc mov       0x48(%rsp),%rax
063b50c1 sub       $1,%rax
063b50c5 je        0x0000`0000`063B`50EE
063b50c7 jmp       0x0000`0000`063B`50C9
063b50c9 movb      $1,0x5F(%rsp)
063b50ce jmp       0x0000`0000`063B`5110
063b50d0 mov       0x50(%rsp),%rcx
063b50d5 movb      $0,0x87(%rsp)
063b50dd call      0x0000`0000`063B`5010
063b50e2 mov       %rax,0x38(%rsp)
063b50e7 mov       %rdx,0x40(%rsp)
063b50ec jmp       0x0000`0000`063B`5135
063b50ee movb      $4,0x86(%rsp)
063b50f6 mov       0x86(%rsp),%dl
063b50fd lea       0x63D`3038,%rcx
063b5104 call      0x0000`0000`063B`4370
063b5109 mov       %rax,0x30(%rsp)
063b510e jmp       0x0000`0000`063B`511C
063b5110 testb     $1,0x87(%rsp)
063b5118 jne       0x0000`0000`063B`5186
063b511a jmp       0x0000`0000`063B`5175
063b511c mov       0x30(%rsp),%rax
063b5121 cmp       $1,%rax
063b5125 je        0x0000`0000`063B`512E
063b5127 movb      $1,0x5F(%rsp)
063b512c jmp       0x0000`0000`063B`5110
063b512e call      0x0000`0000`063B`4500
063b5133 jmp       0x0000`0000`063B`50EE
063b5135 mov       0x40(%rsp),%rax
063b513a mov       0x38(%rsp),%rcx
063b513f mov       %rcx,0x63D`3000
063b5146 mov       %rax,0x63D`3008
063b514d movb      $4,0x85(%rsp)
063b5155 mov       0x85(%rsp),%r8b
063b515d lea       0x63D`3038,%rcx
063b5164 mov       $2,%edx
063b5169 call      0x0000`0000`063B`43B0
063b516e movb      $0,0x5F(%rsp)
063b5173 jmp       0x0000`0000`063B`5110
063b5175 mov       0x5F(%rsp),%al
063b5179 and       $1,%al
063b517b movzbl    %al,%eax
063b517e add       $0x98,%rsp
063b5185 ret
063b5186 jmp       0x0000`0000`063B`5175

log::logger:
063b5190 sub       $0x48,%rsp
063b5194 movb      $4,0x47(%rsp)
063b5199 mov       0x47(%rsp),%dl
063b519d lea       0x63D`3038,%rcx
063b51a4 call      0x0000`0000`063B`4370
063b51a9 mov       %rax,0x28(%rsp)
063b51ae mov       0x28(%rsp),%rax
063b51b3 cmp       $2,%rax
063b51b7 jne       0x0000`0000`063B`51D3
063b51b9 mov       0x63D`3000,%rcx
063b51c0 mov       0x63D`3008,%rax
063b51c7 mov       %rcx,0x30(%rsp)
063b51cc mov       %rax,0x38(%rsp)
063b51d1 jmp       0x0000`0000`063B`51EB
063b51d3 lea       0x63C`F380,%rax
063b51da mov       %rax,0x30(%rsp)
063b51df lea       0x63C`F258,%rax
063b51e6 mov       %rax,0x38(%rsp)
063b51eb mov       0x30(%rsp),%rax
063b51f0 mov       0x38(%rsp),%rdx
063b51f5 add       $0x48,%rsp
063b51f9 ret

log::__private_api_log:
063b5200 sub       $0x258,%rsp
063b5207 mov       %r8,0x58(%rsp)
063b520c mov       %rdx,0x60(%rsp)
063b5211 mov       %rcx,0x68(%rsp)
063b5216 mov       %rdx,0x210(%rsp)
063b521e mov       %r8,0x218(%rsp)
063b5226 mov       (%r8),%rcx
063b5229 mov       %rcx,0x70(%rsp)
063b522e mov       8(%r8),%rax
063b5232 mov       %rax,0x78(%rsp)
063b5237 mov       %rcx,0x220(%rsp)
063b523f mov       %rax,0x228(%rsp)
063b5247 mov       0x10(%r8),%rcx
063b524b mov       %rcx,0x80(%rsp)
063b5253 mov       0x18(%r8),%rax
063b5257 mov       %rax,0x88(%rsp)
063b525f mov       %rcx,0x230(%rsp)
063b5267 mov       %rax,0x238(%rsp)
063b526f mov       0x20(%r8),%rcx
063b5273 mov       %rcx,0x90(%rsp)
063b527b mov       0x28(%r8),%rax
063b527f mov       %rax,0x98(%rsp)
063b5287 mov       %rcx,0x240(%rsp)
063b528f mov       %rax,0x248(%rsp)
063b5297 mov       0x30(%r8),%eax
063b529b mov       %eax,0xA4(%rsp)
063b52a2 mov       %eax,0x254(%rsp)
063b52a9 call      0x0000`0000`063B`5190
063b52ae mov       %rax,0xA8(%rsp)
063b52b6 mov       %rdx,0xB0(%rsp)
063b52be lea       0x138(%rsp),%rcx
063b52c6 call      0x0000`0000`063B`4BF0
063b52cb mov       0x68(%rsp),%rdx
063b52d0 lea       0x1B8(%rsp),%rcx
063b52d8 mov       $0x30,%r8d
063b52de call      0x0000`0000`063C`BD50
063b52e3 lea       0x138(%rsp),%rcx
063b52eb lea       0x1B8(%rsp),%rdx
063b52f3 call      0x0000`0000`063B`4D70
063b52f8 mov       %rax,0x50(%rsp)
063b52fd mov       0x60(%rsp),%rdx
063b5302 mov       0x50(%rsp),%rcx
063b5307 call      0x0000`0000`063B`4DC0
063b530c mov       %rax,0x48(%rsp)
063b5311 mov       0x78(%rsp),%r8
063b5316 mov       0x70(%rsp),%rdx
063b531b mov       0x48(%rsp),%rcx
063b5320 call      0x0000`0000`063B`4DE0
063b5325 mov       %rax,0x40(%rsp)
063b532a mov       0x40(%rsp),%rcx
063b532f mov       0x88(%rsp),%rax
063b5337 mov       0x80(%rsp),%rdx
063b533f mov       %rdx,0x1E8(%rsp)
063b5347 mov       %rax,0x1F0(%rsp)
063b534f mov       0x1E8(%rsp),%rdx
063b5357 mov       0x1F0(%rsp),%r8
063b535f call      0x0000`0000`063B`4E10
063b5364 mov       %rax,0x38(%rsp)
063b5369 mov       0x38(%rsp),%rcx
063b536e mov       0x98(%rsp),%rax
063b5376 mov       0x90(%rsp),%rdx
063b537e mov       %rdx,0x1F8(%rsp)
063b5386 mov       %rax,0x200(%rsp)
063b538e mov       0x1F8(%rsp),%rdx
063b5396 mov       0x200(%rsp),%r8
063b539e call      0x0000`0000`063B`4E60
063b53a3 mov       %rax,0x30(%rsp)
063b53a8 mov       0x30(%rsp),%rcx
063b53ad mov       0xA4(%rsp),%eax
063b53b4 mov       %eax,0x20C(%rsp)
063b53bb movl      $1,0x208(%rsp)
063b53c6 mov       0x208(%rsp),%edx
063b53cd mov       0x20C(%rsp),%r8d
063b53d5 call      0x0000`0000`063B`4EB0
063b53da mov       %rax,0x28(%rsp)
063b53df mov       0x28(%rsp),%rdx
063b53e4 lea       0xB8(%rsp),%rcx
063b53ec call      0x0000`0000`063B`4ED0
063b53f1 mov       0xB0(%rsp),%rax
063b53f9 mov       0xA8(%rsp),%rcx
063b5401 lea       0xB8(%rsp),%rdx
063b5409 callq     *0x28(%rax)
063b540c add       $0x258,%rsp
063b5413 ret

log::MaybeStaticStr::Static::constructor$0:
063b5420 sub       $0x10,%rsp
063b5424 mov       %rcx,%rax
063b5427 mov       %rdx,(%rsp)
063b542b mov       %r8,8(%rsp)
063b5430 mov       %rdx,8(%rcx)
063b5434 mov       %r8,0x10(%rcx)
063b5438 movq      $0,(%rcx)
063b543f add       $0x10,%rsp
063b5443 ret

log::impl$37::clone:
063b5450 push      %rax
063b5451 mov       %rcx,%rax
063b5454 mov       %rdx,(%rsp)
063b5458 mov       (%rdx),%r8
063b545b mov       %r8,(%rcx)
063b545e mov       8(%rdx),%r8
063b5462 mov       %r8,8(%rcx)
063b5466 mov       0x10(%rdx),%rdx
063b546a mov       %rdx,0x10(%rcx)
063b546e pop       %rcx
063b546f ret

log::impl$46::clone:
063b5470 sub       $0x108,%rsp
063b5477 mov       %rdx,%rax
063b547a mov       %rcx,0x30(%rsp)
063b547f mov       %rcx,0x38(%rsp)
063b5484 mov       %rax,0xD8(%rsp)
063b548c mov       %rax,%rdx
063b548f mov       %rdx,0xE0(%rsp)
063b5497 mov       %rax,%rcx
063b549a add       $0x18,%rcx
063b549e mov       %rcx,0x40(%rsp)
063b54a3 mov       %rcx,0xE8(%rsp)
063b54ab mov       %rax,%rcx
063b54ae add       $0x48,%rcx
063b54b2 mov       %rcx,0x48(%rsp)
063b54b7 mov       %rcx,0xF0(%rsp)
063b54bf mov       %rax,%rcx
063b54c2 add       $0x60,%rcx
063b54c6 mov       %rcx,0x50(%rsp)
063b54cb mov       %rcx,0xF8(%rsp)
063b54d3 add       $0x78,%rax
063b54d7 mov       %rax,0x58(%rsp)
063b54dc mov       %rax,0x100(%rsp)
063b54e4 lea       0x60(%rsp),%rcx
063b54e9 call      0x0000`0000`063B`55D0
063b54ee mov       0x40(%rsp),%rdx
063b54f3 lea       0x78(%rsp),%rcx
063b54f8 call      0x0000`0000`063B`4A20
063b54fd mov       0x48(%rsp),%rdx
063b5502 lea       0xA8(%rsp),%rcx
063b550a call      0x0000`0000`063B`4AB0
063b550f mov       0x50(%rsp),%rdx
063b5514 lea       0xC0(%rsp),%rcx
063b551c call      0x0000`0000`063B`4AB0
063b5521 mov       0x58(%rsp),%rcx
063b5526 call      0x0000`0000`063B`4A50
063b552b mov       %eax,0x28(%rsp)
063b552f mov       %edx,0x2C(%rsp)
063b5533 mov       0x30(%rsp),%rcx
063b5538 mov       0x60(%rsp),%rax
063b553d mov       %rax,(%rcx)
063b5540 mov       0x68(%rsp),%rax
063b5545 mov       %rax,8(%rcx)
063b5549 mov       0x70(%rsp),%rax
063b554e mov       %rax,0x10(%rcx)
063b5552 add       $0x18,%rcx
063b5556 lea       0x78(%rsp),%rdx
063b555b mov       $0x30,%r8d
063b5561 call      0x0000`0000`063C`BD50
063b5566 mov       0x28(%rsp),%r8d
063b556b mov       0x2C(%rsp),%edx
063b556f mov       0x30(%rsp),%rcx
063b5574 mov       0x38(%rsp),%rax
063b5579 mov       0xA8(%rsp),%r9
063b5581 mov       %r9,0x48(%rcx)
063b5585 mov       0xB0(%rsp),%r9
063b558d mov       %r9,0x50(%rcx)
063b5591 mov       0xB8(%rsp),%r9
063b5599 mov       %r9,0x58(%rcx)
063b559d mov       0xC0(%rsp),%r9
063b55a5 mov       %r9,0x60(%rcx)
063b55a9 mov       0xC8(%rsp),%r9
063b55b1 mov       %r9,0x68(%rcx)
063b55b5 mov       0xD0(%rsp),%r9
063b55bd mov       %r9,0x70(%rcx)
063b55c1 mov       %r8d,0x78(%rcx)
063b55c5 mov       %edx,0x7C(%rcx)
063b55c8 add       $0x108,%rsp
063b55cf ret

log::impl$49::clone:
063b55d0 sub       $0x68,%rsp
063b55d4 mov       %rcx,0x30(%rsp)
063b55d9 mov       %rcx,0x38(%rsp)
063b55de mov       %rdx,0x50(%rsp)
063b55e3 mov       %rdx,%rcx
063b55e6 mov       %rcx,0x58(%rsp)
063b55eb add       $8,%rdx
063b55ef mov       %rdx,0x40(%rsp)
063b55f4 mov       %rdx,0x60(%rsp)
063b55f9 call      0x0000`0000`063B`4B30
063b55fe mov       %rax,0x48(%rsp)
063b5603 mov       0x40(%rsp),%rcx
063b5608 call      0x0000`0000`063B`7840
063b560d mov       %rax,0x20(%rsp)
063b5612 mov       %rdx,0x28(%rsp)
063b5617 mov       0x38(%rsp),%rax
063b561c mov       0x30(%rsp),%rcx
063b5621 mov       0x28(%rsp),%rdx
063b5626 mov       0x20(%rsp),%r8
063b562b mov       0x48(%rsp),%r9
063b5630 mov       %r9,(%rcx)
063b5633 mov       %r8,8(%rcx)
063b5637 mov       %rdx,0x10(%rcx)
063b563b add       $0x68,%rsp
063b563f ret

log::impl$66::fmt:
063b5640 sub       $0x78,%rsp
063b5644 mov       %rcx,0x58(%rsp)
063b5649 mov       %rdx,0x60(%rsp)
063b564e mov       %rcx,0x30(%rsp)
063b5653 mov       %rcx,0x68(%rsp)
063b5658 lea       0x38(%rsp),%rcx
063b565d lea       0x63C`F380,%r8
063b5664 mov       $0xE,%r9d
063b566a call      0x0000`0000`063C`0D80
063b566f mov       0x30(%rsp),%rax
063b5674 lea       0x38(%rsp),%rcx
063b5679 mov       %rcx,0x70(%rsp)
063b567e mov       %rax,0x50(%rsp)
063b5683 lea       0x50(%rsp),%rdx
063b5688 lea       0x38(%rsp),%rcx
063b568d lea       0x63C`F390,%r8
063b5694 call      0x0000`0000`063B`B420
063b5699 lea       0x38(%rsp),%rcx
063b569e call      0x0000`0000`063B`B6E0
063b56a3 mov       %al,0x2F(%rsp)
063b56a7 mov       0x2F(%rsp),%al
063b56ab and       $1,%al
063b56ad movzbl    %al,%eax
063b56b0 add       $0x78,%rsp
063b56b4 ret

core::ops::function::FnOnce::call_once<usize (*)(ptr_const$<u8>,usize),tuple$<ptr_const$<u8>,usize> >:
063b56c0 sub       $0x48,%rsp
063b56c4 mov       %rcx,0x30(%rsp)
063b56c9 mov       %rdx,0x38(%rsp)
063b56ce mov       0x30(%rsp),%rcx
063b56d3 mov       0x38(%rsp),%rdx
063b56d8 call      0x0000`0000`063B`6650
063b56dd mov       %rax,0x28(%rsp)
063b56e2 mov       0x28(%rsp),%rax
063b56e7 add       $0x48,%rsp
063b56eb ret

core::ops::function::FnOnce::call_once<void (*)(ptr_const$<array$<usize,4> >),tuple$<ptr_const$<array$<usize,4> > > >:
063b56f0 sub       $0x38,%rsp
063b56f4 mov       %rcx,0x28(%rsp)
063b56f9 mov       0x28(%rsp),%rcx
063b56fe call      0x0000`0000`063C`38D0
063b5703 add       $0x38,%rsp
063b5707 ret

core::ops::function::FnOnce::call_once<void (*)(ptr_const$<u8>),tuple$<ptr_const$<u8> > >:
063b5710 sub       $0x38,%rsp
063b5714 mov       %rcx,0x28(%rsp)
063b5719 mov       0x28(%rsp),%rcx
063b571e call      0x0000`0000`063C`3990
063b5723 add       $0x38,%rsp
063b5727 ret

core::ops::function::FnOnce::call_once<void (*)(ptr_mut$<u8>),tuple$<ptr_mut$<u8> > >:
063b5730 sub       $0x38,%rsp
063b5734 mov       %rcx,0x28(%rsp)
063b5739 mov       0x28(%rsp),%rcx
063b573e call      0x0000`0000`063B`5C70
063b5743 add       $0x38,%rsp
063b5747 ret

core::ops::function::FnOnce::call_once<void (*)(ptr_const$<u8>,ptr_mut$<u8>,usize),tuple$<ptr_const$<u8>,ptr_mut$<u8>,usize> >:
063b5750 sub       $0x48,%rsp
063b5754 mov       %rcx,0x28(%rsp)
063b5759 mov       %rdx,0x30(%rsp)
063b575e mov       %r8,0x38(%rsp)
063b5763 mov       0x28(%rsp),%rcx
063b5768 mov       0x30(%rsp),%rdx
063b576d mov       0x38(%rsp),%r8
063b5772 call      0x0000`0000`063B`5B80
063b5777 add       $0x48,%rsp
063b577b ret

core::ops::function::FnOnce::call_once<void (*)(ptr_const$<usize>),tuple$<ptr_const$<usize> > >:
063b5780 sub       $0x38,%rsp
063b5784 mov       %rcx,0x28(%rsp)
063b5789 mov       0x28(%rsp),%rcx
063b578e call      0x0000`0000`063C`3930
063b5793 add       $0x38,%rsp
063b5797 ret

core::ops::function::FnOnce::call_once<core::fmt::USIZE_MARKER::closure_env$0,tuple$<ref$<usize>,ref_mut$<core::fmt::Formatter> > >:
063b57a0 sub       $0x48,%rsp
063b57a4 mov       %rcx,0x38(%rsp)
063b57a9 mov       %rdx,0x40(%rsp)
063b57ae mov       0x38(%rsp),%rdx
063b57b3 mov       0x40(%rsp),%r8
063b57b8 lea       0x30(%rsp),%rcx
063b57bd call      0x0000`0000`063B`EC10
063b57c2 mov       %al,0x2F(%rsp)
063b57c6 jmp       0x0000`0000`063B`57C8
063b57c8 mov       0x2F(%rsp),%al
063b57cc and       $1,%al
063b57ce movzbl    %al,%eax
063b57d1 add       $0x48,%rsp
063b57d5 ret

core::ops::function::FnOnce::call_once<enum$<core::cmp::Ordering> (*)(ref$<usize>,ref$<usize>),tuple$<ref$<usize>,ref$<usize> > >:
063b57e0 sub       $0x48,%rsp
063b57e4 mov       %rcx,0x30(%rsp)
063b57e9 mov       %rdx,0x38(%rsp)
063b57ee mov       0x30(%rsp),%rcx
063b57f3 mov       0x38(%rsp),%rdx
063b57f8 call      0x0000`0000`063C`8610
063b57fd mov       %al,0x2F(%rsp)
063b5801 mov       0x2F(%rsp),%al
063b5805 add       $0x48,%rsp
063b5809 ret

core::ptr::drop_in_place<ref$<usize> >:
063b5810 push      %rax
063b5811 mov       %rcx,(%rsp)
063b5815 pop       %rax
063b5816 ret

core::ptr::drop_in_place<core::fmt::builders::PadAdapter>:
063b5820 push      %rax
063b5821 mov       %rcx,(%rsp)
063b5825 pop       %rax
063b5826 ret

core::ptr::drop_in_place<ref_mut$<core::fmt::builders::PadAdapter> >:
063b5830 push      %rax
063b5831 mov       %rcx,(%rsp)
063b5835 pop       %rax
063b5836 ret

core::ptr::drop_in_place<core::panic::panic_info::impl$0::internal_constructor::NoPayload>:
063b5840 push      %rax
063b5841 mov       %rcx,(%rsp)
063b5845 pop       %rax
063b5846 ret

core::num::impl$6::is_utf8_char_boundary:
063b5850 push      %rax
063b5851 mov       %cl,7(%rsp)
063b5855 cmp       $0xC0,%cl
063b5858 setge     %al
063b585b and       $1,%al
063b585d movzbl    %al,%eax
063b5860 pop       %rcx
063b5861 ret

core::hint::unreachable_unchecked:
063b5870 ud2

core::intrinsics::is_aligned_and_not_null<u8>:
063b5880 sub       $0x38,%rsp
063b5884 mov       %rcx,0x20(%rsp)
063b5889 mov       %rcx,0x30(%rsp)
063b588e call      0x0000`0000`063B`63A0
063b5893 mov       %al,0x2E(%rsp)
063b5897 mov       0x2E(%rsp),%al
063b589b xor       $0xFF,%al
063b589d test      $1,%al
063b589f jne       0x0000`0000`063B`58A8
063b58a1 movb      $0,0x2F(%rsp)
063b58a6 jmp       0x0000`0000`063B`58EA
063b58a8 mov       $1,%eax
063b58ad cmp       $0,%rax
063b58b1 sete      %al
063b58b4 test      $1,%al
063b58b6 jne       0x0000`0000`063B`58D0
063b58b8 mov       0x20(%rsp),%rax
063b58bd and       $0,%rax
063b58c1 cmp       $0,%rax
063b58c5 sete      %al
063b58c8 and       $1,%al
063b58ca mov       %al,0x2F(%rsp)
063b58ce jmp       0x0000`0000`063B`58EA
063b58d0 lea       0x63C`F4F0,%rcx
063b58d7 lea       0x63C`F5B8,%r8
063b58de mov       $0x39,%edx
063b58e3 call      0x0000`0000`063B`9FF0
063b58e8 ud2
063b58ea mov       0x2F(%rsp),%al
063b58ee and       $1,%al
063b58f0 movzbl    %al,%eax
063b58f3 add       $0x38,%rsp
063b58f7 ret

core::intrinsics::is_aligned_and_not_null<array$<usize,4> >:
063b5900 sub       $0x38,%rsp
063b5904 mov       %rcx,0x20(%rsp)
063b5909 mov       %rcx,0x30(%rsp)
063b590e call      0x0000`0000`063B`6430
063b5913 mov       %al,0x2E(%rsp)
063b5917 mov       0x2E(%rsp),%al
063b591b xor       $0xFF,%al
063b591d test      $1,%al
063b591f jne       0x0000`0000`063B`5928
063b5921 movb      $0,0x2F(%rsp)
063b5926 jmp       0x0000`0000`063B`596A
063b5928 mov       $8,%eax
063b592d cmp       $0,%rax
063b5931 sete      %al
063b5934 test      $1,%al
063b5936 jne       0x0000`0000`063B`5950
063b5938 mov       0x20(%rsp),%rax
063b593d and       $7,%rax
063b5941 cmp       $0,%rax
063b5945 sete      %al
063b5948 and       $1,%al
063b594a mov       %al,0x2F(%rsp)
063b594e jmp       0x0000`0000`063B`596A
063b5950 lea       0x63C`F4F0,%rcx
063b5957 lea       0x63C`F5B8,%r8
063b595e mov       $0x39,%edx
063b5963 call      0x0000`0000`063B`9FF0
063b5968 ud2
063b596a mov       0x2F(%rsp),%al
063b596e and       $1,%al
063b5970 movzbl    %al,%eax
063b5973 add       $0x38,%rsp
063b5977 ret

core::intrinsics::is_aligned_and_not_null<usize>:
063b5980 sub       $0x38,%rsp
063b5984 mov       %rcx,0x20(%rsp)
063b5989 mov       %rcx,0x30(%rsp)
063b598e call      0x0000`0000`063B`6370
063b5993 mov       %al,0x2E(%rsp)
063b5997 mov       0x2E(%rsp),%al
063b599b xor       $0xFF,%al
063b599d test      $1,%al
063b599f jne       0x0000`0000`063B`59A8
063b59a1 movb      $0,0x2F(%rsp)
063b59a6 jmp       0x0000`0000`063B`59EA
063b59a8 mov       $8,%eax
063b59ad cmp       $0,%rax
063b59b1 sete      %al
063b59b4 test      $1,%al
063b59b6 jne       0x0000`0000`063B`59D0
063b59b8 mov       0x20(%rsp),%rax
063b59bd and       $7,%rax
063b59c1 cmp       $0,%rax
063b59c5 sete      %al
063b59c8 and       $1,%al
063b59ca mov       %al,0x2F(%rsp)
063b59ce jmp       0x0000`0000`063B`59EA
063b59d0 lea       0x63C`F4F0,%rcx
063b59d7 lea       0x63C`F5B8,%r8
063b59de mov       $0x39,%edx
063b59e3 call      0x0000`0000`063B`9FF0
063b59e8 ud2
063b59ea mov       0x2F(%rsp),%al
063b59ee and       $1,%al
063b59f0 movzbl    %al,%eax
063b59f3 add       $0x38,%rsp
063b59f7 ret

core::intrinsics::is_nonoverlapping<u8>:
063b5a00 sub       $0x98,%rsp
063b5a07 mov       %r8,0x48(%rsp)
063b5a0c mov       %rdx,0x50(%rsp)
063b5a11 mov       %rcx,0x58(%rsp)
063b5a16 mov       %rcx,0x68(%rsp)
063b5a1b mov       %rdx,0x70(%rsp)
063b5a20 mov       %r8,0x78(%rsp)
063b5a25 mov       %rcx,0x80(%rsp)
063b5a2d mov       %rdx,0x88(%rsp)
063b5a35 mov       0x48(%rsp),%rdx
063b5a3a mov       $1,%ecx
063b5a3f call      0x0000`0000`063C`8410
063b5a44 mov       %rax,0x38(%rsp)
063b5a49 mov       %rdx,0x40(%rsp)
063b5a4e mov       0x40(%rsp),%rdx
063b5a53 mov       0x38(%rsp),%rcx
063b5a58 lea       0x63C`F5D0,%r8
063b5a5f call      0x0000`0000`063B`9680
063b5a64 mov       %rax,0x30(%rsp)
063b5a69 mov       %rax,0x90(%rsp)
063b5a71 mov       0x58(%rsp),%rax
063b5a76 mov       0x50(%rsp),%rcx
063b5a7b cmp       %rcx,%rax
063b5a7e ja        0x0000`0000`063B`5A9B
063b5a80 mov       0x58(%rsp),%rcx
063b5a85 mov       0x50(%rsp),%rax
063b5a8a sub       %rcx,%rax
063b5a8d mov       %rax,0x28(%rsp)
063b5a92 setb      %al
063b5a95 test      $1,%al
063b5a97 jne       0x0000`0000`063B`5B00
063b5a99 jmp       0x0000`0000`063B`5AF4
063b5a9b mov       0x50(%rsp),%rcx
063b5aa0 mov       0x58(%rsp),%rax
063b5aa5 sub       %rcx,%rax
063b5aa8 mov       %rax,0x20(%rsp)
063b5aad setb      %al
063b5ab0 test      $1,%al
063b5ab2 jne       0x0000`0000`063B`5AC0
063b5ab4 mov       0x20(%rsp),%rax
063b5ab9 mov       %rax,0x60(%rsp)
063b5abe jmp       0x0000`0000`063B`5ADA
063b5ac0 lea       0x63C`F3B0,%rcx
063b5ac7 lea       0x63C`F5E8,%r8
063b5ace mov       $0x21,%edx
063b5ad3 call      0x0000`0000`063B`9FF0
063b5ad8 ud2
063b5ada mov       0x30(%rsp),%rax
063b5adf cmp       %rax,0x60(%rsp)
063b5ae4 setae     %al
063b5ae7 and       $1,%al
063b5ae9 movzbl    %al,%eax
063b5aec add       $0x98,%rsp
063b5af3 ret
063b5af4 mov       0x28(%rsp),%rax
063b5af9 mov       %rax,0x60(%rsp)
063b5afe jmp       0x0000`0000`063B`5ADA
063b5b00 lea       0x63C`F3B0,%rcx
063b5b07 lea       0x63C`F600,%r8
063b5b0e mov       $0x21,%edx
063b5b13 call      0x0000`0000`063B`9FF0
063b5b18 ud2

core::intrinsics::copy_nonoverlapping<u8>:
063b5b20 sub       $0x68,%rsp
063b5b24 mov       %r8,0x20(%rsp)
063b5b29 mov       %rdx,0x28(%rsp)
063b5b2e mov       %rcx,0x30(%rsp)
063b5b33 mov       %rcx,0x50(%rsp)
063b5b38 mov       %rdx,0x58(%rsp)
063b5b3d mov       %r8,0x60(%rsp)
063b5b42 mov       %rcx,0x38(%rsp)
063b5b47 mov       %rdx,0x40(%rsp)
063b5b4c mov       %r8,0x48(%rsp)
063b5b51 lea       0x38(%rsp),%rcx
063b5b56 call      0x0000`0000`063B`5D30
063b5b5b mov       0x30(%rsp),%rdx
063b5b60 mov       0x28(%rsp),%rcx
063b5b65 mov       0x20(%rsp),%r8
063b5b6a shl       $0,%r8
063b5b6e call      0x0000`0000`063C`BD50
063b5b73 add       $0x68,%rsp
063b5b77 ret

core::intrinsics::copy_nonoverlapping::runtime_check<u8>:
063b5b80 sub       $0x68,%rsp
063b5b84 mov       %r8,0x30(%rsp)
063b5b89 mov       %rdx,0x38(%rsp)
063b5b8e mov       %rcx,0x40(%rsp)
063b5b93 mov       %rcx,0x50(%rsp)
063b5b98 mov       %rdx,0x58(%rsp)
063b5b9d mov       %r8,0x60(%rsp)
063b5ba2 call      0x0000`0000`063B`5880
063b5ba7 mov       %al,0x4D(%rsp)
063b5bab mov       0x4D(%rsp),%al
063b5baf xor       $0xFF,%al
063b5bb1 test      $1,%al
063b5bb3 jne       0x0000`0000`063B`5BC5
063b5bb5 mov       0x38(%rsp),%rcx
063b5bba call      0x0000`0000`063B`5880
063b5bbf mov       %al,0x2F(%rsp)
063b5bc3 jmp       0x0000`0000`063B`5BD3
063b5bc5 movb      $1,0x4F(%rsp)
063b5bca testb     $1,0x4F(%rsp)
063b5bcf jne       0x0000`0000`063B`5BFB
063b5bd1 jmp       0x0000`0000`063B`5BE1
063b5bd3 mov       0x2F(%rsp),%al
063b5bd7 xor       $0xFF,%al
063b5bd9 and       $1,%al
063b5bdb mov       %al,0x4F(%rsp)
063b5bdf jmp       0x0000`0000`063B`5BCA
063b5be1 mov       0x30(%rsp),%r8
063b5be6 mov       0x38(%rsp),%rdx
063b5beb mov       0x40(%rsp),%rcx
063b5bf0 call      0x0000`0000`063B`5A00
063b5bf5 mov       %al,0x2E(%rsp)
063b5bf9 jmp       0x0000`0000`063B`5C09
063b5bfb movb      $1,0x4E(%rsp)
063b5c00 testb     $1,0x4E(%rsp)
063b5c05 jne       0x0000`0000`063B`5C1C
063b5c07 jmp       0x0000`0000`063B`5C17
063b5c09 mov       0x2E(%rsp),%al
063b5c0d xor       $0xFF,%al
063b5c0f and       $1,%al
063b5c11 mov       %al,0x4E(%rsp)
063b5c15 jmp       0x0000`0000`063B`5C00
063b5c17 add       $0x68,%rsp
063b5c1b ret
063b5c1c ud2
063b5c1e ud2

core::intrinsics::write_bytes<u8>:
063b5c20 sub       $0x58,%rsp
063b5c24 mov       %r8,0x20(%rsp)
063b5c29 mov       %dl,0x2F(%rsp)
063b5c2d mov       %rcx,0x30(%rsp)
063b5c32 mov       %rcx,0x40(%rsp)
063b5c37 mov       %dl,0x4F(%rsp)
063b5c3b mov       %r8,0x50(%rsp)
063b5c40 mov       %rcx,0x38(%rsp)
063b5c45 mov       0x38(%rsp),%rcx
063b5c4a call      0x0000`0000`063B`5CF0
063b5c4f mov       0x2F(%rsp),%dl
063b5c53 mov       0x30(%rsp),%rcx
063b5c58 mov       0x20(%rsp),%r8
063b5c5d shl       $0,%r8
063b5c61 call      0x0000`0000`063C`BCC0
063b5c66 add       $0x58,%rsp
063b5c6a ret

core::intrinsics::write_bytes::runtime_check<u8>:
063b5c70 sub       $0x68,%rsp
063b5c74 mov       %rcx,0x60(%rsp)
063b5c79 call      0x0000`0000`063B`5880
063b5c7e mov       %al,0x2F(%rsp)
063b5c82 mov       0x2F(%rsp),%al
063b5c86 xor       $0xFF,%al
063b5c88 test      $1,%al
063b5c8a jne       0x0000`0000`063B`5C91
063b5c8c add       $0x68,%rsp
063b5c90 ret
063b5c91 lea       0x30(%rsp),%rcx
063b5c96 lea       0x63C`F648,%rdx
063b5c9d mov       $1,%r8d
063b5ca3 lea       0x63C`F530,%r9
063b5caa xor       %eax,%eax
063b5cac movq      $0,0x20(%rsp)
063b5cb5 call      0x0000`0000`063B`EFF0
063b5cba lea       0x63C`F658,%rdx
063b5cc1 lea       0x30(%rsp),%rcx
063b5cc6 call      0x0000`0000`063B`A100
063b5ccb ud2

core::intrinsics::const_eval_select<tuple$<ptr_const$<usize> >,void (*)(ptr_const$<usize>),void (*)(ptr_const$<usize>),tuple$<> >:
063b5cd0 sub       $0x38,%rsp
063b5cd4 mov       %rcx,0x20(%rsp)
063b5cd9 call      0x0000`0000`063B`5780
063b5cde jmp       0x0000`0000`063B`5CE0
063b5ce0 add       $0x38,%rsp
063b5ce4 ret

core::intrinsics::const_eval_select<tuple$<ptr_mut$<u8> >,void (*)(ptr_mut$<u8>),void (*)(ptr_mut$<u8>),tuple$<> >:
063b5cf0 sub       $0x38,%rsp
063b5cf4 mov       %rcx,0x20(%rsp)
063b5cf9 call      0x0000`0000`063B`5730
063b5cfe jmp       0x0000`0000`063B`5D00
063b5d00 add       $0x38,%rsp
063b5d04 ret

core::intrinsics::const_eval_select<tuple$<ptr_const$<array$<usize,4> > >,void (*)(ptr_const$<array$<usize,4> >),void (*)(ptr_const$<array$<usize,4> >),tuple$<> >:
063b5d10 sub       $0x38,%rsp
063b5d14 mov       %rcx,0x20(%rsp)
063b5d19 call      0x0000`0000`063B`56F0
063b5d1e jmp       0x0000`0000`063B`5D20
063b5d20 add       $0x38,%rsp
063b5d24 ret

core::intrinsics::const_eval_select<tuple$<ptr_const$<u8>,ptr_mut$<u8>,usize>,void (*)(ptr_const$<u8>,ptr_mut$<u8>,usize),void (*)(ptr_const$<u8>,ptr_mut$<u8>,usize),tuple$<> >:
063b5d30 sub       $0x48,%rsp
063b5d34 mov       (%rcx),%rax
063b5d37 mov       %rax,0x20(%rsp)
063b5d3c mov       8(%rcx),%rax
063b5d40 mov       %rax,0x28(%rsp)
063b5d45 mov       0x10(%rcx),%rax
063b5d49 mov       %rax,0x30(%rsp)
063b5d4e mov       0x20(%rsp),%rcx
063b5d53 mov       0x28(%rsp),%rdx
063b5d58 mov       0x30(%rsp),%r8
063b5d5d call      0x0000`0000`063B`5750
063b5d62 jmp       0x0000`0000`063B`5D64
063b5d64 add       $0x48,%rsp
063b5d68 ret

core::intrinsics::const_eval_select<tuple$<ptr_const$<u8>,usize>,usize (*)(ptr_const$<u8>,usize),usize (*)(ptr_const$<u8>,usize),usize>:
063b5d70 sub       $0x48,%rsp
063b5d74 mov       %rcx,0x28(%rsp)
063b5d79 mov       %rdx,0x30(%rsp)
063b5d7e call      0x0000`0000`063B`56C0
063b5d83 mov       %rax,0x20(%rsp)
063b5d88 jmp       0x0000`0000`063B`5D8A
063b5d8a mov       0x20(%rsp),%rax
063b5d8f add       $0x48,%rsp
063b5d93 ret

core::intrinsics::const_eval_select<tuple$<ptr_const$<u8> >,void (*)(ptr_const$<u8>),void (*)(ptr_const$<u8>),tuple$<> >:
063b5da0 sub       $0x38,%rsp
063b5da4 mov       %rcx,0x20(%rsp)
063b5da9 call      0x0000`0000`063B`5710
063b5dae jmp       0x0000`0000`063B`5DB0
063b5db0 add       $0x38,%rsp
063b5db4 ret

core::mem::size_of_val<slice$<u8> >:
063b5dc0 sub       $0x20,%rsp
063b5dc4 mov       %rcx,8(%rsp)
063b5dc9 mov       %rdx,0x10(%rsp)
063b5dce shl       $0,%rdx
063b5dd2 mov       %rdx,0x18(%rsp)
063b5dd7 mov       0x18(%rsp),%rax
063b5ddc mov       %rax,(%rsp)
063b5de0 mov       (%rsp),%rax
063b5de4 add       $0x20,%rsp
063b5de8 ret

core::mem::swap<usize>:
063b5df0 sub       $0x48,%rsp
063b5df4 mov       %rdx,0x28(%rsp)
063b5df9 mov       %rcx,0x30(%rsp)
063b5dfe mov       %rcx,0x38(%rsp)
063b5e03 mov       %rdx,0x40(%rsp)
063b5e08 jmp       0x0000`0000`063B`5E0A
063b5e0a mov       $8,%eax
063b5e0f cmp       $0,%rax
063b5e13 sete      %al
063b5e16 test      $1,%al
063b5e18 jne       0x0000`0000`063B`5E2B
063b5e1a mov       $8,%eax
063b5e1f shr       $3,%rax
063b5e23 cmp       $4,%rax
063b5e27 ja        0x0000`0000`063B`5E56
063b5e29 jmp       0x0000`0000`063B`5E45
063b5e2b lea       0x63C`F4D0,%rcx
063b5e32 lea       0x63C`F6E8,%r8
063b5e39 mov       $0x19,%edx
063b5e3e call      0x0000`0000`063B`9FF0
063b5e43 ud2
063b5e45 mov       0x28(%rsp),%rdx
063b5e4a mov       0x30(%rsp),%rcx
063b5e4f call      0x0000`0000`063B`5F30
063b5e54 jmp       0x0000`0000`063B`5E6B
063b5e56 mov       0x28(%rsp),%rdx
063b5e5b mov       0x30(%rsp),%rcx
063b5e60 mov       $1,%r8d
063b5e66 call      0x0000`0000`063B`6AE0
063b5e6b add       $0x48,%rsp
063b5e6f ret

core::mem::swap_simple<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b5e70 sub       $0x58,%rsp
063b5e74 mov       %rdx,0x28(%rsp)
063b5e79 mov       %rcx,0x30(%rsp)
063b5e7e mov       %rcx,0x40(%rsp)
063b5e83 mov       %rdx,0x48(%rsp)
063b5e88 call      0x0000`0000`063B`72A0
063b5e8d mov       %al,0x3F(%rsp)
063b5e91 mov       %al,0x56(%rsp)
063b5e95 mov       0x28(%rsp),%rcx
063b5e9a call      0x0000`0000`063B`72A0
063b5e9f mov       %al,0x27(%rsp)
063b5ea3 mov       %al,0x57(%rsp)
063b5ea7 mov       0x27(%rsp),%dl
063b5eab mov       0x30(%rsp),%rcx
063b5eb0 call      0x0000`0000`063B`7380
063b5eb5 mov       0x3F(%rsp),%dl
063b5eb9 mov       0x28(%rsp),%rcx
063b5ebe call      0x0000`0000`063B`7380
063b5ec3 add       $0x58,%rsp
063b5ec7 ret

core::mem::swap_simple<core::mem::maybe_uninit::MaybeUninit<usize> >:
063b5ed0 sub       $0x68,%rsp
063b5ed4 mov       %rdx,0x30(%rsp)
063b5ed9 mov       %rcx,0x38(%rsp)
063b5ede mov       %rcx,0x48(%rsp)
063b5ee3 mov       %rdx,0x50(%rsp)
063b5ee8 call      0x0000`0000`063B`71B0
063b5eed mov       %rax,0x40(%rsp)
063b5ef2 mov       %rax,0x58(%rsp)
063b5ef7 mov       0x30(%rsp),%rcx
063b5efc call      0x0000`0000`063B`71B0
063b5f01 mov       %rax,0x28(%rsp)
063b5f06 mov       %rax,0x60(%rsp)
063b5f0b mov       0x28(%rsp),%rdx
063b5f10 mov       0x38(%rsp),%rcx
063b5f15 call      0x0000`0000`063B`7360
063b5f1a mov       0x40(%rsp),%rdx
063b5f1f mov       0x30(%rsp),%rcx
063b5f24 call      0x0000`0000`063B`7360
063b5f29 add       $0x68,%rsp
063b5f2d ret

core::mem::swap_simple<usize>:
063b5f30 sub       $0x68,%rsp
063b5f34 mov       %rdx,0x30(%rsp)
063b5f39 mov       %rcx,0x38(%rsp)
063b5f3e mov       %rcx,0x48(%rsp)
063b5f43 mov       %rdx,0x50(%rsp)
063b5f48 call      0x0000`0000`063B`72F0
063b5f4d mov       %rax,0x40(%rsp)
063b5f52 mov       %rax,0x58(%rsp)
063b5f57 mov       0x30(%rsp),%rcx
063b5f5c call      0x0000`0000`063B`72F0
063b5f61 mov       %rax,0x28(%rsp)
063b5f66 mov       %rax,0x60(%rsp)
063b5f6b mov       0x28(%rsp),%rdx
063b5f70 mov       0x38(%rsp),%rcx
063b5f75 call      0x0000`0000`063B`73A0
063b5f7a mov       0x40(%rsp),%rdx
063b5f7f mov       0x30(%rsp),%rcx
063b5f84 call      0x0000`0000`063B`73A0
063b5f89 add       $0x68,%rsp
063b5f8d ret

core::mem::replace<enum$<core::fmt::rt::v1::Alignment> >:
063b5f90 sub       $0x48,%rsp
063b5f94 mov       %dl,0x27(%rsp)
063b5f98 mov       %rcx,0x28(%rsp)
063b5f9d mov       %rcx,0x38(%rsp)
063b5fa2 mov       %dl,0x46(%rsp)
063b5fa6 call      0x0000`0000`063B`7250
063b5fab mov       %al,0x37(%rsp)
063b5faf mov       %al,0x47(%rsp)
063b5fb3 mov       0x27(%rsp),%dl
063b5fb7 mov       0x28(%rsp),%rcx
063b5fbc call      0x0000`0000`063B`73C0
063b5fc1 mov       0x37(%rsp),%al
063b5fc5 add       $0x48,%rsp
063b5fc9 ret

core::mem::replace<char>:
063b5fd0 sub       $0x48,%rsp
063b5fd4 mov       %edx,0x24(%rsp)
063b5fd8 mov       %rcx,0x28(%rsp)
063b5fdd mov       %rcx,0x38(%rsp)
063b5fe2 mov       %edx,0x40(%rsp)
063b5fe6 call      0x0000`0000`063B`7200
063b5feb mov       %eax,0x34(%rsp)
063b5fef mov       %eax,0x44(%rsp)
063b5ff3 mov       0x24(%rsp),%edx
063b5ff7 mov       0x28(%rsp),%rcx
063b5ffc call      0x0000`0000`063B`7340
063b6001 mov       0x34(%rsp),%eax
063b6005 add       $0x48,%rsp
063b6009 ret

core::mem::replace<usize>:
063b6010 sub       $0x58,%rsp
063b6014 mov       %rdx,0x28(%rsp)
063b6019 mov       %rcx,0x30(%rsp)
063b601e mov       %rcx,0x40(%rsp)
063b6023 mov       %rdx,0x48(%rsp)
063b6028 call      0x0000`0000`063B`72F0
063b602d mov       %rax,0x38(%rsp)
063b6032 mov       %rax,0x50(%rsp)
063b6037 mov       0x28(%rsp),%rdx
063b603c mov       0x30(%rsp),%rcx
063b6041 call      0x0000`0000`063B`73A0
063b6046 mov       0x38(%rsp),%rax
063b604b add       $0x58,%rsp
063b604f ret

core::ptr::metadata::metadata<slice$<u8> >:
063b6050 sub       $0x20,%rsp
063b6054 mov       %rcx,0x10(%rsp)
063b6059 mov       %rdx,0x18(%rsp)
063b605e mov       %rcx,(%rsp)
063b6062 mov       %rdx,8(%rsp)
063b6067 mov       8(%rsp),%rax
063b606c add       $0x20,%rsp
063b6070 ret

core::ptr::metadata::metadata<slice$<usize> >:
063b6080 sub       $0x20,%rsp
063b6084 mov       %rcx,0x10(%rsp)
063b6089 mov       %rdx,0x18(%rsp)
063b608e mov       %rcx,(%rsp)
063b6092 mov       %rdx,8(%rsp)
063b6097 mov       8(%rsp),%rax
063b609c add       $0x20,%rsp
063b60a0 ret

core::ptr::metadata::metadata<slice$<core::mem::maybe_uninit::MaybeUninit<u8> > >:
063b60b0 sub       $0x20,%rsp
063b60b4 mov       %rcx,0x10(%rsp)
063b60b9 mov       %rdx,0x18(%rsp)
063b60be mov       %rcx,(%rsp)
063b60c2 mov       %rdx,8(%rsp)
063b60c7 mov       8(%rsp),%rax
063b60cc add       $0x20,%rsp
063b60d0 ret

core::ptr::metadata::from_raw_parts<slice$<usize> >:
063b60e0 sub       $0x30,%rsp
063b60e4 mov       %rcx,0x20(%rsp)
063b60e9 mov       %rdx,0x28(%rsp)
063b60ee mov       %rcx,0x10(%rsp)
063b60f3 mov       %rdx,0x18(%rsp)
063b60f8 mov       0x10(%rsp),%rcx
063b60fd mov       0x18(%rsp),%rax
063b6102 mov       %rcx,(%rsp)
063b6106 mov       %rax,8(%rsp)
063b610b mov       (%rsp),%rax
063b610f mov       8(%rsp),%rdx
063b6114 add       $0x30,%rsp
063b6118 ret

core::ptr::metadata::from_raw_parts<slice$<core::mem::maybe_uninit::MaybeUninit<u8> > >:
063b6120 sub       $0x30,%rsp
063b6124 mov       %rcx,0x20(%rsp)
063b6129 mov       %rdx,0x28(%rsp)
063b612e mov       %rcx,0x10(%rsp)
063b6133 mov       %rdx,0x18(%rsp)
063b6138 mov       0x10(%rsp),%rcx
063b613d mov       0x18(%rsp),%rax
063b6142 mov       %rcx,(%rsp)
063b6146 mov       %rax,8(%rsp)
063b614b mov       (%rsp),%rax
063b614f mov       8(%rsp),%rdx
063b6154 add       $0x30,%rsp
063b6158 ret

core::ptr::metadata::from_raw_parts<slice$<array$<usize,4> > >:
063b6160 sub       $0x30,%rsp
063b6164 mov       %rcx,0x20(%rsp)
063b6169 mov       %rdx,0x28(%rsp)
063b616e mov       %rcx,0x10(%rsp)
063b6173 mov       %rdx,0x18(%rsp)
063b6178 mov       0x10(%rsp),%rcx
063b617d mov       0x18(%rsp),%rax
063b6182 mov       %rcx,(%rsp)
063b6186 mov       %rax,8(%rsp)
063b618b mov       (%rsp),%rax
063b618f mov       8(%rsp),%rdx
063b6194 add       $0x30,%rsp
063b6198 ret

core::ptr::metadata::from_raw_parts<slice$<u8> >:
063b61a0 sub       $0x30,%rsp
063b61a4 mov       %rcx,0x20(%rsp)
063b61a9 mov       %rdx,0x28(%rsp)
063b61ae mov       %rcx,0x10(%rsp)
063b61b3 mov       %rdx,0x18(%rsp)
063b61b8 mov       0x10(%rsp),%rcx
063b61bd mov       0x18(%rsp),%rax
063b61c2 mov       %rcx,(%rsp)
063b61c6 mov       %rax,8(%rsp)
063b61cb mov       (%rsp),%rax
063b61cf mov       8(%rsp),%rdx
063b61d4 add       $0x30,%rsp
063b61d8 ret

core::ptr::metadata::from_raw_parts_mut<slice$<u8> >:
063b61e0 sub       $0x30,%rsp
063b61e4 mov       %rcx,0x20(%rsp)
063b61e9 mov       %rdx,0x28(%rsp)
063b61ee mov       %rcx,0x10(%rsp)
063b61f3 mov       %rdx,0x18(%rsp)
063b61f8 mov       0x10(%rsp),%rcx
063b61fd mov       0x18(%rsp),%rax
063b6202 mov       %rcx,(%rsp)
063b6206 mov       %rax,8(%rsp)
063b620b mov       (%rsp),%rax
063b620f mov       8(%rsp),%rdx
063b6214 add       $0x30,%rsp
063b6218 ret

core::ptr::non_null::NonNull<core::mem::maybe_uninit::MaybeUninit<u8> >::new_unchecked<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b6220 sub       $0x10,%rsp
063b6224 mov       %rcx,8(%rsp)
063b6229 mov       %rcx,(%rsp)
063b622d mov       (%rsp),%rax
063b6231 add       $0x10,%rsp
063b6235 ret

core::ptr::non_null::NonNull<core::fmt::rt::v1::Argument>::new_unchecked<core::fmt::rt::v1::Argument>:
063b6240 sub       $0x10,%rsp
063b6244 mov       %rcx,8(%rsp)
063b6249 mov       %rcx,(%rsp)
063b624d mov       (%rsp),%rax
063b6251 add       $0x10,%rsp
063b6255 ret

core::ptr::non_null::NonNull<usize>::new_unchecked<usize>:
063b6260 sub       $0x10,%rsp
063b6264 mov       %rcx,8(%rsp)
063b6269 mov       %rcx,(%rsp)
063b626d mov       (%rsp),%rax
063b6271 add       $0x10,%rsp
063b6275 ret

core::ptr::non_null::NonNull<u8>::new_unchecked<u8>:
063b6280 sub       $0x10,%rsp
063b6284 mov       %rcx,8(%rsp)
063b6289 mov       %rcx,(%rsp)
063b628d mov       (%rsp),%rax
063b6291 add       $0x10,%rsp
063b6295 ret

core::ptr::non_null::NonNull<array$<usize,4> >::new_unchecked<array$<usize,4> >:
063b62a0 sub       $0x10,%rsp
063b62a4 mov       %rcx,8(%rsp)
063b62a9 mov       %rcx,(%rsp)
063b62ad mov       (%rsp),%rax
063b62b1 add       $0x10,%rsp
063b62b5 ret

core::ptr::non_null::NonNull<core::fmt::ArgumentV1>::new_unchecked<core::fmt::ArgumentV1>:
063b62c0 sub       $0x10,%rsp
063b62c4 mov       %rcx,8(%rsp)
063b62c9 mov       %rcx,(%rsp)
063b62cd mov       (%rsp),%rax
063b62d1 add       $0x10,%rsp
063b62d5 ret

core::ptr::non_null::NonNull<tuple$<u8,u8> >::new_unchecked<tuple$<u8,u8> >:
063b62e0 sub       $0x10,%rsp
063b62e4 mov       %rcx,8(%rsp)
063b62e9 mov       %rcx,(%rsp)
063b62ed mov       (%rsp),%rax
063b62f1 add       $0x10,%rsp
063b62f5 ret

core::ptr::non_null::NonNull<core::fmt::rt::v1::Argument>::as_ptr<core::fmt::rt::v1::Argument>:
063b6300 push      %rax
063b6301 mov       %rcx,%rax
063b6304 mov       %rax,(%rsp)
063b6308 pop       %rcx
063b6309 ret

core::ptr::non_null::NonNull<tuple$<u8,u8> >::as_ptr<tuple$<u8,u8> >:
063b6310 push      %rax
063b6311 mov       %rcx,%rax
063b6314 mov       %rax,(%rsp)
063b6318 pop       %rcx
063b6319 ret

core::ptr::non_null::NonNull<usize>::as_ptr<usize>:
063b6320 push      %rax
063b6321 mov       %rcx,%rax
063b6324 mov       %rax,(%rsp)
063b6328 pop       %rcx
063b6329 ret

core::ptr::non_null::NonNull<array$<usize,4> >::as_ptr<array$<usize,4> >:
063b6330 push      %rax
063b6331 mov       %rcx,%rax
063b6334 mov       %rax,(%rsp)
063b6338 pop       %rcx
063b6339 ret

core::ptr::non_null::NonNull<u8>::as_ptr<u8>:
063b6340 push      %rax
063b6341 mov       %rcx,%rax
063b6344 mov       %rax,(%rsp)
063b6348 pop       %rcx
063b6349 ret

core::ptr::non_null::NonNull<core::mem::maybe_uninit::MaybeUninit<u8> >::as_ptr<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b6350 push      %rax
063b6351 mov       %rcx,%rax
063b6354 mov       %rax,(%rsp)
063b6358 pop       %rcx
063b6359 ret

core::ptr::non_null::NonNull<core::fmt::ArgumentV1>::as_ptr<core::fmt::ArgumentV1>:
063b6360 push      %rax
063b6361 mov       %rcx,%rax
063b6364 mov       %rax,(%rsp)
063b6368 pop       %rcx
063b6369 ret

core::ptr::const_ptr::impl$0::is_null<usize>:
063b6370 sub       $0x38,%rsp
063b6374 mov       %rcx,0x30(%rsp)
063b6379 mov       %rcx,0x28(%rsp)
063b637e mov       0x28(%rsp),%rcx
063b6383 xor       %eax,%eax
063b6385 mov       %eax,%edx
063b6387 call      0x0000`0000`063B`64E0
063b638c mov       %al,0x27(%rsp)
063b6390 mov       0x27(%rsp),%al
063b6394 and       $1,%al
063b6396 movzbl    %al,%eax
063b6399 add       $0x38,%rsp
063b639d ret

core::ptr::const_ptr::impl$0::is_null<u8>:
063b63a0 sub       $0x38,%rsp
063b63a4 mov       %rcx,0x28(%rsp)
063b63a9 mov       %rcx,0x30(%rsp)
063b63ae mov       0x28(%rsp),%rcx
063b63b3 xor       %eax,%eax
063b63b5 mov       %eax,%edx
063b63b7 call      0x0000`0000`063B`64E0
063b63bc mov       %al,0x27(%rsp)
063b63c0 mov       0x27(%rsp),%al
063b63c4 and       $1,%al
063b63c6 movzbl    %al,%eax
063b63c9 add       $0x38,%rsp
063b63cd ret

core::ptr::const_ptr::impl$0::is_null<core::fmt::rt::v1::Argument>:
063b63d0 sub       $0x38,%rsp
063b63d4 mov       %rcx,0x30(%rsp)
063b63d9 mov       %rcx,0x28(%rsp)
063b63de mov       0x28(%rsp),%rcx
063b63e3 xor       %eax,%eax
063b63e5 mov       %eax,%edx
063b63e7 call      0x0000`0000`063B`64E0
063b63ec mov       %al,0x27(%rsp)
063b63f0 mov       0x27(%rsp),%al
063b63f4 and       $1,%al
063b63f6 movzbl    %al,%eax
063b63f9 add       $0x38,%rsp
063b63fd ret

core::ptr::const_ptr::impl$0::is_null<tuple$<u8,u8> >:
063b6400 sub       $0x38,%rsp
063b6404 mov       %rcx,0x30(%rsp)
063b6409 mov       %rcx,0x28(%rsp)
063b640e mov       0x28(%rsp),%rcx
063b6413 xor       %eax,%eax
063b6415 mov       %eax,%edx
063b6417 call      0x0000`0000`063B`64E0
063b641c mov       %al,0x27(%rsp)
063b6420 mov       0x27(%rsp),%al
063b6424 and       $1,%al
063b6426 movzbl    %al,%eax
063b6429 add       $0x38,%rsp
063b642d ret

core::ptr::const_ptr::impl$0::is_null<array$<usize,4> >:
063b6430 sub       $0x38,%rsp
063b6434 mov       %rcx,0x30(%rsp)
063b6439 mov       %rcx,0x28(%rsp)
063b643e mov       0x28(%rsp),%rcx
063b6443 xor       %eax,%eax
063b6445 mov       %eax,%edx
063b6447 call      0x0000`0000`063B`64E0
063b644c mov       %al,0x27(%rsp)
063b6450 mov       0x27(%rsp),%al
063b6454 and       $1,%al
063b6456 movzbl    %al,%eax
063b6459 add       $0x38,%rsp
063b645d ret

core::ptr::const_ptr::impl$0::is_null<core::fmt::ArgumentV1>:
063b6460 sub       $0x38,%rsp
063b6464 mov       %rcx,0x30(%rsp)
063b6469 mov       %rcx,0x28(%rsp)
063b646e mov       0x28(%rsp),%rcx
063b6473 xor       %eax,%eax
063b6475 mov       %eax,%edx
063b6477 call      0x0000`0000`063B`64E0
063b647c mov       %al,0x27(%rsp)
063b6480 mov       0x27(%rsp),%al
063b6484 and       $1,%al
063b6486 movzbl    %al,%eax
063b6489 add       $0x38,%rsp
063b648d ret

core::ptr::const_ptr::impl$0::cast<u8,tuple$<> >:
063b6490 push      %rax
063b6491 mov       %rcx,%rax
063b6494 mov       %rax,(%rsp)
063b6498 pop       %rcx
063b6499 ret

core::ptr::const_ptr::impl$0::cast<usize,array$<usize,4> >:
063b64a0 push      %rax
063b64a1 mov       %rcx,%rax
063b64a4 mov       %rax,(%rsp)
063b64a8 pop       %rcx
063b64a9 ret

core::ptr::const_ptr::impl$0::cast<usize,tuple$<> >:
063b64b0 push      %rax
063b64b1 mov       %rcx,%rax
063b64b4 mov       %rax,(%rsp)
063b64b8 pop       %rcx
063b64b9 ret

core::ptr::const_ptr::impl$0::cast<core::mem::maybe_uninit::MaybeUninit<u8>,tuple$<> >:
063b64c0 push      %rax
063b64c1 mov       %rcx,%rax
063b64c4 mov       %rax,(%rsp)
063b64c8 pop       %rcx
063b64c9 ret

core::ptr::const_ptr::impl$0::cast<array$<usize,4>,tuple$<> >:
063b64d0 push      %rax
063b64d1 mov       %rcx,%rax
063b64d4 mov       %rax,(%rsp)
063b64d8 pop       %rcx
063b64d9 ret

core::ptr::const_ptr::impl$0::guaranteed_eq<u8>:
063b64e0 sub       $0x20,%rsp
063b64e4 mov       %rcx,8(%rsp)
063b64e9 mov       %rdx,0x10(%rsp)
063b64ee cmp       %rdx,%rcx
063b64f1 sete      %al
063b64f4 and       $1,%al
063b64f6 mov       %al,0x1F(%rsp)
063b64fa mov       0x1F(%rsp),%al
063b64fe mov       %al,7(%rsp)
063b6502 mov       7(%rsp),%al
063b6506 and       $1,%al
063b6508 movzbl    %al,%eax
063b650b add       $0x20,%rsp
063b650f ret

core::ptr::const_ptr::impl$0::align_offset<u8>:
063b6510 sub       $0xB8,%rsp
063b6517 mov       %rdx,0x38(%rsp)
063b651c mov       %rcx,%rax
063b651f mov       0x38(%rsp),%rcx
063b6524 mov       %rax,0x40(%rsp)
063b6529 mov       %rax,0x90(%rsp)
063b6531 mov       %rcx,0x98(%rsp)
063b6539 mov       %rcx,0xA0(%rsp)
063b6541 mov       %rcx,0xA8(%rsp)
063b6549 mov       %rcx,%rax
063b654c shr       $1,%rax
063b654f movabs    $0x5555`5555`5555`5555,%rdx
063b6559 and       %rdx,%rax
063b655c sub       %rax,%rcx
063b655f movabs    $0x3333`3333`3333`3333,%rdx
063b6569 mov       %rcx,%rax
063b656c and       %rdx,%rax
063b656f shr       $2,%rcx
063b6573 and       %rdx,%rcx
063b6576 add       %rcx,%rax
063b6579 mov       %rax,%rcx
063b657c shr       $4,%rcx
063b6580 add       %rcx,%rax
063b6583 movabs    $0xF0F`0F0F`0F0F`0F0F,%rcx
063b658d and       %rcx,%rax
063b6590 movabs    $0x101`0101`0101`0101,%rcx
063b659a imul      %rcx,%rax
063b659e shr       $0x38,%rax
063b65a2 mov       %rax,0xB0(%rsp)
063b65aa mov       0xB0(%rsp),%rax
063b65b2 cmp       $1,%eax
063b65b5 sete      %al
063b65b8 mov       %al,0x4F(%rsp)
063b65bc mov       0x4F(%rsp),%al
063b65c0 xor       $0xFF,%al
063b65c2 test      $1,%al
063b65c4 jne       0x0000`0000`063B`65FC
063b65c6 mov       0x38(%rsp),%rax
063b65cb mov       0x40(%rsp),%rcx
063b65d0 mov       %rcx,0x80(%rsp)
063b65d8 mov       %rax,0x88(%rsp)
063b65e0 mov       0x80(%rsp),%rcx
063b65e8 mov       0x88(%rsp),%rdx
063b65f0 call      0x0000`0000`063B`5D70
063b65f5 mov       %rax,0x30(%rsp)
063b65fa jmp       0x0000`0000`063B`6638
063b65fc lea       0x50(%rsp),%rcx
063b6601 lea       0x63C`F730,%rdx
063b6608 mov       $1,%r8d
063b660e lea       0x63C`F530,%r9
063b6615 xor       %eax,%eax
063b6617 movq      $0,0x20(%rsp)
063b6620 call      0x0000`0000`063B`EFF0
063b6625 lea       0x63C`F7C0,%rdx
063b662c lea       0x50(%rsp),%rcx
063b6631 call      0x0000`0000`063B`A100
063b6636 ud2
063b6638 mov       0x30(%rsp),%rax
063b663d add       $0xB8,%rsp
063b6644 ret

core::ptr::const_ptr::impl$0::align_offset::rt_impl<u8>:
063b6650 sub       $0x38,%rsp
063b6654 mov       %rcx,0x28(%rsp)
063b6659 mov       %rdx,0x30(%rsp)
063b665e call      0x0000`0000`063B`7430
063b6663 mov       %rax,0x20(%rsp)
063b6668 mov       0x20(%rsp),%rax
063b666d add       $0x38,%rsp
063b6671 ret

core::ptr::const_ptr::impl$1::len<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b6680 sub       $0x38,%rsp
063b6684 mov       %rcx,0x28(%rsp)
063b6689 mov       %rdx,0x30(%rsp)
063b668e call      0x0000`0000`063B`60B0
063b6693 mov       %rax,0x20(%rsp)
063b6698 mov       0x20(%rsp),%rax
063b669d add       $0x38,%rsp
063b66a1 ret

core::ptr::const_ptr::impl$1::len<u8>:
063b66b0 sub       $0x38,%rsp
063b66b4 mov       %rcx,0x28(%rsp)
063b66b9 mov       %rdx,0x30(%rsp)
063b66be call      0x0000`0000`063B`6050
063b66c3 mov       %rax,0x20(%rsp)
063b66c8 mov       0x20(%rsp),%rax
063b66cd add       $0x38,%rsp
063b66d1 ret

core::ptr::const_ptr::impl$1::len<usize>:
063b66e0 sub       $0x38,%rsp
063b66e4 mov       %rcx,0x28(%rsp)
063b66e9 mov       %rdx,0x30(%rsp)
063b66ee call      0x0000`0000`063B`6080
063b66f3 mov       %rax,0x20(%rsp)
063b66f8 mov       0x20(%rsp),%rax
063b66fd add       $0x38,%rsp
063b6701 ret

core::ptr::const_ptr::impl$1::as_ptr<core::fmt::ArgumentV1>:
063b6710 sub       $0x10,%rsp
063b6714 mov       %rcx,%rax
063b6717 mov       %rax,(%rsp)
063b671b mov       %rdx,8(%rsp)
063b6720 add       $0x10,%rsp
063b6724 ret

core::ptr::const_ptr::impl$1::as_ptr<str>:
063b6730 sub       $0x10,%rsp
063b6734 mov       %rcx,%rax
063b6737 mov       %rax,(%rsp)
063b673b mov       %rdx,8(%rsp)
063b6740 add       $0x10,%rsp
063b6744 ret

core::ptr::const_ptr::impl$1::as_ptr<u32>:
063b6750 sub       $0x10,%rsp
063b6754 mov       %rcx,%rax
063b6757 mov       %rax,(%rsp)
063b675b mov       %rdx,8(%rsp)
063b6760 add       $0x10,%rsp
063b6764 ret

core::ptr::const_ptr::impl$1::as_ptr<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b6770 sub       $0x10,%rsp
063b6774 mov       %rcx,%rax
063b6777 mov       %rax,(%rsp)
063b677b mov       %rdx,8(%rsp)
063b6780 add       $0x10,%rsp
063b6784 ret

core::ptr::const_ptr::impl$1::as_ptr<u8>:
063b6790 sub       $0x10,%rsp
063b6794 mov       %rcx,%rax
063b6797 mov       %rax,(%rsp)
063b679b mov       %rdx,8(%rsp)
063b67a0 add       $0x10,%rsp
063b67a4 ret

core::ptr::const_ptr::impl$1::as_ptr<usize>:
063b67b0 sub       $0x10,%rsp
063b67b4 mov       %rcx,%rax
063b67b7 mov       %rax,(%rsp)
063b67bb mov       %rdx,8(%rsp)
063b67c0 add       $0x10,%rsp
063b67c4 ret

core::ptr::mut_ptr::impl$0::is_null<core::fmt::ArgumentV1>:
063b67d0 sub       $0x38,%rsp
063b67d4 mov       %rcx,0x30(%rsp)
063b67d9 mov       %rcx,0x28(%rsp)
063b67de mov       0x28(%rsp),%rcx
063b67e3 xor       %eax,%eax
063b67e5 mov       %eax,%edx
063b67e7 call      0x0000`0000`063B`6920
063b67ec mov       %al,0x27(%rsp)
063b67f0 mov       0x27(%rsp),%al
063b67f4 and       $1,%al
063b67f6 movzbl    %al,%eax
063b67f9 add       $0x38,%rsp
063b67fd ret

core::ptr::mut_ptr::impl$0::is_null<core::fmt::rt::v1::Argument>:
063b6800 sub       $0x38,%rsp
063b6804 mov       %rcx,0x30(%rsp)
063b6809 mov       %rcx,0x28(%rsp)
063b680e mov       0x28(%rsp),%rcx
063b6813 xor       %eax,%eax
063b6815 mov       %eax,%edx
063b6817 call      0x0000`0000`063B`6920
063b681c mov       %al,0x27(%rsp)
063b6820 mov       0x27(%rsp),%al
063b6824 and       $1,%al
063b6826 movzbl    %al,%eax
063b6829 add       $0x38,%rsp
063b682d ret

core::ptr::mut_ptr::impl$0::is_null<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b6830 sub       $0x38,%rsp
063b6834 mov       %rcx,0x28(%rsp)
063b6839 mov       %rcx,0x30(%rsp)
063b683e mov       0x28(%rsp),%rcx
063b6843 xor       %eax,%eax
063b6845 mov       %eax,%edx
063b6847 call      0x0000`0000`063B`6920
063b684c mov       %al,0x27(%rsp)
063b6850 mov       0x27(%rsp),%al
063b6854 and       $1,%al
063b6856 movzbl    %al,%eax
063b6859 add       $0x38,%rsp
063b685d ret

core::ptr::mut_ptr::impl$0::is_null<usize>:
063b6860 sub       $0x38,%rsp
063b6864 mov       %rcx,0x30(%rsp)
063b6869 mov       %rcx,0x28(%rsp)
063b686e mov       0x28(%rsp),%rcx
063b6873 xor       %eax,%eax
063b6875 mov       %eax,%edx
063b6877 call      0x0000`0000`063B`6920
063b687c mov       %al,0x27(%rsp)
063b6880 mov       0x27(%rsp),%al
063b6884 and       $1,%al
063b6886 movzbl    %al,%eax
063b6889 add       $0x38,%rsp
063b688d ret

core::ptr::mut_ptr::impl$0::is_null<u8>:
063b6890 sub       $0x38,%rsp
063b6894 mov       %rcx,0x28(%rsp)
063b6899 mov       %rcx,0x30(%rsp)
063b689e mov       0x28(%rsp),%rcx
063b68a3 xor       %eax,%eax
063b68a5 mov       %eax,%edx
063b68a7 call      0x0000`0000`063B`6920
063b68ac mov       %al,0x27(%rsp)
063b68b0 mov       0x27(%rsp),%al
063b68b4 and       $1,%al
063b68b6 movzbl    %al,%eax
063b68b9 add       $0x38,%rsp
063b68bd ret

core::ptr::mut_ptr::impl$0::is_null<array$<usize,4> >:
063b68c0 sub       $0x38,%rsp
063b68c4 mov       %rcx,0x30(%rsp)
063b68c9 mov       %rcx,0x28(%rsp)
063b68ce mov       0x28(%rsp),%rcx
063b68d3 xor       %eax,%eax
063b68d5 mov       %eax,%edx
063b68d7 call      0x0000`0000`063B`6920
063b68dc mov       %al,0x27(%rsp)
063b68e0 mov       0x27(%rsp),%al
063b68e4 and       $1,%al
063b68e6 movzbl    %al,%eax
063b68e9 add       $0x38,%rsp
063b68ed ret

core::ptr::mut_ptr::impl$0::is_null<tuple$<u8,u8> >:
063b68f0 sub       $0x38,%rsp
063b68f4 mov       %rcx,0x30(%rsp)
063b68f9 mov       %rcx,0x28(%rsp)
063b68fe mov       0x28(%rsp),%rcx
063b6903 xor       %eax,%eax
063b6905 mov       %eax,%edx
063b6907 call      0x0000`0000`063B`6920
063b690c mov       %al,0x27(%rsp)
063b6910 mov       0x27(%rsp),%al
063b6914 and       $1,%al
063b6916 movzbl    %al,%eax
063b6919 add       $0x38,%rsp
063b691d ret

core::ptr::mut_ptr::impl$0::guaranteed_eq<u8>:
063b6920 sub       $0x20,%rsp
063b6924 mov       %rcx,8(%rsp)
063b6929 mov       %rdx,0x10(%rsp)
063b692e cmp       %rdx,%rcx
063b6931 sete      %al
063b6934 and       $1,%al
063b6936 mov       %al,0x1F(%rsp)
063b693a mov       0x1F(%rsp),%al
063b693e mov       %al,7(%rsp)
063b6942 mov       7(%rsp),%al
063b6946 and       $1,%al
063b6948 movzbl    %al,%eax
063b694b add       $0x20,%rsp
063b694f ret

core::ptr::slice_from_raw_parts<array$<usize,4> >:
063b6950 sub       $0x58,%rsp
063b6954 mov       %rdx,0x38(%rsp)
063b6959 mov       %rcx,0x48(%rsp)
063b695e mov       %rdx,0x50(%rsp)
063b6963 call      0x0000`0000`063B`64D0
063b6968 mov       %rax,0x40(%rsp)
063b696d mov       0x38(%rsp),%rdx
063b6972 mov       0x40(%rsp),%rcx
063b6977 call      0x0000`0000`063B`6160
063b697c mov       %rax,0x28(%rsp)
063b6981 mov       %rdx,0x30(%rsp)
063b6986 mov       0x30(%rsp),%rdx
063b698b mov       0x28(%rsp),%rax
063b6990 add       $0x58,%rsp
063b6994 ret

core::ptr::slice_from_raw_parts<u8>:
063b69a0 sub       $0x58,%rsp
063b69a4 mov       %rdx,0x38(%rsp)
063b69a9 mov       %rcx,0x48(%rsp)
063b69ae mov       %rdx,0x50(%rsp)
063b69b3 call      0x0000`0000`063B`6490
063b69b8 mov       %rax,0x40(%rsp)
063b69bd mov       0x38(%rsp),%rdx
063b69c2 mov       0x40(%rsp),%rcx
063b69c7 call      0x0000`0000`063B`61A0
063b69cc mov       %rax,0x28(%rsp)
063b69d1 mov       %rdx,0x30(%rsp)
063b69d6 mov       0x30(%rsp),%rdx
063b69db mov       0x28(%rsp),%rax
063b69e0 add       $0x58,%rsp
063b69e4 ret

core::ptr::slice_from_raw_parts<usize>:
063b69f0 sub       $0x58,%rsp
063b69f4 mov       %rdx,0x38(%rsp)
063b69f9 mov       %rcx,0x48(%rsp)
063b69fe mov       %rdx,0x50(%rsp)
063b6a03 call      0x0000`0000`063B`64B0
063b6a08 mov       %rax,0x40(%rsp)
063b6a0d mov       0x38(%rsp),%rdx
063b6a12 mov       0x40(%rsp),%rcx
063b6a17 call      0x0000`0000`063B`60E0
063b6a1c mov       %rax,0x28(%rsp)
063b6a21 mov       %rdx,0x30(%rsp)
063b6a26 mov       0x30(%rsp),%rdx
063b6a2b mov       0x28(%rsp),%rax
063b6a30 add       $0x58,%rsp
063b6a34 ret

core::ptr::slice_from_raw_parts<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b6a40 sub       $0x58,%rsp
063b6a44 mov       %rdx,0x38(%rsp)
063b6a49 mov       %rcx,0x48(%rsp)
063b6a4e mov       %rdx,0x50(%rsp)
063b6a53 call      0x0000`0000`063B`64C0
063b6a58 mov       %rax,0x40(%rsp)
063b6a5d mov       0x38(%rsp),%rdx
063b6a62 mov       0x40(%rsp),%rcx
063b6a67 call      0x0000`0000`063B`6120
063b6a6c mov       %rax,0x28(%rsp)
063b6a71 mov       %rdx,0x30(%rsp)
063b6a76 mov       0x30(%rsp),%rdx
063b6a7b mov       0x28(%rsp),%rax
063b6a80 add       $0x58,%rsp
063b6a84 ret

core::ptr::slice_from_raw_parts_mut<u8>:
063b6a90 sub       $0x58,%rsp
063b6a94 mov       %rdx,0x30(%rsp)
063b6a99 mov       %rcx,0x40(%rsp)
063b6a9e mov       %rdx,0x48(%rsp)
063b6aa3 mov       %rcx,0x50(%rsp)
063b6aa8 mov       %rcx,0x38(%rsp)
063b6aad mov       0x30(%rsp),%rdx
063b6ab2 mov       0x38(%rsp),%rcx
063b6ab7 call      0x0000`0000`063B`61E0
063b6abc mov       %rax,0x20(%rsp)
063b6ac1 mov       %rdx,0x28(%rsp)
063b6ac6 mov       0x28(%rsp),%rdx
063b6acb mov       0x20(%rsp),%rax
063b6ad0 add       $0x58,%rsp
063b6ad4 ret

core::ptr::swap_nonoverlapping<usize>:
063b6ae0 sub       $0xF8,%rsp
063b6ae7 mov       %r8,0x58(%rsp)
063b6aec mov       %rdx,0x60(%rsp)
063b6af1 mov       %rcx,0x68(%rsp)
063b6af6 mov       %rcx,0x78(%rsp)
063b6afb mov       %rdx,0x80(%rsp)
063b6b03 mov       %r8,0x88(%rsp)
063b6b0b jmp       0x0000`0000`063B`6B0D
063b6b0d jmp       0x0000`0000`063B`6B19
063b6b0f movb      $0,0x74(%rsp)
063b6b14 jmp       0x0000`0000`063B`6BBB
063b6b19 jmp       0x0000`0000`063B`6B1B
063b6b1b movq      $8,0xE0(%rsp)
063b6b27 movq      $8,0xE8(%rsp)
063b6b33 movq      $1,0xF0(%rsp)
063b6b3f mov       0xF0(%rsp),%rax
063b6b47 cmp       $1,%eax
063b6b4a sete      %al
063b6b4d mov       %al,0x57(%rsp)
063b6b51 mov       0x57(%rsp),%al
063b6b55 xor       $0xFF,%al
063b6b57 test      $1,%al
063b6b59 jne       0x0000`0000`063B`6B5D
063b6b5b jmp       0x0000`0000`063B`6B6E
063b6b5d movb      $1,0x75(%rsp)
063b6b62 mov       0x75(%rsp),%al
063b6b66 and       $1,%al
063b6b68 mov       %al,0x74(%rsp)
063b6b6c jmp       0x0000`0000`063B`6BBB
063b6b6e jmp       0x0000`0000`063B`6B70
063b6b70 mov       $8,%eax
063b6b75 mov       $2,%ecx
063b6b7a mul       %rcx
063b6b7d mov       %rax,0x48(%rsp)
063b6b82 seto      %al
063b6b85 test      $1,%al
063b6b87 jne       0x0000`0000`063B`6BA1
063b6b89 mov       0x48(%rsp),%rcx
063b6b8e mov       $8,%eax
063b6b93 cmp       %rcx,%rax
063b6b96 seta      %al
063b6b99 and       $1,%al
063b6b9b mov       %al,0x75(%rsp)
063b6b9f jmp       0x0000`0000`063B`6B62
063b6ba1 lea       0x63C`F400,%rcx
063b6ba8 lea       0x63C`F850,%r8
063b6baf mov       $0x21,%edx
063b6bb4 call      0x0000`0000`063B`9FF0
063b6bb9 ud2
063b6bbb testb     $1,0x74(%rsp)
063b6bc0 jne       0x0000`0000`063B`6BDB
063b6bc2 mov       0x58(%rsp),%r8
063b6bc7 mov       0x60(%rsp),%rdx
063b6bcc mov       0x68(%rsp),%rcx
063b6bd1 call      0x0000`0000`063B`7080
063b6bd6 jmp       0x0000`0000`063B`6CE9
063b6bdb jmp       0x0000`0000`063B`6BDD
063b6bdd jmp       0x0000`0000`063B`6BDF
063b6bdf jmp       0x0000`0000`063B`6BE8
063b6be1 movb      $0,0x76(%rsp)
063b6be6 jmp       0x0000`0000`063B`6C2E
063b6be8 jmp       0x0000`0000`063B`6BEA
063b6bea jmp       0x0000`0000`063B`6BEC
063b6bec mov       $8,%eax
063b6bf1 cmp       $0,%rax
063b6bf5 sete      %al
063b6bf8 test      $1,%al
063b6bfa jne       0x0000`0000`063B`6C14
063b6bfc mov       $8,%eax
063b6c01 and       $7,%rax
063b6c05 cmp       $0,%rax
063b6c09 sete      %al
063b6c0c and       $1,%al
063b6c0e mov       %al,0x76(%rsp)
063b6c12 jmp       0x0000`0000`063B`6C2E
063b6c14 lea       0x63C`F4F0,%rcx
063b6c1b lea       0x63C`F868,%r8
063b6c22 mov       $0x39,%edx
063b6c27 call      0x0000`0000`063B`9FF0
063b6c2c ud2
063b6c2e testb     $1,0x76(%rsp)
063b6c33 jne       0x0000`0000`063B`6C3A
063b6c35 jmp       0x0000`0000`063B`6CF1
063b6c3a mov       0x68(%rsp),%rax
063b6c3f mov       %rax,0xC8(%rsp)
063b6c47 mov       %rax,0x90(%rsp)
063b6c4f mov       0x60(%rsp),%rax
063b6c54 mov       %rax,0xC0(%rsp)
063b6c5c mov       %rax,0x98(%rsp)
063b6c64 jmp       0x0000`0000`063B`6C66
063b6c66 jmp       0x0000`0000`063B`6C68
063b6c68 mov       $8,%eax
063b6c6d cmp       $0,%rax
063b6c71 sete      %al
063b6c74 test      $1,%al
063b6c76 jne       0x0000`0000`063B`6C97
063b6c78 mov       0x58(%rsp),%rax
063b6c7d mov       $8,%ecx
063b6c82 shr       $3,%rcx
063b6c86 mul       %rcx
063b6c89 mov       %rax,0x40(%rsp)
063b6c8e seto      %al
063b6c91 test      $1,%al
063b6c93 jne       0x0000`0000`063B`6CCF
063b6c95 jmp       0x0000`0000`063B`6CB1
063b6c97 lea       0x63C`F4D0,%rcx
063b6c9e lea       0x63C`F868,%r8
063b6ca5 mov       $0x19,%edx
063b6caa call      0x0000`0000`063B`9FF0
063b6caf ud2
063b6cb1 mov       0x40(%rsp),%r8
063b6cb6 mov       0x60(%rsp),%rdx
063b6cbb mov       0x68(%rsp),%rcx
063b6cc0 mov       %r8,0xA0(%rsp)
063b6cc8 call      0x0000`0000`063B`6E20
063b6ccd jmp       0x0000`0000`063B`6CE9
063b6ccf lea       0x63C`F400,%rcx
063b6cd6 lea       0x63C`F868,%r8
063b6cdd mov       $0x21,%edx
063b6ce2 call      0x0000`0000`063B`9FF0
063b6ce7 ud2
063b6ce9 add       $0xF8,%rsp
063b6cf0 ret
063b6cf1 jmp       0x0000`0000`063B`6CF3
063b6cf3 mov       $8,%eax
063b6cf8 cmp       $1,%rax
063b6cfc jae       0x0000`0000`063B`6D05
063b6cfe movb      $0,0x77(%rsp)
063b6d03 jmp       0x0000`0000`063B`6D4B
063b6d05 jmp       0x0000`0000`063B`6D07
063b6d07 jmp       0x0000`0000`063B`6D09
063b6d09 mov       $1,%eax
063b6d0e cmp       $0,%rax
063b6d12 sete      %al
063b6d15 test      $1,%al
063b6d17 jne       0x0000`0000`063B`6D31
063b6d19 mov       $8,%eax
063b6d1e and       $0,%rax
063b6d22 cmp       $0,%rax
063b6d26 sete      %al
063b6d29 and       $1,%al
063b6d2b mov       %al,0x77(%rsp)
063b6d2f jmp       0x0000`0000`063B`6D4B
063b6d31 lea       0x63C`F4F0,%rcx
063b6d38 lea       0x63C`F880,%r8
063b6d3f mov       $0x39,%edx
063b6d44 call      0x0000`0000`063B`9FF0
063b6d49 ud2
063b6d4b testb     $1,0x77(%rsp)
063b6d50 je        0x0000`0000`063B`6BC2
063b6d56 mov       0x68(%rsp),%rax
063b6d5b mov       %rax,0xD8(%rsp)
063b6d63 mov       %rax,0x38(%rsp)
063b6d68 mov       %rax,0xA8(%rsp)
063b6d70 mov       0x60(%rsp),%rax
063b6d75 mov       %rax,0xD0(%rsp)
063b6d7d mov       %rax,0x30(%rsp)
063b6d82 mov       %rax,0xB0(%rsp)
063b6d8a jmp       0x0000`0000`063B`6D8C
063b6d8c jmp       0x0000`0000`063B`6D8E
063b6d8e mov       $1,%eax
063b6d93 cmp       $0,%rax
063b6d97 sete      %al
063b6d9a test      $1,%al
063b6d9c jne       0x0000`0000`063B`6DBD
063b6d9e mov       0x58(%rsp),%rax
063b6da3 mov       $8,%ecx
063b6da8 shr       $0,%rcx
063b6dac mul       %rcx
063b6daf mov       %rax,0x28(%rsp)
063b6db4 seto      %al
063b6db7 test      $1,%al
063b6db9 jne       0x0000`0000`063B`6DF8
063b6dbb jmp       0x0000`0000`063B`6DD7
063b6dbd lea       0x63C`F4D0,%rcx
063b6dc4 lea       0x63C`F880,%r8
063b6dcb mov       $0x19,%edx
063b6dd0 call      0x0000`0000`063B`9FF0
063b6dd5 ud2
063b6dd7 mov       0x28(%rsp),%r8
063b6ddc mov       0x30(%rsp),%rdx
063b6de1 mov       0x38(%rsp),%rcx
063b6de6 mov       %r8,0xB8(%rsp)
063b6dee call      0x0000`0000`063B`6F50
063b6df3 jmp       0x0000`0000`063B`6CE9
063b6df8 lea       0x63C`F400,%rcx
063b6dff lea       0x63C`F880,%r8
063b6e06 mov       $0x21,%edx
063b6e0b call      0x0000`0000`063B`9FF0
063b6e10 ud2

core::ptr::swap_nonoverlapping_simple<core::mem::maybe_uninit::MaybeUninit<usize> >:
063b6e20 sub       $0xD8,%rsp
063b6e27 mov       %r8,0x40(%rsp)
063b6e2c mov       %rdx,0x48(%rsp)
063b6e31 mov       %rcx,0x50(%rsp)
063b6e36 mov       %rcx,0x60(%rsp)
063b6e3b mov       %rdx,0x68(%rsp)
063b6e40 mov       %r8,0x70(%rsp)
063b6e45 movq      $0,0x58(%rsp)
063b6e4e mov       0x40(%rsp),%rax
063b6e53 cmp       %rax,0x58(%rsp)
063b6e58 jb        0x0000`0000`063B`6E62
063b6e5a add       $0xD8,%rsp
063b6e61 ret
063b6e62 mov       0x50(%rsp),%rax
063b6e67 mov       0x58(%rsp),%rcx
063b6e6c mov       %rax,0xB0(%rsp)
063b6e74 mov       %rcx,0xB8(%rsp)
063b6e7c mov       %rax,0xC0(%rsp)
063b6e84 mov       %rcx,0xC8(%rsp)
063b6e8c shl       $3,%rcx
063b6e90 add       %rcx,%rax
063b6e93 mov       %rax,0xD0(%rsp)
063b6e9b mov       0xD0(%rsp),%rax
063b6ea3 mov       %rax,0x38(%rsp)
063b6ea8 mov       0x48(%rsp),%rax
063b6ead mov       0x38(%rsp),%rcx
063b6eb2 mov       %rcx,0x78(%rsp)
063b6eb7 mov       0x58(%rsp),%rcx
063b6ebc mov       %rax,0x88(%rsp)
063b6ec4 mov       %rcx,0x90(%rsp)
063b6ecc mov       %rax,0x98(%rsp)
063b6ed4 mov       %rcx,0xA0(%rsp)
063b6edc shl       $3,%rcx
063b6ee0 add       %rcx,%rax
063b6ee3 mov       %rax,0xA8(%rsp)
063b6eeb mov       0xA8(%rsp),%rax
063b6ef3 mov       %rax,0x30(%rsp)
063b6ef8 mov       0x30(%rsp),%rdx
063b6efd mov       0x38(%rsp),%rcx
063b6f02 mov       %rdx,0x80(%rsp)
063b6f0a call      0x0000`0000`063B`5ED0
063b6f0f mov       0x58(%rsp),%rax
063b6f14 add       $1,%rax
063b6f18 mov       %rax,0x28(%rsp)
063b6f1d setb      %al
063b6f20 test      $1,%al
063b6f22 jne       0x0000`0000`063B`6F33
063b6f24 mov       0x28(%rsp),%rax
063b6f29 mov       %rax,0x58(%rsp)
063b6f2e jmp       0x0000`0000`063B`6E4E
063b6f33 lea       0x63C`F3E0,%rcx
063b6f3a lea       0x63C`F898,%r8
063b6f41 mov       $0x1C,%edx
063b6f46 call      0x0000`0000`063B`9FF0
063b6f4b ud2

core::ptr::swap_nonoverlapping_simple<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b6f50 sub       $0xD8,%rsp
063b6f57 mov       %r8,0x40(%rsp)
063b6f5c mov       %rdx,0x48(%rsp)
063b6f61 mov       %rcx,0x50(%rsp)
063b6f66 mov       %rcx,0x60(%rsp)
063b6f6b mov       %rdx,0x68(%rsp)
063b6f70 mov       %r8,0x70(%rsp)
063b6f75 movq      $0,0x58(%rsp)
063b6f7e mov       0x40(%rsp),%rax
063b6f83 cmp       %rax,0x58(%rsp)
063b6f88 jb        0x0000`0000`063B`6F92
063b6f8a add       $0xD8,%rsp
063b6f91 ret
063b6f92 mov       0x50(%rsp),%rax
063b6f97 mov       0x58(%rsp),%rcx
063b6f9c mov       %rax,0xB0(%rsp)
063b6fa4 mov       %rcx,0xB8(%rsp)
063b6fac mov       %rax,0xC0(%rsp)
063b6fb4 mov       %rcx,0xC8(%rsp)
063b6fbc add       %rcx,%rax
063b6fbf mov       %rax,0xD0(%rsp)
063b6fc7 mov       0xD0(%rsp),%rax
063b6fcf mov       %rax,0x38(%rsp)
063b6fd4 mov       0x48(%rsp),%rax
063b6fd9 mov       0x38(%rsp),%rcx
063b6fde mov       %rcx,0x78(%rsp)
063b6fe3 mov       0x58(%rsp),%rcx
063b6fe8 mov       %rax,0x88(%rsp)
063b6ff0 mov       %rcx,0x90(%rsp)
063b6ff8 mov       %rax,0x98(%rsp)
063b7000 mov       %rcx,0xA0(%rsp)
063b7008 add       %rcx,%rax
063b700b mov       %rax,0xA8(%rsp)
063b7013 mov       0xA8(%rsp),%rax
063b701b mov       %rax,0x30(%rsp)
063b7020 mov       0x30(%rsp),%rdx
063b7025 mov       0x38(%rsp),%rcx
063b702a mov       %rdx,0x80(%rsp)
063b7032 call      0x0000`0000`063B`5E70
063b7037 mov       0x58(%rsp),%rax
063b703c add       $1,%rax
063b7040 mov       %rax,0x28(%rsp)
063b7045 setb      %al
063b7048 test      $1,%al
063b704a jne       0x0000`0000`063B`705B
063b704c mov       0x28(%rsp),%rax
063b7051 mov       %rax,0x58(%rsp)
063b7056 jmp       0x0000`0000`063B`6F7E
063b705b lea       0x63C`F3E0,%rcx
063b7062 lea       0x63C`F898,%r8
063b7069 mov       $0x1C,%edx
063b706e call      0x0000`0000`063B`9FF0
063b7073 ud2

core::ptr::swap_nonoverlapping_simple<usize>:
063b7080 sub       $0xD8,%rsp
063b7087 mov       %r8,0x40(%rsp)
063b708c mov       %rdx,0x48(%rsp)
063b7091 mov       %rcx,0x50(%rsp)
063b7096 mov       %rcx,0x60(%rsp)
063b709b mov       %rdx,0x68(%rsp)
063b70a0 mov       %r8,0x70(%rsp)
063b70a5 movq      $0,0x58(%rsp)
063b70ae mov       0x40(%rsp),%rax
063b70b3 cmp       %rax,0x58(%rsp)
063b70b8 jb        0x0000`0000`063B`70C2
063b70ba add       $0xD8,%rsp
063b70c1 ret
063b70c2 mov       0x50(%rsp),%rax
063b70c7 mov       0x58(%rsp),%rcx
063b70cc mov       %rax,0xB0(%rsp)
063b70d4 mov       %rcx,0xB8(%rsp)
063b70dc mov       %rax,0xC0(%rsp)
063b70e4 mov       %rcx,0xC8(%rsp)
063b70ec shl       $3,%rcx
063b70f0 add       %rcx,%rax
063b70f3 mov       %rax,0xD0(%rsp)
063b70fb mov       0xD0(%rsp),%rax
063b7103 mov       %rax,0x38(%rsp)
063b7108 mov       0x48(%rsp),%rax
063b710d mov       0x38(%rsp),%rcx
063b7112 mov       %rcx,0x78(%rsp)
063b7117 mov       0x58(%rsp),%rcx
063b711c mov       %rax,0x88(%rsp)
063b7124 mov       %rcx,0x90(%rsp)
063b712c mov       %rax,0x98(%rsp)
063b7134 mov       %rcx,0xA0(%rsp)
063b713c shl       $3,%rcx
063b7140 add       %rcx,%rax
063b7143 mov       %rax,0xA8(%rsp)
063b714b mov       0xA8(%rsp),%rax
063b7153 mov       %rax,0x30(%rsp)
063b7158 mov       0x30(%rsp),%rdx
063b715d mov       0x38(%rsp),%rcx
063b7162 mov       %rdx,0x80(%rsp)
063b716a call      0x0000`0000`063B`5F30
063b716f mov       0x58(%rsp),%rax
063b7174 add       $1,%rax
063b7178 mov       %rax,0x28(%rsp)
063b717d setb      %al
063b7180 test      $1,%al
063b7182 jne       0x0000`0000`063B`7193
063b7184 mov       0x28(%rsp),%rax
063b7189 mov       %rax,0x58(%rsp)
063b718e jmp       0x0000`0000`063B`70AE
063b7193 lea       0x63C`F3E0,%rcx
063b719a lea       0x63C`F898,%r8
063b71a1 mov       $0x1C,%edx
063b71a6 call      0x0000`0000`063B`9FF0
063b71ab ud2

core::ptr::read<core::mem::maybe_uninit::MaybeUninit<usize> >:
063b71b0 sub       $0x40,%rsp
063b71b4 mov       %rcx,8(%rsp)
063b71b9 mov       %rcx,0x18(%rsp)
063b71be mov       0x20(%rsp),%rax
063b71c3 mov       %rax,0x10(%rsp)
063b71c8 lea       0x10(%rsp),%rax
063b71cd mov       %rax,0x28(%rsp)
063b71d2 mov       8(%rsp),%rax
063b71d7 mov       (%rax),%rax
063b71da mov       %rax,0x10(%rsp)
063b71df mov       0x10(%rsp),%rax
063b71e4 mov       %rax,(%rsp)
063b71e8 mov       %rax,0x30(%rsp)
063b71ed mov       %rax,0x38(%rsp)
063b71f2 mov       (%rsp),%rax
063b71f6 add       $0x40,%rsp
063b71fa ret

core::ptr::read<char>:
063b7200 sub       $0x38,%rsp
063b7204 mov       %rcx,8(%rsp)
063b7209 mov       %rcx,0x18(%rsp)
063b720e mov       0x24(%rsp),%eax
063b7212 mov       %eax,0x14(%rsp)
063b7216 lea       0x14(%rsp),%rax
063b721b mov       %rax,0x28(%rsp)
063b7220 mov       8(%rsp),%rax
063b7225 mov       (%rax),%eax
063b7227 mov       %eax,0x14(%rsp)
063b722b mov       0x14(%rsp),%eax
063b722f mov       %eax,4(%rsp)
063b7233 mov       %eax,0x30(%rsp)
063b7237 mov       %eax,0x34(%rsp)
063b723b mov       4(%rsp),%eax
063b723f add       $0x38,%rsp
063b7243 ret

core::ptr::read<enum$<core::fmt::rt::v1::Alignment> >:
063b7250 sub       $0x38,%rsp
063b7254 mov       %rcx,8(%rsp)
063b7259 mov       %rcx,0x18(%rsp)
063b725e mov       0x27(%rsp),%al
063b7262 mov       %al,0x17(%rsp)
063b7266 lea       0x17(%rsp),%rax
063b726b mov       %rax,0x28(%rsp)
063b7270 mov       8(%rsp),%rax
063b7275 mov       (%rax),%al
063b7277 mov       %al,0x17(%rsp)
063b727b mov       0x17(%rsp),%al
063b727f mov       %al,7(%rsp)
063b7283 mov       %al,0x36(%rsp)
063b7287 mov       %al,0x37(%rsp)
063b728b mov       7(%rsp),%al
063b728f add       $0x38,%rsp
063b7293 ret

core::ptr::read<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b72a0 sub       $0x38,%rsp
063b72a4 mov       %rcx,8(%rsp)
063b72a9 mov       %rcx,0x18(%rsp)
063b72ae mov       0x27(%rsp),%al
063b72b2 mov       %al,0x17(%rsp)
063b72b6 lea       0x17(%rsp),%rax
063b72bb mov       %rax,0x28(%rsp)
063b72c0 mov       8(%rsp),%rax
063b72c5 mov       (%rax),%al
063b72c7 mov       %al,0x17(%rsp)
063b72cb mov       0x17(%rsp),%al
063b72cf mov       %al,7(%rsp)
063b72d3 mov       %al,0x36(%rsp)
063b72d7 mov       %al,0x37(%rsp)
063b72db mov       7(%rsp),%al
063b72df add       $0x38,%rsp
063b72e3 ret

core::ptr::read<usize>:
063b72f0 sub       $0x40,%rsp
063b72f4 mov       %rcx,8(%rsp)
063b72f9 mov       %rcx,0x18(%rsp)
063b72fe mov       0x20(%rsp),%rax
063b7303 mov       %rax,0x10(%rsp)
063b7308 lea       0x10(%rsp),%rax
063b730d mov       %rax,0x28(%rsp)
063b7312 mov       8(%rsp),%rax
063b7317 mov       (%rax),%rax
063b731a mov       %rax,0x10(%rsp)
063b731f mov       0x10(%rsp),%rax
063b7324 mov       %rax,(%rsp)
063b7328 mov       %rax,0x30(%rsp)
063b732d mov       %rax,0x38(%rsp)
063b7332 mov       (%rsp),%rax
063b7336 add       $0x40,%rsp
063b733a ret

core::ptr::write<char>:
063b7340 sub       $0x10,%rsp
063b7344 mov       %edx,4(%rsp)
063b7348 mov       %rcx,8(%rsp)
063b734d mov       4(%rsp),%eax
063b7351 mov       %eax,(%rcx)
063b7353 add       $0x10,%rsp
063b7357 ret

core::ptr::write<core::mem::maybe_uninit::MaybeUninit<usize> >:
063b7360 sub       $0x10,%rsp
063b7364 mov       %rdx,(%rsp)
063b7368 mov       %rcx,8(%rsp)
063b736d mov       (%rsp),%rax
063b7371 mov       %rax,(%rcx)
063b7374 add       $0x10,%rsp
063b7378 ret

core::ptr::write<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b7380 sub       $0x10,%rsp
063b7384 mov       %dl,7(%rsp)
063b7388 mov       %rcx,8(%rsp)
063b738d mov       7(%rsp),%al
063b7391 mov       %al,(%rcx)
063b7393 add       $0x10,%rsp
063b7397 ret

core::ptr::write<usize>:
063b73a0 sub       $0x10,%rsp
063b73a4 mov       %rdx,(%rsp)
063b73a8 mov       %rcx,8(%rsp)
063b73ad mov       (%rsp),%rax
063b73b1 mov       %rax,(%rcx)
063b73b4 add       $0x10,%rsp
063b73b8 ret

core::ptr::write<enum$<core::fmt::rt::v1::Alignment> >:
063b73c0 sub       $0x10,%rsp
063b73c4 mov       %dl,7(%rsp)
063b73c8 mov       %rcx,8(%rsp)
063b73cd mov       7(%rsp),%al
063b73d1 mov       %al,(%rcx)
063b73d3 add       $0x10,%rsp
063b73d7 ret

core::ptr::read_volatile<usize>:
063b73e0 sub       $0x48,%rsp
063b73e4 mov       %rcx,0x28(%rsp)
063b73e9 mov       %rcx,0x38(%rsp)
063b73ee call      0x0000`0000`063B`5980
063b73f3 mov       %al,0x37(%rsp)
063b73f7 mov       0x37(%rsp),%al
063b73fb xor       $0xFF,%al
063b73fd test      $1,%al
063b73ff jne       0x0000`0000`063B`741A
063b7401 mov       0x28(%rsp),%rax
063b7406 mov       (%rax),%rax
063b7409 mov       %rax,0x40(%rsp)
063b740e mov       0x40(%rsp),%rax
063b7413 mov       %rax,0x20(%rsp)
063b7418 jmp       0x0000`0000`063B`741E
063b741a ud2
063b741c ud2
063b741e mov       0x20(%rsp),%rax
063b7423 add       $0x48,%rsp
063b7427 ret

core::ptr::align_offset<u8>:
063b7430 sub       $0x158,%rsp
063b7437 mov       %rdx,0x90(%rsp)
063b743f mov       %rcx,0x98(%rsp)
063b7447 mov       %rcx,0xA8(%rsp)
063b744f mov       %rdx,0xB0(%rsp)
063b7457 movq      $1,0xB8(%rsp)
063b7463 mov       0x90(%rsp),%rax
063b746b sub       $1,%rax
063b746f mov       %rax,0xC0(%rsp)
063b7477 mov       0xC0(%rsp),%rax
063b747f mov       %rax,0x88(%rsp)
063b7487 mov       %rax,0xC8(%rsp)
063b748f mov       0x98(%rsp),%rcx
063b7497 mov       0x90(%rsp),%r8
063b749f mov       0x88(%rsp),%rdx
063b74a7 mov       %rcx,%rax
063b74aa add       %rdx,%rax
063b74ad xor       %edx,%edx
063b74af sub       %r8,%rdx
063b74b2 and       %rdx,%rax
063b74b5 sub       %rcx,%rax
063b74b8 mov       %rax,0xA0(%rsp)
063b74c0 jmp       0x0000`0000`063B`7621
063b74c5 mov       0x88(%rsp),%rcx
063b74cd mov       0x98(%rsp),%rax
063b74d5 and       %rcx,%rax
063b74d8 mov       %rax,0x80(%rsp)
063b74e0 mov       %rax,0xD0(%rsp)
063b74e8 cmp       $0,%rax
063b74ec jne       0x0000`0000`063B`74FF
063b74ee movq      $0,0xA0(%rsp)
063b74fa jmp       0x0000`0000`063B`7621
063b74ff mov       $1,%eax
063b7504 cmp       $0,%rax
063b7508 jne       0x0000`0000`063B`751B
063b750a movq      $0xFFFF`FFFF`FFFF`FFFF,0xA0(%rsp)
063b7516 jmp       0x0000`0000`063B`7621
063b751b mov       0x88(%rsp),%rax
063b7523 and       $1,%rax
063b7527 mov       %rax,0x70(%rsp)
063b752c mov       %rax,0xD8(%rsp)
063b7534 xor       %eax,%eax
063b7536 mov       %rax,0xE0(%rsp)
063b753e mov       0xE0(%rsp),%rax
063b7546 mov       %rax,0x78(%rsp)
063b754b mov       0x90(%rsp),%rax
063b7553 bsf       %rax,%rax
063b7557 mov       %rax,0xE8(%rsp)
063b755f mov       0xE8(%rsp),%rax
063b7567 mov       %rax,0x68(%rsp)
063b756c mov       0x68(%rsp),%rdx
063b7571 mov       0x78(%rsp),%rcx
063b7576 call      0x0000`0000`063B`7850
063b757b mov       %rax,0x60(%rsp)
063b7580 mov       %rax,0xF0(%rsp)
063b7588 mov       0x60(%rsp),%rcx
063b758d mov       $1,%eax
063b7592 shl       %cl,%rax
063b7595 mov       %rax,0xF8(%rsp)
063b759d mov       0xF8(%rsp),%rax
063b75a5 mov       %rax,0x58(%rsp)
063b75aa mov       %rax,0x100(%rsp)
063b75b2 mov       0x58(%rsp),%rax
063b75b7 sub       $1,%rax
063b75bb mov       %rax,0x108(%rsp)
063b75c3 mov       0x108(%rsp),%rax
063b75cb mov       %rax,0x50(%rsp)
063b75d0 mov       0x50(%rsp),%rcx
063b75d5 mov       0x98(%rsp),%rax
063b75dd and       %rcx,%rax
063b75e0 cmp       $0,%rax
063b75e4 jne       0x0000`0000`063B`7615
063b75e6 mov       0x90(%rsp),%rax
063b75ee mov       0x60(%rsp),%rcx
063b75f3 shr       %cl,%rax
063b75f6 mov       %rax,0x110(%rsp)
063b75fe mov       0x110(%rsp),%rax
063b7606 mov       %rax,0x48(%rsp)
063b760b mov       %rax,0x118(%rsp)
063b7613 jmp       0x0000`0000`063B`7631
063b7615 movq      $0xFFFF`FFFF`FFFF`FFFF,0xA0(%rsp)
063b7621 mov       0xA0(%rsp),%rax
063b7629 add       $0x158,%rsp
063b7630 ret
063b7631 mov       0x48(%rsp),%rax
063b7636 sub       $1,%rax
063b763a mov       %rax,0x120(%rsp)
063b7642 mov       0x120(%rsp),%rax
063b764a mov       %rax,0x40(%rsp)
063b764f mov       %rax,0x128(%rsp)
063b7657 mov       0x70(%rsp),%rax
063b765c mov       0x60(%rsp),%rcx
063b7661 shr       %cl,%rax
063b7664 mov       %rax,0x130(%rsp)
063b766c mov       0x130(%rsp),%rax
063b7674 mov       %rax,0x38(%rsp)
063b7679 mov       %rax,0x138(%rsp)
063b7681 mov       0x80(%rsp),%rax
063b7689 mov       0x60(%rsp),%rcx
063b768e shr       %cl,%rax
063b7691 mov       %rax,0x140(%rsp)
063b7699 mov       0x140(%rsp),%rax
063b76a1 mov       %rax,0x30(%rsp)
063b76a6 mov       0x30(%rsp),%rcx
063b76ab mov       0x48(%rsp),%rax
063b76b0 sub       %rcx,%rax
063b76b3 mov       %rax,0x148(%rsp)
063b76bb mov       0x148(%rsp),%rax
063b76c3 mov       %rax,0x28(%rsp)
063b76c8 mov       %rax,0x150(%rsp)
063b76d0 mov       0x48(%rsp),%rdx
063b76d5 mov       0x38(%rsp),%rcx
063b76da call      0x0000`0000`063B`7710
063b76df mov       %rax,0x20(%rsp)
063b76e4 mov       0x40(%rsp),%rcx
063b76e9 mov       0x20(%rsp),%rdx
063b76ee mov       0x28(%rsp),%rax
063b76f3 imul      %rdx,%rax
063b76f7 and       %rcx,%rax
063b76fa mov       %rax,0xA0(%rsp)
063b7702 jmp       0x0000`0000`063B`7621

core::ptr::align_offset::mod_inv:
063b7710 sub       $0x98,%rsp
063b7717 mov       %rdx,0x38(%rsp)
063b771c mov       %rcx,%rax
063b771f mov       %rax,0x40(%rsp)
063b7724 mov       %rax,0x70(%rsp)
063b7729 mov       %rdx,0x78(%rsp)
063b772e mov       0x63C`F8B0,%rcx
063b7735 mov       %rcx,0x58(%rsp)
063b773a and       $0xF,%rax
063b773e shr       $1,%rax
063b7742 mov       %rax,0x48(%rsp)
063b7747 mov       0x48(%rsp),%rax
063b774c cmp       $8,%rax
063b7750 setb      %al
063b7753 test      $1,%al
063b7755 jne       0x0000`0000`063B`7759
063b7757 jmp       0x0000`0000`063B`7798
063b7759 mov       0x38(%rsp),%rax
063b775e mov       0x48(%rsp),%rcx
063b7763 movzbl    0x58(%rsp,%rcx),%ecx
063b7768 mov       %rcx,0x28(%rsp)
063b776d mov       %rcx,0x80(%rsp)
063b7775 sub       $1,%rax
063b7779 mov       %rax,0x88(%rsp)
063b7781 mov       0x88(%rsp),%rax
063b7789 mov       %rax,0x30(%rsp)
063b778e mov       %rax,0x90(%rsp)
063b7796 jmp       0x0000`0000`063B`77B0
063b7798 mov       0x48(%rsp),%rcx
063b779d lea       0x63C`F8B8,%r8
063b77a4 mov       $8,%edx
063b77a9 call      0x0000`0000`063B`A050
063b77ae ud2
063b77b0 mov       0x38(%rsp),%rax
063b77b5 cmp       $0x10,%rax
063b77b9 jbe       0x0000`0000`063B`77D0
063b77bb mov       0x28(%rsp),%rax
063b77c0 mov       %rax,0x60(%rsp)
063b77c5 movq      $0x100,0x68(%rsp)
063b77ce jmp       0x0000`0000`063B`77EF
063b77d0 mov       0x30(%rsp),%rcx
063b77d5 mov       0x28(%rsp),%rax
063b77da and       %rcx,%rax
063b77dd mov       %rax,0x50(%rsp)
063b77e2 mov       0x50(%rsp),%rax
063b77e7 add       $0x98,%rsp
063b77ee ret
063b77ef mov       0x38(%rsp),%rax
063b77f4 mov       0x40(%rsp),%r8
063b77f9 mov       0x60(%rsp),%rcx
063b77fe imul      0x60(%rsp),%r8
063b7804 mov       $2,%edx
063b7809 sub       %r8,%rdx
063b780c imul      %rdx,%rcx
063b7810 mov       %rcx,0x60(%rsp)
063b7815 cmp       %rax,0x68(%rsp)
063b781a jae       0x0000`0000`063B`782E
063b781c mov       0x68(%rsp),%rax
063b7821 imul      0x68(%rsp),%rax
063b7827 mov       %rax,0x68(%rsp)
063b782c jmp       0x0000`0000`063B`77EF
063b782e mov       0x30(%rsp),%rax
063b7833 and       0x60(%rsp),%rax
063b7838 mov       %rax,0x50(%rsp)
063b783d jmp       0x0000`0000`063B`77E2

core::clone::impls::impl$3::clone<str>:
063b7840 push      %rax
063b7841 mov       %rcx,(%rsp)
063b7845 mov       (%rcx),%rax
063b7848 mov       8(%rcx),%rdx
063b784c pop       %rcx
063b784d ret

core::cmp::Ord::min<usize>:
063b7850 sub       $0x38,%rsp
063b7854 mov       %rcx,0x28(%rsp)
063b7859 mov       %rdx,0x30(%rsp)
063b785e call      0x0000`0000`063B`78B0
063b7863 mov       %rax,0x20(%rsp)
063b7868 mov       0x20(%rsp),%rax
063b786d add       $0x38,%rsp
063b7871 ret

core::cmp::min<usize>:
063b7880 sub       $0x38,%rsp
063b7884 mov       %rcx,0x28(%rsp)
063b7889 mov       %rdx,0x30(%rsp)
063b788e call      0x0000`0000`063B`7850
063b7893 mov       %rax,0x20(%rsp)
063b7898 mov       0x20(%rsp),%rax
063b789d add       $0x38,%rsp
063b78a1 ret

core::cmp::min_by<usize,enum$<core::cmp::Ordering> (*)(ref$<usize>,ref$<usize>)>:
063b78b0 sub       $0x68,%rsp
063b78b4 mov       %rcx,0x28(%rsp)
063b78b9 mov       %rdx,0x30(%rsp)
063b78be movb      $0,0x5F(%rsp)
063b78c3 movb      $0,0x5E(%rsp)
063b78c8 movb      $1,0x5F(%rsp)
063b78cd movb      $1,0x5E(%rsp)
063b78d2 lea       0x28(%rsp),%rax
063b78d7 mov       %rax,0x48(%rsp)
063b78dc lea       0x30(%rsp),%rax
063b78e1 mov       %rax,0x50(%rsp)
063b78e6 mov       0x48(%rsp),%rcx
063b78eb mov       0x50(%rsp),%rdx
063b78f0 call      0x0000`0000`063B`57E0
063b78f5 mov       %al,0x47(%rsp)
063b78f9 mov       0x47(%rsp),%al
063b78fd add       $1,%al
063b78ff sub       $2,%al
063b7901 jb        0x0000`0000`063B`7909
063b7903 jmp       0x0000`0000`063B`7905
063b7905 jmp       0x0000`0000`063B`791A
063b7907 ud2
063b7909 movb      $0,0x5F(%rsp)
063b790e mov       0x28(%rsp),%rax
063b7913 mov       %rax,0x38(%rsp)
063b7918 jmp       0x0000`0000`063B`7929
063b791a movb      $0,0x5E(%rsp)
063b791f mov       0x30(%rsp),%rax
063b7924 mov       %rax,0x38(%rsp)
063b7929 testb     $1,0x5E(%rsp)
063b792e jne       0x0000`0000`063B`7939
063b7930 testb     $1,0x5F(%rsp)
063b7935 jne       0x0000`0000`063B`7945
063b7937 jmp       0x0000`0000`063B`793B
063b7939 jmp       0x0000`0000`063B`7930
063b793b mov       0x38(%rsp),%rax
063b7940 add       $0x68,%rsp
063b7944 ret
063b7945 jmp       0x0000`0000`063B`793B

core::cmp::impls::impl$9::eq<slice$<u8>,slice$<u8> >:
063b7950 sub       $0x38,%rsp
063b7954 mov       %rdx,%rax
063b7957 mov       %rcx,%rdx
063b795a mov       %rdx,0x28(%rsp)
063b795f mov       %rax,0x30(%rsp)
063b7964 mov       (%rdx),%rcx
063b7967 mov       8(%rdx),%rdx
063b796b mov       (%rax),%r8
063b796e mov       8(%rax),%r9
063b7972 call      0x0000`0000`063C`1820
063b7977 mov       %al,0x27(%rsp)
063b797b mov       0x27(%rsp),%al
063b797f and       $1,%al
063b7981 movzbl    %al,%eax
063b7984 add       $0x38,%rsp
063b7988 ret

core::convert::impl$4::from<core::fmt::Error>:
063b7990 push      %rax
063b7991 pop       %rax
063b7992 ret

core::convert::impl$4::from<usize>:
063b79a0 push      %rax
063b79a1 mov       %rcx,%rax
063b79a4 mov       %rax,(%rsp)
063b79a8 pop       %rcx
063b79a9 ret

core::ops::range::impl$1::fmt<usize>:
063b79b0 sub       $0xC8,%rsp
063b79b7 mov       %rdx,0x38(%rsp)
063b79bc mov       %rcx,0x40(%rsp)
063b79c1 mov       %rcx,0x88(%rsp)
063b79c9 mov       %rdx,0x90(%rsp)
063b79d1 call      0x0000`0000`063C`8E80
063b79d6 mov       %al,0x4C(%rsp)
063b79da mov       0x4C(%rsp),%cl
063b79de and       $1,%cl
063b79e1 call      0x0000`0000`063B`A8B0
063b79e6 and       $1,%al
063b79e8 mov       %al,0x4E(%rsp)
063b79ec movzbl    0x4E(%rsp),%eax
063b79f1 test      $1,%al
063b79f3 je        0x0000`0000`063B`79FB
063b79f5 jmp       0x0000`0000`063B`79F7
063b79f7 jmp       0x0000`0000`063B`7A26
063b79f9 ud2
063b79fb lea       0x50(%rsp),%rcx
063b7a00 lea       0x63C`F8D8,%rdx
063b7a07 mov       $1,%r8d
063b7a0d lea       0x63C`F530,%r9
063b7a14 xor       %eax,%eax
063b7a16 movq      $0,0x20(%rsp)
063b7a1f call      0x0000`0000`063B`EFF0
063b7a24 jmp       0x0000`0000`063B`7A49
063b7a26 lea       0x63C`F960,%rcx
063b7a2d call      0x0000`0000`063B`A930
063b7a32 and       $1,%al
063b7a34 mov       %al,0x4D(%rsp)
063b7a38 mov       0x4D(%rsp),%al
063b7a3c and       $1,%al
063b7a3e movzbl    %al,%eax
063b7a41 add       $0xC8,%rsp
063b7a48 ret
063b7a49 mov       0x38(%rsp),%rcx
063b7a4e lea       0x50(%rsp),%rdx
063b7a53 call      0x0000`0000`063C`0C50
063b7a58 mov       %al,0x37(%rsp)
063b7a5c mov       0x37(%rsp),%cl
063b7a60 and       $1,%cl
063b7a63 call      0x0000`0000`063B`A8B0
063b7a68 and       $1,%al
063b7a6a mov       %al,0x4F(%rsp)
063b7a6e movzbl    0x4F(%rsp),%eax
063b7a73 test      $1,%al
063b7a75 je        0x0000`0000`063B`7A7D
063b7a77 jmp       0x0000`0000`063B`7A79
063b7a79 jmp       0x0000`0000`063B`7A96
063b7a7b ud2
063b7a7d mov       0x38(%rsp),%rdx
063b7a82 mov       0x40(%rsp),%rcx
063b7a87 add       $8,%rcx
063b7a8b call      0x0000`0000`063C`8E80
063b7a90 mov       %al,0x36(%rsp)
063b7a94 jmp       0x0000`0000`063B`7AAA
063b7a96 lea       0x63C`F978,%rcx
063b7a9d call      0x0000`0000`063B`A930
063b7aa2 and       $1,%al
063b7aa4 mov       %al,0x4D(%rsp)
063b7aa8 jmp       0x0000`0000`063B`7A38
063b7aaa mov       0x36(%rsp),%cl
063b7aae and       $1,%cl
063b7ab1 call      0x0000`0000`063B`A8B0
063b7ab6 and       $1,%al
063b7ab8 mov       %al,0x87(%rsp)
063b7abf movzbl    0x87(%rsp),%eax
063b7ac7 test      $1,%al
063b7ac9 je        0x0000`0000`063B`7AD1
063b7acb jmp       0x0000`0000`063B`7ACD
063b7acd jmp       0x0000`0000`063B`7ADB
063b7acf ud2
063b7ad1 movb      $0,0x4D(%rsp)
063b7ad6 jmp       0x0000`0000`063B`7A38
063b7adb lea       0x63C`F990,%rcx
063b7ae2 call      0x0000`0000`063B`A930
063b7ae7 and       $1,%al
063b7ae9 mov       %al,0x4D(%rsp)
063b7aed jmp       0x0000`0000`063B`7A38

core::ops::range::RangeInclusive<usize>::new<usize>:
063b7b00 sub       $0x10,%rsp
063b7b04 mov       %rcx,%rax
063b7b07 mov       %rdx,(%rsp)
063b7b0b mov       %r8,8(%rsp)
063b7b10 mov       %rdx,(%rcx)
063b7b13 mov       %r8,8(%rcx)
063b7b17 movb      $0,0x10(%rcx)
063b7b1b add       $0x10,%rsp
063b7b1f ret

core::ops::range::RangeInclusive<usize>::end<usize>:
063b7b20 push      %rax
063b7b21 mov       %rcx,%rax
063b7b24 mov       %rax,(%rsp)
063b7b28 add       $8,%rax
063b7b2c pop       %rcx
063b7b2d ret

core::ops::range::RangeInclusive<usize>::into_slice_range:
063b7b30 sub       $0x58,%rsp
063b7b34 mov       %rcx,0x28(%rsp)
063b7b39 mov       8(%rcx),%rax
063b7b3d add       $1,%rax
063b7b41 mov       %rax,0x30(%rsp)
063b7b46 setb      %al
063b7b49 test      $1,%al
063b7b4b jne       0x0000`0000`063B`7B64
063b7b4d mov       0x28(%rsp),%rax
063b7b52 mov       0x30(%rsp),%rcx
063b7b57 mov       %rcx,0x50(%rsp)
063b7b5c testb     $1,0x10(%rax)
063b7b60 jne       0x0000`0000`063B`7B8D
063b7b62 jmp       0x0000`0000`063B`7B7E
063b7b64 lea       0x63C`F3E0,%rcx
063b7b6b lea       0x63C`F9A8,%r8
063b7b72 mov       $0x1C,%edx
063b7b77 call      0x0000`0000`063B`9FF0
063b7b7c ud2
063b7b7e mov       0x28(%rsp),%rax
063b7b83 mov       (%rax),%rax
063b7b86 mov       %rax,0x48(%rsp)
063b7b8b jmp       0x0000`0000`063B`7B97
063b7b8d mov       0x30(%rsp),%rax
063b7b92 mov       %rax,0x48(%rsp)
063b7b97 mov       0x30(%rsp),%rax
063b7b9c mov       0x48(%rsp),%rcx
063b7ba1 mov       %rcx,0x38(%rsp)
063b7ba6 mov       %rax,0x40(%rsp)
063b7bab mov       0x38(%rsp),%rax
063b7bb0 mov       0x40(%rsp),%rdx
063b7bb5 add       $0x58,%rsp
063b7bb9 ret

core::any::impl$0::type_id<core::panic::panic_info::impl$0::internal_constructor::NoPayload>:
063b7bc0 sub       $0x38,%rsp
063b7bc4 mov       %rcx,0x30(%rsp)
063b7bc9 call      0x0000`0000`063B`7BE0
063b7bce mov       %rax,0x28(%rsp)
063b7bd3 mov       0x28(%rsp),%rax
063b7bd8 add       $0x38,%rsp
063b7bdc ret

core::any::TypeId::of<core::panic::panic_info::impl$0::internal_constructor::NoPayload>:
063b7be0 sub       $0x18,%rsp
063b7be4 movabs    $0x93ED`F856`EE82`B78A,%rax
063b7bee mov       %rax,0x10(%rsp)
063b7bf3 mov       0x10(%rsp),%rax
063b7bf8 mov       %rax,(%rsp)
063b7bfc mov       (%rsp),%rax
063b7c00 mov       %rax,8(%rsp)
063b7c05 mov       8(%rsp),%rax
063b7c0a add       $0x18,%rsp
063b7c0e ret

core::array::impl$13::into_iter<usize,4>:
063b7c10 sub       $0x38,%rsp
063b7c14 mov       %rcx,0x30(%rsp)
063b7c19 mov       $4,%edx
063b7c1e call      0x0000`0000`063C`3F50
063b7c23 mov       %rax,0x20(%rsp)
063b7c28 mov       %rdx,0x28(%rsp)
063b7c2d mov       0x28(%rsp),%rdx
063b7c32 mov       0x20(%rsp),%rax
063b7c37 add       $0x38,%rsp
063b7c3b ret

core::array::impl$15::index<u8,core::ops::range::Range<usize>,4>:
063b7c40 sub       $0x58,%rsp
063b7c44 mov       %r9,%rax
063b7c47 mov       %r8,%r9
063b7c4a mov       %rdx,%r8
063b7c4d mov       %rcx,0x40(%rsp)
063b7c52 mov       %r8,0x48(%rsp)
063b7c57 mov       %r9,0x50(%rsp)
063b7c5c mov       $4,%edx
063b7c61 mov       %rax,0x20(%rsp)
063b7c66 call      0x0000`0000`063C`1910
063b7c6b mov       %rax,0x30(%rsp)
063b7c70 mov       %rdx,0x38(%rsp)
063b7c75 mov       0x38(%rsp),%rdx
063b7c7a mov       0x30(%rsp),%rax
063b7c7f add       $0x58,%rsp
063b7c83 ret

core::array::impl$15::index<core::mem::maybe_uninit::MaybeUninit<u8>,core::ops::range::RangeFrom<usize>,128>:
063b7c90 sub       $0x48,%rsp
063b7c94 mov       %r8,%r9
063b7c97 mov       %rdx,%r8
063b7c9a mov       %rcx,0x38(%rsp)
063b7c9f mov       %r8,0x40(%rsp)
063b7ca4 mov       $0x80,%edx
063b7ca9 call      0x0000`0000`063C`19C0
063b7cae mov       %rax,0x28(%rsp)
063b7cb3 mov       %rdx,0x30(%rsp)
063b7cb8 mov       0x30(%rsp),%rdx
063b7cbd mov       0x28(%rsp),%rax
063b7cc2 add       $0x48,%rsp
063b7cc6 ret

core::char::convert::from_u32:
063b7cd0 sub       $0x38,%rsp
063b7cd4 mov       %ecx,0x30(%rsp)
063b7cd8 call      0x0000`0000`063B`7D50
063b7cdd mov       %eax,0x2C(%rsp)
063b7ce1 mov       0x2C(%rsp),%eax
063b7ce5 add       $0xFFEF`0000,%eax
063b7cea sete      %al
063b7ced movzbl    %al,%eax
063b7cf0 jne       0x0000`0000`063B`7CF8
063b7cf2 jmp       0x0000`0000`063B`7CF4
063b7cf4 jmp       0x0000`0000`063B`7D06
063b7cf6 ud2
063b7cf8 mov       0x2C(%rsp),%eax
063b7cfc mov       %eax,0x34(%rsp)
063b7d00 mov       %eax,0x28(%rsp)
063b7d04 jmp       0x0000`0000`063B`7D0E
063b7d06 movl      $0x11`0000,0x28(%rsp)
063b7d0e mov       0x28(%rsp),%eax
063b7d12 add       $0x38,%rsp
063b7d16 ret

core::char::convert::from_u32_unchecked:
063b7d20 sub       $0x38,%rsp
063b7d24 mov       %ecx,0x34(%rsp)
063b7d28 call      0x0000`0000`063B`7EE0
063b7d2d mov       %eax,0x30(%rsp)
063b7d31 mov       0x30(%rsp),%ecx
063b7d35 lea       0x63C`FA40,%rdx
063b7d3c call      0x0000`0000`063B`9630
063b7d41 mov       %eax,0x2C(%rsp)
063b7d45 mov       0x2C(%rsp),%eax
063b7d49 add       $0x38,%rsp
063b7d4d ret

core::char::convert::char_try_from_u32:
063b7d50 sub       $0x20,%rsp
063b7d54 mov       %ecx,%eax
063b7d56 mov       %eax,4(%rsp)
063b7d5a mov       %eax,0x10(%rsp)
063b7d5e xor       $0xD800,%eax
063b7d63 mov       %eax,0x18(%rsp)
063b7d67 movl      $0x800,0x1C(%rsp)
063b7d6f sub       $0x800,%eax
063b7d74 mov       %eax,8(%rsp)
063b7d78 mov       8(%rsp),%eax
063b7d7c cmp       $0x10`F800,%eax
063b7d81 jae       0x0000`0000`063B`7D94
063b7d83 mov       4(%rsp),%eax
063b7d87 mov       %eax,0x14(%rsp)
063b7d8b mov       0x14(%rsp),%eax
063b7d8f mov       %eax,(%rsp)
063b7d92 jmp       0x0000`0000`063B`7DA5
063b7d94 movl      $0x11`0000,0xC(%rsp)
063b7d9c mov       0xC(%rsp),%eax
063b7da0 add       $0x20,%rsp
063b7da4 ret
063b7da5 mov       (%rsp),%eax
063b7da8 mov       %eax,0xC(%rsp)
063b7dac jmp       0x0000`0000`063B`7D9C

core::char::convert::from_digit:
063b7db0 sub       $0x78,%rsp
063b7db4 mov       %edx,0x2C(%rsp)
063b7db8 mov       %ecx,0x30(%rsp)
063b7dbc mov       %ecx,0x6C(%rsp)
063b7dc0 mov       %edx,0x70(%rsp)
063b7dc4 cmp       $0x24,%edx
063b7dc7 ja        0x0000`0000`063B`7DD7
063b7dc9 mov       0x30(%rsp),%eax
063b7dcd mov       0x2C(%rsp),%ecx
063b7dd1 cmp       %ecx,%eax
063b7dd3 jb        0x0000`0000`063B`7E1D
063b7dd5 jmp       0x0000`0000`063B`7E13
063b7dd7 lea       0x38(%rsp),%rcx
063b7ddc lea       0x63C`FA88,%rdx
063b7de3 mov       $1,%r8d
063b7de9 lea       0x63C`F530,%r9
063b7df0 xor       %eax,%eax
063b7df2 movq      $0,0x20(%rsp)
063b7dfb call      0x0000`0000`063B`EFF0
063b7e00 lea       0x63C`FA98,%rdx
063b7e07 lea       0x38(%rsp),%rcx
063b7e0c call      0x0000`0000`063B`A100
063b7e11 ud2
063b7e13 movl      $0x11`0000,0x34(%rsp)
063b7e1b jmp       0x0000`0000`063B`7E78
063b7e1d mov       0x30(%rsp),%eax
063b7e21 mov       %al,0x2B(%rsp)
063b7e25 mov       %al,0x77(%rsp)
063b7e29 cmp       $0xA,%al
063b7e2b jb        0x0000`0000`063B`7E40
063b7e2d mov       0x2B(%rsp),%al
063b7e31 add       $0x61,%al
063b7e33 mov       %al,0x2A(%rsp)
063b7e37 setb      %al
063b7e3a test      $1,%al
063b7e3c jne       0x0000`0000`063B`7E94
063b7e3e jmp       0x0000`0000`063B`7E81
063b7e40 mov       0x2B(%rsp),%al
063b7e44 add       $0x30,%al
063b7e46 mov       %al,0x29(%rsp)
063b7e4a setb      %al
063b7e4d test      $1,%al
063b7e4f jne       0x0000`0000`063B`7E5E
063b7e51 mov       0x29(%rsp),%al
063b7e55 movzbl    %al,%eax
063b7e58 mov       %eax,0x34(%rsp)
063b7e5c jmp       0x0000`0000`063B`7E78
063b7e5e lea       0x63C`F3E0,%rcx
063b7e65 lea       0x63C`FAB0,%r8
063b7e6c mov       $0x1C,%edx
063b7e71 call      0x0000`0000`063B`9FF0
063b7e76 ud2
063b7e78 mov       0x34(%rsp),%eax
063b7e7c add       $0x78,%rsp
063b7e80 ret
063b7e81 mov       0x2A(%rsp),%al
063b7e85 sub       $0xA,%al
063b7e87 mov       %al,0x28(%rsp)
063b7e8b setb      %al
063b7e8e test      $1,%al
063b7e90 jne       0x0000`0000`063B`7EBB
063b7e92 jmp       0x0000`0000`063B`7EAE
063b7e94 lea       0x63C`F3E0,%rcx
063b7e9b lea       0x63C`FAC8,%r8
063b7ea2 mov       $0x1C,%edx
063b7ea7 call      0x0000`0000`063B`9FF0
063b7eac ud2
063b7eae mov       0x28(%rsp),%al
063b7eb2 movzbl    %al,%eax
063b7eb5 mov       %eax,0x34(%rsp)
063b7eb9 jmp       0x0000`0000`063B`7E78
063b7ebb lea       0x63C`F3B0,%rcx
063b7ec2 lea       0x63C`FAE0,%r8
063b7ec9 mov       $0x21,%edx
063b7ece call      0x0000`0000`063B`9FF0
063b7ed3 ud2

core::char::methods::impl$0::from_u32:
063b7ee0 sub       $0x28,%rsp
063b7ee4 mov       %ecx,0x24(%rsp)
063b7ee8 call      0x0000`0000`063B`7CD0
063b7eed mov       %eax,0x20(%rsp)
063b7ef1 mov       0x20(%rsp),%eax
063b7ef5 add       $0x28,%rsp
063b7ef9 ret

core::char::methods::impl$0::escape_unicode:
063b7f00 sub       $0x58,%rsp
063b7f04 mov       %edx,0x24(%rsp)
063b7f08 mov       %rcx,0x28(%rsp)
063b7f0d mov       %rcx,0x30(%rsp)
063b7f12 mov       %edx,0x40(%rsp)
063b7f16 mov       %edx,0x44(%rsp)
063b7f1a or        $1,%edx
063b7f1d mov       %edx,0x50(%rsp)
063b7f21 bsr       %edx,%eax
063b7f24 mov       $0x3F,%ecx
063b7f29 cmove     %ecx,%eax
063b7f2c xor       $0x1F,%eax
063b7f2f mov       %eax,0x54(%rsp)
063b7f33 mov       0x54(%rsp),%eax
063b7f37 mov       %eax,0x3C(%rsp)
063b7f3b mov       0x3C(%rsp),%ecx
063b7f3f mov       $0x1F,%eax
063b7f44 sub       %ecx,%eax
063b7f46 mov       %eax,0x20(%rsp)
063b7f4a setb      %al
063b7f4d test      $1,%al
063b7f4f jne       0x0000`0000`063B`7F81
063b7f51 mov       0x30(%rsp),%rax
063b7f56 mov       0x28(%rsp),%rcx
063b7f5b mov       0x24(%rsp),%r8d
063b7f60 mov       0x20(%rsp),%edx
063b7f64 mov       %edx,0x48(%rsp)
063b7f68 shr       $2,%edx
063b7f6b mov       %edx,0x4C(%rsp)
063b7f6f mov       %edx,%edx
063b7f71 mov       %r8d,8(%rcx)
063b7f75 movb      $5,0xC(%rcx)
063b7f79 mov       %rdx,(%rcx)
063b7f7c add       $0x58,%rsp
063b7f80 ret
063b7f81 lea       0x63C`F3B0,%rcx
063b7f88 lea       0x63C`FB78,%r8
063b7f8f mov       $0x21,%edx
063b7f94 call      0x0000`0000`063B`9FF0
063b7f99 ud2

core::char::methods::impl$0::escape_debug_ext:
063b7fa0 sub       $0xB8,%rsp
063b7fa7 mov       %edx,0x2C(%rsp)
063b7fab mov       %rcx,0x30(%rsp)
063b7fb0 mov       %rcx,0x38(%rsp)
063b7fb5 mov       %r8w,%ax
063b7fb9 mov       %ax,0x44(%rsp)
063b7fbe shr       $0x10,%r8d
063b7fc2 mov       %r8b,%al
063b7fc5 mov       %al,0x46(%rsp)
063b7fc9 mov       0x46(%rsp),%al
063b7fcd mov       %al,0x42(%rsp)
063b7fd1 mov       0x44(%rsp),%ax
063b7fd6 mov       %ax,0x40(%rsp)
063b7fdb mov       %edx,0xB4(%rsp)
063b7fe2 sub       $9,%edx
063b7fe5 je        0x0000`0000`063B`8030
063b7fe7 jmp       0x0000`0000`063B`7FE9
063b7fe9 mov       0x2C(%rsp),%eax
063b7fed sub       $0xA,%eax
063b7ff0 je        0x0000`0000`063B`8054
063b7ff2 jmp       0x0000`0000`063B`7FF4
063b7ff4 mov       0x2C(%rsp),%eax
063b7ff8 sub       $0xD,%eax
063b7ffb je        0x0000`0000`063B`8042
063b7ffd jmp       0x0000`0000`063B`7FFF
063b7fff mov       0x2C(%rsp),%eax
063b8003 sub       $0x22,%eax
063b8006 je        0x0000`0000`063B`8078
063b8008 jmp       0x0000`0000`063B`800A
063b800a mov       0x2C(%rsp),%eax
063b800e sub       $0x27,%eax
063b8011 je        0x0000`0000`063B`8085
063b8013 jmp       0x0000`0000`063B`8015
063b8015 mov       0x2C(%rsp),%eax
063b8019 sub       $0x5C,%eax
063b801c je        0x0000`0000`063B`8066
063b801e jmp       0x0000`0000`063B`8020
063b8020 testb     $1,0x40(%rsp)
063b8025 jne       0x0000`0000`063B`814C
063b802b jmp       0x0000`0000`063B`813D
063b8030 movl      $0x74,0x4C(%rsp)
063b8038 movl      $2,0x48(%rsp)
063b8040 jmp       0x0000`0000`063B`809C
063b8042 movl      $0x72,0x4C(%rsp)
063b804a movl      $2,0x48(%rsp)
063b8052 jmp       0x0000`0000`063B`809C
063b8054 movl      $0x6E,0x4C(%rsp)
063b805c movl      $2,0x48(%rsp)
063b8064 jmp       0x0000`0000`063B`809C
063b8066 mov       0x2C(%rsp),%eax
063b806a mov       %eax,0x4C(%rsp)
063b806e movl      $2,0x48(%rsp)
063b8076 jmp       0x0000`0000`063B`809C
063b8078 testb     $1,0x42(%rsp)
063b807d jne       0x0000`0000`063B`8128
063b8083 jmp       0x0000`0000`063B`8020
063b8085 testb     $1,0x41(%rsp)
063b808a je        0x0000`0000`063B`8020
063b808c mov       0x2C(%rsp),%eax
063b8090 mov       %eax,0x4C(%rsp)
063b8094 movl      $2,0x48(%rsp)
063b809c mov       0x38(%rsp),%rax
063b80a1 mov       0x30(%rsp),%rcx
063b80a6 mov       0x48(%rsp),%rdx
063b80ab mov       %rdx,0x98(%rsp)
063b80b3 mov       0x50(%rsp),%rdx
063b80b8 mov       %rdx,0xA0(%rsp)
063b80c0 mov       0x58(%rsp),%rdx
063b80c5 mov       %rdx,0xA8(%rsp)
063b80cd mov       0x98(%rsp),%rdx
063b80d5 mov       %rdx,0x80(%rsp)
063b80dd mov       0xA0(%rsp),%rdx
063b80e5 mov       %rdx,0x88(%rsp)
063b80ed mov       0xA8(%rsp),%rdx
063b80f5 mov       %rdx,0x90(%rsp)
063b80fd mov       0x80(%rsp),%rdx
063b8105 mov       %rdx,(%rcx)
063b8108 mov       0x88(%rsp),%rdx
063b8110 mov       %rdx,8(%rcx)
063b8114 mov       0x90(%rsp),%rdx
063b811c mov       %rdx,0x10(%rcx)
063b8120 add       $0xB8,%rsp
063b8127 ret
063b8128 mov       0x2C(%rsp),%eax
063b812c mov       %eax,0x4C(%rsp)
063b8130 movl      $2,0x48(%rsp)
063b8138 jmp       0x0000`0000`063B`809C
063b813d mov       0x2C(%rsp),%ecx
063b8141 call      0x0000`0000`063C`7FE0
063b8146 mov       %al,0x2B(%rsp)
063b814a jmp       0x0000`0000`063B`8192
063b814c mov       0x2C(%rsp),%ecx
063b8150 call      0x0000`0000`063B`8260
063b8155 mov       %al,0x2A(%rsp)
063b8159 mov       0x2A(%rsp),%al
063b815d test      $1,%al
063b815f jne       0x0000`0000`063B`8163
063b8161 jmp       0x0000`0000`063B`813D
063b8163 mov       0x2C(%rsp),%edx
063b8167 lea       0x60(%rsp),%rcx
063b816c call      0x0000`0000`063B`7F00
063b8171 mov       0x60(%rsp),%rax
063b8176 mov       %rax,0x50(%rsp)
063b817b mov       0x68(%rsp),%rax
063b8180 mov       %rax,0x58(%rsp)
063b8185 movl      $3,0x48(%rsp)
063b818d jmp       0x0000`0000`063B`809C
063b8192 mov       0x2B(%rsp),%al
063b8196 test      $1,%al
063b8198 jne       0x0000`0000`063B`81AC
063b819a jmp       0x0000`0000`063B`819C
063b819c mov       0x2C(%rsp),%edx
063b81a0 lea       0x70(%rsp),%rcx
063b81a5 call      0x0000`0000`063B`7F00
063b81aa jmp       0x0000`0000`063B`81C1
063b81ac mov       0x2C(%rsp),%eax
063b81b0 mov       %eax,0x4C(%rsp)
063b81b4 movl      $1,0x48(%rsp)
063b81bc jmp       0x0000`0000`063B`809C
063b81c1 mov       0x70(%rsp),%rax
063b81c6 mov       %rax,0x50(%rsp)
063b81cb mov       0x78(%rsp),%rax
063b81d0 mov       %rax,0x58(%rsp)
063b81d5 movl      $3,0x48(%rsp)
063b81dd jmp       0x0000`0000`063B`809C

core::char::methods::impl$0::len_utf8:
063b81f0 sub       $0x38,%rsp
063b81f4 mov       %ecx,0x34(%rsp)
063b81f8 call      0x0000`0000`063B`8280
063b81fd mov       %rax,0x28(%rsp)
063b8202 mov       0x28(%rsp),%rax
063b8207 add       $0x38,%rsp
063b820b ret

core::char::methods::impl$0::encode_utf8:
063b8210 sub       $0x58,%rsp
063b8214 mov       %ecx,0x44(%rsp)
063b8218 mov       %rdx,0x48(%rsp)
063b821d mov       %r8,0x50(%rsp)
063b8222 call      0x0000`0000`063B`82F0
063b8227 mov       %rax,0x30(%rsp)
063b822c mov       %rdx,0x38(%rsp)
063b8231 mov       0x38(%rsp),%rdx
063b8236 mov       0x30(%rsp),%rcx
063b823b call      0x0000`0000`063C`5170
063b8240 mov       %rax,0x20(%rsp)
063b8245 mov       %rdx,0x28(%rsp)
063b824a mov       0x28(%rsp),%rdx
063b824f mov       0x20(%rsp),%rax
063b8254 add       $0x58,%rsp
063b8258 ret

core::char::methods::impl$0::is_grapheme_extended:
063b8260 sub       $0x28,%rsp
063b8264 mov       %ecx,0x24(%rsp)
063b8268 call      0x0000`0000`063C`AD80
063b826d mov       %al,0x23(%rsp)
063b8271 mov       0x23(%rsp),%al
063b8275 and       $1,%al
063b8277 movzbl    %al,%eax
063b827a add       $0x28,%rsp
063b827e ret

core::char::methods::len_utf8:
063b8280 sub       $0x18,%rsp
063b8284 mov       %ecx,4(%rsp)
063b8288 mov       %ecx,0x14(%rsp)
063b828c cmp       $0x80,%ecx
063b8292 jb        0x0000`0000`063B`82A1
063b8294 mov       4(%rsp),%eax
063b8298 cmp       $0x800,%eax
063b829d jb        0x0000`0000`063B`82C1
063b829f jmp       0x0000`0000`063B`82B4
063b82a1 movq      $1,8(%rsp)
063b82aa mov       8(%rsp),%rax
063b82af add       $0x18,%rsp
063b82b3 ret
063b82b4 mov       4(%rsp),%eax
063b82b8 cmp       $0x1`0000,%eax
063b82bd jb        0x0000`0000`063B`82D7
063b82bf jmp       0x0000`0000`063B`82CC
063b82c1 movq      $2,8(%rsp)
063b82ca jmp       0x0000`0000`063B`82AA
063b82cc movq      $4,8(%rsp)
063b82d5 jmp       0x0000`0000`063B`82AA
063b82d7 movq      $3,8(%rsp)
063b82e0 jmp       0x0000`0000`063B`82AA

core::char::methods::encode_utf8_raw:
063b82f0 sub       $0x1F8,%rsp
063b82f7 mov       %r8,0xF0(%rsp)
063b82ff mov       %rdx,0xF8(%rsp)
063b8307 mov       %ecx,0x104(%rsp)
063b830e mov       %rdx,0x198(%rsp)
063b8316 mov       %r8,0x1A0(%rsp)
063b831e mov       0x104(%rsp),%ecx
063b8325 call      0x0000`0000`063B`8280
063b832a mov       %rax,0x108(%rsp)
063b8332 mov       0xF0(%rsp),%rdx
063b833a mov       0xF8(%rsp),%rcx
063b8342 mov       0x108(%rsp),%rax
063b834a mov       %rax,0xD8(%rsp)
063b8352 lea       0x63C`FB90,%r8
063b8359 call      0x0000`0000`063C`1B10
063b835e mov       %rax,0xE0(%rsp)
063b8366 mov       %rdx,0xE8(%rsp)
063b836e mov       0xE8(%rsp),%rax
063b8376 mov       0xE0(%rsp),%rcx
063b837e mov       0xD8(%rsp),%rdx
063b8386 mov       %rdx,0x110(%rsp)
063b838e mov       %rcx,0x118(%rsp)
063b8396 mov       %rax,0x120(%rsp)
063b839e mov       0x110(%rsp),%rax
063b83a6 add       $0xFFFF`FFFF`FFFF`FFFF,%rax
063b83aa mov       %rax,0xD0(%rsp)
063b83b2 sub       $3,%rax
063b83b6 ja        0x0000`0000`063B`83D0
063b83b8 mov       0xD0(%rsp),%rax
063b83c0 lea       0x63B`8784,%rcx
063b83c7 movslq    (%rcx,%rax,4),%rax
063b83cb add       %rcx,%rax
063b83ce jmp       *%rax
063b83d0 lea       0x108(%rsp),%rcx
063b83d8 call      0x0000`0000`063C`9990
063b83dd mov       %rax,0xC0(%rsp)
063b83e5 mov       %rdx,0xC8(%rsp)
063b83ed jmp       0x0000`0000`063B`86AE
063b83f2 cmpq      $1,0x120(%rsp)
063b83fb jae       0x0000`0000`063B`8678
063b8401 jmp       0x0000`0000`063B`83D0
063b8403 cmpq      $2,0x120(%rsp)
063b840c jae       0x0000`0000`063B`8612
063b8412 jmp       0x0000`0000`063B`83D0
063b8414 cmpq      $3,0x120(%rsp)
063b841d jae       0x0000`0000`063B`8574
063b8423 jmp       0x0000`0000`063B`83D0
063b8425 cmpq      $4,0x120(%rsp)
063b842e jb        0x0000`0000`063B`83D0
063b8430 mov       0x118(%rsp),%rax
063b8438 mov       %rax,0x98(%rsp)
063b8440 mov       %rax,0x1A8(%rsp)
063b8448 mov       0x118(%rsp),%rax
063b8450 add       $1,%rax
063b8454 mov       %rax,0xA0(%rsp)
063b845c mov       %rax,0x1B0(%rsp)
063b8464 mov       0x118(%rsp),%rax
063b846c add       $2,%rax
063b8470 mov       %rax,0xA8(%rsp)
063b8478 mov       %rax,0x1B8(%rsp)
063b8480 mov       0x118(%rsp),%rax
063b8488 add       $3,%rax
063b848c mov       %rax,0xB0(%rsp)
063b8494 mov       %rax,0x1C0(%rsp)
063b849c mov       0x104(%rsp),%eax
063b84a3 shr       $0x12,%eax
063b84a6 mov       %eax,0xBC(%rsp)
063b84ad mov       0x98(%rsp),%rax
063b84b5 mov       0xBC(%rsp),%ecx
063b84bc and       $7,%ecx
063b84bf or        $0xF0,%cl
063b84c2 mov       %cl,(%rax)
063b84c4 mov       0x104(%rsp),%eax
063b84cb shr       $0xC,%eax
063b84ce mov       %eax,0x94(%rsp)
063b84d5 mov       0xA0(%rsp),%rax
063b84dd mov       0x94(%rsp),%ecx
063b84e4 and       $0x3F,%ecx
063b84e7 or        $0x80,%cl
063b84ea mov       %cl,(%rax)
063b84ec mov       0x104(%rsp),%eax
063b84f3 shr       $6,%eax
063b84f6 mov       %eax,0x90(%rsp)
063b84fd mov       0xB0(%rsp),%rax
063b8505 mov       0xA8(%rsp),%rcx
063b850d mov       0x90(%rsp),%edx
063b8514 and       $0x3F,%edx
063b8517 or        $0x80,%dl
063b851a mov       %dl,(%rcx)
063b851c mov       0x104(%rsp),%ecx
063b8523 and       $0x3F,%ecx
063b8526 or        $0x80,%cl
063b8529 mov       %cl,(%rax)
063b852b mov       0xF0(%rsp),%rdx
063b8533 mov       0xF8(%rsp),%rcx
063b853b mov       0x108(%rsp),%rax
063b8543 mov       %rax,0x190(%rsp)
063b854b mov       0x190(%rsp),%r8
063b8553 lea       0x63C`FBA8,%r9
063b855a call      0x0000`0000`063C`1AC0
063b855f mov       %rax,0x80(%rsp)
063b8567 mov       %rdx,0x88(%rsp)
063b856f jmp       0x0000`0000`063B`8696
063b8574 mov       0x118(%rsp),%rax
063b857c mov       %rax,0x60(%rsp)
063b8581 mov       %rax,0x1C8(%rsp)
063b8589 mov       0x118(%rsp),%rax
063b8591 add       $1,%rax
063b8595 mov       %rax,0x68(%rsp)
063b859a mov       %rax,0x1D0(%rsp)
063b85a2 mov       0x118(%rsp),%rax
063b85aa add       $2,%rax
063b85ae mov       %rax,0x70(%rsp)
063b85b3 mov       %rax,0x1D8(%rsp)
063b85bb mov       0x104(%rsp),%eax
063b85c2 shr       $0xC,%eax
063b85c5 mov       %eax,0x7C(%rsp)
063b85c9 mov       0x60(%rsp),%rax
063b85ce mov       0x7C(%rsp),%ecx
063b85d2 and       $0xF,%ecx
063b85d5 or        $0xE0,%cl
063b85d8 mov       %cl,(%rax)
063b85da mov       0x104(%rsp),%eax
063b85e1 shr       $6,%eax
063b85e4 mov       %eax,0x5C(%rsp)
063b85e8 mov       0x70(%rsp),%rax
063b85ed mov       0x68(%rsp),%rcx
063b85f2 mov       0x5C(%rsp),%edx
063b85f6 and       $0x3F,%edx
063b85f9 or        $0x80,%dl
063b85fc mov       %dl,(%rcx)
063b85fe mov       0x104(%rsp),%ecx
063b8605 and       $0x3F,%ecx
063b8608 or        $0x80,%cl
063b860b mov       %cl,(%rax)
063b860d jmp       0x0000`0000`063B`852B
063b8612 mov       0x118(%rsp),%rax
063b861a mov       %rax,0x48(%rsp)
063b861f mov       %rax,0x1E0(%rsp)
063b8627 mov       0x118(%rsp),%rax
063b862f add       $1,%rax
063b8633 mov       %rax,0x50(%rsp)
063b8638 mov       %rax,0x1E8(%rsp)
063b8640 mov       0x104(%rsp),%eax
063b8647 shr       $6,%eax
063b864a mov       %eax,0x58(%rsp)
063b864e mov       0x50(%rsp),%rax
063b8653 mov       0x48(%rsp),%rcx
063b8658 mov       0x58(%rsp),%edx
063b865c and       $0x1F,%edx
063b865f or        $0xC0,%dl
063b8662 mov       %dl,(%rcx)
063b8664 mov       0x104(%rsp),%ecx
063b866b and       $0x3F,%ecx
063b866e or        $0x80,%cl
063b8671 mov       %cl,(%rax)
063b8673 jmp       0x0000`0000`063B`852B
063b8678 mov       0x118(%rsp),%rax
063b8680 mov       %rax,0x1F0(%rsp)
063b8688 mov       0x104(%rsp),%ecx
063b868f mov       %cl,(%rax)
063b8691 jmp       0x0000`0000`063B`852B
063b8696 mov       0x88(%rsp),%rdx
063b869e mov       0x80(%rsp),%rax
063b86a6 add       $0x1F8,%rsp
063b86ad ret
063b86ae lea       0x104(%rsp),%rcx
063b86b6 call      0x0000`0000`063C`9B40
063b86bb mov       %rax,0x38(%rsp)
063b86c0 mov       %rdx,0x40(%rsp)
063b86c5 mov       0xF0(%rsp),%rax
063b86cd mov       %rax,0x188(%rsp)
063b86d5 lea       0x188(%rsp),%rcx
063b86dd call      0x0000`0000`063C`9990
063b86e2 mov       %rax,0x28(%rsp)
063b86e7 mov       %rdx,0x30(%rsp)
063b86ec mov       0x30(%rsp),%rax
063b86f1 mov       0x28(%rsp),%rcx
063b86f6 mov       0x40(%rsp),%rdx
063b86fb mov       0x38(%rsp),%r8
063b8700 mov       0xC8(%rsp),%r9
063b8708 mov       0xC0(%rsp),%r10
063b8710 mov       %r10,0x158(%rsp)
063b8718 mov       %r9,0x160(%rsp)
063b8720 mov       %r8,0x168(%rsp)
063b8728 mov       %rdx,0x170(%rsp)
063b8730 mov       %rcx,0x178(%rsp)
063b8738 mov       %rax,0x180(%rsp)
063b8740 lea       0x158(%rsp),%r9
063b8748 lea       0x128(%rsp),%rcx
063b8750 lea       0x63C`FC00,%rdx
063b8757 mov       $3,%r8d
063b875d movq      $3,0x20(%rsp)
063b8766 call      0x0000`0000`063B`EFF0
063b876b lea       0x63C`FC30,%rdx
063b8772 lea       0x128(%rsp),%rcx
063b877a call      0x0000`0000`063B`A100
063b877f ud2

core::char::impl$0::next:
063b87a0 sub       $0x78,%rsp
063b87a4 mov       %rcx,0x48(%rsp)
063b87a9 mov       %rcx,0x68(%rsp)
063b87ae movzbl    0xC(%rcx),%eax
063b87b2 mov       %rax,0x50(%rsp)
063b87b7 mov       0x50(%rsp),%rax
063b87bc lea       0x63B`8970,%rcx
063b87c3 movslq    (%rcx,%rax,4),%rax
063b87c7 add       %rcx,%rax
063b87ca jmp       *%rax
063b87cc ud2
063b87ce movl      $0x11`0000,0x5C(%rsp)
063b87d6 jmp       0x0000`0000`063B`886E
063b87db mov       0x48(%rsp),%rax
063b87e0 movb      $0,0x67(%rsp)
063b87e5 mov       0x67(%rsp),%cl
063b87e9 mov       %cl,0xC(%rax)
063b87ec movl      $0x7D,0x5C(%rsp)
063b87f4 jmp       0x0000`0000`063B`886E
063b87f6 mov       0x48(%rsp),%rax
063b87fb mov       8(%rax),%ecx
063b87fe mov       %ecx,0x3C(%rsp)
063b8802 mov       (%rax),%rax
063b8805 mov       $4,%ecx
063b880a mul       %rcx
063b880d mov       %rax,0x40(%rsp)
063b8812 seto      %al
063b8815 test      $1,%al
063b8817 jne       0x0000`0000`063B`889D
063b881d jmp       0x0000`0000`063B`8877
063b881f mov       0x48(%rsp),%rax
063b8824 movb      $2,0x65(%rsp)
063b8829 mov       0x65(%rsp),%cl
063b882d mov       %cl,0xC(%rax)
063b8830 movl      $0x7B,0x5C(%rsp)
063b8838 jmp       0x0000`0000`063B`886E
063b883a mov       0x48(%rsp),%rax
063b883f movb      $3,0x64(%rsp)
063b8844 mov       0x64(%rsp),%cl
063b8848 mov       %cl,0xC(%rax)
063b884b movl      $0x75,0x5C(%rsp)
063b8853 jmp       0x0000`0000`063B`886E
063b8855 mov       0x48(%rsp),%rax
063b885a movb      $4,0x63(%rsp)
063b885f mov       0x63(%rsp),%cl
063b8863 mov       %cl,0xC(%rax)
063b8866 movl      $0x5C,0x5C(%rsp)
063b886e mov       0x5C(%rsp),%eax
063b8872 add       $0x78,%rsp
063b8876 ret
063b8877 mov       0x3C(%rsp),%edx
063b887b mov       0x40(%rsp),%rcx
063b8880 mov       %rcx,%rax
063b8883 and       $0xFFFF`FFFF`FFFF`FFE0,%rax
063b8887 cmp       $0,%rax
063b888b setne     %al
063b888e and       $0x1F,%ecx
063b8891 shr       %cl,%edx
063b8893 mov       %edx,0x38(%rsp)
063b8897 test      $1,%al
063b8899 jne       0x0000`0000`063B`88D2
063b889b jmp       0x0000`0000`063B`88B7
063b889d lea       0x63C`F400,%rcx
063b88a4 lea       0x63C`FCC0,%r8
063b88ab mov       $0x21,%edx
063b88b0 call      0x0000`0000`063B`9FF0
063b88b5 ud2
063b88b7 mov       0x38(%rsp),%ecx
063b88bb and       $0xF,%ecx
063b88be mov       %ecx,0x70(%rsp)
063b88c2 mov       $0x10,%edx
063b88c7 call      0x0000`0000`063B`7DB0
063b88cc mov       %eax,0x34(%rsp)
063b88d0 jmp       0x0000`0000`063B`88EC
063b88d2 lea       0x63C`F460,%rcx
063b88d9 lea       0x63C`FCD8,%r8
063b88e0 mov       $0x24,%edx
063b88e5 call      0x0000`0000`063B`9FF0
063b88ea ud2
063b88ec mov       0x34(%rsp),%ecx
063b88f0 lea       0x63C`FCF0,%rdx
063b88f7 call      0x0000`0000`063B`9630
063b88fc mov       %eax,0x30(%rsp)
063b8900 mov       %eax,0x74(%rsp)
063b8904 mov       0x48(%rsp),%rax
063b8909 cmpq      $0,(%rax)
063b890d jne       0x0000`0000`063B`8922
063b890f mov       0x48(%rsp),%rax
063b8914 movb      $1,0x66(%rsp)
063b8919 mov       0x66(%rsp),%cl
063b891d mov       %cl,0xC(%rax)
063b8920 jmp       0x0000`0000`063B`8963
063b8922 mov       0x48(%rsp),%rax
063b8927 mov       (%rax),%rax
063b892a sub       $1,%rax
063b892e mov       %rax,0x28(%rsp)
063b8933 setb      %al
063b8936 test      $1,%al
063b8938 jne       0x0000`0000`063B`8949
063b893a mov       0x48(%rsp),%rax
063b893f mov       0x28(%rsp),%rcx
063b8944 mov       %rcx,(%rax)
063b8947 jmp       0x0000`0000`063B`8963
063b8949 lea       0x63C`F3B0,%rcx
063b8950 lea       0x63C`FD08,%r8
063b8957 mov       $0x21,%edx
063b895c call      0x0000`0000`063B`9FF0
063b8961 ud2
063b8963 mov       0x30(%rsp),%eax
063b8967 mov       %eax,0x5C(%rsp)
063b896b jmp       0x0000`0000`063B`886E

core::char::impl$4::next:
063b8990 sub       $0x88,%rsp
063b8997 mov       %rcx,0x28(%rsp)
063b899c mov       %rcx,0x70(%rsp)
063b89a1 mov       (%rcx),%eax
063b89a3 mov       %rax,0x30(%rsp)
063b89a8 mov       0x30(%rsp),%rax
063b89ad lea       0x63B`8A68,%rcx
063b89b4 movslq    (%rcx,%rax,4),%rax
063b89b8 add       %rcx,%rax
063b89bb jmp       *%rax
063b89bd ud2
063b89bf movl      $0x11`0000,0x3C(%rsp)
063b89c7 jmp       0x0000`0000`063B`8A59
063b89cc mov       0x28(%rsp),%rcx
063b89d1 mov       4(%rcx),%eax
063b89d4 mov       %eax,0x84(%rsp)
063b89db movl      $0,0x58(%rsp)
063b89e3 mov       0x58(%rsp),%rdx
063b89e8 mov       %rdx,(%rcx)
063b89eb mov       0x60(%rsp),%rdx
063b89f0 mov       %rdx,8(%rcx)
063b89f4 mov       0x68(%rsp),%rdx
063b89f9 mov       %rdx,0x10(%rcx)
063b89fd mov       %eax,0x3C(%rsp)
063b8a01 jmp       0x0000`0000`063B`8A59
063b8a03 mov       0x28(%rsp),%rax
063b8a08 mov       4(%rax),%ecx
063b8a0b mov       %ecx,0x80(%rsp)
063b8a12 mov       %ecx,0x44(%rsp)
063b8a16 movl      $1,0x40(%rsp)
063b8a1e mov       0x40(%rsp),%rcx
063b8a23 mov       %rcx,(%rax)
063b8a26 mov       0x48(%rsp),%rcx
063b8a2b mov       %rcx,8(%rax)
063b8a2f mov       0x50(%rsp),%rcx
063b8a34 mov       %rcx,0x10(%rax)
063b8a38 movl      $0x5C,0x3C(%rsp)
063b8a40 jmp       0x0000`0000`063B`8A59
063b8a42 mov       0x28(%rsp),%rcx
063b8a47 add       $8,%rcx
063b8a4b mov       %rcx,0x78(%rsp)
063b8a50 call      0x0000`0000`063B`87A0
063b8a55 mov       %eax,0x3C(%rsp)
063b8a59 mov       0x3C(%rsp),%eax
063b8a5d add       $0x88,%rsp
063b8a64 ret

core::char::impl$8::next:
063b8a80 sub       $0x38,%rsp
063b8a84 mov       %rcx,0x30(%rsp)
063b8a89 call      0x0000`0000`063B`8990
063b8a8e mov       %eax,0x2C(%rsp)
063b8a92 mov       0x2C(%rsp),%eax
063b8a96 add       $0x38,%rsp
063b8a9a ret

core::iter::adapters::cloned::Cloned<core::slice::iter::Iter<u8> >::new<core::slice::iter::Iter<u8> >:
063b8aa0 sub       $0x20,%rsp
063b8aa4 mov       %rcx,0x10(%rsp)
063b8aa9 mov       %rdx,0x18(%rsp)
063b8aae mov       %rcx,(%rsp)
063b8ab2 mov       %rdx,8(%rsp)
063b8ab7 mov       (%rsp),%rax
063b8abb mov       8(%rsp),%rdx
063b8ac0 add       $0x20,%rsp
063b8ac4 ret

core::iter::adapters::cloned::impl$1::next<core::slice::iter::Iter<u8>,u8>:
063b8ad0 sub       $0x38,%rsp
063b8ad4 mov       %rcx,0x30(%rsp)
063b8ad9 call      0x0000`0000`063C`9D90
063b8ade mov       %rax,0x28(%rsp)
063b8ae3 mov       0x28(%rsp),%rcx
063b8ae8 call      0x0000`0000`063B`9CD0
063b8aed mov       %al,0x26(%rsp)
063b8af1 mov       %dl,0x27(%rsp)
063b8af5 mov       0x27(%rsp),%dl
063b8af9 mov       0x26(%rsp),%al
063b8afd and       $1,%al
063b8aff add       $0x38,%rsp
063b8b03 ret

core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<core::fmt::rt::v1::Argument> >::new<core::slice::iter::Iter<core::fmt::rt::v1::Argument> >:
063b8b10 sub       $0x10,%rsp
063b8b14 mov       %rcx,%rax
063b8b17 mov       %rdx,(%rsp)
063b8b1b mov       %r8,8(%rsp)
063b8b20 mov       %rdx,(%rcx)
063b8b23 mov       %r8,8(%rcx)
063b8b27 movq      $0,0x10(%rcx)
063b8b2f add       $0x10,%rsp
063b8b33 ret

core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<core::fmt::ArgumentV1> >::new<core::slice::iter::Iter<core::fmt::ArgumentV1> >:
063b8b40 sub       $0x10,%rsp
063b8b44 mov       %rcx,%rax
063b8b47 mov       %rdx,(%rsp)
063b8b4b mov       %r8,8(%rsp)
063b8b50 mov       %rdx,(%rcx)
063b8b53 mov       %r8,8(%rcx)
063b8b57 movq      $0,0x10(%rcx)
063b8b5f add       $0x10,%rsp
063b8b63 ret

core::iter::adapters::enumerate::impl$1::next<core::slice::iter::Iter<core::fmt::ArgumentV1> >:
063b8b70 sub       $0x98,%rsp
063b8b77 mov       %rcx,0x38(%rsp)
063b8b7c mov       %rcx,0x70(%rsp)
063b8b81 call      0x0000`0000`063C`9C70
063b8b86 mov       %rax,0x40(%rsp)
063b8b8b mov       0x40(%rsp),%rcx
063b8b90 call      0x0000`0000`063B`9D30
063b8b95 mov       %rax,0x58(%rsp)
063b8b9a mov       0x58(%rsp),%rax
063b8b9f test      %rax,%rax
063b8ba2 sete      %al
063b8ba5 movzbl    %al,%eax
063b8ba8 jne       0x0000`0000`063B`8BB0
063b8baa jmp       0x0000`0000`063B`8BAC
063b8bac jmp       0x0000`0000`063B`8BF6
063b8bae ud2
063b8bb0 mov       0x38(%rsp),%rax
063b8bb5 mov       0x58(%rsp),%rcx
063b8bba mov       %rcx,0x20(%rsp)
063b8bbf mov       %rcx,0x80(%rsp)
063b8bc7 mov       %rcx,0x88(%rsp)
063b8bcf mov       0x10(%rax),%rcx
063b8bd3 mov       %rcx,0x28(%rsp)
063b8bd8 mov       %rcx,0x90(%rsp)
063b8be0 mov       0x10(%rax),%rax
063b8be4 add       $1,%rax
063b8be8 mov       %rax,0x30(%rsp)
063b8bed setb      %al
063b8bf0 test      $1,%al
063b8bf2 jne       0x0000`0000`063B`8C4F
063b8bf4 jmp       0x0000`0000`063B`8C17
063b8bf6 call      0x0000`0000`063B`9EC0
063b8bfb mov       %rdx,0x50(%rsp)
063b8c00 mov       %rax,0x48(%rsp)
063b8c05 mov       0x48(%rsp),%rax
063b8c0a mov       0x50(%rsp),%rdx
063b8c0f add       $0x98,%rsp
063b8c16 ret
063b8c17 mov       0x20(%rsp),%rax
063b8c1c mov       0x28(%rsp),%rcx
063b8c21 mov       0x38(%rsp),%rdx
063b8c26 mov       0x30(%rsp),%r8
063b8c2b mov       %r8,0x10(%rdx)
063b8c2f mov       %rcx,0x60(%rsp)
063b8c34 mov       %rax,0x68(%rsp)
063b8c39 mov       0x60(%rsp),%rcx
063b8c3e mov       0x68(%rsp),%rax
063b8c43 mov       %rcx,0x48(%rsp)
063b8c48 mov       %rax,0x50(%rsp)
063b8c4d jmp       0x0000`0000`063B`8C05
063b8c4f lea       0x63C`F3E0,%rcx
063b8c56 lea       0x63C`FDA8,%r8
063b8c5d mov       $0x1C,%edx
063b8c62 call      0x0000`0000`063B`9FF0
063b8c67 ud2

core::iter::adapters::enumerate::impl$1::next<core::slice::iter::Iter<core::fmt::rt::v1::Argument> >:
063b8c70 sub       $0x98,%rsp
063b8c77 mov       %rcx,0x38(%rsp)
063b8c7c mov       %rcx,0x70(%rsp)
063b8c81 call      0x0000`0000`063C`A210
063b8c86 mov       %rax,0x40(%rsp)
063b8c8b mov       0x40(%rsp),%rcx
063b8c90 call      0x0000`0000`063B`9E50
063b8c95 mov       %rax,0x58(%rsp)
063b8c9a mov       0x58(%rsp),%rax
063b8c9f test      %rax,%rax
063b8ca2 sete      %al
063b8ca5 movzbl    %al,%eax
063b8ca8 jne       0x0000`0000`063B`8CB0
063b8caa jmp       0x0000`0000`063B`8CAC
063b8cac jmp       0x0000`0000`063B`8CF6
063b8cae ud2
063b8cb0 mov       0x38(%rsp),%rax
063b8cb5 mov       0x58(%rsp),%rcx
063b8cba mov       %rcx,0x20(%rsp)
063b8cbf mov       %rcx,0x80(%rsp)
063b8cc7 mov       %rcx,0x88(%rsp)
063b8ccf mov       0x10(%rax),%rcx
063b8cd3 mov       %rcx,0x28(%rsp)
063b8cd8 mov       %rcx,0x90(%rsp)
063b8ce0 mov       0x10(%rax),%rax
063b8ce4 add       $1,%rax
063b8ce8 mov       %rax,0x30(%rsp)
063b8ced setb      %al
063b8cf0 test      $1,%al
063b8cf2 jne       0x0000`0000`063B`8D4F
063b8cf4 jmp       0x0000`0000`063B`8D17
063b8cf6 call      0x0000`0000`063B`9EA0
063b8cfb mov       %rdx,0x50(%rsp)
063b8d00 mov       %rax,0x48(%rsp)
063b8d05 mov       0x48(%rsp),%rax
063b8d0a mov       0x50(%rsp),%rdx
063b8d0f add       $0x98,%rsp
063b8d16 ret
063b8d17 mov       0x20(%rsp),%rax
063b8d1c mov       0x28(%rsp),%rcx
063b8d21 mov       0x38(%rsp),%rdx
063b8d26 mov       0x30(%rsp),%r8
063b8d2b mov       %r8,0x10(%rdx)
063b8d2f mov       %rcx,0x60(%rsp)
063b8d34 mov       %rax,0x68(%rsp)
063b8d39 mov       0x60(%rsp),%rcx
063b8d3e mov       0x68(%rsp),%rax
063b8d43 mov       %rcx,0x48(%rsp)
063b8d48 mov       %rax,0x50(%rsp)
063b8d4d jmp       0x0000`0000`063B`8D05
063b8d4f lea       0x63C`F3E0,%rcx
063b8d56 lea       0x63C`FDA8,%r8
063b8d5d mov       $0x1C,%edx
063b8d62 call      0x0000`0000`063B`9FF0
063b8d67 ud2

core::iter::adapters::filter::Filter<core::slice::iter::Iter<u8>,core::str::count::char_count_general_case::closure_env$0>::new<core::slice::iter::Iter<u8>,core::str::count::char_count_general_case::closure_env$0>:
063b8d70 sub       $0x28,%rsp
063b8d74 mov       %rcx,0x10(%rsp)
063b8d79 mov       %rdx,0x18(%rsp)
063b8d7e mov       %rcx,(%rsp)
063b8d82 mov       %rdx,8(%rsp)
063b8d87 mov       (%rsp),%rax
063b8d8b mov       8(%rsp),%rdx
063b8d90 add       $0x28,%rsp
063b8d94 ret

core::iter::adapters::filter::impl$2::count<core::slice::iter::Iter<u8>,core::str::count::char_count_general_case::closure_env$0>:
063b8da0 sub       $0x58,%rsp
063b8da4 mov       %rdx,0x38(%rsp)
063b8da9 mov       %rcx,0x40(%rsp)
063b8dae mov       %rcx,0x48(%rsp)
063b8db3 mov       %rdx,0x50(%rsp)
063b8db8 call      0x0000`0000`063B`8E00
063b8dbd mov       0x38(%rsp),%rdx
063b8dc2 mov       0x40(%rsp),%rcx
063b8dc7 call      0x0000`0000`063B`9320
063b8dcc mov       %rax,0x28(%rsp)
063b8dd1 mov       %rdx,0x30(%rsp)
063b8dd6 mov       0x30(%rsp),%rdx
063b8ddb mov       0x28(%rsp),%rcx
063b8de0 call      0x0000`0000`063B`94D0
063b8de5 mov       %rax,0x20(%rsp)
063b8dea mov       0x20(%rsp),%rax
063b8def add       $0x58,%rsp
063b8df3 ret

core::iter::adapters::filter::impl$2::count::to_usize<ref$<u8>,core::str::count::char_count_general_case::closure_env$0>:
063b8e00 ret

core::iter::adapters::filter::impl$2::count::to_usize::closure$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0>:
063b8e10 sub       $0x48,%rsp
063b8e14 mov       %rdx,0x30(%rsp)
063b8e19 mov       %rcx,0x40(%rsp)
063b8e1e lea       0x30(%rsp),%rax
063b8e23 mov       %rax,0x38(%rsp)
063b8e28 mov       0x38(%rsp),%rdx
063b8e2d call      0x0000`0000`063C`5A70
063b8e32 mov       %al,0x2F(%rsp)
063b8e36 mov       0x2F(%rsp),%al
063b8e3a and       $1,%al
063b8e3c movzbl    %al,%eax
063b8e3f mov       %rax,0x20(%rsp)
063b8e44 mov       0x20(%rsp),%rax
063b8e49 add       $0x48,%rsp
063b8e4d ret

core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> >::new<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> >:
063b8e50 sub       $0x28,%rsp
063b8e54 mov       %rcx,0x10(%rsp)
063b8e59 mov       %rdx,0x18(%rsp)
063b8e5e mov       %rcx,(%rsp)
063b8e62 mov       %rdx,8(%rsp)
063b8e67 mov       (%rsp),%rax
063b8e6b mov       8(%rsp),%rdx
063b8e70 add       $0x28,%rsp
063b8e74 ret

core::iter::adapters::map::map_fold<ref$<u8>,usize,usize,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0>,core::iter::traits::accum::impl$48::sum::closure_env$0<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> > > >:
063b8e80 ret

core::iter::adapters::map::map_fold::closure$0<ref$<u8>,usize,usize,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0>,core::iter::traits::accum::impl$48::sum::closure_env$0<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> > > >:
063b8e90 sub       $0x78,%rsp
063b8e94 mov       %rdx,0x30(%rsp)
063b8e99 mov       %rcx,0x60(%rsp)
063b8e9e mov       %rdx,0x68(%rsp)
063b8ea3 mov       %r8,0x70(%rsp)
063b8ea8 mov       %rcx,%rax
063b8eab mov       %rax,0x38(%rsp)
063b8eb0 mov       %r8,0x58(%rsp)
063b8eb5 mov       0x58(%rsp),%rdx
063b8eba call      0x0000`0000`063B`8E10
063b8ebf mov       %rax,0x40(%rsp)
063b8ec4 mov       0x38(%rsp),%rcx
063b8ec9 mov       0x40(%rsp),%rax
063b8ece mov       0x30(%rsp),%rdx
063b8ed3 mov       %rdx,0x48(%rsp)
063b8ed8 mov       %rax,0x50(%rsp)
063b8edd mov       0x48(%rsp),%rdx
063b8ee2 mov       0x50(%rsp),%r8
063b8ee7 call      0x0000`0000`063C`89C0
063b8eec mov       %rax,0x28(%rsp)
063b8ef1 mov       0x28(%rsp),%rax
063b8ef6 add       $0x78,%rsp
063b8efa ret

core::iter::adapters::map::impl$2::fold<usize,core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0>,usize,core::iter::traits::accum::impl$48::sum::closure_env$0<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> > > >:
063b8f00 sub       $0x68,%rsp
063b8f04 mov       %r8,0x30(%rsp)
063b8f09 mov       %rdx,0x38(%rsp)
063b8f0e mov       %rcx,0x40(%rsp)
063b8f13 mov       %rcx,0x48(%rsp)
063b8f18 mov       %rdx,0x50(%rsp)
063b8f1d mov       %r8,0x58(%rsp)
063b8f22 call      0x0000`0000`063B`8E80
063b8f27 mov       0x30(%rsp),%r8
063b8f2c mov       0x38(%rsp),%rdx
063b8f31 mov       0x40(%rsp),%rcx
063b8f36 call      0x0000`0000`063B`93E0
063b8f3b mov       %rax,0x28(%rsp)
063b8f40 mov       0x28(%rsp),%rax
063b8f45 add       $0x68,%rsp
063b8f49 ret

core::iter::adapters::rev::Rev<core::slice::iter::IterMut<core::mem::maybe_uninit::MaybeUninit<u8> > >::new<core::slice::iter::IterMut<core::mem::maybe_uninit::MaybeUninit<u8> > >:
063b8f50 sub       $0x20,%rsp
063b8f54 mov       %rcx,0x10(%rsp)
063b8f59 mov       %rdx,0x18(%rsp)
063b8f5e mov       %rcx,(%rsp)
063b8f62 mov       %rdx,8(%rsp)
063b8f67 mov       (%rsp),%rax
063b8f6b mov       8(%rsp),%rdx
063b8f70 add       $0x20,%rsp
063b8f74 ret

core::iter::adapters::rev::impl$1::next<core::slice::iter::IterMut<core::mem::maybe_uninit::MaybeUninit<u8> > >:
063b8f80 sub       $0x38,%rsp
063b8f84 mov       %rcx,0x30(%rsp)
063b8f89 call      0x0000`0000`063C`AC60
063b8f8e mov       %rax,0x28(%rsp)
063b8f93 mov       0x28(%rsp),%rax
063b8f98 add       $0x38,%rsp
063b8f9c ret

core::iter::range::impl$2::spec_next<usize>:
063b8fa0 sub       $0x68,%rsp
063b8fa4 mov       %rcx,%rdx
063b8fa7 mov       %rdx,0x38(%rsp)
063b8fac mov       %rdx,0x58(%rsp)
063b8fb1 mov       %rdx,%rcx
063b8fb4 add       $8,%rdx
063b8fb8 call      0x0000`0000`063C`85D0
063b8fbd mov       %al,0x47(%rsp)
063b8fc1 mov       0x47(%rsp),%al
063b8fc5 test      $1,%al
063b8fc7 jne       0x0000`0000`063B`8FD6
063b8fc9 jmp       0x0000`0000`063B`8FCB
063b8fcb movq      $0,0x48(%rsp)
063b8fd4 jmp       0x0000`0000`063B`9025
063b8fd6 mov       0x38(%rsp),%rcx
063b8fdb call      0x0000`0000`063C`8530
063b8fe0 mov       %rax,0x30(%rsp)
063b8fe5 mov       0x30(%rsp),%rcx
063b8fea mov       $1,%edx
063b8fef call      0x0000`0000`063C`8950
063b8ff4 mov       %rax,0x28(%rsp)
063b8ff9 mov       %rax,0x60(%rsp)
063b8ffe mov       0x28(%rsp),%rdx
063b9003 mov       0x38(%rsp),%rcx
063b9008 call      0x0000`0000`063B`6010
063b900d mov       %rax,0x20(%rsp)
063b9012 mov       0x20(%rsp),%rax
063b9017 mov       %rax,0x50(%rsp)
063b901c movq      $1,0x48(%rsp)
063b9025 mov       0x48(%rsp),%rax
063b902a mov       0x50(%rsp),%rdx
063b902f add       $0x68,%rsp
063b9033 ret

core::iter::range::impl$3::next<usize>:
063b9040 sub       $0x38,%rsp
063b9044 mov       %rcx,0x30(%rsp)
063b9049 call      0x0000`0000`063B`8FA0
063b904e mov       %rax,0x20(%rsp)
063b9053 mov       %rdx,0x28(%rsp)
063b9058 mov       0x28(%rsp),%rdx
063b905d mov       0x20(%rsp),%rax
063b9062 add       $0x38,%rsp
063b9066 ret

core::iter::traits::collect::impl$0::into_iter<core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<core::fmt::ArgumentV1> > >:
063b9070 mov       %rcx,%rax
063b9073 mov       (%rdx),%r8
063b9076 mov       %r8,(%rcx)
063b9079 mov       8(%rdx),%r8
063b907d mov       %r8,8(%rcx)
063b9081 mov       0x10(%rdx),%rdx
063b9085 mov       %rdx,0x10(%rcx)
063b9089 ret

core::iter::traits::collect::impl$0::into_iter<core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<core::fmt::rt::v1::Argument> > >:
063b9090 mov       %rcx,%rax
063b9093 mov       (%rdx),%r8
063b9096 mov       %r8,(%rcx)
063b9099 mov       8(%rdx),%r8
063b909d mov       %r8,8(%rcx)
063b90a1 mov       0x10(%rdx),%rdx
063b90a5 mov       %rdx,0x10(%rcx)
063b90a9 ret

core::iter::traits::collect::impl$0::into_iter<core::slice::iter::Chunks<usize> >:
063b90b0 mov       %rcx,%rax
063b90b3 mov       (%rdx),%r8
063b90b6 mov       %r8,(%rcx)
063b90b9 mov       8(%rdx),%r8
063b90bd mov       %r8,8(%rcx)
063b90c1 mov       0x10(%rdx),%rdx
063b90c5 mov       %rdx,0x10(%rcx)
063b90c9 ret

core::iter::traits::collect::impl$0::into_iter<core::iter::adapters::rev::Rev<core::slice::iter::IterMut<core::mem::maybe_uninit::MaybeUninit<u8> > > >:
063b90d0 sub       $0x10,%rsp
063b90d4 mov       %rcx,%rax
063b90d7 mov       %rax,(%rsp)
063b90db mov       %rdx,8(%rsp)
063b90e0 add       $0x10,%rsp
063b90e4 ret

core::iter::traits::collect::impl$0::into_iter<core::ops::range::Range<usize> >:
063b90f0 sub       $0x10,%rsp
063b90f4 mov       %rcx,%rax
063b90f7 mov       %rax,(%rsp)
063b90fb mov       %rdx,8(%rsp)
063b9100 add       $0x10,%rsp
063b9104 ret

core::iter::traits::collect::impl$0::into_iter<core::char::EscapeDebug>:
063b9110 mov       %rcx,%rax
063b9113 mov       (%rdx),%r8
063b9116 mov       %r8,(%rcx)
063b9119 mov       8(%rdx),%r8
063b911d mov       %r8,8(%rcx)
063b9121 mov       0x10(%rdx),%rdx
063b9125 mov       %rdx,0x10(%rcx)
063b9129 ret

core::iter::traits::iterator::Iterator::advance_by<core::str::iter::CharIndices>:
063b9130 sub       $0xF8,%rsp
063b9137 mov       %rcx,0x40(%rsp)
063b913c mov       %rcx,0xC8(%rsp)
063b9144 mov       %rdx,0xD0(%rsp)
063b914c movq      $0,0x68(%rsp)
063b9155 mov       %rdx,0x70(%rsp)
063b915a mov       0x68(%rsp),%rcx
063b915f mov       0x70(%rsp),%rdx
063b9164 call      0x0000`0000`063B`90F0
063b9169 mov       %rax,0x48(%rsp)
063b916e mov       %rdx,0x50(%rsp)
063b9173 mov       0x50(%rsp),%rax
063b9178 mov       0x48(%rsp),%rcx
063b917d mov       %rcx,0x78(%rsp)
063b9182 mov       %rax,0x80(%rsp)
063b918a lea       0x78(%rsp),%rcx
063b918f call      0x0000`0000`063B`9040
063b9194 mov       %rdx,0x90(%rsp)
063b919c mov       %rax,0x88(%rsp)
063b91a4 mov       0x88(%rsp),%rax
063b91ac test      %rax,%rax
063b91af je        0x0000`0000`063B`91B7
063b91b1 jmp       0x0000`0000`063B`91B3
063b91b3 jmp       0x0000`0000`063B`91C5
063b91b5 ud2
063b91b7 movq      $0,0x58(%rsp)
063b91c0 jmp       0x0000`0000`063B`927A
063b91c5 mov       0x40(%rsp),%rcx
063b91ca mov       0x90(%rsp),%rax
063b91d2 mov       %rax,0x28(%rsp)
063b91d7 mov       %rax,0xD8(%rsp)
063b91df call      0x0000`0000`063C`5B70
063b91e4 mov       %rax,0x30(%rsp)
063b91e9 mov       %edx,0x3C(%rsp)
063b91ed mov       0x28(%rsp),%r9
063b91f2 mov       0x3C(%rsp),%r8d
063b91f7 mov       0x30(%rsp),%rdx
063b91fc lea       0xB0(%rsp),%rcx
063b9204 call      0x0000`0000`063B`9BA0
063b9209 lea       0x98(%rsp),%rcx
063b9211 lea       0xB0(%rsp),%rdx
063b9219 call      0x0000`0000`063B`A830
063b921e mov       0x98(%rsp),%rax
063b9226 test      %rax,%rax
063b9229 je        0x0000`0000`063B`9231
063b922b jmp       0x0000`0000`063B`922D
063b922d jmp       0x0000`0000`063B`9254
063b922f ud2
063b9231 mov       0xA0(%rsp),%rcx
063b9239 mov       0xA8(%rsp),%eax
063b9240 mov       %rcx,0xE8(%rsp)
063b9248 mov       %eax,0xF0(%rsp)
063b924f jmp       0x0000`0000`063B`918A
063b9254 mov       0xA0(%rsp),%rcx
063b925c mov       %rcx,0xE0(%rsp)
063b9264 lea       0x63C`FE48,%rdx
063b926b call      0x0000`0000`063B`A8F0
063b9270 mov       %rdx,0x60(%rsp)
063b9275 mov       %rax,0x58(%rsp)
063b927a mov       0x58(%rsp),%rax
063b927f mov       0x60(%rsp),%rdx
063b9284 add       $0xF8,%rsp
063b928b ret

core::iter::traits::iterator::Iterator::nth<core::str::iter::CharIndices>:
063b9290 sub       $0x78,%rsp
063b9294 mov       %rcx,0x28(%rsp)
063b9299 mov       %rcx,0x58(%rsp)
063b929e mov       %rdx,0x60(%rsp)
063b92a3 call      0x0000`0000`063B`9130
063b92a8 mov       %rax,0x30(%rsp)
063b92ad mov       %rdx,0x38(%rsp)
063b92b2 mov       0x38(%rsp),%rdx
063b92b7 mov       0x30(%rsp),%rcx
063b92bc call      0x0000`0000`063B`A4F0
063b92c1 mov       %al,0x27(%rsp)
063b92c5 mov       0x27(%rsp),%cl
063b92c9 and       $1,%cl
063b92cc call      0x0000`0000`063B`9D70
063b92d1 and       $1,%al
063b92d3 mov       %al,0x57(%rsp)
063b92d7 movzbl    0x57(%rsp),%eax
063b92dc test      $1,%al
063b92de je        0x0000`0000`063B`92E6
063b92e0 jmp       0x0000`0000`063B`92E2
063b92e2 jmp       0x0000`0000`063B`92FB
063b92e4 ud2
063b92e6 mov       0x28(%rsp),%rcx
063b92eb call      0x0000`0000`063C`5B70
063b92f0 mov       %edx,0x48(%rsp)
063b92f4 mov       %rax,0x40(%rsp)
063b92f9 jmp       0x0000`0000`063B`9309
063b92fb call      0x0000`0000`063B`9EE0
063b9300 mov       %edx,0x48(%rsp)
063b9304 mov       %rax,0x40(%rsp)
063b9309 mov       0x40(%rsp),%rax
063b930e mov       0x48(%rsp),%edx
063b9312 add       $0x78,%rsp
063b9316 ret

core::iter::traits::iterator::Iterator::map<core::slice::iter::Iter<u8>,usize,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> >:
063b9320 sub       $0x48,%rsp
063b9324 mov       %rcx,0x30(%rsp)
063b9329 mov       %rdx,0x38(%rsp)
063b932e call      0x0000`0000`063B`8E50
063b9333 mov       %rax,0x20(%rsp)
063b9338 mov       %rdx,0x28(%rsp)
063b933d mov       0x28(%rsp),%rdx
063b9342 mov       0x20(%rsp),%rax
063b9347 add       $0x48,%rsp
063b934b ret

core::iter::traits::iterator::Iterator::filter<core::slice::iter::Iter<u8>,core::str::count::char_count_general_case::closure_env$0>:
063b9350 sub       $0x48,%rsp
063b9354 mov       %rcx,0x30(%rsp)
063b9359 mov       %rdx,0x38(%rsp)
063b935e call      0x0000`0000`063B`8D70
063b9363 mov       %rax,0x20(%rsp)
063b9368 mov       %rdx,0x28(%rsp)
063b936d mov       0x28(%rsp),%rdx
063b9372 mov       0x20(%rsp),%rax
063b9377 add       $0x48,%rsp
063b937b ret

core::iter::traits::iterator::Iterator::enumerate<core::slice::iter::Iter<core::fmt::rt::v1::Argument> >:
063b9380 sub       $0x38,%rsp
063b9384 mov       %rcx,%rax
063b9387 mov       %rax,0x20(%rsp)
063b938c mov       %rdx,0x28(%rsp)
063b9391 mov       %r8,0x30(%rsp)
063b9396 call      0x0000`0000`063B`8B10
063b939b mov       0x20(%rsp),%rax
063b93a0 add       $0x38,%rsp
063b93a4 ret

core::iter::traits::iterator::Iterator::enumerate<core::slice::iter::Iter<core::fmt::ArgumentV1> >:
063b93b0 sub       $0x38,%rsp
063b93b4 mov       %rcx,%rax
063b93b7 mov       %rax,0x20(%rsp)
063b93bc mov       %rdx,0x28(%rsp)
063b93c1 mov       %r8,0x30(%rsp)
063b93c6 call      0x0000`0000`063B`8B40
063b93cb mov       0x20(%rsp),%rax
063b93d0 add       $0x38,%rsp
063b93d4 ret

core::iter::traits::iterator::Iterator::fold<core::slice::iter::Iter<u8>,usize,core::iter::adapters::map::map_fold::closure_env$0<ref$<u8>,usize,usize,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0>,core::iter::traits::accum::impl$48::sum::closure_env$0<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> > > > >:
063b93e0 sub       $0x78,%rsp
063b93e4 mov       %rcx,0x30(%rsp)
063b93e9 mov       %rdx,0x38(%rsp)
063b93ee mov       %r8,0x68(%rsp)
063b93f3 mov       %r8,0x48(%rsp)
063b93f8 lea       0x30(%rsp),%rcx
063b93fd call      0x0000`0000`063C`9D90
063b9402 mov       %rax,0x50(%rsp)
063b9407 mov       $1,%eax
063b940c xor       %ecx,%ecx
063b940e cmpq      $0,0x50(%rsp)
063b9414 cmove     %rcx,%rax
063b9418 cmp       $1,%rax
063b941c jne       0x0000`0000`063B`9452
063b941e mov       0x50(%rsp),%rax
063b9423 mov       %rax,0x70(%rsp)
063b9428 mov       0x48(%rsp),%rcx
063b942d mov       %rcx,0x58(%rsp)
063b9432 mov       %rax,0x60(%rsp)
063b9437 mov       0x58(%rsp),%rdx
063b943c mov       0x60(%rsp),%r8
063b9441 lea       0x40(%rsp),%rcx
063b9446 call      0x0000`0000`063B`8E90
063b944b mov       %rax,0x28(%rsp)
063b9450 jmp       0x0000`0000`063B`9462
063b9452 jmp       0x0000`0000`063B`9454
063b9454 jmp       0x0000`0000`063B`9456
063b9456 jmp       0x0000`0000`063B`9458
063b9458 mov       0x48(%rsp),%rax
063b945d add       $0x78,%rsp
063b9461 ret
063b9462 mov       0x28(%rsp),%rax
063b9467 mov       %rax,0x48(%rsp)
063b946c jmp       0x0000`0000`063B`93F8

core::iter::traits::iterator::Iterator::rev<core::slice::iter::IterMut<core::mem::maybe_uninit::MaybeUninit<u8> > >:
063b9470 sub       $0x48,%rsp
063b9474 mov       %rcx,0x38(%rsp)
063b9479 mov       %rdx,0x40(%rsp)
063b947e call      0x0000`0000`063B`8F50
063b9483 mov       %rax,0x28(%rsp)
063b9488 mov       %rdx,0x30(%rsp)
063b948d mov       0x30(%rsp),%rdx
063b9492 mov       0x28(%rsp),%rax
063b9497 add       $0x48,%rsp
063b949b ret

core::iter::traits::iterator::Iterator::cloned<core::slice::iter::Iter<u8>,u8>:
063b94a0 sub       $0x48,%rsp
063b94a4 mov       %rcx,0x38(%rsp)
063b94a9 mov       %rdx,0x40(%rsp)
063b94ae call      0x0000`0000`063B`8AA0
063b94b3 mov       %rax,0x28(%rsp)
063b94b8 mov       %rdx,0x30(%rsp)
063b94bd mov       0x30(%rsp),%rdx
063b94c2 mov       0x28(%rsp),%rax
063b94c7 add       $0x48,%rsp
063b94cb ret

core::iter::traits::iterator::Iterator::sum<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> >,usize>:
063b94d0 sub       $0x38,%rsp
063b94d4 mov       %rcx,0x28(%rsp)
063b94d9 mov       %rdx,0x30(%rsp)
063b94de call      0x0000`0000`063C`8990
063b94e3 mov       %rax,0x20(%rsp)
063b94e8 mov       0x20(%rsp),%rax
063b94ed add       $0x38,%rsp
063b94f1 ret

enum$<core::option::Option<ref$<u8> >, 1, 18446744073709551615, Some>::is_some<ref$<u8> >:
063b9500 sub       $0x10,%rsp
063b9504 mov       %rcx,%rdx
063b9507 mov       %rdx,8(%rsp)
063b950c mov       $1,%eax
063b9511 xor       %ecx,%ecx
063b9513 cmpq      $0,(%rdx)
063b9517 cmove     %rcx,%rax
063b951b cmp       $1,%rax
063b951f jne       0x0000`0000`063B`9528
063b9521 movb      $1,7(%rsp)
063b9526 jmp       0x0000`0000`063B`952D
063b9528 movb      $0,7(%rsp)
063b952d mov       7(%rsp),%al
063b9531 and       $1,%al
063b9533 movzbl    %al,%eax
063b9536 add       $0x10,%rsp
063b953a ret

enum$<core::option::Option<ref_mut$<core::fmt::builders::PadAdapter> >, 1, 18446744073709551615, Some>::is_some<ref_mut$<core::fmt::builders::PadAdapter> >:
063b9540 sub       $0x10,%rsp
063b9544 mov       %rcx,%rdx
063b9547 mov       %rdx,8(%rsp)
063b954c mov       $1,%eax
063b9551 xor       %ecx,%ecx
063b9553 cmpq      $0,(%rdx)
063b9557 cmove     %rcx,%rax
063b955b cmp       $1,%rax
063b955f jne       0x0000`0000`063B`9568
063b9561 movb      $1,7(%rsp)
063b9566 jmp       0x0000`0000`063B`956D
063b9568 movb      $0,7(%rsp)
063b956d mov       7(%rsp),%al
063b9571 and       $1,%al
063b9573 movzbl    %al,%eax
063b9576 add       $0x10,%rsp
063b957a ret

enum$<core::option::Option<usize> >::is_some<usize>:
063b9580 sub       $0x10,%rsp
063b9584 mov       %rcx,8(%rsp)
063b9589 cmpq      $1,(%rcx)
063b958d jne       0x0000`0000`063B`9596
063b958f movb      $1,7(%rsp)
063b9594 jmp       0x0000`0000`063B`959B
063b9596 movb      $0,7(%rsp)
063b959b mov       7(%rsp),%al
063b959f and       $1,%al
063b95a1 movzbl    %al,%eax
063b95a4 add       $0x10,%rsp
063b95a8 ret

enum$<core::option::Option<usize> >::is_none<usize>:
063b95b0 sub       $0x38,%rsp
063b95b4 mov       %rcx,0x30(%rsp)
063b95b9 call      0x0000`0000`063B`9580
063b95be mov       %al,0x2F(%rsp)
063b95c2 mov       0x2F(%rsp),%al
063b95c6 xor       $0xFF,%al
063b95c8 and       $1,%al
063b95ca movzbl    %al,%eax
063b95cd add       $0x38,%rsp
063b95d1 ret

enum$<core::option::Option<core::fmt::builders::PadAdapter>, 1, 18446744073709551615, Some>::as_mut<core::fmt::builders::PadAdapter>:
063b95e0 sub       $0x20,%rsp
063b95e4 mov       %rcx,(%rsp)
063b95e8 mov       %rcx,0x10(%rsp)
063b95ed mov       (%rcx),%rax
063b95f0 test      %rax,%rax
063b95f3 setne     %al
063b95f6 movzbl    %al,%eax
063b95f9 je        0x0000`0000`063B`9601
063b95fb jmp       0x0000`0000`063B`95FD
063b95fd jmp       0x0000`0000`063B`960C
063b95ff ud2
063b9601 movq      $0,8(%rsp)
063b960a jmp       0x0000`0000`063B`961A
063b960c mov       (%rsp),%rax
063b9610 mov       %rax,0x18(%rsp)
063b9615 mov       %rax,8(%rsp)
063b961a mov       8(%rsp),%rax
063b961f add       $0x20,%rsp
063b9623 ret

enum$<core::option::Option<char>, 0, 1114111, Some>::unwrap<char>:
063b9630 sub       $0x38,%rsp
063b9634 mov       %rdx,0x28(%rsp)
063b9639 mov       %ecx,0x30(%rsp)
063b963d mov       0x30(%rsp),%eax
063b9641 add       $0xFFEF`0000,%eax
063b9646 setne     %al
063b9649 movzbl    %al,%eax
063b964c je        0x0000`0000`063B`9654
063b964e jmp       0x0000`0000`063B`9650
063b9650 jmp       0x0000`0000`063B`966C
063b9652 ud2
063b9654 mov       0x28(%rsp),%r8
063b9659 lea       0x63C`FE60,%rcx
063b9660 mov       $0x2B,%edx
063b9665 call      0x0000`0000`063B`9FF0
063b966a ud2
063b966c mov       0x30(%rsp),%eax
063b9670 mov       %eax,0x34(%rsp)
063b9674 add       $0x38,%rsp
063b9678 ret

enum$<core::option::Option<usize> >::unwrap<usize>:
063b9680 sub       $0x48,%rsp
063b9684 mov       %r8,0x28(%rsp)
063b9689 mov       %rcx,0x30(%rsp)
063b968e mov       %rdx,0x38(%rsp)
063b9693 mov       0x30(%rsp),%rax
063b9698 test      %rax,%rax
063b969b je        0x0000`0000`063B`96A3
063b969d jmp       0x0000`0000`063B`969F
063b969f jmp       0x0000`0000`063B`96BB
063b96a1 ud2
063b96a3 mov       0x28(%rsp),%r8
063b96a8 lea       0x63C`FE60,%rcx
063b96af mov       $0x2B,%edx
063b96b4 call      0x0000`0000`063B`9FF0
063b96b9 ud2
063b96bb mov       0x38(%rsp),%rax
063b96c0 mov       %rax,0x40(%rsp)
063b96c5 add       $0x48,%rsp
063b96c9 ret

enum$<core::option::Option<u8> >::unwrap<u8>:
063b96d0 sub       $0x38,%rsp
063b96d4 mov       %r8,0x28(%rsp)
063b96d9 and       $1,%cl
063b96dc mov       %cl,0x30(%rsp)
063b96e0 mov       %dl,0x31(%rsp)
063b96e4 movzbl    0x30(%rsp),%eax
063b96e9 test      $1,%al
063b96eb je        0x0000`0000`063B`96F3
063b96ed jmp       0x0000`0000`063B`96EF
063b96ef jmp       0x0000`0000`063B`970B
063b96f1 ud2
063b96f3 mov       0x28(%rsp),%r8
063b96f8 lea       0x63C`FE60,%rcx
063b96ff mov       $0x2B,%edx
063b9704 call      0x0000`0000`063B`9FF0
063b9709 ud2
063b970b mov       0x31(%rsp),%al
063b970f mov       %al,0x37(%rsp)
063b9713 add       $0x38,%rsp
063b9717 ret

enum$<core::option::Option<str>, 1, 18446744073709551615, Some>::unwrap_or<str>:
063b9720 sub       $0x58,%rsp
063b9724 mov       %r9,(%rsp)
063b9728 mov       %r8,8(%rsp)
063b972d mov       %rcx,0x10(%rsp)
063b9732 mov       %rdx,0x18(%rsp)
063b9737 mov       %r8,0x38(%rsp)
063b973c mov       %r9,0x40(%rsp)
063b9741 movb      $0,0x37(%rsp)
063b9746 movb      $1,0x37(%rsp)
063b974b mov       0x10(%rsp),%rax
063b9750 test      %rax,%rax
063b9753 setne     %al
063b9756 movzbl    %al,%eax
063b9759 je        0x0000`0000`063B`9761
063b975b jmp       0x0000`0000`063B`975D
063b975d jmp       0x0000`0000`063B`977B
063b975f ud2
063b9761 mov       (%rsp),%rax
063b9765 mov       8(%rsp),%rcx
063b976a movb      $0,0x37(%rsp)
063b976f mov       %rcx,0x20(%rsp)
063b9774 mov       %rax,0x28(%rsp)
063b9779 jmp       0x0000`0000`063B`9799
063b977b mov       0x10(%rsp),%rcx
063b9780 mov       0x18(%rsp),%rax
063b9785 mov       %rcx,0x48(%rsp)
063b978a mov       %rax,0x50(%rsp)
063b978f mov       %rcx,0x20(%rsp)
063b9794 mov       %rax,0x28(%rsp)
063b9799 testb     $1,0x37(%rsp)
063b979e jne       0x0000`0000`063B`97AF
063b97a0 mov       0x20(%rsp),%rax
063b97a5 mov       0x28(%rsp),%rdx
063b97aa add       $0x58,%rsp
063b97ae ret
063b97af jmp       0x0000`0000`063B`97A0

enum$<core::option::Option<u32> >::unwrap_or<u32>:
063b97c0 sub       $0x20,%rsp
063b97c4 mov       %r8d,4(%rsp)
063b97c9 mov       %ecx,8(%rsp)
063b97cd mov       %edx,0xC(%rsp)
063b97d1 mov       %r8d,0x18(%rsp)
063b97d6 movb      $0,0x17(%rsp)
063b97db movb      $1,0x17(%rsp)
063b97e0 mov       8(%rsp),%eax
063b97e4 test      %rax,%rax
063b97e7 je        0x0000`0000`063B`97EF
063b97e9 jmp       0x0000`0000`063B`97EB
063b97eb jmp       0x0000`0000`063B`97FE
063b97ed ud2
063b97ef mov       4(%rsp),%eax
063b97f3 movb      $0,0x17(%rsp)
063b97f8 mov       %eax,0x10(%rsp)
063b97fc jmp       0x0000`0000`063B`980A
063b97fe mov       0xC(%rsp),%eax
063b9802 mov       %eax,0x1C(%rsp)
063b9806 mov       %eax,0x10(%rsp)
063b980a testb     $1,0x17(%rsp)
063b980f jne       0x0000`0000`063B`981A
063b9811 mov       0x10(%rsp),%eax
063b9815 add       $0x20,%rsp
063b9819 ret
063b981a jmp       0x0000`0000`063B`9811

enum$<core::option::Option<ref_mut$<core::fmt::builders::PadAdapter> >, 1, 18446744073709551615, Some>::unwrap_unchecked<ref_mut$<core::fmt::builders::PadAdapter> >:
063b9820 sub       $0x48,%rsp
063b9824 mov       %rdx,0x28(%rsp)
063b9829 mov       %rcx,0x38(%rsp)
063b982e lea       0x38(%rsp),%rcx
063b9833 call      0x0000`0000`063B`9540
063b9838 mov       %al,0x37(%rsp)
063b983c mov       0x37(%rsp),%al
063b9840 xor       $0xFF,%al
063b9842 test      $1,%al
063b9844 jne       0x0000`0000`063B`985A
063b9846 mov       0x38(%rsp),%rax
063b984b test      %rax,%rax
063b984e setne     %al
063b9851 movzbl    %al,%eax
063b9854 je        0x0000`0000`063B`9874
063b9856 jmp       0x0000`0000`063B`9858
063b9858 jmp       0x0000`0000`063B`987B
063b985a mov       0x28(%rsp),%r8
063b985f lea       0x63C`FE8B,%rcx
063b9866 mov       $0x20,%edx
063b986b call      0x0000`0000`063B`9FF0
063b9870 ud2
063b9872 ud2
063b9874 call      0x0000`0000`063B`5870
063b9879 ud2
063b987b mov       0x38(%rsp),%rax
063b9880 mov       %rax,0x40(%rsp)
063b9885 add       $0x48,%rsp
063b9889 ret

enum$<core::option::Option<ref$<u8> >, 1, 18446744073709551615, Some>::unwrap_unchecked<ref$<u8> >:
063b9890 sub       $0x48,%rsp
063b9894 mov       %rdx,0x28(%rsp)
063b9899 mov       %rcx,0x38(%rsp)
063b989e lea       0x38(%rsp),%rcx
063b98a3 call      0x0000`0000`063B`9500
063b98a8 mov       %al,0x37(%rsp)
063b98ac mov       0x37(%rsp),%al
063b98b0 xor       $0xFF,%al
063b98b2 test      $1,%al
063b98b4 jne       0x0000`0000`063B`98CA
063b98b6 mov       0x38(%rsp),%rax
063b98bb test      %rax,%rax
063b98be setne     %al
063b98c1 movzbl    %al,%eax
063b98c4 je        0x0000`0000`063B`98E4
063b98c6 jmp       0x0000`0000`063B`98C8
063b98c8 jmp       0x0000`0000`063B`98EB
063b98ca mov       0x28(%rsp),%r8
063b98cf lea       0x63C`FE8B,%rcx
063b98d6 mov       $0x20,%edx
063b98db call      0x0000`0000`063B`9FF0
063b98e0 ud2
063b98e2 ud2
063b98e4 call      0x0000`0000`063B`5870
063b98e9 ud2
063b98eb mov       0x38(%rsp),%rax
063b98f0 mov       %rax,0x40(%rsp)
063b98f5 add       $0x48,%rsp
063b98f9 ret

enum$<core::option::Option<usize> >::unwrap_unchecked<usize>:
063b9900 sub       $0x48,%rsp
063b9904 mov       %r8,0x20(%rsp)
063b9909 mov       %rcx,0x30(%rsp)
063b990e mov       %rdx,0x38(%rsp)
063b9913 lea       0x30(%rsp),%rcx
063b9918 call      0x0000`0000`063B`9580
063b991d mov       %al,0x2F(%rsp)
063b9921 mov       0x2F(%rsp),%al
063b9925 xor       $0xFF,%al
063b9927 test      $1,%al
063b9929 jne       0x0000`0000`063B`9939
063b992b mov       0x30(%rsp),%rax
063b9930 test      %rax,%rax
063b9933 je        0x0000`0000`063B`9953
063b9935 jmp       0x0000`0000`063B`9937
063b9937 jmp       0x0000`0000`063B`995A
063b9939 mov       0x20(%rsp),%r8
063b993e lea       0x63C`FE8B,%rcx
063b9945 mov       $0x20,%edx
063b994a call      0x0000`0000`063B`9FF0
063b994f ud2
063b9951 ud2
063b9953 call      0x0000`0000`063B`5870
063b9958 ud2
063b995a mov       0x38(%rsp),%rax
063b995f mov       %rax,0x40(%rsp)
063b9964 add       $0x48,%rsp
063b9968 ret

enum$<core::option::Option<tuple$<usize,usize> > >::map<tuple$<usize,usize>,usize,core::str::impl$0::find::closure_env$0<char> >:
063b9970 sub       $0x78,%rsp
063b9974 mov       %rcx,0x30(%rsp)
063b9979 movb      $0,0x5F(%rsp)
063b997e movb      $1,0x5F(%rsp)
063b9983 mov       (%rcx),%rax
063b9986 test      %rax,%rax
063b9989 je        0x0000`0000`063B`9991
063b998b jmp       0x0000`0000`063B`998D
063b998d jmp       0x0000`0000`063B`999C
063b998f ud2
063b9991 movq      $0,0x38(%rsp)
063b999a jmp       0x0000`0000`063B`99E9
063b999c mov       0x30(%rsp),%rax
063b99a1 mov       8(%rax),%rcx
063b99a5 mov       0x10(%rax),%rax
063b99a9 mov       %rcx,0x68(%rsp)
063b99ae mov       %rax,0x70(%rsp)
063b99b3 movb      $0,0x5F(%rsp)
063b99b8 mov       %rcx,0x48(%rsp)
063b99bd mov       %rax,0x50(%rsp)
063b99c2 mov       0x48(%rsp),%rcx
063b99c7 mov       0x50(%rsp),%rdx
063b99cc call      0x0000`0000`063C`7B70
063b99d1 mov       %rax,0x28(%rsp)
063b99d6 mov       0x28(%rsp),%rax
063b99db mov       %rax,0x40(%rsp)
063b99e0 movq      $1,0x38(%rsp)
063b99e9 testb     $1,0x5F(%rsp)
063b99ee jne       0x0000`0000`063B`99FF
063b99f0 mov       0x38(%rsp),%rax
063b99f5 mov       0x40(%rsp),%rdx
063b99fa add       $0x78,%rsp
063b99fe ret
063b99ff jmp       0x0000`0000`063B`99F0

enum$<core::option::Option<usize> >::map<usize,usize,core::slice::memchr::memchr_general_case::closure_env$2>:
063b9a10 sub       $0x78,%rsp
063b9a14 mov       %r8,0x30(%rsp)
063b9a19 mov       %rcx,0x38(%rsp)
063b9a1e mov       %rdx,0x40(%rsp)
063b9a23 mov       %r8,0x68(%rsp)
063b9a28 movb      $0,0x67(%rsp)
063b9a2d movb      $1,0x67(%rsp)
063b9a32 mov       0x38(%rsp),%rax
063b9a37 test      %rax,%rax
063b9a3a je        0x0000`0000`063B`9A42
063b9a3c jmp       0x0000`0000`063B`9A3E
063b9a3e jmp       0x0000`0000`063B`9A4D
063b9a40 ud2
063b9a42 movq      $0,0x48(%rsp)
063b9a4b jmp       0x0000`0000`063B`9A88
063b9a4d mov       0x30(%rsp),%rcx
063b9a52 mov       0x40(%rsp),%rax
063b9a57 mov       %rax,0x70(%rsp)
063b9a5c movb      $0,0x67(%rsp)
063b9a61 mov       %rax,0x58(%rsp)
063b9a66 mov       0x58(%rsp),%rdx
063b9a6b call      0x0000`0000`063C`17D0
063b9a70 mov       %rax,0x28(%rsp)
063b9a75 mov       0x28(%rsp),%rax
063b9a7a mov       %rax,0x50(%rsp)
063b9a7f movq      $1,0x48(%rsp)
063b9a88 testb     $1,0x67(%rsp)
063b9a8d jne       0x0000`0000`063B`9A9E
063b9a8f mov       0x48(%rsp),%rax
063b9a94 mov       0x50(%rsp),%rdx
063b9a99 add       $0x78,%rsp
063b9a9d ret
063b9a9e jmp       0x0000`0000`063B`9A8F

enum$<core::option::Option<u32> >::map<u32,char,core::str::iter::impl$0::next::closure_env$0>:
063b9aa0 sub       $0x48,%rsp
063b9aa4 mov       %ecx,0x28(%rsp)
063b9aa8 mov       %edx,0x2C(%rsp)
063b9aac movb      $0,0x3F(%rsp)
063b9ab1 movb      $1,0x3F(%rsp)
063b9ab6 mov       0x28(%rsp),%eax
063b9aba test      %rax,%rax
063b9abd je        0x0000`0000`063B`9AC5
063b9abf jmp       0x0000`0000`063B`9AC1
063b9ac1 jmp       0x0000`0000`063B`9ACF
063b9ac3 ud2
063b9ac5 movl      $0x11`0000,0x34(%rsp)
063b9acd jmp       0x0000`0000`063B`9AF5
063b9acf mov       0x2C(%rsp),%eax
063b9ad3 mov       %eax,0x44(%rsp)
063b9ad7 movb      $0,0x3F(%rsp)
063b9adc mov       %eax,0x38(%rsp)
063b9ae0 mov       0x38(%rsp),%ecx
063b9ae4 call      0x0000`0000`063C`5AD0
063b9ae9 mov       %eax,0x24(%rsp)
063b9aed mov       0x24(%rsp),%eax
063b9af1 mov       %eax,0x34(%rsp)
063b9af5 testb     $1,0x3F(%rsp)
063b9afa jne       0x0000`0000`063B`9B05
063b9afc mov       0x34(%rsp),%eax
063b9b00 add       $0x48,%rsp
063b9b04 ret
063b9b05 jmp       0x0000`0000`063B`9AFC

enum$<core::option::Option<usize> >::map<usize,u32,core::unicode::unicode_data::skip_search::closure_env$1<32,707> >:
063b9b10 sub       $0x68,%rsp
063b9b14 mov       %r8,0x28(%rsp)
063b9b19 mov       %rcx,0x30(%rsp)
063b9b1e mov       %rdx,0x38(%rsp)
063b9b23 mov       %r8,0x58(%rsp)
063b9b28 movb      $0,0x57(%rsp)
063b9b2d movb      $1,0x57(%rsp)
063b9b32 mov       0x30(%rsp),%rax
063b9b37 test      %rax,%rax
063b9b3a je        0x0000`0000`063B`9B42
063b9b3c jmp       0x0000`0000`063B`9B3E
063b9b3e jmp       0x0000`0000`063B`9B4C
063b9b40 ud2
063b9b42 movl      $0,0x40(%rsp)
063b9b4a jmp       0x0000`0000`063B`9B83
063b9b4c mov       0x28(%rsp),%rcx
063b9b51 mov       0x38(%rsp),%rax
063b9b56 mov       %rax,0x60(%rsp)
063b9b5b movb      $0,0x57(%rsp)
063b9b60 mov       %rax,0x48(%rsp)
063b9b65 mov       0x48(%rsp),%rdx
063b9b6a call      0x0000`0000`063C`82F0
063b9b6f mov       %eax,0x24(%rsp)
063b9b73 mov       0x24(%rsp),%eax
063b9b77 mov       %eax,0x44(%rsp)
063b9b7b movl      $1,0x40(%rsp)
063b9b83 testb     $1,0x57(%rsp)
063b9b88 jne       0x0000`0000`063B`9B97
063b9b8a mov       0x40(%rsp),%eax
063b9b8e mov       0x44(%rsp),%edx
063b9b92 add       $0x68,%rsp
063b9b96 ret
063b9b97 jmp       0x0000`0000`063B`9B8A

enum$<core::option::Option<tuple$<usize,char> >, 0, 1114111, Some>::ok_or<tuple$<usize,char>,usize>:
063b9ba0 sub       $0x48,%rsp
063b9ba4 mov       %r9,(%rsp)
063b9ba8 mov       %rcx,8(%rsp)
063b9bad mov       %rcx,0x10(%rsp)
063b9bb2 mov       %rdx,0x18(%rsp)
063b9bb7 mov       %r8d,0x20(%rsp)
063b9bbc mov       %r9,0x30(%rsp)
063b9bc1 movb      $0,0x2F(%rsp)
063b9bc6 movb      $1,0x2F(%rsp)
063b9bcb mov       0x20(%rsp),%eax
063b9bcf add       $0xFFEF`0000,%eax
063b9bd4 setne     %al
063b9bd7 movzbl    %al,%eax
063b9bda je        0x0000`0000`063B`9BE2
063b9bdc jmp       0x0000`0000`063B`9BDE
063b9bde jmp       0x0000`0000`063B`9BFD
063b9be0 ud2
063b9be2 mov       8(%rsp),%rax
063b9be7 mov       (%rsp),%rcx
063b9beb movb      $0,0x2F(%rsp)
063b9bf0 mov       %rcx,8(%rax)
063b9bf4 movq      $1,(%rax)
063b9bfb jmp       0x0000`0000`063B`9C22
063b9bfd mov       8(%rsp),%rax
063b9c02 mov       0x18(%rsp),%rdx
063b9c07 mov       0x20(%rsp),%ecx
063b9c0b mov       %rdx,0x38(%rsp)
063b9c10 mov       %ecx,0x40(%rsp)
063b9c14 mov       %rdx,8(%rax)
063b9c18 mov       %ecx,0x10(%rax)
063b9c1b movq      $0,(%rax)
063b9c22 testb     $1,0x2F(%rsp)
063b9c27 jne       0x0000`0000`063B`9C33
063b9c29 mov       0x10(%rsp),%rax
063b9c2e add       $0x48,%rsp
063b9c32 ret
063b9c33 jmp       0x0000`0000`063B`9C29

enum$<core::option::Option<core::fmt::builders::PadAdapter>, 1, 18446744073709551615, Some>::insert<core::fmt::builders::PadAdapter>:
063b9c40 sub       $0x78,%rsp
063b9c44 mov       %rcx,0x38(%rsp)
063b9c49 mov       %rcx,0x70(%rsp)
063b9c4e mov       (%rdx),%rax
063b9c51 mov       %rax,0x58(%rsp)
063b9c56 mov       8(%rdx),%rax
063b9c5a mov       %rax,0x60(%rsp)
063b9c5f mov       0x10(%rdx),%rax
063b9c63 mov       %rax,0x68(%rsp)
063b9c68 mov       0x58(%rsp),%rax
063b9c6d mov       %rax,0x40(%rsp)
063b9c72 mov       0x60(%rsp),%rax
063b9c77 mov       %rax,0x48(%rsp)
063b9c7c mov       0x68(%rsp),%rax
063b9c81 mov       %rax,0x50(%rsp)
063b9c86 mov       0x38(%rsp),%rcx
063b9c8b mov       0x40(%rsp),%rax
063b9c90 mov       %rax,(%rcx)
063b9c93 mov       0x48(%rsp),%rax
063b9c98 mov       %rax,8(%rcx)
063b9c9c mov       0x50(%rsp),%rax
063b9ca1 mov       %rax,0x10(%rcx)
063b9ca5 call      0x0000`0000`063B`95E0
063b9caa mov       %rax,0x30(%rsp)
063b9caf mov       0x30(%rsp),%rcx
063b9cb4 lea       0x63C`FF20,%rdx
063b9cbb call      0x0000`0000`063B`9820
063b9cc0 mov       %rax,0x28(%rsp)
063b9cc5 mov       0x28(%rsp),%rax
063b9cca add       $0x78,%rsp
063b9cce ret

enum$<core::option::Option<ref$<u8> >, 1, 18446744073709551615, Some>::cloned<u8>:
063b9cd0 sub       $0x48,%rsp
063b9cd4 mov       %rcx,0x30(%rsp)
063b9cd9 mov       0x30(%rsp),%rax
063b9cde test      %rax,%rax
063b9ce1 setne     %al
063b9ce4 movzbl    %al,%eax
063b9ce7 je        0x0000`0000`063B`9CEF
063b9ce9 jmp       0x0000`0000`063B`9CEB
063b9ceb jmp       0x0000`0000`063B`9CF6
063b9ced ud2
063b9cef movb      $0,0x38(%rsp)
063b9cf4 jmp       0x0000`0000`063B`9D16
063b9cf6 mov       0x30(%rsp),%rcx
063b9cfb mov       %rcx,0x40(%rsp)
063b9d00 call      0x0000`0000`063C`8540
063b9d05 mov       %al,0x2F(%rsp)
063b9d09 mov       0x2F(%rsp),%al
063b9d0d mov       %al,0x39(%rsp)
063b9d11 movb      $1,0x38(%rsp)
063b9d16 mov       0x38(%rsp),%al
063b9d1a mov       0x39(%rsp),%dl
063b9d1e add       $0x48,%rsp
063b9d22 ret

core::option::impl$35::branch<ref$<core::fmt::ArgumentV1> >:
063b9d30 sub       $0x18,%rsp
063b9d34 mov       %rcx,(%rsp)
063b9d38 mov       (%rsp),%rax
063b9d3c test      %rax,%rax
063b9d3f setne     %al
063b9d42 movzbl    %al,%eax
063b9d45 je        0x0000`0000`063B`9D4D
063b9d47 jmp       0x0000`0000`063B`9D49
063b9d49 jmp       0x0000`0000`063B`9D58
063b9d4b ud2
063b9d4d movq      $0,8(%rsp)
063b9d56 jmp       0x0000`0000`063B`9D66
063b9d58 mov       (%rsp),%rax
063b9d5c mov       %rax,0x10(%rsp)
063b9d61 mov       %rax,8(%rsp)
063b9d66 mov       8(%rsp),%rax
063b9d6b add       $0x18,%rsp
063b9d6f ret

core::option::impl$35::branch<tuple$<> >:
063b9d70 sub       $0x10,%rsp
063b9d74 and       $1,%cl
063b9d77 mov       %cl,6(%rsp)
063b9d7b movzbl    6(%rsp),%eax
063b9d80 test      $1,%al
063b9d82 je        0x0000`0000`063B`9D8A
063b9d84 jmp       0x0000`0000`063B`9D86
063b9d86 jmp       0x0000`0000`063B`9D91
063b9d88 ud2
063b9d8a movb      $1,7(%rsp)
063b9d8f jmp       0x0000`0000`063B`9D96
063b9d91 movb      $0,7(%rsp)
063b9d96 mov       7(%rsp),%al
063b9d9a and       $1,%al
063b9d9c movzbl    %al,%eax
063b9d9f add       $0x10,%rsp
063b9da3 ret

core::option::impl$35::branch<slice$<u8> >:
063b9db0 sub       $0x30,%rsp
063b9db4 mov       %rcx,(%rsp)
063b9db8 mov       %rdx,8(%rsp)
063b9dbd mov       (%rsp),%rax
063b9dc1 test      %rax,%rax
063b9dc4 setne     %al
063b9dc7 movzbl    %al,%eax
063b9dca je        0x0000`0000`063B`9DD2
063b9dcc jmp       0x0000`0000`063B`9DCE
063b9dce jmp       0x0000`0000`063B`9DDD
063b9dd0 ud2
063b9dd2 movq      $0,0x10(%rsp)
063b9ddb jmp       0x0000`0000`063B`9DFA
063b9ddd mov       (%rsp),%rcx
063b9de1 mov       8(%rsp),%rax
063b9de6 mov       %rcx,0x20(%rsp)
063b9deb mov       %rax,0x28(%rsp)
063b9df0 mov       %rcx,0x10(%rsp)
063b9df5 mov       %rax,0x18(%rsp)
063b9dfa mov       0x10(%rsp),%rax
063b9dff mov       0x18(%rsp),%rdx
063b9e04 add       $0x30,%rsp
063b9e08 ret

core::option::impl$35::branch<ref$<u8> >:
063b9e10 sub       $0x18,%rsp
063b9e14 mov       %rcx,(%rsp)
063b9e18 mov       (%rsp),%rax
063b9e1c test      %rax,%rax
063b9e1f setne     %al
063b9e22 movzbl    %al,%eax
063b9e25 je        0x0000`0000`063B`9E2D
063b9e27 jmp       0x0000`0000`063B`9E29
063b9e29 jmp       0x0000`0000`063B`9E38
063b9e2b ud2
063b9e2d movq      $0,8(%rsp)
063b9e36 jmp       0x0000`0000`063B`9E46
063b9e38 mov       (%rsp),%rax
063b9e3c mov       %rax,0x10(%rsp)
063b9e41 mov       %rax,8(%rsp)
063b9e46 mov       8(%rsp),%rax
063b9e4b add       $0x18,%rsp
063b9e4f ret

core::option::impl$35::branch<ref$<core::fmt::rt::v1::Argument> >:
063b9e50 sub       $0x18,%rsp
063b9e54 mov       %rcx,(%rsp)
063b9e58 mov       (%rsp),%rax
063b9e5c test      %rax,%rax
063b9e5f setne     %al
063b9e62 movzbl    %al,%eax
063b9e65 je        0x0000`0000`063B`9E6D
063b9e67 jmp       0x0000`0000`063B`9E69
063b9e69 jmp       0x0000`0000`063B`9E78
063b9e6b ud2
063b9e6d movq      $0,8(%rsp)
063b9e76 jmp       0x0000`0000`063B`9E86
063b9e78 mov       (%rsp),%rax
063b9e7c mov       %rax,0x10(%rsp)
063b9e81 mov       %rax,8(%rsp)
063b9e86 mov       8(%rsp),%rax
063b9e8b add       $0x18,%rsp
063b9e8f ret

core::option::impl$36::from_residual<tuple$<usize,usize> >:
063b9e90 push      %rax
063b9e91 mov       %rcx,%rax
063b9e94 movq      $0,(%rcx)
063b9e9b pop       %rcx
063b9e9c ret

core::option::impl$36::from_residual<tuple$<usize,ref$<core::fmt::rt::v1::Argument> > >:
063b9ea0 sub       $0x18,%rsp
063b9ea4 movq      $0,8(%rsp)
063b9ead mov       (%rsp),%rax
063b9eb1 mov       8(%rsp),%rdx
063b9eb6 add       $0x18,%rsp
063b9eba ret

core::option::impl$36::from_residual<tuple$<usize,ref$<core::fmt::ArgumentV1> > >:
063b9ec0 sub       $0x18,%rsp
063b9ec4 movq      $0,8(%rsp)
063b9ecd mov       (%rsp),%rax
063b9ed1 mov       8(%rsp),%rdx
063b9ed6 add       $0x18,%rsp
063b9eda ret

core::option::impl$36::from_residual<tuple$<usize,char> >:
063b9ee0 sub       $0x18,%rsp
063b9ee4 movl      $0x11`0000,8(%rsp)
063b9eec mov       (%rsp),%rax
063b9ef0 mov       8(%rsp),%edx
063b9ef4 add       $0x18,%rsp
063b9ef8 ret

core::option::impl$36::from_residual<u32>:
063b9f00 sub       $0x10,%rsp
063b9f04 movl      $0,(%rsp)
063b9f0b mov       (%rsp),%eax
063b9f0e mov       4(%rsp),%edx
063b9f12 add       $0x10,%rsp
063b9f16 ret

core::panic::location::Location::caller:
063b9f20 sub       $0x10,%rsp
063b9f24 mov       %rcx,8(%rsp)
063b9f29 mov       8(%rsp),%rax
063b9f2e mov       %rax,(%rsp)
063b9f32 mov       (%rsp),%rax
063b9f36 add       $0x10,%rsp
063b9f3a ret

core::panic::location::Location::file:
063b9f40 push      %rax
063b9f41 mov       %rcx,(%rsp)
063b9f45 mov       (%rcx),%rax
063b9f48 mov       8(%rcx),%rdx
063b9f4c pop       %rcx
063b9f4d ret

core::panic::location::Location::line:
063b9f50 push      %rax
063b9f51 mov       %rcx,(%rsp)
063b9f55 mov       0x10(%rcx),%eax
063b9f58 pop       %rcx
063b9f59 ret

core::panic::location::Location::column:
063b9f60 push      %rax
063b9f61 mov       %rcx,(%rsp)
063b9f65 mov       0x14(%rcx),%eax
063b9f68 pop       %rcx
063b9f69 ret

core::panic::panic_info::PanicInfo::internal_constructor:
063b9f70 sub       $0x18,%rsp
063b9f74 mov       %rcx,%rax
063b9f77 mov       %rdx,(%rsp)
063b9f7b mov       %r8,8(%rsp)
063b9f80 mov       %r9b,%r10b
063b9f83 and       $1,%r10b
063b9f87 mov       %r10b,0x17(%rsp)
063b9f8c lea       0x63C`F530,%r10
063b9f93 mov       %r10,(%rcx)
063b9f96 lea       0x63C`FF38,%r10
063b9f9d mov       %r10,8(%rcx)
063b9fa1 mov       %rdx,0x10(%rcx)
063b9fa5 mov       %r8,0x18(%rcx)
063b9fa9 and       $1,%r9b
063b9fad mov       %r9b,0x20(%rcx)
063b9fb1 add       $0x18,%rsp
063b9fb5 ret

core::panic::panic_info::PanicInfo::message:
063b9fc0 push      %rax
063b9fc1 mov       %rcx,(%rsp)
063b9fc5 mov       0x10(%rcx),%rax
063b9fc9 pop       %rcx
063b9fca ret

core::panic::panic_info::PanicInfo::location:
063b9fd0 sub       $0x10,%rsp
063b9fd4 mov       %rcx,8(%rsp)
063b9fd9 mov       0x18(%rcx),%rax
063b9fdd mov       %rax,(%rsp)
063b9fe1 mov       (%rsp),%rax
063b9fe5 add       $0x10,%rsp
063b9fe9 ret

core::panicking::panic:
063b9ff0 sub       $0x88,%rsp
063b9ff7 mov       %r8,0x30(%rsp)
063b9ffc mov       %rcx,0x78(%rsp)
063ba001 mov       %rdx,0x80(%rsp)
063ba009 mov       %rcx,0x68(%rsp)
063ba00e mov       %rdx,0x70(%rsp)
063ba013 lea       0x68(%rsp),%rdx
063ba018 lea       0x38(%rsp),%rcx
063ba01d mov       $1,%r8d
063ba023 lea       0x63C`F530,%r9
063ba02a xor       %eax,%eax
063ba02c movq      $0,0x20(%rsp)
063ba035 call      0x0000`0000`063B`EFF0
063ba03a mov       0x30(%rsp),%rdx
063ba03f lea       0x38(%rsp),%rcx
063ba044 call      0x0000`0000`063B`A100
063ba049 ud2

core::panicking::panic_bounds_check:
063ba050 sub       $0xB8,%rsp
063ba057 mov       %r8,0x40(%rsp)
063ba05c mov       %rcx,0x58(%rsp)
063ba061 mov       %rdx,0x60(%rsp)
063ba066 lea       0x60(%rsp),%rcx
063ba06b call      0x0000`0000`063C`9990
063ba070 mov       %rax,0x48(%rsp)
063ba075 mov       %rdx,0x50(%rsp)
063ba07a lea       0x58(%rsp),%rcx
063ba07f call      0x0000`0000`063C`9990
063ba084 mov       %rax,0x30(%rsp)
063ba089 mov       %rdx,0x38(%rsp)
063ba08e mov       0x38(%rsp),%rax
063ba093 mov       0x30(%rsp),%rcx
063ba098 mov       0x50(%rsp),%rdx
063ba09d mov       0x48(%rsp),%r8
063ba0a2 mov       %r8,0x98(%rsp)
063ba0aa mov       %rdx,0xA0(%rsp)
063ba0b2 mov       %rcx,0xA8(%rsp)
063ba0ba mov       %rax,0xB0(%rsp)
063ba0c2 lea       0x98(%rsp),%r9
063ba0ca lea       0x68(%rsp),%rcx
063ba0cf lea       0x63C`FF90,%rdx
063ba0d6 mov       $2,%r8d
063ba0dc movq      $2,0x20(%rsp)
063ba0e5 call      0x0000`0000`063B`EFF0
063ba0ea mov       0x40(%rsp),%rdx
063ba0ef lea       0x68(%rsp),%rcx
063ba0f4 call      0x0000`0000`063B`A100
063ba0f9 ud2

core::panicking::panic_fmt:
063ba100 sub       $0x68,%rsp
063ba104 mov       %rdx,0x28(%rsp)
063ba109 mov       %rcx,%rax
063ba10c mov       0x28(%rsp),%rcx
063ba111 mov       %rax,0x60(%rsp)
063ba116 call      0x0000`0000`063B`9F20
063ba11b mov       %rax,0x30(%rsp)
063ba120 mov       0x30(%rsp),%r8
063ba125 mov       0x60(%rsp),%rdx
063ba12a lea       0x38(%rsp),%rcx
063ba12f mov       $1,%r9d
063ba135 call      0x0000`0000`063B`9F70
063ba13a lea       0x38(%rsp),%rcx
063ba13f call      0x0000`0000`063A`D7B0
063ba144 ud2

core::panicking::assert_failed<usize,usize>:
063ba150 sub       $0x88,%rsp
063ba157 mov       %rdx,%rax
063ba15a mov       0xB0(%rsp),%rdx
063ba162 mov       %rax,0x40(%rsp)
063ba167 mov       %r8,0x48(%rsp)
063ba16c mov       %cl,0x87(%rsp)
063ba173 mov       0x28(%r9),%rax
063ba177 mov       %rax,0x78(%rsp)
063ba17c mov       0x20(%r9),%rax
063ba180 mov       %rax,0x70(%rsp)
063ba185 mov       0x18(%r9),%rax
063ba189 mov       %rax,0x68(%rsp)
063ba18e mov       0x10(%r9),%rax
063ba192 mov       %rax,0x60(%rsp)
063ba197 mov       (%r9),%rax
063ba19a mov       8(%r9),%r8
063ba19e mov       %r8,0x58(%rsp)
063ba1a3 mov       %rax,0x50(%rsp)
063ba1a8 mov       %rsp,%rax
063ba1ab mov       %rdx,0x30(%rax)
063ba1af lea       0x50(%rsp),%rdx
063ba1b4 mov       %rdx,0x28(%rax)
063ba1b8 lea       0x63C`FFB0,%r8
063ba1bf mov       %r8,0x20(%rax)
063ba1c3 lea       0x40(%rsp),%rdx
063ba1c8 lea       0x48(%rsp),%r9
063ba1cd call      0x0000`0000`063B`A1E0
063ba1d2 ud2

core::panicking::assert_failed_inner:
063ba1e0 push      %rsi
063ba1e1 sub       $0x1F0,%rsp
063ba1e8 mov       0x230(%rsp),%rax
063ba1f0 mov       %rax,0xA0(%rsp)
063ba1f8 mov       0x228(%rsp),%rax
063ba200 mov       %rax,0xA8(%rsp)
063ba208 mov       0x220(%rsp),%rax
063ba210 mov       %cl,0xBF(%rsp)
063ba217 mov       %rdx,0xC0(%rsp)
063ba21f mov       %r8,0xC8(%rsp)
063ba227 mov       %r9,0xD0(%rsp)
063ba22f mov       %rax,0xD8(%rsp)
063ba237 movzbl    0xBF(%rsp),%eax
063ba23f mov       %rax,0xB0(%rsp)
063ba247 test      %rax,%rax
063ba24a je        0x0000`0000`063B`A262
063ba24c jmp       0x0000`0000`063B`A24E
063ba24e mov       0xB0(%rsp),%rax
063ba256 sub       $1,%rax
063ba25a je        0x0000`0000`063B`A27F
063ba25c jmp       0x0000`0000`063B`A25E
063ba25e jmp       0x0000`0000`063B`A29C
063ba260 ud2
063ba262 lea       0x63C`FFD9,%rax
063ba269 mov       %rax,0xE0(%rsp)
063ba271 movq      $2,0xE8(%rsp)
063ba27d jmp       0x0000`0000`063B`A2B7
063ba27f lea       0x63C`FFD7,%rax
063ba286 mov       %rax,0xE0(%rsp)
063ba28e movq      $2,0xE8(%rsp)
063ba29a jmp       0x0000`0000`063B`A2B7
063ba29c lea       0x63C`FFD0,%rax
063ba2a3 mov       %rax,0xE0(%rsp)
063ba2ab movq      $7,0xE8(%rsp)
063ba2b7 mov       0xA8(%rsp),%rax
063ba2bf mov       (%rax),%rax
063ba2c2 test      %rax,%rax
063ba2c5 setne     %al
063ba2c8 movzbl    %al,%eax
063ba2cb je        0x0000`0000`063B`A2D3
063ba2cd jmp       0x0000`0000`063B`A2CF
063ba2cf jmp       0x0000`0000`063B`A2F5
063ba2d1 ud2
063ba2d3 lea       0xE0(%rsp),%rcx
063ba2db call      0x0000`0000`063C`9A80
063ba2e0 mov       %rax,0x90(%rsp)
063ba2e8 mov       %rdx,0x98(%rsp)
063ba2f0 jmp       0x0000`0000`063B`A422
063ba2f5 mov       0xA8(%rsp),%rdx
063ba2fd lea       0xF0(%rsp),%rcx
063ba305 mov       $0x30,%r8d
063ba30b call      0x0000`0000`063C`BD50
063ba310 lea       0xE0(%rsp),%rcx
063ba318 call      0x0000`0000`063C`9A80
063ba31d mov       %rax,0x80(%rsp)
063ba325 mov       %rdx,0x88(%rsp)
063ba32d lea       0xC0(%rsp),%rcx
063ba335 call      0x0000`0000`063C`9B10
063ba33a mov       %rax,0x70(%rsp)
063ba33f mov       %rdx,0x78(%rsp)
063ba344 lea       0xD0(%rsp),%rcx
063ba34c call      0x0000`0000`063C`9B10
063ba351 mov       %rax,0x60(%rsp)
063ba356 mov       %rdx,0x68(%rsp)
063ba35b lea       0xF0(%rsp),%rcx
063ba363 call      0x0000`0000`063C`9A50
063ba368 mov       %rax,0x50(%rsp)
063ba36d mov       %rdx,0x58(%rsp)
063ba372 mov       0x58(%rsp),%rax
063ba377 mov       0x50(%rsp),%rcx
063ba37c mov       0x68(%rsp),%rdx
063ba381 mov       0x60(%rsp),%r8
063ba386 mov       0x78(%rsp),%r9
063ba38b mov       0x70(%rsp),%r10
063ba390 mov       0x88(%rsp),%r11
063ba398 mov       0x80(%rsp),%rsi
063ba3a0 mov       %rsi,0x150(%rsp)
063ba3a8 mov       %r11,0x158(%rsp)
063ba3b0 mov       %r10,0x160(%rsp)
063ba3b8 mov       %r9,0x168(%rsp)
063ba3c0 mov       %r8,0x170(%rsp)
063ba3c8 mov       %rdx,0x178(%rsp)
063ba3d0 mov       %rcx,0x180(%rsp)
063ba3d8 mov       %rax,0x188(%rsp)
063ba3e0 lea       0x150(%rsp),%r9
063ba3e8 lea       0x120(%rsp),%rcx
063ba3f0 lea       0x63D`0018,%rdx
063ba3f7 mov       $4,%r8d
063ba3fd movq      $4,0x20(%rsp)
063ba406 call      0x0000`0000`063B`EFF0
063ba40b mov       0xA0(%rsp),%rdx
063ba413 lea       0x120(%rsp),%rcx
063ba41b call      0x0000`0000`063B`A100
063ba420 ud2
063ba422 lea       0xC0(%rsp),%rcx
063ba42a call      0x0000`0000`063C`9B10
063ba42f mov       %rax,0x40(%rsp)
063ba434 mov       %rdx,0x48(%rsp)
063ba439 lea       0xD0(%rsp),%rcx
063ba441 call      0x0000`0000`063C`9B10
063ba446 mov       %rax,0x30(%rsp)
063ba44b mov       %rdx,0x38(%rsp)
063ba450 mov       0x38(%rsp),%rax
063ba455 mov       0x30(%rsp),%rcx
063ba45a mov       0x48(%rsp),%rdx
063ba45f mov       0x40(%rsp),%r8
063ba464 mov       0x98(%rsp),%r9
063ba46c mov       0x90(%rsp),%r10
063ba474 mov       %r10,0x1C0(%rsp)
063ba47c mov       %r9,0x1C8(%rsp)
063ba484 mov       %r8,0x1D0(%rsp)
063ba48c mov       %rdx,0x1D8(%rsp)
063ba494 mov       %rcx,0x1E0(%rsp)
063ba49c mov       %rax,0x1E8(%rsp)
063ba4a4 lea       0x1C0(%rsp),%r9
063ba4ac lea       0x190(%rsp),%rcx
063ba4b4 lea       0x63D`0060,%rdx
063ba4bb mov       $4,%r8d
063ba4c1 movq      $3,0x20(%rsp)
063ba4ca call      0x0000`0000`063B`EFF0
063ba4cf mov       0xA0(%rsp),%rdx
063ba4d7 lea       0x190(%rsp),%rcx
063ba4df call      0x0000`0000`063B`A100
063ba4e4 ud2

enum$<core::result::Result<tuple$<>,usize> >::ok<tuple$<>,usize>:
063ba4f0 sub       $0x28,%rsp
063ba4f4 mov       %rcx,(%rsp)
063ba4f8 mov       %rdx,8(%rsp)
063ba4fd mov       (%rsp),%rax
063ba501 test      %rax,%rax
063ba504 je        0x0000`0000`063B`A50C
063ba506 jmp       0x0000`0000`063B`A508
063ba508 jmp       0x0000`0000`063B`A513
063ba50a ud2
063ba50c movb      $1,0x17(%rsp)
063ba511 jmp       0x0000`0000`063B`A522
063ba513 mov       8(%rsp),%rax
063ba518 mov       %rax,0x20(%rsp)
063ba51d movb      $0,0x17(%rsp)
063ba522 mov       0x17(%rsp),%al
063ba526 and       $1,%al
063ba528 movzbl    %al,%eax
063ba52b add       $0x28,%rsp
063ba52f ret

core::result::Result::and_then<tuple$<>,core::fmt::Error,tuple$<>,core::fmt::builders::impl$3::finish::closure_env$0>:
063ba530 sub       $0x58,%rsp
063ba534 mov       %rdx,0x28(%rsp)
063ba539 and       $1,%cl
063ba53c mov       %cl,0x36(%rsp)
063ba540 mov       %rdx,0x40(%rsp)
063ba545 movb      $0,0x3F(%rsp)
063ba54a movb      $1,0x3F(%rsp)
063ba54f movzbl    0x36(%rsp),%eax
063ba554 test      $1,%al
063ba556 je        0x0000`0000`063B`A55E
063ba558 jmp       0x0000`0000`063B`A55A
063ba55a jmp       0x0000`0000`063B`A575
063ba55c ud2
063ba55e mov       0x28(%rsp),%rcx
063ba563 movb      $0,0x3F(%rsp)
063ba568 call      0x0000`0000`063B`B2D0
063ba56d and       $1,%al
063ba56f mov       %al,0x37(%rsp)
063ba573 jmp       0x0000`0000`063B`A57A
063ba575 movb      $1,0x37(%rsp)
063ba57a testb     $1,0x3F(%rsp)
063ba57f jne       0x0000`0000`063B`A58F
063ba581 mov       0x37(%rsp),%al
063ba585 and       $1,%al
063ba587 movzbl    %al,%eax
063ba58a add       $0x58,%rsp
063ba58e ret
063ba58f jmp       0x0000`0000`063B`A581

core::result::Result::and_then<tuple$<>,core::fmt::Error,tuple$<>,core::fmt::builders::impl$3::field::closure_env$0>:
063ba5a0 sub       $0x78,%rsp
063ba5a4 mov       %rdx,0x28(%rsp)
063ba5a9 and       $1,%cl
063ba5ac mov       %cl,0x36(%rsp)
063ba5b0 movb      $0,0x67(%rsp)
063ba5b5 movb      $1,0x67(%rsp)
063ba5ba movzbl    0x36(%rsp),%eax
063ba5bf test      $1,%al
063ba5c1 je        0x0000`0000`063B`A5C9
063ba5c3 jmp       0x0000`0000`063B`A5C5
063ba5c5 jmp       0x0000`0000`063B`A5F5
063ba5c7 ud2
063ba5c9 mov       0x28(%rsp),%rdx
063ba5ce movb      $0,0x67(%rsp)
063ba5d3 lea       0x38(%rsp),%rcx
063ba5d8 mov       $0x28,%r8d
063ba5de call      0x0000`0000`063C`BD50
063ba5e3 lea       0x38(%rsp),%rcx
063ba5e8 call      0x0000`0000`063B`AEC0
063ba5ed and       $1,%al
063ba5ef mov       %al,0x37(%rsp)
063ba5f3 jmp       0x0000`0000`063B`A5FA
063ba5f5 movb      $1,0x37(%rsp)
063ba5fa testb     $1,0x67(%rsp)
063ba5ff jne       0x0000`0000`063B`A60F
063ba601 mov       0x37(%rsp),%al
063ba605 and       $1,%al
063ba607 movzbl    %al,%eax
063ba60a add       $0x78,%rsp
063ba60e ret
063ba60f jmp       0x0000`0000`063B`A601

core::result::Result::and_then<tuple$<>,core::fmt::Error,tuple$<>,core::fmt::builders::impl$4::field::closure_env$0>:
063ba620 sub       $0x68,%rsp
063ba624 mov       %rdx,0x28(%rsp)
063ba629 and       $1,%cl
063ba62c mov       %cl,0x36(%rsp)
063ba630 movb      $0,0x57(%rsp)
063ba635 movb      $1,0x57(%rsp)
063ba63a movzbl    0x36(%rsp),%eax
063ba63f test      $1,%al
063ba641 je        0x0000`0000`063B`A649
063ba643 jmp       0x0000`0000`063B`A645
063ba645 jmp       0x0000`0000`063B`A67F
063ba647 ud2
063ba649 mov       0x28(%rsp),%rax
063ba64e movb      $0,0x57(%rsp)
063ba653 mov       (%rax),%rcx
063ba656 mov       %rcx,0x38(%rsp)
063ba65b mov       8(%rax),%rcx
063ba65f mov       %rcx,0x40(%rsp)
063ba664 mov       0x10(%rax),%rax
063ba668 mov       %rax,0x48(%rsp)
063ba66d lea       0x38(%rsp),%rcx
063ba672 call      0x0000`0000`063B`B4B0
063ba677 and       $1,%al
063ba679 mov       %al,0x37(%rsp)
063ba67d jmp       0x0000`0000`063B`A684
063ba67f movb      $1,0x37(%rsp)
063ba684 testb     $1,0x57(%rsp)
063ba689 jne       0x0000`0000`063B`A699
063ba68b mov       0x37(%rsp),%al
063ba68f and       $1,%al
063ba691 movzbl    %al,%eax
063ba694 add       $0x68,%rsp
063ba698 ret
063ba699 jmp       0x0000`0000`063B`A68B

core::result::Result::and_then<tuple$<>,core::fmt::Error,tuple$<>,core::fmt::builders::impl$4::finish::closure_env$0>:
063ba6a0 sub       $0x58,%rsp
063ba6a4 mov       %rdx,0x28(%rsp)
063ba6a9 and       $1,%cl
063ba6ac mov       %cl,0x36(%rsp)
063ba6b0 mov       %rdx,0x40(%rsp)
063ba6b5 movb      $0,0x3F(%rsp)
063ba6ba movb      $1,0x3F(%rsp)
063ba6bf movzbl    0x36(%rsp),%eax
063ba6c4 test      $1,%al
063ba6c6 je        0x0000`0000`063B`A6CE
063ba6c8 jmp       0x0000`0000`063B`A6CA
063ba6ca jmp       0x0000`0000`063B`A6E5
063ba6cc ud2
063ba6ce mov       0x28(%rsp),%rcx
063ba6d3 movb      $0,0x3F(%rsp)
063ba6d8 call      0x0000`0000`063B`B740
063ba6dd and       $1,%al
063ba6df mov       %al,0x37(%rsp)
063ba6e3 jmp       0x0000`0000`063B`A6EA
063ba6e5 movb      $1,0x37(%rsp)
063ba6ea testb     $1,0x3F(%rsp)
063ba6ef jne       0x0000`0000`063B`A6FF
063ba6f1 mov       0x37(%rsp),%al
063ba6f5 and       $1,%al
063ba6f7 movzbl    %al,%eax
063ba6fa add       $0x58,%rsp
063ba6fe ret
063ba6ff jmp       0x0000`0000`063B`A6F1

core::result::unwrap_failed:
063ba710 sub       $0xC8,%rsp
063ba717 mov       0xF0(%rsp),%rax
063ba71f mov       %rax,0x40(%rsp)
063ba724 mov       %rcx,0x58(%rsp)
063ba729 mov       %rdx,0x60(%rsp)
063ba72e mov       %r8,0x68(%rsp)
063ba733 mov       %r9,0x70(%rsp)
063ba738 lea       0x58(%rsp),%rcx
063ba73d call      0x0000`0000`063C`9A80
063ba742 mov       %rax,0x48(%rsp)
063ba747 mov       %rdx,0x50(%rsp)
063ba74c lea       0x68(%rsp),%rcx
063ba751 call      0x0000`0000`063C`9B10
063ba756 mov       %rax,0x30(%rsp)
063ba75b mov       %rdx,0x38(%rsp)
063ba760 mov       0x38(%rsp),%rax
063ba765 mov       0x30(%rsp),%rcx
063ba76a mov       0x50(%rsp),%rdx
063ba76f mov       0x48(%rsp),%r8
063ba774 mov       %r8,0xA8(%rsp)
063ba77c mov       %rdx,0xB0(%rsp)
063ba784 mov       %rcx,0xB8(%rsp)
063ba78c mov       %rax,0xC0(%rsp)
063ba794 lea       0xA8(%rsp),%r9
063ba79c lea       0x78(%rsp),%rcx
063ba7a1 lea       0x63D`00A8,%rdx
063ba7a8 mov       $2,%r8d
063ba7ae movq      $2,0x20(%rsp)
063ba7b7 call      0x0000`0000`063B`EFF0
063ba7bc mov       0x40(%rsp),%rdx
063ba7c1 lea       0x78(%rsp),%rcx
063ba7c6 call      0x0000`0000`063B`A100
063ba7cb ud2

core::result::impl$27::branch<core::fmt::PostPadding,core::fmt::Error>:
063ba7d0 sub       $0x40,%rsp
063ba7d4 mov       %rcx,(%rsp)
063ba7d8 mov       %edx,8(%rsp)
063ba7dc mov       8(%rsp),%eax
063ba7e0 add       $0xFFEF`0000,%eax
063ba7e5 sete      %al
063ba7e8 movzbl    %al,%eax
063ba7eb jne       0x0000`0000`063B`A7F3
063ba7ed jmp       0x0000`0000`063B`A7EF
063ba7ef jmp       0x0000`0000`063B`A80F
063ba7f1 ud2
063ba7f3 mov       (%rsp),%rcx
063ba7f7 mov       8(%rsp),%eax
063ba7fb mov       %rcx,0x30(%rsp)
063ba800 mov       %eax,0x38(%rsp)
063ba804 mov       %rcx,0x10(%rsp)
063ba809 mov       %eax,0x18(%rsp)
063ba80d jmp       0x0000`0000`063B`A817
063ba80f movl      $0x11`0000,0x18(%rsp)
063ba817 mov       0x10(%rsp),%rax
063ba81c mov       0x18(%rsp),%edx
063ba820 add       $0x40,%rsp
063ba824 ret

core::result::impl$27::branch<tuple$<usize,char>,usize>:
063ba830 sub       $0x38,%rsp
063ba834 mov       %rdx,(%rsp)
063ba838 mov       %rcx,8(%rsp)
063ba83d mov       %rcx,0x10(%rsp)
063ba842 mov       (%rdx),%rax
063ba845 test      %rax,%rax
063ba848 je        0x0000`0000`063B`A850
063ba84a jmp       0x0000`0000`063B`A84C
063ba84c jmp       0x0000`0000`063B`A879
063ba84e ud2
063ba850 mov       8(%rsp),%rax
063ba855 mov       (%rsp),%rcx
063ba859 mov       8(%rcx),%rdx
063ba85d mov       0x10(%rcx),%ecx
063ba860 mov       %rdx,0x28(%rsp)
063ba865 mov       %ecx,0x30(%rsp)
063ba869 mov       %rdx,8(%rax)
063ba86d mov       %ecx,0x10(%rax)
063ba870 movq      $0,(%rax)
063ba877 jmp       0x0000`0000`063B`A8A0
063ba879 mov       8(%rsp),%rax
063ba87e mov       (%rsp),%rcx
063ba882 mov       8(%rcx),%rcx
063ba886 mov       %rcx,0x20(%rsp)
063ba88b mov       %rcx,0x18(%rsp)
063ba890 mov       0x18(%rsp),%rcx
063ba895 mov       %rcx,8(%rax)
063ba899 movq      $1,(%rax)
063ba8a0 mov       0x10(%rsp),%rax
063ba8a5 add       $0x38,%rsp
063ba8a9 ret

core::result::impl$27::branch<tuple$<>,core::fmt::Error>:
063ba8b0 sub       $0x20,%rsp
063ba8b4 and       $1,%cl
063ba8b7 mov       %cl,6(%rsp)
063ba8bb movzbl    6(%rsp),%eax
063ba8c0 test      $1,%al
063ba8c2 je        0x0000`0000`063B`A8CA
063ba8c4 jmp       0x0000`0000`063B`A8C6
063ba8c6 jmp       0x0000`0000`063B`A8D1
063ba8c8 ud2
063ba8ca movb      $0,7(%rsp)
063ba8cf jmp       0x0000`0000`063B`A8D6
063ba8d1 movb      $1,7(%rsp)
063ba8d6 mov       7(%rsp),%al
063ba8da and       $1,%al
063ba8dc movzbl    %al,%eax
063ba8df add       $0x20,%rsp
063ba8e3 ret

core::result::impl$28::from_residual<tuple$<>,usize,usize>:
063ba8f0 sub       $0x48,%rsp
063ba8f4 mov       %rcx,0x28(%rsp)
063ba8f9 mov       0x28(%rsp),%rcx
063ba8fe mov       %rcx,0x40(%rsp)
063ba903 call      0x0000`0000`063B`79A0
063ba908 mov       %rax,0x20(%rsp)
063ba90d mov       0x20(%rsp),%rax
063ba912 mov       %rax,0x38(%rsp)
063ba917 movq      $1,0x30(%rsp)
063ba920 mov       0x30(%rsp),%rax
063ba925 mov       0x38(%rsp),%rdx
063ba92a add       $0x48,%rsp
063ba92e ret

core::result::impl$28::from_residual<tuple$<>,core::fmt::Error,core::fmt::Error>:
063ba930 sub       $0x38,%rsp
063ba934 call      0x0000`0000`063B`7990
063ba939 movb      $1,0x27(%rsp)
063ba93e mov       0x27(%rsp),%al
063ba942 and       $1,%al
063ba944 movzbl    %al,%eax
063ba947 add       $0x38,%rsp
063ba94b ret

core::result::impl$28::from_residual<core::fmt::PostPadding,core::fmt::Error,core::fmt::Error>:
063ba950 sub       $0x48,%rsp
063ba954 call      0x0000`0000`063B`7990
063ba959 movl      $0x11`0000,0x30(%rsp)
063ba961 mov       0x28(%rsp),%rax
063ba966 mov       0x30(%rsp),%edx
063ba96a add       $0x48,%rsp
063ba96e ret

core::sync::atomic::atomic_load<usize>:
063ba970 sub       $0xB8,%rsp
063ba977 mov       %rcx,0x30(%rsp)
063ba97c mov       %dl,0x47(%rsp)
063ba980 mov       %rcx,0xB0(%rsp)
063ba988 movzbl    0x47(%rsp),%eax
063ba98d mov       %rax,0x38(%rsp)
063ba992 mov       0x38(%rsp),%rax
063ba997 lea       0x63B`AA64,%rcx
063ba99e movslq    (%rcx,%rax,4),%rax
063ba9a2 add       %rcx,%rax
063ba9a5 jmp       *%rax
063ba9a7 ud2
063ba9a9 mov       0x30(%rsp),%rax
063ba9ae mov       (%rax),%rax
063ba9b1 mov       %rax,0x48(%rsp)
063ba9b6 jmp       0x0000`0000`063B`AA2D
063ba9b8 lea       0x50(%rsp),%rcx
063ba9bd lea       0x63D`01D0,%rdx
063ba9c4 mov       $1,%r8d
063ba9ca lea       0x63C`F530,%r9
063ba9d1 xor       %eax,%eax
063ba9d3 movq      $0,0x20(%rsp)
063ba9dc call      0x0000`0000`063B`EFF0
063ba9e1 jmp       0x0000`0000`063B`AA50
063ba9e3 mov       0x30(%rsp),%rax
063ba9e8 mov       (%rax),%rax
063ba9eb mov       %rax,0x48(%rsp)
063ba9f0 jmp       0x0000`0000`063B`AA2D
063ba9f2 lea       0x80(%rsp),%rcx
063ba9fa lea       0x63D`0100,%rdx
063baa01 mov       $1,%r8d
063baa07 lea       0x63C`F530,%r9
063baa0e xor       %eax,%eax
063baa10 movq      $0,0x20(%rsp)
063baa19 call      0x0000`0000`063B`EFF0
063baa1e jmp       0x0000`0000`063B`AA3A
063baa20 mov       0x30(%rsp),%rax
063baa25 mov       (%rax),%rax
063baa28 mov       %rax,0x48(%rsp)
063baa2d mov       0x48(%rsp),%rax
063baa32 add       $0xB8,%rsp
063baa39 ret
063baa3a lea       0x63D`0190,%rdx
063baa41 lea       0x80(%rsp),%rcx
063baa49 call      0x0000`0000`063B`A100
063baa4e ud2
063baa50 lea       0x63D`01E0,%rdx
063baa57 lea       0x50(%rsp),%rcx
063baa5c call      0x0000`0000`063B`A100
063baa61 ud2

core::fmt::builders::impl$0::default:
063baa80 push      %rax
063baa81 movb      $1,7(%rsp)
063baa86 mov       7(%rsp),%al
063baa8a and       $1,%al
063baa8c movzbl    %al,%eax
063baa8f pop       %rcx
063baa90 ret

core::fmt::builders::PadAdapter::wrap:
063baaa0 sub       $0x58,%rsp
063baaa4 mov       %rcx,%rax
063baaa7 mov       %rax,0x28(%rsp)
063baaac mov       %rdx,0x40(%rsp)
063baab1 mov       %r8,0x48(%rsp)
063baab6 mov       %r9,0x50(%rsp)
063baabb mov       %r8,0x30(%rsp)
063baac0 mov       %r9,0x38(%rsp)
063baac5 mov       0x30(%rsp),%r8
063baaca mov       0x38(%rsp),%r9
063baacf call      0x0000`0000`063B`FAB0
063baad4 mov       0x28(%rsp),%rax
063baad9 add       $0x58,%rsp
063baadd ret

core::fmt::builders::impl$1::wrap::closure$0:
063baae0 sub       $0x68,%rsp
063baae4 mov       %rcx,0x40(%rsp)
063baae9 mov       %rdx,0x48(%rsp)
063baaee lea       0x40(%rsp),%rax
063baaf3 add       $8,%rax
063baaf7 mov       %rax,0x50(%rsp)
063baafc mov       %r8,0x58(%rsp)
063bab01 mov       %r9,0x60(%rsp)
063bab06 mov       %r8,0x28(%rsp)
063bab0b mov       %r9,0x30(%rsp)
063bab10 mov       %rdx,0x38(%rsp)
063bab15 lea       0x28(%rsp),%rdx
063bab1a call      0x0000`0000`063B`9C40
063bab1f mov       %rax,0x20(%rsp)
063bab24 mov       0x20(%rsp),%rax
063bab29 lea       0x63D`01F8,%rdx
063bab30 add       $0x68,%rsp
063bab34 ret

core::fmt::builders::impl$2::write_str:
063bab40 sub       $0xE8,%rsp
063bab47 mov       %rcx,0x68(%rsp)
063bab4c mov       %rdx,0x70(%rsp)
063bab51 mov       %r8,0x78(%rsp)
063bab56 mov       %rcx,0xB8(%rsp)
063bab5e mov       0x70(%rsp),%rcx
063bab63 mov       0x78(%rsp),%rdx
063bab68 call      0x0000`0000`063C`7670
063bab6d mov       %al,0x67(%rsp)
063bab71 mov       0x67(%rsp),%al
063bab75 xor       $0xFF,%al
063bab77 test      $1,%al
063bab79 jne       0x0000`0000`063B`AB88
063bab7b movb      $0,0x86(%rsp)
063bab83 jmp       0x0000`0000`063B`AC19
063bab88 mov       0x68(%rsp),%rax
063bab8d mov       0x10(%rax),%rax
063bab91 testb     $1,(%rax)
063bab94 jne       0x0000`0000`063B`ABBD
063bab96 mov       0x70(%rsp),%rcx
063bab9b mov       0x78(%rsp),%rdx
063baba0 mov       $0xA,%r8d
063baba6 call      0x0000`0000`063C`7B00
063babab mov       %rdx,0x98(%rsp)
063babb3 mov       %rax,0x90(%rsp)
063babbb jmp       0x0000`0000`063B`AC2D
063babbd mov       0x68(%rsp),%rax
063babc2 mov       (%rax),%rcx
063babc5 mov       8(%rax),%rax
063babc9 lea       0x63D`0228,%rdx
063babd0 mov       $4,%r8d
063babd6 callq     *0x18(%rax)
063babd9 mov       %al,0x66(%rsp)
063babdd mov       0x66(%rsp),%cl
063babe1 and       $1,%cl
063babe4 call      0x0000`0000`063B`A8B0
063babe9 and       $1,%al
063babeb mov       %al,0x87(%rsp)
063babf2 movzbl    0x87(%rsp),%eax
063babfa test      $1,%al
063babfc je        0x0000`0000`063B`AB96
063babfe jmp       0x0000`0000`063B`AC00
063bac00 jmp       0x0000`0000`063B`AC04
063bac02 ud2
063bac04 lea       0x63D`02A8,%rcx
063bac0b call      0x0000`0000`063B`A930
063bac10 and       $1,%al
063bac12 mov       %al,0x86(%rsp)
063bac19 mov       0x86(%rsp),%al
063bac20 and       $1,%al
063bac22 movzbl    %al,%eax
063bac25 add       $0xE8,%rsp
063bac2c ret
063bac2d mov       0x90(%rsp),%rax
063bac35 test      %rax,%rax
063bac38 je        0x0000`0000`063B`AC40
063bac3a jmp       0x0000`0000`063B`AC3C
063bac3c jmp       0x0000`0000`063B`AC65
063bac3e ud2
063bac40 mov       0x68(%rsp),%rax
063bac45 mov       0x10(%rax),%rax
063bac49 movb      $0,(%rax)
063bac4c mov       0x70(%rsp),%rcx
063bac51 mov       0x78(%rsp),%rdx
063bac56 call      0x0000`0000`063C`7630
063bac5b mov       %rax,0x88(%rsp)
063bac63 jmp       0x0000`0000`063B`ACBA
063bac65 mov       0x68(%rsp),%rcx
063bac6a mov       0x98(%rsp),%rax
063bac72 mov       %rax,0xE0(%rsp)
063bac7a mov       0x10(%rcx),%rcx
063bac7e movb      $1,(%rcx)
063bac81 add       $1,%rax
063bac85 mov       %rax,0x58(%rsp)
063bac8a setb      %al
063bac8d test      $1,%al
063bac8f jne       0x0000`0000`063B`ACA0
063bac91 mov       0x58(%rsp),%rax
063bac96 mov       %rax,0x88(%rsp)
063bac9e jmp       0x0000`0000`063B`ACBA
063baca0 lea       0x63C`F3E0,%rcx
063baca7 lea       0x63D`02C0,%r8
063bacae mov       $0x1C,%edx
063bacb3 call      0x0000`0000`063B`9FF0
063bacb8 ud2
063bacba mov       0x68(%rsp),%rax
063bacbf mov       (%rax),%rcx
063bacc2 mov       %rcx,0x38(%rsp)
063bacc7 mov       8(%rax),%rax
063baccb mov       %rax,0x40(%rsp)
063bacd0 mov       0x70(%rsp),%rcx
063bacd5 mov       0x78(%rsp),%rdx
063bacda mov       0x88(%rsp),%rax
063bace2 mov       %rax,0xA8(%rsp)
063bacea mov       0xA8(%rsp),%r8
063bacf2 lea       0x63D`02D8,%r9
063bacf9 call      0x0000`0000`063C`5E80
063bacfe mov       %rax,0x48(%rsp)
063bad03 mov       %rdx,0x50(%rsp)
063bad08 mov       0x40(%rsp),%rax
063bad0d mov       0x50(%rsp),%r8
063bad12 mov       0x48(%rsp),%rdx
063bad17 mov       0x38(%rsp),%rcx
063bad1c callq     *0x18(%rax)
063bad1f mov       %al,0x37(%rsp)
063bad23 mov       0x37(%rsp),%cl
063bad27 and       $1,%cl
063bad2a call      0x0000`0000`063B`A8B0
063bad2f and       $1,%al
063bad31 mov       %al,0xA7(%rsp)
063bad38 movzbl    0xA7(%rsp),%eax
063bad40 test      $1,%al
063bad42 je        0x0000`0000`063B`AD4A
063bad44 jmp       0x0000`0000`063B`AD46
063bad46 jmp       0x0000`0000`063B`AD84
063bad48 ud2
063bad4a mov       0x70(%rsp),%rcx
063bad4f mov       0x78(%rsp),%rdx
063bad54 mov       0x88(%rsp),%rax
063bad5c mov       %rax,0xB0(%rsp)
063bad64 mov       0xB0(%rsp),%r8
063bad6c lea       0x63D`0308,%r9
063bad73 call      0x0000`0000`063C`5DD0
063bad78 mov       %rax,0x20(%rsp)
063bad7d mov       %rdx,0x28(%rsp)
063bad82 jmp       0x0000`0000`063B`AD9E
063bad84 lea       0x63D`02F0,%rcx
063bad8b call      0x0000`0000`063B`A930
063bad90 and       $1,%al
063bad92 mov       %al,0x86(%rsp)
063bad99 jmp       0x0000`0000`063B`AC19
063bad9e mov       0x28(%rsp),%rax
063bada3 mov       0x20(%rsp),%rcx
063bada8 mov       %rcx,0x70(%rsp)
063badad mov       %rax,0x78(%rsp)
063badb2 jmp       0x0000`0000`063B`AB5E

core::fmt::builders::debug_struct_new:
063badc0 sub       $0x78,%rsp
063badc4 mov       %r9,0x28(%rsp)
063badc9 mov       %r8,%rax
063badcc mov       0x28(%rsp),%r8
063badd1 mov       %rax,0x30(%rsp)
063badd6 mov       %rdx,%rax
063badd9 mov       0x30(%rsp),%rdx
063badde mov       %rax,0x38(%rsp)
063bade3 mov       %rcx,%rax
063bade6 mov       0x38(%rsp),%rcx
063badeb mov       %rax,0x40(%rsp)
063badf0 mov       %rax,0x48(%rsp)
063badf5 mov       %rcx,0x58(%rsp)
063badfa mov       %rdx,0x60(%rsp)
063badff mov       %r8,0x68(%rsp)
063bae04 call      0x0000`0000`063C`0C10
063bae09 mov       %al,0x57(%rsp)
063bae0d and       $1,%al
063bae0f mov       %al,0x77(%rsp)
063bae13 mov       0x48(%rsp),%rax
063bae18 mov       0x40(%rsp),%rcx
063bae1d mov       0x57(%rsp),%dl
063bae21 mov       0x38(%rsp),%r8
063bae26 mov       %r8,(%rcx)
063bae29 and       $1,%dl
063bae2c mov       %dl,8(%rcx)
063bae2f movb      $0,9(%rcx)
063bae33 add       $0x78,%rsp
063bae37 ret

core::fmt::builders::DebugStruct::field:
063bae40 sub       $0x88,%rsp
063bae47 mov       %rcx,%r10
063bae4a mov       %r10,0x28(%rsp)
063bae4f mov       0xB0(%rsp),%rax
063bae57 mov       %r10,0x60(%rsp)
063bae5c mov       %rdx,0x68(%rsp)
063bae61 mov       %r8,0x70(%rsp)
063bae66 mov       %r9,0x78(%rsp)
063bae6b mov       %rax,0x80(%rsp)
063bae73 mov       8(%r10),%cl
063bae77 mov       %r10,0x38(%rsp)
063bae7c mov       %rdx,0x40(%rsp)
063bae81 mov       %r8,0x48(%rsp)
063bae86 mov       %r9,0x50(%rsp)
063bae8b mov       %rax,0x58(%rsp)
063bae90 lea       0x38(%rsp),%rdx
063bae95 and       $1,%cl
063bae98 call      0x0000`0000`063B`A5A0
063bae9d mov       %al,0x37(%rsp)
063baea1 mov       0x28(%rsp),%rax
063baea6 mov       0x37(%rsp),%cl
063baeaa and       $1,%cl
063baead mov       %cl,8(%rax)
063baeb0 movb      $1,9(%rax)
063baeb4 add       $0x88,%rsp
063baebb ret

core::fmt::builders::impl$3::field::closure$0:
063baec0 sub       $0x158,%rsp
063baec7 mov       %rcx,0x30(%rsp)
063baecc mov       8(%rcx),%rax
063baed0 mov       %rax,0xC0(%rsp)
063baed8 mov       0x18(%rcx),%rax
063baedc mov       %rax,0xD0(%rsp)
063baee4 mov       (%rcx),%rcx
063baee7 call      0x0000`0000`063B`B350
063baeec mov       %al,0x3D(%rsp)
063baef0 mov       0x3D(%rsp),%al
063baef4 test      $1,%al
063baef6 jne       0x0000`0000`063B`AF11
063baef8 jmp       0x0000`0000`063B`AEFA
063baefa mov       0x30(%rsp),%rax
063baeff mov       (%rax),%rax
063baf02 testb     $1,9(%rax)
063baf06 jne       0x0000`0000`063B`B108
063baf0c jmp       0x0000`0000`063B`B0EB
063baf11 mov       0x30(%rsp),%rax
063baf16 mov       (%rax),%rax
063baf19 mov       9(%rax),%al
063baf1c xor       $0xFF,%al
063baf1e test      $1,%al
063baf20 jne       0x0000`0000`063B`AF38
063baf22 movq      $0,0x40(%rsp)
063baf2b call      0x0000`0000`063B`AA80
063baf30 and       $1,%al
063baf32 mov       %al,0x5F(%rsp)
063baf36 jmp       0x0000`0000`063B`AF9D
063baf38 mov       0x30(%rsp),%rax
063baf3d mov       (%rax),%rax
063baf40 mov       (%rax),%rcx
063baf43 lea       0x63D`0320,%rdx
063baf4a mov       $3,%r8d
063baf50 call      0x0000`0000`063C`0C10
063baf55 mov       %al,0x2F(%rsp)
063baf59 mov       0x2F(%rsp),%cl
063baf5d and       $1,%cl
063baf60 call      0x0000`0000`063B`A8B0
063baf65 and       $1,%al
063baf67 mov       %al,0x3F(%rsp)
063baf6b movzbl    0x3F(%rsp),%eax
063baf70 test      $1,%al
063baf72 je        0x0000`0000`063B`AF22
063baf74 jmp       0x0000`0000`063B`AF76
063baf76 jmp       0x0000`0000`063B`AF7A
063baf78 ud2
063baf7a lea       0x63D`0328,%rcx
063baf81 call      0x0000`0000`063B`A930
063baf86 and       $1,%al
063baf88 mov       %al,0x3E(%rsp)
063baf8c mov       0x3E(%rsp),%al
063baf90 and       $1,%al
063baf92 movzbl    %al,%eax
063baf95 add       $0x158,%rsp
063baf9c ret
063baf9d mov       0x30(%rsp),%rax
063bafa2 mov       (%rax),%rax
063bafa5 mov       (%rax),%rdx
063bafa8 lea       0x60(%rsp),%rcx
063bafad lea       0x40(%rsp),%r8
063bafb2 lea       0x5F(%rsp),%r9
063bafb7 call      0x0000`0000`063B`AAA0
063bafbc mov       0x30(%rsp),%rax
063bafc1 mov       8(%rax),%rdx
063bafc5 mov       0x10(%rax),%r8
063bafc9 lea       0x60(%rsp),%rcx
063bafce call      0x0000`0000`063C`0C10
063bafd3 mov       %al,0x2E(%rsp)
063bafd7 mov       0x2E(%rsp),%cl
063bafdb and       $1,%cl
063bafde call      0x0000`0000`063B`A8B0
063bafe3 and       $1,%al
063bafe5 mov       %al,0xA5(%rsp)
063bafec movzbl    0xA5(%rsp),%eax
063baff4 test      $1,%al
063baff6 je        0x0000`0000`063B`AFFE
063baff8 jmp       0x0000`0000`063B`AFFA
063baffa jmp       0x0000`0000`063B`B01B
063baffc ud2
063baffe lea       0x60(%rsp),%rcx
063bb003 lea       0x63D`00A0,%rdx
063bb00a mov       $2,%r8d
063bb010 call      0x0000`0000`063C`0C10
063bb015 mov       %al,0x2D(%rsp)
063bb019 jmp       0x0000`0000`063B`B032
063bb01b lea       0x63D`0340,%rcx
063bb022 call      0x0000`0000`063B`A930
063bb027 and       $1,%al
063bb029 mov       %al,0x3E(%rsp)
063bb02d jmp       0x0000`0000`063B`AF8C
063bb032 mov       0x2D(%rsp),%cl
063bb036 and       $1,%cl
063bb039 call      0x0000`0000`063B`A8B0
063bb03e and       $1,%al
063bb040 mov       %al,0xA6(%rsp)
063bb047 movzbl    0xA6(%rsp),%eax
063bb04f test      $1,%al
063bb051 je        0x0000`0000`063B`B059
063bb053 jmp       0x0000`0000`063B`B055
063bb055 jmp       0x0000`0000`063B`B074
063bb057 ud2
063bb059 mov       0x30(%rsp),%rax
063bb05e mov       0x18(%rax),%rcx
063bb062 mov       0x20(%rax),%rax
063bb066 lea       0x60(%rsp),%rdx
063bb06b callq     *0x18(%rax)
063bb06e mov       %al,0x2C(%rsp)
063bb072 jmp       0x0000`0000`063B`B08B
063bb074 lea       0x63D`0358,%rcx
063bb07b call      0x0000`0000`063B`A930
063bb080 and       $1,%al
063bb082 mov       %al,0x3E(%rsp)
063bb086 jmp       0x0000`0000`063B`AF8C
063bb08b mov       0x2C(%rsp),%cl
063bb08f and       $1,%cl
063bb092 call      0x0000`0000`063B`A8B0
063bb097 and       $1,%al
063bb099 mov       %al,0xA7(%rsp)
063bb0a0 movzbl    0xA7(%rsp),%eax
063bb0a8 test      $1,%al
063bb0aa je        0x0000`0000`063B`B0B2
063bb0ac jmp       0x0000`0000`063B`B0AE
063bb0ae jmp       0x0000`0000`063B`B0D4
063bb0b0 ud2
063bb0b2 lea       0x60(%rsp),%rcx
063bb0b7 lea       0x63D`0388,%rdx
063bb0be mov       $2,%r8d
063bb0c4 call      0x0000`0000`063C`0C10
063bb0c9 and       $1,%al
063bb0cb mov       %al,0x3E(%rsp)
063bb0cf jmp       0x0000`0000`063B`AF8C
063bb0d4 lea       0x63D`0370,%rcx
063bb0db call      0x0000`0000`063B`A930
063bb0e0 and       $1,%al
063bb0e2 mov       %al,0x3E(%rsp)
063bb0e6 jmp       0x0000`0000`063B`AF8C
063bb0eb lea       0x63D`038C,%rax
063bb0f2 mov       %rax,0xA8(%rsp)
063bb0fa movq      $3,0xB0(%rsp)
063bb106 jmp       0x0000`0000`063B`B123
063bb108 lea       0x63D`038A,%rax
063bb10f mov       %rax,0xA8(%rsp)
063bb117 movq      $2,0xB0(%rsp)
063bb123 mov       0x30(%rsp),%rax
063bb128 mov       (%rax),%rax
063bb12b mov       (%rax),%rcx
063bb12e mov       0xA8(%rsp),%rdx
063bb136 mov       0xB0(%rsp),%r8
063bb13e call      0x0000`0000`063C`0C10
063bb143 mov       %al,0x2B(%rsp)
063bb147 mov       0x2B(%rsp),%cl
063bb14b and       $1,%cl
063bb14e call      0x0000`0000`063B`A8B0
063bb153 and       $1,%al
063bb155 mov       %al,0xBD(%rsp)
063bb15c movzbl    0xBD(%rsp),%eax
063bb164 test      $1,%al
063bb166 je        0x0000`0000`063B`B16E
063bb168 jmp       0x0000`0000`063B`B16A
063bb16a jmp       0x0000`0000`063B`B18C
063bb16c ud2
063bb16e mov       0x30(%rsp),%rax
063bb173 mov       (%rax),%rcx
063bb176 mov       (%rcx),%rcx
063bb179 mov       8(%rax),%rdx
063bb17d mov       0x10(%rax),%r8
063bb181 call      0x0000`0000`063C`0C10
063bb186 mov       %al,0x2A(%rsp)
063bb18a jmp       0x0000`0000`063B`B1A3
063bb18c lea       0x63D`0390,%rcx
063bb193 call      0x0000`0000`063B`A930
063bb198 and       $1,%al
063bb19a mov       %al,0x3E(%rsp)
063bb19e jmp       0x0000`0000`063B`AF8C
063bb1a3 mov       0x2A(%rsp),%cl
063bb1a7 and       $1,%cl
063bb1aa call      0x0000`0000`063B`A8B0
063bb1af and       $1,%al
063bb1b1 mov       %al,0xBE(%rsp)
063bb1b8 movzbl    0xBE(%rsp),%eax
063bb1c0 test      $1,%al
063bb1c2 je        0x0000`0000`063B`B1CA
063bb1c4 jmp       0x0000`0000`063B`B1C6
063bb1c6 jmp       0x0000`0000`063B`B1ED
063bb1c8 ud2
063bb1ca mov       0x30(%rsp),%rax
063bb1cf mov       (%rax),%rax
063bb1d2 mov       (%rax),%rcx
063bb1d5 lea       0x63D`00A0,%rdx
063bb1dc mov       $2,%r8d
063bb1e2 call      0x0000`0000`063C`0C10
063bb1e7 mov       %al,0x29(%rsp)
063bb1eb jmp       0x0000`0000`063B`B204
063bb1ed lea       0x63D`03A8,%rcx
063bb1f4 call      0x0000`0000`063B`A930
063bb1f9 and       $1,%al
063bb1fb mov       %al,0x3E(%rsp)
063bb1ff jmp       0x0000`0000`063B`AF8C
063bb204 mov       0x29(%rsp),%cl
063bb208 and       $1,%cl
063bb20b call      0x0000`0000`063B`A8B0
063bb210 and       $1,%al
063bb212 mov       %al,0xBF(%rsp)
063bb219 movzbl    0xBF(%rsp),%eax
063bb221 test      $1,%al
063bb223 je        0x0000`0000`063B`B22B
063bb225 jmp       0x0000`0000`063B`B227
063bb227 jmp       0x0000`0000`063B`B24C
063bb229 ud2
063bb22b mov       0x30(%rsp),%rdx
063bb230 mov       0x18(%rdx),%rcx
063bb234 mov       0x20(%rdx),%rax
063bb238 mov       (%rdx),%rdx
063bb23b mov       (%rdx),%rdx
063bb23e callq     *0x18(%rax)
063bb241 and       $1,%al
063bb243 mov       %al,0x3E(%rsp)
063bb247 jmp       0x0000`0000`063B`AF8C
063bb24c lea       0x63D`03C0,%rcx
063bb253 call      0x0000`0000`063B`A930
063bb258 and       $1,%al
063bb25a mov       %al,0x3E(%rsp)
063bb25e jmp       0x0000`0000`063B`AF8C

core::fmt::builders::DebugStruct::finish:
063bb270 sub       $0x48,%rsp
063bb274 mov       %rcx,0x30(%rsp)
063bb279 mov       %rcx,0x40(%rsp)
063bb27e testb     $1,9(%rcx)
063bb282 jne       0x0000`0000`063B`B296
063bb284 mov       0x30(%rsp),%rax
063bb289 mov       8(%rax),%al
063bb28c and       $1,%al
063bb28e movzbl    %al,%eax
063bb291 add       $0x48,%rsp
063bb295 ret
063bb296 mov       0x30(%rsp),%rax
063bb29b mov       8(%rax),%cl
063bb29e mov       %rax,0x38(%rsp)
063bb2a3 mov       0x38(%rsp),%rdx
063bb2a8 and       $1,%cl
063bb2ab call      0x0000`0000`063B`A530
063bb2b0 mov       %al,0x2F(%rsp)
063bb2b4 mov       0x30(%rsp),%rax
063bb2b9 mov       0x2F(%rsp),%cl
063bb2bd and       $1,%cl
063bb2c0 mov       %cl,8(%rax)
063bb2c3 jmp       0x0000`0000`063B`B284

core::fmt::builders::impl$3::finish::closure$0:
063bb2d0 sub       $0x48,%rsp
063bb2d4 mov       %rcx,0x28(%rsp)
063bb2d9 mov       %rcx,0x38(%rsp)
063bb2de call      0x0000`0000`063B`B350
063bb2e3 mov       %al,0x36(%rsp)
063bb2e7 mov       0x36(%rsp),%al
063bb2eb test      $1,%al
063bb2ed jne       0x0000`0000`063B`B313
063bb2ef jmp       0x0000`0000`063B`B2F1
063bb2f1 mov       0x28(%rsp),%rax
063bb2f6 mov       (%rax),%rcx
063bb2f9 lea       0x63D`03D9,%rdx
063bb300 mov       $2,%r8d
063bb306 call      0x0000`0000`063C`0C10
063bb30b and       $1,%al
063bb30d mov       %al,0x37(%rsp)
063bb311 jmp       0x0000`0000`063B`B333
063bb313 mov       0x28(%rsp),%rax
063bb318 mov       (%rax),%rcx
063bb31b lea       0x63D`03D8,%rdx
063bb322 mov       $1,%r8d
063bb328 call      0x0000`0000`063C`0C10
063bb32d and       $1,%al
063bb32f mov       %al,0x37(%rsp)
063bb333 mov       0x37(%rsp),%al
063bb337 and       $1,%al
063bb339 movzbl    %al,%eax
063bb33c add       $0x48,%rsp
063bb340 ret

core::fmt::builders::DebugStruct::is_pretty:
063bb350 sub       $0x38,%rsp
063bb354 mov       %rcx,0x30(%rsp)
063bb359 mov       (%rcx),%rcx
063bb35c call      0x0000`0000`063C`0CD0
063bb361 mov       %al,0x2F(%rsp)
063bb365 mov       0x2F(%rsp),%al
063bb369 and       $1,%al
063bb36b movzbl    %al,%eax
063bb36e add       $0x38,%rsp
063bb372 ret

core::fmt::builders::debug_tuple_new:
063bb380 sub       $0x78,%rsp
063bb384 mov       %r9,0x28(%rsp)
063bb389 mov       %r8,%rax
063bb38c mov       0x28(%rsp),%r8
063bb391 mov       %rax,0x30(%rsp)
063bb396 mov       %rdx,%rax
063bb399 mov       0x30(%rsp),%rdx
063bb39e mov       %rax,0x38(%rsp)
063bb3a3 mov       %rcx,%rax
063bb3a6 mov       0x38(%rsp),%rcx
063bb3ab mov       %rax,0x40(%rsp)
063bb3b0 mov       %rax,0x48(%rsp)
063bb3b5 mov       %rcx,0x58(%rsp)
063bb3ba mov       %rdx,0x60(%rsp)
063bb3bf mov       %r8,0x68(%rsp)
063bb3c4 call      0x0000`0000`063C`0C10
063bb3c9 mov       %al,0x57(%rsp)
063bb3cd and       $1,%al
063bb3cf mov       %al,0x77(%rsp)
063bb3d3 mov       0x28(%rsp),%rdx
063bb3d8 mov       0x30(%rsp),%rcx
063bb3dd call      0x0000`0000`063C`7670
063bb3e2 mov       %al,0x27(%rsp)
063bb3e6 mov       0x48(%rsp),%rax
063bb3eb mov       0x40(%rsp),%rcx
063bb3f0 mov       0x27(%rsp),%dl
063bb3f4 mov       0x57(%rsp),%r8b
063bb3f9 mov       0x38(%rsp),%r9
063bb3fe mov       %r9,(%rcx)
063bb401 and       $1,%r8b
063bb405 mov       %r8b,0x10(%rcx)
063bb409 movq      $0,8(%rcx)
063bb411 and       $1,%dl
063bb414 mov       %dl,0x11(%rcx)
063bb417 add       $0x78,%rsp
063bb41b ret

core::fmt::builders::DebugTuple::field:
063bb420 sub       $0x68,%rsp
063bb424 mov       %rcx,%rax
063bb427 mov       %rax,0x28(%rsp)
063bb42c mov       %rax,0x50(%rsp)
063bb431 mov       %rdx,0x58(%rsp)
063bb436 mov       %r8,0x60(%rsp)
063bb43b mov       0x10(%rax),%cl
063bb43e mov       %rax,0x38(%rsp)
063bb443 mov       %rdx,0x40(%rsp)
063bb448 mov       %r8,0x48(%rsp)
063bb44d lea       0x38(%rsp),%rdx
063bb452 and       $1,%cl
063bb455 call      0x0000`0000`063B`A620
063bb45a mov       %al,0x37(%rsp)
063bb45e mov       0x28(%rsp),%rax
063bb463 mov       0x37(%rsp),%cl
063bb467 and       $1,%cl
063bb46a mov       %cl,0x10(%rax)
063bb46d mov       8(%rax),%rax
063bb471 add       $1,%rax
063bb475 mov       %rax,0x20(%rsp)
063bb47a setb      %al
063bb47d test      $1,%al
063bb47f jne       0x0000`0000`063B`B494
063bb481 mov       0x28(%rsp),%rax
063bb486 mov       0x20(%rsp),%rcx
063bb48b mov       %rcx,8(%rax)
063bb48f add       $0x68,%rsp
063bb493 ret
063bb494 lea       0x63C`F3E0,%rcx
063bb49b lea       0x63D`03E0,%r8
063bb4a2 mov       $0x1C,%edx
063bb4a7 call      0x0000`0000`063B`9FF0
063bb4ac ud2

core::fmt::builders::impl$4::field::closure$0:
063bb4b0 sub       $0x108,%rsp
063bb4b7 mov       %rcx,0x30(%rsp)
063bb4bc mov       8(%rcx),%rax
063bb4c0 mov       %rax,0xC0(%rsp)
063bb4c8 mov       (%rcx),%rcx
063bb4cb call      0x0000`0000`063B`B820
063bb4d0 mov       %al,0x3D(%rsp)
063bb4d4 mov       0x3D(%rsp),%al
063bb4d8 test      $1,%al
063bb4da jne       0x0000`0000`063B`B4F6
063bb4dc jmp       0x0000`0000`063B`B4DE
063bb4de mov       0x30(%rsp),%rax
063bb4e3 mov       (%rax),%rax
063bb4e6 cmpq      $0,8(%rax)
063bb4eb je        0x0000`0000`063B`B61A
063bb4f1 jmp       0x0000`0000`063B`B637
063bb4f6 mov       0x30(%rsp),%rax
063bb4fb mov       (%rax),%rax
063bb4fe cmpq      $0,8(%rax)
063bb503 jne       0x0000`0000`063B`B528
063bb505 mov       0x30(%rsp),%rax
063bb50a mov       (%rax),%rax
063bb50d mov       (%rax),%rcx
063bb510 lea       0x63D`03F8,%rdx
063bb517 mov       $2,%r8d
063bb51d call      0x0000`0000`063C`0C10
063bb522 mov       %al,0x2F(%rsp)
063bb526 jmp       0x0000`0000`063B`B53E
063bb528 movq      $0,0x40(%rsp)
063bb531 call      0x0000`0000`063B`AA80
063bb536 and       $1,%al
063bb538 mov       %al,0x5F(%rsp)
063bb53c jmp       0x0000`0000`063B`B582
063bb53e mov       0x2F(%rsp),%cl
063bb542 and       $1,%cl
063bb545 call      0x0000`0000`063B`A8B0
063bb54a and       $1,%al
063bb54c mov       %al,0x3F(%rsp)
063bb550 movzbl    0x3F(%rsp),%eax
063bb555 test      $1,%al
063bb557 je        0x0000`0000`063B`B528
063bb559 jmp       0x0000`0000`063B`B55B
063bb55b jmp       0x0000`0000`063B`B55F
063bb55d ud2
063bb55f lea       0x63D`0400,%rcx
063bb566 call      0x0000`0000`063B`A930
063bb56b and       $1,%al
063bb56d mov       %al,0x3E(%rsp)
063bb571 mov       0x3E(%rsp),%al
063bb575 and       $1,%al
063bb577 movzbl    %al,%eax
063bb57a add       $0x108,%rsp
063bb581 ret
063bb582 mov       0x30(%rsp),%rax
063bb587 mov       (%rax),%rax
063bb58a mov       (%rax),%rdx
063bb58d lea       0x60(%rsp),%rcx
063bb592 lea       0x40(%rsp),%r8
063bb597 lea       0x5F(%rsp),%r9
063bb59c call      0x0000`0000`063B`AAA0
063bb5a1 mov       0x30(%rsp),%rax
063bb5a6 mov       8(%rax),%rcx
063bb5aa mov       0x10(%rax),%rax
063bb5ae lea       0x60(%rsp),%rdx
063bb5b3 callq     *0x18(%rax)
063bb5b6 mov       %al,0x2E(%rsp)
063bb5ba mov       0x2E(%rsp),%cl
063bb5be and       $1,%cl
063bb5c1 call      0x0000`0000`063B`A8B0
063bb5c6 and       $1,%al
063bb5c8 mov       %al,0xA7(%rsp)
063bb5cf movzbl    0xA7(%rsp),%eax
063bb5d7 test      $1,%al
063bb5d9 je        0x0000`0000`063B`B5E1
063bb5db jmp       0x0000`0000`063B`B5DD
063bb5dd jmp       0x0000`0000`063B`B603
063bb5df ud2
063bb5e1 lea       0x60(%rsp),%rcx
063bb5e6 lea       0x63D`0388,%rdx
063bb5ed mov       $2,%r8d
063bb5f3 call      0x0000`0000`063C`0C10
063bb5f8 and       $1,%al
063bb5fa mov       %al,0x3E(%rsp)
063bb5fe jmp       0x0000`0000`063B`B571
063bb603 lea       0x63D`0418,%rcx
063bb60a call      0x0000`0000`063B`A930
063bb60f and       $1,%al
063bb611 mov       %al,0x3E(%rsp)
063bb615 jmp       0x0000`0000`063B`B571
063bb61a lea       0x63D`0430,%rax
063bb621 mov       %rax,0xA8(%rsp)
063bb629 movq      $1,0xB0(%rsp)
063bb635 jmp       0x0000`0000`063B`B652
063bb637 lea       0x63D`038A,%rax
063bb63e mov       %rax,0xA8(%rsp)
063bb646 movq      $2,0xB0(%rsp)
063bb652 mov       0x30(%rsp),%rax
063bb657 mov       (%rax),%rax
063bb65a mov       (%rax),%rcx
063bb65d mov       0xA8(%rsp),%rdx
063bb665 mov       0xB0(%rsp),%r8
063bb66d call      0x0000`0000`063C`0C10
063bb672 mov       %al,0x2D(%rsp)
063bb676 mov       0x2D(%rsp),%cl
063bb67a and       $1,%cl
063bb67d call      0x0000`0000`063B`A8B0
063bb682 and       $1,%al
063bb684 mov       %al,0xBF(%rsp)
063bb68b movzbl    0xBF(%rsp),%eax
063bb693 test      $1,%al
063bb695 je        0x0000`0000`063B`B69D
063bb697 jmp       0x0000`0000`063B`B699
063bb699 jmp       0x0000`0000`063B`B6BE
063bb69b ud2
063bb69d mov       0x30(%rsp),%rdx
063bb6a2 mov       8(%rdx),%rcx
063bb6a6 mov       0x10(%rdx),%rax
063bb6aa mov       (%rdx),%rdx
063bb6ad mov       (%rdx),%rdx
063bb6b0 callq     *0x18(%rax)
063bb6b3 and       $1,%al
063bb6b5 mov       %al,0x3E(%rsp)
063bb6b9 jmp       0x0000`0000`063B`B571
063bb6be lea       0x63D`0438,%rcx
063bb6c5 call      0x0000`0000`063B`A930
063bb6ca and       $1,%al
063bb6cc mov       %al,0x3E(%rsp)
063bb6d0 jmp       0x0000`0000`063B`B571

core::fmt::builders::DebugTuple::finish:
063bb6e0 sub       $0x48,%rsp
063bb6e4 mov       %rcx,0x30(%rsp)
063bb6e9 mov       %rcx,0x40(%rsp)
063bb6ee cmpq      $0,8(%rcx)
063bb6f3 ja        0x0000`0000`063B`B707
063bb6f5 mov       0x30(%rsp),%rax
063bb6fa mov       0x10(%rax),%al
063bb6fd and       $1,%al
063bb6ff movzbl    %al,%eax
063bb702 add       $0x48,%rsp
063bb706 ret
063bb707 mov       0x30(%rsp),%rax
063bb70c mov       0x10(%rax),%cl
063bb70f mov       %rax,0x38(%rsp)
063bb714 mov       0x38(%rsp),%rdx
063bb719 and       $1,%cl
063bb71c call      0x0000`0000`063B`A6A0
063bb721 mov       %al,0x2F(%rsp)
063bb725 mov       0x30(%rsp),%rax
063bb72a mov       0x2F(%rsp),%cl
063bb72e and       $1,%cl
063bb731 mov       %cl,0x10(%rax)
063bb734 jmp       0x0000`0000`063B`B6F5

core::fmt::builders::impl$4::finish::closure$0:
063bb740 sub       $0x58,%rsp
063bb744 mov       %rcx,0x28(%rsp)
063bb749 mov       %rcx,0x38(%rsp)
063bb74e cmpq      $1,8(%rcx)
063bb753 jne       0x0000`0000`063B`B765
063bb755 mov       0x28(%rsp),%rax
063bb75a mov       0x11(%rax),%al
063bb75d and       $1,%al
063bb75f mov       %al,0x36(%rsp)
063bb763 jmp       0x0000`0000`063B`B76A
063bb765 movb      $0,0x36(%rsp)
063bb76a testb     $1,0x36(%rsp)
063bb76f jne       0x0000`0000`063B`B778
063bb771 movb      $0,0x35(%rsp)
063bb776 jmp       0x0000`0000`063B`B792
063bb778 mov       0x28(%rsp),%rcx
063bb77d call      0x0000`0000`063B`B820
063bb782 mov       %al,0x27(%rsp)
063bb786 mov       0x27(%rsp),%al
063bb78a xor       $0xFF,%al
063bb78c and       $1,%al
063bb78e mov       %al,0x35(%rsp)
063bb792 testb     $1,0x35(%rsp)
063bb797 jne       0x0000`0000`063B`B7BB
063bb799 mov       0x28(%rsp),%rax
063bb79e mov       (%rax),%rcx
063bb7a1 lea       0x63D`0470,%rdx
063bb7a8 mov       $1,%r8d
063bb7ae call      0x0000`0000`063C`0C10
063bb7b3 and       $1,%al
063bb7b5 mov       %al,0x34(%rsp)
063bb7b9 jmp       0x0000`0000`063B`B80C
063bb7bb mov       0x28(%rsp),%rax
063bb7c0 mov       (%rax),%rcx
063bb7c3 lea       0x63D`0450,%rdx
063bb7ca mov       $1,%r8d
063bb7d0 call      0x0000`0000`063C`0C10
063bb7d5 mov       %al,0x26(%rsp)
063bb7d9 mov       0x26(%rsp),%cl
063bb7dd and       $1,%cl
063bb7e0 call      0x0000`0000`063B`A8B0
063bb7e5 and       $1,%al
063bb7e7 mov       %al,0x37(%rsp)
063bb7eb movzbl    0x37(%rsp),%eax
063bb7f0 test      $1,%al
063bb7f2 je        0x0000`0000`063B`B799
063bb7f4 jmp       0x0000`0000`063B`B7F6
063bb7f6 jmp       0x0000`0000`063B`B7FA
063bb7f8 ud2
063bb7fa lea       0x63D`0458,%rcx
063bb801 call      0x0000`0000`063B`A930
063bb806 and       $1,%al
063bb808 mov       %al,0x34(%rsp)
063bb80c mov       0x34(%rsp),%al
063bb810 and       $1,%al
063bb812 movzbl    %al,%eax
063bb815 add       $0x58,%rsp
063bb819 ret

core::fmt::builders::DebugTuple::is_pretty:
063bb820 sub       $0x38,%rsp
063bb824 mov       %rcx,0x30(%rsp)
063bb829 mov       (%rcx),%rcx
063bb82c call      0x0000`0000`063C`0CD0
063bb831 mov       %al,0x2F(%rsp)
063bb835 mov       0x2F(%rsp),%al
063bb839 and       $1,%al
063bb83b movzbl    %al,%eax
063bb83e add       $0x38,%rsp
063bb842 ret

core::fmt::num::GenericRadix::fmt_int<core::fmt::num::UpperHex,u32>:
063bb850 sub       $0x2A8,%rsp
063bb857 mov       %r8,0x128(%rsp)
063bb85f mov       %edx,0x130(%rsp)
063bb866 mov       %rcx,0x208(%rsp)
063bb86e mov       %r8,0x210(%rsp)
063bb876 call      0x0000`0000`063C`8A20
063bb87b mov       %eax,0x134(%rsp)
063bb882 lea       0x130(%rsp),%rcx
063bb88a lea       0x134(%rsp),%rdx
063bb892 call      0x0000`0000`063C`8660
063bb897 mov       %al,0x127(%rsp)
063bb89e and       $1,%al
063bb8a0 mov       %al,0x21B(%rsp)
063bb8a7 mov       0x257(%rsp),%al
063bb8ae mov       %al,0x126(%rsp)
063bb8b5 mov       0x126(%rsp),%dl
063bb8bc lea       0x138(%rsp),%rcx
063bb8c4 mov       $0x80,%r8d
063bb8ca call      0x0000`0000`063C`BCC0
063bb8cf movq      $0x80,0x1B8(%rsp)
063bb8db mov       $0x10,%ecx
063bb8e0 call      0x0000`0000`063C`8A30
063bb8e5 mov       %eax,0x120(%rsp)
063bb8ec mov       %eax,0x21C(%rsp)
063bb8f3 mov       0x127(%rsp),%al
063bb8fa test      $1,%al
063bb8fc jne       0x0000`0000`063B`B927
063bb8fe jmp       0x0000`0000`063B`B900
063bb900 lea       0x138(%rsp),%rcx
063bb908 mov       $0x80,%edx
063bb90d call      0x0000`0000`063C`3F80
063bb912 mov       %rax,0x110(%rsp)
063bb91a mov       %rdx,0x118(%rsp)
063bb922 jmp       0x0000`0000`063B`BB74
063bb927 lea       0x138(%rsp),%rcx
063bb92f mov       $0x80,%edx
063bb934 call      0x0000`0000`063C`3F80
063bb939 mov       %rax,0x100(%rsp)
063bb941 mov       %rdx,0x108(%rsp)
063bb949 mov       0x108(%rsp),%rdx
063bb951 mov       0x100(%rsp),%rcx
063bb959 call      0x0000`0000`063B`9470
063bb95e mov       %rax,0xF0(%rsp)
063bb966 mov       %rdx,0xF8(%rsp)
063bb96e mov       0xF8(%rsp),%rdx
063bb976 mov       0xF0(%rsp),%rcx
063bb97e call      0x0000`0000`063B`90D0
063bb983 mov       %rax,0xE0(%rsp)
063bb98b mov       %rdx,0xE8(%rsp)
063bb993 mov       0xE8(%rsp),%rax
063bb99b mov       0xE0(%rsp),%rcx
063bb9a3 mov       %rcx,0x1C0(%rsp)
063bb9ab mov       %rax,0x1C8(%rsp)
063bb9b3 lea       0x1C0(%rsp),%rcx
063bb9bb call      0x0000`0000`063B`8F80
063bb9c0 mov       %rax,0x1D0(%rsp)
063bb9c8 mov       0x1D0(%rsp),%rax
063bb9d0 test      %rax,%rax
063bb9d3 setne     %al
063bb9d6 movzbl    %al,%eax
063bb9d9 je        0x0000`0000`063B`B9E1
063bb9db jmp       0x0000`0000`063B`B9DD
063bb9dd jmp       0x0000`0000`063B`BA22
063bb9df ud2
063bb9e1 mov       0x1B8(%rsp),%rax
063bb9e9 mov       %rax,0x200(%rsp)
063bb9f1 mov       0x200(%rsp),%rdx
063bb9f9 lea       0x138(%rsp),%rcx
063bba01 lea       0x63D`0518,%r8
063bba08 call      0x0000`0000`063B`7C90
063bba0d mov       %rax,0xD0(%rsp)
063bba15 mov       %rdx,0xD8(%rsp)
063bba1d jmp       0x0000`0000`063B`BD6C
063bba22 mov       0x120(%rsp),%edx
063bba29 mov       0x1D0(%rsp),%rax
063bba31 mov       %rax,0xC8(%rsp)
063bba39 mov       %rax,0x220(%rsp)
063bba41 mov       0x130(%rsp),%ecx
063bba48 call      0x0000`0000`063C`8870
063bba4d mov       %eax,0x1DC(%rsp)
063bba54 mov       0x120(%rsp),%edx
063bba5b mov       0x130(%rsp),%ecx
063bba62 call      0x0000`0000`063C`87C0
063bba67 mov       %eax,0xC4(%rsp)
063bba6e mov       0xC4(%rsp),%eax
063bba75 mov       %eax,0x130(%rsp)
063bba7c lea       0x1DC(%rsp),%rcx
063bba84 call      0x0000`0000`063C`8A40
063bba89 mov       %al,0xC3(%rsp)
063bba90 mov       0xC3(%rsp),%cl
063bba97 call      0x0000`0000`063C`8C30
063bba9c mov       %al,0xC2(%rsp)
063bbaa3 mov       0xC8(%rsp),%rax
063bbaab mov       0xC2(%rsp),%cl
063bbab2 mov       %rax,0x268(%rsp)
063bbaba mov       %cl,0x273(%rsp)
063bbac1 mov       %cl,0x275(%rsp)
063bbac8 mov       %cl,0x277(%rsp)
063bbacf mov       %cl,0x276(%rsp)
063bbad6 mov       0x276(%rsp),%cl
063bbadd mov       %cl,0x274(%rsp)
063bbae4 mov       0x274(%rsp),%cl
063bbaeb mov       %cl,(%rax)
063bbaed mov       %rax,0x278(%rsp)
063bbaf5 mov       %rax,0x280(%rsp)
063bbafd mov       0x1B8(%rsp),%rax
063bbb05 sub       $1,%rax
063bbb09 mov       %rax,0xB8(%rsp)
063bbb11 setb      %al
063bbb14 test      $1,%al
063bbb16 jne       0x0000`0000`063B`BB46
063bbb18 mov       0xB8(%rsp),%rax
063bbb20 mov       %rax,0x1B8(%rsp)
063bbb28 lea       0x130(%rsp),%rcx
063bbb30 lea       0x134(%rsp),%rdx
063bbb38 call      0x0000`0000`063C`85B0
063bbb3d mov       %al,0xB7(%rsp)
063bbb44 jmp       0x0000`0000`063B`BB60
063bbb46 lea       0x63C`F3B0,%rcx
063bbb4d lea       0x63D`04E8,%r8
063bbb54 mov       $0x21,%edx
063bbb59 call      0x0000`0000`063B`9FF0
063bbb5e ud2
063bbb60 mov       0xB7(%rsp),%al
063bbb67 test      $1,%al
063bbb69 jne       0x0000`0000`063B`B9E1
063bbb6f jmp       0x0000`0000`063B`B9B3
063bbb74 mov       0x118(%rsp),%rdx
063bbb7c mov       0x110(%rsp),%rcx
063bbb84 call      0x0000`0000`063B`9470
063bbb89 mov       %rax,0xA0(%rsp)
063bbb91 mov       %rdx,0xA8(%rsp)
063bbb99 mov       0xA8(%rsp),%rdx
063bbba1 mov       0xA0(%rsp),%rcx
063bbba9 call      0x0000`0000`063B`90D0
063bbbae mov       %rax,0x90(%rsp)
063bbbb6 mov       %rdx,0x98(%rsp)
063bbbbe mov       0x98(%rsp),%rax
063bbbc6 mov       0x90(%rsp),%rcx
063bbbce mov       %rcx,0x1E0(%rsp)
063bbbd6 mov       %rax,0x1E8(%rsp)
063bbbde lea       0x1E0(%rsp),%rcx
063bbbe6 call      0x0000`0000`063B`8F80
063bbbeb mov       %rax,0x1F0(%rsp)
063bbbf3 mov       0x1F0(%rsp),%rax
063bbbfb test      %rax,%rax
063bbbfe setne     %al
063bbc01 movzbl    %al,%eax
063bbc04 je        0x0000`0000`063B`B9E1
063bbc0a jmp       0x0000`0000`063B`BC0C
063bbc0c jmp       0x0000`0000`063B`BC10
063bbc0e ud2
063bbc10 mov       0x120(%rsp),%edx
063bbc17 mov       0x1F0(%rsp),%rax
063bbc1f mov       %rax,0x80(%rsp)
063bbc27 mov       %rax,0x228(%rsp)
063bbc2f mov       0x134(%rsp),%eax
063bbc36 mov       %eax,0x88(%rsp)
063bbc3d mov       0x130(%rsp),%ecx
063bbc44 call      0x0000`0000`063C`8870
063bbc49 mov       %eax,0x8C(%rsp)
063bbc50 mov       0x8C(%rsp),%edx
063bbc57 mov       0x88(%rsp),%ecx
063bbc5e call      0x0000`0000`063C`8720
063bbc63 mov       %eax,0x1FC(%rsp)
063bbc6a mov       0x120(%rsp),%edx
063bbc71 mov       0x130(%rsp),%ecx
063bbc78 call      0x0000`0000`063C`87C0
063bbc7d mov       %eax,0x7C(%rsp)
063bbc81 mov       0x7C(%rsp),%eax
063bbc85 mov       %eax,0x130(%rsp)
063bbc8c lea       0x1FC(%rsp),%rcx
063bbc94 call      0x0000`0000`063C`8A40
063bbc99 mov       %al,0x7B(%rsp)
063bbc9d mov       0x7B(%rsp),%cl
063bbca1 call      0x0000`0000`063C`8C30
063bbca6 mov       %al,0x7A(%rsp)
063bbcaa mov       0x80(%rsp),%rax
063bbcb2 mov       0x7A(%rsp),%cl
063bbcb6 mov       %rax,0x258(%rsp)
063bbcbe mov       %cl,0x263(%rsp)
063bbcc5 mov       %cl,0x265(%rsp)
063bbccc mov       %cl,0x267(%rsp)
063bbcd3 mov       %cl,0x266(%rsp)
063bbcda mov       0x266(%rsp),%cl
063bbce1 mov       %cl,0x264(%rsp)
063bbce8 mov       0x264(%rsp),%cl
063bbcef mov       %cl,(%rax)
063bbcf1 mov       %rax,0x288(%rsp)
063bbcf9 mov       %rax,0x290(%rsp)
063bbd01 mov       0x1B8(%rsp),%rax
063bbd09 sub       $1,%rax
063bbd0d mov       %rax,0x70(%rsp)
063bbd12 setb      %al
063bbd15 test      $1,%al
063bbd17 jne       0x0000`0000`063B`BD41
063bbd19 mov       0x70(%rsp),%rax
063bbd1e mov       %rax,0x1B8(%rsp)
063bbd26 lea       0x130(%rsp),%rcx
063bbd2e lea       0x134(%rsp),%rdx
063bbd36 call      0x0000`0000`063C`85B0
063bbd3b mov       %al,0x6F(%rsp)
063bbd3f jmp       0x0000`0000`063B`BD5B
063bbd41 lea       0x63C`F3B0,%rcx
063bbd48 lea       0x63D`0500,%r8
063bbd4f mov       $0x21,%edx
063bbd54 call      0x0000`0000`063B`9FF0
063bbd59 ud2
063bbd5b mov       0x6F(%rsp),%al
063bbd5f test      $1,%al
063bbd61 jne       0x0000`0000`063B`B9E1
063bbd67 jmp       0x0000`0000`063B`BBDE
063bbd6c mov       0xD8(%rsp),%rdx
063bbd74 mov       0xD0(%rsp),%rcx
063bbd7c mov       %rcx,0x230(%rsp)
063bbd84 mov       %rdx,0x238(%rsp)
063bbd8c mov       %rcx,0x298(%rsp)
063bbd94 mov       %rdx,0x2A0(%rsp)
063bbd9c call      0x0000`0000`063C`3DC0
063bbda1 mov       %rax,0x60(%rsp)
063bbda6 mov       0xD8(%rsp),%rdx
063bbdae mov       0x60(%rsp),%rcx
063bbdb3 call      0x0000`0000`063C`36A0
063bbdb8 mov       %rax,0x50(%rsp)
063bbdbd mov       %rdx,0x58(%rsp)
063bbdc2 mov       0x58(%rsp),%rdx
063bbdc7 mov       0x50(%rsp),%rcx
063bbdcc call      0x0000`0000`063C`5130
063bbdd1 mov       %rax,0x40(%rsp)
063bbdd6 mov       %rdx,0x48(%rsp)
063bbddb mov       %rax,0x240(%rsp)
063bbde3 mov       %rdx,0x248(%rsp)
063bbdeb mov       0x128(%rsp),%rcx
063bbdf3 mov       0x127(%rsp),%dl
063bbdfa mov       0x40(%rsp),%r8
063bbdff mov       0x48(%rsp),%r9
063bbe04 mov       %rsp,%rax
063bbe07 mov       %r9,0x28(%rax)
063bbe0b mov       %r8,0x20(%rax)
063bbe0f and       $1,%dl
063bbe12 lea       0x63D`0530,%r8
063bbe19 mov       $2,%r9d
063bbe1f call      0x0000`0000`063B`FB90
063bbe24 mov       %al,0x3F(%rsp)
063bbe28 mov       0x3F(%rsp),%al
063bbe2c and       $1,%al
063bbe2e movzbl    %al,%eax
063bbe31 add       $0x2A8,%rsp
063bbe38 ret

core::fmt::num::GenericRadix::fmt_int<core::fmt::num::UpperHex,usize>:
063bbe40 sub       $0x2D8,%rsp
063bbe47 mov       %r8,0x148(%rsp)
063bbe4f mov       %rdx,0x150(%rsp)
063bbe57 mov       %rcx,0x230(%rsp)
063bbe5f mov       %r8,0x238(%rsp)
063bbe67 call      0x0000`0000`063C`8A60
063bbe6c mov       %rax,0x158(%rsp)
063bbe74 lea       0x150(%rsp),%rcx
063bbe7c lea       0x158(%rsp),%rdx
063bbe84 call      0x0000`0000`063C`85F0
063bbe89 mov       %al,0x147(%rsp)
063bbe90 and       $1,%al
063bbe92 mov       %al,0x247(%rsp)
063bbe99 mov       0x287(%rsp),%al
063bbea0 mov       %al,0x146(%rsp)
063bbea7 mov       0x146(%rsp),%dl
063bbeae lea       0x160(%rsp),%rcx
063bbeb6 mov       $0x80,%r8d
063bbebc call      0x0000`0000`063C`BCC0
063bbec1 movq      $0x80,0x1E0(%rsp)
063bbecd mov       $0x10,%ecx
063bbed2 call      0x0000`0000`063C`8A70
063bbed7 mov       %rax,0x138(%rsp)
063bbedf mov       %rax,0x248(%rsp)
063bbee7 mov       0x147(%rsp),%al
063bbeee test      $1,%al
063bbef0 jne       0x0000`0000`063B`BF1B
063bbef2 jmp       0x0000`0000`063B`BEF4
063bbef4 lea       0x160(%rsp),%rcx
063bbefc mov       $0x80,%edx
063bbf01 call      0x0000`0000`063C`3F80
063bbf06 mov       %rax,0x128(%rsp)
063bbf0e mov       %rdx,0x130(%rsp)
063bbf16 jmp       0x0000`0000`063B`C170
063bbf1b lea       0x160(%rsp),%rcx
063bbf23 mov       $0x80,%edx
063bbf28 call      0x0000`0000`063C`3F80
063bbf2d mov       %rax,0x118(%rsp)
063bbf35 mov       %rdx,0x120(%rsp)
063bbf3d mov       0x120(%rsp),%rdx
063bbf45 mov       0x118(%rsp),%rcx
063bbf4d call      0x0000`0000`063B`9470
063bbf52 mov       %rax,0x108(%rsp)
063bbf5a mov       %rdx,0x110(%rsp)
063bbf62 mov       0x110(%rsp),%rdx
063bbf6a mov       0x108(%rsp),%rcx
063bbf72 call      0x0000`0000`063B`90D0
063bbf77 mov       %rax,0xF8(%rsp)
063bbf7f mov       %rdx,0x100(%rsp)
063bbf87 mov       0x100(%rsp),%rax
063bbf8f mov       0xF8(%rsp),%rcx
063bbf97 mov       %rcx,0x1E8(%rsp)
063bbf9f mov       %rax,0x1F0(%rsp)
063bbfa7 lea       0x1E8(%rsp),%rcx
063bbfaf call      0x0000`0000`063B`8F80
063bbfb4 mov       %rax,0x1F8(%rsp)
063bbfbc mov       0x1F8(%rsp),%rax
063bbfc4 test      %rax,%rax
063bbfc7 setne     %al
063bbfca movzbl    %al,%eax
063bbfcd je        0x0000`0000`063B`BFD5
063bbfcf jmp       0x0000`0000`063B`BFD1
063bbfd1 jmp       0x0000`0000`063B`C016
063bbfd3 ud2
063bbfd5 mov       0x1E0(%rsp),%rax
063bbfdd mov       %rax,0x228(%rsp)
063bbfe5 mov       0x228(%rsp),%rdx
063bbfed lea       0x160(%rsp),%rcx
063bbff5 lea       0x63D`0518,%r8
063bbffc call      0x0000`0000`063B`7C90
063bc001 mov       %rax,0xE8(%rsp)
063bc009 mov       %rdx,0xF0(%rsp)
063bc011 jmp       0x0000`0000`063B`C37B
063bc016 mov       0x138(%rsp),%rdx
063bc01e mov       0x1F8(%rsp),%rax
063bc026 mov       %rax,0xE0(%rsp)
063bc02e mov       %rax,0x250(%rsp)
063bc036 mov       0x150(%rsp),%rcx
063bc03e call      0x0000`0000`063C`8810
063bc043 mov       %rax,0x200(%rsp)
063bc04b mov       0x138(%rsp),%rdx
063bc053 mov       0x150(%rsp),%rcx
063bc05b call      0x0000`0000`063C`8760
063bc060 mov       %rax,0xD8(%rsp)
063bc068 mov       0xD8(%rsp),%rax
063bc070 mov       %rax,0x150(%rsp)
063bc078 lea       0x200(%rsp),%rcx
063bc080 call      0x0000`0000`063C`8A80
063bc085 mov       %al,0xD7(%rsp)
063bc08c mov       0xD7(%rsp),%cl
063bc093 call      0x0000`0000`063C`8C30
063bc098 mov       %al,0xD6(%rsp)
063bc09f mov       0xE0(%rsp),%rax
063bc0a7 mov       0xD6(%rsp),%cl
063bc0ae mov       %rax,0x298(%rsp)
063bc0b6 mov       %cl,0x2A3(%rsp)
063bc0bd mov       %cl,0x2A5(%rsp)
063bc0c4 mov       %cl,0x2A7(%rsp)
063bc0cb mov       %cl,0x2A6(%rsp)
063bc0d2 mov       0x2A6(%rsp),%cl
063bc0d9 mov       %cl,0x2A4(%rsp)
063bc0e0 mov       0x2A4(%rsp),%cl
063bc0e7 mov       %cl,(%rax)
063bc0e9 mov       %rax,0x2A8(%rsp)
063bc0f1 mov       %rax,0x2B0(%rsp)
063bc0f9 mov       0x1E0(%rsp),%rax
063bc101 sub       $1,%rax
063bc105 mov       %rax,0xC8(%rsp)
063bc10d setb      %al
063bc110 test      $1,%al
063bc112 jne       0x0000`0000`063B`C142
063bc114 mov       0xC8(%rsp),%rax
063bc11c mov       %rax,0x1E0(%rsp)
063bc124 lea       0x150(%rsp),%rcx
063bc12c lea       0x158(%rsp),%rdx
063bc134 call      0x0000`0000`063C`8590
063bc139 mov       %al,0xC7(%rsp)
063bc140 jmp       0x0000`0000`063B`C15C
063bc142 lea       0x63C`F3B0,%rcx
063bc149 lea       0x63D`04E8,%r8
063bc150 mov       $0x21,%edx
063bc155 call      0x0000`0000`063B`9FF0
063bc15a ud2
063bc15c mov       0xC7(%rsp),%al
063bc163 test      $1,%al
063bc165 jne       0x0000`0000`063B`BFD5
063bc16b jmp       0x0000`0000`063B`BFA7
063bc170 mov       0x130(%rsp),%rdx
063bc178 mov       0x128(%rsp),%rcx
063bc180 call      0x0000`0000`063B`9470
063bc185 mov       %rax,0xB0(%rsp)
063bc18d mov       %rdx,0xB8(%rsp)
063bc195 mov       0xB8(%rsp),%rdx
063bc19d mov       0xB0(%rsp),%rcx
063bc1a5 call      0x0000`0000`063B`90D0
063bc1aa mov       %rax,0xA0(%rsp)
063bc1b2 mov       %rdx,0xA8(%rsp)
063bc1ba mov       0xA8(%rsp),%rax
063bc1c2 mov       0xA0(%rsp),%rcx
063bc1ca mov       %rcx,0x208(%rsp)
063bc1d2 mov       %rax,0x210(%rsp)
063bc1da lea       0x208(%rsp),%rcx
063bc1e2 call      0x0000`0000`063B`8F80
063bc1e7 mov       %rax,0x218(%rsp)
063bc1ef mov       0x218(%rsp),%rax
063bc1f7 test      %rax,%rax
063bc1fa setne     %al
063bc1fd movzbl    %al,%eax
063bc200 je        0x0000`0000`063B`BFD5
063bc206 jmp       0x0000`0000`063B`C208
063bc208 jmp       0x0000`0000`063B`C20C
063bc20a ud2
063bc20c mov       0x138(%rsp),%rdx
063bc214 mov       0x218(%rsp),%rax
063bc21c mov       %rax,0x88(%rsp)
063bc224 mov       %rax,0x258(%rsp)
063bc22c mov       0x158(%rsp),%rax
063bc234 mov       %rax,0x90(%rsp)
063bc23c mov       0x150(%rsp),%rcx
063bc244 call      0x0000`0000`063C`8810
063bc249 mov       %rax,0x98(%rsp)
063bc251 mov       0x98(%rsp),%rdx
063bc259 mov       0x90(%rsp),%rcx
063bc261 call      0x0000`0000`063C`86D0
063bc266 mov       %rax,0x220(%rsp)
063bc26e mov       0x138(%rsp),%rdx
063bc276 mov       0x150(%rsp),%rcx
063bc27e call      0x0000`0000`063C`8760
063bc283 mov       %rax,0x80(%rsp)
063bc28b mov       0x80(%rsp),%rax
063bc293 mov       %rax,0x150(%rsp)
063bc29b lea       0x220(%rsp),%rcx
063bc2a3 call      0x0000`0000`063C`8A80
063bc2a8 mov       %al,0x7F(%rsp)
063bc2ac mov       0x7F(%rsp),%cl
063bc2b0 call      0x0000`0000`063C`8C30
063bc2b5 mov       %al,0x7E(%rsp)
063bc2b9 mov       0x88(%rsp),%rax
063bc2c1 mov       0x7E(%rsp),%cl
063bc2c5 mov       %rax,0x288(%rsp)
063bc2cd mov       %cl,0x293(%rsp)
063bc2d4 mov       %cl,0x295(%rsp)
063bc2db mov       %cl,0x297(%rsp)
063bc2e2 mov       %cl,0x296(%rsp)
063bc2e9 mov       0x296(%rsp),%cl
063bc2f0 mov       %cl,0x294(%rsp)
063bc2f7 mov       0x294(%rsp),%cl
063bc2fe mov       %cl,(%rax)
063bc300 mov       %rax,0x2B8(%rsp)
063bc308 mov       %rax,0x2C0(%rsp)
063bc310 mov       0x1E0(%rsp),%rax
063bc318 sub       $1,%rax
063bc31c mov       %rax,0x70(%rsp)
063bc321 setb      %al
063bc324 test      $1,%al
063bc326 jne       0x0000`0000`063B`C350
063bc328 mov       0x70(%rsp),%rax
063bc32d mov       %rax,0x1E0(%rsp)
063bc335 lea       0x150(%rsp),%rcx
063bc33d lea       0x158(%rsp),%rdx
063bc345 call      0x0000`0000`063C`8590
063bc34a mov       %al,0x6F(%rsp)
063bc34e jmp       0x0000`0000`063B`C36A
063bc350 lea       0x63C`F3B0,%rcx
063bc357 lea       0x63D`0500,%r8
063bc35e mov       $0x21,%edx
063bc363 call      0x0000`0000`063B`9FF0
063bc368 ud2
063bc36a mov       0x6F(%rsp),%al
063bc36e test      $1,%al
063bc370 jne       0x0000`0000`063B`BFD5
063bc376 jmp       0x0000`0000`063B`C1DA
063bc37b mov       0xF0(%rsp),%rdx
063bc383 mov       0xE8(%rsp),%rcx
063bc38b mov       %rcx,0x260(%rsp)
063bc393 mov       %rdx,0x268(%rsp)
063bc39b mov       %rcx,0x2C8(%rsp)
063bc3a3 mov       %rdx,0x2D0(%rsp)
063bc3ab call      0x0000`0000`063C`3DC0
063bc3b0 mov       %rax,0x60(%rsp)
063bc3b5 mov       0xF0(%rsp),%rdx
063bc3bd mov       0x60(%rsp),%rcx
063bc3c2 call      0x0000`0000`063C`36A0
063bc3c7 mov       %rax,0x50(%rsp)
063bc3cc mov       %rdx,0x58(%rsp)
063bc3d1 mov       0x58(%rsp),%rdx
063bc3d6 mov       0x50(%rsp),%rcx
063bc3db call      0x0000`0000`063C`5130
063bc3e0 mov       %rax,0x40(%rsp)
063bc3e5 mov       %rdx,0x48(%rsp)
063bc3ea mov       %rax,0x270(%rsp)
063bc3f2 mov       %rdx,0x278(%rsp)
063bc3fa mov       0x148(%rsp),%rcx
063bc402 mov       0x147(%rsp),%dl
063bc409 mov       0x40(%rsp),%r8
063bc40e mov       0x48(%rsp),%r9
063bc413 mov       %rsp,%rax
063bc416 mov       %r9,0x28(%rax)
063bc41a mov       %r8,0x20(%rax)
063bc41e and       $1,%dl
063bc421 lea       0x63D`0530,%r8
063bc428 mov       $2,%r9d
063bc42e call      0x0000`0000`063B`FB90
063bc433 mov       %al,0x3F(%rsp)
063bc437 mov       0x3F(%rsp),%al
063bc43b and       $1,%al
063bc43d movzbl    %al,%eax
063bc440 add       $0x2D8,%rsp
063bc447 ret

core::fmt::num::GenericRadix::fmt_int<core::fmt::num::LowerHex,usize>:
063bc450 sub       $0x2D8,%rsp
063bc457 mov       %r8,0x148(%rsp)
063bc45f mov       %rdx,0x150(%rsp)
063bc467 mov       %rcx,0x230(%rsp)
063bc46f mov       %r8,0x238(%rsp)
063bc477 call      0x0000`0000`063C`8A60
063bc47c mov       %rax,0x158(%rsp)
063bc484 lea       0x150(%rsp),%rcx
063bc48c lea       0x158(%rsp),%rdx
063bc494 call      0x0000`0000`063C`85F0
063bc499 mov       %al,0x147(%rsp)
063bc4a0 and       $1,%al
063bc4a2 mov       %al,0x247(%rsp)
063bc4a9 mov       0x287(%rsp),%al
063bc4b0 mov       %al,0x146(%rsp)
063bc4b7 mov       0x146(%rsp),%dl
063bc4be lea       0x160(%rsp),%rcx
063bc4c6 mov       $0x80,%r8d
063bc4cc call      0x0000`0000`063C`BCC0
063bc4d1 movq      $0x80,0x1E0(%rsp)
063bc4dd mov       $0x10,%ecx
063bc4e2 call      0x0000`0000`063C`8A70
063bc4e7 mov       %rax,0x138(%rsp)
063bc4ef mov       %rax,0x248(%rsp)
063bc4f7 mov       0x147(%rsp),%al
063bc4fe test      $1,%al
063bc500 jne       0x0000`0000`063B`C52B
063bc502 jmp       0x0000`0000`063B`C504
063bc504 lea       0x160(%rsp),%rcx
063bc50c mov       $0x80,%edx
063bc511 call      0x0000`0000`063C`3F80
063bc516 mov       %rax,0x128(%rsp)
063bc51e mov       %rdx,0x130(%rsp)
063bc526 jmp       0x0000`0000`063B`C780
063bc52b lea       0x160(%rsp),%rcx
063bc533 mov       $0x80,%edx
063bc538 call      0x0000`0000`063C`3F80
063bc53d mov       %rax,0x118(%rsp)
063bc545 mov       %rdx,0x120(%rsp)
063bc54d mov       0x120(%rsp),%rdx
063bc555 mov       0x118(%rsp),%rcx
063bc55d call      0x0000`0000`063B`9470
063bc562 mov       %rax,0x108(%rsp)
063bc56a mov       %rdx,0x110(%rsp)
063bc572 mov       0x110(%rsp),%rdx
063bc57a mov       0x108(%rsp),%rcx
063bc582 call      0x0000`0000`063B`90D0
063bc587 mov       %rax,0xF8(%rsp)
063bc58f mov       %rdx,0x100(%rsp)
063bc597 mov       0x100(%rsp),%rax
063bc59f mov       0xF8(%rsp),%rcx
063bc5a7 mov       %rcx,0x1E8(%rsp)
063bc5af mov       %rax,0x1F0(%rsp)
063bc5b7 lea       0x1E8(%rsp),%rcx
063bc5bf call      0x0000`0000`063B`8F80
063bc5c4 mov       %rax,0x1F8(%rsp)
063bc5cc mov       0x1F8(%rsp),%rax
063bc5d4 test      %rax,%rax
063bc5d7 setne     %al
063bc5da movzbl    %al,%eax
063bc5dd je        0x0000`0000`063B`C5E5
063bc5df jmp       0x0000`0000`063B`C5E1
063bc5e1 jmp       0x0000`0000`063B`C626
063bc5e3 ud2
063bc5e5 mov       0x1E0(%rsp),%rax
063bc5ed mov       %rax,0x228(%rsp)
063bc5f5 mov       0x228(%rsp),%rdx
063bc5fd lea       0x160(%rsp),%rcx
063bc605 lea       0x63D`0518,%r8
063bc60c call      0x0000`0000`063B`7C90
063bc611 mov       %rax,0xE8(%rsp)
063bc619 mov       %rdx,0xF0(%rsp)
063bc621 jmp       0x0000`0000`063B`C98B
063bc626 mov       0x138(%rsp),%rdx
063bc62e mov       0x1F8(%rsp),%rax
063bc636 mov       %rax,0xE0(%rsp)
063bc63e mov       %rax,0x250(%rsp)
063bc646 mov       0x150(%rsp),%rcx
063bc64e call      0x0000`0000`063C`8810
063bc653 mov       %rax,0x200(%rsp)
063bc65b mov       0x138(%rsp),%rdx
063bc663 mov       0x150(%rsp),%rcx
063bc66b call      0x0000`0000`063C`8760
063bc670 mov       %rax,0xD8(%rsp)
063bc678 mov       0xD8(%rsp),%rax
063bc680 mov       %rax,0x150(%rsp)
063bc688 lea       0x200(%rsp),%rcx
063bc690 call      0x0000`0000`063C`8A80
063bc695 mov       %al,0xD7(%rsp)
063bc69c mov       0xD7(%rsp),%cl
063bc6a3 call      0x0000`0000`063C`8AA0
063bc6a8 mov       %al,0xD6(%rsp)
063bc6af mov       0xE0(%rsp),%rax
063bc6b7 mov       0xD6(%rsp),%cl
063bc6be mov       %rax,0x298(%rsp)
063bc6c6 mov       %cl,0x2A3(%rsp)
063bc6cd mov       %cl,0x2A5(%rsp)
063bc6d4 mov       %cl,0x2A7(%rsp)
063bc6db mov       %cl,0x2A6(%rsp)
063bc6e2 mov       0x2A6(%rsp),%cl
063bc6e9 mov       %cl,0x2A4(%rsp)
063bc6f0 mov       0x2A4(%rsp),%cl
063bc6f7 mov       %cl,(%rax)
063bc6f9 mov       %rax,0x2A8(%rsp)
063bc701 mov       %rax,0x2B0(%rsp)
063bc709 mov       0x1E0(%rsp),%rax
063bc711 sub       $1,%rax
063bc715 mov       %rax,0xC8(%rsp)
063bc71d setb      %al
063bc720 test      $1,%al
063bc722 jne       0x0000`0000`063B`C752
063bc724 mov       0xC8(%rsp),%rax
063bc72c mov       %rax,0x1E0(%rsp)
063bc734 lea       0x150(%rsp),%rcx
063bc73c lea       0x158(%rsp),%rdx
063bc744 call      0x0000`0000`063C`8590
063bc749 mov       %al,0xC7(%rsp)
063bc750 jmp       0x0000`0000`063B`C76C
063bc752 lea       0x63C`F3B0,%rcx
063bc759 lea       0x63D`04E8,%r8
063bc760 mov       $0x21,%edx
063bc765 call      0x0000`0000`063B`9FF0
063bc76a ud2
063bc76c mov       0xC7(%rsp),%al
063bc773 test      $1,%al
063bc775 jne       0x0000`0000`063B`C5E5
063bc77b jmp       0x0000`0000`063B`C5B7
063bc780 mov       0x130(%rsp),%rdx
063bc788 mov       0x128(%rsp),%rcx
063bc790 call      0x0000`0000`063B`9470
063bc795 mov       %rax,0xB0(%rsp)
063bc79d mov       %rdx,0xB8(%rsp)
063bc7a5 mov       0xB8(%rsp),%rdx
063bc7ad mov       0xB0(%rsp),%rcx
063bc7b5 call      0x0000`0000`063B`90D0
063bc7ba mov       %rax,0xA0(%rsp)
063bc7c2 mov       %rdx,0xA8(%rsp)
063bc7ca mov       0xA8(%rsp),%rax
063bc7d2 mov       0xA0(%rsp),%rcx
063bc7da mov       %rcx,0x208(%rsp)
063bc7e2 mov       %rax,0x210(%rsp)
063bc7ea lea       0x208(%rsp),%rcx
063bc7f2 call      0x0000`0000`063B`8F80
063bc7f7 mov       %rax,0x218(%rsp)
063bc7ff mov       0x218(%rsp),%rax
063bc807 test      %rax,%rax
063bc80a setne     %al
063bc80d movzbl    %al,%eax
063bc810 je        0x0000`0000`063B`C5E5
063bc816 jmp       0x0000`0000`063B`C818
063bc818 jmp       0x0000`0000`063B`C81C
063bc81a ud2
063bc81c mov       0x138(%rsp),%rdx
063bc824 mov       0x218(%rsp),%rax
063bc82c mov       %rax,0x88(%rsp)
063bc834 mov       %rax,0x258(%rsp)
063bc83c mov       0x158(%rsp),%rax
063bc844 mov       %rax,0x90(%rsp)
063bc84c mov       0x150(%rsp),%rcx
063bc854 call      0x0000`0000`063C`8810
063bc859 mov       %rax,0x98(%rsp)
063bc861 mov       0x98(%rsp),%rdx
063bc869 mov       0x90(%rsp),%rcx
063bc871 call      0x0000`0000`063C`86D0
063bc876 mov       %rax,0x220(%rsp)
063bc87e mov       0x138(%rsp),%rdx
063bc886 mov       0x150(%rsp),%rcx
063bc88e call      0x0000`0000`063C`8760
063bc893 mov       %rax,0x80(%rsp)
063bc89b mov       0x80(%rsp),%rax
063bc8a3 mov       %rax,0x150(%rsp)
063bc8ab lea       0x220(%rsp),%rcx
063bc8b3 call      0x0000`0000`063C`8A80
063bc8b8 mov       %al,0x7F(%rsp)
063bc8bc mov       0x7F(%rsp),%cl
063bc8c0 call      0x0000`0000`063C`8AA0
063bc8c5 mov       %al,0x7E(%rsp)
063bc8c9 mov       0x88(%rsp),%rax
063bc8d1 mov       0x7E(%rsp),%cl
063bc8d5 mov       %rax,0x288(%rsp)
063bc8dd mov       %cl,0x293(%rsp)
063bc8e4 mov       %cl,0x295(%rsp)
063bc8eb mov       %cl,0x297(%rsp)
063bc8f2 mov       %cl,0x296(%rsp)
063bc8f9 mov       0x296(%rsp),%cl
063bc900 mov       %cl,0x294(%rsp)
063bc907 mov       0x294(%rsp),%cl
063bc90e mov       %cl,(%rax)
063bc910 mov       %rax,0x2B8(%rsp)
063bc918 mov       %rax,0x2C0(%rsp)
063bc920 mov       0x1E0(%rsp),%rax
063bc928 sub       $1,%rax
063bc92c mov       %rax,0x70(%rsp)
063bc931 setb      %al
063bc934 test      $1,%al
063bc936 jne       0x0000`0000`063B`C960
063bc938 mov       0x70(%rsp),%rax
063bc93d mov       %rax,0x1E0(%rsp)
063bc945 lea       0x150(%rsp),%rcx
063bc94d lea       0x158(%rsp),%rdx
063bc955 call      0x0000`0000`063C`8590
063bc95a mov       %al,0x6F(%rsp)
063bc95e jmp       0x0000`0000`063B`C97A
063bc960 lea       0x63C`F3B0,%rcx
063bc967 lea       0x63D`0500,%r8
063bc96e mov       $0x21,%edx
063bc973 call      0x0000`0000`063B`9FF0
063bc978 ud2
063bc97a mov       0x6F(%rsp),%al
063bc97e test      $1,%al
063bc980 jne       0x0000`0000`063B`C5E5
063bc986 jmp       0x0000`0000`063B`C7EA
063bc98b mov       0xF0(%rsp),%rdx
063bc993 mov       0xE8(%rsp),%rcx
063bc99b mov       %rcx,0x260(%rsp)
063bc9a3 mov       %rdx,0x268(%rsp)
063bc9ab mov       %rcx,0x2C8(%rsp)
063bc9b3 mov       %rdx,0x2D0(%rsp)
063bc9bb call      0x0000`0000`063C`3DC0
063bc9c0 mov       %rax,0x60(%rsp)
063bc9c5 mov       0xF0(%rsp),%rdx
063bc9cd mov       0x60(%rsp),%rcx
063bc9d2 call      0x0000`0000`063C`36A0
063bc9d7 mov       %rax,0x50(%rsp)
063bc9dc mov       %rdx,0x58(%rsp)
063bc9e1 mov       0x58(%rsp),%rdx
063bc9e6 mov       0x50(%rsp),%rcx
063bc9eb call      0x0000`0000`063C`5130
063bc9f0 mov       %rax,0x40(%rsp)
063bc9f5 mov       %rdx,0x48(%rsp)
063bc9fa mov       %rax,0x270(%rsp)
063bca02 mov       %rdx,0x278(%rsp)
063bca0a mov       0x148(%rsp),%rcx
063bca12 mov       0x147(%rsp),%dl
063bca19 mov       0x40(%rsp),%r8
063bca1e mov       0x48(%rsp),%r9
063bca23 mov       %rsp,%rax
063bca26 mov       %r9,0x28(%rax)
063bca2a mov       %r8,0x20(%rax)
063bca2e and       $1,%dl
063bca31 lea       0x63D`0530,%r8
063bca38 mov       $2,%r9d
063bca3e call      0x0000`0000`063B`FB90
063bca43 mov       %al,0x3F(%rsp)
063bca47 mov       0x3F(%rsp),%al
063bca4b and       $1,%al
063bca4d movzbl    %al,%eax
063bca50 add       $0x2D8,%rsp
063bca57 ret

core::fmt::num::parse_u64_into<39>:
063bca60 sub       $0x658,%rsp
063bca67 mov       %r8,0x268(%rsp)
063bca6f mov       %rdx,0x270(%rsp)
063bca77 mov       %rcx,%rax
063bca7a mov       0x270(%rsp),%rcx
063bca82 mov       %rax,0x280(%rsp)
063bca8a mov       %rcx,0x290(%rsp)
063bca92 mov       %r8,0x298(%rsp)
063bca9a mov       %rcx,0x330(%rsp)
063bcaa2 movq      $0x27,0x338(%rsp)
063bcaae mov       $0x27,%edx
063bcab3 call      0x0000`0000`063C`3E40
063bcab8 mov       %rax,0x278(%rsp)
063bcac0 mov       %rax,0x2A0(%rsp)
063bcac8 mov       0x63D`0600,%rcx
063bcacf mov       $0xC8,%edx
063bcad4 call      0x0000`0000`063C`3DA0
063bcad9 mov       %rax,0x260(%rsp)
063bcae1 mov       %rax,0x2A8(%rsp)
063bcae9 mov       0x268(%rsp),%rax
063bcaf1 cmpq      $0x13,(%rax)
063bcaf5 setg      %al
063bcaf8 xor       $0xFF,%al
063bcafa test      $1,%al
063bcafc jne       0x0000`0000`063B`CB14
063bcafe movabs    $0x23`86F2`6FC1`0000,%rax
063bcb08 cmp       %rax,0x280(%rsp)
063bcb10 jae       0x0000`0000`063B`CB45
063bcb12 jmp       0x0000`0000`063B`CB2E
063bcb14 lea       0x63D`0608,%rcx
063bcb1b lea       0x63D`0628,%r8
063bcb22 mov       $0x1C,%edx
063bcb27 call      0x0000`0000`063B`9FF0
063bcb2c ud2
063bcb2e cmpq      $0x5F5`E100,0x280(%rsp)
063bcb3a jae       0x0000`0000`063B`D426
063bcb40 jmp       0x0000`0000`063B`D401
063bcb45 mov       0x280(%rsp),%rax
063bcb4d movabs    $0x23`86F2`6FC1`0000,%rcx
063bcb57 xor       %edx,%edx
063bcb59 div       %rcx
063bcb5c mov       %rdx,0x250(%rsp)
063bcb64 mov       %rdx,0x2B0(%rsp)
063bcb6c mov       0x280(%rsp),%rax
063bcb74 movabs    $0x23`86F2`6FC1`0000,%rcx
063bcb7e xor       %edx,%edx
063bcb80 div       %rcx
063bcb83 mov       %rax,%rcx
063bcb86 mov       0x250(%rsp),%rax
063bcb8e mov       %rcx,0x280(%rsp)
063bcb96 movabs    $0x5AF3`107A`4000,%rcx
063bcba0 xor       %edx,%edx
063bcba2 div       %rcx
063bcba5 mov       $0x64,%ecx
063bcbaa xor       %edx,%edx
063bcbac div       %rcx
063bcbaf shl       $1,%rdx
063bcbb3 mov       %rdx,0x258(%rsp)
063bcbbb mov       0x250(%rsp),%rax
063bcbc3 mov       0x258(%rsp),%rcx
063bcbcb mov       %rcx,0x2B8(%rsp)
063bcbd3 movabs    $0xE8`D4A5`1000,%rcx
063bcbdd xor       %edx,%edx
063bcbdf div       %rcx
063bcbe2 mov       $0x64,%ecx
063bcbe7 xor       %edx,%edx
063bcbe9 div       %rcx
063bcbec shl       $1,%rdx
063bcbf0 mov       %rdx,0x248(%rsp)
063bcbf8 mov       0x250(%rsp),%rax
063bcc00 mov       0x248(%rsp),%rcx
063bcc08 mov       %rcx,0x2C0(%rsp)
063bcc10 movabs    $0x2`540B`E400,%rcx
063bcc1a xor       %edx,%edx
063bcc1c div       %rcx
063bcc1f mov       $0x64,%ecx
063bcc24 xor       %edx,%edx
063bcc26 div       %rcx
063bcc29 shl       $1,%rdx
063bcc2d mov       %rdx,0x240(%rsp)
063bcc35 mov       0x250(%rsp),%rax
063bcc3d mov       0x240(%rsp),%rcx
063bcc45 mov       %rcx,0x2C8(%rsp)
063bcc4d mov       $0x5F5`E100,%ecx
063bcc52 xor       %edx,%edx
063bcc54 div       %rcx
063bcc57 mov       $0x64,%ecx
063bcc5c xor       %edx,%edx
063bcc5e div       %rcx
063bcc61 shl       $1,%rdx
063bcc65 mov       %rdx,0x238(%rsp)
063bcc6d mov       0x250(%rsp),%rax
063bcc75 mov       0x238(%rsp),%rcx
063bcc7d mov       %rcx,0x2D0(%rsp)
063bcc85 mov       $0xF`4240,%ecx
063bcc8a xor       %edx,%edx
063bcc8c div       %rcx
063bcc8f mov       $0x64,%ecx
063bcc94 xor       %edx,%edx
063bcc96 div       %rcx
063bcc99 shl       $1,%rdx
063bcc9d mov       %rdx,0x230(%rsp)
063bcca5 mov       0x250(%rsp),%rax
063bccad mov       0x230(%rsp),%rcx
063bccb5 mov       %rcx,0x2D8(%rsp)
063bccbd mov       $0x2710,%ecx
063bccc2 xor       %edx,%edx
063bccc4 div       %rcx
063bccc7 mov       $0x64,%ecx
063bcccc xor       %edx,%edx
063bccce div       %rcx
063bccd1 shl       $1,%rdx
063bccd5 mov       %rdx,0x228(%rsp)
063bccdd mov       0x250(%rsp),%rax
063bcce5 mov       0x228(%rsp),%rcx
063bcced mov       %rcx,0x2E0(%rsp)
063bccf5 mov       $0x64,%ecx
063bccfa xor       %edx,%edx
063bccfc div       %rcx
063bccff mov       $0x64,%ecx
063bcd04 xor       %edx,%edx
063bcd06 div       %rcx
063bcd09 shl       $1,%rdx
063bcd0d mov       %rdx,0x220(%rsp)
063bcd15 mov       0x250(%rsp),%rax
063bcd1d mov       0x220(%rsp),%rcx
063bcd25 mov       %rcx,0x2E8(%rsp)
063bcd2d shr       $0,%rax
063bcd31 mov       $0x64,%ecx
063bcd36 xor       %edx,%edx
063bcd38 div       %rcx
063bcd3b shl       $1,%rdx
063bcd3f mov       %rdx,0x218(%rsp)
063bcd47 mov       0x268(%rsp),%rax
063bcd4f mov       0x218(%rsp),%rcx
063bcd57 mov       %rcx,0x2F0(%rsp)
063bcd5f mov       (%rax),%rax
063bcd62 sub       $0x10,%rax
063bcd66 mov       %rax,0x210(%rsp)
063bcd6e seto      %al
063bcd71 test      $1,%al
063bcd73 jne       0x0000`0000`063B`CDC5
063bcd75 mov       0x258(%rsp),%rcx
063bcd7d mov       0x260(%rsp),%rax
063bcd85 mov       0x268(%rsp),%rdx
063bcd8d mov       0x210(%rsp),%r8
063bcd95 mov       %r8,(%rdx)
063bcd98 mov       %rax,0x4A8(%rsp)
063bcda0 mov       %rcx,0x4B0(%rsp)
063bcda8 add       %rcx,%rax
063bcdab mov       %rax,0x4B8(%rsp)
063bcdb3 mov       0x4B8(%rsp),%rax
063bcdbb mov       %rax,0x208(%rsp)
063bcdc3 jmp       0x0000`0000`063B`CDDF
063bcdc5 lea       0x63C`F3B0,%rcx
063bcdcc lea       0x63D`0640,%r8
063bcdd3 mov       $0x21,%edx
063bcdd8 call      0x0000`0000`063B`9FF0
063bcddd ud2
063bcddf mov       0x268(%rsp),%rax
063bcde7 mov       (%rax),%rax
063bcdea add       $0,%rax
063bcdee mov       %rax,0x200(%rsp)
063bcdf6 seto      %al
063bcdf9 test      $1,%al
063bcdfb jne       0x0000`0000`063B`CE3A
063bcdfd mov       0x200(%rsp),%rcx
063bce05 mov       0x278(%rsp),%rax
063bce0d mov       %rax,0x640(%rsp)
063bce15 mov       %rcx,0x648(%rsp)
063bce1d add       %rcx,%rax
063bce20 mov       %rax,0x650(%rsp)
063bce28 mov       0x650(%rsp),%rax
063bce30 mov       %rax,0x1F8(%rsp)
063bce38 jmp       0x0000`0000`063B`CE54
063bce3a lea       0x63C`F3E0,%rcx
063bce41 lea       0x63D`0658,%r8
063bce48 mov       $0x1C,%edx
063bce4d call      0x0000`0000`063B`9FF0
063bce52 ud2
063bce54 mov       0x1F8(%rsp),%rdx
063bce5c mov       0x208(%rsp),%rcx
063bce64 mov       $2,%r8d
063bce6a call      0x0000`0000`063B`5B20
063bce6f mov       0x248(%rsp),%rcx
063bce77 mov       0x260(%rsp),%rax
063bce7f mov       %rax,0x490(%rsp)
063bce87 mov       %rcx,0x498(%rsp)
063bce8f add       %rcx,%rax
063bce92 mov       %rax,0x4A0(%rsp)
063bce9a mov       0x4A0(%rsp),%rax
063bcea2 mov       %rax,0x1F0(%rsp)
063bceaa mov       0x268(%rsp),%rax
063bceb2 mov       (%rax),%rax
063bceb5 add       $2,%rax
063bceb9 mov       %rax,0x1E8(%rsp)
063bcec1 seto      %al
063bcec4 test      $1,%al
063bcec6 jne       0x0000`0000`063B`CF05
063bcec8 mov       0x1E8(%rsp),%rcx
063bced0 mov       0x278(%rsp),%rax
063bced8 mov       %rax,0x628(%rsp)
063bcee0 mov       %rcx,0x630(%rsp)
063bcee8 add       %rcx,%rax
063bceeb mov       %rax,0x638(%rsp)
063bcef3 mov       0x638(%rsp),%rax
063bcefb mov       %rax,0x1E0(%rsp)
063bcf03 jmp       0x0000`0000`063B`CF1F
063bcf05 lea       0x63C`F3E0,%rcx
063bcf0c lea       0x63D`0670,%r8
063bcf13 mov       $0x1C,%edx
063bcf18 call      0x0000`0000`063B`9FF0
063bcf1d ud2
063bcf1f mov       0x1E0(%rsp),%rdx
063bcf27 mov       0x1F0(%rsp),%rcx
063bcf2f mov       $2,%r8d
063bcf35 call      0x0000`0000`063B`5B20
063bcf3a mov       0x240(%rsp),%rcx
063bcf42 mov       0x260(%rsp),%rax
063bcf4a mov       %rax,0x478(%rsp)
063bcf52 mov       %rcx,0x480(%rsp)
063bcf5a add       %rcx,%rax
063bcf5d mov       %rax,0x488(%rsp)
063bcf65 mov       0x488(%rsp),%rax
063bcf6d mov       %rax,0x1D8(%rsp)
063bcf75 mov       0x268(%rsp),%rax
063bcf7d mov       (%rax),%rax
063bcf80 add       $4,%rax
063bcf84 mov       %rax,0x1D0(%rsp)
063bcf8c seto      %al
063bcf8f test      $1,%al
063bcf91 jne       0x0000`0000`063B`CFD0
063bcf93 mov       0x1D0(%rsp),%rcx
063bcf9b mov       0x278(%rsp),%rax
063bcfa3 mov       %rax,0x610(%rsp)
063bcfab mov       %rcx,0x618(%rsp)
063bcfb3 add       %rcx,%rax
063bcfb6 mov       %rax,0x620(%rsp)
063bcfbe mov       0x620(%rsp),%rax
063bcfc6 mov       %rax,0x1C8(%rsp)
063bcfce jmp       0x0000`0000`063B`CFEA
063bcfd0 lea       0x63C`F3E0,%rcx
063bcfd7 lea       0x63D`0688,%r8
063bcfde mov       $0x1C,%edx
063bcfe3 call      0x0000`0000`063B`9FF0
063bcfe8 ud2
063bcfea mov       0x1C8(%rsp),%rdx
063bcff2 mov       0x1D8(%rsp),%rcx
063bcffa mov       $2,%r8d
063bd000 call      0x0000`0000`063B`5B20
063bd005 mov       0x238(%rsp),%rcx
063bd00d mov       0x260(%rsp),%rax
063bd015 mov       %rax,0x460(%rsp)
063bd01d mov       %rcx,0x468(%rsp)
063bd025 add       %rcx,%rax
063bd028 mov       %rax,0x470(%rsp)
063bd030 mov       0x470(%rsp),%rax
063bd038 mov       %rax,0x1C0(%rsp)
063bd040 mov       0x268(%rsp),%rax
063bd048 mov       (%rax),%rax
063bd04b add       $6,%rax
063bd04f mov       %rax,0x1B8(%rsp)
063bd057 seto      %al
063bd05a test      $1,%al
063bd05c jne       0x0000`0000`063B`D09B
063bd05e mov       0x1B8(%rsp),%rcx
063bd066 mov       0x278(%rsp),%rax
063bd06e mov       %rax,0x5F8(%rsp)
063bd076 mov       %rcx,0x600(%rsp)
063bd07e add       %rcx,%rax
063bd081 mov       %rax,0x608(%rsp)
063bd089 mov       0x608(%rsp),%rax
063bd091 mov       %rax,0x1B0(%rsp)
063bd099 jmp       0x0000`0000`063B`D0B5
063bd09b lea       0x63C`F3E0,%rcx
063bd0a2 lea       0x63D`06A0,%r8
063bd0a9 mov       $0x1C,%edx
063bd0ae call      0x0000`0000`063B`9FF0
063bd0b3 ud2
063bd0b5 mov       0x1B0(%rsp),%rdx
063bd0bd mov       0x1C0(%rsp),%rcx
063bd0c5 mov       $2,%r8d
063bd0cb call      0x0000`0000`063B`5B20
063bd0d0 mov       0x230(%rsp),%rcx
063bd0d8 mov       0x260(%rsp),%rax
063bd0e0 mov       %rax,0x448(%rsp)
063bd0e8 mov       %rcx,0x450(%rsp)
063bd0f0 add       %rcx,%rax
063bd0f3 mov       %rax,0x458(%rsp)
063bd0fb mov       0x458(%rsp),%rax
063bd103 mov       %rax,0x1A8(%rsp)
063bd10b mov       0x268(%rsp),%rax
063bd113 mov       (%rax),%rax
063bd116 add       $8,%rax
063bd11a mov       %rax,0x1A0(%rsp)
063bd122 seto      %al
063bd125 test      $1,%al
063bd127 jne       0x0000`0000`063B`D166
063bd129 mov       0x1A0(%rsp),%rcx
063bd131 mov       0x278(%rsp),%rax
063bd139 mov       %rax,0x5E0(%rsp)
063bd141 mov       %rcx,0x5E8(%rsp)
063bd149 add       %rcx,%rax
063bd14c mov       %rax,0x5F0(%rsp)
063bd154 mov       0x5F0(%rsp),%rax
063bd15c mov       %rax,0x198(%rsp)
063bd164 jmp       0x0000`0000`063B`D180
063bd166 lea       0x63C`F3E0,%rcx
063bd16d lea       0x63D`06B8,%r8
063bd174 mov       $0x1C,%edx
063bd179 call      0x0000`0000`063B`9FF0
063bd17e ud2
063bd180 mov       0x198(%rsp),%rdx
063bd188 mov       0x1A8(%rsp),%rcx
063bd190 mov       $2,%r8d
063bd196 call      0x0000`0000`063B`5B20
063bd19b mov       0x228(%rsp),%rcx
063bd1a3 mov       0x260(%rsp),%rax
063bd1ab mov       %rax,0x430(%rsp)
063bd1b3 mov       %rcx,0x438(%rsp)
063bd1bb add       %rcx,%rax
063bd1be mov       %rax,0x440(%rsp)
063bd1c6 mov       0x440(%rsp),%rax
063bd1ce mov       %rax,0x190(%rsp)
063bd1d6 mov       0x268(%rsp),%rax
063bd1de mov       (%rax),%rax
063bd1e1 add       $0xA,%rax
063bd1e5 mov       %rax,0x188(%rsp)
063bd1ed seto      %al
063bd1f0 test      $1,%al
063bd1f2 jne       0x0000`0000`063B`D231
063bd1f4 mov       0x188(%rsp),%rcx
063bd1fc mov       0x278(%rsp),%rax
063bd204 mov       %rax,0x5C8(%rsp)
063bd20c mov       %rcx,0x5D0(%rsp)
063bd214 add       %rcx,%rax
063bd217 mov       %rax,0x5D8(%rsp)
063bd21f mov       0x5D8(%rsp),%rax
063bd227 mov       %rax,0x180(%rsp)
063bd22f jmp       0x0000`0000`063B`D24B
063bd231 lea       0x63C`F3E0,%rcx
063bd238 lea       0x63D`06D0,%r8
063bd23f mov       $0x1C,%edx
063bd244 call      0x0000`0000`063B`9FF0
063bd249 ud2
063bd24b mov       0x180(%rsp),%rdx
063bd253 mov       0x190(%rsp),%rcx
063bd25b mov       $2,%r8d
063bd261 call      0x0000`0000`063B`5B20
063bd266 mov       0x220(%rsp),%rcx
063bd26e mov       0x260(%rsp),%rax
063bd276 mov       %rax,0x418(%rsp)
063bd27e mov       %rcx,0x420(%rsp)
063bd286 add       %rcx,%rax
063bd289 mov       %rax,0x428(%rsp)
063bd291 mov       0x428(%rsp),%rax
063bd299 mov       %rax,0x178(%rsp)
063bd2a1 mov       0x268(%rsp),%rax
063bd2a9 mov       (%rax),%rax
063bd2ac add       $0xC,%rax
063bd2b0 mov       %rax,0x170(%rsp)
063bd2b8 seto      %al
063bd2bb test      $1,%al
063bd2bd jne       0x0000`0000`063B`D2FC
063bd2bf mov       0x170(%rsp),%rcx
063bd2c7 mov       0x278(%rsp),%rax
063bd2cf mov       %rax,0x5B0(%rsp)
063bd2d7 mov       %rcx,0x5B8(%rsp)
063bd2df add       %rcx,%rax
063bd2e2 mov       %rax,0x5C0(%rsp)
063bd2ea mov       0x5C0(%rsp),%rax
063bd2f2 mov       %rax,0x168(%rsp)
063bd2fa jmp       0x0000`0000`063B`D316
063bd2fc lea       0x63C`F3E0,%rcx
063bd303 lea       0x63D`06E8,%r8
063bd30a mov       $0x1C,%edx
063bd30f call      0x0000`0000`063B`9FF0
063bd314 ud2
063bd316 mov       0x168(%rsp),%rdx
063bd31e mov       0x178(%rsp),%rcx
063bd326 mov       $2,%r8d
063bd32c call      0x0000`0000`063B`5B20
063bd331 mov       0x218(%rsp),%rcx
063bd339 mov       0x260(%rsp),%rax
063bd341 mov       %rax,0x400(%rsp)
063bd349 mov       %rcx,0x408(%rsp)
063bd351 add       %rcx,%rax
063bd354 mov       %rax,0x410(%rsp)
063bd35c mov       0x410(%rsp),%rax
063bd364 mov       %rax,0x160(%rsp)
063bd36c mov       0x268(%rsp),%rax
063bd374 mov       (%rax),%rax
063bd377 add       $0xE,%rax
063bd37b mov       %rax,0x158(%rsp)
063bd383 seto      %al
063bd386 test      $1,%al
063bd388 jne       0x0000`0000`063B`D3C7
063bd38a mov       0x158(%rsp),%rcx
063bd392 mov       0x278(%rsp),%rax
063bd39a mov       %rax,0x598(%rsp)
063bd3a2 mov       %rcx,0x5A0(%rsp)
063bd3aa add       %rcx,%rax
063bd3ad mov       %rax,0x5A8(%rsp)
063bd3b5 mov       0x5A8(%rsp),%rax
063bd3bd mov       %rax,0x150(%rsp)
063bd3c5 jmp       0x0000`0000`063B`D3E1
063bd3c7 lea       0x63C`F3E0,%rcx
063bd3ce lea       0x63D`0700,%r8
063bd3d5 mov       $0x1C,%edx
063bd3da call      0x0000`0000`063B`9FF0
063bd3df ud2
063bd3e1 mov       0x150(%rsp),%rdx
063bd3e9 mov       0x160(%rsp),%rcx
063bd3f1 mov       $2,%r8d
063bd3f7 call      0x0000`0000`063B`5B20
063bd3fc jmp       0x0000`0000`063B`CB2E
063bd401 mov       0x280(%rsp),%rax
063bd409 mov       %eax,0x288(%rsp)
063bd410 cmpl      $0x2710,0x288(%rsp)
063bd41b jae       0x0000`0000`063B`D8E0
063bd421 jmp       0x0000`0000`063B`D8BD
063bd426 mov       0x280(%rsp),%rax
063bd42e mov       $0x5F5`E100,%ecx
063bd433 xor       %edx,%edx
063bd435 div       %rcx
063bd438 mov       %rdx,0x140(%rsp)
063bd440 mov       %rdx,0x2F8(%rsp)
063bd448 mov       0x280(%rsp),%rax
063bd450 mov       $0x5F5`E100,%ecx
063bd455 xor       %edx,%edx
063bd457 div       %rcx
063bd45a mov       %rax,%rcx
063bd45d mov       0x140(%rsp),%rax
063bd465 mov       %rcx,0x280(%rsp)
063bd46d mov       $0xF`4240,%ecx
063bd472 xor       %edx,%edx
063bd474 div       %rcx
063bd477 mov       $0x64,%ecx
063bd47c xor       %edx,%edx
063bd47e div       %rcx
063bd481 shl       $1,%rdx
063bd485 mov       %rdx,0x148(%rsp)
063bd48d mov       0x140(%rsp),%rax
063bd495 mov       0x148(%rsp),%rcx
063bd49d mov       %rcx,0x300(%rsp)
063bd4a5 mov       $0x2710,%ecx
063bd4aa xor       %edx,%edx
063bd4ac div       %rcx
063bd4af mov       $0x64,%ecx
063bd4b4 xor       %edx,%edx
063bd4b6 div       %rcx
063bd4b9 shl       $1,%rdx
063bd4bd mov       %rdx,0x138(%rsp)
063bd4c5 mov       0x140(%rsp),%rax
063bd4cd mov       0x138(%rsp),%rcx
063bd4d5 mov       %rcx,0x308(%rsp)
063bd4dd mov       $0x64,%ecx
063bd4e2 xor       %edx,%edx
063bd4e4 div       %rcx
063bd4e7 mov       $0x64,%ecx
063bd4ec xor       %edx,%edx
063bd4ee div       %rcx
063bd4f1 shl       $1,%rdx
063bd4f5 mov       %rdx,0x130(%rsp)
063bd4fd mov       0x140(%rsp),%rax
063bd505 mov       0x130(%rsp),%rcx
063bd50d mov       %rcx,0x310(%rsp)
063bd515 shr       $0,%rax
063bd519 mov       $0x64,%ecx
063bd51e xor       %edx,%edx
063bd520 div       %rcx
063bd523 shl       $1,%rdx
063bd527 mov       %rdx,0x128(%rsp)
063bd52f mov       0x268(%rsp),%rax
063bd537 mov       0x128(%rsp),%rcx
063bd53f mov       %rcx,0x318(%rsp)
063bd547 mov       (%rax),%rax
063bd54a sub       $8,%rax
063bd54e mov       %rax,0x120(%rsp)
063bd556 seto      %al
063bd559 test      $1,%al
063bd55b jne       0x0000`0000`063B`D5AD
063bd55d mov       0x148(%rsp),%rcx
063bd565 mov       0x260(%rsp),%rax
063bd56d mov       0x268(%rsp),%rdx
063bd575 mov       0x120(%rsp),%r8
063bd57d mov       %r8,(%rdx)
063bd580 mov       %rax,0x3E8(%rsp)
063bd588 mov       %rcx,0x3F0(%rsp)
063bd590 add       %rcx,%rax
063bd593 mov       %rax,0x3F8(%rsp)
063bd59b mov       0x3F8(%rsp),%rax
063bd5a3 mov       %rax,0x118(%rsp)
063bd5ab jmp       0x0000`0000`063B`D5C7
063bd5ad lea       0x63C`F3B0,%rcx
063bd5b4 lea       0x63D`0718,%r8
063bd5bb mov       $0x21,%edx
063bd5c0 call      0x0000`0000`063B`9FF0
063bd5c5 ud2
063bd5c7 mov       0x268(%rsp),%rax
063bd5cf mov       (%rax),%rax
063bd5d2 add       $0,%rax
063bd5d6 mov       %rax,0x110(%rsp)
063bd5de seto      %al
063bd5e1 test      $1,%al
063bd5e3 jne       0x0000`0000`063B`D622
063bd5e5 mov       0x110(%rsp),%rcx
063bd5ed mov       0x278(%rsp),%rax
063bd5f5 mov       %rax,0x580(%rsp)
063bd5fd mov       %rcx,0x588(%rsp)
063bd605 add       %rcx,%rax
063bd608 mov       %rax,0x590(%rsp)
063bd610 mov       0x590(%rsp),%rax
063bd618 mov       %rax,0x108(%rsp)
063bd620 jmp       0x0000`0000`063B`D63C
063bd622 lea       0x63C`F3E0,%rcx
063bd629 lea       0x63D`0730,%r8
063bd630 mov       $0x1C,%edx
063bd635 call      0x0000`0000`063B`9FF0
063bd63a ud2
063bd63c mov       0x108(%rsp),%rdx
063bd644 mov       0x118(%rsp),%rcx
063bd64c mov       $2,%r8d
063bd652 call      0x0000`0000`063B`5B20
063bd657 mov       0x138(%rsp),%rcx
063bd65f mov       0x260(%rsp),%rax
063bd667 mov       %rax,0x3D0(%rsp)
063bd66f mov       %rcx,0x3D8(%rsp)
063bd677 add       %rcx,%rax
063bd67a mov       %rax,0x3E0(%rsp)
063bd682 mov       0x3E0(%rsp),%rax
063bd68a mov       %rax,0x100(%rsp)
063bd692 mov       0x268(%rsp),%rax
063bd69a mov       (%rax),%rax
063bd69d add       $2,%rax
063bd6a1 mov       %rax,0xF8(%rsp)
063bd6a9 seto      %al
063bd6ac test      $1,%al
063bd6ae jne       0x0000`0000`063B`D6ED
063bd6b0 mov       0xF8(%rsp),%rcx
063bd6b8 mov       0x278(%rsp),%rax
063bd6c0 mov       %rax,0x568(%rsp)
063bd6c8 mov       %rcx,0x570(%rsp)
063bd6d0 add       %rcx,%rax
063bd6d3 mov       %rax,0x578(%rsp)
063bd6db mov       0x578(%rsp),%rax
063bd6e3 mov       %rax,0xF0(%rsp)
063bd6eb jmp       0x0000`0000`063B`D707
063bd6ed lea       0x63C`F3E0,%rcx
063bd6f4 lea       0x63D`0748,%r8
063bd6fb mov       $0x1C,%edx
063bd700 call      0x0000`0000`063B`9FF0
063bd705 ud2
063bd707 mov       0xF0(%rsp),%rdx
063bd70f mov       0x100(%rsp),%rcx
063bd717 mov       $2,%r8d
063bd71d call      0x0000`0000`063B`5B20
063bd722 mov       0x130(%rsp),%rcx
063bd72a mov       0x260(%rsp),%rax
063bd732 mov       %rax,0x3B8(%rsp)
063bd73a mov       %rcx,0x3C0(%rsp)
063bd742 add       %rcx,%rax
063bd745 mov       %rax,0x3C8(%rsp)
063bd74d mov       0x3C8(%rsp),%rax
063bd755 mov       %rax,0xE8(%rsp)
063bd75d mov       0x268(%rsp),%rax
063bd765 mov       (%rax),%rax
063bd768 add       $4,%rax
063bd76c mov       %rax,0xE0(%rsp)
063bd774 seto      %al
063bd777 test      $1,%al
063bd779 jne       0x0000`0000`063B`D7B8
063bd77b mov       0xE0(%rsp),%rcx
063bd783 mov       0x278(%rsp),%rax
063bd78b mov       %rax,0x550(%rsp)
063bd793 mov       %rcx,0x558(%rsp)
063bd79b add       %rcx,%rax
063bd79e mov       %rax,0x560(%rsp)
063bd7a6 mov       0x560(%rsp),%rax
063bd7ae mov       %rax,0xD8(%rsp)
063bd7b6 jmp       0x0000`0000`063B`D7D2
063bd7b8 lea       0x63C`F3E0,%rcx
063bd7bf lea       0x63D`0760,%r8
063bd7c6 mov       $0x1C,%edx
063bd7cb call      0x0000`0000`063B`9FF0
063bd7d0 ud2
063bd7d2 mov       0xD8(%rsp),%rdx
063bd7da mov       0xE8(%rsp),%rcx
063bd7e2 mov       $2,%r8d
063bd7e8 call      0x0000`0000`063B`5B20
063bd7ed mov       0x128(%rsp),%rcx
063bd7f5 mov       0x260(%rsp),%rax
063bd7fd mov       %rax,0x3A0(%rsp)
063bd805 mov       %rcx,0x3A8(%rsp)
063bd80d add       %rcx,%rax
063bd810 mov       %rax,0x3B0(%rsp)
063bd818 mov       0x3B0(%rsp),%rax
063bd820 mov       %rax,0xD0(%rsp)
063bd828 mov       0x268(%rsp),%rax
063bd830 mov       (%rax),%rax
063bd833 add       $6,%rax
063bd837 mov       %rax,0xC8(%rsp)
063bd83f seto      %al
063bd842 test      $1,%al
063bd844 jne       0x0000`0000`063B`D883
063bd846 mov       0xC8(%rsp),%rcx
063bd84e mov       0x278(%rsp),%rax
063bd856 mov       %rax,0x538(%rsp)
063bd85e mov       %rcx,0x540(%rsp)
063bd866 add       %rcx,%rax
063bd869 mov       %rax,0x548(%rsp)
063bd871 mov       0x548(%rsp),%rax
063bd879 mov       %rax,0xC0(%rsp)
063bd881 jmp       0x0000`0000`063B`D89D
063bd883 lea       0x63C`F3E0,%rcx
063bd88a lea       0x63D`0778,%r8
063bd891 mov       $0x1C,%edx
063bd896 call      0x0000`0000`063B`9FF0
063bd89b ud2
063bd89d mov       0xC0(%rsp),%rdx
063bd8a5 mov       0xD0(%rsp),%rcx
063bd8ad mov       $2,%r8d
063bd8b3 call      0x0000`0000`063B`5B20
063bd8b8 jmp       0x0000`0000`063B`D401
063bd8bd mov       0x288(%rsp),%eax
063bd8c4 mov       %ax,0x28E(%rsp)
063bd8cc cmpw      $0x64,0x28E(%rsp)
063bd8d5 jae       0x0000`0000`063B`DB5F
063bd8db jmp       0x0000`0000`063B`DB4B
063bd8e0 mov       0x288(%rsp),%eax
063bd8e7 mov       $0x2710,%ecx
063bd8ec xor       %edx,%edx
063bd8ee div       %ecx
063bd8f0 mov       %edx,0xB8(%rsp)
063bd8f7 mov       %edx,0x320(%rsp)
063bd8fe mov       0x288(%rsp),%eax
063bd905 mov       $0x2710,%ecx
063bd90a xor       %edx,%edx
063bd90c div       %ecx
063bd90e mov       %eax,%ecx
063bd910 mov       0xB8(%rsp),%eax
063bd917 mov       %ecx,0x288(%rsp)
063bd91e mov       $0x64,%ecx
063bd923 xor       %edx,%edx
063bd925 div       %ecx
063bd927 shl       $1,%eax
063bd92a mov       %eax,0xBC(%rsp)
063bd931 mov       0xB8(%rsp),%eax
063bd938 mov       0xBC(%rsp),%ecx
063bd93f mov       %ecx,0x324(%rsp)
063bd946 mov       $0x64,%ecx
063bd94b xor       %edx,%edx
063bd94d div       %ecx
063bd94f shl       $1,%edx
063bd952 mov       %edx,0xB4(%rsp)
063bd959 mov       0x268(%rsp),%rax
063bd961 mov       0xB4(%rsp),%ecx
063bd968 mov       %ecx,0x328(%rsp)
063bd96f mov       (%rax),%rax
063bd972 sub       $4,%rax
063bd976 mov       %rax,0xA8(%rsp)
063bd97e seto      %al
063bd981 test      $1,%al
063bd983 jne       0x0000`0000`063B`D9D6
063bd985 mov       0x260(%rsp),%rax
063bd98d mov       0xBC(%rsp),%ecx
063bd994 mov       0x268(%rsp),%rdx
063bd99c mov       0xA8(%rsp),%r8
063bd9a4 mov       %r8,(%rdx)
063bd9a7 mov       %ecx,%ecx
063bd9a9 mov       %rax,0x388(%rsp)
063bd9b1 mov       %rcx,0x390(%rsp)
063bd9b9 add       %rcx,%rax
063bd9bc mov       %rax,0x398(%rsp)
063bd9c4 mov       0x398(%rsp),%rax
063bd9cc mov       %rax,0xA0(%rsp)
063bd9d4 jmp       0x0000`0000`063B`D9F0
063bd9d6 lea       0x63C`F3B0,%rcx
063bd9dd lea       0x63D`0790,%r8
063bd9e4 mov       $0x21,%edx
063bd9e9 call      0x0000`0000`063B`9FF0
063bd9ee ud2
063bd9f0 mov       0x268(%rsp),%rax
063bd9f8 mov       (%rax),%rax
063bd9fb add       $0,%rax
063bd9ff mov       %rax,0x98(%rsp)
063bda07 seto      %al
063bda0a test      $1,%al
063bda0c jne       0x0000`0000`063B`DA4B
063bda0e mov       0x98(%rsp),%rcx
063bda16 mov       0x278(%rsp),%rax
063bda1e mov       %rax,0x520(%rsp)
063bda26 mov       %rcx,0x528(%rsp)
063bda2e add       %rcx,%rax
063bda31 mov       %rax,0x530(%rsp)
063bda39 mov       0x530(%rsp),%rax
063bda41 mov       %rax,0x90(%rsp)
063bda49 jmp       0x0000`0000`063B`DA65
063bda4b lea       0x63C`F3E0,%rcx
063bda52 lea       0x63D`07A8,%r8
063bda59 mov       $0x1C,%edx
063bda5e call      0x0000`0000`063B`9FF0
063bda63 ud2
063bda65 mov       0x90(%rsp),%rdx
063bda6d mov       0xA0(%rsp),%rcx
063bda75 mov       $2,%r8d
063bda7b call      0x0000`0000`063B`5B20
063bda80 mov       0x260(%rsp),%rax
063bda88 mov       0xB4(%rsp),%ecx
063bda8f mov       %ecx,%ecx
063bda91 mov       %rax,0x370(%rsp)
063bda99 mov       %rcx,0x378(%rsp)
063bdaa1 add       %rcx,%rax
063bdaa4 mov       %rax,0x380(%rsp)
063bdaac mov       0x380(%rsp),%rax
063bdab4 mov       %rax,0x88(%rsp)
063bdabc mov       0x268(%rsp),%rax
063bdac4 mov       (%rax),%rax
063bdac7 add       $2,%rax
063bdacb mov       %rax,0x80(%rsp)
063bdad3 seto      %al
063bdad6 test      $1,%al
063bdad8 jne       0x0000`0000`063B`DB14
063bdada mov       0x80(%rsp),%rcx
063bdae2 mov       0x278(%rsp),%rax
063bdaea mov       %rax,0x508(%rsp)
063bdaf2 mov       %rcx,0x510(%rsp)
063bdafa add       %rcx,%rax
063bdafd mov       %rax,0x518(%rsp)
063bdb05 mov       0x518(%rsp),%rax
063bdb0d mov       %rax,0x78(%rsp)
063bdb12 jmp       0x0000`0000`063B`DB2E
063bdb14 lea       0x63C`F3E0,%rcx
063bdb1b lea       0x63D`07C0,%r8
063bdb22 mov       $0x1C,%edx
063bdb27 call      0x0000`0000`063B`9FF0
063bdb2c ud2
063bdb2e mov       0x78(%rsp),%rdx
063bdb33 mov       0x88(%rsp),%rcx
063bdb3b mov       $2,%r8d
063bdb41 call      0x0000`0000`063B`5B20
063bdb46 jmp       0x0000`0000`063B`D8BD
063bdb4b cmpw      $0xA,0x28E(%rsp)
063bdb54 jb        0x0000`0000`063B`DC8C
063bdb5a jmp       0x0000`0000`063B`DC76
063bdb5f mov       0x28E(%rsp),%ax
063bdb67 mov       $0x64,%cx
063bdb6b xor       %edx,%edx
063bdb6d div       %cx
063bdb70 shl       $1,%dx
063bdb74 mov       %dx,0x76(%rsp)
063bdb79 mov       0x76(%rsp),%ax
063bdb7e mov       %ax,0x32C(%rsp)
063bdb86 mov       0x28E(%rsp),%ax
063bdb8e mov       $0x64,%cx
063bdb92 xor       %edx,%edx
063bdb94 div       %cx
063bdb97 mov       %ax,%cx
063bdb9a mov       0x268(%rsp),%rax
063bdba2 mov       %cx,0x28E(%rsp)
063bdbaa mov       (%rax),%rax
063bdbad sub       $2,%rax
063bdbb1 mov       %rax,0x68(%rsp)
063bdbb6 seto      %al
063bdbb9 test      $1,%al
063bdbbb jne       0x0000`0000`063B`DC07
063bdbbd mov       0x260(%rsp),%rax
063bdbc5 mov       0x76(%rsp),%cx
063bdbca mov       0x268(%rsp),%rdx
063bdbd2 mov       0x68(%rsp),%r8
063bdbd7 mov       %r8,(%rdx)
063bdbda movzwl    %cx,%ecx
063bdbdd mov       %rax,0x358(%rsp)
063bdbe5 mov       %rcx,0x360(%rsp)
063bdbed add       %rcx,%rax
063bdbf0 mov       %rax,0x368(%rsp)
063bdbf8 mov       0x368(%rsp),%rax
063bdc00 mov       %rax,0x60(%rsp)
063bdc05 jmp       0x0000`0000`063B`DC21
063bdc07 lea       0x63C`F3B0,%rcx
063bdc0e lea       0x63D`07D8,%r8
063bdc15 mov       $0x21,%edx
063bdc1a call      0x0000`0000`063B`9FF0
063bdc1f ud2
063bdc21 mov       0x278(%rsp),%rax
063bdc29 mov       0x268(%rsp),%rcx
063bdc31 mov       (%rcx),%rcx
063bdc34 mov       %rax,0x4F0(%rsp)
063bdc3c mov       %rcx,0x4F8(%rsp)
063bdc44 add       %rcx,%rax
063bdc47 mov       %rax,0x500(%rsp)
063bdc4f mov       0x500(%rsp),%rax
063bdc57 mov       %rax,0x58(%rsp)
063bdc5c mov       0x58(%rsp),%rdx
063bdc61 mov       0x60(%rsp),%rcx
063bdc66 mov       $2,%r8d
063bdc6c call      0x0000`0000`063B`5B20
063bdc71 jmp       0x0000`0000`063B`DB4B
063bdc76 mov       0x28E(%rsp),%ax
063bdc7e shl       $1,%ax
063bdc82 mov       %ax,0x56(%rsp)
063bdc87 jmp       0x0000`0000`063B`DD51
063bdc8c mov       0x268(%rsp),%rax
063bdc94 mov       (%rax),%rax
063bdc97 dec       %rax
063bdc9a mov       %rax,0x48(%rsp)
063bdc9f seto      %al
063bdca2 test      $1,%al
063bdca4 jne       0x0000`0000`063B`DCCD
063bdca6 mov       0x268(%rsp),%rax
063bdcae mov       0x48(%rsp),%rcx
063bdcb3 mov       %rcx,(%rax)
063bdcb6 mov       0x28E(%rsp),%ax
063bdcbe add       $0x30,%al
063bdcc0 mov       %al,0x47(%rsp)
063bdcc4 setb      %al
063bdcc7 test      $1,%al
063bdcc9 jne       0x0000`0000`063B`DD24
063bdccb jmp       0x0000`0000`063B`DCE7
063bdccd lea       0x63C`F3B0,%rcx
063bdcd4 lea       0x63D`07F0,%r8
063bdcdb mov       $0x21,%edx
063bdce0 call      0x0000`0000`063B`9FF0
063bdce5 ud2
063bdce7 mov       0x278(%rsp),%rax
063bdcef mov       0x268(%rsp),%rcx
063bdcf7 mov       (%rcx),%rcx
063bdcfa mov       %rax,0x4D8(%rsp)
063bdd02 mov       %rcx,0x4E0(%rsp)
063bdd0a add       %rcx,%rax
063bdd0d mov       %rax,0x4E8(%rsp)
063bdd15 mov       0x4E8(%rsp),%rax
063bdd1d mov       %rax,0x38(%rsp)
063bdd22 jmp       0x0000`0000`063B`DD3E
063bdd24 lea       0x63C`F3E0,%rcx
063bdd2b lea       0x63D`0808,%r8
063bdd32 mov       $0x1C,%edx
063bdd37 call      0x0000`0000`063B`9FF0
063bdd3c ud2
063bdd3e mov       0x38(%rsp),%rax
063bdd43 mov       0x47(%rsp),%cl
063bdd47 mov       %cl,(%rax)
063bdd49 add       $0x658,%rsp
063bdd50 ret
063bdd51 mov       0x268(%rsp),%rax
063bdd59 mov       0x56(%rsp),%cx
063bdd5e mov       %cx,0x32E(%rsp)
063bdd66 mov       (%rax),%rax
063bdd69 sub       $2,%rax
063bdd6d mov       %rax,0x30(%rsp)
063bdd72 seto      %al
063bdd75 test      $1,%al
063bdd77 jne       0x0000`0000`063B`DDC3
063bdd79 mov       0x260(%rsp),%rax
063bdd81 mov       0x56(%rsp),%cx
063bdd86 mov       0x268(%rsp),%rdx
063bdd8e mov       0x30(%rsp),%r8
063bdd93 mov       %r8,(%rdx)
063bdd96 movzwl    %cx,%ecx
063bdd99 mov       %rax,0x340(%rsp)
063bdda1 mov       %rcx,0x348(%rsp)
063bdda9 add       %rcx,%rax
063bddac mov       %rax,0x350(%rsp)
063bddb4 mov       0x350(%rsp),%rax
063bddbc mov       %rax,0x28(%rsp)
063bddc1 jmp       0x0000`0000`063B`DDDD
063bddc3 lea       0x63C`F3B0,%rcx
063bddca lea       0x63D`0820,%r8
063bddd1 mov       $0x21,%edx
063bddd6 call      0x0000`0000`063B`9FF0
063bdddb ud2
063bdddd mov       0x278(%rsp),%rax
063bdde5 mov       0x268(%rsp),%rcx
063bdded mov       (%rcx),%rcx
063bddf0 mov       %rax,0x4C0(%rsp)
063bddf8 mov       %rcx,0x4C8(%rsp)
063bde00 add       %rcx,%rax
063bde03 mov       %rax,0x4D0(%rsp)
063bde0b mov       0x4D0(%rsp),%rax
063bde13 mov       %rax,0x20(%rsp)
063bde18 mov       0x20(%rsp),%rdx
063bde1d mov       0x28(%rsp),%rcx
063bde22 mov       $2,%r8d
063bde28 call      0x0000`0000`063B`5B20
063bde2d jmp       0x0000`0000`063B`DD49

core::fmt::num::impl$0::fmt:
063bde40 sub       $0x38,%rsp
063bde44 mov       %rdx,%r9
063bde47 mov       %rcx,%rax
063bde4a mov       %rax,0x28(%rsp)
063bde4f mov       %r9,0x30(%rsp)
063bde54 mov       (%rax),%rcx
063bde57 mov       8(%rax),%rdx
063bde5b mov       $1,%r8b
063bde5e call      0x0000`0000`063B`DE80
063bde63 mov       %al,0x27(%rsp)
063bde67 mov       0x27(%rsp),%al
063bde6b and       $1,%al
063bde6d movzbl    %al,%eax
063bde70 add       $0x38,%rsp
063bde74 ret

core::fmt::num::fmt_u128:
063bde80 sub       $0x258,%rsp
063bde87 mov       %r9,0xF8(%rsp)
063bde8f mov       %rdx,0x100(%rsp)
063bde97 mov       %rcx,0x108(%rsp)
063bde9f mov       %r8b,0x116(%rsp)
063bdea7 mov       %rcx,0x148(%rsp)
063bdeaf mov       %rdx,0x150(%rsp)
063bdeb7 and       $1,%r8b
063bdebb mov       %r8b,0x15F(%rsp)
063bdec3 mov       %r9,0x160(%rsp)
063bdecb mov       0x1C7(%rsp),%al
063bded2 mov       %al,0x117(%rsp)
063bded9 mov       0x100(%rsp),%rdx
063bdee1 mov       0x108(%rsp),%rcx
063bdee9 mov       0x117(%rsp),%al
063bdef0 movzbl    %al,%eax
063bdef3 movabs    $0x101`0101`0101`0101,%r8
063bdefd imul      %r8,%rax
063bdf01 mov       %rax,0x137(%rsp)
063bdf09 mov       %rax,0x130(%rsp)
063bdf11 mov       %rax,0x128(%rsp)
063bdf19 mov       %rax,0x120(%rsp)
063bdf21 mov       %rax,0x118(%rsp)
063bdf29 movq      $0x27,0x140(%rsp)
063bdf35 call      0x0000`0000`063B`E450
063bdf3a mov       %rcx,0xE0(%rsp)
063bdf42 mov       %rdx,0xE8(%rsp)
063bdf4a mov       %rax,0xF0(%rsp)
063bdf52 mov       0xE0(%rsp),%rcx
063bdf5a mov       0xE8(%rsp),%rax
063bdf62 mov       0xF0(%rsp),%rdx
063bdf6a mov       %rdx,0x168(%rsp)
063bdf72 mov       %rax,0x170(%rsp)
063bdf7a mov       %rcx,0x178(%rsp)
063bdf82 lea       0x118(%rsp),%rdx
063bdf8a lea       0x140(%rsp),%r8
063bdf92 call      0x0000`0000`063B`CA60
063bdf97 mov       0xE8(%rsp),%rcx
063bdf9f mov       0xF0(%rsp),%rax
063bdfa7 or        %rcx,%rax
063bdfaa jne       0x0000`0000`063B`DFE1
063bdfac jmp       0x0000`0000`063B`DFAE
063bdfae lea       0x118(%rsp),%rcx
063bdfb6 mov       %rcx,0x1C8(%rsp)
063bdfbe movq      $0x27,0x1D0(%rsp)
063bdfca mov       $0x27,%edx
063bdfcf call      0x0000`0000`063C`3E40
063bdfd4 mov       %rax,0xD8(%rsp)
063bdfdc jmp       0x0000`0000`063B`E349
063bdfe1 mov       $0x27,%eax
063bdfe6 sub       $0x13,%rax
063bdfea mov       %rax,0xD0(%rsp)
063bdff2 setb      %al
063bdff5 test      $1,%al
063bdff7 jne       0x0000`0000`063B`E039
063bdff9 mov       0xD0(%rsp),%rax
063be001 mov       %rax,0x180(%rsp)
063be009 lea       0x118(%rsp),%rcx
063be011 mov       %rcx,0x1E8(%rsp)
063be019 movq      $0x27,0x1F0(%rsp)
063be025 mov       $0x27,%edx
063be02a call      0x0000`0000`063C`3E40
063be02f mov       %rax,0xC8(%rsp)
063be037 jmp       0x0000`0000`063B`E053
063be039 lea       0x63C`F3B0,%rcx
063be040 lea       0x63D`0838,%r8
063be047 mov       $0x21,%edx
063be04c call      0x0000`0000`063B`9FF0
063be051 ud2
063be053 mov       0xD0(%rsp),%rcx
063be05b mov       0xC8(%rsp),%rax
063be063 mov       %rax,0x240(%rsp)
063be06b mov       %rcx,0x248(%rsp)
063be073 add       %rcx,%rax
063be076 mov       %rax,0x250(%rsp)
063be07e mov       0x250(%rsp),%rax
063be086 mov       %rax,0xC0(%rsp)
063be08e mov       0xD0(%rsp),%rcx
063be096 mov       0x140(%rsp),%rax
063be09e sub       %rcx,%rax
063be0a1 mov       %rax,0xB8(%rsp)
063be0a9 seto      %al
063be0ac test      $1,%al
063be0ae jne       0x0000`0000`063B`E0CC
063be0b0 mov       0xB8(%rsp),%r8
063be0b8 mov       0xC0(%rsp),%rcx
063be0c0 mov       $0x30,%edx
063be0c5 call      0x0000`0000`063B`5C20
063be0ca jmp       0x0000`0000`063B`E0E6
063be0cc lea       0x63C`F3B0,%rcx
063be0d3 lea       0x63D`0850,%r8
063be0da mov       $0x21,%edx
063be0df call      0x0000`0000`063B`9FF0
063be0e4 ud2
063be0e6 mov       0xE8(%rsp),%rdx
063be0ee mov       0xF0(%rsp),%rcx
063be0f6 mov       0xD0(%rsp),%rax
063be0fe mov       %rax,0x140(%rsp)
063be106 call      0x0000`0000`063B`E450
063be10b mov       %rcx,0xA0(%rsp)
063be113 mov       %rdx,0xA8(%rsp)
063be11b mov       %rax,0xB0(%rsp)
063be123 mov       0xA0(%rsp),%rcx
063be12b mov       0xA8(%rsp),%rax
063be133 mov       0xB0(%rsp),%rdx
063be13b mov       %rdx,0x188(%rsp)
063be143 mov       %rax,0x190(%rsp)
063be14b mov       %rcx,0x198(%rsp)
063be153 lea       0x118(%rsp),%rdx
063be15b lea       0x140(%rsp),%r8
063be163 call      0x0000`0000`063B`CA60
063be168 mov       0xA8(%rsp),%rcx
063be170 mov       0xB0(%rsp),%rax
063be178 or        %rcx,%rax
063be17b je        0x0000`0000`063B`DFAE
063be181 jmp       0x0000`0000`063B`E183
063be183 mov       $0x27,%eax
063be188 sub       $0x26,%rax
063be18c mov       %rax,0x98(%rsp)
063be194 setb      %al
063be197 test      $1,%al
063be199 jne       0x0000`0000`063B`E1E3
063be19b mov       0x98(%rsp),%rax
063be1a3 mov       %rax,0x1A0(%rsp)
063be1ab lea       0x118(%rsp),%rcx
063be1b3 mov       %rcx,0x1D8(%rsp)
063be1bb movq      $0x27,0x1E0(%rsp)
063be1c7 mov       $0x27,%edx
063be1cc call      0x0000`0000`063C`3E40
063be1d1 mov       %rax,0x90(%rsp)
063be1d9 mov       %rax,0x1A8(%rsp)
063be1e1 jmp       0x0000`0000`063B`E1FD
063be1e3 lea       0x63C`F3B0,%rcx
063be1ea lea       0x63D`0868,%r8
063be1f1 mov       $0x21,%edx
063be1f6 call      0x0000`0000`063B`9FF0
063be1fb ud2
063be1fd mov       0x98(%rsp),%rcx
063be205 mov       0x90(%rsp),%rax
063be20d mov       %rax,0x228(%rsp)
063be215 mov       %rcx,0x230(%rsp)
063be21d add       %rcx,%rax
063be220 mov       %rax,0x238(%rsp)
063be228 mov       0x238(%rsp),%rax
063be230 mov       %rax,0x88(%rsp)
063be238 mov       0x98(%rsp),%rcx
063be240 mov       0x140(%rsp),%rax
063be248 sub       %rcx,%rax
063be24b mov       %rax,0x80(%rsp)
063be253 seto      %al
063be256 test      $1,%al
063be258 jne       0x0000`0000`063B`E276
063be25a mov       0x80(%rsp),%r8
063be262 mov       0x88(%rsp),%rcx
063be26a mov       $0x30,%edx
063be26f call      0x0000`0000`063B`5C20
063be274 jmp       0x0000`0000`063B`E290
063be276 lea       0x63C`F3B0,%rcx
063be27d lea       0x63D`0880,%r8
063be284 mov       $0x21,%edx
063be289 call      0x0000`0000`063B`9FF0
063be28e ud2
063be290 mov       0x98(%rsp),%rax
063be298 dec       %rax
063be29b mov       %rax,0x78(%rsp)
063be2a0 seto      %al
063be2a3 test      $1,%al
063be2a5 jne       0x0000`0000`063B`E2CB
063be2a7 mov       0xB0(%rsp),%rax
063be2af mov       0x78(%rsp),%rcx
063be2b4 mov       %rcx,0x140(%rsp)
063be2bc add       $0x30,%al
063be2be mov       %al,0x77(%rsp)
063be2c2 setb      %al
063be2c5 test      $1,%al
063be2c7 jne       0x0000`0000`063B`E31F
063be2c9 jmp       0x0000`0000`063B`E2E5
063be2cb lea       0x63C`F3B0,%rcx
063be2d2 lea       0x63D`0898,%r8
063be2d9 mov       $0x21,%edx
063be2de call      0x0000`0000`063B`9FF0
063be2e3 ud2
063be2e5 mov       0x90(%rsp),%rax
063be2ed mov       0x140(%rsp),%rcx
063be2f5 mov       %rax,0x210(%rsp)
063be2fd mov       %rcx,0x218(%rsp)
063be305 add       %rcx,%rax
063be308 mov       %rax,0x220(%rsp)
063be310 mov       0x220(%rsp),%rax
063be318 mov       %rax,0x68(%rsp)
063be31d jmp       0x0000`0000`063B`E339
063be31f lea       0x63C`F3E0,%rcx
063be326 lea       0x63D`08B0,%r8
063be32d mov       $0x1C,%edx
063be332 call      0x0000`0000`063B`9FF0
063be337 ud2
063be339 mov       0x68(%rsp),%rax
063be33e mov       0x77(%rsp),%cl
063be342 mov       %cl,(%rax)
063be344 jmp       0x0000`0000`063B`DFAE
063be349 mov       0xD8(%rsp),%rax
063be351 mov       0x140(%rsp),%rcx
063be359 mov       %rax,0x1F8(%rsp)
063be361 mov       %rcx,0x200(%rsp)
063be369 add       %rcx,%rax
063be36c mov       %rax,0x208(%rsp)
063be374 mov       0x208(%rsp),%rax
063be37c mov       %rax,0x60(%rsp)
063be381 mov       $0x27,%eax
063be386 sub       0x140(%rsp),%rax
063be38e mov       %rax,0x58(%rsp)
063be393 setb      %al
063be396 test      $1,%al
063be398 jne       0x0000`0000`063B`E3B5
063be39a mov       0x58(%rsp),%rdx
063be39f mov       0x60(%rsp),%rcx
063be3a4 call      0x0000`0000`063C`36A0
063be3a9 mov       %rax,0x48(%rsp)
063be3ae mov       %rdx,0x50(%rsp)
063be3b3 jmp       0x0000`0000`063B`E3CF
063be3b5 lea       0x63C`F3B0,%rcx
063be3bc lea       0x63D`08C8,%r8
063be3c3 mov       $0x21,%edx
063be3c8 call      0x0000`0000`063B`9FF0
063be3cd ud2
063be3cf mov       0x50(%rsp),%rdx
063be3d4 mov       0x48(%rsp),%rcx
063be3d9 call      0x0000`0000`063C`5130
063be3de mov       %rax,0x38(%rsp)
063be3e3 mov       %rdx,0x40(%rsp)
063be3e8 mov       %rax,0x1B0(%rsp)
063be3f0 mov       %rdx,0x1B8(%rsp)
063be3f8 mov       0xF8(%rsp),%rcx
063be400 mov       0x116(%rsp),%dl
063be407 mov       0x38(%rsp),%r8
063be40c mov       0x40(%rsp),%r9
063be411 mov       %rsp,%rax
063be414 mov       %r9,0x28(%rax)
063be418 mov       %r8,0x20(%rax)
063be41c and       $1,%dl
063be41f lea       0x63C`F530,%r8
063be426 xor       %eax,%eax
063be428 mov       %eax,%r9d
063be42b call      0x0000`0000`063B`FB90
063be430 mov       %al,0x37(%rsp)
063be434 mov       0x37(%rsp),%al
063be438 and       $1,%al
063be43a movzbl    %al,%eax
063be43d add       $0x258,%rsp
063be444 ret

core::fmt::num::udiv_1e19:
063be450 sub       $0xC8,%rsp
063be457 mov       %rdx,0x78(%rsp)
063be45c mov       %rcx,0x80(%rsp)
063be464 mov       %rcx,0xB0(%rsp)
063be46c mov       %rdx,0xB8(%rsp)
063be474 sub       $0x8`0000,%rdx
063be47b jb        0x0000`0000`063B`E4B4
063be47d jmp       0x0000`0000`063B`E47F
063be47f mov       0x78(%rsp),%rdx
063be484 mov       0x80(%rsp),%rcx
063be48c movabs    $0x9598`F4F1`E836`1973,%r8
063be496 movabs    $0x760F`253E`DB4A`B0D2,%r9
063be4a0 call      0x0000`0000`063B`E650
063be4a5 mov       %rdx,0x68(%rsp)
063be4aa mov       %rax,0x70(%rsp)
063be4af jmp       0x0000`0000`063B`E551
063be4b4 mov       0x78(%rsp),%rax
063be4b9 mov       0x80(%rsp),%rdx
063be4c1 mov       %rax,%rcx
063be4c4 shld      $0x2D,%rdx,%rcx
063be4c9 mov       %rcx,0x60(%rsp)
063be4ce shr       $0x13,%rax
063be4d2 mov       0x60(%rsp),%rax
063be4d7 movabs    $0x760F`253E`DB4A`B0D3,%rcx
063be4e1 mul       %rcx
063be4e4 shr       $0x2B,%rdx
063be4e8 mov       %rdx,0xA0(%rsp)
063be4f0 movq      $0,0xA8(%rsp)
063be4fc mov       0xA0(%rsp),%rax
063be504 mov       %rax,0x40(%rsp)
063be509 mov       0xA8(%rsp),%rax
063be511 movabs    $0x8AC7`2304`89E8`0000,%rcx
063be51b mul       %rcx
063be51e mov       %rax,%r8
063be521 mov       0x40(%rsp),%rax
063be526 seto      %dl
063be529 mov       %dl,0x4F(%rsp)
063be52d mul       %rcx
063be530 mov       %rax,%rcx
063be533 mov       0x4F(%rsp),%al
063be537 add       %r8,%rdx
063be53a mov       %rdx,0x50(%rsp)
063be53f setb      %r8b
063be543 or        %r8b,%al
063be546 mov       %rcx,0x58(%rsp)
063be54b test      $1,%al
063be54d jne       0x0000`0000`063B`E5BB
063be54f jmp       0x0000`0000`063B`E590
063be551 mov       0x68(%rsp),%rax
063be556 mov       0x70(%rsp),%rdx
063be55b mov       %rax,%rcx
063be55e shld      $2,%rdx,%rcx
063be563 mov       %rcx,0x30(%rsp)
063be568 shr       $0x3E,%rax
063be56c mov       %rax,0x38(%rsp)
063be571 mov       0x38(%rsp),%rax
063be576 mov       0x30(%rsp),%rcx
063be57b mov       %rcx,0xA0(%rsp)
063be583 mov       %rax,0xA8(%rsp)
063be58b jmp       0x0000`0000`063B`E4FC
063be590 mov       0x50(%rsp),%rax
063be595 mov       0x78(%rsp),%rcx
063be59a mov       0x58(%rsp),%r8
063be59f mov       0x80(%rsp),%rdx
063be5a7 sub       %r8,%rdx
063be5aa mov       %rdx,0x28(%rsp)
063be5af sbb       %rax,%rcx
063be5b2 setb      %al
063be5b5 test      $1,%al
063be5b7 jne       0x0000`0000`063B`E62A
063be5b9 jmp       0x0000`0000`063B`E5D5
063be5bb lea       0x63C`F400,%rcx
063be5c2 lea       0x63D`08E0,%r8
063be5c9 mov       $0x21,%edx
063be5ce call      0x0000`0000`063B`9FF0
063be5d3 ud2
063be5d5 mov       0x28(%rsp),%rax
063be5da mov       %rax,0xC0(%rsp)
063be5e2 mov       0xA0(%rsp),%rcx
063be5ea mov       0xA8(%rsp),%rdx
063be5f2 mov       %rdx,0x90(%rsp)
063be5fa mov       %rcx,0x88(%rsp)
063be602 mov       %rax,0x98(%rsp)
063be60a mov       0x88(%rsp),%rax
063be612 mov       0x90(%rsp),%rdx
063be61a mov       0x98(%rsp),%rcx
063be622 add       $0xC8,%rsp
063be629 ret
063be62a lea       0x63C`F3B0,%rcx
063be631 lea       0x63D`08F8,%r8
063be638 mov       $0x21,%edx
063be63d call      0x0000`0000`063B`9FF0
063be642 ud2

core::fmt::num::u128_mulhi:
063be650 sub       $0x198,%rsp
063be657 mov       %r9,0xF0(%rsp)
063be65f mov       %r8,0xF8(%rsp)
063be667 mov       %rcx,0x110(%rsp)
063be66f mov       %rdx,0x118(%rsp)
063be677 mov       %r9,0x128(%rsp)
063be67f mov       %r8,0x120(%rsp)
063be687 mov       %rcx,%rax
063be68a mov       %rax,0x100(%rsp)
063be692 mov       %rcx,0x130(%rsp)
063be69a xor       %eax,%eax
063be69c mov       %rdx,0x108(%rsp)
063be6a4 mov       0xF0(%rsp),%rax
063be6ac mov       0xF8(%rsp),%rcx
063be6b4 mov       0x108(%rsp),%rdx
063be6bc mov       %rdx,%r8
063be6bf mov       %r8,0xD8(%rsp)
063be6c7 mov       %rdx,0x138(%rsp)
063be6cf mov       %rcx,%rdx
063be6d2 mov       %rdx,0xE0(%rsp)
063be6da mov       %rcx,0x140(%rsp)
063be6e2 xor       %ecx,%ecx
063be6e4 mov       %rax,0xE8(%rsp)
063be6ec mov       0xE0(%rsp),%rcx
063be6f4 mov       0x100(%rsp),%rax
063be6fc mov       0xE8(%rsp),%rdx
063be704 mov       %rdx,%r8
063be707 mov       %r8,0xC8(%rsp)
063be70f mov       %rdx,0x148(%rsp)
063be717 mul       %rcx
063be71a mov       %rax,%rcx
063be71d xor       %eax,%eax
063be71f mov       %rdx,0xD0(%rsp)
063be727 test      $1,%al
063be729 jne       0x0000`0000`063B`E747
063be72b mov       0xD0(%rsp),%rax
063be733 xor       %ecx,%ecx
063be735 mov       %rcx,0xB8(%rsp)
063be73d mov       %rax,0xC0(%rsp)
063be745 jmp       0x0000`0000`063B`E761
063be747 lea       0x63C`F400,%rcx
063be74e lea       0x63D`0910,%r8
063be755 mov       $0x21,%edx
063be75a call      0x0000`0000`063B`9FF0
063be75f ud2
063be761 mov       0xC8(%rsp),%rcx
063be769 mov       0x100(%rsp),%rax
063be771 mov       0xB8(%rsp),%rdx
063be779 mov       0xC0(%rsp),%r8
063be781 mov       %r8,0x150(%rsp)
063be789 mov       %rdx,0x158(%rsp)
063be791 mul       %rcx
063be794 mov       %rax,%rcx
063be797 xor       %eax,%eax
063be799 mov       %rdx,0xA8(%rsp)
063be7a1 mov       %rcx,0xB0(%rsp)
063be7a9 test      $1,%al
063be7ab jne       0x0000`0000`063B`E7EC
063be7ad mov       0xB8(%rsp),%rax
063be7b5 mov       0xA8(%rsp),%rcx
063be7bd mov       0xC0(%rsp),%r8
063be7c5 mov       0xB0(%rsp),%rdx
063be7cd add       %r8,%rdx
063be7d0 mov       %rdx,0x98(%rsp)
063be7d8 adc       %rax,%rcx
063be7db setb      %al
063be7de mov       %rcx,0xA0(%rsp)
063be7e6 test      $1,%al
063be7e8 jne       0x0000`0000`063B`E83A
063be7ea jmp       0x0000`0000`063B`E806
063be7ec lea       0x63C`F400,%rcx
063be7f3 lea       0x63D`0928,%r8
063be7fa mov       $0x21,%edx
063be7ff call      0x0000`0000`063B`9FF0
063be804 ud2
063be806 mov       0xA0(%rsp),%rax
063be80e mov       0x98(%rsp),%rcx
063be816 mov       %rcx,0x160(%rsp)
063be81e mov       %rax,0x168(%rsp)
063be826 xor       %ecx,%ecx
063be828 mov       %rcx,0x88(%rsp)
063be830 mov       %rax,0x90(%rsp)
063be838 jmp       0x0000`0000`063B`E854
063be83a lea       0x63C`F3E0,%rcx
063be841 lea       0x63D`0928,%r8
063be848 mov       $0x1C,%edx
063be84d call      0x0000`0000`063B`9FF0
063be852 ud2
063be854 mov       0xE0(%rsp),%rcx
063be85c mov       0xD8(%rsp),%rax
063be864 mov       0x98(%rsp),%rdx
063be86c mov       0x88(%rsp),%r8
063be874 mov       0x90(%rsp),%r9
063be87c mov       %r9,0x170(%rsp)
063be884 mov       %r8,0x178(%rsp)
063be88c mov       %rdx,%r8
063be88f mov       %r8,0x70(%rsp)
063be894 mov       %rdx,0x180(%rsp)
063be89c mul       %rcx
063be89f mov       %rax,%rcx
063be8a2 xor       %eax,%eax
063be8a4 mov       %rdx,0x78(%rsp)
063be8a9 mov       %rcx,0x80(%rsp)
063be8b1 test      $1,%al
063be8b3 jne       0x0000`0000`063B`E8DC
063be8b5 mov       0x78(%rsp),%rcx
063be8ba mov       0x70(%rsp),%rax
063be8bf mov       0x80(%rsp),%rdx
063be8c7 add       %rax,%rdx
063be8ca adc       $0,%rcx
063be8ce setb      %al
063be8d1 mov       %rcx,0x68(%rsp)
063be8d6 test      $1,%al
063be8d8 jne       0x0000`0000`063B`E909
063be8da jmp       0x0000`0000`063B`E8F6
063be8dc lea       0x63C`F400,%rcx
063be8e3 lea       0x63D`0940,%r8
063be8ea mov       $0x21,%edx
063be8ef call      0x0000`0000`063B`9FF0
063be8f4 ud2
063be8f6 mov       0x68(%rsp),%rax
063be8fb xor       %ecx,%ecx
063be8fd mov       %rcx,0x58(%rsp)
063be902 mov       %rax,0x60(%rsp)
063be907 jmp       0x0000`0000`063B`E923
063be909 lea       0x63C`F3E0,%rcx
063be910 lea       0x63D`0958,%r8
063be917 mov       $0x1C,%edx
063be91c call      0x0000`0000`063B`9FF0
063be921 ud2
063be923 mov       0xC8(%rsp),%rcx
063be92b mov       0xD8(%rsp),%rax
063be933 mov       0x58(%rsp),%rdx
063be938 mov       0x60(%rsp),%r8
063be93d mov       %r8,0x188(%rsp)
063be945 mov       %rdx,0x190(%rsp)
063be94d mul       %rcx
063be950 mov       %rax,%rcx
063be953 xor       %eax,%eax
063be955 mov       %rdx,0x48(%rsp)
063be95a mov       %rcx,0x50(%rsp)
063be95f test      $1,%al
063be961 jne       0x0000`0000`063B`E996
063be963 mov       0x88(%rsp),%rax
063be96b mov       0x48(%rsp),%rcx
063be970 mov       0x90(%rsp),%r8
063be978 mov       0x50(%rsp),%rdx
063be97d add       %r8,%rdx
063be980 mov       %rdx,0x38(%rsp)
063be985 adc       %rax,%rcx
063be988 setb      %al
063be98b mov       %rcx,0x40(%rsp)
063be990 test      $1,%al
063be992 jne       0x0000`0000`063B`E9DD
063be994 jmp       0x0000`0000`063B`E9B0
063be996 lea       0x63C`F400,%rcx
063be99d lea       0x63D`0970,%r8
063be9a4 mov       $0x21,%edx
063be9a9 call      0x0000`0000`063B`9FF0
063be9ae ud2
063be9b0 mov       0x58(%rsp),%rax
063be9b5 mov       0x40(%rsp),%rcx
063be9ba mov       0x60(%rsp),%r8
063be9bf mov       0x38(%rsp),%rdx
063be9c4 add       %r8,%rdx
063be9c7 mov       %rdx,0x28(%rsp)
063be9cc adc       %rax,%rcx
063be9cf setb      %al
063be9d2 mov       %rcx,0x30(%rsp)
063be9d7 test      $1,%al
063be9d9 jne       0x0000`0000`063B`EA09
063be9db jmp       0x0000`0000`063B`E9F7
063be9dd lea       0x63C`F3E0,%rcx
063be9e4 lea       0x63D`0970,%r8
063be9eb mov       $0x1C,%edx
063be9f0 call      0x0000`0000`063B`9FF0
063be9f5 ud2
063be9f7 mov       0x30(%rsp),%rdx
063be9fc mov       0x28(%rsp),%rax
063bea01 add       $0x198,%rsp
063bea08 ret
063bea09 lea       0x63C`F3E0,%rcx
063bea10 lea       0x63D`0970,%r8
063bea17 mov       $0x1C,%edx
063bea1c call      0x0000`0000`063B`9FF0
063bea21 ud2

core::fmt::Write::write_char<core::fmt::builders::PadAdapter>:
063bea30 sub       $0x68,%rsp
063bea34 mov       %edx,0x3C(%rsp)
063bea38 mov       %rcx,0x30(%rsp)
063bea3d mov       %rcx,0x58(%rsp)
063bea42 mov       %edx,0x64(%rsp)
063bea46 lea       0x54(%rsp),%rcx
063bea4b xor       %edx,%edx
063bea4d mov       $4,%r8d
063bea53 call      0x0000`0000`063C`BCC0
063bea58 mov       0x3C(%rsp),%ecx
063bea5c lea       0x54(%rsp),%rdx
063bea61 mov       $4,%r8d
063bea67 call      0x0000`0000`063B`8210
063bea6c mov       %rax,0x40(%rsp)
063bea71 mov       %rdx,0x48(%rsp)
063bea76 mov       0x48(%rsp),%r8
063bea7b mov       0x40(%rsp),%rdx
063bea80 mov       0x30(%rsp),%rcx
063bea85 call      0x0000`0000`063B`AB40
063bea8a mov       %al,0x2F(%rsp)
063bea8e mov       0x2F(%rsp),%al
063bea92 and       $1,%al
063bea94 movzbl    %al,%eax
063bea97 add       $0x68,%rsp
063bea9b ret

core::fmt::Write::write_fmt<core::fmt::builders::PadAdapter>:
063beaa0 sub       $0x68,%rsp
063beaa4 mov       %rcx,0x30(%rsp)
063beaa9 lea       0x30(%rsp),%rax
063beaae mov       %rax,0x20(%rsp)
063beab3 lea       0x38(%rsp),%rcx
063beab8 mov       $0x30,%r8d
063beabe call      0x0000`0000`063C`BD50
063beac3 mov       0x20(%rsp),%rcx
063beac8 lea       0x63D`0988,%rdx
063beacf lea       0x38(%rsp),%r8
063bead4 call      0x0000`0000`063B`F1A0
063bead9 mov       %al,0x2F(%rsp)
063beadd mov       0x2F(%rsp),%al
063beae1 and       $1,%al
063beae3 movzbl    %al,%eax
063beae6 add       $0x68,%rsp
063beaea ret

core::fmt::impl$0::write_str<core::fmt::builders::PadAdapter>:
063beaf0 sub       $0x48,%rsp
063beaf4 mov       %rcx,0x30(%rsp)
063beaf9 mov       %rdx,0x38(%rsp)
063beafe mov       %r8,0x40(%rsp)
063beb03 mov       (%rcx),%rcx
063beb06 call      0x0000`0000`063B`AB40
063beb0b mov       %al,0x2F(%rsp)
063beb0f mov       0x2F(%rsp),%al
063beb13 and       $1,%al
063beb15 movzbl    %al,%eax
063beb18 add       $0x48,%rsp
063beb1c ret

core::fmt::impl$0::write_char<core::fmt::builders::PadAdapter>:
063beb20 sub       $0x38,%rsp
063beb24 mov       %rcx,0x28(%rsp)
063beb29 mov       %edx,0x34(%rsp)
063beb2d mov       (%rcx),%rcx
063beb30 call      0x0000`0000`063B`EA30
063beb35 mov       %al,0x27(%rsp)
063beb39 mov       0x27(%rsp),%al
063beb3d and       $1,%al
063beb3f movzbl    %al,%eax
063beb42 add       $0x38,%rsp
063beb46 ret

core::fmt::impl$0::write_fmt<core::fmt::builders::PadAdapter>:
063beb50 sub       $0x68,%rsp
063beb54 mov       %rcx,0x60(%rsp)
063beb59 mov       (%rcx),%rax
063beb5c mov       %rax,0x20(%rsp)
063beb61 lea       0x30(%rsp),%rcx
063beb66 mov       $0x30,%r8d
063beb6c call      0x0000`0000`063C`BD50
063beb71 mov       0x20(%rsp),%rcx
063beb76 lea       0x30(%rsp),%rdx
063beb7b call      0x0000`0000`063B`EAA0
063beb80 mov       %al,0x2F(%rsp)
063beb84 mov       0x2F(%rsp),%al
063beb88 and       $1,%al
063beb8a movzbl    %al,%eax
063beb8d add       $0x68,%rsp
063beb91 ret

core::fmt::Formatter::new:
063beba0 sub       $0x30,%rsp
063beba4 mov       %rcx,%rax
063beba7 mov       %rdx,0x20(%rsp)
063bebac mov       %r8,0x28(%rsp)
063bebb1 movq      $0,(%rsp)
063bebb9 movq      $0,0x10(%rsp)
063bebc2 movl      $0,0x30(%rcx)
063bebc9 movl      $0x20,0x34(%rcx)
063bebd0 movb      $3,0x38(%rcx)
063bebd4 mov       (%rsp),%r10
063bebd8 mov       8(%rsp),%r9
063bebdd mov       %r10,(%rcx)
063bebe0 mov       %r9,8(%rcx)
063bebe4 mov       0x10(%rsp),%r10
063bebe9 mov       0x18(%rsp),%r9
063bebee mov       %r10,0x10(%rcx)
063bebf2 mov       %r9,0x18(%rcx)
063bebf6 mov       %rdx,0x20(%rcx)
063bebfa mov       %r8,0x28(%rcx)
063bebfe add       $0x30,%rsp
063bec02 ret

core::fmt::USIZE_MARKER::closure$0:
063bec10 sub       $0x48,%rsp
063bec14 mov       %rdx,0x20(%rsp)
063bec19 mov       %rcx,%rax
063bec1c mov       0x20(%rsp),%rcx
063bec21 mov       %rax,0x28(%rsp)
063bec26 mov       %rcx,0x30(%rsp)
063bec2b mov       %r8,0x38(%rsp)
063bec30 call      0x0000`0000`063B`73E0
063bec35 mov       %rax,0x40(%rsp)
063bec3a jmp       0x0000`0000`063B`EC3A

core::fmt::ArgumentV1::new<char>:
063bec40 sub       $0x48,%rsp
063bec44 mov       %rcx,8(%rsp)
063bec49 mov       %rcx,0x28(%rsp)
063bec4e mov       %rdx,0x30(%rsp)
063bec53 mov       %rdx,0x38(%rsp)
063bec58 mov       0x38(%rsp),%rax
063bec5d mov       %rax,0x10(%rsp)
063bec62 mov       8(%rsp),%rax
063bec67 mov       %rax,0x40(%rsp)
063bec6c mov       0x40(%rsp),%rax
063bec71 mov       %rax,(%rsp)
063bec75 mov       0x10(%rsp),%rax
063bec7a mov       (%rsp),%rcx
063bec7e mov       %rcx,0x18(%rsp)
063bec83 mov       %rax,0x20(%rsp)
063bec88 mov       0x18(%rsp),%rax
063bec8d mov       0x20(%rsp),%rdx
063bec92 add       $0x48,%rsp
063bec96 ret

core::fmt::ArgumentV1::new<str>:
063beca0 sub       $0x48,%rsp
063beca4 mov       %rcx,8(%rsp)
063beca9 mov       %rcx,0x28(%rsp)
063becae mov       %rdx,0x30(%rsp)
063becb3 mov       %rdx,0x38(%rsp)
063becb8 mov       0x38(%rsp),%rax
063becbd mov       %rax,0x10(%rsp)
063becc2 mov       8(%rsp),%rax
063becc7 mov       %rax,0x40(%rsp)
063beccc mov       0x40(%rsp),%rax
063becd1 mov       %rax,(%rsp)
063becd5 mov       0x10(%rsp),%rax
063becda mov       (%rsp),%rcx
063becde mov       %rcx,0x18(%rsp)
063bece3 mov       %rax,0x20(%rsp)
063bece8 mov       0x18(%rsp),%rax
063beced mov       0x20(%rsp),%rdx
063becf2 add       $0x48,%rsp
063becf6 ret

core::fmt::ArgumentV1::new<usize>:
063bed00 sub       $0x48,%rsp
063bed04 mov       %rcx,8(%rsp)
063bed09 mov       %rcx,0x28(%rsp)
063bed0e mov       %rdx,0x30(%rsp)
063bed13 mov       %rdx,0x38(%rsp)
063bed18 mov       0x38(%rsp),%rax
063bed1d mov       %rax,0x10(%rsp)
063bed22 mov       8(%rsp),%rax
063bed27 mov       %rax,0x40(%rsp)
063bed2c mov       0x40(%rsp),%rax
063bed31 mov       %rax,(%rsp)
063bed35 mov       0x10(%rsp),%rax
063bed3a mov       (%rsp),%rcx
063bed3e mov       %rcx,0x18(%rsp)
063bed43 mov       %rax,0x20(%rsp)
063bed48 mov       0x18(%rsp),%rax
063bed4d mov       0x20(%rsp),%rdx
063bed52 add       $0x48,%rsp
063bed56 ret

core::fmt::ArgumentV1::new<core::ops::range::Range<usize> >:
063bed60 sub       $0x48,%rsp
063bed64 mov       %rcx,8(%rsp)
063bed69 mov       %rcx,0x28(%rsp)
063bed6e mov       %rdx,0x30(%rsp)
063bed73 mov       %rdx,0x38(%rsp)
063bed78 mov       0x38(%rsp),%rax
063bed7d mov       %rax,0x10(%rsp)
063bed82 mov       8(%rsp),%rax
063bed87 mov       %rax,0x40(%rsp)
063bed8c mov       0x40(%rsp),%rax
063bed91 mov       %rax,(%rsp)
063bed95 mov       0x10(%rsp),%rax
063bed9a mov       (%rsp),%rcx
063bed9e mov       %rcx,0x18(%rsp)
063beda3 mov       %rax,0x20(%rsp)
063beda8 mov       0x18(%rsp),%rax
063bedad mov       0x20(%rsp),%rdx
063bedb2 add       $0x48,%rsp
063bedb6 ret

core::fmt::ArgumentV1::new<core::fmt::Arguments>:
063bedc0 sub       $0x48,%rsp
063bedc4 mov       %rcx,8(%rsp)
063bedc9 mov       %rcx,0x28(%rsp)
063bedce mov       %rdx,0x30(%rsp)
063bedd3 mov       %rdx,0x38(%rsp)
063bedd8 mov       0x38(%rsp),%rax
063beddd mov       %rax,0x10(%rsp)
063bede2 mov       8(%rsp),%rax
063bede7 mov       %rax,0x40(%rsp)
063bedec mov       0x40(%rsp),%rax
063bedf1 mov       %rax,(%rsp)
063bedf5 mov       0x10(%rsp),%rax
063bedfa mov       (%rsp),%rcx
063bedfe mov       %rcx,0x18(%rsp)
063bee03 mov       %rax,0x20(%rsp)
063bee08 mov       0x18(%rsp),%rax
063bee0d mov       0x20(%rsp),%rdx
063bee12 add       $0x48,%rsp
063bee16 ret

core::fmt::ArgumentV1::new<ref$<core::fmt::Arguments> >:
063bee20 sub       $0x48,%rsp
063bee24 mov       %rcx,8(%rsp)
063bee29 mov       %rcx,0x28(%rsp)
063bee2e mov       %rdx,0x30(%rsp)
063bee33 mov       %rdx,0x38(%rsp)
063bee38 mov       0x38(%rsp),%rax
063bee3d mov       %rax,0x10(%rsp)
063bee42 mov       8(%rsp),%rax
063bee47 mov       %rax,0x40(%rsp)
063bee4c mov       0x40(%rsp),%rax
063bee51 mov       %rax,(%rsp)
063bee55 mov       0x10(%rsp),%rax
063bee5a mov       (%rsp),%rcx
063bee5e mov       %rcx,0x18(%rsp)
063bee63 mov       %rax,0x20(%rsp)
063bee68 mov       0x18(%rsp),%rax
063bee6d mov       0x20(%rsp),%rdx
063bee72 add       $0x48,%rsp
063bee76 ret

core::fmt::ArgumentV1::new<ref$<dyn$<core::fmt::Debug> > >:
063bee80 sub       $0x48,%rsp
063bee84 mov       %rcx,8(%rsp)
063bee89 mov       %rcx,0x28(%rsp)
063bee8e mov       %rdx,0x30(%rsp)
063bee93 mov       %rdx,0x38(%rsp)
063bee98 mov       0x38(%rsp),%rax
063bee9d mov       %rax,0x10(%rsp)
063beea2 mov       8(%rsp),%rax
063beea7 mov       %rax,0x40(%rsp)
063beeac mov       0x40(%rsp),%rax
063beeb1 mov       %rax,(%rsp)
063beeb5 mov       0x10(%rsp),%rax
063beeba mov       (%rsp),%rcx
063beebe mov       %rcx,0x18(%rsp)
063beec3 mov       %rax,0x20(%rsp)
063beec8 mov       0x18(%rsp),%rax
063beecd mov       0x20(%rsp),%rdx
063beed2 add       $0x48,%rsp
063beed6 ret

core::fmt::ArgumentV1::new<u8>:
063beee0 sub       $0x48,%rsp
063beee4 mov       %rcx,8(%rsp)
063beee9 mov       %rcx,0x28(%rsp)
063beeee mov       %rdx,0x30(%rsp)
063beef3 mov       %rdx,0x38(%rsp)
063beef8 mov       0x38(%rsp),%rax
063beefd mov       %rax,0x10(%rsp)
063bef02 mov       8(%rsp),%rax
063bef07 mov       %rax,0x40(%rsp)
063bef0c mov       0x40(%rsp),%rax
063bef11 mov       %rax,(%rsp)
063bef15 mov       0x10(%rsp),%rax
063bef1a mov       (%rsp),%rcx
063bef1e mov       %rcx,0x18(%rsp)
063bef23 mov       %rax,0x20(%rsp)
063bef28 mov       0x18(%rsp),%rax
063bef2d mov       0x20(%rsp),%rdx
063bef32 add       $0x48,%rsp
063bef36 ret

core::fmt::ArgumentV1::new<u32>:
063bef40 sub       $0x48,%rsp
063bef44 mov       %rcx,8(%rsp)
063bef49 mov       %rcx,0x28(%rsp)
063bef4e mov       %rdx,0x30(%rsp)
063bef53 mov       %rdx,0x38(%rsp)
063bef58 mov       0x38(%rsp),%rax
063bef5d mov       %rax,0x10(%rsp)
063bef62 mov       8(%rsp),%rax
063bef67 mov       %rax,0x40(%rsp)
063bef6c mov       0x40(%rsp),%rax
063bef71 mov       %rax,(%rsp)
063bef75 mov       0x10(%rsp),%rax
063bef7a mov       (%rsp),%rcx
063bef7e mov       %rcx,0x18(%rsp)
063bef83 mov       %rax,0x20(%rsp)
063bef88 mov       0x18(%rsp),%rax
063bef8d mov       0x20(%rsp),%rdx
063bef92 add       $0x48,%rsp
063bef96 ret

core::fmt::ArgumentV1::as_usize:
063befa0 sub       $0x20,%rsp
063befa4 mov       %rcx,(%rsp)
063befa8 mov       %rcx,0x18(%rsp)
063befad mov       8(%rcx),%rax
063befb1 mov       0x63D`09B8,%rcx
063befb8 cmp       %rcx,%rax
063befbb je        0x0000`0000`063B`EFC8
063befbd movq      $0,8(%rsp)
063befc6 jmp       0x0000`0000`063B`EFE0
063befc8 mov       (%rsp),%rax
063befcc mov       (%rax),%rax
063befcf mov       (%rax),%rax
063befd2 mov       %rax,0x10(%rsp)
063befd7 movq      $1,8(%rsp)
063befe0 mov       8(%rsp),%rax
063befe5 mov       0x10(%rsp),%rdx
063befea add       $0x20,%rsp
063befee ret

core::fmt::Arguments::new_v1:
063beff0 sub       $0xC8,%rsp
063beff7 mov       %r9,0x30(%rsp)
063beffc mov       %r8,0x38(%rsp)
063bf001 mov       %rdx,0x40(%rsp)
063bf006 mov       %rcx,0x48(%rsp)
063bf00b mov       %rcx,0x50(%rsp)
063bf010 mov       0xF0(%rsp),%rax
063bf018 mov       %rax,0x58(%rsp)
063bf01d mov       %rdx,0xA8(%rsp)
063bf025 mov       %r8,0xB0(%rsp)
063bf02d mov       %r9,0xB8(%rsp)
063bf035 mov       %rax,0xC0(%rsp)
063bf03d cmp       %rax,%r8
063bf040 jb        0x0000`0000`063B`F059
063bf042 mov       0x58(%rsp),%rax
063bf047 add       $1,%rax
063bf04b mov       %rax,0x28(%rsp)
063bf050 setb      %al
063bf053 test      $1,%al
063bf055 jne       0x0000`0000`063B`F083
063bf057 jmp       0x0000`0000`063B`F06B
063bf059 movb      $1,0x67(%rsp)
063bf05e testb     $1,0x67(%rsp)
063bf063 jne       0x0000`0000`063B`F0F6
063bf069 jmp       0x0000`0000`063B`F09D
063bf06b mov       0x38(%rsp),%rax
063bf070 mov       0x28(%rsp),%rcx
063bf075 cmp       %rcx,%rax
063bf078 seta      %al
063bf07b and       $1,%al
063bf07d mov       %al,0x67(%rsp)
063bf081 jmp       0x0000`0000`063B`F05E
063bf083 lea       0x63C`F3E0,%rcx
063bf08a lea       0x63D`0A38,%r8
063bf091 mov       $0x1C,%edx
063bf096 call      0x0000`0000`063B`9FF0
063bf09b ud2
063bf09d mov       0x50(%rsp),%rax
063bf0a2 mov       0x48(%rsp),%rcx
063bf0a7 mov       0x58(%rsp),%rdx
063bf0ac mov       0x30(%rsp),%r8
063bf0b1 mov       0x38(%rsp),%r9
063bf0b6 mov       0x40(%rsp),%r10
063bf0bb movq      $0,0x98(%rsp)
063bf0c7 mov       %r10,(%rcx)
063bf0ca mov       %r9,8(%rcx)
063bf0ce mov       0x98(%rsp),%r10
063bf0d6 mov       0xA0(%rsp),%r9
063bf0de mov       %r10,0x10(%rcx)
063bf0e2 mov       %r9,0x18(%rcx)
063bf0e6 mov       %r8,0x20(%rcx)
063bf0ea mov       %rdx,0x28(%rcx)
063bf0ee add       $0xC8,%rsp
063bf0f5 ret
063bf0f6 lea       0x68(%rsp),%rcx
063bf0fb lea       0x63D`0A60,%rdx
063bf102 mov       $1,%r8d
063bf108 lea       0x63C`F530,%r9
063bf10f xor       %eax,%eax
063bf111 movq      $0,0x20(%rsp)
063bf11a call      0x0000`0000`063B`EFF0
063bf11f lea       0x63D`0A70,%rdx
063bf126 lea       0x68(%rsp),%rcx
063bf12b call      0x0000`0000`063B`A100
063bf130 ud2

core::fmt::impl$7::fmt:
063bf140 sub       $0x78,%rsp
063bf144 mov       %rdx,%rax
063bf147 mov       %rcx,%rdx
063bf14a mov       %rdx,0x68(%rsp)
063bf14f mov       %rax,0x70(%rsp)
063bf154 mov       0x20(%rax),%rcx
063bf158 mov       %rcx,0x20(%rsp)
063bf15d mov       0x28(%rax),%rax
063bf161 mov       %rax,0x28(%rsp)
063bf166 lea       0x38(%rsp),%rcx
063bf16b mov       $0x30,%r8d
063bf171 call      0x0000`0000`063C`BD50
063bf176 mov       0x20(%rsp),%rcx
063bf17b mov       0x28(%rsp),%rdx
063bf180 lea       0x38(%rsp),%r8
063bf185 call      0x0000`0000`063B`F1A0
063bf18a mov       %al,0x37(%rsp)
063bf18e mov       0x37(%rsp),%al
063bf192 and       $1,%al
063bf194 movzbl    %al,%eax
063bf197 add       $0x78,%rsp
063bf19b ret

core::fmt::write:
063bf1a0 sub       $0x258,%rsp
063bf1a7 mov       %r8,0x88(%rsp)
063bf1af mov       %rdx,%r8
063bf1b2 mov       %rcx,%rdx
063bf1b5 mov       %rdx,0x1B0(%rsp)
063bf1bd mov       %r8,0x1B8(%rsp)
063bf1c5 lea       0x98(%rsp),%rcx
063bf1cd call      0x0000`0000`063B`EBA0
063bf1d2 mov       0x88(%rsp),%rax
063bf1da movq      $0,0xD8(%rsp)
063bf1e6 mov       0x10(%rax),%rax
063bf1ea test      %rax,%rax
063bf1ed setne     %al
063bf1f0 movzbl    %al,%eax
063bf1f3 je        0x0000`0000`063B`F1FB
063bf1f5 jmp       0x0000`0000`063B`F1F7
063bf1f7 jmp       0x0000`0000`063B`F222
063bf1f9 ud2
063bf1fb mov       0x88(%rsp),%rax
063bf203 mov       0x20(%rax),%rcx
063bf207 mov       0x28(%rax),%rdx
063bf20b call      0x0000`0000`063C`3E60
063bf210 mov       %rax,0x78(%rsp)
063bf215 mov       %rdx,0x80(%rsp)
063bf21d jmp       0x0000`0000`063B`F490
063bf222 mov       0x88(%rsp),%rax
063bf22a mov       0x10(%rax),%rcx
063bf22e mov       0x18(%rax),%rdx
063bf232 mov       %rcx,0x210(%rsp)
063bf23a mov       %rdx,0x218(%rsp)
063bf242 call      0x0000`0000`063C`3F20
063bf247 mov       %rax,0x68(%rsp)
063bf24c mov       %rdx,0x70(%rsp)
063bf251 mov       0x70(%rsp),%r8
063bf256 mov       0x68(%rsp),%rdx
063bf25b lea       0x158(%rsp),%rcx
063bf263 call      0x0000`0000`063B`9380
063bf268 lea       0x140(%rsp),%rcx
063bf270 lea       0x158(%rsp),%rdx
063bf278 call      0x0000`0000`063B`9090
063bf27d mov       0x140(%rsp),%rax
063bf285 mov       %rax,0x170(%rsp)
063bf28d mov       0x148(%rsp),%rax
063bf295 mov       %rax,0x178(%rsp)
063bf29d mov       0x150(%rsp),%rax
063bf2a5 mov       %rax,0x180(%rsp)
063bf2ad lea       0x170(%rsp),%rcx
063bf2b5 call      0x0000`0000`063B`8C70
063bf2ba mov       %rdx,0x190(%rsp)
063bf2c2 mov       %rax,0x188(%rsp)
063bf2ca mov       0x190(%rsp),%rax
063bf2d2 test      %rax,%rax
063bf2d5 setne     %al
063bf2d8 movzbl    %al,%eax
063bf2db je        0x0000`0000`063B`F2E3
063bf2dd jmp       0x0000`0000`063B`F2DF
063bf2df jmp       0x0000`0000`063B`F30C
063bf2e1 ud2
063bf2e3 mov       0x88(%rsp),%rax
063bf2eb mov       (%rax),%rcx
063bf2ee mov       8(%rax),%rdx
063bf2f2 mov       0xD8(%rsp),%r8
063bf2fa call      0x0000`0000`063C`3A90
063bf2ff mov       %rax,0x1A0(%rsp)
063bf307 jmp       0x0000`0000`063B`F695
063bf30c mov       0x88(%rsp),%rax
063bf314 mov       0x188(%rsp),%r8
063bf31c mov       %r8,0x220(%rsp)
063bf324 mov       0x190(%rsp),%rcx
063bf32c mov       %rcx,0x58(%rsp)
063bf331 mov       %rcx,0x228(%rsp)
063bf339 mov       (%rax),%rcx
063bf33c mov       8(%rax),%rdx
063bf340 call      0x0000`0000`063C`3BB0
063bf345 mov       %rax,0x60(%rsp)
063bf34a mov       %rax,0x230(%rsp)
063bf352 mov       0x60(%rsp),%rax
063bf357 mov       (%rax),%rcx
063bf35a mov       8(%rax),%rdx
063bf35e call      0x0000`0000`063C`7670
063bf363 mov       %al,0x57(%rsp)
063bf367 mov       0x57(%rsp),%al
063bf36b xor       $0xFF,%al
063bf36d test      $1,%al
063bf36f jne       0x0000`0000`063B`F399
063bf371 mov       0x58(%rsp),%rdx
063bf376 mov       0x88(%rsp),%rax
063bf37e mov       0x20(%rax),%r8
063bf382 mov       0x28(%rax),%r9
063bf386 lea       0x98(%rsp),%rcx
063bf38e call      0x0000`0000`063B`F730
063bf393 mov       %al,0x56(%rsp)
063bf397 jmp       0x0000`0000`063B`F40C
063bf399 mov       0x60(%rsp),%r8
063bf39e mov       0xB8(%rsp),%rcx
063bf3a6 mov       0xC0(%rsp),%rax
063bf3ae mov       (%r8),%rdx
063bf3b1 mov       8(%r8),%r8
063bf3b5 callq     *0x18(%rax)
063bf3b8 mov       %al,0x55(%rsp)
063bf3bc mov       0x55(%rsp),%cl
063bf3c0 and       $1,%cl
063bf3c3 call      0x0000`0000`063B`A8B0
063bf3c8 and       $1,%al
063bf3ca mov       %al,0x19E(%rsp)
063bf3d1 movzbl    0x19E(%rsp),%eax
063bf3d9 test      $1,%al
063bf3db je        0x0000`0000`063B`F371
063bf3dd jmp       0x0000`0000`063B`F3DF
063bf3df jmp       0x0000`0000`063B`F3E3
063bf3e1 ud2
063bf3e3 lea       0x63D`0A88,%rcx
063bf3ea call      0x0000`0000`063B`A930
063bf3ef and       $1,%al
063bf3f1 mov       %al,0x97(%rsp)
063bf3f8 mov       0x97(%rsp),%al
063bf3ff and       $1,%al
063bf401 movzbl    %al,%eax
063bf404 add       $0x258,%rsp
063bf40b ret
063bf40c mov       0x56(%rsp),%cl
063bf410 and       $1,%cl
063bf413 call      0x0000`0000`063B`A8B0
063bf418 and       $1,%al
063bf41a mov       %al,0x19F(%rsp)
063bf421 movzbl    0x19F(%rsp),%eax
063bf429 test      $1,%al
063bf42b je        0x0000`0000`063B`F433
063bf42d jmp       0x0000`0000`063B`F42F
063bf42f jmp       0x0000`0000`063B`F44D
063bf431 ud2
063bf433 mov       0xD8(%rsp),%rax
063bf43b add       $1,%rax
063bf43f mov       %rax,0x48(%rsp)
063bf444 setb      %al
063bf447 test      $1,%al
063bf449 jne       0x0000`0000`063B`F476
063bf44b jmp       0x0000`0000`063B`F464
063bf44d lea       0x63D`0AA0,%rcx
063bf454 call      0x0000`0000`063B`A930
063bf459 and       $1,%al
063bf45b mov       %al,0x97(%rsp)
063bf462 jmp       0x0000`0000`063B`F3F8
063bf464 mov       0x48(%rsp),%rax
063bf469 mov       %rax,0xD8(%rsp)
063bf471 jmp       0x0000`0000`063B`F2AD
063bf476 lea       0x63C`F3E0,%rcx
063bf47d lea       0x63D`0AB8,%r8
063bf484 mov       $0x1C,%edx
063bf489 call      0x0000`0000`063B`9FF0
063bf48e ud2
063bf490 mov       0x80(%rsp),%r8
063bf498 mov       0x78(%rsp),%rdx
063bf49d lea       0xF8(%rsp),%rcx
063bf4a5 call      0x0000`0000`063B`93B0
063bf4aa lea       0xE0(%rsp),%rcx
063bf4b2 lea       0xF8(%rsp),%rdx
063bf4ba call      0x0000`0000`063B`9070
063bf4bf mov       0xE0(%rsp),%rax
063bf4c7 mov       %rax,0x110(%rsp)
063bf4cf mov       0xE8(%rsp),%rax
063bf4d7 mov       %rax,0x118(%rsp)
063bf4df mov       0xF0(%rsp),%rax
063bf4e7 mov       %rax,0x120(%rsp)
063bf4ef lea       0x110(%rsp),%rcx
063bf4f7 call      0x0000`0000`063B`8B70
063bf4fc mov       %rdx,0x130(%rsp)
063bf504 mov       %rax,0x128(%rsp)
063bf50c mov       0x130(%rsp),%rax
063bf514 test      %rax,%rax
063bf517 setne     %al
063bf51a movzbl    %al,%eax
063bf51d je        0x0000`0000`063B`F2E3
063bf523 jmp       0x0000`0000`063B`F525
063bf525 jmp       0x0000`0000`063B`F529
063bf527 ud2
063bf529 mov       0x88(%rsp),%rax
063bf531 mov       0x128(%rsp),%r8
063bf539 mov       %r8,0x238(%rsp)
063bf541 mov       0x130(%rsp),%rcx
063bf549 mov       %rcx,0x38(%rsp)
063bf54e mov       %rcx,0x240(%rsp)
063bf556 mov       (%rax),%rcx
063bf559 mov       8(%rax),%rdx
063bf55d call      0x0000`0000`063C`3BB0
063bf562 mov       %rax,0x40(%rsp)
063bf567 mov       %rax,0x248(%rsp)
063bf56f mov       0x40(%rsp),%rax
063bf574 mov       (%rax),%rcx
063bf577 mov       8(%rax),%rdx
063bf57b call      0x0000`0000`063C`7670
063bf580 mov       %al,0x37(%rsp)
063bf584 mov       0x37(%rsp),%al
063bf588 xor       $0xFF,%al
063bf58a test      $1,%al
063bf58c jne       0x0000`0000`063B`F5AA
063bf58e mov       0x38(%rsp),%rcx
063bf593 mov       8(%rcx),%rax
063bf597 mov       (%rcx),%rcx
063bf59a lea       0x98(%rsp),%rdx
063bf5a2 call      *%rax
063bf5a4 mov       %al,0x36(%rsp)
063bf5a8 jmp       0x0000`0000`063B`F60E
063bf5aa mov       0x40(%rsp),%r8
063bf5af mov       0xB8(%rsp),%rcx
063bf5b7 mov       0xC0(%rsp),%rax
063bf5bf mov       (%r8),%rdx
063bf5c2 mov       8(%r8),%r8
063bf5c6 callq     *0x18(%rax)
063bf5c9 mov       %al,0x35(%rsp)
063bf5cd mov       0x35(%rsp),%cl
063bf5d1 and       $1,%cl
063bf5d4 call      0x0000`0000`063B`A8B0
063bf5d9 and       $1,%al
063bf5db mov       %al,0x13E(%rsp)
063bf5e2 movzbl    0x13E(%rsp),%eax
063bf5ea test      $1,%al
063bf5ec je        0x0000`0000`063B`F58E
063bf5ee jmp       0x0000`0000`063B`F5F0
063bf5f0 jmp       0x0000`0000`063B`F5F4
063bf5f2 ud2
063bf5f4 lea       0x63D`0AD0,%rcx
063bf5fb call      0x0000`0000`063B`A930
063bf600 and       $1,%al
063bf602 mov       %al,0x97(%rsp)
063bf609 jmp       0x0000`0000`063B`F3F8
063bf60e mov       0x36(%rsp),%cl
063bf612 and       $1,%cl
063bf615 call      0x0000`0000`063B`A8B0
063bf61a and       $1,%al
063bf61c mov       %al,0x13F(%rsp)
063bf623 movzbl    0x13F(%rsp),%eax
063bf62b test      $1,%al
063bf62d je        0x0000`0000`063B`F635
063bf62f jmp       0x0000`0000`063B`F631
063bf631 jmp       0x0000`0000`063B`F64F
063bf633 ud2
063bf635 mov       0xD8(%rsp),%rax
063bf63d add       $1,%rax
063bf641 mov       %rax,0x28(%rsp)
063bf646 setb      %al
063bf649 test      $1,%al
063bf64b jne       0x0000`0000`063B`F67B
063bf64d jmp       0x0000`0000`063B`F669
063bf64f lea       0x63D`0AE8,%rcx
063bf656 call      0x0000`0000`063B`A930
063bf65b and       $1,%al
063bf65d mov       %al,0x97(%rsp)
063bf664 jmp       0x0000`0000`063B`F3F8
063bf669 mov       0x28(%rsp),%rax
063bf66e mov       %rax,0xD8(%rsp)
063bf676 jmp       0x0000`0000`063B`F4EF
063bf67b lea       0x63C`F3E0,%rcx
063bf682 lea       0x63D`0B00,%r8
063bf689 mov       $0x1C,%edx
063bf68e call      0x0000`0000`063B`9FF0
063bf693 ud2
063bf695 mov       $1,%eax
063bf69a xor       %ecx,%ecx
063bf69c cmpq      $0,0x1A0(%rsp)
063bf6a5 cmove     %rcx,%rax
063bf6a9 cmp       $1,%rax
063bf6ad jne       0x0000`0000`063B`F6DF
063bf6af mov       0x1A0(%rsp),%r8
063bf6b7 mov       %r8,0x250(%rsp)
063bf6bf mov       0xB8(%rsp),%rcx
063bf6c7 mov       0xC0(%rsp),%rax
063bf6cf mov       (%r8),%rdx
063bf6d2 mov       8(%r8),%r8
063bf6d6 callq     *0x18(%rax)
063bf6d9 mov       %al,0x27(%rsp)
063bf6dd jmp       0x0000`0000`063B`F6EC
063bf6df movb      $0,0x97(%rsp)
063bf6e7 jmp       0x0000`0000`063B`F3F8
063bf6ec mov       0x27(%rsp),%cl
063bf6f0 and       $1,%cl
063bf6f3 call      0x0000`0000`063B`A8B0
063bf6f8 and       $1,%al
063bf6fa mov       %al,0x1AF(%rsp)
063bf701 movzbl    0x1AF(%rsp),%eax
063bf709 test      $1,%al
063bf70b je        0x0000`0000`063B`F6DF
063bf70d jmp       0x0000`0000`063B`F70F
063bf70f jmp       0x0000`0000`063B`F713
063bf711 ud2
063bf713 lea       0x63D`0B18,%rcx
063bf71a call      0x0000`0000`063B`A930
063bf71f and       $1,%al
063bf721 mov       %al,0x97(%rsp)
063bf728 jmp       0x0000`0000`063B`F3F8

core::fmt::run:
063bf730 sub       $0x98,%rsp
063bf737 mov       %r9,0x40(%rsp)
063bf73c mov       %r8,0x50(%rsp)
063bf741 mov       %rdx,%r8
063bf744 mov       0x40(%rsp),%rdx
063bf749 mov       %r8,0x48(%rsp)
063bf74e mov       %rcx,%rax
063bf751 mov       0x50(%rsp),%rcx
063bf756 mov       %rax,0x58(%rsp)
063bf75b mov       %rax,0x70(%rsp)
063bf760 mov       %r8,0x78(%rsp)
063bf765 mov       %rcx,0x80(%rsp)
063bf76d mov       %rdx,0x88(%rsp)
063bf775 mov       0x28(%r8),%r9d
063bf779 mov       %r9d,0x34(%rax)
063bf77d mov       0x30(%r8),%r9b
063bf781 mov       %r9b,0x38(%rax)
063bf785 mov       0x2C(%r8),%r9d
063bf789 mov       %r9d,0x30(%rax)
063bf78d add       $8,%r8
063bf791 add       $0x10,%r8
063bf795 call      0x0000`0000`063B`F880
063bf79a mov       %rax,0x60(%rsp)
063bf79f mov       %rdx,0x68(%rsp)
063bf7a4 mov       0x40(%rsp),%rdx
063bf7a9 mov       0x50(%rsp),%rcx
063bf7ae mov       0x48(%rsp),%r8
063bf7b3 mov       0x58(%rsp),%rax
063bf7b8 mov       0x68(%rsp),%r9
063bf7bd mov       0x60(%rsp),%r10
063bf7c2 mov       %r10,(%rax)
063bf7c5 mov       %r9,8(%rax)
063bf7c9 add       $8,%r8
063bf7cd call      0x0000`0000`063B`F880
063bf7d2 mov       %rax,0x30(%rsp)
063bf7d7 mov       %rdx,0x38(%rsp)
063bf7dc mov       0x48(%rsp),%rax
063bf7e1 mov       0x40(%rsp),%rcx
063bf7e6 mov       0x58(%rsp),%rdx
063bf7eb mov       0x38(%rsp),%r8
063bf7f0 mov       0x30(%rsp),%r9
063bf7f5 mov       %r9,0x10(%rdx)
063bf7f9 mov       %r8,0x18(%rdx)
063bf7fd cmp       %rcx,(%rax)
063bf800 setb      %al
063bf803 xor       $0xFF,%al
063bf805 test      $1,%al
063bf807 jne       0x0000`0000`063B`F82F
063bf809 mov       0x40(%rsp),%rdx
063bf80e mov       0x50(%rsp),%rcx
063bf813 mov       0x48(%rsp),%rax
063bf818 mov       (%rax),%r8
063bf81b call      0x0000`0000`063C`3B20
063bf820 mov       %rax,0x28(%rsp)
063bf825 mov       %rax,0x90(%rsp)
063bf82d jmp       0x0000`0000`063B`F849
063bf82f lea       0x63D`0B30,%rcx
063bf836 lea       0x63D`0B60,%r8
063bf83d mov       $0x2B,%edx
063bf842 call      0x0000`0000`063B`9FF0
063bf847 ud2
063bf849 mov       0x58(%rsp),%rdx
063bf84e mov       0x28(%rsp),%rcx
063bf853 mov       8(%rcx),%rax
063bf857 mov       (%rcx),%rcx
063bf85a call      *%rax
063bf85c mov       %al,0x27(%rsp)
063bf860 mov       0x27(%rsp),%al
063bf864 and       $1,%al
063bf866 movzbl    %al,%eax
063bf869 add       $0x98,%rsp
063bf870 ret

core::fmt::getcount:
063bf880 sub       $0x88,%rsp
063bf887 mov       %r8,0x30(%rsp)
063bf88c mov       %rdx,0x38(%rsp)
063bf891 mov       %rcx,0x40(%rsp)
063bf896 mov       %rcx,0x60(%rsp)
063bf89b mov       %rdx,0x68(%rsp)
063bf8a0 mov       %r8,0x70(%rsp)
063bf8a5 mov       (%r8),%rax
063bf8a8 mov       %rax,0x48(%rsp)
063bf8ad test      %rax,%rax
063bf8b0 je        0x0000`0000`063B`F8C5
063bf8b2 jmp       0x0000`0000`063B`F8B4
063bf8b4 mov       0x48(%rsp),%rax
063bf8b9 sub       $1,%rax
063bf8bd je        0x0000`0000`063B`F8E6
063bf8bf jmp       0x0000`0000`063B`F8C1
063bf8c1 jmp       0x0000`0000`063B`F90C
063bf8c3 ud2
063bf8c5 mov       0x30(%rsp),%rax
063bf8ca mov       8(%rax),%rax
063bf8ce mov       %rax,0x80(%rsp)
063bf8d6 mov       %rax,0x58(%rsp)
063bf8db movq      $1,0x50(%rsp)
063bf8e4 jmp       0x0000`0000`063B`F915
063bf8e6 mov       0x38(%rsp),%rcx
063bf8eb mov       0x30(%rsp),%rax
063bf8f0 mov       8(%rax),%rax
063bf8f4 mov       %rax,0x28(%rsp)
063bf8f9 mov       %rax,0x78(%rsp)
063bf8fe cmp       %rcx,%rax
063bf901 setb      %al
063bf904 xor       $0xFF,%al
063bf906 test      $1,%al
063bf908 jne       0x0000`0000`063B`F942
063bf90a jmp       0x0000`0000`063B`F927
063bf90c movq      $0,0x50(%rsp)
063bf915 mov       0x50(%rsp),%rax
063bf91a mov       0x58(%rsp),%rdx
063bf91f add       $0x88,%rsp
063bf926 ret
063bf927 mov       0x28(%rsp),%r8
063bf92c mov       0x38(%rsp),%rdx
063bf931 mov       0x40(%rsp),%rcx
063bf936 call      0x0000`0000`063C`3B20
063bf93b mov       %rax,0x20(%rsp)
063bf940 jmp       0x0000`0000`063B`F95C
063bf942 lea       0x63D`0B78,%rcx
063bf949 lea       0x63D`0B98,%r8
063bf950 mov       $0x20,%edx
063bf955 call      0x0000`0000`063B`9FF0
063bf95a ud2
063bf95c mov       0x20(%rsp),%rcx
063bf961 call      0x0000`0000`063B`EFA0
063bf966 mov       %rdx,0x58(%rsp)
063bf96b mov       %rax,0x50(%rsp)
063bf970 jmp       0x0000`0000`063B`F915

core::fmt::PostPadding::new:
063bf980 sub       $0x20,%rsp
063bf984 mov       %ecx,0x14(%rsp)
063bf988 mov       %rdx,0x18(%rsp)
063bf98d mov       %ecx,8(%rsp)
063bf991 mov       %rdx,(%rsp)
063bf995 mov       (%rsp),%rax
063bf999 mov       8(%rsp),%edx
063bf99d add       $0x20,%rsp
063bf9a1 ret

core::fmt::PostPadding::write:
063bf9b0 sub       $0xB8,%rsp
063bf9b7 mov       %r8,0x30(%rsp)
063bf9bc mov       %edx,0x3C(%rsp)
063bf9c0 mov       %rcx,0x90(%rsp)
063bf9c8 mov       %edx,0x98(%rsp)
063bf9cf mov       %r8,0xA0(%rsp)
063bf9d7 movq      $0,0x58(%rsp)
063bf9e0 mov       %rcx,0x60(%rsp)
063bf9e5 mov       0x58(%rsp),%rcx
063bf9ea mov       0x60(%rsp),%rdx
063bf9ef call      0x0000`0000`063B`90F0
063bf9f4 mov       %rax,0x40(%rsp)
063bf9f9 mov       %rdx,0x48(%rsp)
063bf9fe mov       0x48(%rsp),%rax
063bfa03 mov       0x40(%rsp),%rcx
063bfa08 mov       %rcx,0x68(%rsp)
063bfa0d mov       %rax,0x70(%rsp)
063bfa12 lea       0x68(%rsp),%rcx
063bfa17 call      0x0000`0000`063B`9040
063bfa1c mov       %rdx,0x80(%rsp)
063bfa24 mov       %rax,0x78(%rsp)
063bfa29 mov       0x78(%rsp),%rax
063bfa2e test      %rax,%rax
063bfa31 je        0x0000`0000`063B`FA39
063bfa33 jmp       0x0000`0000`063B`FA35
063bfa35 jmp       0x0000`0000`063B`FA40
063bfa37 ud2
063bfa39 movb      $0,0x57(%rsp)
063bfa3e jmp       0x0000`0000`063B`FA91
063bfa40 mov       0x3C(%rsp),%edx
063bfa44 mov       0x30(%rsp),%rax
063bfa49 mov       0x20(%rax),%rcx
063bfa4d mov       0x28(%rax),%rax
063bfa51 callq     *0x20(%rax)
063bfa54 mov       %al,0x2F(%rsp)
063bfa58 mov       0x2F(%rsp),%cl
063bfa5c and       $1,%cl
063bfa5f call      0x0000`0000`063B`A8B0
063bfa64 and       $1,%al
063bfa66 mov       %al,0x8F(%rsp)
063bfa6d movzbl    0x8F(%rsp),%eax
063bfa75 test      $1,%al
063bfa77 je        0x0000`0000`063B`FA12
063bfa79 jmp       0x0000`0000`063B`FA7B
063bfa7b jmp       0x0000`0000`063B`FA7F
063bfa7d ud2
063bfa7f lea       0x63D`0BB0,%rcx
063bfa86 call      0x0000`0000`063B`A930
063bfa8b and       $1,%al
063bfa8d mov       %al,0x57(%rsp)
063bfa91 mov       0x57(%rsp),%al
063bfa95 and       $1,%al
063bfa97 movzbl    %al,%eax
063bfa9a add       $0xB8,%rsp
063bfaa1 ret

core::fmt::Formatter::wrap_buf<core::fmt::builders::impl$1::wrap::closure_env$0>:
063bfab0 push      %rsi
063bfab1 push      %rdi
063bfab2 push      %rbp
063bfab3 push      %rbx
063bfab4 sub       $0x88,%rsp
063bfabb mov       %r9,0x28(%rsp)
063bfac0 mov       %r8,0x38(%rsp)
063bfac5 mov       %rdx,%rax
063bfac8 mov       0x28(%rsp),%rdx
063bfacd mov       %rax,0x30(%rsp)
063bfad2 mov       %rcx,%r8
063bfad5 mov       0x38(%rsp),%rcx
063bfada mov       %r8,0x40(%rsp)
063bfadf mov       %r8,0x48(%rsp)
063bfae4 mov       %rax,0x70(%rsp)
063bfae9 mov       %rcx,0x78(%rsp)
063bfaee mov       %rdx,0x80(%rsp)
063bfaf6 mov       0x20(%rax),%r8
063bfafa mov       0x28(%rax),%rax
063bfafe mov       %r8,0x60(%rsp)
063bfb03 mov       %rax,0x68(%rsp)
063bfb08 mov       0x60(%rsp),%r8
063bfb0d mov       0x68(%rsp),%r9
063bfb12 call      0x0000`0000`063B`AAE0
063bfb17 mov       %rax,0x50(%rsp)
063bfb1c mov       %rdx,0x58(%rsp)
063bfb21 mov       0x48(%rsp),%rax
063bfb26 mov       0x40(%rsp),%rcx
063bfb2b mov       0x58(%rsp),%rdx
063bfb30 mov       0x50(%rsp),%r8
063bfb35 mov       0x30(%rsp),%r9
063bfb3a mov       0x30(%r9),%ebp
063bfb3e mov       0x34(%r9),%edi
063bfb42 mov       0x38(%r9),%bl
063bfb46 mov       (%r9),%rsi
063bfb49 mov       8(%r9),%r11
063bfb4d mov       0x10(%r9),%r10
063bfb51 mov       0x18(%r9),%r9
063bfb55 mov       %ebp,0x30(%rcx)
063bfb58 mov       %edi,0x34(%rcx)
063bfb5b mov       %bl,0x38(%rcx)
063bfb5e mov       %rsi,(%rcx)
063bfb61 mov       %r11,8(%rcx)
063bfb65 mov       %r10,0x10(%rcx)
063bfb69 mov       %r9,0x18(%rcx)
063bfb6d mov       %r8,0x20(%rcx)
063bfb71 mov       %rdx,0x28(%rcx)
063bfb75 add       $0x88,%rsp
063bfb7c pop       %rbx
063bfb7d pop       %rbp
063bfb7e pop       %rdi
063bfb7f pop       %rsi
063bfb80 ret

core::fmt::Formatter::pad_integral:
063bfb90 sub       $0x288,%rsp
063bfb97 mov       %r9,0xE0(%rsp)
063bfb9f mov       %r8,0xE8(%rsp)
063bfba7 mov       %dl,%al
063bfba9 mov       %rcx,%r10
063bfbac mov       %r10,0xF0(%rsp)
063bfbb4 mov       0x2B8(%rsp),%rdx
063bfbbc mov       %rdx,0xF8(%rsp)
063bfbc4 mov       0x2B0(%rsp),%rcx
063bfbcc mov       %rcx,0x100(%rsp)
063bfbd4 mov       %al,0x10E(%rsp)
063bfbdb mov       %r10,0x168(%rsp)
063bfbe3 and       $1,%al
063bfbe5 mov       %al,0x177(%rsp)
063bfbec mov       %r8,0x178(%rsp)
063bfbf4 mov       %r9,0x180(%rsp)
063bfbfc mov       %rcx,0x188(%rsp)
063bfc04 mov       %rdx,0x190(%rsp)
063bfc0c call      0x0000`0000`063C`7630
063bfc11 mov       %rax,0x110(%rsp)
063bfc19 mov       0x10E(%rsp),%al
063bfc20 movl      $0x11`0000,0x11C(%rsp)
063bfc2b xor       $0xFF,%al
063bfc2d test      $1,%al
063bfc2f jne       0x0000`0000`063B`FC47
063bfc31 mov       0xF0(%rsp),%rcx
063bfc39 call      0x0000`0000`063C`0CB0
063bfc3e mov       %al,0xDF(%rsp)
063bfc45 jmp       0x0000`0000`063B`FCAF
063bfc47 movl      $0x2D,0x11C(%rsp)
063bfc52 mov       0x110(%rsp),%rax
063bfc5a add       $1,%rax
063bfc5e mov       %rax,0xD0(%rsp)
063bfc66 setb      %al
063bfc69 test      $1,%al
063bfc6b jne       0x0000`0000`063B`FC7F
063bfc6d mov       0xD0(%rsp),%rax
063bfc75 mov       %rax,0x110(%rsp)
063bfc7d jmp       0x0000`0000`063B`FC99
063bfc7f lea       0x63C`F3E0,%rcx
063bfc86 lea       0x63D`0BC8,%r8
063bfc8d mov       $0x1C,%edx
063bfc92 call      0x0000`0000`063B`9FF0
063bfc97 ud2
063bfc99 mov       0xF0(%rsp),%rcx
063bfca1 call      0x0000`0000`063C`0CD0
063bfca6 mov       %al,0xCF(%rsp)
063bfcad jmp       0x0000`0000`063B`FD0E
063bfcaf mov       0xDF(%rsp),%al
063bfcb6 test      $1,%al
063bfcb8 jne       0x0000`0000`063B`FCBC
063bfcba jmp       0x0000`0000`063B`FC99
063bfcbc movl      $0x2B,0x11C(%rsp)
063bfcc7 mov       0x110(%rsp),%rax
063bfccf add       $1,%rax
063bfcd3 mov       %rax,0xC0(%rsp)
063bfcdb setb      %al
063bfcde test      $1,%al
063bfce0 jne       0x0000`0000`063B`FCF4
063bfce2 mov       0xC0(%rsp),%rax
063bfcea mov       %rax,0x110(%rsp)
063bfcf2 jmp       0x0000`0000`063B`FC99
063bfcf4 lea       0x63C`F3E0,%rcx
063bfcfb lea       0x63D`0BE0,%r8
063bfd02 mov       $0x1C,%edx
063bfd07 call      0x0000`0000`063B`9FF0
063bfd0c ud2
063bfd0e mov       0xCF(%rsp),%al
063bfd15 test      $1,%al
063bfd17 jne       0x0000`0000`063B`FD2C
063bfd19 jmp       0x0000`0000`063B`FD1B
063bfd1b movq      $0,0x120(%rsp)
063bfd27 jmp       0x0000`0000`063B`FDD9
063bfd2c mov       0xE0(%rsp),%rdx
063bfd34 mov       0xE8(%rsp),%rcx
063bfd3c call      0x0000`0000`063C`7A10
063bfd41 mov       %rax,0xB0(%rsp)
063bfd49 mov       %rdx,0xB8(%rsp)
063bfd51 mov       0xB8(%rsp),%rdx
063bfd59 mov       0xB0(%rsp),%rcx
063bfd61 call      0x0000`0000`063C`5AF0
063bfd66 mov       %rax,0xA8(%rsp)
063bfd6e mov       0xA8(%rsp),%rax
063bfd76 add       0x110(%rsp),%rax
063bfd7e mov       %rax,0xA0(%rsp)
063bfd86 setb      %al
063bfd89 test      $1,%al
063bfd8b jne       0x0000`0000`063B`FDBF
063bfd8d mov       0xE0(%rsp),%rax
063bfd95 mov       0xE8(%rsp),%rcx
063bfd9d mov       0xA0(%rsp),%rdx
063bfda5 mov       %rdx,0x110(%rsp)
063bfdad mov       %rcx,0x120(%rsp)
063bfdb5 mov       %rax,0x128(%rsp)
063bfdbd jmp       0x0000`0000`063B`FDD9
063bfdbf lea       0x63C`F3E0,%rcx
063bfdc6 lea       0x63D`0BF8,%r8
063bfdcd mov       $0x1C,%edx
063bfdd2 call      0x0000`0000`063B`9FF0
063bfdd7 ud2
063bfdd9 mov       0xF0(%rsp),%rax
063bfde1 mov       (%rax),%rax
063bfde4 test      %rax,%rax
063bfde7 je        0x0000`0000`063B`FDEF
063bfde9 jmp       0x0000`0000`063B`FDEB
063bfdeb jmp       0x0000`0000`063B`FE1F
063bfded ud2
063bfdef mov       0xF0(%rsp),%rcx
063bfdf7 mov       0x11C(%rsp),%edx
063bfdfe mov       0x120(%rsp),%r8
063bfe06 mov       0x128(%rsp),%r9
063bfe0e call      0x0000`0000`063C`0450
063bfe13 mov       %al,0x9F(%rsp)
063bfe1a jmp       0x0000`0000`063C`03D4
063bfe1f mov       0xF0(%rsp),%rcx
063bfe27 mov       %rcx,%rax
063bfe2a add       $8,%rax
063bfe2e mov       %rax,0x218(%rsp)
063bfe36 mov       0x110(%rsp),%rax
063bfe3e cmp       8(%rcx),%rax
063bfe42 jae       0x0000`0000`063B`FE6C
063bfe44 mov       0xF0(%rsp),%rcx
063bfe4c mov       %rcx,%rax
063bfe4f add       $8,%rax
063bfe53 mov       %rax,0x228(%rsp)
063bfe5b call      0x0000`0000`063C`0CF0
063bfe60 mov       %al,0x9E(%rsp)
063bfe67 jmp       0x0000`0000`063B`FF24
063bfe6c mov       0xF0(%rsp),%rcx
063bfe74 mov       8(%rcx),%rax
063bfe78 mov       %rax,0x220(%rsp)
063bfe80 mov       0x11C(%rsp),%edx
063bfe87 mov       0x120(%rsp),%r8
063bfe8f mov       0x128(%rsp),%r9
063bfe97 call      0x0000`0000`063C`0450
063bfe9c mov       %al,0x9D(%rsp)
063bfea3 mov       0x9D(%rsp),%cl
063bfeaa and       $1,%cl
063bfead call      0x0000`0000`063B`A8B0
063bfeb2 and       $1,%al
063bfeb4 mov       %al,0x135(%rsp)
063bfebb movzbl    0x135(%rsp),%eax
063bfec3 test      $1,%al
063bfec5 je        0x0000`0000`063B`FECD
063bfec7 jmp       0x0000`0000`063B`FEC9
063bfec9 jmp       0x0000`0000`063B`FEFB
063bfecb ud2
063bfecd mov       0xF8(%rsp),%r8
063bfed5 mov       0x100(%rsp),%rdx
063bfedd mov       0xF0(%rsp),%rax
063bfee5 mov       0x20(%rax),%rcx
063bfee9 mov       0x28(%rax),%rax
063bfeed callq     *0x18(%rax)
063bfef0 and       $1,%al
063bfef2 mov       %al,0x10F(%rsp)
063bfef9 jmp       0x0000`0000`063B`FF10
063bfefb lea       0x63D`0C10,%rcx
063bff02 call      0x0000`0000`063B`A930
063bff07 and       $1,%al
063bff09 mov       %al,0x10F(%rsp)
063bff10 mov       0x10F(%rsp),%al
063bff17 and       $1,%al
063bff19 movzbl    %al,%eax
063bff1c add       $0x288,%rsp
063bff23 ret
063bff24 mov       0x9E(%rsp),%al
063bff2b test      $1,%al
063bff2d jne       0x0000`0000`063B`FF65
063bff2f jmp       0x0000`0000`063B`FF31
063bff31 mov       0xF0(%rsp),%rax
063bff39 mov       8(%rax),%rax
063bff3d mov       %rax,0x260(%rsp)
063bff45 sub       0x110(%rsp),%rax
063bff4d mov       %rax,0x90(%rsp)
063bff55 setb      %al
063bff58 test      $1,%al
063bff5a jne       0x0000`0000`063C`023A
063bff60 jmp       0x0000`0000`063C`020A
063bff65 mov       0xF0(%rsp),%rcx
063bff6d mov       8(%rcx),%rax
063bff71 mov       %rax,0x80(%rsp)
063bff79 mov       %rax,0x230(%rsp)
063bff81 add       $0x34,%rcx
063bff85 mov       $0x30,%edx
063bff8a call      0x0000`0000`063B`5FD0
063bff8f mov       %eax,0x8C(%rsp)
063bff96 mov       %eax,0x238(%rsp)
063bff9d mov       0xF0(%rsp),%rcx
063bffa5 add       $0x38,%rcx
063bffa9 movb      $1,0x136(%rsp)
063bffb1 mov       0x136(%rsp),%dl
063bffb8 call      0x0000`0000`063B`5F90
063bffbd mov       %al,0x7F(%rsp)
063bffc1 mov       %al,0x23F(%rsp)
063bffc8 mov       0xF0(%rsp),%rcx
063bffd0 mov       0x11C(%rsp),%edx
063bffd7 mov       0x120(%rsp),%r8
063bffdf mov       0x128(%rsp),%r9
063bffe7 call      0x0000`0000`063C`0450
063bffec mov       %al,0x7E(%rsp)
063bfff0 mov       0x7E(%rsp),%cl
063bfff4 and       $1,%cl
063bfff7 call      0x0000`0000`063B`A8B0
063bfffc and       $1,%al
063bfffe mov       %al,0x137(%rsp)
063c0005 movzbl    0x137(%rsp),%eax
063c000d test      $1,%al
063c000f je        0x0000`0000`063C`0017
063c0011 jmp       0x0000`0000`063C`0013
063c0013 jmp       0x0000`0000`063C`0035
063c0015 ud2
063c0017 mov       0x80(%rsp),%rax
063c001f sub       0x110(%rsp),%rax
063c0027 mov       %rax,0x70(%rsp)
063c002c setb      %al
063c002f test      $1,%al
063c0031 jne       0x0000`0000`063C`007C
063c0033 jmp       0x0000`0000`063C`004F
063c0035 lea       0x63D`0C28,%rcx
063c003c call      0x0000`0000`063B`A930
063c0041 and       $1,%al
063c0043 mov       %al,0x10F(%rsp)
063c004a jmp       0x0000`0000`063B`FF10
063c004f mov       0x70(%rsp),%rdx
063c0054 mov       0xF0(%rsp),%rcx
063c005c movb      $1,0x14D(%rsp)
063c0064 mov       0x14D(%rsp),%r8b
063c006c call      0x0000`0000`063C`09A0
063c0071 mov       %rax,0x60(%rsp)
063c0076 mov       %edx,0x6C(%rsp)
063c007a jmp       0x0000`0000`063C`0096
063c007c lea       0x63C`F3B0,%rcx
063c0083 lea       0x63D`0C40,%r8
063c008a mov       $0x21,%edx
063c008f call      0x0000`0000`063B`9FF0
063c0094 ud2
063c0096 mov       0x6C(%rsp),%edx
063c009a mov       0x60(%rsp),%rcx
063c009f call      0x0000`0000`063B`A7D0
063c00a4 mov       %edx,0x140(%rsp)
063c00ab mov       %rax,0x138(%rsp)
063c00b3 mov       0x140(%rsp),%eax
063c00ba add       $0xFFEF`0000,%eax
063c00bf sete      %al
063c00c2 movzbl    %al,%eax
063c00c5 jne       0x0000`0000`063C`00CD
063c00c7 jmp       0x0000`0000`063C`00C9
063c00c9 jmp       0x0000`0000`063C`012C
063c00cb ud2
063c00cd mov       0xF8(%rsp),%r8
063c00d5 mov       0x100(%rsp),%rdx
063c00dd mov       0xF0(%rsp),%rax
063c00e5 mov       0x138(%rsp),%r9
063c00ed mov       %r9,0x50(%rsp)
063c00f2 mov       0x140(%rsp),%ecx
063c00f9 mov       %ecx,0x58(%rsp)
063c00fd mov       %r9,0x240(%rsp)
063c0105 mov       %ecx,0x248(%rsp)
063c010c mov       %r9,0x250(%rsp)
063c0114 mov       %ecx,0x258(%rsp)
063c011b mov       0x20(%rax),%rcx
063c011f mov       0x28(%rax),%rax
063c0123 callq     *0x18(%rax)
063c0126 mov       %al,0x5F(%rsp)
063c012a jmp       0x0000`0000`063C`0146
063c012c lea       0x63D`0C58,%rcx
063c0133 call      0x0000`0000`063B`A930
063c0138 and       $1,%al
063c013a mov       %al,0x10F(%rsp)
063c0141 jmp       0x0000`0000`063B`FF10
063c0146 mov       0x5F(%rsp),%cl
063c014a and       $1,%cl
063c014d call      0x0000`0000`063B`A8B0
063c0152 and       $1,%al
063c0154 mov       %al,0x14E(%rsp)
063c015b movzbl    0x14E(%rsp),%eax
063c0163 test      $1,%al
063c0165 je        0x0000`0000`063C`016D
063c0167 jmp       0x0000`0000`063C`0169
063c0169 jmp       0x0000`0000`063C`0189
063c016b ud2
063c016d mov       0xF0(%rsp),%r8
063c0175 mov       0x58(%rsp),%edx
063c0179 mov       0x50(%rsp),%rcx
063c017e call      0x0000`0000`063B`F9B0
063c0183 mov       %al,0x4F(%rsp)
063c0187 jmp       0x0000`0000`063C`01A3
063c0189 lea       0x63D`0C70,%rcx
063c0190 call      0x0000`0000`063B`A930
063c0195 and       $1,%al
063c0197 mov       %al,0x10F(%rsp)
063c019e jmp       0x0000`0000`063B`FF10
063c01a3 mov       0x4F(%rsp),%cl
063c01a7 and       $1,%cl
063c01aa call      0x0000`0000`063B`A8B0
063c01af and       $1,%al
063c01b1 mov       %al,0x14F(%rsp)
063c01b8 movzbl    0x14F(%rsp),%eax
063c01c0 test      $1,%al
063c01c2 je        0x0000`0000`063C`01CA
063c01c4 jmp       0x0000`0000`063C`01C6
063c01c6 jmp       0x0000`0000`063C`01F0
063c01c8 ud2
063c01ca mov       0xF0(%rsp),%rax
063c01d2 mov       0x7F(%rsp),%cl
063c01d6 mov       0x8C(%rsp),%edx
063c01dd mov       %edx,0x34(%rax)
063c01e0 mov       %cl,0x38(%rax)
063c01e3 movb      $0,0x10F(%rsp)
063c01eb jmp       0x0000`0000`063B`FF10
063c01f0 lea       0x63D`0C88,%rcx
063c01f7 call      0x0000`0000`063B`A930
063c01fc and       $1,%al
063c01fe mov       %al,0x10F(%rsp)
063c0205 jmp       0x0000`0000`063B`FF10
063c020a mov       0x90(%rsp),%rdx
063c0212 mov       0xF0(%rsp),%rcx
063c021a movb      $1,0x165(%rsp)
063c0222 mov       0x165(%rsp),%r8b
063c022a call      0x0000`0000`063C`09A0
063c022f mov       %rax,0x40(%rsp)
063c0234 mov       %edx,0x48(%rsp)
063c0238 jmp       0x0000`0000`063C`0254
063c023a lea       0x63C`F3B0,%rcx
063c0241 lea       0x63D`0CA0,%r8
063c0248 mov       $0x21,%edx
063c024d call      0x0000`0000`063B`9FF0
063c0252 ud2
063c0254 mov       0x48(%rsp),%edx
063c0258 mov       0x40(%rsp),%rcx
063c025d call      0x0000`0000`063B`A7D0
063c0262 mov       %edx,0x158(%rsp)
063c0269 mov       %rax,0x150(%rsp)
063c0271 mov       0x158(%rsp),%eax
063c0278 add       $0xFFEF`0000,%eax
063c027d sete      %al
063c0280 movzbl    %al,%eax
063c0283 jne       0x0000`0000`063C`028B
063c0285 jmp       0x0000`0000`063C`0287
063c0287 jmp       0x0000`0000`063C`02EB
063c0289 ud2
063c028b mov       0xF0(%rsp),%rcx
063c0293 mov       0x150(%rsp),%rdx
063c029b mov       %rdx,0x30(%rsp)
063c02a0 mov       0x158(%rsp),%eax
063c02a7 mov       %eax,0x38(%rsp)
063c02ab mov       %rdx,0x268(%rsp)
063c02b3 mov       %eax,0x270(%rsp)
063c02ba mov       %rdx,0x278(%rsp)
063c02c2 mov       %eax,0x280(%rsp)
063c02c9 mov       0x11C(%rsp),%edx
063c02d0 mov       0x120(%rsp),%r8
063c02d8 mov       0x128(%rsp),%r9
063c02e0 call      0x0000`0000`063C`0450
063c02e5 mov       %al,0x3F(%rsp)
063c02e9 jmp       0x0000`0000`063C`0305
063c02eb lea       0x63D`0CB8,%rcx
063c02f2 call      0x0000`0000`063B`A930
063c02f7 and       $1,%al
063c02f9 mov       %al,0x10F(%rsp)
063c0300 jmp       0x0000`0000`063B`FF10
063c0305 mov       0x3F(%rsp),%cl
063c0309 and       $1,%cl
063c030c call      0x0000`0000`063B`A8B0
063c0311 and       $1,%al
063c0313 mov       %al,0x166(%rsp)
063c031a movzbl    0x166(%rsp),%eax
063c0322 test      $1,%al
063c0324 je        0x0000`0000`063C`032C
063c0326 jmp       0x0000`0000`063C`0328
063c0328 jmp       0x0000`0000`063C`0355
063c032a ud2
063c032c mov       0xF8(%rsp),%r8
063c0334 mov       0x100(%rsp),%rdx
063c033c mov       0xF0(%rsp),%rax
063c0344 mov       0x20(%rax),%rcx
063c0348 mov       0x28(%rax),%rax
063c034c callq     *0x18(%rax)
063c034f mov       %al,0x2F(%rsp)
063c0353 jmp       0x0000`0000`063C`036F
063c0355 lea       0x63D`0CD0,%rcx
063c035c call      0x0000`0000`063B`A930
063c0361 and       $1,%al
063c0363 mov       %al,0x10F(%rsp)
063c036a jmp       0x0000`0000`063B`FF10
063c036f mov       0x2F(%rsp),%cl
063c0373 and       $1,%cl
063c0376 call      0x0000`0000`063B`A8B0
063c037b and       $1,%al
063c037d mov       %al,0x167(%rsp)
063c0384 movzbl    0x167(%rsp),%eax
063c038c test      $1,%al
063c038e je        0x0000`0000`063C`0396
063c0390 jmp       0x0000`0000`063C`0392
063c0392 jmp       0x0000`0000`063C`03BA
063c0394 ud2
063c0396 mov       0xF0(%rsp),%r8
063c039e mov       0x38(%rsp),%edx
063c03a2 mov       0x30(%rsp),%rcx
063c03a7 call      0x0000`0000`063B`F9B0
063c03ac and       $1,%al
063c03ae mov       %al,0x10F(%rsp)
063c03b5 jmp       0x0000`0000`063B`FF10
063c03ba lea       0x63D`0CE8,%rcx
063c03c1 call      0x0000`0000`063B`A930
063c03c6 and       $1,%al
063c03c8 mov       %al,0x10F(%rsp)
063c03cf jmp       0x0000`0000`063B`FF10
063c03d4 mov       0x9F(%rsp),%cl
063c03db and       $1,%cl
063c03de call      0x0000`0000`063B`A8B0
063c03e3 and       $1,%al
063c03e5 mov       %al,0x134(%rsp)
063c03ec movzbl    0x134(%rsp),%eax
063c03f4 test      $1,%al
063c03f6 je        0x0000`0000`063C`03FE
063c03f8 jmp       0x0000`0000`063C`03FA
063c03fa jmp       0x0000`0000`063C`042F
063c03fc ud2
063c03fe mov       0xF8(%rsp),%r8
063c0406 mov       0x100(%rsp),%rdx
063c040e mov       0xF0(%rsp),%rax
063c0416 mov       0x20(%rax),%rcx
063c041a mov       0x28(%rax),%rax
063c041e callq     *0x18(%rax)
063c0421 and       $1,%al
063c0423 mov       %al,0x10F(%rsp)
063c042a jmp       0x0000`0000`063B`FF10
063c042f lea       0x63D`0D00,%rcx
063c0436 call      0x0000`0000`063B`A930
063c043b and       $1,%al
063c043d mov       %al,0x10F(%rsp)
063c0444 jmp       0x0000`0000`063B`FF10

core::fmt::impl$9::pad_integral::write_prefix:
063c0450 sub       $0x78,%rsp
063c0454 mov       %rcx,0x28(%rsp)
063c0459 mov       %edx,0x34(%rsp)
063c045d mov       %r8,0x38(%rsp)
063c0462 mov       %r9,0x40(%rsp)
063c0467 mov       %rcx,0x50(%rsp)
063c046c mov       0x34(%rsp),%edx
063c0470 sub       $0x11`0000,%edx
063c0476 mov       $1,%eax
063c047b xor       %ecx,%ecx
063c047d cmp       $0,%edx
063c0480 cmove     %rcx,%rax
063c0484 cmp       $1,%rax
063c0488 jne       0x0000`0000`063C`04A8
063c048a mov       0x28(%rsp),%rax
063c048f mov       0x34(%rsp),%edx
063c0493 mov       %edx,0x64(%rsp)
063c0497 mov       0x20(%rax),%rcx
063c049b mov       0x28(%rax),%rax
063c049f callq     *0x20(%rax)
063c04a2 mov       %al,0x27(%rsp)
063c04a6 jmp       0x0000`0000`063C`04C1
063c04a8 mov       $1,%eax
063c04ad xor       %ecx,%ecx
063c04af cmpq      $0,0x38(%rsp)
063c04b5 cmove     %rcx,%rax
063c04b9 cmp       $1,%rax
063c04bd je        0x0000`0000`063C`0502
063c04bf jmp       0x0000`0000`063C`052E
063c04c1 mov       0x27(%rsp),%cl
063c04c5 and       $1,%cl
063c04c8 call      0x0000`0000`063B`A8B0
063c04cd and       $1,%al
063c04cf mov       %al,0x4F(%rsp)
063c04d3 movzbl    0x4F(%rsp),%eax
063c04d8 test      $1,%al
063c04da je        0x0000`0000`063C`04A8
063c04dc jmp       0x0000`0000`063C`04DE
063c04de jmp       0x0000`0000`063C`04E2
063c04e0 ud2
063c04e2 lea       0x63D`0D18,%rcx
063c04e9 call      0x0000`0000`063B`A930
063c04ee and       $1,%al
063c04f0 mov       %al,0x4E(%rsp)
063c04f4 mov       0x4E(%rsp),%al
063c04f8 and       $1,%al
063c04fa movzbl    %al,%eax
063c04fd add       $0x78,%rsp
063c0501 ret
063c0502 mov       0x28(%rsp),%rax
063c0507 mov       0x38(%rsp),%rdx
063c050c mov       0x40(%rsp),%r8
063c0511 mov       %rdx,0x68(%rsp)
063c0516 mov       %r8,0x70(%rsp)
063c051b mov       0x20(%rax),%rcx
063c051f mov       0x28(%rax),%rax
063c0523 callq     *0x18(%rax)
063c0526 and       $1,%al
063c0528 mov       %al,0x4E(%rsp)
063c052c jmp       0x0000`0000`063C`04F4
063c052e movb      $0,0x4E(%rsp)
063c0533 jmp       0x0000`0000`063C`04F4

core::fmt::Formatter::pad:
063c0540 sub       $0x178,%rsp
063c0547 mov       %rcx,0x90(%rsp)
063c054f mov       %rdx,0xA0(%rsp)
063c0557 mov       %r8,0xA8(%rsp)
063c055f mov       %rcx,0x118(%rsp)
063c0567 call      0x0000`0000`063B`95B0
063c056c mov       %al,0x9F(%rsp)
063c0573 mov       0x9F(%rsp),%al
063c057a test      $1,%al
063c057c jne       0x0000`0000`063C`058A
063c057e jmp       0x0000`0000`063C`0580
063c0580 movb      $0,0xB7(%rsp)
063c0588 jmp       0x0000`0000`063C`05B2
063c058a mov       0x90(%rsp),%rcx
063c0592 add       $0x10,%rcx
063c0596 call      0x0000`0000`063B`95B0
063c059b mov       %al,0x8F(%rsp)
063c05a2 mov       0x8F(%rsp),%al
063c05a9 and       $1,%al
063c05ab mov       %al,0xB7(%rsp)
063c05b2 testb     $1,0xB7(%rsp)
063c05ba jne       0x0000`0000`063C`05CD
063c05bc mov       0x90(%rsp),%rax
063c05c4 cmpq      $1,0x10(%rax)
063c05c9 je        0x0000`0000`063C`060D
063c05cb jmp       0x0000`0000`063C`0648
063c05cd mov       0x90(%rsp),%rax
063c05d5 mov       0x20(%rax),%rcx
063c05d9 mov       0x28(%rax),%rax
063c05dd mov       0xA0(%rsp),%rdx
063c05e5 mov       0xA8(%rsp),%r8
063c05ed callq     *0x18(%rax)
063c05f0 and       $1,%al
063c05f2 mov       %al,0xB6(%rsp)
063c05f9 mov       0xB6(%rsp),%al
063c0600 and       $1,%al
063c0602 movzbl    %al,%eax
063c0605 add       $0x178,%rsp
063c060c ret
063c060d mov       0x90(%rsp),%rax
063c0615 mov       0x18(%rax),%rax
063c0619 mov       %rax,0x80(%rsp)
063c0621 mov       %rax,0x138(%rsp)
063c0629 mov       0xA0(%rsp),%rdx
063c0631 mov       0xA8(%rsp),%r8
063c0639 lea       0xD8(%rsp),%rcx
063c0641 call      0x0000`0000`063C`7A90
063c0646 jmp       0x0000`0000`063C`0683
063c0648 mov       0xA0(%rsp),%rcx
063c0650 mov       0xA8(%rsp),%rax
063c0658 mov       %rcx,0xB8(%rsp)
063c0660 mov       %rax,0xC0(%rsp)
063c0668 mov       0x90(%rsp),%rax
063c0670 mov       (%rax),%rax
063c0673 test      %rax,%rax
063c0676 je        0x0000`0000`063C`0764
063c067c jmp       0x0000`0000`063C`067E
063c067e jmp       0x0000`0000`063C`0795
063c0683 mov       0x80(%rsp),%rdx
063c068b lea       0xD8(%rsp),%rcx
063c0693 call      0x0000`0000`063B`9290
063c0698 mov       %edx,0xD0(%rsp)
063c069f mov       %rax,0xC8(%rsp)
063c06a7 mov       0xD0(%rsp),%edx
063c06ae sub       $0x11`0000,%edx
063c06b4 mov       $1,%eax
063c06b9 xor       %ecx,%ecx
063c06bb cmp       $0,%edx
063c06be cmove     %rcx,%rax
063c06c2 cmp       $1,%rax
063c06c6 jne       0x0000`0000`063C`0709
063c06c8 mov       0xC8(%rsp),%rax
063c06d0 mov       %rax,0x140(%rsp)
063c06d8 mov       0xA0(%rsp),%rcx
063c06e0 mov       0xA8(%rsp),%rdx
063c06e8 mov       %rax,0xF0(%rsp)
063c06f0 mov       0xF0(%rsp),%r8
063c06f8 call      0x0000`0000`063C`79C0
063c06fd mov       %rax,0x70(%rsp)
063c0702 mov       %rdx,0x78(%rsp)
063c0707 jmp       0x0000`0000`063C`072E
063c0709 mov       0xA0(%rsp),%rcx
063c0711 mov       0xA8(%rsp),%rax
063c0719 mov       %rcx,0xB8(%rsp)
063c0721 mov       %rax,0xC0(%rsp)
063c0729 jmp       0x0000`0000`063C`0668
063c072e mov       0x78(%rsp),%rdx
063c0733 mov       0x70(%rsp),%rcx
063c0738 mov       0xA0(%rsp),%r8
063c0740 mov       0xA8(%rsp),%r9
063c0748 call      0x0000`0000`063B`9720
063c074d mov       %rdx,0xC0(%rsp)
063c0755 mov       %rax,0xB8(%rsp)
063c075d jmp       0x0000`0000`063C`0668
063c0762 ud2
063c0764 mov       0x90(%rsp),%rax
063c076c mov       0x20(%rax),%rcx
063c0770 mov       0x28(%rax),%rax
063c0774 mov       0xB8(%rsp),%rdx
063c077c mov       0xC0(%rsp),%r8
063c0784 callq     *0x18(%rax)
063c0787 and       $1,%al
063c0789 mov       %al,0xB6(%rsp)
063c0790 jmp       0x0000`0000`063C`05F9
063c0795 mov       0x90(%rsp),%rax
063c079d mov       8(%rax),%rax
063c07a1 mov       %rax,0x58(%rsp)
063c07a6 mov       %rax,0x148(%rsp)
063c07ae mov       0xB8(%rsp),%rcx
063c07b6 mov       0xC0(%rsp),%rdx
063c07be call      0x0000`0000`063C`7A10
063c07c3 mov       %rax,0x60(%rsp)
063c07c8 mov       %rdx,0x68(%rsp)
063c07cd mov       0x68(%rsp),%rdx
063c07d2 mov       0x60(%rsp),%rcx
063c07d7 call      0x0000`0000`063C`5AF0
063c07dc mov       %rax,0x50(%rsp)
063c07e1 mov       %rax,0x150(%rsp)
063c07e9 mov       0x50(%rsp),%rax
063c07ee mov       0x58(%rsp),%rcx
063c07f3 cmp       %rcx,%rax
063c07f6 jae       0x0000`0000`063C`081B
063c07f8 mov       0x50(%rsp),%rcx
063c07fd mov       0x58(%rsp),%rax
063c0802 movb      $0,0xFF(%rsp)
063c080a sub       %rcx,%rax
063c080d mov       %rax,0x48(%rsp)
063c0812 setb      %al
063c0815 test      $1,%al
063c0817 jne       0x0000`0000`063C`0871
063c0819 jmp       0x0000`0000`063C`084C
063c081b mov       0x90(%rsp),%rax
063c0823 mov       0x20(%rax),%rcx
063c0827 mov       0x28(%rax),%rax
063c082b mov       0xB8(%rsp),%rdx
063c0833 mov       0xC0(%rsp),%r8
063c083b callq     *0x18(%rax)
063c083e and       $1,%al
063c0840 mov       %al,0xB6(%rsp)
063c0847 jmp       0x0000`0000`063C`05F9
063c084c mov       0x48(%rsp),%rdx
063c0851 mov       0x90(%rsp),%rcx
063c0859 mov       0xFF(%rsp),%r8b
063c0861 call      0x0000`0000`063C`09A0
063c0866 mov       %rax,0x38(%rsp)
063c086b mov       %edx,0x44(%rsp)
063c086f jmp       0x0000`0000`063C`088B
063c0871 lea       0x63C`F3B0,%rcx
063c0878 lea       0x63D`0D30,%r8
063c087f mov       $0x21,%edx
063c0884 call      0x0000`0000`063B`9FF0
063c0889 ud2
063c088b mov       0x44(%rsp),%edx
063c088f mov       0x38(%rsp),%rcx
063c0894 call      0x0000`0000`063B`A7D0
063c0899 mov       %edx,0x108(%rsp)
063c08a0 mov       %rax,0x100(%rsp)
063c08a8 mov       0x108(%rsp),%eax
063c08af add       $0xFFEF`0000,%eax
063c08b4 sete      %al
063c08b7 movzbl    %al,%eax
063c08ba jne       0x0000`0000`063C`08C2
063c08bc jmp       0x0000`0000`063C`08BE
063c08be jmp       0x0000`0000`063C`0921
063c08c0 ud2
063c08c2 mov       0x90(%rsp),%rax
063c08ca mov       0x100(%rsp),%rdx
063c08d2 mov       %rdx,0x28(%rsp)
063c08d7 mov       0x108(%rsp),%ecx
063c08de mov       %ecx,0x30(%rsp)
063c08e2 mov       %rdx,0x158(%rsp)
063c08ea mov       %ecx,0x160(%rsp)
063c08f1 mov       %rdx,0x168(%rsp)
063c08f9 mov       %ecx,0x170(%rsp)
063c0900 mov       0x20(%rax),%rcx
063c0904 mov       0x28(%rax),%rax
063c0908 mov       0xB8(%rsp),%rdx
063c0910 mov       0xC0(%rsp),%r8
063c0918 callq     *0x18(%rax)
063c091b mov       %al,0x37(%rsp)
063c091f jmp       0x0000`0000`063C`093B
063c0921 lea       0x63D`0D48,%rcx
063c0928 call      0x0000`0000`063B`A930
063c092d and       $1,%al
063c092f mov       %al,0xB6(%rsp)
063c0936 jmp       0x0000`0000`063C`05F9
063c093b mov       0x37(%rsp),%cl
063c093f and       $1,%cl
063c0942 call      0x0000`0000`063B`A8B0
063c0947 and       $1,%al
063c0949 mov       %al,0x117(%rsp)
063c0950 movzbl    0x117(%rsp),%eax
063c0958 test      $1,%al
063c095a je        0x0000`0000`063C`0962
063c095c jmp       0x0000`0000`063C`095E
063c095e jmp       0x0000`0000`063C`0986
063c0960 ud2
063c0962 mov       0x90(%rsp),%r8
063c096a mov       0x30(%rsp),%edx
063c096e mov       0x28(%rsp),%rcx
063c0973 call      0x0000`0000`063B`F9B0
063c0978 and       $1,%al
063c097a mov       %al,0xB6(%rsp)
063c0981 jmp       0x0000`0000`063C`05F9
063c0986 lea       0x63D`0D60,%rcx
063c098d call      0x0000`0000`063B`A930
063c0992 and       $1,%al
063c0994 mov       %al,0xB6(%rsp)
063c099b jmp       0x0000`0000`063C`05F9

core::fmt::Formatter::padding:
063c09a0 sub       $0x118,%rsp
063c09a7 mov       %r8b,0x6F(%rsp)
063c09ac mov       %rdx,0x70(%rsp)
063c09b1 mov       %rcx,0x78(%rsp)
063c09b6 mov       %rcx,0xE0(%rsp)
063c09be mov       %rdx,0xE8(%rsp)
063c09c6 mov       %r8b,0xF7(%rsp)
063c09ce movzbl    0x38(%rcx),%eax
063c09d2 cmp       $3,%rax
063c09d6 jne       0x0000`0000`063C`09E5
063c09d8 mov       0x6F(%rsp),%al
063c09dc mov       %al,0x97(%rsp)
063c09e3 jmp       0x0000`0000`063C`09F4
063c09e5 mov       0x78(%rsp),%rax
063c09ea mov       0x38(%rax),%al
063c09ed mov       %al,0x97(%rsp)
063c09f4 movzbl    0x97(%rsp),%eax
063c09fc mov       %rax,0x60(%rsp)
063c0a01 mov       0x60(%rsp),%rax
063c0a06 lea       0x63C`0BF8,%rcx
063c0a0d movslq    (%rcx,%rax,4),%rax
063c0a11 add       %rcx,%rax
063c0a14 jmp       *%rax
063c0a16 ud2
063c0a18 mov       0x70(%rsp),%rax
063c0a1d movq      $0,0x98(%rsp)
063c0a29 mov       %rax,0xA0(%rsp)
063c0a31 jmp       0x0000`0000`063C`0AA9
063c0a33 mov       0x70(%rsp),%rax
063c0a38 mov       %rax,0x98(%rsp)
063c0a40 movq      $0,0xA0(%rsp)
063c0a4c jmp       0x0000`0000`063C`0AA9
063c0a4e mov       0x70(%rsp),%rax
063c0a53 mov       %rax,%rcx
063c0a56 shr       $1,%rcx
063c0a5a mov       %rcx,0x50(%rsp)
063c0a5f add       $1,%rax
063c0a63 mov       %rax,0x58(%rsp)
063c0a68 setb      %al
063c0a6b test      $1,%al
063c0a6d jne       0x0000`0000`063C`0A8F
063c0a6f mov       0x50(%rsp),%rcx
063c0a74 mov       0x58(%rsp),%rax
063c0a79 shr       $1,%rax
063c0a7d mov       %rcx,0x98(%rsp)
063c0a85 mov       %rax,0xA0(%rsp)
063c0a8d jmp       0x0000`0000`063C`0AA9
063c0a8f lea       0x63C`F3E0,%rcx
063c0a96 lea       0x63D`0D78,%r8
063c0a9d mov       $0x1C,%edx
063c0aa2 call      0x0000`0000`063B`9FF0
063c0aa7 ud2
063c0aa9 mov       0x98(%rsp),%rax
063c0ab1 mov       %rax,0x108(%rsp)
063c0ab9 mov       0xA0(%rsp),%rcx
063c0ac1 mov       %rcx,0x38(%rsp)
063c0ac6 mov       %rcx,0x110(%rsp)
063c0ace movq      $0,0xA8(%rsp)
063c0ada mov       %rax,0xB0(%rsp)
063c0ae2 mov       0xA8(%rsp),%rcx
063c0aea mov       0xB0(%rsp),%rdx
063c0af2 call      0x0000`0000`063B`90F0
063c0af7 mov       %rax,0x40(%rsp)
063c0afc mov       %rdx,0x48(%rsp)
063c0b01 mov       0x48(%rsp),%rax
063c0b06 mov       0x40(%rsp),%rcx
063c0b0b mov       %rcx,0xB8(%rsp)
063c0b13 mov       %rax,0xC0(%rsp)
063c0b1b lea       0xB8(%rsp),%rcx
063c0b23 call      0x0000`0000`063B`9040
063c0b28 mov       %rdx,0xD0(%rsp)
063c0b30 mov       %rax,0xC8(%rsp)
063c0b38 mov       0xC8(%rsp),%rax
063c0b40 test      %rax,%rax
063c0b43 je        0x0000`0000`063C`0B4B
063c0b45 jmp       0x0000`0000`063C`0B47
063c0b47 jmp       0x0000`0000`063C`0B68
063c0b49 ud2
063c0b4b mov       0x38(%rsp),%rdx
063c0b50 mov       0x78(%rsp),%rax
063c0b55 mov       0x34(%rax),%ecx
063c0b58 call      0x0000`0000`063B`F980
063c0b5d mov       %rax,0x28(%rsp)
063c0b62 mov       %edx,0x34(%rsp)
063c0b66 jmp       0x0000`0000`063C`0BDC
063c0b68 mov       0x78(%rsp),%rdx
063c0b6d mov       0x20(%rdx),%rcx
063c0b71 mov       0x28(%rdx),%rax
063c0b75 mov       0x34(%rdx),%edx
063c0b78 callq     *0x20(%rax)
063c0b7b mov       %al,0x27(%rsp)
063c0b7f mov       0x27(%rsp),%cl
063c0b83 and       $1,%cl
063c0b86 call      0x0000`0000`063B`A8B0
063c0b8b and       $1,%al
063c0b8d mov       %al,0xDF(%rsp)
063c0b94 movzbl    0xDF(%rsp),%eax
063c0b9c test      $1,%al
063c0b9e je        0x0000`0000`063C`0B1B
063c0ba4 jmp       0x0000`0000`063C`0BA6
063c0ba6 jmp       0x0000`0000`063C`0BAA
063c0ba8 ud2
063c0baa lea       0x63D`0D90,%rcx
063c0bb1 call      0x0000`0000`063B`A950
063c0bb6 mov       %edx,0x88(%rsp)
063c0bbd mov       %rax,0x80(%rsp)
063c0bc5 mov       0x80(%rsp),%rax
063c0bcd mov       0x88(%rsp),%edx
063c0bd4 add       $0x118,%rsp
063c0bdb ret
063c0bdc mov       0x34(%rsp),%eax
063c0be0 mov       0x28(%rsp),%rcx
063c0be5 mov       %rcx,0x80(%rsp)
063c0bed mov       %eax,0x88(%rsp)
063c0bf4 jmp       0x0000`0000`063C`0BC5

core::fmt::Formatter::write_str:
063c0c10 sub       $0x48,%rsp
063c0c14 mov       %rcx,%rax
063c0c17 mov       %rax,0x30(%rsp)
063c0c1c mov       %rdx,0x38(%rsp)
063c0c21 mov       %r8,0x40(%rsp)
063c0c26 mov       0x20(%rax),%rcx
063c0c2a mov       0x28(%rax),%rax
063c0c2e callq     *0x18(%rax)
063c0c31 mov       %al,0x2F(%rsp)
063c0c35 mov       0x2F(%rsp),%al
063c0c39 and       $1,%al
063c0c3b movzbl    %al,%eax
063c0c3e add       $0x48,%rsp
063c0c42 ret

core::fmt::Formatter::write_fmt:
063c0c50 sub       $0x78,%rsp
063c0c54 mov       %rcx,0x70(%rsp)
063c0c59 mov       0x20(%rcx),%rax
063c0c5d mov       %rax,0x28(%rsp)
063c0c62 mov       0x28(%rcx),%rax
063c0c66 mov       %rax,0x30(%rsp)
063c0c6b lea       0x40(%rsp),%rcx
063c0c70 mov       $0x30,%r8d
063c0c76 call      0x0000`0000`063C`BD50
063c0c7b mov       0x28(%rsp),%rcx
063c0c80 mov       0x30(%rsp),%rdx
063c0c85 lea       0x40(%rsp),%r8
063c0c8a call      0x0000`0000`063B`F1A0
063c0c8f mov       %al,0x3F(%rsp)
063c0c93 mov       0x3F(%rsp),%al
063c0c97 and       $1,%al
063c0c99 movzbl    %al,%eax
063c0c9c add       $0x78,%rsp
063c0ca0 ret

core::fmt::Formatter::sign_plus:
063c0cb0 push      %rax
063c0cb1 mov       %rcx,(%rsp)
063c0cb5 mov       0x30(%rcx),%eax
063c0cb8 and       $1,%eax
063c0cbb cmp       $0,%eax
063c0cbe setne     %al
063c0cc1 and       $1,%al
063c0cc3 movzbl    %al,%eax
063c0cc6 pop       %rcx
063c0cc7 ret

core::fmt::Formatter::alternate:
063c0cd0 push      %rax
063c0cd1 mov       %rcx,(%rsp)
063c0cd5 mov       0x30(%rcx),%eax
063c0cd8 and       $4,%eax
063c0cdb cmp       $0,%eax
063c0cde setne     %al
063c0ce1 and       $1,%al
063c0ce3 movzbl    %al,%eax
063c0ce6 pop       %rcx
063c0ce7 ret

core::fmt::Formatter::sign_aware_zero_pad:
063c0cf0 push      %rax
063c0cf1 mov       %rcx,(%rsp)
063c0cf5 mov       0x30(%rcx),%eax
063c0cf8 and       $8,%eax
063c0cfb cmp       $0,%eax
063c0cfe setne     %al
063c0d01 and       $1,%al
063c0d03 movzbl    %al,%eax
063c0d06 pop       %rcx
063c0d07 ret

core::fmt::Formatter::debug_lower_hex:
063c0d10 push      %rax
063c0d11 mov       %rcx,(%rsp)
063c0d15 mov       0x30(%rcx),%eax
063c0d18 and       $0x10,%eax
063c0d1b cmp       $0,%eax
063c0d1e setne     %al
063c0d21 and       $1,%al
063c0d23 movzbl    %al,%eax
063c0d26 pop       %rcx
063c0d27 ret

core::fmt::Formatter::debug_upper_hex:
063c0d30 push      %rax
063c0d31 mov       %rcx,(%rsp)
063c0d35 mov       0x30(%rcx),%eax
063c0d38 and       $0x20,%eax
063c0d3b cmp       $0,%eax
063c0d3e setne     %al
063c0d41 and       $1,%al
063c0d43 movzbl    %al,%eax
063c0d46 pop       %rcx
063c0d47 ret

core::fmt::Formatter::debug_struct:
063c0d50 sub       $0x48,%rsp
063c0d54 mov       %rcx,%rax
063c0d57 mov       %rax,0x28(%rsp)
063c0d5c mov       %rdx,0x30(%rsp)
063c0d61 mov       %r8,0x38(%rsp)
063c0d66 mov       %r9,0x40(%rsp)
063c0d6b call      0x0000`0000`063B`ADC0
063c0d70 mov       0x28(%rsp),%rax
063c0d75 add       $0x48,%rsp
063c0d79 ret

core::fmt::Formatter::debug_tuple:
063c0d80 sub       $0x48,%rsp
063c0d84 mov       %rcx,%rax
063c0d87 mov       %rax,0x28(%rsp)
063c0d8c mov       %rdx,0x30(%rsp)
063c0d91 mov       %r8,0x38(%rsp)
063c0d96 mov       %r9,0x40(%rsp)
063c0d9b call      0x0000`0000`063B`B380
063c0da0 mov       0x28(%rsp),%rax
063c0da5 add       $0x48,%rsp
063c0da9 ret

core::fmt::impl$10::write_char:
063c0db0 sub       $0x38,%rsp
063c0db4 mov       %rcx,%rax
063c0db7 mov       %rax,0x28(%rsp)
063c0dbc mov       %edx,0x34(%rsp)
063c0dc0 mov       0x20(%rax),%rcx
063c0dc4 mov       0x28(%rax),%rax
063c0dc8 callq     *0x20(%rax)
063c0dcb mov       %al,0x27(%rsp)
063c0dcf mov       0x27(%rsp),%al
063c0dd3 and       $1,%al
063c0dd5 movzbl    %al,%eax
063c0dd8 add       $0x38,%rsp
063c0ddc ret

core::fmt::impl$17::fmt:
063c0de0 sub       $0x48,%rsp
063c0de4 mov       %r8,0x20(%rsp)
063c0de9 mov       %rdx,%r8
063c0dec mov       %rcx,%rdx
063c0def mov       0x20(%rsp),%rcx
063c0df4 mov       %rdx,0x30(%rsp)
063c0df9 mov       %r8,0x38(%rsp)
063c0dfe mov       %rcx,0x40(%rsp)
063c0e03 call      0x0000`0000`063C`0540
063c0e08 mov       %al,0x2F(%rsp)
063c0e0c mov       0x2F(%rsp),%al
063c0e10 and       $1,%al
063c0e12 movzbl    %al,%eax
063c0e15 add       $0x48,%rsp
063c0e19 ret

core::fmt::impl$18::fmt:
063c0e20 sub       $0xC8,%rsp
063c0e27 mov       %rdx,0x28(%rsp)
063c0e2c mov       %rcx,%rax
063c0e2f mov       0x28(%rsp),%rcx
063c0e34 mov       %rax,0x30(%rsp)
063c0e39 mov       %rax,0x98(%rsp)
063c0e41 mov       %rcx,0xA0(%rsp)
063c0e49 mov       $0x27,%edx
063c0e4e call      0x0000`0000`063C`0DB0
063c0e53 mov       %al,0x3D(%rsp)
063c0e57 mov       0x3D(%rsp),%cl
063c0e5b and       $1,%cl
063c0e5e call      0x0000`0000`063B`A8B0
063c0e63 and       $1,%al
063c0e65 mov       %al,0x3F(%rsp)
063c0e69 movzbl    0x3F(%rsp),%eax
063c0e6e test      $1,%al
063c0e70 je        0x0000`0000`063C`0E78
063c0e72 jmp       0x0000`0000`063C`0E74
063c0e74 jmp       0x0000`0000`063C`0EAB
063c0e76 ud2
063c0e78 mov       0x30(%rsp),%rax
063c0e7d mov       (%rax),%edx
063c0e7f movb      $1,0x70(%rsp)
063c0e84 movb      $1,0x71(%rsp)
063c0e89 movb      $0,0x72(%rsp)
063c0e8e movzbl    0x72(%rsp),%eax
063c0e93 shl       $0x10,%eax
063c0e96 movzwl    0x70(%rsp),%r8d
063c0e9c or        %eax,%r8d
063c0e9f lea       0x58(%rsp),%rcx
063c0ea4 call      0x0000`0000`063B`7FA0
063c0ea9 jmp       0x0000`0000`063C`0ECE
063c0eab lea       0x63D`0DA8,%rcx
063c0eb2 call      0x0000`0000`063B`A930
063c0eb7 and       $1,%al
063c0eb9 mov       %al,0x3E(%rsp)
063c0ebd mov       0x3E(%rsp),%al
063c0ec1 and       $1,%al
063c0ec3 movzbl    %al,%eax
063c0ec6 add       $0xC8,%rsp
063c0ecd ret
063c0ece lea       0x40(%rsp),%rcx
063c0ed3 lea       0x58(%rsp),%rdx
063c0ed8 call      0x0000`0000`063B`9110
063c0edd mov       0x40(%rsp),%rax
063c0ee2 mov       %rax,0x78(%rsp)
063c0ee7 mov       0x48(%rsp),%rax
063c0eec mov       %rax,0x80(%rsp)
063c0ef4 mov       0x50(%rsp),%rax
063c0ef9 mov       %rax,0x88(%rsp)
063c0f01 lea       0x78(%rsp),%rcx
063c0f06 call      0x0000`0000`063B`8A80
063c0f0b mov       %eax,0x90(%rsp)
063c0f12 mov       0x90(%rsp),%eax
063c0f19 add       $0xFFEF`0000,%eax
063c0f1e setne     %al
063c0f21 movzbl    %al,%eax
063c0f24 je        0x0000`0000`063C`0F2C
063c0f26 jmp       0x0000`0000`063C`0F28
063c0f28 jmp       0x0000`0000`063C`0F46
063c0f2a ud2
063c0f2c mov       0x28(%rsp),%rcx
063c0f31 mov       $0x27,%edx
063c0f36 call      0x0000`0000`063C`0DB0
063c0f3b and       $1,%al
063c0f3d mov       %al,0x3E(%rsp)
063c0f41 jmp       0x0000`0000`063C`0EBD
063c0f46 mov       0x28(%rsp),%rcx
063c0f4b mov       0x90(%rsp),%edx
063c0f52 mov       %edx,0xC4(%rsp)
063c0f59 call      0x0000`0000`063C`0DB0
063c0f5e mov       %al,0x27(%rsp)
063c0f62 mov       0x27(%rsp),%cl
063c0f66 and       $1,%cl
063c0f69 call      0x0000`0000`063B`A8B0
063c0f6e and       $1,%al
063c0f70 mov       %al,0x97(%rsp)
063c0f77 movzbl    0x97(%rsp),%eax
063c0f7f test      $1,%al
063c0f81 je        0x0000`0000`063C`0F01
063c0f87 jmp       0x0000`0000`063C`0F89
063c0f89 jmp       0x0000`0000`063C`0F8D
063c0f8b ud2
063c0f8d lea       0x63D`0DC0,%rcx
063c0f94 call      0x0000`0000`063B`A930
063c0f99 and       $1,%al
063c0f9b mov       %al,0x3E(%rsp)
063c0f9f jmp       0x0000`0000`063C`0EBD

core::fmt::impl$20::fmt<tuple$<> >:
063c0fb0 sub       $0x38,%rsp
063c0fb4 mov       %rcx,0x28(%rsp)
063c0fb9 mov       %rdx,0x30(%rsp)
063c0fbe mov       (%rcx),%rcx
063c0fc1 call      0x0000`0000`063C`0FE0
063c0fc6 mov       %al,0x27(%rsp)
063c0fca mov       0x27(%rsp),%al
063c0fce and       $1,%al
063c0fd0 movzbl    %al,%eax
063c0fd3 add       $0x38,%rsp
063c0fd7 ret

core::fmt::impl$20::fmt::inner:
063c0fe0 sub       $0x98,%rsp
063c0fe7 mov       %rdx,0x30(%rsp)
063c0fec mov       %rcx,%rax
063c0fef mov       0x30(%rsp),%rcx
063c0ff4 mov       %rax,0x38(%rsp)
063c0ff9 mov       %rax,0x70(%rsp)
063c0ffe mov       %rcx,0x78(%rsp)
063c1003 mov       (%rcx),%rdx
063c1006 mov       %rdx,0x40(%rsp)
063c100b mov       8(%rcx),%rax
063c100f mov       %rax,0x48(%rsp)
063c1014 mov       %rdx,0x80(%rsp)
063c101c mov       %rax,0x88(%rsp)
063c1024 mov       0x30(%rcx),%eax
063c1027 mov       %eax,0x50(%rsp)
063c102b mov       %eax,0x90(%rsp)
063c1032 call      0x0000`0000`063C`0CD0
063c1037 mov       %al,0x57(%rsp)
063c103b mov       0x57(%rsp),%al
063c103f test      $1,%al
063c1041 jne       0x0000`0000`063C`1076
063c1043 jmp       0x0000`0000`063C`1045
063c1045 mov       0x30(%rsp),%rdx
063c104a mov       0x38(%rsp),%rax
063c104f mov       0x30(%rdx),%ecx
063c1052 or        $4,%ecx
063c1055 mov       %ecx,0x30(%rdx)
063c1058 mov       %rax,0x68(%rsp)
063c105d lea       0x68(%rsp),%rcx
063c1062 call      0x0000`0000`063C`8DC0
063c1067 mov       %al,0x2F(%rsp)
063c106b and       $1,%al
063c106d mov       %al,0x97(%rsp)
063c1074 jmp       0x0000`0000`063C`10C1
063c1076 mov       0x30(%rsp),%rcx
063c107b mov       0x30(%rcx),%eax
063c107e or        $8,%eax
063c1081 mov       %eax,0x30(%rcx)
063c1084 call      0x0000`0000`063B`95B0
063c1089 mov       %al,0x2E(%rsp)
063c108d mov       0x2E(%rsp),%al
063c1091 test      $1,%al
063c1093 jne       0x0000`0000`063C`1097
063c1095 jmp       0x0000`0000`063C`1045
063c1097 mov       0x30(%rsp),%rax
063c109c movq      $0x12,0x60(%rsp)
063c10a5 movq      $1,0x58(%rsp)
063c10ae mov       0x58(%rsp),%rdx
063c10b3 mov       0x60(%rsp),%rcx
063c10b8 mov       %rdx,(%rax)
063c10bb mov       %rcx,8(%rax)
063c10bf jmp       0x0000`0000`063C`1045
063c10c1 mov       0x2F(%rsp),%al
063c10c5 mov       0x30(%rsp),%rcx
063c10ca mov       0x50(%rsp),%edx
063c10ce mov       0x48(%rsp),%r8
063c10d3 mov       0x40(%rsp),%r9
063c10d8 mov       %r9,(%rcx)
063c10db mov       %r8,8(%rcx)
063c10df mov       %edx,0x30(%rcx)
063c10e2 and       $1,%al
063c10e4 movzbl    %al,%eax
063c10e7 add       $0x98,%rsp
063c10ee ret

core::fmt::impl$24::fmt<tuple$<> >:
063c10f0 sub       $0x38,%rsp
063c10f4 mov       %rcx,0x28(%rsp)
063c10f9 mov       %rdx,0x30(%rsp)
063c10fe call      0x0000`0000`063C`0FB0
063c1103 mov       %al,0x27(%rsp)
063c1107 mov       0x27(%rsp),%al
063c110b and       $1,%al
063c110d movzbl    %al,%eax
063c1110 add       $0x38,%rsp
063c1114 ret

core::fmt::impl$27::fmt:
063c1120 sub       $0x48,%rsp
063c1124 mov       %rdx,0x28(%rsp)
063c1129 mov       %rcx,%rax
063c112c mov       0x28(%rsp),%rcx
063c1131 mov       %rax,0x38(%rsp)
063c1136 mov       %rcx,0x40(%rsp)
063c113b lea       0x63D`0DD8,%rdx
063c1142 mov       $2,%r8d
063c1148 call      0x0000`0000`063C`0540
063c114d mov       %al,0x37(%rsp)
063c1151 mov       0x37(%rsp),%al
063c1155 and       $1,%al
063c1157 movzbl    %al,%eax
063c115a add       $0x48,%rsp
063c115e ret

core::slice::memchr::contains_zero_byte:
063c1160 sub       $0x28,%rsp
063c1164 mov       %rcx,(%rsp)
063c1168 mov       %rcx,0x10(%rsp)
063c116d mov       %rcx,0x18(%rsp)
063c1172 movabs    $0x101`0101`0101`0101,%rax
063c117c mov       %rax,0x20(%rsp)
063c1181 movabs    $0x101`0101`0101`0101,%rax
063c118b sub       %rax,%rcx
063c118e mov       %rcx,8(%rsp)
063c1193 mov       8(%rsp),%rax
063c1198 mov       (%rsp),%rcx
063c119c xor       $0xFFFF`FFFF`FFFF`FFFF,%rcx
063c11a0 and       %rcx,%rax
063c11a3 movabs    $0x8080`8080`8080`8080,%rcx
063c11ad and       %rcx,%rax
063c11b0 cmp       $0,%rax
063c11b4 setne     %al
063c11b7 and       $1,%al
063c11b9 movzbl    %al,%eax
063c11bc add       $0x28,%rsp
063c11c0 ret

core::slice::memchr::repeat_byte:
063c11d0 sub       $0x38,%rsp
063c11d4 mov       %cl,0x37(%rsp)
063c11d8 movzbl    %cl,%eax
063c11db movabs    $0x101`0101`0101`0101,%rcx
063c11e5 mul       %rcx
063c11e8 mov       %rax,0x28(%rsp)
063c11ed seto      %al
063c11f0 test      $1,%al
063c11f2 jne       0x0000`0000`063C`11FE
063c11f4 mov       0x28(%rsp),%rax
063c11f9 add       $0x38,%rsp
063c11fd ret
063c11fe lea       0x63C`F400,%rcx
063c1205 lea       0x63D`0E58,%r8
063c120c mov       $0x21,%edx
063c1211 call      0x0000`0000`063B`9FF0
063c1216 ud2

core::slice::memchr::memchr:
063c1220 sub       $0x78,%rsp
063c1224 mov       %r8,0x28(%rsp)
063c1229 mov       %rdx,0x30(%rsp)
063c122e mov       %cl,0x3F(%rsp)
063c1232 mov       %rdx,0x68(%rsp)
063c1237 mov       %r8,0x70(%rsp)
063c123c cmp       $0x10,%r8
063c1240 jb        0x0000`0000`063C`1261
063c1242 mov       0x28(%rsp),%r8
063c1247 mov       0x30(%rsp),%rdx
063c124c mov       0x3F(%rsp),%cl
063c1250 call      0x0000`0000`063C`12E0
063c1255 mov       %rdx,0x48(%rsp)
063c125a mov       %rax,0x40(%rsp)
063c125f jmp       0x0000`0000`063C`129D
063c1261 mov       0x28(%rsp),%rdx
063c1266 mov       0x30(%rsp),%rcx
063c126b call      0x0000`0000`063C`3E90
063c1270 mov       %rdx,0x58(%rsp)
063c1275 mov       %rax,0x50(%rsp)
063c127a lea       0x3F(%rsp),%rax
063c127f mov       %rax,0x60(%rsp)
063c1284 mov       0x60(%rsp),%rdx
063c1289 lea       0x50(%rsp),%rcx
063c128e call      0x0000`0000`063C`A530
063c1293 mov       %rdx,0x48(%rsp)
063c1298 mov       %rax,0x40(%rsp)
063c129d mov       0x40(%rsp),%rax
063c12a2 mov       0x48(%rsp),%rdx
063c12a7 add       $0x78,%rsp
063c12ab ret

core::slice::memchr::memchr::closure$0:
063c12b0 sub       $0x18,%rsp
063c12b4 mov       %rcx,(%rsp)
063c12b8 mov       (%rsp),%rax
063c12bc mov       (%rax),%rax
063c12bf mov       %rax,8(%rsp)
063c12c4 mov       %rdx,0x10(%rsp)
063c12c9 mov       (%rdx),%al
063c12cb mov       (%rcx),%rcx
063c12ce cmp       (%rcx),%al
063c12d0 sete      %al
063c12d3 and       $1,%al
063c12d5 movzbl    %al,%eax
063c12d8 add       $0x18,%rsp
063c12dc ret

core::slice::memchr::memchr_general_case:
063c12e0 sub       $0x1E8,%rsp
063c12e7 mov       %r8,0xB8(%rsp)
063c12ef mov       %rdx,%rax
063c12f2 mov       0xB8(%rsp),%rdx
063c12fa mov       %rax,0xC0(%rsp)
063c1302 mov       %cl,%al
063c1304 mov       0xC0(%rsp),%rcx
063c130c mov       %al,0xD7(%rsp)
063c1313 mov       %rcx,0x150(%rsp)
063c131b mov       %rdx,0x158(%rsp)
063c1323 mov       %rdx,0x160(%rsp)
063c132b call      0x0000`0000`063C`3DA0
063c1330 mov       %rax,0xC8(%rsp)
063c1338 mov       %rax,0x168(%rsp)
063c1340 mov       0xC8(%rsp),%rcx
063c1348 mov       $8,%edx
063c134d call      0x0000`0000`063B`6510
063c1352 mov       %rax,0xE8(%rsp)
063c135a cmpq      $0,0xE8(%rsp)
063c1363 ja        0x0000`0000`063C`1386
063c1365 mov       0xD7(%rsp),%cl
063c136c call      0x0000`0000`063C`11D0
063c1371 mov       %rax,0xB0(%rsp)
063c1379 mov       %rax,0x178(%rsp)
063c1381 jmp       0x0000`0000`063C`149C
063c1386 mov       0xB8(%rsp),%rdx
063c138e mov       0xE8(%rsp),%rcx
063c1396 call      0x0000`0000`063B`7880
063c139b mov       %rax,0xA8(%rsp)
063c13a3 mov       0xB8(%rsp),%rdx
063c13ab mov       0xC0(%rsp),%rcx
063c13b3 mov       0xA8(%rsp),%rax
063c13bb mov       %rax,0xE8(%rsp)
063c13c3 mov       0xE8(%rsp),%rax
063c13cb mov       %rax,0x110(%rsp)
063c13d3 mov       0x110(%rsp),%r8
063c13db lea       0x63D`0E70,%r9
063c13e2 call      0x0000`0000`063C`1A70
063c13e7 mov       %rax,0x98(%rsp)
063c13ef mov       %rdx,0xA0(%rsp)
063c13f7 mov       0xA0(%rsp),%rdx
063c13ff mov       0x98(%rsp),%rcx
063c1407 call      0x0000`0000`063C`3E90
063c140c mov       %rdx,0x108(%rsp)
063c1414 mov       %rax,0x100(%rsp)
063c141c lea       0xD7(%rsp),%rax
063c1424 mov       %rax,0x118(%rsp)
063c142c mov       0x118(%rsp),%rdx
063c1434 lea       0x100(%rsp),%rcx
063c143c call      0x0000`0000`063C`A330
063c1441 mov       %rdx,0xF8(%rsp)
063c1449 mov       %rax,0xF0(%rsp)
063c1451 cmpq      $1,0xF0(%rsp)
063c145a jne       0x0000`0000`063C`1365
063c1460 mov       0xF8(%rsp),%rax
063c1468 mov       %rax,0x170(%rsp)
063c1470 mov       %rax,0xE0(%rsp)
063c1478 movq      $1,0xD8(%rsp)
063c1484 mov       0xD8(%rsp),%rax
063c148c mov       0xE0(%rsp),%rdx
063c1494 add       $0x1E8,%rsp
063c149b ret
063c149c mov       0xB8(%rsp),%rax
063c14a4 mov       0xE8(%rsp),%rcx
063c14ac mov       %rcx,0x88(%rsp)
063c14b4 sub       $0x10,%rax
063c14b8 mov       %rax,0x90(%rsp)
063c14c0 setb      %al
063c14c3 test      $1,%al
063c14c5 jne       0x0000`0000`063C`14DE
063c14c7 mov       0x88(%rsp),%rax
063c14cf mov       0x90(%rsp),%rcx
063c14d7 cmp       %rcx,%rax
063c14da jbe       0x0000`0000`063C`153E
063c14dc jmp       0x0000`0000`063C`14F8
063c14de lea       0x63C`F3B0,%rcx
063c14e5 lea       0x63D`0E88,%r8
063c14ec mov       $0x21,%edx
063c14f1 call      0x0000`0000`063B`9FF0
063c14f6 ud2
063c14f8 mov       0xB8(%rsp),%rdx
063c1500 mov       0xC0(%rsp),%rcx
063c1508 mov       0xE8(%rsp),%rax
063c1510 mov       %rax,0x138(%rsp)
063c1518 mov       0x138(%rsp),%r8
063c1520 lea       0x63D`0ED0,%r9
063c1527 call      0x0000`0000`063C`1970
063c152c mov       %rax,0x78(%rsp)
063c1531 mov       %rdx,0x80(%rsp)
063c1539 jmp       0x0000`0000`063C`16E0
063c153e mov       0xC8(%rsp),%rax
063c1546 mov       0xE8(%rsp),%rcx
063c154e mov       %rax,0x1C0(%rsp)
063c1556 mov       %rcx,0x1C8(%rsp)
063c155e mov       %rax,0x1D0(%rsp)
063c1566 mov       %rcx,0x1D8(%rsp)
063c156e add       %rcx,%rax
063c1571 mov       %rax,0x1E0(%rsp)
063c1579 mov       0x1E0(%rsp),%rax
063c1581 mov       %rax,0x70(%rsp)
063c1586 mov       0x70(%rsp),%rax
063c158b mov       (%rax),%rax
063c158e mov       %rax,0x60(%rsp)
063c1593 mov       %rax,0x180(%rsp)
063c159b mov       0xE8(%rsp),%rax
063c15a3 add       $8,%rax
063c15a7 mov       %rax,0x68(%rsp)
063c15ac setb      %al
063c15af test      $1,%al
063c15b1 jne       0x0000`0000`063C`15FA
063c15b3 mov       0x68(%rsp),%rcx
063c15b8 mov       0xC8(%rsp),%rax
063c15c0 mov       %rax,0x198(%rsp)
063c15c8 mov       %rcx,0x1A0(%rsp)
063c15d0 mov       %rax,0x1A8(%rsp)
063c15d8 mov       %rcx,0x1B0(%rsp)
063c15e0 add       %rcx,%rax
063c15e3 mov       %rax,0x1B8(%rsp)
063c15eb mov       0x1B8(%rsp),%rax
063c15f3 mov       %rax,0x58(%rsp)
063c15f8 jmp       0x0000`0000`063C`1614
063c15fa lea       0x63C`F3E0,%rcx
063c1601 lea       0x63D`0EA0,%r8
063c1608 mov       $0x1C,%edx
063c160d call      0x0000`0000`063B`9FF0
063c1612 ud2
063c1614 mov       0xB0(%rsp),%rax
063c161c mov       0x60(%rsp),%rcx
063c1621 mov       0x58(%rsp),%rdx
063c1626 mov       (%rdx),%rdx
063c1629 mov       %rdx,0x48(%rsp)
063c162e mov       %rdx,0x188(%rsp)
063c1636 xor       %rax,%rcx
063c1639 call      0x0000`0000`063C`1160
063c163e mov       %al,0x57(%rsp)
063c1642 and       $1,%al
063c1644 mov       %al,0x196(%rsp)
063c164b mov       0xB0(%rsp),%rax
063c1653 mov       0x48(%rsp),%rcx
063c1658 xor       %rax,%rcx
063c165b call      0x0000`0000`063C`1160
063c1660 mov       %al,0x47(%rsp)
063c1664 and       $1,%al
063c1666 mov       %al,0x197(%rsp)
063c166d mov       0x57(%rsp),%al
063c1671 test      $1,%al
063c1673 jne       0x0000`0000`063C`1686
063c1675 jmp       0x0000`0000`063C`1677
063c1677 mov       0x47(%rsp),%al
063c167b and       $1,%al
063c167d mov       %al,0x127(%rsp)
063c1684 jmp       0x0000`0000`063C`168E
063c1686 movb      $1,0x127(%rsp)
063c168e testb     $1,0x127(%rsp)
063c1696 jne       0x0000`0000`063C`14F8
063c169c mov       0xE8(%rsp),%rax
063c16a4 add       $0x10,%rax
063c16a8 mov       %rax,0x38(%rsp)
063c16ad setb      %al
063c16b0 test      $1,%al
063c16b2 jne       0x0000`0000`063C`16C6
063c16b4 mov       0x38(%rsp),%rax
063c16b9 mov       %rax,0xE8(%rsp)
063c16c1 jmp       0x0000`0000`063C`149C
063c16c6 lea       0x63C`F3E0,%rcx
063c16cd lea       0x63D`0EB8,%r8
063c16d4 mov       $0x1C,%edx
063c16d9 call      0x0000`0000`063B`9FF0
063c16de ud2
063c16e0 mov       0x80(%rsp),%rdx
063c16e8 mov       0x78(%rsp),%rcx
063c16ed call      0x0000`0000`063C`3E90
063c16f2 mov       %rdx,0x130(%rsp)
063c16fa mov       %rax,0x128(%rsp)
063c1702 lea       0xD7(%rsp),%rax
063c170a mov       %rax,0x140(%rsp)
063c1712 mov       0x140(%rsp),%rdx
063c171a lea       0x128(%rsp),%rcx
063c1722 call      0x0000`0000`063C`A730
063c1727 mov       %rax,0x28(%rsp)
063c172c mov       %rdx,0x30(%rsp)
063c1731 mov       0x30(%rsp),%rdx
063c1736 mov       0x28(%rsp),%rcx
063c173b lea       0xE8(%rsp),%rax
063c1743 mov       %rax,0x148(%rsp)
063c174b mov       0x148(%rsp),%r8
063c1753 call      0x0000`0000`063B`9A10
063c1758 mov       %rdx,0xE0(%rsp)
063c1760 mov       %rax,0xD8(%rsp)
063c1768 jmp       0x0000`0000`063C`1484

core::slice::memchr::memchr_general_case::closure$0:
063c1770 sub       $0x18,%rsp
063c1774 mov       %rcx,(%rsp)
063c1778 mov       (%rsp),%rax
063c177c mov       (%rax),%rax
063c177f mov       %rax,8(%rsp)
063c1784 mov       %rdx,0x10(%rsp)
063c1789 mov       (%rdx),%al
063c178b mov       (%rcx),%rcx
063c178e cmp       (%rcx),%al
063c1790 sete      %al
063c1793 and       $1,%al
063c1795 movzbl    %al,%eax
063c1798 add       $0x18,%rsp
063c179c ret

core::slice::memchr::memchr_general_case::closure$1:
063c17a0 sub       $0x18,%rsp
063c17a4 mov       %rcx,(%rsp)
063c17a8 mov       (%rsp),%rax
063c17ac mov       (%rax),%rax
063c17af mov       %rax,8(%rsp)
063c17b4 mov       %rdx,0x10(%rsp)
063c17b9 mov       (%rdx),%al
063c17bb mov       (%rcx),%rcx
063c17be cmp       (%rcx),%al
063c17c0 sete      %al
063c17c3 and       $1,%al
063c17c5 movzbl    %al,%eax
063c17c8 add       $0x18,%rsp
063c17cc ret

core::slice::memchr::memchr_general_case::closure$2:
063c17d0 sub       $0x38,%rsp
063c17d4 mov       %rcx,0x28(%rsp)
063c17d9 mov       %rdx,0x30(%rsp)
063c17de add       (%rcx),%rdx
063c17e1 mov       %rdx,0x20(%rsp)
063c17e6 setb      %al
063c17e9 test      $1,%al
063c17eb jne       0x0000`0000`063C`17F7
063c17ed mov       0x20(%rsp),%rax
063c17f2 add       $0x38,%rsp
063c17f6 ret
063c17f7 lea       0x63C`F3E0,%rcx
063c17fe lea       0x63D`0EE8,%r8
063c1805 mov       $0x1C,%edx
063c180a call      0x0000`0000`063B`9FF0
063c180f ud2

core::slice::cmp::impl$0::eq<u8,u8>:
063c1820 sub       $0x48,%rsp
063c1824 mov       %rcx,0x28(%rsp)
063c1829 mov       %rdx,0x30(%rsp)
063c182e mov       %r8,0x38(%rsp)
063c1833 mov       %r9,0x40(%rsp)
063c1838 call      0x0000`0000`063C`1850
063c183d mov       %al,0x27(%rsp)
063c1841 mov       0x27(%rsp),%al
063c1845 and       $1,%al
063c1847 movzbl    %al,%eax
063c184a add       $0x48,%rsp
063c184e ret

core::slice::cmp::impl$5::equal<u8,u8>:
063c1850 sub       $0x98,%rsp
063c1857 mov       %r9,0x48(%rsp)
063c185c mov       %r8,0x50(%rsp)
063c1861 mov       %rdx,0x58(%rsp)
063c1866 mov       %rcx,0x60(%rsp)
063c186b mov       %rcx,0x70(%rsp)
063c1870 mov       %rdx,0x78(%rsp)
063c1875 mov       %r8,0x80(%rsp)
063c187d mov       %r9,0x88(%rsp)
063c1885 cmp       %r9,%rdx
063c1888 jne       0x0000`0000`063C`18A8
063c188a mov       0x58(%rsp),%rdx
063c188f mov       0x60(%rsp),%rcx
063c1894 call      0x0000`0000`063B`5DC0
063c1899 mov       %rax,0x40(%rsp)
063c189e mov       %rax,0x90(%rsp)
063c18a6 jmp       0x0000`0000`063C`18BE
063c18a8 movb      $0,0x6F(%rsp)
063c18ad mov       0x6F(%rsp),%al
063c18b1 and       $1,%al
063c18b3 movzbl    %al,%eax
063c18b6 add       $0x98,%rsp
063c18bd ret
063c18be mov       0x58(%rsp),%rdx
063c18c3 mov       0x60(%rsp),%rcx
063c18c8 call      0x0000`0000`063C`3DA0
063c18cd mov       %rax,0x38(%rsp)
063c18d2 mov       0x48(%rsp),%rdx
063c18d7 mov       0x50(%rsp),%rcx
063c18dc call      0x0000`0000`063C`3DA0
063c18e1 mov       %rax,0x30(%rsp)
063c18e6 mov       0x40(%rsp),%r8
063c18eb mov       0x30(%rsp),%rdx
063c18f0 mov       0x38(%rsp),%rcx
063c18f5 call      0x0000`0000`063C`BFC0
063c18fa mov       %eax,0x2C(%rsp)
063c18fe mov       0x2C(%rsp),%eax
063c1902 cmp       $0,%eax
063c1905 sete      %al
063c1908 and       $1,%al
063c190a mov       %al,0x6F(%rsp)
063c190e jmp       0x0000`0000`063C`18AD

core::slice::index::impl$0::index<u8,core::ops::range::Range<usize> >:
063c1910 sub       $0x68,%rsp
063c1914 mov       %r9,0x28(%rsp)
063c1919 mov       %r8,0x30(%rsp)
063c191e mov       %rdx,%r9
063c1921 mov       0x28(%rsp),%rdx
063c1926 mov       %rcx,%r8
063c1929 mov       0x30(%rsp),%rcx
063c192e mov       0x90(%rsp),%rax
063c1936 mov       %r8,0x48(%rsp)
063c193b mov       %r9,0x50(%rsp)
063c1940 mov       %rcx,0x58(%rsp)
063c1945 mov       %rdx,0x60(%rsp)
063c194a mov       %rax,0x20(%rsp)
063c194f call      0x0000`0000`063C`25A0
063c1954 mov       %rax,0x38(%rsp)
063c1959 mov       %rdx,0x40(%rsp)
063c195e mov       0x40(%rsp),%rdx
063c1963 mov       0x38(%rsp),%rax
063c1968 add       $0x68,%rsp
063c196c ret

core::slice::index::impl$0::index<u8,core::ops::range::RangeFrom<usize> >:
063c1970 sub       $0x58,%rsp
063c1974 mov       %r8,0x28(%rsp)
063c1979 mov       %rdx,%r8
063c197c mov       %rcx,%rdx
063c197f mov       0x28(%rsp),%rcx
063c1984 mov       %rdx,0x40(%rsp)
063c1989 mov       %r8,0x48(%rsp)
063c198e mov       %rcx,0x50(%rsp)
063c1993 call      0x0000`0000`063C`2A90
063c1998 mov       %rax,0x30(%rsp)
063c199d mov       %rdx,0x38(%rsp)
063c19a2 mov       0x38(%rsp),%rdx
063c19a7 mov       0x30(%rsp),%rax
063c19ac add       $0x58,%rsp
063c19b0 ret

core::slice::index::impl$0::index<core::mem::maybe_uninit::MaybeUninit<u8>,core::ops::range::RangeFrom<usize> >:
063c19c0 sub       $0x58,%rsp
063c19c4 mov       %r8,0x28(%rsp)
063c19c9 mov       %rdx,%r8
063c19cc mov       %rcx,%rdx
063c19cf mov       0x28(%rsp),%rcx
063c19d4 mov       %rdx,0x40(%rsp)
063c19d9 mov       %r8,0x48(%rsp)
063c19de mov       %rcx,0x50(%rsp)
063c19e3 call      0x0000`0000`063C`2A10
063c19e8 mov       %rax,0x30(%rsp)
063c19ed mov       %rdx,0x38(%rsp)
063c19f2 mov       0x38(%rsp),%rdx
063c19f7 mov       0x30(%rsp),%rax
063c19fc add       $0x58,%rsp
063c1a00 ret

core::slice::index::impl$0::index<u8,core::ops::range::RangeInclusive<usize> >:
063c1a10 sub       $0x58,%rsp
063c1a14 mov       %r8,%rax
063c1a17 mov       %rdx,%r8
063c1a1a mov       %rcx,%rdx
063c1a1d mov       %rdx,0x48(%rsp)
063c1a22 mov       %r8,0x50(%rsp)
063c1a27 mov       (%rax),%rcx
063c1a2a mov       %rcx,0x30(%rsp)
063c1a2f mov       8(%rax),%rcx
063c1a33 mov       %rcx,0x38(%rsp)
063c1a38 mov       0x10(%rax),%rax
063c1a3c mov       %rax,0x40(%rsp)
063c1a41 lea       0x30(%rsp),%rcx
063c1a46 call      0x0000`0000`063C`2B30
063c1a4b mov       %rax,0x20(%rsp)
063c1a50 mov       %rdx,0x28(%rsp)
063c1a55 mov       0x28(%rsp),%rdx
063c1a5a mov       0x20(%rsp),%rax
063c1a5f add       $0x58,%rsp
063c1a63 ret

core::slice::index::impl$0::index<u8,core::ops::range::RangeTo<usize> >:
063c1a70 sub       $0x58,%rsp
063c1a74 mov       %r8,0x28(%rsp)
063c1a79 mov       %rdx,%r8
063c1a7c mov       %rcx,%rdx
063c1a7f mov       0x28(%rsp),%rcx
063c1a84 mov       %rdx,0x40(%rsp)
063c1a89 mov       %r8,0x48(%rsp)
063c1a8e mov       %rcx,0x50(%rsp)
063c1a93 call      0x0000`0000`063C`27A0
063c1a98 mov       %rax,0x30(%rsp)
063c1a9d mov       %rdx,0x38(%rsp)
063c1aa2 mov       0x38(%rsp),%rdx
063c1aa7 mov       0x30(%rsp),%rax
063c1aac add       $0x58,%rsp
063c1ab0 ret

core::slice::index::impl$1::index_mut<u8,core::ops::range::RangeTo<usize> >:
063c1ac0 sub       $0x58,%rsp
063c1ac4 mov       %r8,0x28(%rsp)
063c1ac9 mov       %rdx,%r8
063c1acc mov       %rcx,%rdx
063c1acf mov       0x28(%rsp),%rcx
063c1ad4 mov       %rdx,0x40(%rsp)
063c1ad9 mov       %r8,0x48(%rsp)
063c1ade mov       %rcx,0x50(%rsp)
063c1ae3 call      0x0000`0000`063C`2800
063c1ae8 mov       %rax,0x30(%rsp)
063c1aed mov       %rdx,0x38(%rsp)
063c1af2 mov       0x38(%rsp),%rdx
063c1af7 mov       0x30(%rsp),%rax
063c1afc add       $0x58,%rsp
063c1b00 ret

core::slice::index::impl$1::index_mut<u8,core::ops::range::RangeFull>:
063c1b10 sub       $0x48,%rsp
063c1b14 mov       %rcx,0x30(%rsp)
063c1b19 mov       %rdx,0x38(%rsp)
063c1b1e call      0x0000`0000`063C`2B10
063c1b23 mov       %rax,0x20(%rsp)
063c1b28 mov       %rdx,0x28(%rsp)
063c1b2d mov       0x28(%rsp),%rdx
063c1b32 mov       0x20(%rsp),%rax
063c1b37 add       $0x48,%rsp
063c1b3b ret

core::slice::index::slice_start_index_len_fail:
063c1b40 sub       $0xB8,%rsp
063c1b47 mov       %r8,0x40(%rsp)
063c1b4c mov       %rcx,0x58(%rsp)
063c1b51 mov       %rdx,0x60(%rsp)
063c1b56 lea       0x58(%rsp),%rcx
063c1b5b call      0x0000`0000`063C`9990
063c1b60 mov       %rax,0x48(%rsp)
063c1b65 mov       %rdx,0x50(%rsp)
063c1b6a lea       0x60(%rsp),%rcx
063c1b6f call      0x0000`0000`063C`9990
063c1b74 mov       %rax,0x30(%rsp)
063c1b79 mov       %rdx,0x38(%rsp)
063c1b7e mov       0x38(%rsp),%rax
063c1b83 mov       0x30(%rsp),%rcx
063c1b88 mov       0x50(%rsp),%rdx
063c1b8d mov       0x48(%rsp),%r8
063c1b92 mov       %r8,0x98(%rsp)
063c1b9a mov       %rdx,0xA0(%rsp)
063c1ba2 mov       %rcx,0xA8(%rsp)
063c1baa mov       %rax,0xB0(%rsp)
063c1bb2 lea       0x98(%rsp),%r9
063c1bba lea       0x68(%rsp),%rcx
063c1bbf lea       0x63D`0F38,%rdx
063c1bc6 mov       $2,%r8d
063c1bcc movq      $2,0x20(%rsp)
063c1bd5 call      0x0000`0000`063B`EFF0
063c1bda mov       0x40(%rsp),%rdx
063c1bdf lea       0x68(%rsp),%rcx
063c1be4 call      0x0000`0000`063B`A100
063c1be9 ud2

core::slice::index::slice_end_index_len_fail:
063c1bf0 sub       $0xB8,%rsp
063c1bf7 mov       %r8,0x40(%rsp)
063c1bfc mov       %rcx,0x58(%rsp)
063c1c01 mov       %rdx,0x60(%rsp)
063c1c06 lea       0x58(%rsp),%rcx
063c1c0b call      0x0000`0000`063C`9990
063c1c10 mov       %rax,0x48(%rsp)
063c1c15 mov       %rdx,0x50(%rsp)
063c1c1a lea       0x60(%rsp),%rcx
063c1c1f call      0x0000`0000`063C`9990
063c1c24 mov       %rax,0x30(%rsp)
063c1c29 mov       %rdx,0x38(%rsp)
063c1c2e mov       0x38(%rsp),%rax
063c1c33 mov       0x30(%rsp),%rcx
063c1c38 mov       0x50(%rsp),%rdx
063c1c3d mov       0x48(%rsp),%r8
063c1c42 mov       %r8,0x98(%rsp)
063c1c4a mov       %rdx,0xA0(%rsp)
063c1c52 mov       %rcx,0xA8(%rsp)
063c1c5a mov       %rax,0xB0(%rsp)
063c1c62 lea       0x98(%rsp),%r9
063c1c6a lea       0x68(%rsp),%rcx
063c1c6f lea       0x63D`0F68,%rdx
063c1c76 mov       $2,%r8d
063c1c7c movq      $2,0x20(%rsp)
063c1c85 call      0x0000`0000`063B`EFF0
063c1c8a mov       0x40(%rsp),%rdx
063c1c8f lea       0x68(%rsp),%rcx
063c1c94 call      0x0000`0000`063B`A100
063c1c99 ud2

core::slice::index::slice_index_order_fail:
063c1ca0 sub       $0xB8,%rsp
063c1ca7 mov       %r8,0x40(%rsp)
063c1cac mov       %rcx,0x58(%rsp)
063c1cb1 mov       %rdx,0x60(%rsp)
063c1cb6 lea       0x58(%rsp),%rcx
063c1cbb call      0x0000`0000`063C`9990
063c1cc0 mov       %rax,0x48(%rsp)
063c1cc5 mov       %rdx,0x50(%rsp)
063c1cca lea       0x60(%rsp),%rcx
063c1ccf call      0x0000`0000`063C`9990
063c1cd4 mov       %rax,0x30(%rsp)
063c1cd9 mov       %rdx,0x38(%rsp)
063c1cde mov       0x38(%rsp),%rax
063c1ce3 mov       0x30(%rsp),%rcx
063c1ce8 mov       0x50(%rsp),%rdx
063c1ced mov       0x48(%rsp),%r8
063c1cf2 mov       %r8,0x98(%rsp)
063c1cfa mov       %rdx,0xA0(%rsp)
063c1d02 mov       %rcx,0xA8(%rsp)
063c1d0a mov       %rax,0xB0(%rsp)
063c1d12 lea       0x98(%rsp),%r9
063c1d1a lea       0x68(%rsp),%rcx
063c1d1f lea       0x63D`0FB0,%rdx
063c1d26 mov       $2,%r8d
063c1d2c movq      $2,0x20(%rsp)
063c1d35 call      0x0000`0000`063B`EFF0
063c1d3a mov       0x40(%rsp),%rdx
063c1d3f lea       0x68(%rsp),%rcx
063c1d44 call      0x0000`0000`063B`A100
063c1d49 ud2

core::slice::index::slice_end_index_overflow_fail:
063c1d50 sub       $0x68,%rsp
063c1d54 mov       %rcx,0x30(%rsp)
063c1d59 lea       0x38(%rsp),%rcx
063c1d5e lea       0x63D`1000,%rdx
063c1d65 mov       $1,%r8d
063c1d6b lea       0x63C`F530,%r9
063c1d72 xor       %eax,%eax
063c1d74 movq      $0,0x20(%rsp)
063c1d7d call      0x0000`0000`063B`EFF0
063c1d82 mov       0x30(%rsp),%rdx
063c1d87 lea       0x38(%rsp),%rcx
063c1d8c call      0x0000`0000`063B`A100
063c1d91 ud2

core::slice::index::impl$2::get<str>:
063c1da0 sub       $0x68,%rsp
063c1da4 mov       %r8,0x30(%rsp)
063c1da9 mov       %rdx,0x38(%rsp)
063c1dae mov       %rcx,0x40(%rsp)
063c1db3 mov       %rcx,0x50(%rsp)
063c1db8 mov       %rdx,0x58(%rsp)
063c1dbd mov       %r8,0x60(%rsp)
063c1dc2 cmp       %r8,%rcx
063c1dc5 jb        0x0000`0000`063C`1DD2
063c1dc7 movq      $0,0x48(%rsp)
063c1dd0 jmp       0x0000`0000`063C`1DF5
063c1dd2 mov       0x30(%rsp),%r8
063c1dd7 mov       0x38(%rsp),%rdx
063c1ddc mov       0x40(%rsp),%rcx
063c1de1 call      0x0000`0000`063C`1F50
063c1de6 mov       %rax,0x28(%rsp)
063c1deb mov       0x28(%rsp),%rax
063c1df0 mov       %rax,0x48(%rsp)
063c1df5 mov       0x48(%rsp),%rax
063c1dfa add       $0x68,%rsp
063c1dfe ret

core::slice::index::impl$2::get<u8>:
063c1e00 sub       $0x68,%rsp
063c1e04 mov       %r8,0x30(%rsp)
063c1e09 mov       %rdx,0x38(%rsp)
063c1e0e mov       %rcx,0x40(%rsp)
063c1e13 mov       %rcx,0x50(%rsp)
063c1e18 mov       %rdx,0x58(%rsp)
063c1e1d mov       %r8,0x60(%rsp)
063c1e22 cmp       %r8,%rcx
063c1e25 jb        0x0000`0000`063C`1E32
063c1e27 movq      $0,0x48(%rsp)
063c1e30 jmp       0x0000`0000`063C`1E55
063c1e32 mov       0x30(%rsp),%r8
063c1e37 mov       0x38(%rsp),%rdx
063c1e3c mov       0x40(%rsp),%rcx
063c1e41 call      0x0000`0000`063C`2070
063c1e46 mov       %rax,0x28(%rsp)
063c1e4b mov       0x28(%rsp),%rax
063c1e50 mov       %rax,0x48(%rsp)
063c1e55 mov       0x48(%rsp),%rax
063c1e5a add       $0x68,%rsp
063c1e5e ret

core::slice::index::impl$2::get<u32>:
063c1e60 sub       $0x68,%rsp
063c1e64 mov       %r8,0x30(%rsp)
063c1e69 mov       %rdx,0x38(%rsp)
063c1e6e mov       %rcx,0x40(%rsp)
063c1e73 mov       %rcx,0x50(%rsp)
063c1e78 mov       %rdx,0x58(%rsp)
063c1e7d mov       %r8,0x60(%rsp)
063c1e82 cmp       %r8,%rcx
063c1e85 jb        0x0000`0000`063C`1E92
063c1e87 movq      $0,0x48(%rsp)
063c1e90 jmp       0x0000`0000`063C`1EB5
063c1e92 mov       0x30(%rsp),%r8
063c1e97 mov       0x38(%rsp),%rdx
063c1e9c mov       0x40(%rsp),%rcx
063c1ea1 call      0x0000`0000`063C`1FE0
063c1ea6 mov       %rax,0x28(%rsp)
063c1eab mov       0x28(%rsp),%rax
063c1eb0 mov       %rax,0x48(%rsp)
063c1eb5 mov       0x48(%rsp),%rax
063c1eba add       $0x68,%rsp
063c1ebe ret

core::slice::index::impl$2::get_unchecked<core::fmt::ArgumentV1>:
063c1ec0 sub       $0x88,%rsp
063c1ec7 mov       %r8,0x28(%rsp)
063c1ecc mov       %rdx,%rax
063c1ecf mov       0x28(%rsp),%rdx
063c1ed4 mov       %rax,0x30(%rsp)
063c1ed9 mov       %rcx,%rax
063c1edc mov       0x30(%rsp),%rcx
063c1ee1 mov       %rax,0x38(%rsp)
063c1ee6 mov       %rax,0x48(%rsp)
063c1eeb mov       %rcx,0x50(%rsp)
063c1ef0 mov       %rdx,0x58(%rsp)
063c1ef5 call      0x0000`0000`063B`6710
063c1efa mov       %rax,0x40(%rsp)
063c1eff mov       0x40(%rsp),%rax
063c1f04 mov       0x38(%rsp),%rcx
063c1f09 mov       %rax,0x60(%rsp)
063c1f0e mov       %rcx,0x68(%rsp)
063c1f13 mov       %rax,0x70(%rsp)
063c1f18 mov       %rcx,0x78(%rsp)
063c1f1d shl       $4,%rcx
063c1f21 add       %rcx,%rax
063c1f24 mov       %rax,0x80(%rsp)
063c1f2c mov       0x80(%rsp),%rax
063c1f34 mov       %rax,0x20(%rsp)
063c1f39 mov       0x20(%rsp),%rax
063c1f3e add       $0x88,%rsp
063c1f45 ret

core::slice::index::impl$2::get_unchecked<str>:
063c1f50 sub       $0x88,%rsp
063c1f57 mov       %r8,0x28(%rsp)
063c1f5c mov       %rdx,%rax
063c1f5f mov       0x28(%rsp),%rdx
063c1f64 mov       %rax,0x30(%rsp)
063c1f69 mov       %rcx,%rax
063c1f6c mov       0x30(%rsp),%rcx
063c1f71 mov       %rax,0x38(%rsp)
063c1f76 mov       %rax,0x48(%rsp)
063c1f7b mov       %rcx,0x50(%rsp)
063c1f80 mov       %rdx,0x58(%rsp)
063c1f85 call      0x0000`0000`063B`6730
063c1f8a mov       %rax,0x40(%rsp)
063c1f8f mov       0x40(%rsp),%rax
063c1f94 mov       0x38(%rsp),%rcx
063c1f99 mov       %rax,0x60(%rsp)
063c1f9e mov       %rcx,0x68(%rsp)
063c1fa3 mov       %rax,0x70(%rsp)
063c1fa8 mov       %rcx,0x78(%rsp)
063c1fad shl       $4,%rcx
063c1fb1 add       %rcx,%rax
063c1fb4 mov       %rax,0x80(%rsp)
063c1fbc mov       0x80(%rsp),%rax
063c1fc4 mov       %rax,0x20(%rsp)
063c1fc9 mov       0x20(%rsp),%rax
063c1fce add       $0x88,%rsp
063c1fd5 ret

core::slice::index::impl$2::get_unchecked<u32>:
063c1fe0 sub       $0x88,%rsp
063c1fe7 mov       %r8,0x28(%rsp)
063c1fec mov       %rdx,%rax
063c1fef mov       0x28(%rsp),%rdx
063c1ff4 mov       %rax,0x30(%rsp)
063c1ff9 mov       %rcx,%rax
063c1ffc mov       0x30(%rsp),%rcx
063c2001 mov       %rax,0x38(%rsp)
063c2006 mov       %rax,0x48(%rsp)
063c200b mov       %rcx,0x50(%rsp)
063c2010 mov       %rdx,0x58(%rsp)
063c2015 call      0x0000`0000`063B`6750
063c201a mov       %rax,0x40(%rsp)
063c201f mov       0x40(%rsp),%rax
063c2024 mov       0x38(%rsp),%rcx
063c2029 mov       %rax,0x60(%rsp)
063c202e mov       %rcx,0x68(%rsp)
063c2033 mov       %rax,0x70(%rsp)
063c2038 mov       %rcx,0x78(%rsp)
063c203d shl       $2,%rcx
063c2041 add       %rcx,%rax
063c2044 mov       %rax,0x80(%rsp)
063c204c mov       0x80(%rsp),%rax
063c2054 mov       %rax,0x20(%rsp)
063c2059 mov       0x20(%rsp),%rax
063c205e add       $0x88,%rsp
063c2065 ret

core::slice::index::impl$2::get_unchecked<u8>:
063c2070 sub       $0x88,%rsp
063c2077 mov       %r8,0x28(%rsp)
063c207c mov       %rdx,%rax
063c207f mov       0x28(%rsp),%rdx
063c2084 mov       %rax,0x30(%rsp)
063c2089 mov       %rcx,%rax
063c208c mov       0x30(%rsp),%rcx
063c2091 mov       %rax,0x38(%rsp)
063c2096 mov       %rax,0x48(%rsp)
063c209b mov       %rcx,0x50(%rsp)
063c20a0 mov       %rdx,0x58(%rsp)
063c20a5 call      0x0000`0000`063B`6790
063c20aa mov       %rax,0x40(%rsp)
063c20af mov       0x38(%rsp),%rcx
063c20b4 mov       0x40(%rsp),%rax
063c20b9 mov       %rax,0x60(%rsp)
063c20be mov       %rcx,0x68(%rsp)
063c20c3 mov       %rax,0x70(%rsp)
063c20c8 mov       %rcx,0x78(%rsp)
063c20cd add       %rcx,%rax
063c20d0 mov       %rax,0x80(%rsp)
063c20d8 mov       0x80(%rsp),%rax
063c20e0 mov       %rax,0x20(%rsp)
063c20e5 mov       0x20(%rsp),%rax
063c20ea add       $0x88,%rsp
063c20f1 ret

core::slice::index::impl$3::get<u8>:
063c2100 sub       $0x88,%rsp
063c2107 mov       %r9,0x30(%rsp)
063c210c mov       %r8,0x38(%rsp)
063c2111 mov       %rdx,0x40(%rsp)
063c2116 mov       %rcx,0x48(%rsp)
063c211b mov       %rcx,0x68(%rsp)
063c2120 mov       %rdx,0x70(%rsp)
063c2125 mov       %r8,0x78(%rsp)
063c212a mov       %r9,0x80(%rsp)
063c2132 cmp       %rdx,%rcx
063c2135 ja        0x0000`0000`063C`214F
063c2137 mov       0x40(%rsp),%rax
063c213c mov       0x30(%rsp),%rcx
063c2141 cmp       %rcx,%rax
063c2144 seta      %al
063c2147 and       $1,%al
063c2149 mov       %al,0x67(%rsp)
063c214d jmp       0x0000`0000`063C`2154
063c214f movb      $1,0x67(%rsp)
063c2154 testb     $1,0x67(%rsp)
063c2159 jne       0x0000`0000`063C`2180
063c215b mov       0x30(%rsp),%r9
063c2160 mov       0x38(%rsp),%r8
063c2165 mov       0x40(%rsp),%rdx
063c216a mov       0x48(%rsp),%rcx
063c216f call      0x0000`0000`063C`23C0
063c2174 mov       %rax,0x20(%rsp)
063c2179 mov       %rdx,0x28(%rsp)
063c217e jmp       0x0000`0000`063C`219B
063c2180 movq      $0,0x50(%rsp)
063c2189 mov       0x50(%rsp),%rax
063c218e mov       0x58(%rsp),%rdx
063c2193 add       $0x88,%rsp
063c219a ret
063c219b mov       0x28(%rsp),%rax
063c21a0 mov       0x20(%rsp),%rcx
063c21a5 mov       %rcx,0x50(%rsp)
063c21aa mov       %rax,0x58(%rsp)
063c21af jmp       0x0000`0000`063C`2189

core::slice::index::impl$3::get_unchecked<usize>:
063c21c0 sub       $0xB8,%rsp
063c21c7 mov       %r9,0x48(%rsp)
063c21cc mov       %r8,0x58(%rsp)
063c21d1 mov       %rdx,%rax
063c21d4 mov       0x48(%rsp),%rdx
063c21d9 mov       %rax,0x50(%rsp)
063c21de mov       %rcx,%r8
063c21e1 mov       0x58(%rsp),%rcx
063c21e6 mov       %r8,0x60(%rsp)
063c21eb mov       %r8,0x70(%rsp)
063c21f0 mov       %rax,0x78(%rsp)
063c21f5 mov       %rcx,0x80(%rsp)
063c21fd mov       %rdx,0x88(%rsp)
063c2205 call      0x0000`0000`063B`67B0
063c220a mov       %rax,0x68(%rsp)
063c220f mov       0x68(%rsp),%rax
063c2214 mov       0x60(%rsp),%rcx
063c2219 mov       %rax,0x90(%rsp)
063c2221 mov       %rcx,0x98(%rsp)
063c2229 mov       %rax,0xA0(%rsp)
063c2231 mov       %rcx,0xA8(%rsp)
063c2239 shl       $3,%rcx
063c223d add       %rcx,%rax
063c2240 mov       %rax,0xB0(%rsp)
063c2248 mov       0xB0(%rsp),%rax
063c2250 mov       %rax,0x40(%rsp)
063c2255 mov       0x60(%rsp),%rcx
063c225a mov       0x50(%rsp),%rax
063c225f sub       %rcx,%rax
063c2262 mov       %rax,0x38(%rsp)
063c2267 setb      %al
063c226a test      $1,%al
063c226c jne       0x0000`0000`063C`2289
063c226e mov       0x38(%rsp),%rdx
063c2273 mov       0x40(%rsp),%rcx
063c2278 call      0x0000`0000`063B`69F0
063c227d mov       %rax,0x28(%rsp)
063c2282 mov       %rdx,0x30(%rsp)
063c2287 jmp       0x0000`0000`063C`22A3
063c2289 lea       0x63C`F3B0,%rcx
063c2290 lea       0x63D`1090,%r8
063c2297 mov       $0x21,%edx
063c229c call      0x0000`0000`063B`9FF0
063c22a1 ud2
063c22a3 mov       0x30(%rsp),%rdx
063c22a8 mov       0x28(%rsp),%rax
063c22ad add       $0xB8,%rsp
063c22b4 ret

core::slice::index::impl$3::get_unchecked<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c22c0 sub       $0xB8,%rsp
063c22c7 mov       %r9,0x48(%rsp)
063c22cc mov       %r8,0x58(%rsp)
063c22d1 mov       %rdx,%rax
063c22d4 mov       0x48(%rsp),%rdx
063c22d9 mov       %rax,0x50(%rsp)
063c22de mov       %rcx,%r8
063c22e1 mov       0x58(%rsp),%rcx
063c22e6 mov       %r8,0x60(%rsp)
063c22eb mov       %r8,0x70(%rsp)
063c22f0 mov       %rax,0x78(%rsp)
063c22f5 mov       %rcx,0x80(%rsp)
063c22fd mov       %rdx,0x88(%rsp)
063c2305 call      0x0000`0000`063B`6770
063c230a mov       %rax,0x68(%rsp)
063c230f mov       0x60(%rsp),%rcx
063c2314 mov       0x68(%rsp),%rax
063c2319 mov       %rax,0x90(%rsp)
063c2321 mov       %rcx,0x98(%rsp)
063c2329 mov       %rax,0xA0(%rsp)
063c2331 mov       %rcx,0xA8(%rsp)
063c2339 add       %rcx,%rax
063c233c mov       %rax,0xB0(%rsp)
063c2344 mov       0xB0(%rsp),%rax
063c234c mov       %rax,0x40(%rsp)
063c2351 mov       0x60(%rsp),%rcx
063c2356 mov       0x50(%rsp),%rax
063c235b sub       %rcx,%rax
063c235e mov       %rax,0x38(%rsp)
063c2363 setb      %al
063c2366 test      $1,%al
063c2368 jne       0x0000`0000`063C`2385
063c236a mov       0x38(%rsp),%rdx
063c236f mov       0x40(%rsp),%rcx
063c2374 call      0x0000`0000`063B`6A40
063c2379 mov       %rax,0x28(%rsp)
063c237e mov       %rdx,0x30(%rsp)
063c2383 jmp       0x0000`0000`063C`239F
063c2385 lea       0x63C`F3B0,%rcx
063c238c lea       0x63D`1090,%r8
063c2393 mov       $0x21,%edx
063c2398 call      0x0000`0000`063B`9FF0
063c239d ud2
063c239f mov       0x30(%rsp),%rdx
063c23a4 mov       0x28(%rsp),%rax
063c23a9 add       $0xB8,%rsp
063c23b0 ret

core::slice::index::impl$3::get_unchecked<u8>:
063c23c0 sub       $0xB8,%rsp
063c23c7 mov       %r9,0x48(%rsp)
063c23cc mov       %r8,0x58(%rsp)
063c23d1 mov       %rdx,%rax
063c23d4 mov       0x48(%rsp),%rdx
063c23d9 mov       %rax,0x50(%rsp)
063c23de mov       %rcx,%r8
063c23e1 mov       0x58(%rsp),%rcx
063c23e6 mov       %r8,0x60(%rsp)
063c23eb mov       %r8,0x70(%rsp)
063c23f0 mov       %rax,0x78(%rsp)
063c23f5 mov       %rcx,0x80(%rsp)
063c23fd mov       %rdx,0x88(%rsp)
063c2405 call      0x0000`0000`063B`6790
063c240a mov       %rax,0x68(%rsp)
063c240f mov       0x60(%rsp),%rcx
063c2414 mov       0x68(%rsp),%rax
063c2419 mov       %rax,0x90(%rsp)
063c2421 mov       %rcx,0x98(%rsp)
063c2429 mov       %rax,0xA0(%rsp)
063c2431 mov       %rcx,0xA8(%rsp)
063c2439 add       %rcx,%rax
063c243c mov       %rax,0xB0(%rsp)
063c2444 mov       0xB0(%rsp),%rax
063c244c mov       %rax,0x40(%rsp)
063c2451 mov       0x60(%rsp),%rcx
063c2456 mov       0x50(%rsp),%rax
063c245b sub       %rcx,%rax
063c245e mov       %rax,0x38(%rsp)
063c2463 setb      %al
063c2466 test      $1,%al
063c2468 jne       0x0000`0000`063C`2485
063c246a mov       0x38(%rsp),%rdx
063c246f mov       0x40(%rsp),%rcx
063c2474 call      0x0000`0000`063B`69A0
063c2479 mov       %rax,0x28(%rsp)
063c247e mov       %rdx,0x30(%rsp)
063c2483 jmp       0x0000`0000`063C`249F
063c2485 lea       0x63C`F3B0,%rcx
063c248c lea       0x63D`1090,%r8
063c2493 mov       $0x21,%edx
063c2498 call      0x0000`0000`063B`9FF0
063c249d ud2
063c249f mov       0x30(%rsp),%rdx
063c24a4 mov       0x28(%rsp),%rax
063c24a9 add       $0xB8,%rsp
063c24b0 ret

core::slice::index::impl$3::get_unchecked_mut<u8>:
063c24c0 sub       $0xB8,%rsp
063c24c7 mov       %rdx,0x48(%rsp)
063c24cc mov       %rcx,0x50(%rsp)
063c24d1 mov       %rcx,0x60(%rsp)
063c24d6 mov       %rdx,0x68(%rsp)
063c24db mov       %r8,0x70(%rsp)
063c24e0 mov       %r9,0x78(%rsp)
063c24e5 mov       %r8,0xA8(%rsp)
063c24ed mov       %r9,0xB0(%rsp)
063c24f5 mov       %r8,0x58(%rsp)
063c24fa mov       0x50(%rsp),%rcx
063c24ff mov       0x58(%rsp),%rax
063c2504 mov       %rax,0x80(%rsp)
063c250c mov       %rcx,0x88(%rsp)
063c2514 mov       %rax,0x90(%rsp)
063c251c mov       %rcx,0x98(%rsp)
063c2524 add       %rcx,%rax
063c2527 mov       %rax,0xA0(%rsp)
063c252f mov       0xA0(%rsp),%rax
063c2537 mov       %rax,0x40(%rsp)
063c253c mov       0x50(%rsp),%rcx
063c2541 mov       0x48(%rsp),%rax
063c2546 sub       %rcx,%rax
063c2549 mov       %rax,0x38(%rsp)
063c254e setb      %al
063c2551 test      $1,%al
063c2553 jne       0x0000`0000`063C`2570
063c2555 mov       0x38(%rsp),%rdx
063c255a mov       0x40(%rsp),%rcx
063c255f call      0x0000`0000`063B`6A90
063c2564 mov       %rax,0x28(%rsp)
063c2569 mov       %rdx,0x30(%rsp)
063c256e jmp       0x0000`0000`063C`258A
063c2570 lea       0x63C`F3B0,%rcx
063c2577 lea       0x63D`10A8,%r8
063c257e mov       $0x21,%edx
063c2583 call      0x0000`0000`063B`9FF0
063c2588 ud2
063c258a mov       0x30(%rsp),%rdx
063c258f mov       0x28(%rsp),%rax
063c2594 add       $0xB8,%rsp
063c259b ret

core::slice::index::impl$3::index<u8>:
063c25a0 sub       $0x78,%rsp
063c25a4 mov       %r9,0x30(%rsp)
063c25a9 mov       %r8,0x38(%rsp)
063c25ae mov       %rdx,0x40(%rsp)
063c25b3 mov       %rcx,0x48(%rsp)
063c25b8 mov       0xA0(%rsp),%rax
063c25c0 mov       %rax,0x50(%rsp)
063c25c5 mov       %rcx,0x58(%rsp)
063c25ca mov       %rdx,0x60(%rsp)
063c25cf mov       %r8,0x68(%rsp)
063c25d4 mov       %r9,0x70(%rsp)
063c25d9 cmp       %rdx,%rcx
063c25dc ja        0x0000`0000`063C`25EF
063c25de mov       0x40(%rsp),%rax
063c25e3 mov       0x30(%rsp),%rcx
063c25e8 cmp       %rcx,%rax
063c25eb ja        0x0000`0000`063C`262A
063c25ed jmp       0x0000`0000`063C`2605
063c25ef mov       0x50(%rsp),%r8
063c25f4 mov       0x40(%rsp),%rdx
063c25f9 mov       0x48(%rsp),%rcx
063c25fe call      0x0000`0000`063C`1CA0
063c2603 ud2
063c2605 mov       0x30(%rsp),%r9
063c260a mov       0x38(%rsp),%r8
063c260f mov       0x40(%rsp),%rdx
063c2614 mov       0x48(%rsp),%rcx
063c2619 call      0x0000`0000`063C`23C0
063c261e mov       %rax,0x20(%rsp)
063c2623 mov       %rdx,0x28(%rsp)
063c2628 jmp       0x0000`0000`063C`2640
063c262a mov       0x50(%rsp),%r8
063c262f mov       0x30(%rsp),%rdx
063c2634 mov       0x40(%rsp),%rcx
063c2639 call      0x0000`0000`063C`1BF0
063c263e ud2
063c2640 mov       0x28(%rsp),%rdx
063c2645 mov       0x20(%rsp),%rax
063c264a add       $0x78,%rsp
063c264e ret

core::slice::index::impl$3::index_mut<u8>:
063c2650 sub       $0x78,%rsp
063c2654 mov       %r9,0x30(%rsp)
063c2659 mov       %r8,0x38(%rsp)
063c265e mov       %rdx,0x40(%rsp)
063c2663 mov       %rcx,0x48(%rsp)
063c2668 mov       0xA0(%rsp),%rax
063c2670 mov       %rax,0x50(%rsp)
063c2675 mov       %rcx,0x58(%rsp)
063c267a mov       %rdx,0x60(%rsp)
063c267f mov       %r8,0x68(%rsp)
063c2684 mov       %r9,0x70(%rsp)
063c2689 cmp       %rdx,%rcx
063c268c ja        0x0000`0000`063C`269F
063c268e mov       0x40(%rsp),%rax
063c2693 mov       0x30(%rsp),%rcx
063c2698 cmp       %rcx,%rax
063c269b ja        0x0000`0000`063C`26DA
063c269d jmp       0x0000`0000`063C`26B5
063c269f mov       0x50(%rsp),%r8
063c26a4 mov       0x40(%rsp),%rdx
063c26a9 mov       0x48(%rsp),%rcx
063c26ae call      0x0000`0000`063C`1CA0
063c26b3 ud2
063c26b5 mov       0x30(%rsp),%r9
063c26ba mov       0x38(%rsp),%r8
063c26bf mov       0x40(%rsp),%rdx
063c26c4 mov       0x48(%rsp),%rcx
063c26c9 call      0x0000`0000`063C`24C0
063c26ce mov       %rax,0x20(%rsp)
063c26d3 mov       %rdx,0x28(%rsp)
063c26d8 jmp       0x0000`0000`063C`26F0
063c26da mov       0x50(%rsp),%r8
063c26df mov       0x30(%rsp),%rdx
063c26e4 mov       0x40(%rsp),%rcx
063c26e9 call      0x0000`0000`063C`1BF0
063c26ee ud2
063c26f0 mov       0x28(%rsp),%rdx
063c26f5 mov       0x20(%rsp),%rax
063c26fa add       $0x78,%rsp
063c26fe ret

core::slice::index::impl$4::get_unchecked<usize>:
063c2700 sub       $0x58,%rsp
063c2704 mov       %r8,%r9
063c2707 mov       %rdx,%r8
063c270a mov       %rcx,0x40(%rsp)
063c270f mov       %r8,0x48(%rsp)
063c2714 mov       %r9,0x50(%rsp)
063c2719 movq      $0,0x30(%rsp)
063c2722 mov       %rcx,0x38(%rsp)
063c2727 mov       0x30(%rsp),%rcx
063c272c mov       0x38(%rsp),%rdx
063c2731 call      0x0000`0000`063C`21C0
063c2736 mov       %rax,0x20(%rsp)
063c273b mov       %rdx,0x28(%rsp)
063c2740 mov       0x28(%rsp),%rdx
063c2745 mov       0x20(%rsp),%rax
063c274a add       $0x58,%rsp
063c274e ret

core::slice::index::impl$4::get_unchecked<u8>:
063c2750 sub       $0x58,%rsp
063c2754 mov       %r8,%r9
063c2757 mov       %rdx,%r8
063c275a mov       %rcx,0x40(%rsp)
063c275f mov       %r8,0x48(%rsp)
063c2764 mov       %r9,0x50(%rsp)
063c2769 movq      $0,0x30(%rsp)
063c2772 mov       %rcx,0x38(%rsp)
063c2777 mov       0x30(%rsp),%rcx
063c277c mov       0x38(%rsp),%rdx
063c2781 call      0x0000`0000`063C`23C0
063c2786 mov       %rax,0x20(%rsp)
063c278b mov       %rdx,0x28(%rsp)
063c2790 mov       0x28(%rsp),%rdx
063c2795 mov       0x20(%rsp),%rax
063c279a add       $0x58,%rsp
063c279e ret

core::slice::index::impl$4::index<u8>:
063c27a0 sub       $0x68,%rsp
063c27a4 mov       %r9,%rax
063c27a7 mov       %r8,%r9
063c27aa mov       %rdx,%r8
063c27ad mov       %rcx,0x50(%rsp)
063c27b2 mov       %r8,0x58(%rsp)
063c27b7 mov       %r9,0x60(%rsp)
063c27bc movq      $0,0x40(%rsp)
063c27c5 mov       %rcx,0x48(%rsp)
063c27ca mov       0x40(%rsp),%rcx
063c27cf mov       0x48(%rsp),%rdx
063c27d4 mov       %rax,0x20(%rsp)
063c27d9 call      0x0000`0000`063C`25A0
063c27de mov       %rax,0x30(%rsp)
063c27e3 mov       %rdx,0x38(%rsp)
063c27e8 mov       0x38(%rsp),%rdx
063c27ed mov       0x30(%rsp),%rax
063c27f2 add       $0x68,%rsp
063c27f6 ret

core::slice::index::impl$4::index_mut<u8>:
063c2800 sub       $0x68,%rsp
063c2804 mov       %r9,%rax
063c2807 mov       %r8,%r9
063c280a mov       %rdx,%r8
063c280d mov       %rcx,0x50(%rsp)
063c2812 mov       %r8,0x58(%rsp)
063c2817 mov       %r9,0x60(%rsp)
063c281c movq      $0,0x40(%rsp)
063c2825 mov       %rcx,0x48(%rsp)
063c282a mov       0x40(%rsp),%rcx
063c282f mov       0x48(%rsp),%rdx
063c2834 mov       %rax,0x20(%rsp)
063c2839 call      0x0000`0000`063C`2650
063c283e mov       %rax,0x30(%rsp)
063c2843 mov       %rdx,0x38(%rsp)
063c2848 mov       0x38(%rsp),%rdx
063c284d mov       0x30(%rsp),%rax
063c2852 add       $0x68,%rsp
063c2856 ret

core::slice::index::impl$5::get_unchecked<u8>:
063c2860 sub       $0x78,%rsp
063c2864 mov       %r8,0x30(%rsp)
063c2869 mov       %rdx,%rax
063c286c mov       0x30(%rsp),%rdx
063c2871 mov       %rax,0x38(%rsp)
063c2876 mov       %rcx,%rax
063c2879 mov       0x38(%rsp),%rcx
063c287e mov       %rax,0x40(%rsp)
063c2883 mov       %rax,0x60(%rsp)
063c2888 mov       %rcx,0x68(%rsp)
063c288d mov       %rdx,0x70(%rsp)
063c2892 call      0x0000`0000`063B`66B0
063c2897 mov       %rax,0x48(%rsp)
063c289c mov       0x30(%rsp),%r9
063c28a1 mov       0x38(%rsp),%r8
063c28a6 mov       0x48(%rsp),%rax
063c28ab mov       0x40(%rsp),%rcx
063c28b0 mov       %rcx,0x50(%rsp)
063c28b5 mov       %rax,0x58(%rsp)
063c28ba mov       0x50(%rsp),%rcx
063c28bf mov       0x58(%rsp),%rdx
063c28c4 call      0x0000`0000`063C`23C0
063c28c9 mov       %rax,0x20(%rsp)
063c28ce mov       %rdx,0x28(%rsp)
063c28d3 mov       0x28(%rsp),%rdx
063c28d8 mov       0x20(%rsp),%rax
063c28dd add       $0x78,%rsp
063c28e1 ret

core::slice::index::impl$5::get_unchecked<usize>:
063c28f0 sub       $0x78,%rsp
063c28f4 mov       %r8,0x30(%rsp)
063c28f9 mov       %rdx,%rax
063c28fc mov       0x30(%rsp),%rdx
063c2901 mov       %rax,0x38(%rsp)
063c2906 mov       %rcx,%rax
063c2909 mov       0x38(%rsp),%rcx
063c290e mov       %rax,0x40(%rsp)
063c2913 mov       %rax,0x60(%rsp)
063c2918 mov       %rcx,0x68(%rsp)
063c291d mov       %rdx,0x70(%rsp)
063c2922 call      0x0000`0000`063B`66E0
063c2927 mov       %rax,0x48(%rsp)
063c292c mov       0x30(%rsp),%r9
063c2931 mov       0x38(%rsp),%r8
063c2936 mov       0x48(%rsp),%rax
063c293b mov       0x40(%rsp),%rcx
063c2940 mov       %rcx,0x50(%rsp)
063c2945 mov       %rax,0x58(%rsp)
063c294a mov       0x50(%rsp),%rcx
063c294f mov       0x58(%rsp),%rdx
063c2954 call      0x0000`0000`063C`21C0
063c2959 mov       %rax,0x20(%rsp)
063c295e mov       %rdx,0x28(%rsp)
063c2963 mov       0x28(%rsp),%rdx
063c2968 mov       0x20(%rsp),%rax
063c296d add       $0x78,%rsp
063c2971 ret

core::slice::index::impl$5::get_unchecked<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c2980 sub       $0x78,%rsp
063c2984 mov       %r8,0x30(%rsp)
063c2989 mov       %rdx,%rax
063c298c mov       0x30(%rsp),%rdx
063c2991 mov       %rax,0x38(%rsp)
063c2996 mov       %rcx,%rax
063c2999 mov       0x38(%rsp),%rcx
063c299e mov       %rax,0x40(%rsp)
063c29a3 mov       %rax,0x60(%rsp)
063c29a8 mov       %rcx,0x68(%rsp)
063c29ad mov       %rdx,0x70(%rsp)
063c29b2 call      0x0000`0000`063B`6680
063c29b7 mov       %rax,0x48(%rsp)
063c29bc mov       0x30(%rsp),%r9
063c29c1 mov       0x38(%rsp),%r8
063c29c6 mov       0x48(%rsp),%rax
063c29cb mov       0x40(%rsp),%rcx
063c29d0 mov       %rcx,0x50(%rsp)
063c29d5 mov       %rax,0x58(%rsp)
063c29da mov       0x50(%rsp),%rcx
063c29df mov       0x58(%rsp),%rdx
063c29e4 call      0x0000`0000`063C`22C0
063c29e9 mov       %rax,0x20(%rsp)
063c29ee mov       %rdx,0x28(%rsp)
063c29f3 mov       0x28(%rsp),%rdx
063c29f8 mov       0x20(%rsp),%rax
063c29fd add       $0x78,%rsp
063c2a01 ret

core::slice::index::impl$5::index<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c2a10 sub       $0x68,%rsp
063c2a14 mov       %r9,0x30(%rsp)
063c2a19 mov       %r8,0x38(%rsp)
063c2a1e mov       %rdx,0x40(%rsp)
063c2a23 mov       %rcx,0x48(%rsp)
063c2a28 mov       %rcx,0x50(%rsp)
063c2a2d mov       %rdx,0x58(%rsp)
063c2a32 mov       %r8,0x60(%rsp)
063c2a37 cmp       %r8,%rcx
063c2a3a ja        0x0000`0000`063C`2A5C
063c2a3c mov       0x38(%rsp),%r8
063c2a41 mov       0x40(%rsp),%rdx
063c2a46 mov       0x48(%rsp),%rcx
063c2a4b call      0x0000`0000`063C`2980
063c2a50 mov       %rax,0x20(%rsp)
063c2a55 mov       %rdx,0x28(%rsp)
063c2a5a jmp       0x0000`0000`063C`2A72
063c2a5c mov       0x30(%rsp),%r8
063c2a61 mov       0x38(%rsp),%rdx
063c2a66 mov       0x48(%rsp),%rcx
063c2a6b call      0x0000`0000`063C`1B40
063c2a70 ud2
063c2a72 mov       0x28(%rsp),%rdx
063c2a77 mov       0x20(%rsp),%rax
063c2a7c add       $0x68,%rsp
063c2a80 ret

core::slice::index::impl$5::index<u8>:
063c2a90 sub       $0x68,%rsp
063c2a94 mov       %r9,0x30(%rsp)
063c2a99 mov       %r8,0x38(%rsp)
063c2a9e mov       %rdx,0x40(%rsp)
063c2aa3 mov       %rcx,0x48(%rsp)
063c2aa8 mov       %rcx,0x50(%rsp)
063c2aad mov       %rdx,0x58(%rsp)
063c2ab2 mov       %r8,0x60(%rsp)
063c2ab7 cmp       %r8,%rcx
063c2aba ja        0x0000`0000`063C`2ADC
063c2abc mov       0x38(%rsp),%r8
063c2ac1 mov       0x40(%rsp),%rdx
063c2ac6 mov       0x48(%rsp),%rcx
063c2acb call      0x0000`0000`063C`2860
063c2ad0 mov       %rax,0x20(%rsp)
063c2ad5 mov       %rdx,0x28(%rsp)
063c2ada jmp       0x0000`0000`063C`2AF2
063c2adc mov       0x30(%rsp),%r8
063c2ae1 mov       0x38(%rsp),%rdx
063c2ae6 mov       0x48(%rsp),%rcx
063c2aeb call      0x0000`0000`063C`1B40
063c2af0 ud2
063c2af2 mov       0x28(%rsp),%rdx
063c2af7 mov       0x20(%rsp),%rax
063c2afc add       $0x68,%rsp
063c2b00 ret

core::slice::index::impl$6::index_mut<u8>:
063c2b10 sub       $0x18,%rsp
063c2b14 mov       %rcx,%rax
063c2b17 mov       %rax,8(%rsp)
063c2b1c mov       %rdx,0x10(%rsp)
063c2b21 add       $0x18,%rsp
063c2b25 ret

core::slice::index::impl$7::index<u8>:
063c2b30 sub       $0x98,%rsp
063c2b37 mov       %r9,0x48(%rsp)
063c2b3c mov       %r8,0x50(%rsp)
063c2b41 mov       %rdx,0x58(%rsp)
063c2b46 mov       %rcx,0x60(%rsp)
063c2b4b mov       %rdx,0x88(%rsp)
063c2b53 mov       %r8,0x90(%rsp)
063c2b5b call      0x0000`0000`063B`7B20
063c2b60 mov       %rax,0x68(%rsp)
063c2b65 mov       0x68(%rsp),%rax
063c2b6a cmpq      $0xFFFF`FFFF`FFFF`FFFF,(%rax)
063c2b6e je        0x0000`0000`063C`2BA8
063c2b70 mov       0x60(%rsp),%rax
063c2b75 mov       (%rax),%rcx
063c2b78 mov       %rcx,0x70(%rsp)
063c2b7d mov       8(%rax),%rcx
063c2b81 mov       %rcx,0x78(%rsp)
063c2b86 mov       0x10(%rax),%rax
063c2b8a mov       %rax,0x80(%rsp)
063c2b92 lea       0x70(%rsp),%rcx
063c2b97 call      0x0000`0000`063B`7B30
063c2b9c mov       %rax,0x38(%rsp)
063c2ba1 mov       %rdx,0x40(%rsp)
063c2ba6 jmp       0x0000`0000`063C`2BB4
063c2ba8 mov       0x48(%rsp),%rcx
063c2bad call      0x0000`0000`063C`1D50
063c2bb2 ud2
063c2bb4 mov       0x48(%rsp),%rax
063c2bb9 mov       0x50(%rsp),%r9
063c2bbe mov       0x58(%rsp),%r8
063c2bc3 mov       0x40(%rsp),%rdx
063c2bc8 mov       0x38(%rsp),%rcx
063c2bcd mov       %rax,0x20(%rsp)
063c2bd2 call      0x0000`0000`063C`25A0
063c2bd7 mov       %rax,0x28(%rsp)
063c2bdc mov       %rdx,0x30(%rsp)
063c2be1 mov       0x30(%rsp),%rdx
063c2be6 mov       0x28(%rsp),%rax
063c2beb add       $0x98,%rsp
063c2bf2 ret

core::slice::iter::impl$0::into_iter<usize>:
063c2c00 sub       $0x48,%rsp
063c2c04 mov       %rcx,0x38(%rsp)
063c2c09 mov       %rdx,0x40(%rsp)
063c2c0e call      0x0000`0000`063C`3F50
063c2c13 mov       %rax,0x28(%rsp)
063c2c18 mov       %rdx,0x30(%rsp)
063c2c1d mov       0x30(%rsp),%rdx
063c2c22 mov       0x28(%rsp),%rax
063c2c27 add       $0x48,%rsp
063c2c2b ret

core::slice::iter::impl$0::into_iter<u8>:
063c2c30 sub       $0x48,%rsp
063c2c34 mov       %rcx,0x38(%rsp)
063c2c39 mov       %rdx,0x40(%rsp)
063c2c3e call      0x0000`0000`063C`3E90
063c2c43 mov       %rax,0x28(%rsp)
063c2c48 mov       %rdx,0x30(%rsp)
063c2c4d mov       0x30(%rsp),%rdx
063c2c52 mov       0x28(%rsp),%rax
063c2c57 add       $0x48,%rsp
063c2c5b ret

core::slice::iter::impl$0::into_iter<tuple$<u8,u8> >:
063c2c60 sub       $0x48,%rsp
063c2c64 mov       %rcx,0x38(%rsp)
063c2c69 mov       %rdx,0x40(%rsp)
063c2c6e call      0x0000`0000`063C`3EC0
063c2c73 mov       %rax,0x28(%rsp)
063c2c78 mov       %rdx,0x30(%rsp)
063c2c7d mov       0x30(%rsp),%rdx
063c2c82 mov       0x28(%rsp),%rax
063c2c87 add       $0x48,%rsp
063c2c8b ret

core::slice::iter::impl$0::into_iter<array$<usize,4> >:
063c2c90 sub       $0x48,%rsp
063c2c94 mov       %rcx,0x38(%rsp)
063c2c99 mov       %rdx,0x40(%rsp)
063c2c9e call      0x0000`0000`063C`3EF0
063c2ca3 mov       %rax,0x28(%rsp)
063c2ca8 mov       %rdx,0x30(%rsp)
063c2cad mov       0x30(%rsp),%rdx
063c2cb2 mov       0x28(%rsp),%rax
063c2cb7 add       $0x48,%rsp
063c2cbb ret

core::slice::iter::Iter<tuple$<u8,u8> >::new<tuple$<u8,u8> >:
063c2cc0 sub       $0xC8,%rsp
063c2cc7 mov       %rdx,0x38(%rsp)
063c2ccc mov       %rcx,0x60(%rsp)
063c2cd1 mov       %rdx,0x68(%rsp)
063c2cd6 call      0x0000`0000`063C`3D60
063c2cdb mov       %rax,0x40(%rsp)
063c2ce0 mov       %rax,0x70(%rsp)
063c2ce5 mov       0x40(%rsp),%rcx
063c2cea call      0x0000`0000`063B`6400
063c2cef jmp       0x0000`0000`063C`2CF1
063c2cf1 mov       $2,%eax
063c2cf6 cmp       $0,%rax
063c2cfa jne       0x0000`0000`063C`2D40
063c2cfc mov       0x38(%rsp),%rcx
063c2d01 mov       0x40(%rsp),%rax
063c2d06 mov       %rax,0xA0(%rsp)
063c2d0e mov       %rcx,0xA8(%rsp)
063c2d16 mov       %rax,0xB0(%rsp)
063c2d1e mov       %rcx,0xB8(%rsp)
063c2d26 add       %rcx,%rax
063c2d29 mov       %rax,0xC0(%rsp)
063c2d31 mov       0xC0(%rsp),%rax
063c2d39 mov       %rax,0x30(%rsp)
063c2d3e jmp       0x0000`0000`063C`2D94
063c2d40 mov       0x40(%rsp),%rax
063c2d45 mov       0x38(%rsp),%rcx
063c2d4a mov       %rax,0x78(%rsp)
063c2d4f mov       %rcx,0x80(%rsp)
063c2d57 mov       %rax,0x88(%rsp)
063c2d5f mov       %rcx,0x90(%rsp)
063c2d67 shl       $1,%rcx
063c2d6b add       %rcx,%rax
063c2d6e mov       %rax,0x98(%rsp)
063c2d76 mov       0x98(%rsp),%rax
063c2d7e mov       %rax,0x58(%rsp)
063c2d83 mov       0x40(%rsp),%rcx
063c2d88 call      0x0000`0000`063B`62E0
063c2d8d mov       %rax,0x28(%rsp)
063c2d92 jmp       0x0000`0000`063C`2DA0
063c2d94 mov       0x30(%rsp),%rax
063c2d99 mov       %rax,0x58(%rsp)
063c2d9e jmp       0x0000`0000`063C`2D83
063c2da0 mov       0x28(%rsp),%rcx
063c2da5 mov       0x58(%rsp),%rax
063c2daa mov       %rcx,0x48(%rsp)
063c2daf mov       %rax,0x50(%rsp)
063c2db4 mov       0x48(%rsp),%rax
063c2db9 mov       0x50(%rsp),%rdx
063c2dbe add       $0xC8,%rsp
063c2dc5 ret

core::slice::iter::Iter<array$<usize,4> >::new<array$<usize,4> >:
063c2dd0 sub       $0xC8,%rsp
063c2dd7 mov       %rdx,0x38(%rsp)
063c2ddc mov       %rcx,0x60(%rsp)
063c2de1 mov       %rdx,0x68(%rsp)
063c2de6 call      0x0000`0000`063C`3E20
063c2deb mov       %rax,0x40(%rsp)
063c2df0 mov       %rax,0x70(%rsp)
063c2df5 mov       0x40(%rsp),%rcx
063c2dfa call      0x0000`0000`063B`6430
063c2dff jmp       0x0000`0000`063C`2E01
063c2e01 mov       $0x20,%eax
063c2e06 cmp       $0,%rax
063c2e0a jne       0x0000`0000`063C`2E50
063c2e0c mov       0x38(%rsp),%rcx
063c2e11 mov       0x40(%rsp),%rax
063c2e16 mov       %rax,0xA0(%rsp)
063c2e1e mov       %rcx,0xA8(%rsp)
063c2e26 mov       %rax,0xB0(%rsp)
063c2e2e mov       %rcx,0xB8(%rsp)
063c2e36 add       %rcx,%rax
063c2e39 mov       %rax,0xC0(%rsp)
063c2e41 mov       0xC0(%rsp),%rax
063c2e49 mov       %rax,0x30(%rsp)
063c2e4e jmp       0x0000`0000`063C`2EA4
063c2e50 mov       0x40(%rsp),%rax
063c2e55 mov       0x38(%rsp),%rcx
063c2e5a mov       %rax,0x78(%rsp)
063c2e5f mov       %rcx,0x80(%rsp)
063c2e67 mov       %rax,0x88(%rsp)
063c2e6f mov       %rcx,0x90(%rsp)
063c2e77 shl       $5,%rcx
063c2e7b add       %rcx,%rax
063c2e7e mov       %rax,0x98(%rsp)
063c2e86 mov       0x98(%rsp),%rax
063c2e8e mov       %rax,0x58(%rsp)
063c2e93 mov       0x40(%rsp),%rcx
063c2e98 call      0x0000`0000`063B`62A0
063c2e9d mov       %rax,0x28(%rsp)
063c2ea2 jmp       0x0000`0000`063C`2EB0
063c2ea4 mov       0x30(%rsp),%rax
063c2ea9 mov       %rax,0x58(%rsp)
063c2eae jmp       0x0000`0000`063C`2E93
063c2eb0 mov       0x28(%rsp),%rcx
063c2eb5 mov       0x58(%rsp),%rax
063c2eba mov       %rcx,0x48(%rsp)
063c2ebf mov       %rax,0x50(%rsp)
063c2ec4 mov       0x48(%rsp),%rax
063c2ec9 mov       0x50(%rsp),%rdx
063c2ece add       $0xC8,%rsp
063c2ed5 ret

core::slice::iter::Iter<core::fmt::rt::v1::Argument>::new<core::fmt::rt::v1::Argument>:
063c2ee0 sub       $0xC8,%rsp
063c2ee7 mov       %rdx,0x38(%rsp)
063c2eec mov       %rcx,0x60(%rsp)
063c2ef1 mov       %rdx,0x68(%rsp)
063c2ef6 call      0x0000`0000`063C`3D80
063c2efb mov       %rax,0x40(%rsp)
063c2f00 mov       %rax,0x70(%rsp)
063c2f05 mov       0x40(%rsp),%rcx
063c2f0a call      0x0000`0000`063B`63D0
063c2f0f jmp       0x0000`0000`063C`2F11
063c2f11 mov       $0x38,%eax
063c2f16 cmp       $0,%rax
063c2f1a jne       0x0000`0000`063C`2F60
063c2f1c mov       0x38(%rsp),%rcx
063c2f21 mov       0x40(%rsp),%rax
063c2f26 mov       %rax,0xA0(%rsp)
063c2f2e mov       %rcx,0xA8(%rsp)
063c2f36 mov       %rax,0xB0(%rsp)
063c2f3e mov       %rcx,0xB8(%rsp)
063c2f46 add       %rcx,%rax
063c2f49 mov       %rax,0xC0(%rsp)
063c2f51 mov       0xC0(%rsp),%rax
063c2f59 mov       %rax,0x30(%rsp)
063c2f5e jmp       0x0000`0000`063C`2FB4
063c2f60 mov       0x40(%rsp),%rax
063c2f65 mov       0x38(%rsp),%rcx
063c2f6a mov       %rax,0x78(%rsp)
063c2f6f mov       %rcx,0x80(%rsp)
063c2f77 mov       %rax,0x88(%rsp)
063c2f7f mov       %rcx,0x90(%rsp)
063c2f87 imul      $0x38,%rcx
063c2f8b add       %rcx,%rax
063c2f8e mov       %rax,0x98(%rsp)
063c2f96 mov       0x98(%rsp),%rax
063c2f9e mov       %rax,0x58(%rsp)
063c2fa3 mov       0x40(%rsp),%rcx
063c2fa8 call      0x0000`0000`063B`6240
063c2fad mov       %rax,0x28(%rsp)
063c2fb2 jmp       0x0000`0000`063C`2FC0
063c2fb4 mov       0x30(%rsp),%rax
063c2fb9 mov       %rax,0x58(%rsp)
063c2fbe jmp       0x0000`0000`063C`2FA3
063c2fc0 mov       0x28(%rsp),%rcx
063c2fc5 mov       0x58(%rsp),%rax
063c2fca mov       %rcx,0x48(%rsp)
063c2fcf mov       %rax,0x50(%rsp)
063c2fd4 mov       0x48(%rsp),%rax
063c2fd9 mov       0x50(%rsp),%rdx
063c2fde add       $0xC8,%rsp
063c2fe5 ret

core::slice::iter::Iter<core::fmt::ArgumentV1>::new<core::fmt::ArgumentV1>:
063c2ff0 sub       $0xC8,%rsp
063c2ff7 mov       %rdx,0x38(%rsp)
063c2ffc mov       %rcx,0x60(%rsp)
063c3001 mov       %rdx,0x68(%rsp)
063c3006 call      0x0000`0000`063C`3DE0
063c300b mov       %rax,0x40(%rsp)
063c3010 mov       %rax,0x70(%rsp)
063c3015 mov       0x40(%rsp),%rcx
063c301a call      0x0000`0000`063B`6460
063c301f jmp       0x0000`0000`063C`3021
063c3021 mov       $0x10,%eax
063c3026 cmp       $0,%rax
063c302a jne       0x0000`0000`063C`3070
063c302c mov       0x38(%rsp),%rcx
063c3031 mov       0x40(%rsp),%rax
063c3036 mov       %rax,0xA0(%rsp)
063c303e mov       %rcx,0xA8(%rsp)
063c3046 mov       %rax,0xB0(%rsp)
063c304e mov       %rcx,0xB8(%rsp)
063c3056 add       %rcx,%rax
063c3059 mov       %rax,0xC0(%rsp)
063c3061 mov       0xC0(%rsp),%rax
063c3069 mov       %rax,0x30(%rsp)
063c306e jmp       0x0000`0000`063C`30C4
063c3070 mov       0x40(%rsp),%rax
063c3075 mov       0x38(%rsp),%rcx
063c307a mov       %rax,0x78(%rsp)
063c307f mov       %rcx,0x80(%rsp)
063c3087 mov       %rax,0x88(%rsp)
063c308f mov       %rcx,0x90(%rsp)
063c3097 shl       $4,%rcx
063c309b add       %rcx,%rax
063c309e mov       %rax,0x98(%rsp)
063c30a6 mov       0x98(%rsp),%rax
063c30ae mov       %rax,0x58(%rsp)
063c30b3 mov       0x40(%rsp),%rcx
063c30b8 call      0x0000`0000`063B`62C0
063c30bd mov       %rax,0x28(%rsp)
063c30c2 jmp       0x0000`0000`063C`30D0
063c30c4 mov       0x30(%rsp),%rax
063c30c9 mov       %rax,0x58(%rsp)
063c30ce jmp       0x0000`0000`063C`30B3
063c30d0 mov       0x28(%rsp),%rcx
063c30d5 mov       0x58(%rsp),%rax
063c30da mov       %rcx,0x48(%rsp)
063c30df mov       %rax,0x50(%rsp)
063c30e4 mov       0x48(%rsp),%rax
063c30e9 mov       0x50(%rsp),%rdx
063c30ee add       $0xC8,%rsp
063c30f5 ret

core::slice::iter::Iter<usize>::new<usize>:
063c3100 sub       $0xC8,%rsp
063c3107 mov       %rdx,0x38(%rsp)
063c310c mov       %rcx,0x60(%rsp)
063c3111 mov       %rdx,0x68(%rsp)
063c3116 call      0x0000`0000`063C`3E00
063c311b mov       %rax,0x40(%rsp)
063c3120 mov       %rax,0x70(%rsp)
063c3125 mov       0x40(%rsp),%rcx
063c312a call      0x0000`0000`063B`6370
063c312f jmp       0x0000`0000`063C`3131
063c3131 mov       $8,%eax
063c3136 cmp       $0,%rax
063c313a jne       0x0000`0000`063C`3180
063c313c mov       0x38(%rsp),%rcx
063c3141 mov       0x40(%rsp),%rax
063c3146 mov       %rax,0xA0(%rsp)
063c314e mov       %rcx,0xA8(%rsp)
063c3156 mov       %rax,0xB0(%rsp)
063c315e mov       %rcx,0xB8(%rsp)
063c3166 add       %rcx,%rax
063c3169 mov       %rax,0xC0(%rsp)
063c3171 mov       0xC0(%rsp),%rax
063c3179 mov       %rax,0x30(%rsp)
063c317e jmp       0x0000`0000`063C`31D4
063c3180 mov       0x40(%rsp),%rax
063c3185 mov       0x38(%rsp),%rcx
063c318a mov       %rax,0x78(%rsp)
063c318f mov       %rcx,0x80(%rsp)
063c3197 mov       %rax,0x88(%rsp)
063c319f mov       %rcx,0x90(%rsp)
063c31a7 shl       $3,%rcx
063c31ab add       %rcx,%rax
063c31ae mov       %rax,0x98(%rsp)
063c31b6 mov       0x98(%rsp),%rax
063c31be mov       %rax,0x58(%rsp)
063c31c3 mov       0x40(%rsp),%rcx
063c31c8 call      0x0000`0000`063B`6260
063c31cd mov       %rax,0x28(%rsp)
063c31d2 jmp       0x0000`0000`063C`31E0
063c31d4 mov       0x30(%rsp),%rax
063c31d9 mov       %rax,0x58(%rsp)
063c31de jmp       0x0000`0000`063C`31C3
063c31e0 mov       0x28(%rsp),%rcx
063c31e5 mov       0x58(%rsp),%rax
063c31ea mov       %rcx,0x48(%rsp)
063c31ef mov       %rax,0x50(%rsp)
063c31f4 mov       0x48(%rsp),%rax
063c31f9 mov       0x50(%rsp),%rdx
063c31fe add       $0xC8,%rsp
063c3205 ret

core::slice::iter::Iter<u8>::new<u8>:
063c3210 sub       $0xC8,%rsp
063c3217 mov       %rdx,0x38(%rsp)
063c321c mov       %rcx,0x60(%rsp)
063c3221 mov       %rdx,0x68(%rsp)
063c3226 call      0x0000`0000`063C`3DA0
063c322b mov       %rax,0x40(%rsp)
063c3230 mov       %rax,0x70(%rsp)
063c3235 mov       0x40(%rsp),%rcx
063c323a call      0x0000`0000`063B`63A0
063c323f jmp       0x0000`0000`063C`3241
063c3241 mov       $1,%eax
063c3246 cmp       $0,%rax
063c324a jne       0x0000`0000`063C`3290
063c324c mov       0x38(%rsp),%rcx
063c3251 mov       0x40(%rsp),%rax
063c3256 mov       %rax,0xA0(%rsp)
063c325e mov       %rcx,0xA8(%rsp)
063c3266 mov       %rax,0xB0(%rsp)
063c326e mov       %rcx,0xB8(%rsp)
063c3276 add       %rcx,%rax
063c3279 mov       %rax,0xC0(%rsp)
063c3281 mov       0xC0(%rsp),%rax
063c3289 mov       %rax,0x30(%rsp)
063c328e jmp       0x0000`0000`063C`32E0
063c3290 mov       0x38(%rsp),%rcx
063c3295 mov       0x40(%rsp),%rax
063c329a mov       %rax,0x78(%rsp)
063c329f mov       %rcx,0x80(%rsp)
063c32a7 mov       %rax,0x88(%rsp)
063c32af mov       %rcx,0x90(%rsp)
063c32b7 add       %rcx,%rax
063c32ba mov       %rax,0x98(%rsp)
063c32c2 mov       0x98(%rsp),%rax
063c32ca mov       %rax,0x58(%rsp)
063c32cf mov       0x40(%rsp),%rcx
063c32d4 call      0x0000`0000`063B`6280
063c32d9 mov       %rax,0x28(%rsp)
063c32de jmp       0x0000`0000`063C`32EC
063c32e0 mov       0x30(%rsp),%rax
063c32e5 mov       %rax,0x58(%rsp)
063c32ea jmp       0x0000`0000`063C`32CF
063c32ec mov       0x28(%rsp),%rcx
063c32f1 mov       0x58(%rsp),%rax
063c32f6 mov       %rcx,0x48(%rsp)
063c32fb mov       %rax,0x50(%rsp)
063c3300 mov       0x48(%rsp),%rax
063c3305 mov       0x50(%rsp),%rdx
063c330a add       $0xC8,%rsp
063c3311 ret

core::slice::iter::Iter<u8>::as_slice<u8>:
063c3320 sub       $0x98,%rsp
063c3327 mov       %rcx,0x30(%rsp)
063c332c mov       %rcx,0x58(%rsp)
063c3331 mov       %rcx,0x68(%rsp)
063c3336 mov       (%rcx),%rcx
063c3339 call      0x0000`0000`063B`6340
063c333e mov       0x30(%rsp),%rcx
063c3343 mov       %rax,0x38(%rsp)
063c3348 mov       (%rcx),%rcx
063c334b mov       %rcx,0x28(%rsp)
063c3350 mov       %rcx,0x70(%rsp)
063c3355 call      0x0000`0000`063B`6340
063c335a mov       0x28(%rsp),%rcx
063c335f mov       %rax,%rdx
063c3362 mov       0x30(%rsp),%rax
063c3367 mov       %rdx,0x90(%rsp)
063c336f movq      $1,0x78(%rsp)
063c3378 mov       8(%rax),%rax
063c337c mov       %rax,0x40(%rsp)
063c3381 call      0x0000`0000`063B`6340
063c3386 mov       0x38(%rsp),%rcx
063c338b mov       %rax,%rdx
063c338e mov       0x40(%rsp),%rax
063c3393 sub       %rdx,%rax
063c3396 mov       %rax,0x80(%rsp)
063c339e mov       0x80(%rsp),%rax
063c33a6 mov       %rax,0x88(%rsp)
063c33ae mov       %rax,0x60(%rsp)
063c33b3 mov       0x60(%rsp),%rdx
063c33b8 call      0x0000`0000`063C`36A0
063c33bd mov       %rax,0x48(%rsp)
063c33c2 mov       %rdx,0x50(%rsp)
063c33c7 mov       0x50(%rsp),%rdx
063c33cc mov       0x48(%rsp),%rax
063c33d1 add       $0x98,%rsp
063c33d8 ret

core::slice::iter::IterMut<core::mem::maybe_uninit::MaybeUninit<u8> >::new<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c33e0 sub       $0xC8,%rsp
063c33e7 mov       %rdx,0x38(%rsp)
063c33ec mov       %rcx,0x60(%rsp)
063c33f1 mov       %rdx,0x68(%rsp)
063c33f6 call      0x0000`0000`063C`3E40
063c33fb mov       %rax,0x40(%rsp)
063c3400 mov       %rax,0x70(%rsp)
063c3405 mov       0x40(%rsp),%rcx
063c340a call      0x0000`0000`063B`6830
063c340f jmp       0x0000`0000`063C`3411
063c3411 mov       $1,%eax
063c3416 cmp       $0,%rax
063c341a jne       0x0000`0000`063C`3460
063c341c mov       0x38(%rsp),%rcx
063c3421 mov       0x40(%rsp),%rax
063c3426 mov       %rax,0xA0(%rsp)
063c342e mov       %rcx,0xA8(%rsp)
063c3436 mov       %rax,0xB0(%rsp)
063c343e mov       %rcx,0xB8(%rsp)
063c3446 add       %rcx,%rax
063c3449 mov       %rax,0xC0(%rsp)
063c3451 mov       0xC0(%rsp),%rax
063c3459 mov       %rax,0x30(%rsp)
063c345e jmp       0x0000`0000`063C`34B0
063c3460 mov       0x38(%rsp),%rcx
063c3465 mov       0x40(%rsp),%rax
063c346a mov       %rax,0x78(%rsp)
063c346f mov       %rcx,0x80(%rsp)
063c3477 mov       %rax,0x88(%rsp)
063c347f mov       %rcx,0x90(%rsp)
063c3487 add       %rcx,%rax
063c348a mov       %rax,0x98(%rsp)
063c3492 mov       0x98(%rsp),%rax
063c349a mov       %rax,0x58(%rsp)
063c349f mov       0x40(%rsp),%rcx
063c34a4 call      0x0000`0000`063B`6220
063c34a9 mov       %rax,0x28(%rsp)
063c34ae jmp       0x0000`0000`063C`34BC
063c34b0 mov       0x30(%rsp),%rax
063c34b5 mov       %rax,0x58(%rsp)
063c34ba jmp       0x0000`0000`063C`349F
063c34bc mov       0x28(%rsp),%rcx
063c34c1 mov       0x58(%rsp),%rax
063c34c6 mov       %rcx,0x48(%rsp)
063c34cb mov       %rax,0x50(%rsp)
063c34d0 mov       0x48(%rsp),%rax
063c34d5 mov       0x50(%rsp),%rdx
063c34da add       $0xC8,%rsp
063c34e1 ret

core::slice::iter::Chunks<usize>::new<usize>:
063c34f0 sub       $0x18,%rsp
063c34f4 mov       %rcx,%rax
063c34f7 mov       %rdx,(%rsp)
063c34fb mov       %r8,8(%rsp)
063c3500 mov       %r9,0x10(%rsp)
063c3505 mov       %rdx,(%rcx)
063c3508 mov       %r8,8(%rcx)
063c350c mov       %r9,0x10(%rcx)
063c3510 add       $0x18,%rsp
063c3514 ret

core::slice::iter::impl$70::next<usize>:
063c3520 sub       $0xA8,%rsp
063c3527 mov       %rcx,%rax
063c352a mov       %rax,0x38(%rsp)
063c352f mov       %rax,0x78(%rsp)
063c3534 mov       (%rax),%rcx
063c3537 mov       8(%rax),%rdx
063c353b call      0x0000`0000`063C`39F0
063c3540 mov       %al,0x47(%rsp)
063c3544 mov       0x47(%rsp),%al
063c3548 test      $1,%al
063c354a jne       0x0000`0000`063C`356F
063c354c jmp       0x0000`0000`063C`354E
063c354e mov       0x38(%rsp),%rax
063c3553 mov       8(%rax),%rcx
063c3557 mov       0x10(%rax),%rdx
063c355b call      0x0000`0000`063B`7880
063c3560 mov       %rax,0x30(%rsp)
063c3565 mov       %rax,0x80(%rsp)
063c356d jmp       0x0000`0000`063C`358A
063c356f movq      $0,0x48(%rsp)
063c3578 mov       0x48(%rsp),%rax
063c357d mov       0x50(%rsp),%rdx
063c3582 add       $0xA8,%rsp
063c3589 ret
063c358a mov       0x30(%rsp),%r9
063c358f mov       0x38(%rsp),%rax
063c3594 mov       (%rax),%rdx
063c3597 mov       8(%rax),%r8
063c359b lea       0x58(%rsp),%rcx
063c35a0 lea       0x63D`1140,%rax
063c35a7 mov       %rax,0x20(%rsp)
063c35ac call      0x0000`0000`063C`44B0
063c35b1 mov       0x38(%rsp),%rdx
063c35b6 mov       0x58(%rsp),%rcx
063c35bb mov       0x60(%rsp),%rax
063c35c0 mov       %rcx,0x88(%rsp)
063c35c8 mov       %rax,0x90(%rsp)
063c35d0 mov       0x68(%rsp),%r9
063c35d5 mov       0x70(%rsp),%r8
063c35da mov       %r9,0x98(%rsp)
063c35e2 mov       %r8,0xA0(%rsp)
063c35ea mov       %r9,(%rdx)
063c35ed mov       %r8,8(%rdx)
063c35f1 mov       %rcx,0x48(%rsp)
063c35f6 mov       %rax,0x50(%rsp)
063c35fb jmp       0x0000`0000`063C`3578

core::slice::raw::from_raw_parts<usize>:
063c3600 sub       $0x58,%rsp
063c3604 mov       %rdx,0x38(%rsp)
063c3609 mov       %rcx,0x40(%rsp)
063c360e mov       %rcx,0x48(%rsp)
063c3613 mov       %rdx,0x50(%rsp)
063c3618 call      0x0000`0000`063C`3830
063c361d mov       0x38(%rsp),%rdx
063c3622 mov       0x40(%rsp),%rcx
063c3627 call      0x0000`0000`063B`69F0
063c362c mov       %rax,0x28(%rsp)
063c3631 mov       %rdx,0x30(%rsp)
063c3636 mov       0x30(%rsp),%rdx
063c363b mov       0x28(%rsp),%rax
063c3640 add       $0x58,%rsp
063c3644 ret

core::slice::raw::from_raw_parts<array$<usize,4> >:
063c3650 sub       $0x58,%rsp
063c3654 mov       %rdx,0x38(%rsp)
063c3659 mov       %rcx,0x40(%rsp)
063c365e mov       %rcx,0x48(%rsp)
063c3663 mov       %rdx,0x50(%rsp)
063c3668 call      0x0000`0000`063C`36F0
063c366d mov       0x38(%rsp),%rdx
063c3672 mov       0x40(%rsp),%rcx
063c3677 call      0x0000`0000`063B`6950
063c367c mov       %rax,0x28(%rsp)
063c3681 mov       %rdx,0x30(%rsp)
063c3686 mov       0x30(%rsp),%rdx
063c368b mov       0x28(%rsp),%rax
063c3690 add       $0x58,%rsp
063c3694 ret

core::slice::raw::from_raw_parts<u8>:
063c36a0 sub       $0x58,%rsp
063c36a4 mov       %rdx,0x38(%rsp)
063c36a9 mov       %rcx,0x40(%rsp)
063c36ae mov       %rcx,0x48(%rsp)
063c36b3 mov       %rdx,0x50(%rsp)
063c36b8 call      0x0000`0000`063C`3790
063c36bd mov       0x38(%rsp),%rdx
063c36c2 mov       0x40(%rsp),%rcx
063c36c7 call      0x0000`0000`063B`69A0
063c36cc mov       %rax,0x28(%rsp)
063c36d1 mov       %rdx,0x30(%rsp)
063c36d6 mov       0x30(%rsp),%rdx
063c36db mov       0x28(%rsp),%rax
063c36e0 add       $0x58,%rsp
063c36e4 ret

core::slice::raw::debug_check_data_len<array$<usize,4> >:
063c36f0 sub       $0x88,%rsp
063c36f7 mov       %rdx,0x38(%rsp)
063c36fc mov       %rcx,0x78(%rsp)
063c3701 mov       %rdx,0x80(%rsp)
063c3709 mov       %rcx,0x40(%rsp)
063c370e mov       0x40(%rsp),%rcx
063c3713 call      0x0000`0000`063B`5D10
063c3718 jmp       0x0000`0000`063C`371A
063c371a mov       0x38(%rsp),%rdx
063c371f mov       $0x20,%ecx
063c3724 call      0x0000`0000`063C`84D0
063c3729 mov       %rax,0x30(%rsp)
063c372e mov       0x30(%rsp),%rax
063c3733 movabs    $0x7FFF`FFFF`FFFF`FFFF,%rcx
063c373d cmp       %rcx,%rax
063c3740 setbe     %al
063c3743 xor       $0xFF,%al
063c3745 test      $1,%al
063c3747 jne       0x0000`0000`063C`3751
063c3749 add       $0x88,%rsp
063c3750 ret
063c3751 lea       0x48(%rsp),%rcx
063c3756 lea       0x63D`1198,%rdx
063c375d mov       $1,%r8d
063c3763 lea       0x63C`F530,%r9
063c376a xor       %eax,%eax
063c376c movq      $0,0x20(%rsp)
063c3775 call      0x0000`0000`063B`EFF0
063c377a lea       0x63D`1220,%rdx
063c3781 lea       0x48(%rsp),%rcx
063c3786 call      0x0000`0000`063B`A100
063c378b ud2

core::slice::raw::debug_check_data_len<u8>:
063c3790 sub       $0x88,%rsp
063c3797 mov       %rdx,0x38(%rsp)
063c379c mov       %rcx,0x78(%rsp)
063c37a1 mov       %rdx,0x80(%rsp)
063c37a9 mov       %rcx,0x40(%rsp)
063c37ae mov       0x40(%rsp),%rcx
063c37b3 call      0x0000`0000`063B`5DA0
063c37b8 jmp       0x0000`0000`063C`37BA
063c37ba mov       0x38(%rsp),%rdx
063c37bf mov       $1,%ecx
063c37c4 call      0x0000`0000`063C`84D0
063c37c9 mov       %rax,0x30(%rsp)
063c37ce mov       0x30(%rsp),%rax
063c37d3 movabs    $0x7FFF`FFFF`FFFF`FFFF,%rcx
063c37dd cmp       %rcx,%rax
063c37e0 setbe     %al
063c37e3 xor       $0xFF,%al
063c37e5 test      $1,%al
063c37e7 jne       0x0000`0000`063C`37F1
063c37e9 add       $0x88,%rsp
063c37f0 ret
063c37f1 lea       0x48(%rsp),%rcx
063c37f6 lea       0x63D`1198,%rdx
063c37fd mov       $1,%r8d
063c3803 lea       0x63C`F530,%r9
063c380a xor       %eax,%eax
063c380c movq      $0,0x20(%rsp)
063c3815 call      0x0000`0000`063B`EFF0
063c381a lea       0x63D`1220,%rdx
063c3821 lea       0x48(%rsp),%rcx
063c3826 call      0x0000`0000`063B`A100
063c382b ud2

core::slice::raw::debug_check_data_len<usize>:
063c3830 sub       $0x88,%rsp
063c3837 mov       %rdx,0x38(%rsp)
063c383c mov       %rcx,0x78(%rsp)
063c3841 mov       %rdx,0x80(%rsp)
063c3849 mov       %rcx,0x40(%rsp)
063c384e mov       0x40(%rsp),%rcx
063c3853 call      0x0000`0000`063B`5CD0
063c3858 jmp       0x0000`0000`063C`385A
063c385a mov       0x38(%rsp),%rdx
063c385f mov       $8,%ecx
063c3864 call      0x0000`0000`063C`84D0
063c3869 mov       %rax,0x30(%rsp)
063c386e mov       0x30(%rsp),%rax
063c3873 movabs    $0x7FFF`FFFF`FFFF`FFFF,%rcx
063c387d cmp       %rcx,%rax
063c3880 setbe     %al
063c3883 xor       $0xFF,%al
063c3885 test      $1,%al
063c3887 jne       0x0000`0000`063C`3891
063c3889 add       $0x88,%rsp
063c3890 ret
063c3891 lea       0x48(%rsp),%rcx
063c3896 lea       0x63D`1198,%rdx
063c389d mov       $1,%r8d
063c38a3 lea       0x63C`F530,%r9
063c38aa xor       %eax,%eax
063c38ac movq      $0,0x20(%rsp)
063c38b5 call      0x0000`0000`063B`EFF0
063c38ba lea       0x63D`1220,%rdx
063c38c1 lea       0x48(%rsp),%rcx
063c38c6 call      0x0000`0000`063B`A100
063c38cb ud2

core::slice::raw::debug_check_data_len::rt_check<array$<usize,4> >:
063c38d0 sub       $0x68,%rsp
063c38d4 mov       %rcx,0x60(%rsp)
063c38d9 call      0x0000`0000`063B`5900
063c38de mov       %al,0x2F(%rsp)
063c38e2 mov       0x2F(%rsp),%al
063c38e6 xor       $0xFF,%al
063c38e8 test      $1,%al
063c38ea jne       0x0000`0000`063C`38F1
063c38ec add       $0x68,%rsp
063c38f0 ret
063c38f1 lea       0x30(%rsp),%rcx
063c38f6 lea       0x63D`1268,%rdx
063c38fd mov       $1,%r8d
063c3903 lea       0x63C`F530,%r9
063c390a xor       %eax,%eax
063c390c movq      $0,0x20(%rsp)
063c3915 call      0x0000`0000`063B`EFF0
063c391a lea       0x63D`1278,%rdx
063c3921 lea       0x30(%rsp),%rcx
063c3926 call      0x0000`0000`063B`A100
063c392b ud2

core::slice::raw::debug_check_data_len::rt_check<usize>:
063c3930 sub       $0x68,%rsp
063c3934 mov       %rcx,0x60(%rsp)
063c3939 call      0x0000`0000`063B`5980
063c393e mov       %al,0x2F(%rsp)
063c3942 mov       0x2F(%rsp),%al
063c3946 xor       $0xFF,%al
063c3948 test      $1,%al
063c394a jne       0x0000`0000`063C`3951
063c394c add       $0x68,%rsp
063c3950 ret
063c3951 lea       0x30(%rsp),%rcx
063c3956 lea       0x63D`1268,%rdx
063c395d mov       $1,%r8d
063c3963 lea       0x63C`F530,%r9
063c396a xor       %eax,%eax
063c396c movq      $0,0x20(%rsp)
063c3975 call      0x0000`0000`063B`EFF0
063c397a lea       0x63D`1278,%rdx
063c3981 lea       0x30(%rsp),%rcx
063c3986 call      0x0000`0000`063B`A100
063c398b ud2

core::slice::raw::debug_check_data_len::rt_check<u8>:
063c3990 sub       $0x68,%rsp
063c3994 mov       %rcx,0x60(%rsp)
063c3999 call      0x0000`0000`063B`5880
063c399e mov       %al,0x2F(%rsp)
063c39a2 mov       0x2F(%rsp),%al
063c39a6 xor       $0xFF,%al
063c39a8 test      $1,%al
063c39aa jne       0x0000`0000`063C`39B1
063c39ac add       $0x68,%rsp
063c39b0 ret
063c39b1 lea       0x30(%rsp),%rcx
063c39b6 lea       0x63D`1268,%rdx
063c39bd mov       $1,%r8d
063c39c3 lea       0x63C`F530,%r9
063c39ca xor       %eax,%eax
063c39cc movq      $0,0x20(%rsp)
063c39d5 call      0x0000`0000`063B`EFF0
063c39da lea       0x63D`1278,%rdx
063c39e1 lea       0x30(%rsp),%rcx
063c39e6 call      0x0000`0000`063B`A100
063c39eb ud2

core::slice::impl$0::is_empty<usize>:
063c39f0 sub       $0x10,%rsp
063c39f4 mov       %rcx,(%rsp)
063c39f8 mov       %rdx,8(%rsp)
063c39fd cmp       $0,%rdx
063c3a01 sete      %al
063c3a04 and       $1,%al
063c3a06 movzbl    %al,%eax
063c3a09 add       $0x10,%rsp
063c3a0d ret

core::slice::impl$0::get<u32,usize>:
063c3a10 sub       $0x48,%rsp
063c3a14 mov       %r8,0x20(%rsp)
063c3a19 mov       %rdx,%r8
063c3a1c mov       %rcx,%rdx
063c3a1f mov       0x20(%rsp),%rcx
063c3a24 mov       %rdx,0x30(%rsp)
063c3a29 mov       %r8,0x38(%rsp)
063c3a2e mov       %rcx,0x40(%rsp)
063c3a33 call      0x0000`0000`063C`1E60
063c3a38 mov       %rax,0x28(%rsp)
063c3a3d mov       0x28(%rsp),%rax
063c3a42 add       $0x48,%rsp
063c3a46 ret

core::slice::impl$0::get<u8,usize>:
063c3a50 sub       $0x48,%rsp
063c3a54 mov       %r8,0x20(%rsp)
063c3a59 mov       %rdx,%r8
063c3a5c mov       %rcx,%rdx
063c3a5f mov       0x20(%rsp),%rcx
063c3a64 mov       %rdx,0x30(%rsp)
063c3a69 mov       %r8,0x38(%rsp)
063c3a6e mov       %rcx,0x40(%rsp)
063c3a73 call      0x0000`0000`063C`1E00
063c3a78 mov       %rax,0x28(%rsp)
063c3a7d mov       0x28(%rsp),%rax
063c3a82 add       $0x48,%rsp
063c3a86 ret

core::slice::impl$0::get<str,usize>:
063c3a90 sub       $0x48,%rsp
063c3a94 mov       %r8,0x20(%rsp)
063c3a99 mov       %rdx,%r8
063c3a9c mov       %rcx,%rdx
063c3a9f mov       0x20(%rsp),%rcx
063c3aa4 mov       %rdx,0x30(%rsp)
063c3aa9 mov       %r8,0x38(%rsp)
063c3aae mov       %rcx,0x40(%rsp)
063c3ab3 call      0x0000`0000`063C`1DA0
063c3ab8 mov       %rax,0x28(%rsp)
063c3abd mov       0x28(%rsp),%rax
063c3ac2 add       $0x48,%rsp
063c3ac6 ret

core::slice::impl$0::get<u8,core::ops::range::Range<usize> >:
063c3ad0 sub       $0x68,%rsp
063c3ad4 mov       %r9,0x28(%rsp)
063c3ad9 mov       %r8,0x30(%rsp)
063c3ade mov       %rdx,%r9
063c3ae1 mov       0x28(%rsp),%rdx
063c3ae6 mov       %rcx,%r8
063c3ae9 mov       0x30(%rsp),%rcx
063c3aee mov       %r8,0x48(%rsp)
063c3af3 mov       %r9,0x50(%rsp)
063c3af8 mov       %rcx,0x58(%rsp)
063c3afd mov       %rdx,0x60(%rsp)
063c3b02 call      0x0000`0000`063C`2100
063c3b07 mov       %rax,0x38(%rsp)
063c3b0c mov       %rdx,0x40(%rsp)
063c3b11 mov       0x40(%rsp),%rdx
063c3b16 mov       0x38(%rsp),%rax
063c3b1b add       $0x68,%rsp
063c3b1f ret

core::slice::impl$0::get_unchecked<core::fmt::ArgumentV1,usize>:
063c3b20 sub       $0x48,%rsp
063c3b24 mov       %r8,0x20(%rsp)
063c3b29 mov       %rdx,%r8
063c3b2c mov       %rcx,%rdx
063c3b2f mov       0x20(%rsp),%rcx
063c3b34 mov       %rdx,0x30(%rsp)
063c3b39 mov       %r8,0x38(%rsp)
063c3b3e mov       %rcx,0x40(%rsp)
063c3b43 call      0x0000`0000`063C`1EC0
063c3b48 mov       %rax,0x28(%rsp)
063c3b4d mov       0x28(%rsp),%rax
063c3b52 add       $0x48,%rsp
063c3b56 ret

core::slice::impl$0::get_unchecked<u8,core::ops::range::RangeTo<usize> >:
063c3b60 sub       $0x58,%rsp
063c3b64 mov       %r8,0x28(%rsp)
063c3b69 mov       %rdx,%r8
063c3b6c mov       %rcx,%rdx
063c3b6f mov       0x28(%rsp),%rcx
063c3b74 mov       %rdx,0x40(%rsp)
063c3b79 mov       %r8,0x48(%rsp)
063c3b7e mov       %rcx,0x50(%rsp)
063c3b83 call      0x0000`0000`063C`2750
063c3b88 mov       %rax,0x30(%rsp)
063c3b8d mov       %rdx,0x38(%rsp)
063c3b92 mov       0x38(%rsp),%rdx
063c3b97 mov       0x30(%rsp),%rax
063c3b9c add       $0x58,%rsp
063c3ba0 ret

core::slice::impl$0::get_unchecked<str,usize>:
063c3bb0 sub       $0x48,%rsp
063c3bb4 mov       %r8,0x20(%rsp)
063c3bb9 mov       %rdx,%r8
063c3bbc mov       %rcx,%rdx
063c3bbf mov       0x20(%rsp),%rcx
063c3bc4 mov       %rdx,0x30(%rsp)
063c3bc9 mov       %r8,0x38(%rsp)
063c3bce mov       %rcx,0x40(%rsp)
063c3bd3 call      0x0000`0000`063C`1F50
063c3bd8 mov       %rax,0x28(%rsp)
063c3bdd mov       0x28(%rsp),%rax
063c3be2 add       $0x48,%rsp
063c3be6 ret

core::slice::impl$0::get_unchecked<u32,usize>:
063c3bf0 sub       $0x48,%rsp
063c3bf4 mov       %r8,0x20(%rsp)
063c3bf9 mov       %rdx,%r8
063c3bfc mov       %rcx,%rdx
063c3bff mov       0x20(%rsp),%rcx
063c3c04 mov       %rdx,0x30(%rsp)
063c3c09 mov       %r8,0x38(%rsp)
063c3c0e mov       %rcx,0x40(%rsp)
063c3c13 call      0x0000`0000`063C`1FE0
063c3c18 mov       %rax,0x28(%rsp)
063c3c1d mov       0x28(%rsp),%rax
063c3c22 add       $0x48,%rsp
063c3c26 ret

core::slice::impl$0::get_unchecked<usize,core::ops::range::RangeTo<usize> >:
063c3c30 sub       $0x58,%rsp
063c3c34 mov       %r8,0x28(%rsp)
063c3c39 mov       %rdx,%r8
063c3c3c mov       %rcx,%rdx
063c3c3f mov       0x28(%rsp),%rcx
063c3c44 mov       %rdx,0x40(%rsp)
063c3c49 mov       %r8,0x48(%rsp)
063c3c4e mov       %rcx,0x50(%rsp)
063c3c53 call      0x0000`0000`063C`2700
063c3c58 mov       %rax,0x30(%rsp)
063c3c5d mov       %rdx,0x38(%rsp)
063c3c62 mov       0x38(%rsp),%rdx
063c3c67 mov       0x30(%rsp),%rax
063c3c6c add       $0x58,%rsp
063c3c70 ret

core::slice::impl$0::get_unchecked<u8,usize>:
063c3c80 sub       $0x48,%rsp
063c3c84 mov       %r8,0x20(%rsp)
063c3c89 mov       %rdx,%r8
063c3c8c mov       %rcx,%rdx
063c3c8f mov       0x20(%rsp),%rcx
063c3c94 mov       %rdx,0x30(%rsp)
063c3c99 mov       %r8,0x38(%rsp)
063c3c9e mov       %rcx,0x40(%rsp)
063c3ca3 call      0x0000`0000`063C`2070
063c3ca8 mov       %rax,0x28(%rsp)
063c3cad mov       0x28(%rsp),%rax
063c3cb2 add       $0x48,%rsp
063c3cb6 ret

core::slice::impl$0::get_unchecked<usize,core::ops::range::RangeFrom<usize> >:
063c3cc0 sub       $0x58,%rsp
063c3cc4 mov       %r8,0x28(%rsp)
063c3cc9 mov       %rdx,%r8
063c3ccc mov       %rcx,%rdx
063c3ccf mov       0x28(%rsp),%rcx
063c3cd4 mov       %rdx,0x40(%rsp)
063c3cd9 mov       %r8,0x48(%rsp)
063c3cde mov       %rcx,0x50(%rsp)
063c3ce3 call      0x0000`0000`063C`28F0
063c3ce8 mov       %rax,0x30(%rsp)
063c3ced mov       %rdx,0x38(%rsp)
063c3cf2 mov       0x38(%rsp),%rdx
063c3cf7 mov       0x30(%rsp),%rax
063c3cfc add       $0x58,%rsp
063c3d00 ret

core::slice::impl$0::get_unchecked<u8,core::ops::range::RangeFrom<usize> >:
063c3d10 sub       $0x58,%rsp
063c3d14 mov       %r8,0x28(%rsp)
063c3d19 mov       %rdx,%r8
063c3d1c mov       %rcx,%rdx
063c3d1f mov       0x28(%rsp),%rcx
063c3d24 mov       %rdx,0x40(%rsp)
063c3d29 mov       %r8,0x48(%rsp)
063c3d2e mov       %rcx,0x50(%rsp)
063c3d33 call      0x0000`0000`063C`2860
063c3d38 mov       %rax,0x30(%rsp)
063c3d3d mov       %rdx,0x38(%rsp)
063c3d42 mov       0x38(%rsp),%rdx
063c3d47 mov       0x30(%rsp),%rax
063c3d4c add       $0x58,%rsp
063c3d50 ret

core::slice::impl$0::as_ptr<tuple$<u8,u8> >:
063c3d60 sub       $0x10,%rsp
063c3d64 mov       %rcx,%rax
063c3d67 mov       %rax,(%rsp)
063c3d6b mov       %rdx,8(%rsp)
063c3d70 add       $0x10,%rsp
063c3d74 ret

core::slice::impl$0::as_ptr<core::fmt::rt::v1::Argument>:
063c3d80 sub       $0x10,%rsp
063c3d84 mov       %rcx,%rax
063c3d87 mov       %rax,(%rsp)
063c3d8b mov       %rdx,8(%rsp)
063c3d90 add       $0x10,%rsp
063c3d94 ret

core::slice::impl$0::as_ptr<u8>:
063c3da0 sub       $0x10,%rsp
063c3da4 mov       %rcx,%rax
063c3da7 mov       %rax,(%rsp)
063c3dab mov       %rdx,8(%rsp)
063c3db0 add       $0x10,%rsp
063c3db4 ret

core::slice::impl$0::as_ptr<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c3dc0 sub       $0x10,%rsp
063c3dc4 mov       %rcx,%rax
063c3dc7 mov       %rax,(%rsp)
063c3dcb mov       %rdx,8(%rsp)
063c3dd0 add       $0x10,%rsp
063c3dd4 ret

core::slice::impl$0::as_ptr<core::fmt::ArgumentV1>:
063c3de0 sub       $0x10,%rsp
063c3de4 mov       %rcx,%rax
063c3de7 mov       %rax,(%rsp)
063c3deb mov       %rdx,8(%rsp)
063c3df0 add       $0x10,%rsp
063c3df4 ret

core::slice::impl$0::as_ptr<usize>:
063c3e00 sub       $0x10,%rsp
063c3e04 mov       %rcx,%rax
063c3e07 mov       %rax,(%rsp)
063c3e0b mov       %rdx,8(%rsp)
063c3e10 add       $0x10,%rsp
063c3e14 ret

core::slice::impl$0::as_ptr<array$<usize,4> >:
063c3e20 sub       $0x10,%rsp
063c3e24 mov       %rcx,%rax
063c3e27 mov       %rax,(%rsp)
063c3e2b mov       %rdx,8(%rsp)
063c3e30 add       $0x10,%rsp
063c3e34 ret

core::slice::impl$0::as_mut_ptr<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c3e40 sub       $0x10,%rsp
063c3e44 mov       %rcx,%rax
063c3e47 mov       %rax,(%rsp)
063c3e4b mov       %rdx,8(%rsp)
063c3e50 add       $0x10,%rsp
063c3e54 ret

core::slice::impl$0::iter<core::fmt::ArgumentV1>:
063c3e60 sub       $0x48,%rsp
063c3e64 mov       %rcx,0x38(%rsp)
063c3e69 mov       %rdx,0x40(%rsp)
063c3e6e call      0x0000`0000`063C`2FF0
063c3e73 mov       %rax,0x28(%rsp)
063c3e78 mov       %rdx,0x30(%rsp)
063c3e7d mov       0x30(%rsp),%rdx
063c3e82 mov       0x28(%rsp),%rax
063c3e87 add       $0x48,%rsp
063c3e8b ret

core::slice::impl$0::iter<u8>:
063c3e90 sub       $0x48,%rsp
063c3e94 mov       %rcx,0x38(%rsp)
063c3e99 mov       %rdx,0x40(%rsp)
063c3e9e call      0x0000`0000`063C`3210
063c3ea3 mov       %rax,0x28(%rsp)
063c3ea8 mov       %rdx,0x30(%rsp)
063c3ead mov       0x30(%rsp),%rdx
063c3eb2 mov       0x28(%rsp),%rax
063c3eb7 add       $0x48,%rsp
063c3ebb ret

core::slice::impl$0::iter<tuple$<u8,u8> >:
063c3ec0 sub       $0x48,%rsp
063c3ec4 mov       %rcx,0x38(%rsp)
063c3ec9 mov       %rdx,0x40(%rsp)
063c3ece call      0x0000`0000`063C`2CC0
063c3ed3 mov       %rax,0x28(%rsp)
063c3ed8 mov       %rdx,0x30(%rsp)
063c3edd mov       0x30(%rsp),%rdx
063c3ee2 mov       0x28(%rsp),%rax
063c3ee7 add       $0x48,%rsp
063c3eeb ret

core::slice::impl$0::iter<array$<usize,4> >:
063c3ef0 sub       $0x48,%rsp
063c3ef4 mov       %rcx,0x38(%rsp)
063c3ef9 mov       %rdx,0x40(%rsp)
063c3efe call      0x0000`0000`063C`2DD0
063c3f03 mov       %rax,0x28(%rsp)
063c3f08 mov       %rdx,0x30(%rsp)
063c3f0d mov       0x30(%rsp),%rdx
063c3f12 mov       0x28(%rsp),%rax
063c3f17 add       $0x48,%rsp
063c3f1b ret

core::slice::impl$0::iter<core::fmt::rt::v1::Argument>:
063c3f20 sub       $0x48,%rsp
063c3f24 mov       %rcx,0x38(%rsp)
063c3f29 mov       %rdx,0x40(%rsp)
063c3f2e call      0x0000`0000`063C`2EE0
063c3f33 mov       %rax,0x28(%rsp)
063c3f38 mov       %rdx,0x30(%rsp)
063c3f3d mov       0x30(%rsp),%rdx
063c3f42 mov       0x28(%rsp),%rax
063c3f47 add       $0x48,%rsp
063c3f4b ret

core::slice::impl$0::iter<usize>:
063c3f50 sub       $0x48,%rsp
063c3f54 mov       %rcx,0x38(%rsp)
063c3f59 mov       %rdx,0x40(%rsp)
063c3f5e call      0x0000`0000`063C`3100
063c3f63 mov       %rax,0x28(%rsp)
063c3f68 mov       %rdx,0x30(%rsp)
063c3f6d mov       0x30(%rsp),%rdx
063c3f72 mov       0x28(%rsp),%rax
063c3f77 add       $0x48,%rsp
063c3f7b ret

core::slice::impl$0::iter_mut<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c3f80 sub       $0x48,%rsp
063c3f84 mov       %rcx,0x38(%rsp)
063c3f89 mov       %rdx,0x40(%rsp)
063c3f8e call      0x0000`0000`063C`33E0
063c3f93 mov       %rax,0x28(%rsp)
063c3f98 mov       %rdx,0x30(%rsp)
063c3f9d mov       0x30(%rsp),%rdx
063c3fa2 mov       0x28(%rsp),%rax
063c3fa7 add       $0x48,%rsp
063c3fab ret

core::slice::impl$0::chunks<usize>:
063c3fb0 sub       $0xC8,%rsp
063c3fb7 mov       %r8,0x28(%rsp)
063c3fbc mov       %rdx,0x30(%rsp)
063c3fc1 mov       %rcx,0x38(%rsp)
063c3fc6 mov       %rcx,0x40(%rsp)
063c3fcb mov       %r9,0x58(%rsp)
063c3fd0 mov       %rdx,0xA8(%rsp)
063c3fd8 mov       %r8,0xB0(%rsp)
063c3fe0 lea       0x58(%rsp),%rax
063c3fe5 mov       %rax,0x60(%rsp)
063c3fea lea       0x63C`F530,%rax
063c3ff1 mov       %rax,0x68(%rsp)
063c3ff6 mov       0x60(%rsp),%rax
063c3ffb mov       %rax,0x48(%rsp)
063c4000 mov       %rax,0xB8(%rsp)
063c4008 mov       0x68(%rsp),%rcx
063c400d mov       %rcx,0x50(%rsp)
063c4012 mov       %rcx,0xC0(%rsp)
063c401a mov       (%rax),%rax
063c401d cmp       (%rcx),%rax
063c4020 je        0x0000`0000`063C`403D
063c4022 mov       0x28(%rsp),%r8
063c4027 mov       0x30(%rsp),%rdx
063c402c mov       0x38(%rsp),%rcx
063c4031 mov       0x58(%rsp),%r9
063c4036 call      0x0000`0000`063C`34F0
063c403b jmp       0x0000`0000`063C`4071
063c403d mov       0x50(%rsp),%r8
063c4042 mov       0x48(%rsp),%rdx
063c4047 movb      $1,0x77(%rsp)
063c404c movq      $0,0x78(%rsp)
063c4055 lea       0x63D`1308,%rcx
063c405c mov       %rsp,%rax
063c405f mov       %rcx,0x20(%rax)
063c4063 mov       $1,%cl
063c4065 lea       0x78(%rsp),%r9
063c406a call      0x0000`0000`063B`A150
063c406f ud2
063c4071 mov       0x40(%rsp),%rax
063c4076 add       $0xC8,%rsp
063c407d ret

core::slice::impl$0::as_chunks_unchecked<usize,4>:
063c4080 sub       $0x158,%rsp
063c4087 mov       %rdx,0x60(%rsp)
063c408c mov       %rcx,0x68(%rsp)
063c4091 mov       %rcx,0x118(%rsp)
063c4099 mov       %rdx,0x120(%rsp)
063c40a1 lea       0x63D`1320,%rax
063c40a8 mov       %rax,0x80(%rsp)
063c40b0 lea       0x63C`F530,%rax
063c40b7 mov       %rax,0x88(%rsp)
063c40bf mov       0x80(%rsp),%rax
063c40c7 mov       %rax,0x70(%rsp)
063c40cc mov       %rax,0x128(%rsp)
063c40d4 mov       0x88(%rsp),%rcx
063c40dc mov       %rcx,0x78(%rsp)
063c40e1 mov       %rcx,0x130(%rsp)
063c40e9 mov       (%rax),%rax
063c40ec cmp       (%rcx),%rax
063c40ef je        0x0000`0000`063C`40F3
063c40f1 jmp       0x0000`0000`063C`4130
063c40f3 mov       0x78(%rsp),%r8
063c40f8 mov       0x70(%rsp),%rdx
063c40fd movb      $1,0x97(%rsp)
063c4105 movq      $0,0x98(%rsp)
063c4111 lea       0x63D`1328,%rcx
063c4118 mov       %rsp,%rax
063c411b mov       %rcx,0x20(%rax)
063c411f mov       $1,%cl
063c4121 lea       0x98(%rsp),%r9
063c4129 call      0x0000`0000`063B`A150
063c412e ud2
063c4130 mov       0x60(%rsp),%rax
063c4135 and       $3,%rax
063c4139 mov       %rax,0xD8(%rsp)
063c4141 lea       0xD8(%rsp),%rax
063c4149 mov       %rax,0xC8(%rsp)
063c4151 lea       0x63C`F530,%rax
063c4158 mov       %rax,0xD0(%rsp)
063c4160 mov       0xC8(%rsp),%rax
063c4168 mov       %rax,0x50(%rsp)
063c416d mov       %rax,0x138(%rsp)
063c4175 mov       0xD0(%rsp),%rcx
063c417d mov       %rcx,0x58(%rsp)
063c4182 mov       %rcx,0x140(%rsp)
063c418a mov       (%rax),%rax
063c418d cmp       (%rcx),%rax
063c4190 sete      %al
063c4193 xor       $0xFF,%al
063c4195 test      $1,%al
063c4197 jne       0x0000`0000`063C`41C1
063c4199 mov       0x60(%rsp),%rax
063c419e shr       $2,%rax
063c41a2 mov       %rax,0x148(%rsp)
063c41aa mov       0x148(%rsp),%rax
063c41b2 mov       %rax,0x48(%rsp)
063c41b7 mov       %rax,0x150(%rsp)
063c41bf jmp       0x0000`0000`063C`4200
063c41c1 mov       0x58(%rsp),%r8
063c41c6 mov       0x50(%rsp),%rdx
063c41cb movb      $0,0xE7(%rsp)
063c41d3 movq      $0,0xE8(%rsp)
063c41df lea       0x63D`1340,%rcx
063c41e6 mov       %rsp,%rax
063c41e9 mov       %rcx,0x20(%rax)
063c41ed xor       %eax,%eax
063c41ef mov       %al,%cl
063c41f1 lea       0xE8(%rsp),%r9
063c41f9 call      0x0000`0000`063B`A150
063c41fe ud2
063c4200 mov       0x60(%rsp),%rdx
063c4205 mov       0x68(%rsp),%rcx
063c420a call      0x0000`0000`063C`3E00
063c420f mov       %rax,0x40(%rsp)
063c4214 mov       0x40(%rsp),%rcx
063c4219 call      0x0000`0000`063B`64A0
063c421e mov       %rax,0x38(%rsp)
063c4223 mov       0x48(%rsp),%rdx
063c4228 mov       0x38(%rsp),%rcx
063c422d call      0x0000`0000`063C`3650
063c4232 mov       %rax,0x28(%rsp)
063c4237 mov       %rdx,0x30(%rsp)
063c423c mov       0x30(%rsp),%rdx
063c4241 mov       0x28(%rsp),%rax
063c4246 add       $0x158,%rsp
063c424d ret

core::slice::impl$0::as_chunks<usize,4>:
063c4250 sub       $0x148,%rsp
063c4257 mov       %r8,0x58(%rsp)
063c425c mov       %rdx,0x60(%rsp)
063c4261 mov       %rcx,0x68(%rsp)
063c4266 mov       %rcx,0x70(%rsp)
063c426b mov       %rdx,0xF0(%rsp)
063c4273 mov       %r8,0xF8(%rsp)
063c427b lea       0x63D`1320,%rax
063c4282 mov       %rax,0x88(%rsp)
063c428a lea       0x63C`F530,%rax
063c4291 mov       %rax,0x90(%rsp)
063c4299 mov       0x88(%rsp),%rax
063c42a1 mov       %rax,0x78(%rsp)
063c42a6 mov       %rax,0x100(%rsp)
063c42ae mov       0x90(%rsp),%rcx
063c42b6 mov       %rcx,0x80(%rsp)
063c42be mov       %rcx,0x108(%rsp)
063c42c6 mov       (%rax),%rax
063c42c9 cmp       (%rcx),%rax
063c42cc je        0x0000`0000`063C`42D0
063c42ce jmp       0x0000`0000`063C`4310
063c42d0 mov       0x80(%rsp),%r8
063c42d8 mov       0x78(%rsp),%rdx
063c42dd movb      $1,0x9F(%rsp)
063c42e5 movq      $0,0xA0(%rsp)
063c42f1 lea       0x63D`1358,%rcx
063c42f8 mov       %rsp,%rax
063c42fb mov       %rcx,0x20(%rax)
063c42ff mov       $1,%cl
063c4301 lea       0xA0(%rsp),%r9
063c4309 call      0x0000`0000`063B`A150
063c430e ud2
063c4310 mov       0x58(%rsp),%rax
063c4315 shr       $2,%rax
063c4319 mov       %rax,0x110(%rsp)
063c4321 mov       $4,%ecx
063c4326 mul       %rcx
063c4329 mov       %rax,0x50(%rsp)
063c432e seto      %al
063c4331 test      $1,%al
063c4333 jne       0x0000`0000`063C`435F
063c4335 mov       0x50(%rsp),%r9
063c433a mov       0x58(%rsp),%r8
063c433f mov       0x60(%rsp),%rdx
063c4344 lea       0xD0(%rsp),%rcx
063c434c lea       0x63D`1388,%rax
063c4353 mov       %rax,0x20(%rsp)
063c4358 call      0x0000`0000`063C`44B0
063c435d jmp       0x0000`0000`063C`4379
063c435f lea       0x63C`F400,%rcx
063c4366 lea       0x63D`1370,%r8
063c436d mov       $0x21,%edx
063c4372 call      0x0000`0000`063B`9FF0
063c4377 ud2
063c4379 mov       0xD0(%rsp),%rcx
063c4381 mov       0xD8(%rsp),%rdx
063c4389 mov       %rcx,0x118(%rsp)
063c4391 mov       %rdx,0x120(%rsp)
063c4399 mov       0xE0(%rsp),%r8
063c43a1 mov       %r8,0x30(%rsp)
063c43a6 mov       0xE8(%rsp),%rax
063c43ae mov       %rax,0x38(%rsp)
063c43b3 mov       %r8,0x128(%rsp)
063c43bb mov       %rax,0x130(%rsp)
063c43c3 call      0x0000`0000`063C`4080
063c43c8 mov       %rax,0x40(%rsp)
063c43cd mov       %rdx,0x48(%rsp)
063c43d2 mov       %rax,0x138(%rsp)
063c43da mov       %rdx,0x140(%rsp)
063c43e2 mov       0x70(%rsp),%rax
063c43e7 mov       0x68(%rsp),%rcx
063c43ec mov       0x38(%rsp),%rdx
063c43f1 mov       0x30(%rsp),%r8
063c43f6 mov       0x48(%rsp),%r9
063c43fb mov       0x40(%rsp),%r10
063c4400 mov       %r10,(%rcx)
063c4403 mov       %r9,8(%rcx)
063c4407 mov       %r8,0x10(%rcx)
063c440b mov       %rdx,0x18(%rcx)
063c440f add       $0x148,%rsp
063c4416 ret

core::slice::impl$0::split_at<u8>:
063c4420 sub       $0x68,%rsp
063c4424 mov       %r9,0x20(%rsp)
063c4429 mov       %r8,0x28(%rsp)
063c442e mov       %rdx,0x30(%rsp)
063c4433 mov       %rcx,0x38(%rsp)
063c4438 mov       %rcx,0x40(%rsp)
063c443d mov       0x90(%rsp),%rax
063c4445 mov       %rax,0x48(%rsp)
063c444a mov       %rdx,0x50(%rsp)
063c444f mov       %r8,0x58(%rsp)
063c4454 mov       %r9,0x60(%rsp)
063c4459 cmp       %r8,%r9
063c445c setbe     %al
063c445f xor       $0xFF,%al
063c4461 test      $1,%al
063c4463 jne       0x0000`0000`063C`4480
063c4465 mov       0x20(%rsp),%r9
063c446a mov       0x28(%rsp),%r8
063c446f mov       0x30(%rsp),%rdx
063c4474 mov       0x38(%rsp),%rcx
063c4479 call      0x0000`0000`063C`4540
063c447e jmp       0x0000`0000`063C`4498
063c4480 mov       0x48(%rsp),%r8
063c4485 lea       0x63D`13A0,%rcx
063c448c mov       $0x23,%edx
063c4491 call      0x0000`0000`063B`9FF0
063c4496 ud2
063c4498 mov       0x40(%rsp),%rax
063c449d add       $0x68,%rsp
063c44a1 ret

core::slice::impl$0::split_at<usize>:
063c44b0 sub       $0x68,%rsp
063c44b4 mov       %r9,0x20(%rsp)
063c44b9 mov       %r8,0x28(%rsp)
063c44be mov       %rdx,0x30(%rsp)
063c44c3 mov       %rcx,0x38(%rsp)
063c44c8 mov       %rcx,0x40(%rsp)
063c44cd mov       0x90(%rsp),%rax
063c44d5 mov       %rax,0x48(%rsp)
063c44da mov       %rdx,0x50(%rsp)
063c44df mov       %r8,0x58(%rsp)
063c44e4 mov       %r9,0x60(%rsp)
063c44e9 cmp       %r8,%r9
063c44ec setbe     %al
063c44ef xor       $0xFF,%al
063c44f1 test      $1,%al
063c44f3 jne       0x0000`0000`063C`4510
063c44f5 mov       0x20(%rsp),%r9
063c44fa mov       0x28(%rsp),%r8
063c44ff mov       0x30(%rsp),%rdx
063c4504 mov       0x38(%rsp),%rcx
063c4509 call      0x0000`0000`063C`4600
063c450e jmp       0x0000`0000`063C`4528
063c4510 mov       0x48(%rsp),%r8
063c4515 lea       0x63D`13A0,%rcx
063c451c mov       $0x23,%edx
063c4521 call      0x0000`0000`063B`9FF0
063c4526 ud2
063c4528 mov       0x40(%rsp),%rax
063c452d add       $0x68,%rsp
063c4531 ret

core::slice::impl$0::split_at_unchecked<u8>:
063c4540 sub       $0x98,%rsp
063c4547 mov       %r9,0x38(%rsp)
063c454c mov       %r8,0x40(%rsp)
063c4551 mov       %rdx,%rax
063c4554 mov       0x40(%rsp),%rdx
063c4559 mov       %rax,0x48(%rsp)
063c455e mov       %rcx,%rax
063c4561 mov       0x48(%rsp),%rcx
063c4566 mov       %rax,0x50(%rsp)
063c456b mov       %rax,0x58(%rsp)
063c4570 mov       %rcx,0x80(%rsp)
063c4578 mov       %rdx,0x88(%rsp)
063c4580 mov       %r9,0x90(%rsp)
063c4588 mov       %r9,0x70(%rsp)
063c458d mov       0x70(%rsp),%r8
063c4592 call      0x0000`0000`063C`3B60
063c4597 mov       %rax,0x60(%rsp)
063c459c mov       %rdx,0x68(%rsp)
063c45a1 mov       0x40(%rsp),%rdx
063c45a6 mov       0x48(%rsp),%rcx
063c45ab mov       0x38(%rsp),%rax
063c45b0 mov       %rax,0x78(%rsp)
063c45b5 mov       0x78(%rsp),%r8
063c45ba call      0x0000`0000`063C`3D10
063c45bf mov       %rax,0x28(%rsp)
063c45c4 mov       %rdx,0x30(%rsp)
063c45c9 mov       0x58(%rsp),%rax
063c45ce mov       0x50(%rsp),%rcx
063c45d3 mov       0x30(%rsp),%rdx
063c45d8 mov       0x28(%rsp),%r8
063c45dd mov       0x68(%rsp),%r9
063c45e2 mov       0x60(%rsp),%r10
063c45e7 mov       %r10,(%rcx)
063c45ea mov       %r9,8(%rcx)
063c45ee mov       %r8,0x10(%rcx)
063c45f2 mov       %rdx,0x18(%rcx)
063c45f6 add       $0x98,%rsp
063c45fd ret

core::slice::impl$0::split_at_unchecked<usize>:
063c4600 sub       $0x98,%rsp
063c4607 mov       %r9,0x38(%rsp)
063c460c mov       %r8,0x40(%rsp)
063c4611 mov       %rdx,%rax
063c4614 mov       0x40(%rsp),%rdx
063c4619 mov       %rax,0x48(%rsp)
063c461e mov       %rcx,%rax
063c4621 mov       0x48(%rsp),%rcx
063c4626 mov       %rax,0x50(%rsp)
063c462b mov       %rax,0x58(%rsp)
063c4630 mov       %rcx,0x80(%rsp)
063c4638 mov       %rdx,0x88(%rsp)
063c4640 mov       %r9,0x90(%rsp)
063c4648 mov       %r9,0x70(%rsp)
063c464d mov       0x70(%rsp),%r8
063c4652 call      0x0000`0000`063C`3C30
063c4657 mov       %rax,0x60(%rsp)
063c465c mov       %rdx,0x68(%rsp)
063c4661 mov       0x40(%rsp),%rdx
063c4666 mov       0x48(%rsp),%rcx
063c466b mov       0x38(%rsp),%rax
063c4670 mov       %rax,0x78(%rsp)
063c4675 mov       0x78(%rsp),%r8
063c467a call      0x0000`0000`063C`3CC0
063c467f mov       %rax,0x28(%rsp)
063c4684 mov       %rdx,0x30(%rsp)
063c4689 mov       0x58(%rsp),%rax
063c468e mov       0x50(%rsp),%rcx
063c4693 mov       0x30(%rsp),%rdx
063c4698 mov       0x28(%rsp),%r8
063c469d mov       0x68(%rsp),%r9
063c46a2 mov       0x60(%rsp),%r10
063c46a7 mov       %r10,(%rcx)
063c46aa mov       %r9,8(%rcx)
063c46ae mov       %r8,0x10(%rcx)
063c46b2 mov       %rdx,0x18(%rcx)
063c46b6 add       $0x98,%rsp
063c46bd ret

core::slice::impl$0::binary_search_by<u32,core::slice::impl$0::binary_search_by_key::closure_env$0<u32,u32,core::unicode::unicode_data::skip_search::closure_env$0<32,707> > >:
063c46c0 sub       $0xB8,%rsp
063c46c7 mov       %rdx,0x48(%rsp)
063c46cc mov       %rcx,0x50(%rsp)
063c46d1 mov       %r8,0x58(%rsp)
063c46d6 mov       %r9,0x60(%rsp)
063c46db mov       %rcx,0xA0(%rsp)
063c46e3 mov       %rdx,0xA8(%rsp)
063c46eb mov       %rdx,0x78(%rsp)
063c46f0 movq      $0,0x80(%rsp)
063c46fc mov       0x78(%rsp),%rax
063c4701 mov       %rax,0x88(%rsp)
063c4709 mov       0x80(%rsp),%rax
063c4711 cmp       0x88(%rsp),%rax
063c4719 jb        0x0000`0000`063C`4736
063c471b mov       0x80(%rsp),%rax
063c4723 mov       %rax,0x70(%rsp)
063c4728 movq      $1,0x68(%rsp)
063c4731 jmp       0x0000`0000`063C`48A8
063c4736 mov       0x80(%rsp),%rax
063c473e mov       0x78(%rsp),%rcx
063c4743 shr       $1,%rcx
063c4747 add       %rcx,%rax
063c474a mov       %rax,0x40(%rsp)
063c474f setb      %al
063c4752 test      $1,%al
063c4754 jne       0x0000`0000`063C`4779
063c4756 mov       0x40(%rsp),%r8
063c475b mov       0x48(%rsp),%rdx
063c4760 mov       0x50(%rsp),%rcx
063c4765 mov       %r8,0xB0(%rsp)
063c476d call      0x0000`0000`063C`3BF0
063c4772 mov       %rax,0x38(%rsp)
063c4777 jmp       0x0000`0000`063C`4793
063c4779 lea       0x63C`F3E0,%rcx
063c4780 lea       0x63D`13C8,%r8
063c4787 mov       $0x1C,%edx
063c478c call      0x0000`0000`063B`9FF0
063c4791 ud2
063c4793 mov       0x38(%rsp),%rax
063c4798 mov       %rax,0x98(%rsp)
063c47a0 mov       0x98(%rsp),%rdx
063c47a8 lea       0x58(%rsp),%rcx
063c47ad call      0x0000`0000`063C`4910
063c47b2 mov       %al,0x97(%rsp)
063c47b9 lea       0x97(%rsp),%rcx
063c47c1 lea       0x63D`13E0,%rdx
063c47c8 call      0x0000`0000`063C`8550
063c47cd mov       %al,0x37(%rsp)
063c47d1 mov       0x37(%rsp),%al
063c47d5 test      $1,%al
063c47d7 jne       0x0000`0000`063C`47F5
063c47d9 jmp       0x0000`0000`063C`47DB
063c47db lea       0x97(%rsp),%rcx
063c47e3 lea       0x63C`F4AF,%rdx
063c47ea call      0x0000`0000`063C`8550
063c47ef mov       %al,0x36(%rsp)
063c47f3 jmp       0x0000`0000`063C`4851
063c47f5 mov       0x40(%rsp),%rax
063c47fa add       $1,%rax
063c47fe mov       %rax,0x28(%rsp)
063c4803 setb      %al
063c4806 test      $1,%al
063c4808 jne       0x0000`0000`063C`4819
063c480a mov       0x28(%rsp),%rax
063c480f mov       %rax,0x80(%rsp)
063c4817 jmp       0x0000`0000`063C`4833
063c4819 lea       0x63C`F3E0,%rcx
063c4820 lea       0x63D`13E8,%r8
063c4827 mov       $0x1C,%edx
063c482c call      0x0000`0000`063B`9FF0
063c4831 ud2
063c4833 mov       0x88(%rsp),%rax
063c483b sub       0x80(%rsp),%rax
063c4843 mov       %rax,0x20(%rsp)
063c4848 setb      %al
063c484b test      $1,%al
063c484d jne       0x0000`0000`063C`487B
063c484f jmp       0x0000`0000`063C`486C
063c4851 mov       0x36(%rsp),%al
063c4855 test      $1,%al
063c4857 jne       0x0000`0000`063C`485D
063c4859 jmp       0x0000`0000`063C`485B
063c485b jmp       0x0000`0000`063C`4895
063c485d mov       0x40(%rsp),%rax
063c4862 mov       %rax,0x88(%rsp)
063c486a jmp       0x0000`0000`063C`4833
063c486c mov       0x20(%rsp),%rax
063c4871 mov       %rax,0x78(%rsp)
063c4876 jmp       0x0000`0000`063C`4709
063c487b lea       0x63C`F3B0,%rcx
063c4882 lea       0x63D`1400,%r8
063c4889 mov       $0x21,%edx
063c488e call      0x0000`0000`063B`9FF0
063c4893 ud2
063c4895 mov       0x40(%rsp),%rax
063c489a mov       %rax,0x70(%rsp)
063c489f movq      $0,0x68(%rsp)
063c48a8 mov       0x68(%rsp),%rax
063c48ad mov       0x70(%rsp),%rdx
063c48b2 add       $0xB8,%rsp
063c48b9 ret

core::slice::impl$0::binary_search_by_key<u32,u32,core::unicode::unicode_data::skip_search::closure_env$0<32,707> >:
063c48c0 sub       $0x68,%rsp
063c48c4 mov       %rcx,0x50(%rsp)
063c48c9 mov       %rdx,0x58(%rsp)
063c48ce mov       %r8,0x60(%rsp)
063c48d3 lea       0x38(%rsp),%rax
063c48d8 mov       %rax,0x40(%rsp)
063c48dd mov       %r8,0x48(%rsp)
063c48e2 mov       0x40(%rsp),%r8
063c48e7 mov       0x48(%rsp),%r9
063c48ec call      0x0000`0000`063C`46C0
063c48f1 mov       %rax,0x28(%rsp)
063c48f6 mov       %rdx,0x30(%rsp)
063c48fb jmp       0x0000`0000`063C`48FD
063c48fd mov       0x30(%rsp),%rdx
063c4902 mov       0x28(%rsp),%rax
063c4907 add       $0x68,%rsp
063c490b ret

core::slice::impl$0::binary_search_by_key::closure$0<u32,u32,core::unicode::unicode_data::skip_search::closure_env$0<32,707> >:
063c4910 sub       $0x68,%rsp
063c4914 mov       %rcx,0x30(%rsp)
063c4919 mov       %rcx,0x48(%rsp)
063c491e mov       0x48(%rsp),%rax
063c4923 mov       (%rax),%rax
063c4926 mov       %rax,0x50(%rsp)
063c492b mov       0x48(%rsp),%rax
063c4930 mov       8(%rax),%rax
063c4934 mov       %rax,0x58(%rsp)
063c4939 mov       %rdx,0x60(%rsp)
063c493e mov       (%rcx),%rcx
063c4941 mov       %rdx,0x40(%rsp)
063c4946 mov       0x40(%rsp),%rdx
063c494b call      0x0000`0000`063C`82B0
063c4950 mov       %eax,0x3C(%rsp)
063c4954 mov       0x30(%rsp),%rax
063c4959 mov       8(%rax),%rdx
063c495d lea       0x3C(%rsp),%rcx
063c4962 call      0x0000`0000`063C`8680
063c4967 mov       %al,0x2F(%rsp)
063c496b jmp       0x0000`0000`063C`496D
063c496d mov       0x2F(%rsp),%al
063c4971 add       $0x68,%rsp
063c4975 ret

core::slice::impl$0::align_to_offsets<u8,usize>:
063c4980 sub       $0x98,%rsp
063c4987 mov       %rdx,0x48(%rsp)
063c498c mov       %rcx,0x60(%rsp)
063c4991 mov       %rdx,0x68(%rsp)
063c4996 jmp       0x0000`0000`063C`4998
063c4998 mov       $1,%ecx
063c499d mov       $8,%edx
063c49a2 call      0x0000`0000`063C`4B20
063c49a7 mov       %rax,0x40(%rsp)
063c49ac mov       %rax,0x70(%rsp)
063c49b1 jmp       0x0000`0000`063C`49B3
063c49b3 mov       0x40(%rsp),%rax
063c49b8 cmp       $0,%rax
063c49bc sete      %al
063c49bf test      $1,%al
063c49c1 jne       0x0000`0000`063C`49DE
063c49c3 mov       0x40(%rsp),%rcx
063c49c8 mov       $8,%eax
063c49cd xor       %edx,%edx
063c49cf div       %rcx
063c49d2 mov       %rax,0x38(%rsp)
063c49d7 mov       %rax,0x78(%rsp)
063c49dc jmp       0x0000`0000`063C`49F8
063c49de lea       0x63C`F4D0,%rcx
063c49e5 lea       0x63D`1418,%r8
063c49ec mov       $0x19,%edx
063c49f1 call      0x0000`0000`063B`9FF0
063c49f6 ud2
063c49f8 mov       0x40(%rsp),%rax
063c49fd cmp       $0,%rax
063c4a01 sete      %al
063c4a04 test      $1,%al
063c4a06 jne       0x0000`0000`063C`4A39
063c4a08 mov       0x40(%rsp),%rcx
063c4a0d mov       $1,%eax
063c4a12 xor       %edx,%edx
063c4a14 div       %rcx
063c4a17 mov       %rax,%rcx
063c4a1a mov       0x38(%rsp),%rax
063c4a1f mov       %rcx,0x30(%rsp)
063c4a24 mov       %rcx,0x80(%rsp)
063c4a2c cmp       $0,%rax
063c4a30 sete      %al
063c4a33 test      $1,%al
063c4a35 jne       0x0000`0000`063C`4A78
063c4a37 jmp       0x0000`0000`063C`4A53
063c4a39 lea       0x63C`F4D0,%rcx
063c4a40 lea       0x63D`1430,%r8
063c4a47 mov       $0x19,%edx
063c4a4c call      0x0000`0000`063B`9FF0
063c4a51 ud2
063c4a53 mov       0x30(%rsp),%rcx
063c4a58 mov       0x38(%rsp),%r8
063c4a5d mov       0x48(%rsp),%rax
063c4a62 xor       %edx,%edx
063c4a64 div       %r8
063c4a67 mul       %rcx
063c4a6a mov       %rax,0x28(%rsp)
063c4a6f seto      %al
063c4a72 test      $1,%al
063c4a74 jne       0x0000`0000`063C`4AB1
063c4a76 jmp       0x0000`0000`063C`4A92
063c4a78 lea       0x63C`F4D0,%rcx
063c4a7f lea       0x63D`1448,%r8
063c4a86 mov       $0x19,%edx
063c4a8b call      0x0000`0000`063B`9FF0
063c4a90 ud2
063c4a92 mov       0x38(%rsp),%rax
063c4a97 mov       0x28(%rsp),%rcx
063c4a9c mov       %rcx,0x88(%rsp)
063c4aa4 cmp       $0,%rax
063c4aa8 sete      %al
063c4aab test      $1,%al
063c4aad jne       0x0000`0000`063C`4B03
063c4aaf jmp       0x0000`0000`063C`4ACB
063c4ab1 lea       0x63C`F400,%rcx
063c4ab8 lea       0x63D`1448,%r8
063c4abf mov       $0x21,%edx
063c4ac4 call      0x0000`0000`063B`9FF0
063c4ac9 ud2
063c4acb mov       0x38(%rsp),%rcx
063c4ad0 mov       0x48(%rsp),%rax
063c4ad5 xor       %edx,%edx
063c4ad7 div       %rcx
063c4ada mov       0x28(%rsp),%rax
063c4adf mov       %rdx,0x90(%rsp)
063c4ae7 mov       %rax,0x50(%rsp)
063c4aec mov       %rdx,0x58(%rsp)
063c4af1 mov       0x50(%rsp),%rax
063c4af6 mov       0x58(%rsp),%rdx
063c4afb add       $0x98,%rsp
063c4b02 ret
063c4b03 lea       0x63C`F4F0,%rcx
063c4b0a lea       0x63D`1460,%r8
063c4b11 mov       $0x39,%edx
063c4b16 call      0x0000`0000`063B`9FF0
063c4b1b ud2

core::slice::impl$0::align_to_offsets::gcd:
063c4b20 sub       $0xE8,%rsp
063c4b27 mov       %rdx,0x70(%rsp)
063c4b2c mov       %rcx,0x78(%rsp)
063c4b31 mov       %rcx,0xB0(%rsp)
063c4b39 mov       %rdx,0xB8(%rsp)
063c4b41 cmp       $0,%rcx
063c4b45 jne       0x0000`0000`063C`4B59
063c4b47 mov       0x70(%rsp),%rax
063c4b4c mov       %rax,0x80(%rsp)
063c4b54 jmp       0x0000`0000`063C`4DC4
063c4b59 mov       0x70(%rsp),%rax
063c4b5e cmp       $0,%rax
063c4b62 jne       0x0000`0000`063C`4B76
063c4b64 mov       0x78(%rsp),%rax
063c4b69 mov       %rax,0x80(%rsp)
063c4b71 jmp       0x0000`0000`063C`4DC4
063c4b76 mov       0x78(%rsp),%rax
063c4b7b bsf       %rax,%rax
063c4b7f mov       %rax,0xC0(%rsp)
063c4b87 mov       0xC0(%rsp),%rax
063c4b8f mov       %rax,0x68(%rsp)
063c4b94 mov       0x70(%rsp),%rax
063c4b99 bsf       %rax,%rax
063c4b9d mov       %rax,0xC8(%rsp)
063c4ba5 mov       0xC8(%rsp),%rax
063c4bad mov       %rax,0x60(%rsp)
063c4bb2 mov       0x60(%rsp),%rax
063c4bb7 mov       0x68(%rsp),%rcx
063c4bbc mov       %rcx,0x90(%rsp)
063c4bc4 mov       %rax,0x98(%rsp)
063c4bcc mov       0x90(%rsp),%rcx
063c4bd4 mov       %rcx,0x50(%rsp)
063c4bd9 mov       %rcx,0xD0(%rsp)
063c4be1 mov       0x98(%rsp),%rax
063c4be9 mov       %rax,0x88(%rsp)
063c4bf1 mov       0x88(%rsp),%rdx
063c4bf9 call      0x0000`0000`063B`7850
063c4bfe mov       %rax,0x58(%rsp)
063c4c03 mov       %rax,0xD8(%rsp)
063c4c0b mov       0x78(%rsp),%rdx
063c4c10 mov       0x50(%rsp),%rcx
063c4c15 mov       %rcx,%rax
063c4c18 and       $0xFFFF`FFFF`FFFF`FFC0,%rax
063c4c1c cmp       $0,%rax
063c4c20 setne     %al
063c4c23 and       $0x3F,%rcx
063c4c27 shr       %cl,%rdx
063c4c2a mov       %rdx,0x48(%rsp)
063c4c2f test      $1,%al
063c4c31 jne       0x0000`0000`063C`4C4F
063c4c33 mov       0x70(%rsp),%rax
063c4c38 mov       0x48(%rsp),%rcx
063c4c3d mov       %rcx,0xA0(%rsp)
063c4c45 mov       %rax,0xA8(%rsp)
063c4c4d jmp       0x0000`0000`063C`4C69
063c4c4f lea       0x63C`F460,%rcx
063c4c56 lea       0x63D`1478,%r8
063c4c5d mov       $0x24,%edx
063c4c62 call      0x0000`0000`063B`9FF0
063c4c67 ud2
063c4c69 mov       0x88(%rsp),%rcx
063c4c71 mov       0xA8(%rsp),%rdx
063c4c79 mov       %rcx,%rax
063c4c7c and       $0xFFFF`FFFF`FFFF`FFC0,%rax
063c4c80 cmp       $0,%rax
063c4c84 setne     %al
063c4c87 and       $0x3F,%rcx
063c4c8b shr       %cl,%rdx
063c4c8e mov       %rdx,0x40(%rsp)
063c4c93 test      $1,%al
063c4c95 jne       0x0000`0000`063C`4CB8
063c4c97 mov       0x40(%rsp),%rax
063c4c9c mov       %rax,0xA8(%rsp)
063c4ca4 mov       0xA0(%rsp),%rax
063c4cac cmp       0xA8(%rsp),%rax
063c4cb4 ja        0x0000`0000`063C`4CF0
063c4cb6 jmp       0x0000`0000`063C`4CD2
063c4cb8 lea       0x63C`F460,%rcx
063c4cbf lea       0x63D`1490,%r8
063c4cc6 mov       $0x24,%edx
063c4ccb call      0x0000`0000`063B`9FF0
063c4cd0 ud2
063c4cd2 mov       0xA8(%rsp),%rax
063c4cda sub       0xA0(%rsp),%rax
063c4ce2 mov       %rax,0x38(%rsp)
063c4ce7 setb      %al
063c4cea test      $1,%al
063c4cec jne       0x0000`0000`063C`4D21
063c4cee jmp       0x0000`0000`063C`4D07
063c4cf0 lea       0xA0(%rsp),%rcx
063c4cf8 lea       0xA8(%rsp),%rdx
063c4d00 call      0x0000`0000`063B`5DF0
063c4d05 jmp       0x0000`0000`063C`4CD2
063c4d07 mov       0x38(%rsp),%rax
063c4d0c mov       %rax,0xA8(%rsp)
063c4d14 cmpq      $0,0xA8(%rsp)
063c4d1d je        0x0000`0000`063C`4D3B
063c4d1f jmp       0x0000`0000`063C`4D68
063c4d21 lea       0x63C`F3B0,%rcx
063c4d28 lea       0x63D`14A8,%r8
063c4d2f mov       $0x21,%edx
063c4d34 call      0x0000`0000`063B`9FF0
063c4d39 ud2
063c4d3b mov       0x58(%rsp),%rcx
063c4d40 mov       0xA0(%rsp),%rdx
063c4d48 mov       %rcx,%rax
063c4d4b and       $0xFFFF`FFFF`FFFF`FFC0,%rax
063c4d4f cmp       $0,%rax
063c4d53 setne     %al
063c4d56 and       $0x3F,%rcx
063c4d5a shl       %cl,%rdx
063c4d5d mov       %rdx,0x30(%rsp)
063c4d62 test      $1,%al
063c4d64 jne       0x0000`0000`063C`4DAA
063c4d66 jmp       0x0000`0000`063C`4D9B
063c4d68 mov       0xA8(%rsp),%rax
063c4d70 bsf       %rax,%rax
063c4d74 mov       %rax,0xE0(%rsp)
063c4d7c mov       0xE0(%rsp),%rax
063c4d84 mov       %rax,0x28(%rsp)
063c4d89 mov       0x28(%rsp),%rax
063c4d8e mov       %rax,0x88(%rsp)
063c4d96 jmp       0x0000`0000`063C`4C69
063c4d9b mov       0x30(%rsp),%rax
063c4da0 mov       %rax,0x80(%rsp)
063c4da8 jmp       0x0000`0000`063C`4DC4
063c4daa lea       0x63C`F430,%rcx
063c4db1 lea       0x63D`14C0,%r8
063c4db8 mov       $0x23,%edx
063c4dbd call      0x0000`0000`063B`9FF0
063c4dc2 ud2
063c4dc4 mov       0x80(%rsp),%rax
063c4dcc add       $0xE8,%rsp
063c4dd3 ret

core::slice::impl$0::align_to<u8,usize>:
063c4de0 sub       $0x168,%rsp
063c4de7 mov       %r8,0xA8(%rsp)
063c4def mov       %rdx,0xB0(%rsp)
063c4df7 mov       %rcx,0xB8(%rsp)
063c4dff mov       %rcx,0xC0(%rsp)
063c4e07 mov       %rdx,0xF0(%rsp)
063c4e0f mov       %r8,0xF8(%rsp)
063c4e17 mov       $8,%eax
063c4e1c cmp       $0,%rax
063c4e20 jne       0x0000`0000`063C`4E2C
063c4e22 movb      $1,0xCF(%rsp)
063c4e2a jmp       0x0000`0000`063C`4E43
063c4e2c jmp       0x0000`0000`063C`4E2E
063c4e2e mov       $1,%eax
063c4e33 cmp       $0,%rax
063c4e37 sete      %al
063c4e3a and       $1,%al
063c4e3c mov       %al,0xCF(%rsp)
063c4e43 testb     $1,0xCF(%rsp)
063c4e4b jne       0x0000`0000`063C`4E74
063c4e4d mov       0xA8(%rsp),%rdx
063c4e55 mov       0xB0(%rsp),%rcx
063c4e5d call      0x0000`0000`063C`3DA0
063c4e62 mov       %rax,0xA0(%rsp)
063c4e6a mov       %rax,0x100(%rsp)
063c4e72 jmp       0x0000`0000`063C`4EC9
063c4e74 mov       0xB8(%rsp),%rax
063c4e7c mov       0xA8(%rsp),%rcx
063c4e84 mov       0xB0(%rsp),%rdx
063c4e8c mov       %rdx,(%rax)
063c4e8f mov       %rcx,8(%rax)
063c4e93 lea       0x63C`F530,%rcx
063c4e9a mov       %rcx,0x10(%rax)
063c4e9e movq      $0,0x18(%rax)
063c4ea6 lea       0x63C`F530,%rcx
063c4ead mov       %rcx,0x20(%rax)
063c4eb1 movq      $0,0x28(%rax)
063c4eb9 mov       0xC0(%rsp),%rax
063c4ec1 add       $0x168,%rsp
063c4ec8 ret
063c4ec9 jmp       0x0000`0000`063C`4ECB
063c4ecb mov       0xA0(%rsp),%rcx
063c4ed3 mov       $8,%edx
063c4ed8 call      0x0000`0000`063B`7430
063c4edd mov       %rax,0x98(%rsp)
063c4ee5 mov       %rax,0x108(%rsp)
063c4eed mov       0x98(%rsp),%rax
063c4ef5 mov       0xA8(%rsp),%rcx
063c4efd cmp       %rcx,%rax
063c4f00 ja        0x0000`0000`063C`4F35
063c4f02 mov       0x98(%rsp),%r9
063c4f0a mov       0xA8(%rsp),%r8
063c4f12 mov       0xB0(%rsp),%rdx
063c4f1a lea       0xD0(%rsp),%rcx
063c4f22 lea       0x63D`14D8,%rax
063c4f29 mov       %rax,0x20(%rsp)
063c4f2e call      0x0000`0000`063C`4420
063c4f33 jmp       0x0000`0000`063C`4F7F
063c4f35 mov       0xB8(%rsp),%rax
063c4f3d mov       0xA8(%rsp),%rcx
063c4f45 mov       0xB0(%rsp),%rdx
063c4f4d mov       %rdx,(%rax)
063c4f50 mov       %rcx,8(%rax)
063c4f54 lea       0x63C`F530,%rcx
063c4f5b mov       %rcx,0x10(%rax)
063c4f5f movq      $0,0x18(%rax)
063c4f67 lea       0x63C`F530,%rcx
063c4f6e mov       %rcx,0x20(%rax)
063c4f72 movq      $0,0x28(%rax)
063c4f7a jmp       0x0000`0000`063C`4EB9
063c4f7f mov       0xD0(%rsp),%rcx
063c4f87 mov       %rcx,0x68(%rsp)
063c4f8c mov       0xD8(%rsp),%rax
063c4f94 mov       %rax,0x70(%rsp)
063c4f99 mov       %rcx,0x110(%rsp)
063c4fa1 mov       %rax,0x118(%rsp)
063c4fa9 mov       0xE0(%rsp),%rcx
063c4fb1 mov       %rcx,0x78(%rsp)
063c4fb6 mov       0xE8(%rsp),%rdx
063c4fbe mov       %rdx,0x80(%rsp)
063c4fc6 mov       %rcx,0x120(%rsp)
063c4fce mov       %rdx,0x128(%rsp)
063c4fd6 call      0x0000`0000`063C`4980
063c4fdb mov       %rax,0x88(%rsp)
063c4fe3 mov       %rdx,0x90(%rsp)
063c4feb mov       0x80(%rsp),%rdx
063c4ff3 mov       0x78(%rsp),%rcx
063c4ff8 mov       0x90(%rsp),%rax
063c5000 mov       0x88(%rsp),%r8
063c5008 mov       %r8,0x130(%rsp)
063c5010 mov       %rax,0x138(%rsp)
063c5018 call      0x0000`0000`063C`3DA0
063c501d mov       %rax,0x60(%rsp)
063c5022 mov       0x88(%rsp),%rdx
063c502a mov       0x60(%rsp),%rcx
063c502f call      0x0000`0000`063C`3600
063c5034 mov       %rax,0x50(%rsp)
063c5039 mov       %rdx,0x58(%rsp)
063c503e mov       0x80(%rsp),%rdx
063c5046 mov       0x78(%rsp),%rcx
063c504b call      0x0000`0000`063C`3DA0
063c5050 mov       %rax,0x48(%rsp)
063c5055 mov       0x90(%rsp),%rcx
063c505d mov       0x80(%rsp),%rax
063c5065 sub       %rcx,%rax
063c5068 mov       %rax,0x40(%rsp)
063c506d setb      %al
063c5070 test      $1,%al
063c5072 jne       0x0000`0000`063C`50B8
063c5074 mov       0x40(%rsp),%rcx
063c5079 mov       0x48(%rsp),%rax
063c507e mov       %rax,0x140(%rsp)
063c5086 mov       %rcx,0x148(%rsp)
063c508e mov       %rax,0x150(%rsp)
063c5096 mov       %rcx,0x158(%rsp)
063c509e add       %rcx,%rax
063c50a1 mov       %rax,0x160(%rsp)
063c50a9 mov       0x160(%rsp),%rax
063c50b1 mov       %rax,0x38(%rsp)
063c50b6 jmp       0x0000`0000`063C`50D2
063c50b8 lea       0x63C`F3B0,%rcx
063c50bf lea       0x63D`14F0,%r8
063c50c6 mov       $0x21,%edx
063c50cb call      0x0000`0000`063B`9FF0
063c50d0 ud2
063c50d2 mov       0x90(%rsp),%rdx
063c50da mov       0x38(%rsp),%rcx
063c50df call      0x0000`0000`063C`36A0
063c50e4 mov       %rax,0x28(%rsp)
063c50e9 mov       %rdx,0x30(%rsp)
063c50ee mov       0xB8(%rsp),%rax
063c50f6 mov       0x30(%rsp),%rcx
063c50fb mov       0x28(%rsp),%rdx
063c5100 mov       0x58(%rsp),%r8
063c5105 mov       0x50(%rsp),%r9
063c510a mov       0x70(%rsp),%r10
063c510f mov       0x68(%rsp),%r11
063c5114 mov       %r11,(%rax)
063c5117 mov       %r10,8(%rax)
063c511b mov       %r9,0x10(%rax)
063c511f mov       %r8,0x18(%rax)
063c5123 mov       %rdx,0x20(%rax)
063c5127 mov       %rcx,0x28(%rax)
063c512b jmp       0x0000`0000`063C`4EB9

core::str::converts::from_utf8_unchecked:
063c5130 sub       $0x30,%rsp
063c5134 mov       %rcx,0x10(%rsp)
063c5139 mov       %rdx,0x18(%rsp)
063c513e mov       %rcx,0x20(%rsp)
063c5143 mov       %rdx,0x28(%rsp)
063c5148 mov       0x20(%rsp),%rax
063c514d mov       %rax,(%rsp)
063c5151 mov       0x28(%rsp),%rax
063c5156 mov       %rax,8(%rsp)
063c515b mov       8(%rsp),%rdx
063c5160 mov       (%rsp),%rax
063c5164 add       $0x30,%rsp
063c5168 ret

core::str::converts::from_utf8_unchecked_mut:
063c5170 sub       $0x10,%rsp
063c5174 mov       %rcx,%rax
063c5177 mov       %rax,(%rsp)
063c517b mov       %rdx,8(%rsp)
063c5180 add       $0x10,%rsp
063c5184 ret

core::str::count::count_chars:
063c5190 sub       $0x88,%rsp
063c5197 mov       %rdx,0x38(%rsp)
063c519c mov       %rcx,0x40(%rsp)
063c51a1 mov       %rcx,0x58(%rsp)
063c51a6 mov       %rdx,0x60(%rsp)
063c51ab call      0x0000`0000`063C`7630
063c51b0 mov       %rax,0x48(%rsp)
063c51b5 mov       0x48(%rsp),%rax
063c51ba cmp       $0x20,%rax
063c51be jb        0x0000`0000`063C`51D6
063c51c0 mov       0x38(%rsp),%rdx
063c51c5 mov       0x40(%rsp),%rcx
063c51ca call      0x0000`0000`063C`5230
063c51cf mov       %rax,0x50(%rsp)
063c51d4 jmp       0x0000`0000`063C`5222
063c51d6 mov       0x38(%rsp),%rax
063c51db mov       0x40(%rsp),%rcx
063c51e0 mov       %rcx,0x68(%rsp)
063c51e5 mov       %rax,0x70(%rsp)
063c51ea mov       %rcx,0x78(%rsp)
063c51ef mov       %rax,0x80(%rsp)
063c51f7 mov       0x78(%rsp),%rax
063c51fc mov       %rax,0x28(%rsp)
063c5201 mov       0x80(%rsp),%rax
063c5209 mov       %rax,0x30(%rsp)
063c520e mov       0x30(%rsp),%rdx
063c5213 mov       0x28(%rsp),%rcx
063c5218 call      0x0000`0000`063C`5A10
063c521d mov       %rax,0x50(%rsp)
063c5222 mov       0x50(%rsp),%rax
063c5227 add       $0x88,%rsp
063c522e ret

core::str::count::do_count_chars:
063c5230 sub       $0x318,%rsp
063c5237 mov       %rdx,0x110(%rsp)
063c523f mov       %rcx,0x118(%rsp)
063c5247 mov       %rcx,0x248(%rsp)
063c524f mov       %rdx,0x250(%rsp)
063c5257 mov       %rcx,0x2F8(%rsp)
063c525f mov       %rdx,0x300(%rsp)
063c5267 mov       %rcx,0x308(%rsp)
063c526f mov       %rdx,0x310(%rsp)
063c5277 mov       0x308(%rsp),%rax
063c527f mov       %rax,0x120(%rsp)
063c5287 mov       0x310(%rsp),%rax
063c528f mov       %rax,0x128(%rsp)
063c5297 mov       0x128(%rsp),%r8
063c529f mov       0x120(%rsp),%rdx
063c52a7 lea       0x138(%rsp),%rcx
063c52af call      0x0000`0000`063C`4DE0
063c52b4 mov       0x138(%rsp),%rcx
063c52bc mov       %rcx,0xD8(%rsp)
063c52c4 mov       0x140(%rsp),%rax
063c52cc mov       %rax,0xE0(%rsp)
063c52d4 mov       %rcx,0x258(%rsp)
063c52dc mov       %rax,0x260(%rsp)
063c52e4 mov       0x148(%rsp),%rcx
063c52ec mov       %rcx,0xE8(%rsp)
063c52f4 mov       0x150(%rsp),%rdx
063c52fc mov       %rdx,0xF0(%rsp)
063c5304 mov       %rcx,0x268(%rsp)
063c530c mov       %rdx,0x270(%rsp)
063c5314 mov       0x158(%rsp),%r8
063c531c mov       %r8,0xF8(%rsp)
063c5324 mov       0x160(%rsp),%rax
063c532c mov       %rax,0x100(%rsp)
063c5334 mov       %r8,0x278(%rsp)
063c533c mov       %rax,0x280(%rsp)
063c5344 call      0x0000`0000`063C`39F0
063c5349 mov       %al,0x10F(%rsp)
063c5350 mov       0x10F(%rsp),%al
063c5357 test      $1,%al
063c5359 jne       0x0000`0000`063C`5377
063c535b jmp       0x0000`0000`063C`535D
063c535d mov       0xE0(%rsp),%rax
063c5365 cmp       $8,%rax
063c5369 seta      %al
063c536c and       $1,%al
063c536e mov       %al,0x16F(%rsp)
063c5375 jmp       0x0000`0000`063C`537F
063c5377 movb      $1,0x16F(%rsp)
063c537f testb     $1,0x16F(%rsp)
063c5387 jne       0x0000`0000`063C`53A3
063c5389 mov       0x100(%rsp),%rax
063c5391 cmp       $8,%rax
063c5395 seta      %al
063c5398 and       $1,%al
063c539a mov       %al,0x16E(%rsp)
063c53a1 jmp       0x0000`0000`063C`53AB
063c53a3 movb      $1,0x16E(%rsp)
063c53ab mov       0x16E(%rsp),%al
063c53b2 and       $1,%al
063c53b4 mov       %al,0x28F(%rsp)
063c53bb mov       0x28F(%rsp),%al
063c53c2 mov       %al,0xD7(%rsp)
063c53c9 mov       0xD7(%rsp),%al
063c53d0 test      $1,%al
063c53d2 jne       0x0000`0000`063C`53F5
063c53d4 jmp       0x0000`0000`063C`53D6
063c53d6 mov       0xE0(%rsp),%rdx
063c53de mov       0xD8(%rsp),%rcx
063c53e6 call      0x0000`0000`063C`5A10
063c53eb mov       %rax,0xC8(%rsp)
063c53f3 jmp       0x0000`0000`063C`5472
063c53f5 mov       0x110(%rsp),%rax
063c53fd mov       0x118(%rsp),%rcx
063c5405 mov       %rcx,0x2D8(%rsp)
063c540d mov       %rax,0x2E0(%rsp)
063c5415 mov       %rcx,0x2E8(%rsp)
063c541d mov       %rax,0x2F0(%rsp)
063c5425 mov       0x2E8(%rsp),%rax
063c542d mov       %rax,0xB8(%rsp)
063c5435 mov       0x2F0(%rsp),%rax
063c543d mov       %rax,0xC0(%rsp)
063c5445 mov       0xC0(%rsp),%rdx
063c544d mov       0xB8(%rsp),%rcx
063c5455 call      0x0000`0000`063C`5A10
063c545a mov       %rax,0x130(%rsp)
063c5462 mov       0x130(%rsp),%rax
063c546a add       $0x318,%rsp
063c5471 ret
063c5472 mov       0x100(%rsp),%rdx
063c547a mov       0xF8(%rsp),%rcx
063c5482 call      0x0000`0000`063C`5A10
063c5487 mov       %rax,0xB0(%rsp)
063c548f mov       0xB0(%rsp),%rcx
063c5497 mov       0xC8(%rsp),%rax
063c549f add       %rcx,%rax
063c54a2 mov       %rax,0xA8(%rsp)
063c54aa setb      %al
063c54ad test      $1,%al
063c54af jne       0x0000`0000`063C`54E6
063c54b1 mov       0xF0(%rsp),%r8
063c54b9 mov       0xE8(%rsp),%rdx
063c54c1 mov       0xA8(%rsp),%rax
063c54c9 mov       %rax,0x170(%rsp)
063c54d1 lea       0x190(%rsp),%rcx
063c54d9 mov       $0xC0,%r9d
063c54df call      0x0000`0000`063C`3FB0
063c54e4 jmp       0x0000`0000`063C`5500
063c54e6 lea       0x63C`F3E0,%rcx
063c54ed lea       0x63D`1580,%r8
063c54f4 mov       $0x1C,%edx
063c54f9 call      0x0000`0000`063B`9FF0
063c54fe ud2
063c5500 lea       0x178(%rsp),%rcx
063c5508 lea       0x190(%rsp),%rdx
063c5510 call      0x0000`0000`063B`90B0
063c5515 mov       0x178(%rsp),%rax
063c551d mov       %rax,0x1A8(%rsp)
063c5525 mov       0x180(%rsp),%rax
063c552d mov       %rax,0x1B0(%rsp)
063c5535 mov       0x188(%rsp),%rax
063c553d mov       %rax,0x1B8(%rsp)
063c5545 lea       0x1A8(%rsp),%rcx
063c554d call      0x0000`0000`063C`3520
063c5552 mov       %rdx,0x1C8(%rsp)
063c555a mov       %rax,0x1C0(%rsp)
063c5562 mov       0x1C0(%rsp),%rax
063c556a test      %rax,%rax
063c556d setne     %al
063c5570 movzbl    %al,%eax
063c5573 je        0x0000`0000`063C`557B
063c5575 jmp       0x0000`0000`063C`5577
063c5577 jmp       0x0000`0000`063C`5590
063c5579 ud2
063c557b mov       0x170(%rsp),%rax
063c5583 mov       %rax,0x130(%rsp)
063c558b jmp       0x0000`0000`063C`5462
063c5590 mov       0x1C0(%rsp),%rdx
063c5598 mov       0x1C8(%rsp),%r8
063c55a0 mov       %rdx,0x290(%rsp)
063c55a8 mov       %r8,0x298(%rsp)
063c55b0 movq      $0,0x1D0(%rsp)
063c55bc lea       0x1D8(%rsp),%rcx
063c55c4 call      0x0000`0000`063C`4250
063c55c9 mov       0x1D8(%rsp),%rcx
063c55d1 mov       0x1E0(%rsp),%rdx
063c55d9 mov       %rcx,0x2A0(%rsp)
063c55e1 mov       %rdx,0x2A8(%rsp)
063c55e9 mov       0x1E8(%rsp),%r8
063c55f1 mov       %r8,0x88(%rsp)
063c55f9 mov       0x1F0(%rsp),%rax
063c5601 mov       %rax,0x90(%rsp)
063c5609 mov       %r8,0x2B0(%rsp)
063c5611 mov       %rax,0x2B8(%rsp)
063c5619 call      0x0000`0000`063C`2C90
063c561e mov       %rax,0x98(%rsp)
063c5626 mov       %rdx,0xA0(%rsp)
063c562e mov       0xA0(%rsp),%rax
063c5636 mov       0x98(%rsp),%rcx
063c563e mov       %rcx,0x1F8(%rsp)
063c5646 mov       %rax,0x200(%rsp)
063c564e lea       0x1F8(%rsp),%rcx
063c5656 call      0x0000`0000`063C`9EB0
063c565b mov       %rax,0x208(%rsp)
063c5663 mov       0x208(%rsp),%rax
063c566b test      %rax,%rax
063c566e setne     %al
063c5671 movzbl    %al,%eax
063c5674 je        0x0000`0000`063C`567C
063c5676 jmp       0x0000`0000`063C`5678
063c5678 jmp       0x0000`0000`063C`5696
063c567a ud2
063c567c mov       0x1D0(%rsp),%rcx
063c5684 call      0x0000`0000`063C`5950
063c5689 mov       %rax,0x80(%rsp)
063c5691 jmp       0x0000`0000`063C`5760
063c5696 mov       0x208(%rsp),%rcx
063c569e mov       %rcx,0x2C0(%rsp)
063c56a6 call      0x0000`0000`063B`7C10
063c56ab mov       %rax,0x70(%rsp)
063c56b0 mov       %rdx,0x78(%rsp)
063c56b5 mov       0x78(%rsp),%rax
063c56ba mov       0x70(%rsp),%rcx
063c56bf mov       %rcx,0x210(%rsp)
063c56c7 mov       %rax,0x218(%rsp)
063c56cf lea       0x210(%rsp),%rcx
063c56d7 call      0x0000`0000`063C`9FD0
063c56dc mov       %rax,0x220(%rsp)
063c56e4 mov       0x220(%rsp),%rax
063c56ec test      %rax,%rax
063c56ef setne     %al
063c56f2 movzbl    %al,%eax
063c56f5 je        0x0000`0000`063C`564E
063c56fb jmp       0x0000`0000`063C`56FD
063c56fd jmp       0x0000`0000`063C`5701
063c56ff ud2
063c5701 mov       0x220(%rsp),%rax
063c5709 mov       (%rax),%rcx
063c570c mov       %rcx,0x2C8(%rsp)
063c5714 call      0x0000`0000`063C`5900
063c5719 mov       %rax,0x68(%rsp)
063c571e mov       0x68(%rsp),%rax
063c5723 add       0x1D0(%rsp),%rax
063c572b mov       %rax,0x60(%rsp)
063c5730 setb      %al
063c5733 test      $1,%al
063c5735 jne       0x0000`0000`063C`5746
063c5737 mov       0x60(%rsp),%rax
063c573c mov       %rax,0x1D0(%rsp)
063c5744 jmp       0x0000`0000`063C`56CF
063c5746 lea       0x63C`F3E0,%rcx
063c574d lea       0x63D`1598,%r8
063c5754 mov       $0x1C,%edx
063c5759 call      0x0000`0000`063B`9FF0
063c575e ud2
063c5760 mov       0x80(%rsp),%rax
063c5768 add       0x170(%rsp),%rax
063c5770 mov       %rax,0x58(%rsp)
063c5775 setb      %al
063c5778 test      $1,%al
063c577a jne       0x0000`0000`063C`57A4
063c577c mov       0x90(%rsp),%rdx
063c5784 mov       0x88(%rsp),%rcx
063c578c mov       0x58(%rsp),%rax
063c5791 mov       %rax,0x170(%rsp)
063c5799 call      0x0000`0000`063C`39F0
063c579e mov       %al,0x57(%rsp)
063c57a2 jmp       0x0000`0000`063C`57BE
063c57a4 lea       0x63C`F3E0,%rcx
063c57ab lea       0x63D`15B0,%r8
063c57b2 mov       $0x1C,%edx
063c57b7 call      0x0000`0000`063B`9FF0
063c57bc ud2
063c57be mov       0x57(%rsp),%al
063c57c2 xor       $0xFF,%al
063c57c4 test      $1,%al
063c57c6 jne       0x0000`0000`063C`57CD
063c57c8 jmp       0x0000`0000`063C`5545
063c57cd mov       0x90(%rsp),%rdx
063c57d5 mov       0x88(%rsp),%rcx
063c57dd movq      $0,0x228(%rsp)
063c57e9 call      0x0000`0000`063C`2C00
063c57ee mov       %rax,0x40(%rsp)
063c57f3 mov       %rdx,0x48(%rsp)
063c57f8 mov       0x48(%rsp),%rax
063c57fd mov       0x40(%rsp),%rcx
063c5802 mov       %rcx,0x230(%rsp)
063c580a mov       %rax,0x238(%rsp)
063c5812 lea       0x230(%rsp),%rcx
063c581a call      0x0000`0000`063C`9FD0
063c581f mov       %rax,0x240(%rsp)
063c5827 mov       0x240(%rsp),%rax
063c582f test      %rax,%rax
063c5832 setne     %al
063c5835 movzbl    %al,%eax
063c5838 je        0x0000`0000`063C`5840
063c583a jmp       0x0000`0000`063C`583C
063c583c jmp       0x0000`0000`063C`5854
063c583e ud2
063c5840 mov       0x228(%rsp),%rcx
063c5848 call      0x0000`0000`063C`5950
063c584d mov       %rax,0x38(%rsp)
063c5852 jmp       0x0000`0000`063C`58B6
063c5854 mov       0x240(%rsp),%rax
063c585c mov       (%rax),%rcx
063c585f mov       %rcx,0x2D0(%rsp)
063c5867 call      0x0000`0000`063C`5900
063c586c mov       %rax,0x30(%rsp)
063c5871 mov       0x30(%rsp),%rax
063c5876 add       0x228(%rsp),%rax
063c587e mov       %rax,0x28(%rsp)
063c5883 setb      %al
063c5886 test      $1,%al
063c5888 jne       0x0000`0000`063C`589C
063c588a mov       0x28(%rsp),%rax
063c588f mov       %rax,0x228(%rsp)
063c5897 jmp       0x0000`0000`063C`5812
063c589c lea       0x63C`F3E0,%rcx
063c58a3 lea       0x63D`15C8,%r8
063c58aa mov       $0x1C,%edx
063c58af call      0x0000`0000`063B`9FF0
063c58b4 ud2
063c58b6 mov       0x38(%rsp),%rax
063c58bb add       0x170(%rsp),%rax
063c58c3 mov       %rax,0x20(%rsp)
063c58c8 setb      %al
063c58cb test      $1,%al
063c58cd jne       0x0000`0000`063C`58E1
063c58cf mov       0x20(%rsp),%rax
063c58d4 mov       %rax,0x170(%rsp)
063c58dc jmp       0x0000`0000`063C`557B
063c58e1 lea       0x63C`F3E0,%rcx
063c58e8 lea       0x63D`15E0,%r8
063c58ef mov       $0x1C,%edx
063c58f4 call      0x0000`0000`063B`9FF0
063c58f9 ud2

core::str::count::contains_non_continuation_byte:
063c5900 sub       $0x20,%rsp
063c5904 mov       %rcx,%rax
063c5907 mov       %rax,8(%rsp)
063c590c mov       %rax,0x18(%rsp)
063c5911 xor       $0xFFFF`FFFF`FFFF`FFFF,%rax
063c5915 shr       $7,%rax
063c5919 mov       %rax,0x10(%rsp)
063c591e mov       8(%rsp),%rax
063c5923 shr       $6,%rax
063c5927 mov       %rax,(%rsp)
063c592b mov       (%rsp),%rcx
063c592f mov       0x10(%rsp),%rax
063c5934 or        %rcx,%rax
063c5937 movabs    $0x101`0101`0101`0101,%rcx
063c5941 and       %rcx,%rax
063c5944 add       $0x20,%rsp
063c5948 ret

core::str::count::sum_bytes_in_usize:
063c5950 sub       $0x68,%rsp
063c5954 mov       %rcx,0x48(%rsp)
063c5959 movabs    $0xFF`00FF`00FF`00FF,%rdx
063c5963 mov       %rcx,%rax
063c5966 and       %rdx,%rax
063c5969 mov       %rax,0x38(%rsp)
063c596e shr       $8,%rcx
063c5972 mov       %rcx,0x40(%rsp)
063c5977 mov       0x38(%rsp),%rax
063c597c mov       0x40(%rsp),%rcx
063c5981 movabs    $0xFF`00FF`00FF`00FF,%rdx
063c598b and       %rdx,%rcx
063c598e add       %rcx,%rax
063c5991 mov       %rax,0x30(%rsp)
063c5996 setb      %al
063c5999 test      $1,%al
063c599b jne       0x0000`0000`063C`59D0
063c599d mov       0x30(%rsp),%rax
063c59a2 mov       %rax,0x50(%rsp)
063c59a7 mov       %rax,0x58(%rsp)
063c59ac movabs    $0x1`0001`0001`0001,%rcx
063c59b6 mov       %rcx,0x60(%rsp)
063c59bb movabs    $0x1`0001`0001`0001,%rcx
063c59c5 imul      %rcx,%rax
063c59c9 mov       %rax,0x28(%rsp)
063c59ce jmp       0x0000`0000`063C`59EA
063c59d0 lea       0x63C`F3E0,%rcx
063c59d7 lea       0x63D`15F8,%r8
063c59de mov       $0x1C,%edx
063c59e3 call      0x0000`0000`063B`9FF0
063c59e8 ud2
063c59ea mov       0x28(%rsp),%rax
063c59ef shr       $0x30,%rax
063c59f3 mov       %rax,0x20(%rsp)
063c59f8 mov       0x20(%rsp),%rax
063c59fd add       $0x68,%rsp
063c5a01 ret

core::str::count::char_count_general_case:
063c5a10 sub       $0x58,%rsp
063c5a14 mov       %rcx,0x48(%rsp)
063c5a19 mov       %rdx,0x50(%rsp)
063c5a1e call      0x0000`0000`063C`3E90
063c5a23 mov       %rax,0x38(%rsp)
063c5a28 mov       %rdx,0x40(%rsp)
063c5a2d mov       0x40(%rsp),%rdx
063c5a32 mov       0x38(%rsp),%rcx
063c5a37 call      0x0000`0000`063B`9350
063c5a3c mov       %rax,0x28(%rsp)
063c5a41 mov       %rdx,0x30(%rsp)
063c5a46 mov       0x30(%rsp),%rdx
063c5a4b mov       0x28(%rsp),%rcx
063c5a50 call      0x0000`0000`063B`8DA0
063c5a55 mov       %rax,0x20(%rsp)
063c5a5a mov       0x20(%rsp),%rax
063c5a5f add       $0x58,%rsp
063c5a63 ret

core::str::count::char_count_general_case::closure$0:
063c5a70 sub       $0x48,%rsp
063c5a74 mov       %rcx,0x30(%rsp)
063c5a79 mov       %rdx,0x38(%rsp)
063c5a7e mov       (%rdx),%rax
063c5a81 mov       (%rax),%cl
063c5a83 mov       %cl,0x47(%rsp)
063c5a87 call      0x0000`0000`063C`66E0
063c5a8c mov       %al,0x2F(%rsp)
063c5a90 mov       0x2F(%rsp),%al
063c5a94 xor       $0xFF,%al
063c5a96 and       $1,%al
063c5a98 movzbl    %al,%eax
063c5a9b add       $0x48,%rsp
063c5a9f ret

core::str::iter::impl$0::next:
063c5aa0 sub       $0x38,%rsp
063c5aa4 mov       %rcx,0x30(%rsp)
063c5aa9 call      0x0000`0000`063C`6700
063c5aae mov       %eax,0x28(%rsp)
063c5ab2 mov       %edx,0x2C(%rsp)
063c5ab6 mov       0x2C(%rsp),%edx
063c5aba mov       0x28(%rsp),%ecx
063c5abe call      0x0000`0000`063B`9AA0
063c5ac3 mov       %eax,0x24(%rsp)
063c5ac7 mov       0x24(%rsp),%eax
063c5acb add       $0x38,%rsp
063c5acf ret

core::str::iter::impl$0::next::closure$0:
063c5ad0 sub       $0x38,%rsp
063c5ad4 mov       %ecx,0x34(%rsp)
063c5ad8 call      0x0000`0000`063B`7D20
063c5add mov       %eax,0x2C(%rsp)
063c5ae1 mov       0x2C(%rsp),%eax
063c5ae5 add       $0x38,%rsp
063c5ae9 ret

core::str::iter::impl$0::count:
063c5af0 sub       $0x48,%rsp
063c5af4 mov       %rcx,0x38(%rsp)
063c5af9 mov       %rdx,0x40(%rsp)
063c5afe lea       0x38(%rsp),%rcx
063c5b03 call      0x0000`0000`063C`5B30
063c5b08 mov       %rax,0x28(%rsp)
063c5b0d mov       %rdx,0x30(%rsp)
063c5b12 mov       0x30(%rsp),%rdx
063c5b17 mov       0x28(%rsp),%rcx
063c5b1c call      0x0000`0000`063C`5190
063c5b21 mov       %rax,0x20(%rsp)
063c5b26 mov       0x20(%rsp),%rax
063c5b2b add       $0x48,%rsp
063c5b2f ret

core::str::iter::Chars::as_str:
063c5b30 sub       $0x48,%rsp
063c5b34 mov       %rcx,0x40(%rsp)
063c5b39 call      0x0000`0000`063C`3320
063c5b3e mov       %rax,0x30(%rsp)
063c5b43 mov       %rdx,0x38(%rsp)
063c5b48 mov       0x38(%rsp),%rdx
063c5b4d mov       0x30(%rsp),%rcx
063c5b52 call      0x0000`0000`063C`5130
063c5b57 mov       %rax,0x20(%rsp)
063c5b5c mov       %rdx,0x28(%rsp)
063c5b61 mov       0x28(%rsp),%rdx
063c5b66 mov       0x20(%rsp),%rax
063c5b6b add       $0x48,%rsp
063c5b6f ret

core::str::iter::impl$5::next:
063c5b70 sub       $0x138,%rsp
063c5b77 mov       %rcx,0x60(%rsp)
063c5b7c mov       %rcx,0xA0(%rsp)
063c5b84 mov       %rcx,%rax
063c5b87 add       $8,%rax
063c5b8b mov       %rax,0x108(%rsp)
063c5b93 mov       8(%rcx),%rcx
063c5b97 mov       %rcx,0x58(%rsp)
063c5b9c mov       %rcx,0x110(%rsp)
063c5ba4 call      0x0000`0000`063B`6340
063c5ba9 mov       0x58(%rsp),%rcx
063c5bae mov       %rax,%rdx
063c5bb1 mov       0x60(%rsp),%rax
063c5bb6 mov       %rdx,0x130(%rsp)
063c5bbe movq      $1,0x118(%rsp)
063c5bca mov       0x10(%rax),%rax
063c5bce mov       %rax,0x68(%rsp)
063c5bd3 call      0x0000`0000`063B`6340
063c5bd8 mov       %rax,%rcx
063c5bdb mov       0x68(%rsp),%rax
063c5be0 sub       %rcx,%rax
063c5be3 mov       %rax,0x120(%rsp)
063c5beb mov       0x120(%rsp),%rax
063c5bf3 mov       %rax,0x128(%rsp)
063c5bfb mov       %rax,0x100(%rsp)
063c5c03 mov       0x100(%rsp),%rax
063c5c0b mov       %rax,0x70(%rsp)
063c5c10 mov       %rax,0xA8(%rsp)
063c5c18 mov       0x60(%rsp),%rcx
063c5c1d add       $8,%rcx
063c5c21 call      0x0000`0000`063C`5AA0
063c5c26 mov       %eax,0x8C(%rsp)
063c5c2d mov       0x8C(%rsp),%eax
063c5c34 add       $0xFFEF`0000,%eax
063c5c39 setne     %al
063c5c3c movzbl    %al,%eax
063c5c3f je        0x0000`0000`063C`5C47
063c5c41 jmp       0x0000`0000`063C`5C43
063c5c43 jmp       0x0000`0000`063C`5C57
063c5c45 ud2
063c5c47 movl      $0x11`0000,0x80(%rsp)
063c5c52 jmp       0x0000`0000`063C`5DBC
063c5c57 mov       0x60(%rsp),%rax
063c5c5c mov       0x8C(%rsp),%ecx
063c5c63 mov       %ecx,0x34(%rsp)
063c5c67 mov       %ecx,0xB4(%rsp)
063c5c6e mov       (%rax),%rcx
063c5c71 mov       %rcx,0x38(%rsp)
063c5c76 mov       %rcx,0xB8(%rsp)
063c5c7e mov       %rax,%rcx
063c5c81 add       $8,%rcx
063c5c85 mov       %rcx,0xD0(%rsp)
063c5c8d mov       8(%rax),%rcx
063c5c91 mov       %rcx,0x40(%rsp)
063c5c96 mov       %rcx,0xD8(%rsp)
063c5c9e call      0x0000`0000`063B`6340
063c5ca3 mov       0x40(%rsp),%rcx
063c5ca8 mov       %rax,%rdx
063c5cab mov       0x60(%rsp),%rax
063c5cb0 mov       %rdx,0xF8(%rsp)
063c5cb8 movq      $1,0xE0(%rsp)
063c5cc4 mov       0x10(%rax),%rax
063c5cc8 mov       %rax,0x48(%rsp)
063c5ccd call      0x0000`0000`063B`6340
063c5cd2 mov       %rax,%rcx
063c5cd5 mov       0x48(%rsp),%rax
063c5cda sub       %rcx,%rax
063c5cdd mov       %rax,0xE8(%rsp)
063c5ce5 mov       0xE8(%rsp),%rax
063c5ced mov       %rax,0xF0(%rsp)
063c5cf5 mov       %rax,0xC8(%rsp)
063c5cfd mov       0xC8(%rsp),%rax
063c5d05 mov       %rax,0x50(%rsp)
063c5d0a mov       %rax,0xC0(%rsp)
063c5d12 mov       0x50(%rsp),%rcx
063c5d17 mov       0x70(%rsp),%rax
063c5d1c sub       %rcx,%rax
063c5d1f mov       %rax,0x28(%rsp)
063c5d24 setb      %al
063c5d27 test      $1,%al
063c5d29 jne       0x0000`0000`063C`5D46
063c5d2b mov       0x60(%rsp),%rcx
063c5d30 mov       0x28(%rsp),%rax
063c5d35 add       (%rcx),%rax
063c5d38 mov       %rax,0x20(%rsp)
063c5d3d setb      %al
063c5d40 test      $1,%al
063c5d42 jne       0x0000`0000`063C`5DA2
063c5d44 jmp       0x0000`0000`063C`5D60
063c5d46 lea       0x63C`F3B0,%rcx
063c5d4d lea       0x63D`1688,%r8
063c5d54 mov       $0x21,%edx
063c5d59 call      0x0000`0000`063B`9FF0
063c5d5e ud2
063c5d60 mov       0x34(%rsp),%eax
063c5d64 mov       0x38(%rsp),%rcx
063c5d69 mov       0x60(%rsp),%rdx
063c5d6e mov       0x20(%rsp),%r8
063c5d73 mov       %r8,(%rdx)
063c5d76 mov       %rcx,0x90(%rsp)
063c5d7e mov       %eax,0x98(%rsp)
063c5d85 mov       0x90(%rsp),%rcx
063c5d8d mov       0x98(%rsp),%eax
063c5d94 mov       %rcx,0x78(%rsp)
063c5d99 mov       %eax,0x80(%rsp)
063c5da0 jmp       0x0000`0000`063C`5DBC
063c5da2 lea       0x63C`F3E0,%rcx
063c5da9 lea       0x63D`16A0,%r8
063c5db0 mov       $0x1C,%edx
063c5db5 call      0x0000`0000`063B`9FF0
063c5dba ud2
063c5dbc mov       0x78(%rsp),%rax
063c5dc1 mov       0x80(%rsp),%edx
063c5dc8 add       $0x138,%rsp
063c5dcf ret

core::str::traits::impl$4::index<core::ops::range::RangeFrom<usize> >:
063c5dd0 sub       $0x58,%rsp
063c5dd4 mov       %r8,0x28(%rsp)
063c5dd9 mov       %rdx,%r8
063c5ddc mov       %rcx,%rdx
063c5ddf mov       0x28(%rsp),%rcx
063c5de4 mov       %rdx,0x40(%rsp)
063c5de9 mov       %r8,0x48(%rsp)
063c5dee mov       %rcx,0x50(%rsp)
063c5df3 call      0x0000`0000`063C`6550
063c5df8 mov       %rax,0x30(%rsp)
063c5dfd mov       %rdx,0x38(%rsp)
063c5e02 mov       0x38(%rsp),%rdx
063c5e07 mov       0x30(%rsp),%rax
063c5e0c add       $0x58,%rsp
063c5e10 ret

core::str::traits::impl$4::index<core::ops::range::Range<usize> >:
063c5e20 sub       $0x68,%rsp
063c5e24 mov       %r9,0x28(%rsp)
063c5e29 mov       %r8,0x30(%rsp)
063c5e2e mov       %rdx,%r9
063c5e31 mov       0x28(%rsp),%rdx
063c5e36 mov       %rcx,%r8
063c5e39 mov       0x30(%rsp),%rcx
063c5e3e mov       0x90(%rsp),%rax
063c5e46 mov       %r8,0x48(%rsp)
063c5e4b mov       %r9,0x50(%rsp)
063c5e50 mov       %rcx,0x58(%rsp)
063c5e55 mov       %rdx,0x60(%rsp)
063c5e5a mov       %rax,0x20(%rsp)
063c5e5f call      0x0000`0000`063C`60F0
063c5e64 mov       %rax,0x38(%rsp)
063c5e69 mov       %rdx,0x40(%rsp)
063c5e6e mov       0x40(%rsp),%rdx
063c5e73 mov       0x38(%rsp),%rax
063c5e78 add       $0x68,%rsp
063c5e7c ret

core::str::traits::impl$4::index<core::ops::range::RangeTo<usize> >:
063c5e80 sub       $0x58,%rsp
063c5e84 mov       %r8,0x28(%rsp)
063c5e89 mov       %rdx,%r8
063c5e8c mov       %rcx,%rdx
063c5e8f mov       0x28(%rsp),%rcx
063c5e94 mov       %rdx,0x40(%rsp)
063c5e99 mov       %r8,0x48(%rsp)
063c5e9e mov       %rcx,0x50(%rsp)
063c5ea3 call      0x0000`0000`063C`62F0
063c5ea8 mov       %rax,0x30(%rsp)
063c5ead mov       %rdx,0x38(%rsp)
063c5eb2 mov       0x38(%rsp),%rdx
063c5eb7 mov       0x30(%rsp),%rax
063c5ebc add       $0x58,%rsp
063c5ec0 ret

core::str::traits::impl$7::get:
063c5ed0 sub       $0x98,%rsp
063c5ed7 mov       %r9,0x40(%rsp)
063c5edc mov       %r8,0x48(%rsp)
063c5ee1 mov       %rdx,0x50(%rsp)
063c5ee6 mov       %rcx,0x58(%rsp)
063c5eeb mov       %rcx,0x78(%rsp)
063c5ef0 mov       %rdx,0x80(%rsp)
063c5ef8 mov       %r8,0x88(%rsp)
063c5f00 mov       %r9,0x90(%rsp)
063c5f08 cmp       %rdx,%rcx
063c5f0b jbe       0x0000`0000`063C`5F14
063c5f0d movb      $0,0x77(%rsp)
063c5f12 jmp       0x0000`0000`063C`5F36
063c5f14 mov       0x58(%rsp),%r8
063c5f19 mov       0x40(%rsp),%rdx
063c5f1e mov       0x48(%rsp),%rcx
063c5f23 call      0x0000`0000`063C`76A0
063c5f28 mov       %al,0x3F(%rsp)
063c5f2c mov       0x3F(%rsp),%al
063c5f30 and       $1,%al
063c5f32 mov       %al,0x77(%rsp)
063c5f36 testb     $1,0x77(%rsp)
063c5f3b jne       0x0000`0000`063C`5F44
063c5f3d movb      $0,0x76(%rsp)
063c5f42 jmp       0x0000`0000`063C`5F66
063c5f44 mov       0x50(%rsp),%r8
063c5f49 mov       0x40(%rsp),%rdx
063c5f4e mov       0x48(%rsp),%rcx
063c5f53 call      0x0000`0000`063C`76A0
063c5f58 mov       %al,0x3E(%rsp)
063c5f5c mov       0x3E(%rsp),%al
063c5f60 and       $1,%al
063c5f62 mov       %al,0x76(%rsp)
063c5f66 testb     $1,0x76(%rsp)
063c5f6b jne       0x0000`0000`063C`5F78
063c5f6d movq      $0,0x60(%rsp)
063c5f76 jmp       0x0000`0000`063C`5FAF
063c5f78 mov       0x40(%rsp),%r9
063c5f7d mov       0x48(%rsp),%r8
063c5f82 mov       0x50(%rsp),%rdx
063c5f87 mov       0x58(%rsp),%rcx
063c5f8c call      0x0000`0000`063C`5FD0
063c5f91 mov       %rax,0x28(%rsp)
063c5f96 mov       %rdx,0x30(%rsp)
063c5f9b mov       0x30(%rsp),%rax
063c5fa0 mov       0x28(%rsp),%rcx
063c5fa5 mov       %rcx,0x60(%rsp)
063c5faa mov       %rax,0x68(%rsp)
063c5faf mov       0x60(%rsp),%rax
063c5fb4 mov       0x68(%rsp),%rdx
063c5fb9 add       $0x98,%rsp
063c5fc0 ret

core::str::traits::impl$7::get_unchecked:
063c5fd0 sub       $0xD8,%rsp
063c5fd7 mov       %r9,0x48(%rsp)
063c5fdc mov       %r8,0x58(%rsp)
063c5fe1 mov       %rdx,%rax
063c5fe4 mov       0x48(%rsp),%rdx
063c5fe9 mov       %rax,0x50(%rsp)
063c5fee mov       %rcx,%r8
063c5ff1 mov       0x58(%rsp),%rcx
063c5ff6 mov       %r8,0x60(%rsp)
063c5ffb mov       %r8,0x70(%rsp)
063c6000 mov       %rax,0x78(%rsp)
063c6005 mov       %rcx,0x80(%rsp)
063c600d mov       %rdx,0x88(%rsp)
063c6015 mov       %rcx,0x90(%rsp)
063c601d mov       %rdx,0x98(%rsp)
063c6025 call      0x0000`0000`063B`6790
063c602a mov       %rax,0x68(%rsp)
063c602f mov       0x60(%rsp),%rcx
063c6034 mov       0x68(%rsp),%rax
063c6039 mov       %rax,0xB0(%rsp)
063c6041 mov       %rcx,0xB8(%rsp)
063c6049 mov       %rax,0xC0(%rsp)
063c6051 mov       %rcx,0xC8(%rsp)
063c6059 add       %rcx,%rax
063c605c mov       %rax,0xD0(%rsp)
063c6064 mov       0xD0(%rsp),%rax
063c606c mov       %rax,0x40(%rsp)
063c6071 mov       %rax,0xA0(%rsp)
063c6079 mov       0x60(%rsp),%rcx
063c607e mov       0x50(%rsp),%rax
063c6083 sub       %rcx,%rax
063c6086 mov       %rax,0x38(%rsp)
063c608b setb      %al
063c608e test      $1,%al
063c6090 jne       0x0000`0000`063C`60B5
063c6092 mov       0x38(%rsp),%rdx
063c6097 mov       0x40(%rsp),%rcx
063c609c mov       %rdx,0xA8(%rsp)
063c60a4 call      0x0000`0000`063B`69A0
063c60a9 mov       %rax,0x28(%rsp)
063c60ae mov       %rdx,0x30(%rsp)
063c60b3 jmp       0x0000`0000`063C`60CF
063c60b5 lea       0x63C`F3B0,%rcx
063c60bc lea       0x63D`1738,%r8
063c60c3 mov       $0x21,%edx
063c60c8 call      0x0000`0000`063B`9FF0
063c60cd ud2
063c60cf mov       0x30(%rsp),%rdx
063c60d4 mov       0x28(%rsp),%rax
063c60d9 add       $0xD8,%rsp
063c60e0 ret

core::str::traits::impl$7::index:
063c60f0 sub       $0xB8,%rsp
063c60f7 mov       %r9,0x30(%rsp)
063c60fc mov       %r8,0x38(%rsp)
063c6101 mov       0xE0(%rsp),%rax
063c6109 mov       %rax,0x40(%rsp)
063c610e mov       %rcx,0x78(%rsp)
063c6113 mov       %rdx,0x80(%rsp)
063c611b mov       %r8,0x88(%rsp)
063c6123 mov       %r9,0x90(%rsp)
063c612b mov       %rcx,0x58(%rsp)
063c6130 mov       %rdx,0x60(%rsp)
063c6135 mov       0x58(%rsp),%rax
063c613a mov       %rax,0x48(%rsp)
063c613f mov       %rax,0x98(%rsp)
063c6147 mov       0x60(%rsp),%rax
063c614c mov       %rax,0x50(%rsp)
063c6151 mov       %rax,0xA0(%rsp)
063c6159 call      0x0000`0000`063C`5ED0
063c615e mov       %rdx,0x70(%rsp)
063c6163 mov       %rax,0x68(%rsp)
063c6168 mov       0x68(%rsp),%rax
063c616d test      %rax,%rax
063c6170 setne     %al
063c6173 movzbl    %al,%eax
063c6176 je        0x0000`0000`063C`617E
063c6178 jmp       0x0000`0000`063C`617A
063c617a jmp       0x0000`0000`063C`61A5
063c617c ud2
063c617e mov       0x50(%rsp),%r9
063c6183 mov       0x48(%rsp),%r8
063c6188 mov       0x30(%rsp),%rdx
063c618d mov       0x38(%rsp),%rcx
063c6192 mov       0x40(%rsp),%r10
063c6197 mov       %rsp,%rax
063c619a mov       %r10,0x20(%rax)
063c619e call      0x0000`0000`063C`6ED0
063c61a3 ud2
063c61a5 mov       0x68(%rsp),%rax
063c61aa mov       0x70(%rsp),%rdx
063c61af mov       %rax,0xA8(%rsp)
063c61b7 mov       %rdx,0xB0(%rsp)
063c61bf add       $0xB8,%rsp
063c61c6 ret

core::str::traits::impl$8::get:
063c61d0 sub       $0x78,%rsp
063c61d4 mov       %r8,0x30(%rsp)
063c61d9 mov       %rdx,%rax
063c61dc mov       0x30(%rsp),%rdx
063c61e1 mov       %rax,0x38(%rsp)
063c61e6 mov       %rcx,%r8
063c61e9 mov       0x38(%rsp),%rcx
063c61ee mov       %r8,0x40(%rsp)
063c61f3 mov       %r8,0x60(%rsp)
063c61f8 mov       %rcx,0x68(%rsp)
063c61fd mov       %rdx,0x70(%rsp)
063c6202 call      0x0000`0000`063C`76A0
063c6207 mov       %al,0x4F(%rsp)
063c620b mov       0x4F(%rsp),%al
063c620f test      $1,%al
063c6211 jne       0x0000`0000`063C`6220
063c6213 jmp       0x0000`0000`063C`6215
063c6215 movq      $0,0x50(%rsp)
063c621e jmp       0x0000`0000`063C`6252
063c6220 mov       0x30(%rsp),%r8
063c6225 mov       0x38(%rsp),%rdx
063c622a mov       0x40(%rsp),%rcx
063c622f call      0x0000`0000`063C`6270
063c6234 mov       %rax,0x20(%rsp)
063c6239 mov       %rdx,0x28(%rsp)
063c623e mov       0x28(%rsp),%rax
063c6243 mov       0x20(%rsp),%rcx
063c6248 mov       %rcx,0x50(%rsp)
063c624d mov       %rax,0x58(%rsp)
063c6252 mov       0x50(%rsp),%rax
063c6257 mov       0x58(%rsp),%rdx
063c625c add       $0x78,%rsp
063c6260 ret

core::str::traits::impl$8::get_unchecked:
063c6270 sub       $0x88,%rsp
063c6277 mov       %r8,0x38(%rsp)
063c627c mov       %rdx,%rax
063c627f mov       0x38(%rsp),%rdx
063c6284 mov       %rax,0x40(%rsp)
063c6289 mov       %rcx,%rax
063c628c mov       0x40(%rsp),%rcx
063c6291 mov       %rax,0x48(%rsp)
063c6296 mov       %rax,0x58(%rsp)
063c629b mov       %rcx,0x60(%rsp)
063c62a0 mov       %rdx,0x68(%rsp)
063c62a5 mov       %rcx,0x70(%rsp)
063c62aa mov       %rdx,0x78(%rsp)
063c62af call      0x0000`0000`063B`6790
063c62b4 mov       %rax,0x50(%rsp)
063c62b9 mov       %rax,0x80(%rsp)
063c62c1 mov       0x48(%rsp),%rdx
063c62c6 mov       0x50(%rsp),%rcx
063c62cb call      0x0000`0000`063B`69A0
063c62d0 mov       %rax,0x28(%rsp)
063c62d5 mov       %rdx,0x30(%rsp)
063c62da mov       0x30(%rsp),%rdx
063c62df mov       0x28(%rsp),%rax
063c62e4 add       $0x88,%rsp
063c62eb ret

core::str::traits::impl$8::index:
063c62f0 sub       $0x88,%rsp
063c62f7 mov       %r9,0x28(%rsp)
063c62fc mov       %r8,0x30(%rsp)
063c6301 mov       %rdx,0x38(%rsp)
063c6306 mov       %rcx,0x40(%rsp)
063c630b mov       %rcx,0x58(%rsp)
063c6310 mov       %rdx,0x60(%rsp)
063c6315 mov       %r8,0x68(%rsp)
063c631a mov       %rcx,0x70(%rsp)
063c631f call      0x0000`0000`063C`61D0
063c6324 mov       %rdx,0x50(%rsp)
063c6329 mov       %rax,0x48(%rsp)
063c632e mov       0x48(%rsp),%rax
063c6333 test      %rax,%rax
063c6336 setne     %al
063c6339 movzbl    %al,%eax
063c633c je        0x0000`0000`063C`6344
063c633e jmp       0x0000`0000`063C`6340
063c6340 jmp       0x0000`0000`063C`636B
063c6342 ud2
063c6344 mov       0x40(%rsp),%r9
063c6349 mov       0x30(%rsp),%rdx
063c634e mov       0x38(%rsp),%rcx
063c6353 mov       0x28(%rsp),%r8
063c6358 mov       %rsp,%rax
063c635b mov       %r8,0x20(%rax)
063c635f xor       %eax,%eax
063c6361 mov       %eax,%r8d
063c6364 call      0x0000`0000`063C`6ED0
063c6369 ud2
063c636b mov       0x48(%rsp),%rax
063c6370 mov       0x50(%rsp),%rdx
063c6375 mov       %rax,0x78(%rsp)
063c637a mov       %rdx,0x80(%rsp)
063c6382 add       $0x88,%rsp
063c6389 ret

core::str::traits::impl$9::get:
063c6390 sub       $0x78,%rsp
063c6394 mov       %r8,0x30(%rsp)
063c6399 mov       %rdx,%rax
063c639c mov       0x30(%rsp),%rdx
063c63a1 mov       %rax,0x38(%rsp)
063c63a6 mov       %rcx,%r8
063c63a9 mov       0x38(%rsp),%rcx
063c63ae mov       %r8,0x40(%rsp)
063c63b3 mov       %r8,0x60(%rsp)
063c63b8 mov       %rcx,0x68(%rsp)
063c63bd mov       %rdx,0x70(%rsp)
063c63c2 call      0x0000`0000`063C`76A0
063c63c7 mov       %al,0x4F(%rsp)
063c63cb mov       0x4F(%rsp),%al
063c63cf test      $1,%al
063c63d1 jne       0x0000`0000`063C`63E0
063c63d3 jmp       0x0000`0000`063C`63D5
063c63d5 movq      $0,0x50(%rsp)
063c63de jmp       0x0000`0000`063C`6412
063c63e0 mov       0x30(%rsp),%r8
063c63e5 mov       0x38(%rsp),%rdx
063c63ea mov       0x40(%rsp),%rcx
063c63ef call      0x0000`0000`063C`6430
063c63f4 mov       %rax,0x20(%rsp)
063c63f9 mov       %rdx,0x28(%rsp)
063c63fe mov       0x28(%rsp),%rax
063c6403 mov       0x20(%rsp),%rcx
063c6408 mov       %rcx,0x50(%rsp)
063c640d mov       %rax,0x58(%rsp)
063c6412 mov       0x50(%rsp),%rax
063c6417 mov       0x58(%rsp),%rdx
063c641c add       $0x78,%rsp
063c6420 ret

core::str::traits::impl$9::get_unchecked:
063c6430 sub       $0xC8,%rsp
063c6437 mov       %r8,0x48(%rsp)
063c643c mov       %rdx,%rax
063c643f mov       0x48(%rsp),%rdx
063c6444 mov       %rax,0x50(%rsp)
063c6449 mov       %rcx,%rax
063c644c mov       0x50(%rsp),%rcx
063c6451 mov       %rax,0x58(%rsp)
063c6456 mov       %rax,0x68(%rsp)
063c645b mov       %rcx,0x70(%rsp)
063c6460 mov       %rdx,0x78(%rsp)
063c6465 mov       %rcx,0x80(%rsp)
063c646d mov       %rdx,0x88(%rsp)
063c6475 call      0x0000`0000`063B`6790
063c647a mov       %rax,0x60(%rsp)
063c647f mov       0x58(%rsp),%rcx
063c6484 mov       0x60(%rsp),%rax
063c6489 mov       %rax,0xA0(%rsp)
063c6491 mov       %rcx,0xA8(%rsp)
063c6499 mov       %rax,0xB0(%rsp)
063c64a1 mov       %rcx,0xB8(%rsp)
063c64a9 add       %rcx,%rax
063c64ac mov       %rax,0xC0(%rsp)
063c64b4 mov       0xC0(%rsp),%rax
063c64bc mov       %rax,0x40(%rsp)
063c64c1 mov       %rax,0x90(%rsp)
063c64c9 mov       0x48(%rsp),%rdx
063c64ce mov       0x50(%rsp),%rcx
063c64d3 call      0x0000`0000`063B`66B0
063c64d8 mov       %rax,0x38(%rsp)
063c64dd mov       0x58(%rsp),%rcx
063c64e2 mov       0x38(%rsp),%rax
063c64e7 sub       %rcx,%rax
063c64ea mov       %rax,0x30(%rsp)
063c64ef setb      %al
063c64f2 test      $1,%al
063c64f4 jne       0x0000`0000`063C`6519
063c64f6 mov       0x30(%rsp),%rdx
063c64fb mov       0x40(%rsp),%rcx
063c6500 mov       %rdx,0x98(%rsp)
063c6508 call      0x0000`0000`063B`69A0
063c650d mov       %rax,0x20(%rsp)
063c6512 mov       %rdx,0x28(%rsp)
063c6517 jmp       0x0000`0000`063C`6533
063c6519 lea       0x63C`F3B0,%rcx
063c6520 lea       0x63D`1750,%r8
063c6527 mov       $0x21,%edx
063c652c call      0x0000`0000`063B`9FF0
063c6531 ud2
063c6533 mov       0x28(%rsp),%rdx
063c6538 mov       0x20(%rsp),%rax
063c653d add       $0xC8,%rsp
063c6544 ret

core::str::traits::impl$9::index:
063c6550 sub       $0xB8,%rsp
063c6557 mov       %r9,0x38(%rsp)
063c655c mov       %r8,0x40(%rsp)
063c6561 mov       %rdx,%rax
063c6564 mov       0x40(%rsp),%rdx
063c6569 mov       %rax,0x48(%rsp)
063c656e mov       %rcx,%rax
063c6571 mov       0x48(%rsp),%rcx
063c6576 mov       %rax,0x50(%rsp)
063c657b mov       %rax,0x80(%rsp)
063c6583 mov       %rcx,0x88(%rsp)
063c658b mov       %rdx,0x90(%rsp)
063c6593 call      0x0000`0000`063C`7630
063c6598 mov       %rax,0x58(%rsp)
063c659d mov       0x40(%rsp),%r8
063c65a2 mov       0x48(%rsp),%rdx
063c65a7 mov       0x50(%rsp),%rcx
063c65ac mov       0x58(%rsp),%rax
063c65b1 mov       %rcx,0x60(%rsp)
063c65b6 mov       %rax,0x68(%rsp)
063c65bb mov       0x60(%rsp),%rax
063c65c0 mov       %rax,0x28(%rsp)
063c65c5 mov       %rax,0x98(%rsp)
063c65cd mov       0x68(%rsp),%rax
063c65d2 mov       %rax,0x30(%rsp)
063c65d7 mov       %rax,0xA0(%rsp)
063c65df call      0x0000`0000`063C`6390
063c65e4 mov       %rdx,0x78(%rsp)
063c65e9 mov       %rax,0x70(%rsp)
063c65ee mov       0x70(%rsp),%rax
063c65f3 test      %rax,%rax
063c65f6 setne     %al
063c65f9 movzbl    %al,%eax
063c65fc je        0x0000`0000`063C`6604
063c65fe jmp       0x0000`0000`063C`6600
063c6600 jmp       0x0000`0000`063C`662B
063c6602 ud2
063c6604 mov       0x30(%rsp),%r9
063c6609 mov       0x28(%rsp),%r8
063c660e mov       0x40(%rsp),%rdx
063c6613 mov       0x48(%rsp),%rcx
063c6618 mov       0x38(%rsp),%r10
063c661d mov       %rsp,%rax
063c6620 mov       %r10,0x20(%rax)
063c6624 call      0x0000`0000`063C`6ED0
063c6629 ud2
063c662b mov       0x70(%rsp),%rax
063c6630 mov       0x78(%rsp),%rdx
063c6635 mov       %rax,0xA8(%rsp)
063c663d mov       %rdx,0xB0(%rsp)
063c6645 add       $0xB8,%rsp
063c664c ret

core::str::validations::utf8_first_byte:
063c6650 sub       $0x28,%rsp
063c6654 mov       %cl,0x21(%rsp)
063c6658 mov       %cl,0x23(%rsp)
063c665c mov       %edx,0x24(%rsp)
063c6660 mov       %edx,%eax
063c6662 and       $0xFFFF`FFF8,%eax
063c6665 cmp       $0,%eax
063c6668 setne     %al
063c666b mov       %dl,%cl
063c666d and       $7,%cl
063c6670 mov       $0x7F,%dl
063c6672 shr       %cl,%dl
063c6674 mov       %dl,0x22(%rsp)
063c6678 test      $1,%al
063c667a jne       0x0000`0000`063C`668E
063c667c mov       0x22(%rsp),%cl
063c6680 mov       0x21(%rsp),%al
063c6684 and       %cl,%al
063c6686 movzbl    %al,%eax
063c6689 add       $0x28,%rsp
063c668d ret
063c668e lea       0x63C`F460,%rcx
063c6695 lea       0x63D`17E8,%r8
063c669c mov       $0x24,%edx
063c66a1 call      0x0000`0000`063B`9FF0
063c66a6 ud2

core::str::validations::utf8_acc_cont_byte:
063c66b0 sub       $0x10,%rsp
063c66b4 mov       %dl,3(%rsp)
063c66b8 mov       %ecx,8(%rsp)
063c66bc mov       %dl,0xF(%rsp)
063c66c0 shl       $6,%ecx
063c66c3 mov       %ecx,4(%rsp)
063c66c7 mov       4(%rsp),%eax
063c66cb mov       3(%rsp),%cl
063c66cf and       $0x3F,%cl
063c66d2 movzbl    %cl,%ecx
063c66d5 or        %ecx,%eax
063c66d7 add       $0x10,%rsp
063c66db ret

core::str::validations::utf8_is_cont_byte:
063c66e0 push      %rax
063c66e1 mov       %cl,7(%rsp)
063c66e5 cmp       $0xC0,%cl
063c66e8 setl      %al
063c66eb and       $1,%al
063c66ed movzbl    %al,%eax
063c66f0 pop       %rcx
063c66f1 ret

core::str::validations::next_code_point<core::slice::iter::Iter<u8> >:
063c6700 sub       $0xD8,%rsp
063c6707 mov       %rcx,0x80(%rsp)
063c670f mov       %rcx,0xA8(%rsp)
063c6717 call      0x0000`0000`063C`9D90
063c671c mov       %rax,0x88(%rsp)
063c6724 mov       0x88(%rsp),%rcx
063c672c call      0x0000`0000`063B`9E10
063c6731 mov       %rax,0x98(%rsp)
063c6739 mov       0x98(%rsp),%rax
063c6741 test      %rax,%rax
063c6744 sete      %al
063c6747 movzbl    %al,%eax
063c674a jne       0x0000`0000`063C`6752
063c674c jmp       0x0000`0000`063C`674E
063c674e jmp       0x0000`0000`063C`6775
063c6750 ud2
063c6752 mov       0x98(%rsp),%rax
063c675a mov       %rax,0xB8(%rsp)
063c6762 mov       (%rax),%al
063c6764 mov       %al,0x7F(%rsp)
063c6768 mov       %al,0xC7(%rsp)
063c676f cmp       $0x80,%al
063c6771 jb        0x0000`0000`063C`67B9
063c6773 jmp       0x0000`0000`063C`679E
063c6775 call      0x0000`0000`063B`9F00
063c677a mov       %edx,0x94(%rsp)
063c6781 mov       %eax,0x90(%rsp)
063c6788 mov       0x90(%rsp),%eax
063c678f mov       0x94(%rsp),%edx
063c6796 add       $0xD8,%rsp
063c679d ret
063c679e mov       0x7F(%rsp),%cl
063c67a2 mov       $2,%edx
063c67a7 call      0x0000`0000`063C`6650
063c67ac mov       %eax,0x78(%rsp)
063c67b0 mov       %eax,0xC8(%rsp)
063c67b7 jmp       0x0000`0000`063C`67D4
063c67b9 mov       0x7F(%rsp),%al
063c67bd movzbl    %al,%eax
063c67c0 mov       %eax,0x94(%rsp)
063c67c7 movl      $1,0x90(%rsp)
063c67d2 jmp       0x0000`0000`063C`6788
063c67d4 mov       0x80(%rsp),%rcx
063c67dc call      0x0000`0000`063C`9D90
063c67e1 mov       %rax,0x70(%rsp)
063c67e6 mov       0x70(%rsp),%rcx
063c67eb lea       0x63D`1800,%rdx
063c67f2 call      0x0000`0000`063B`9890
063c67f7 mov       %rax,0x68(%rsp)
063c67fc mov       0x78(%rsp),%ecx
063c6800 mov       0x68(%rsp),%rax
063c6805 mov       (%rax),%dl
063c6807 mov       %dl,0x67(%rsp)
063c680b mov       %dl,0xCE(%rsp)
063c6812 call      0x0000`0000`063C`66B0
063c6817 mov       %eax,0xA4(%rsp)
063c681e mov       0x7F(%rsp),%al
063c6822 cmp       $0xE0,%al
063c6824 jae       0x0000`0000`063C`6844
063c6826 mov       0xA4(%rsp),%eax
063c682d mov       %eax,0x94(%rsp)
063c6834 movl      $1,0x90(%rsp)
063c683f jmp       0x0000`0000`063C`6788
063c6844 mov       0x80(%rsp),%rcx
063c684c call      0x0000`0000`063C`9D90
063c6851 mov       %rax,0x58(%rsp)
063c6856 mov       0x58(%rsp),%rcx
063c685b lea       0x63D`1818,%rdx
063c6862 call      0x0000`0000`063B`9890
063c6867 mov       %rax,0x50(%rsp)
063c686c mov       0x67(%rsp),%al
063c6870 mov       0x50(%rsp),%rcx
063c6875 mov       (%rcx),%dl
063c6877 mov       %dl,0xCF(%rsp)
063c687e and       $0x3F,%al
063c6880 movzbl    %al,%ecx
063c6883 call      0x0000`0000`063C`66B0
063c6888 mov       %eax,0x4C(%rsp)
063c688c mov       %eax,0xD0(%rsp)
063c6893 mov       0x78(%rsp),%eax
063c6897 shl       $0xC,%eax
063c689a mov       %eax,0x48(%rsp)
063c689e mov       0x7F(%rsp),%al
063c68a2 mov       0x4C(%rsp),%edx
063c68a6 mov       0x48(%rsp),%ecx
063c68aa or        %edx,%ecx
063c68ac mov       %ecx,0xA4(%rsp)
063c68b3 cmp       $0xF0,%al
063c68b5 jb        0x0000`0000`063C`6826
063c68bb mov       0x80(%rsp),%rcx
063c68c3 call      0x0000`0000`063C`9D90
063c68c8 mov       %rax,0x40(%rsp)
063c68cd mov       0x40(%rsp),%rcx
063c68d2 lea       0x63D`1830,%rdx
063c68d9 call      0x0000`0000`063B`9890
063c68de mov       %rax,0x38(%rsp)
063c68e3 mov       0x78(%rsp),%eax
063c68e7 mov       0x38(%rsp),%rcx
063c68ec mov       (%rcx),%cl
063c68ee mov       %cl,0x33(%rsp)
063c68f2 mov       %cl,0xD7(%rsp)
063c68f9 and       $7,%eax
063c68fc shl       $0x12,%eax
063c68ff mov       %eax,0x34(%rsp)
063c6903 mov       0x33(%rsp),%dl
063c6907 mov       0x4C(%rsp),%ecx
063c690b call      0x0000`0000`063C`66B0
063c6910 mov       %eax,0x2C(%rsp)
063c6914 mov       0x2C(%rsp),%ecx
063c6918 mov       0x34(%rsp),%eax
063c691c or        %ecx,%eax
063c691e mov       %eax,0xA4(%rsp)
063c6925 jmp       0x0000`0000`063C`6826

core::str::pattern::impl$0::next_match:
063c6930 sub       $0x1D8,%rsp
063c6937 mov       %rdx,0xA8(%rsp)
063c693f mov       %rcx,0xB0(%rsp)
063c6947 mov       %rcx,0xB8(%rsp)
063c694f mov       %rdx,0x150(%rsp)
063c6957 mov       0xA8(%rsp),%rax
063c695f mov       (%rax),%rcx
063c6962 mov       8(%rax),%rax
063c6966 mov       %rcx,0x1B8(%rsp)
063c696e mov       %rax,0x1C0(%rsp)
063c6976 mov       %rcx,0x1C8(%rsp)
063c697e mov       %rax,0x1D0(%rsp)
063c6986 mov       0x1C8(%rsp),%rax
063c698e mov       %rax,0x98(%rsp)
063c6996 mov       0x1D0(%rsp),%rax
063c699e mov       %rax,0xA0(%rsp)
063c69a6 mov       0xA0(%rsp),%rdx
063c69ae mov       0x98(%rsp),%rcx
063c69b6 mov       0xA8(%rsp),%rax
063c69be mov       0x10(%rax),%r8
063c69c2 mov       0x18(%rax),%rax
063c69c6 mov       %r8,0xD0(%rsp)
063c69ce mov       %rax,0xD8(%rsp)
063c69d6 mov       0xD0(%rsp),%r8
063c69de mov       0xD8(%rsp),%r9
063c69e6 call      0x0000`0000`063C`3AD0
063c69eb mov       %rax,0x88(%rsp)
063c69f3 mov       %rdx,0x90(%rsp)
063c69fb mov       0x90(%rsp),%rdx
063c6a03 mov       0x88(%rsp),%rcx
063c6a0b call      0x0000`0000`063B`9DB0
063c6a10 mov       %rdx,0xC8(%rsp)
063c6a18 mov       %rax,0xC0(%rsp)
063c6a20 mov       0xC0(%rsp),%rax
063c6a28 test      %rax,%rax
063c6a2b sete      %al
063c6a2e movzbl    %al,%eax
063c6a31 jne       0x0000`0000`063C`6A39
063c6a33 jmp       0x0000`0000`063C`6A35
063c6a35 jmp       0x0000`0000`063C`6AA0
063c6a37 ud2
063c6a39 mov       0xA8(%rsp),%rax
063c6a41 mov       0xC0(%rsp),%rdx
063c6a49 mov       %rdx,0x68(%rsp)
063c6a4e mov       0xC8(%rsp),%rcx
063c6a56 mov       %rcx,0x70(%rsp)
063c6a5b mov       %rdx,0x160(%rsp)
063c6a63 mov       %rcx,0x168(%rsp)
063c6a6b mov       %rdx,0x170(%rsp)
063c6a73 mov       %rcx,0x178(%rsp)
063c6a7b mov       %rax,%rcx
063c6a7e add       $0x2C,%rcx
063c6a82 mov       %rcx,0x78(%rsp)
063c6a87 mov       0x20(%rax),%rax
063c6a8b sub       $1,%rax
063c6a8f mov       %rax,0x80(%rsp)
063c6a97 setb      %al
063c6a9a test      $1,%al
063c6a9c jne       0x0000`0000`063C`6ADB
063c6a9e jmp       0x0000`0000`063C`6ABD
063c6aa0 mov       0xB0(%rsp),%rcx
063c6aa8 call      0x0000`0000`063B`9E90
063c6aad mov       0xB8(%rsp),%rax
063c6ab5 add       $0x1D8,%rsp
063c6abc ret
063c6abd mov       0x80(%rsp),%r8
063c6ac5 mov       0x78(%rsp),%rcx
063c6aca mov       $4,%edx
063c6acf call      0x0000`0000`063C`3C80
063c6ad4 mov       %rax,0x60(%rsp)
063c6ad9 jmp       0x0000`0000`063C`6AF5
063c6adb lea       0x63C`F3B0,%rcx
063c6ae2 lea       0x63D`18C8,%r8
063c6ae9 mov       $0x21,%edx
063c6aee call      0x0000`0000`063B`9FF0
063c6af3 ud2
063c6af5 mov       0x70(%rsp),%r8
063c6afa mov       0x68(%rsp),%rdx
063c6aff mov       0x60(%rsp),%rax
063c6b04 mov       (%rax),%cl
063c6b06 mov       %cl,0x187(%rsp)
063c6b0d call      0x0000`0000`063C`1220
063c6b12 mov       %rdx,0xE8(%rsp)
063c6b1a mov       %rax,0xE0(%rsp)
063c6b22 cmpq      $1,0xE0(%rsp)
063c6b2b jne       0x0000`0000`063C`6B4F
063c6b2d mov       0xE8(%rsp),%rax
063c6b35 mov       %rax,0x188(%rsp)
063c6b3d add       $1,%rax
063c6b41 mov       %rax,0x58(%rsp)
063c6b46 setb      %al
063c6b49 test      $1,%al
063c6b4b jne       0x0000`0000`063C`6B92
063c6b4d jmp       0x0000`0000`063C`6B73
063c6b4f mov       0xB0(%rsp),%rax
063c6b57 mov       0xA8(%rsp),%rcx
063c6b5f mov       0x18(%rcx),%rdx
063c6b63 mov       %rdx,0x10(%rcx)
063c6b67 movq      $0,(%rax)
063c6b6e jmp       0x0000`0000`063C`6AAD
063c6b73 mov       0xA8(%rsp),%rcx
063c6b7b mov       0x58(%rsp),%rax
063c6b80 add       0x10(%rcx),%rax
063c6b84 mov       %rax,0x50(%rsp)
063c6b89 setb      %al
063c6b8c test      $1,%al
063c6b8e jne       0x0000`0000`063C`6BCC
063c6b90 jmp       0x0000`0000`063C`6BAC
063c6b92 lea       0x63C`F3E0,%rcx
063c6b99 lea       0x63D`18E0,%r8
063c6ba0 mov       $0x1C,%edx
063c6ba5 call      0x0000`0000`063B`9FF0
063c6baa ud2
063c6bac mov       0xA8(%rsp),%rcx
063c6bb4 mov       0x50(%rsp),%rax
063c6bb9 mov       %rax,0x10(%rcx)
063c6bbd mov       0x10(%rcx),%rax
063c6bc1 cmp       0x20(%rcx),%rax
063c6bc5 jae       0x0000`0000`063C`6BE6
063c6bc7 jmp       0x0000`0000`063C`6957
063c6bcc lea       0x63C`F3E0,%rcx
063c6bd3 lea       0x63D`18F8,%r8
063c6bda mov       $0x1C,%edx
063c6bdf call      0x0000`0000`063B`9FF0
063c6be4 ud2
063c6be6 mov       0xA8(%rsp),%rcx
063c6bee mov       0x10(%rcx),%rax
063c6bf2 sub       0x20(%rcx),%rax
063c6bf6 mov       %rax,0x48(%rsp)
063c6bfb setb      %al
063c6bfe test      $1,%al
063c6c00 jne       0x0000`0000`063C`6C5A
063c6c02 mov       0xA8(%rsp),%rax
063c6c0a mov       0x48(%rsp),%rcx
063c6c0f mov       %rcx,0x190(%rsp)
063c6c17 mov       (%rax),%rcx
063c6c1a mov       8(%rax),%rax
063c6c1e mov       %rcx,0x198(%rsp)
063c6c26 mov       %rax,0x1A0(%rsp)
063c6c2e mov       %rcx,0x1A8(%rsp)
063c6c36 mov       %rax,0x1B0(%rsp)
063c6c3e mov       0x1A8(%rsp),%rax
063c6c46 mov       %rax,0x38(%rsp)
063c6c4b mov       0x1B0(%rsp),%rax
063c6c53 mov       %rax,0x40(%rsp)
063c6c58 jmp       0x0000`0000`063C`6C74
063c6c5a lea       0x63C`F3B0,%rcx
063c6c61 lea       0x63D`1910,%r8
063c6c68 mov       $0x21,%edx
063c6c6d call      0x0000`0000`063B`9FF0
063c6c72 ud2
063c6c74 mov       0x40(%rsp),%rdx
063c6c79 mov       0x38(%rsp),%rcx
063c6c7e mov       0x48(%rsp),%r8
063c6c83 mov       0xA8(%rsp),%rax
063c6c8b mov       0x10(%rax),%rax
063c6c8f mov       %r8,0x100(%rsp)
063c6c97 mov       %rax,0x108(%rsp)
063c6c9f mov       0x100(%rsp),%r8
063c6ca7 mov       0x108(%rsp),%r9
063c6caf call      0x0000`0000`063C`3AD0
063c6cb4 mov       %rdx,0xF8(%rsp)
063c6cbc mov       %rax,0xF0(%rsp)
063c6cc4 mov       $1,%eax
063c6cc9 xor       %ecx,%ecx
063c6ccb cmpq      $0,0xF0(%rsp)
063c6cd4 cmove     %rcx,%rax
063c6cd8 cmp       $1,%rax
063c6cdc jne       0x0000`0000`063C`6957
063c6ce2 mov       0xA8(%rsp),%rax
063c6cea mov       0xF0(%rsp),%rdx
063c6cf2 mov       0xF8(%rsp),%rcx
063c6cfa mov       %rdx,0x110(%rsp)
063c6d02 mov       %rcx,0x118(%rsp)
063c6d0a mov       %rax,%rcx
063c6d0d add       $0x2C,%rcx
063c6d11 mov       0x20(%rax),%rax
063c6d15 movq      $0,0x130(%rsp)
063c6d21 mov       %rax,0x138(%rsp)
063c6d29 mov       0x130(%rsp),%rdx
063c6d31 mov       0x138(%rsp),%r8
063c6d39 lea       0x63D`1928,%r9
063c6d40 call      0x0000`0000`063B`7C40
063c6d45 mov       %rax,0x28(%rsp)
063c6d4a mov       %rdx,0x30(%rsp)
063c6d4f mov       0x30(%rsp),%rax
063c6d54 mov       0x28(%rsp),%rcx
063c6d59 mov       %rcx,0x120(%rsp)
063c6d61 mov       %rax,0x128(%rsp)
063c6d69 lea       0x110(%rsp),%rcx
063c6d71 lea       0x120(%rsp),%rdx
063c6d79 call      0x0000`0000`063B`7950
063c6d7e mov       %al,0x27(%rsp)
063c6d82 mov       0x27(%rsp),%al
063c6d86 test      $1,%al
063c6d88 jne       0x0000`0000`063C`6D8F
063c6d8a jmp       0x0000`0000`063C`6957
063c6d8f mov       0xB0(%rsp),%rax
063c6d97 mov       0x48(%rsp),%rdx
063c6d9c mov       0xA8(%rsp),%rcx
063c6da4 mov       0x10(%rcx),%rcx
063c6da8 mov       %rdx,0x140(%rsp)
063c6db0 mov       %rcx,0x148(%rsp)
063c6db8 mov       0x140(%rsp),%rdx
063c6dc0 mov       0x148(%rsp),%rcx
063c6dc8 mov       %rdx,8(%rax)
063c6dcc mov       %rcx,0x10(%rax)
063c6dd0 movq      $1,(%rax)
063c6dd7 jmp       0x0000`0000`063C`6AAD

core::str::pattern::impl$3::into_searcher:
063c6de0 push      %rsi
063c6de1 sub       $0x90,%rsp
063c6de8 mov       %r9,0x30(%rsp)
063c6ded mov       %r8,0x38(%rsp)
063c6df2 mov       %edx,0x54(%rsp)
063c6df6 mov       %rcx,0x40(%rsp)
063c6dfb mov       %rcx,0x48(%rsp)
063c6e00 mov       %edx,0x74(%rsp)
063c6e04 mov       %r8,0x78(%rsp)
063c6e09 mov       %r9,0x80(%rsp)
063c6e11 lea       0x6C(%rsp),%rcx
063c6e16 xor       %edx,%edx
063c6e18 mov       $4,%r8d
063c6e1e call      0x0000`0000`063C`BCC0
063c6e23 mov       0x54(%rsp),%ecx
063c6e27 lea       0x6C(%rsp),%rdx
063c6e2c mov       $4,%r8d
063c6e32 call      0x0000`0000`063B`8210
063c6e37 mov       %rax,0x58(%rsp)
063c6e3c mov       %rdx,0x60(%rsp)
063c6e41 mov       0x60(%rsp),%rdx
063c6e46 mov       0x58(%rsp),%rcx
063c6e4b call      0x0000`0000`063C`7630
063c6e50 mov       %rax,0x28(%rsp)
063c6e55 mov       %rax,0x88(%rsp)
063c6e5d mov       0x30(%rsp),%rdx
063c6e62 mov       0x38(%rsp),%rcx
063c6e67 call      0x0000`0000`063C`7630
063c6e6c mov       %rax,0x20(%rsp)
063c6e71 mov       0x48(%rsp),%rax
063c6e76 mov       0x40(%rsp),%rcx
063c6e7b mov       0x28(%rsp),%rdx
063c6e80 mov       0x54(%rsp),%r8d
063c6e85 mov       0x20(%rsp),%r9
063c6e8a mov       0x30(%rsp),%r10
063c6e8f mov       0x38(%rsp),%r11
063c6e94 mov       0x6C(%rsp),%esi
063c6e98 mov       %esi,0x70(%rsp)
063c6e9c mov       %r11,(%rcx)
063c6e9f mov       %r10,8(%rcx)
063c6ea3 movq      $0,0x10(%rcx)
063c6eab mov       %r9,0x18(%rcx)
063c6eaf mov       %r8d,0x28(%rcx)
063c6eb3 mov       %rdx,0x20(%rcx)
063c6eb7 mov       0x70(%rsp),%edx
063c6ebb mov       %edx,0x2C(%rcx)
063c6ebe add       $0x90,%rsp
063c6ec5 pop       %rsi
063c6ec6 ret

core::str::slice_error_fail:
063c6ed0 push      %rsi
063c6ed1 push      %rdi
063c6ed2 push      %rbx
063c6ed3 sub       $0x380,%rsp
063c6eda mov       %rdx,0x170(%rsp)
063c6ee2 mov       %rcx,0x178(%rsp)
063c6eea mov       0x3C0(%rsp),%rax
063c6ef2 mov       %rax,0x180(%rsp)
063c6efa mov       %r8,0x190(%rsp)
063c6f02 mov       %r9,0x198(%rsp)
063c6f0a mov       %rcx,0x360(%rsp)
063c6f12 mov       %rdx,0x368(%rsp)
063c6f1a mov       $0x100,%r8d
063c6f20 call      0x0000`0000`063C`77A0
063c6f25 mov       %rax,0x188(%rsp)
063c6f2d mov       %rax,0x370(%rsp)
063c6f35 mov       0x180(%rsp),%r9
063c6f3d mov       0x170(%rsp),%rdx
063c6f45 mov       0x178(%rsp),%rcx
063c6f4d mov       0x188(%rsp),%rax
063c6f55 mov       %rax,0x1B0(%rsp)
063c6f5d mov       0x1B0(%rsp),%r8
063c6f65 call      0x0000`0000`063C`5E80
063c6f6a mov       %rax,0x160(%rsp)
063c6f72 mov       %rdx,0x168(%rsp)
063c6f7a mov       0x170(%rsp),%rdx
063c6f82 mov       0x178(%rsp),%rcx
063c6f8a mov       0x168(%rsp),%rax
063c6f92 mov       0x160(%rsp),%r8
063c6f9a mov       %r8,0x1A0(%rsp)
063c6fa2 mov       %rax,0x1A8(%rsp)
063c6faa call      0x0000`0000`063C`7630
063c6faf mov       %rax,0x158(%rsp)
063c6fb7 mov       0x188(%rsp),%rax
063c6fbf mov       0x158(%rsp),%rcx
063c6fc7 cmp       %rcx,%rax
063c6fca jb        0x0000`0000`063C`6FE9
063c6fcc lea       0x63C`F530,%rax
063c6fd3 mov       %rax,0x1B8(%rsp)
063c6fdb movq      $0,0x1C0(%rsp)
063c6fe7 jmp       0x0000`0000`063C`7004
063c6fe9 lea       0x63D`1940,%rax
063c6ff0 mov       %rax,0x1B8(%rsp)
063c6ff8 movq      $5,0x1C0(%rsp)
063c7004 mov       0x170(%rsp),%rdx
063c700c mov       0x178(%rsp),%rcx
063c7014 mov       0x190(%rsp),%rax
063c701c mov       %rax,0x148(%rsp)
063c7024 call      0x0000`0000`063C`7630
063c7029 mov       %rax,0x150(%rsp)
063c7031 mov       0x148(%rsp),%rax
063c7039 mov       0x150(%rsp),%rcx
063c7041 cmp       %rcx,%rax
063c7044 ja        0x0000`0000`063C`7075
063c7046 mov       0x170(%rsp),%rdx
063c704e mov       0x178(%rsp),%rcx
063c7056 mov       0x198(%rsp),%rax
063c705e mov       %rax,0x138(%rsp)
063c7066 call      0x0000`0000`063C`7630
063c706b mov       %rax,0x140(%rsp)
063c7073 jmp       0x0000`0000`063C`7089
063c7075 movb      $1,0x1CF(%rsp)
063c707d testb     $1,0x1CF(%rsp)
063c7085 jne       0x0000`0000`063C`70CC
063c7087 jmp       0x0000`0000`063C`70AA
063c7089 mov       0x138(%rsp),%rax
063c7091 mov       0x140(%rsp),%rcx
063c7099 cmp       %rcx,%rax
063c709c seta      %al
063c709f and       $1,%al
063c70a1 mov       %al,0x1CF(%rsp)
063c70a8 jmp       0x0000`0000`063C`707D
063c70aa mov       0x190(%rsp),%rax
063c70b2 cmp       0x198(%rsp),%rax
063c70ba setbe     %al
063c70bd xor       $0xFF,%al
063c70bf test      $1,%al
063c70c1 jne       0x0000`0000`063C`7252
063c70c7 jmp       0x0000`0000`063C`7229
063c70cc mov       0x170(%rsp),%rdx
063c70d4 mov       0x178(%rsp),%rcx
063c70dc mov       0x190(%rsp),%rax
063c70e4 mov       %rax,0x128(%rsp)
063c70ec call      0x0000`0000`063C`7630
063c70f1 mov       %rax,0x130(%rsp)
063c70f9 mov       0x128(%rsp),%rax
063c7101 mov       0x130(%rsp),%rcx
063c7109 cmp       %rcx,%rax
063c710c ja        0x0000`0000`063C`7120
063c710e mov       0x198(%rsp),%rax
063c7116 mov       %rax,0x1D0(%rsp)
063c711e jmp       0x0000`0000`063C`7130
063c7120 mov       0x190(%rsp),%rax
063c7128 mov       %rax,0x1D0(%rsp)
063c7130 lea       0x1D0(%rsp),%rcx
063c7138 call      0x0000`0000`063C`9990
063c713d mov       %rax,0x118(%rsp)
063c7145 mov       %rdx,0x120(%rsp)
063c714d lea       0x1A0(%rsp),%rcx
063c7155 call      0x0000`0000`063C`9A80
063c715a mov       %rax,0x108(%rsp)
063c7162 mov       %rdx,0x110(%rsp)
063c716a lea       0x1B8(%rsp),%rcx
063c7172 call      0x0000`0000`063C`9A80
063c7177 mov       %rax,0xF8(%rsp)
063c717f mov       %rdx,0x100(%rsp)
063c7187 mov       0x100(%rsp),%rax
063c718f mov       0xF8(%rsp),%rcx
063c7197 mov       0x110(%rsp),%rdx
063c719f mov       0x108(%rsp),%r8
063c71a7 mov       0x120(%rsp),%r9
063c71af mov       0x118(%rsp),%r10
063c71b7 mov       %r10,0x208(%rsp)
063c71bf mov       %r9,0x210(%rsp)
063c71c7 mov       %r8,0x218(%rsp)
063c71cf mov       %rdx,0x220(%rsp)
063c71d7 mov       %rcx,0x228(%rsp)
063c71df mov       %rax,0x230(%rsp)
063c71e7 lea       0x208(%rsp),%r9
063c71ef lea       0x1D8(%rsp),%rcx
063c71f7 lea       0x63D`1968,%rdx
063c71fe mov       $3,%r8d
063c7204 movq      $3,0x20(%rsp)
063c720d call      0x0000`0000`063B`EFF0
063c7212 mov       0x180(%rsp),%rdx
063c721a lea       0x1D8(%rsp),%rcx
063c7222 call      0x0000`0000`063B`A100
063c7227 ud2
063c7229 mov       0x170(%rsp),%rdx
063c7231 mov       0x178(%rsp),%rcx
063c7239 mov       0x190(%rsp),%r8
063c7241 call      0x0000`0000`063C`76A0
063c7246 mov       %al,0xF7(%rsp)
063c724d jmp       0x0000`0000`063C`7388
063c7252 lea       0x190(%rsp),%rcx
063c725a call      0x0000`0000`063C`9990
063c725f mov       %rax,0xE0(%rsp)
063c7267 mov       %rdx,0xE8(%rsp)
063c726f lea       0x198(%rsp),%rcx
063c7277 call      0x0000`0000`063C`9990
063c727c mov       %rax,0xD0(%rsp)
063c7284 mov       %rdx,0xD8(%rsp)
063c728c lea       0x1A0(%rsp),%rcx
063c7294 call      0x0000`0000`063C`9A80
063c7299 mov       %rax,0xC0(%rsp)
063c72a1 mov       %rdx,0xC8(%rsp)
063c72a9 lea       0x1B8(%rsp),%rcx
063c72b1 call      0x0000`0000`063C`9A80
063c72b6 mov       %rax,0xB0(%rsp)
063c72be mov       %rdx,0xB8(%rsp)
063c72c6 mov       0xB8(%rsp),%rax
063c72ce mov       0xB0(%rsp),%rcx
063c72d6 mov       0xC8(%rsp),%rdx
063c72de mov       0xC0(%rsp),%r8
063c72e6 mov       0xD8(%rsp),%r9
063c72ee mov       0xD0(%rsp),%r10
063c72f6 mov       0xE8(%rsp),%r11
063c72fe mov       0xE0(%rsp),%rsi
063c7306 mov       %rsi,0x268(%rsp)
063c730e mov       %r11,0x270(%rsp)
063c7316 mov       %r10,0x278(%rsp)
063c731e mov       %r9,0x280(%rsp)
063c7326 mov       %r8,0x288(%rsp)
063c732e mov       %rdx,0x290(%rsp)
063c7336 mov       %rcx,0x298(%rsp)
063c733e mov       %rax,0x2A0(%rsp)
063c7346 lea       0x268(%rsp),%r9
063c734e lea       0x238(%rsp),%rcx
063c7356 lea       0x63D`19C0,%rdx
063c735d mov       $4,%r8d
063c7363 movq      $4,0x20(%rsp)
063c736c call      0x0000`0000`063B`EFF0
063c7371 mov       0x180(%rsp),%rdx
063c7379 lea       0x238(%rsp),%rcx
063c7381 call      0x0000`0000`063B`A100
063c7386 ud2
063c7388 mov       0xF7(%rsp),%al
063c738f xor       $0xFF,%al
063c7391 test      $1,%al
063c7393 jne       0x0000`0000`063C`73A7
063c7395 mov       0x198(%rsp),%rax
063c739d mov       %rax,0x2A8(%rsp)
063c73a5 jmp       0x0000`0000`063C`73B7
063c73a7 mov       0x190(%rsp),%rax
063c73af mov       %rax,0x2A8(%rsp)
063c73b7 mov       0x170(%rsp),%rdx
063c73bf mov       0x178(%rsp),%rcx
063c73c7 mov       0x2A8(%rsp),%r8
063c73cf call      0x0000`0000`063C`77A0
063c73d4 mov       %rax,0xA8(%rsp)
063c73dc mov       %rax,0x378(%rsp)
063c73e4 mov       0x180(%rsp),%r9
063c73ec mov       0x170(%rsp),%rdx
063c73f4 mov       0x178(%rsp),%rcx
063c73fc mov       0xA8(%rsp),%rax
063c7404 mov       %rax,0x2C8(%rsp)
063c740c mov       0x2C8(%rsp),%r8
063c7414 call      0x0000`0000`063C`5DD0
063c7419 mov       %rax,0x98(%rsp)
063c7421 mov       %rdx,0xA0(%rsp)
063c7429 mov       0xA0(%rsp),%rdx
063c7431 mov       0x98(%rsp),%rcx
063c7439 call      0x0000`0000`063C`7A10
063c743e mov       %rdx,0x2C0(%rsp)
063c7446 mov       %rax,0x2B8(%rsp)
063c744e lea       0x2B8(%rsp),%rcx
063c7456 call      0x0000`0000`063C`5AA0
063c745b mov       %eax,0x94(%rsp)
063c7462 mov       0x180(%rsp),%rdx
063c746a mov       0x94(%rsp),%ecx
063c7471 call      0x0000`0000`063B`9630
063c7476 mov       %eax,0x2B4(%rsp)
063c747d mov       0x2B4(%rsp),%ecx
063c7484 call      0x0000`0000`063B`81F0
063c7489 mov       %rax,0x88(%rsp)
063c7491 mov       0x88(%rsp),%rcx
063c7499 mov       0xA8(%rsp),%rax
063c74a1 add       %rcx,%rax
063c74a4 mov       %rax,0x80(%rsp)
063c74ac setb      %al
063c74af test      $1,%al
063c74b1 jne       0x0000`0000`063C`74EC
063c74b3 mov       0x80(%rsp),%rax
063c74bb mov       0xA8(%rsp),%rcx
063c74c3 mov       %rcx,0x2D0(%rsp)
063c74cb mov       %rax,0x2D8(%rsp)
063c74d3 lea       0x2A8(%rsp),%rcx
063c74db call      0x0000`0000`063C`9990
063c74e0 mov       %rax,0x70(%rsp)
063c74e5 mov       %rdx,0x78(%rsp)
063c74ea jmp       0x0000`0000`063C`7507
063c74ec mov       0x180(%rsp),%r8
063c74f4 lea       0x63C`F3E0,%rcx
063c74fb mov       $0x1C,%edx
063c7500 call      0x0000`0000`063B`9FF0
063c7505 ud2
063c7507 lea       0x2B4(%rsp),%rcx
063c750f call      0x0000`0000`063C`9AE0
063c7514 mov       %rax,0x60(%rsp)
063c7519 mov       %rdx,0x68(%rsp)
063c751e lea       0x2D0(%rsp),%rcx
063c7526 call      0x0000`0000`063C`9AB0
063c752b mov       %rax,0x50(%rsp)
063c7530 mov       %rdx,0x58(%rsp)
063c7535 lea       0x1A0(%rsp),%rcx
063c753d call      0x0000`0000`063C`9A80
063c7542 mov       %rax,0x40(%rsp)
063c7547 mov       %rdx,0x48(%rsp)
063c754c lea       0x1B8(%rsp),%rcx
063c7554 call      0x0000`0000`063C`9A80
063c7559 mov       %rax,0x30(%rsp)
063c755e mov       %rdx,0x38(%rsp)
063c7563 mov       0x38(%rsp),%rax
063c7568 mov       0x30(%rsp),%rcx
063c756d mov       0x48(%rsp),%rdx
063c7572 mov       0x40(%rsp),%r8
063c7577 mov       0x58(%rsp),%r9
063c757c mov       0x50(%rsp),%r10
063c7581 mov       0x68(%rsp),%r11
063c7586 mov       0x60(%rsp),%rsi
063c758b mov       0x78(%rsp),%rdi
063c7590 mov       0x70(%rsp),%rbx
063c7595 mov       %rbx,0x310(%rsp)
063c759d mov       %rdi,0x318(%rsp)
063c75a5 mov       %rsi,0x320(%rsp)
063c75ad mov       %r11,0x328(%rsp)
063c75b5 mov       %r10,0x330(%rsp)
063c75bd mov       %r9,0x338(%rsp)
063c75c5 mov       %r8,0x340(%rsp)
063c75cd mov       %rdx,0x348(%rsp)
063c75d5 mov       %rcx,0x350(%rsp)
063c75dd mov       %rax,0x358(%rsp)
063c75e5 lea       0x310(%rsp),%r9
063c75ed lea       0x2E0(%rsp),%rcx
063c75f5 lea       0x63D`1A38,%rdx
063c75fc mov       $5,%r8d
063c7602 movq      $5,0x20(%rsp)
063c760b call      0x0000`0000`063B`EFF0
063c7610 mov       0x180(%rsp),%rdx
063c7618 lea       0x2E0(%rsp),%rcx
063c7620 call      0x0000`0000`063B`A100
063c7625 ud2

core::str::impl$0::len:
063c7630 sub       $0x38,%rsp
063c7634 mov       %rcx,8(%rsp)
063c7639 mov       %rdx,0x10(%rsp)
063c763e mov       %rcx,0x18(%rsp)
063c7643 mov       %rdx,0x20(%rsp)
063c7648 mov       %rcx,0x28(%rsp)
063c764d mov       %rdx,0x30(%rsp)
063c7652 mov       0x28(%rsp),%rax
063c7657 mov       0x30(%rsp),%rax
063c765c mov       %rax,(%rsp)
063c7660 mov       (%rsp),%rax
063c7664 add       $0x38,%rsp
063c7668 ret

core::str::impl$0::is_empty:
063c7670 sub       $0x38,%rsp
063c7674 mov       %rcx,0x28(%rsp)
063c7679 mov       %rdx,0x30(%rsp)
063c767e call      0x0000`0000`063C`7630
063c7683 mov       %rax,0x20(%rsp)
063c7688 mov       0x20(%rsp),%rax
063c768d cmp       $0,%rax
063c7691 sete      %al
063c7694 and       $1,%al
063c7696 movzbl    %al,%eax
063c7699 add       $0x38,%rsp
063c769d ret

core::str::impl$0::is_char_boundary:
063c76a0 sub       $0xA8,%rsp
063c76a7 mov       %r8,0x40(%rsp)
063c76ac mov       %rdx,0x48(%rsp)
063c76b1 mov       %rcx,0x50(%rsp)
063c76b6 mov       %rcx,0x68(%rsp)
063c76bb mov       %rdx,0x70(%rsp)
063c76c0 mov       %r8,0x78(%rsp)
063c76c5 cmp       $0,%r8
063c76c9 jne       0x0000`0000`063C`76D5
063c76cb movb      $1,0x5F(%rsp)
063c76d0 jmp       0x0000`0000`063C`7777
063c76d5 mov       0x48(%rsp),%rax
063c76da mov       0x50(%rsp),%rcx
063c76df mov       %rcx,0x88(%rsp)
063c76e7 mov       %rax,0x90(%rsp)
063c76ef mov       %rcx,0x98(%rsp)
063c76f7 mov       %rax,0xA0(%rsp)
063c76ff mov       0x98(%rsp),%rax
063c7707 mov       %rax,0x30(%rsp)
063c770c mov       0xA0(%rsp),%rax
063c7714 mov       %rax,0x38(%rsp)
063c7719 mov       0x40(%rsp),%r8
063c771e mov       0x38(%rsp),%rdx
063c7723 mov       0x30(%rsp),%rcx
063c7728 call      0x0000`0000`063C`3A50
063c772d mov       %rax,0x60(%rsp)
063c7732 mov       0x60(%rsp),%rax
063c7737 test      %rax,%rax
063c773a setne     %al
063c773d movzbl    %al,%eax
063c7740 je        0x0000`0000`063C`7748
063c7742 jmp       0x0000`0000`063C`7744
063c7744 jmp       0x0000`0000`063C`775E
063c7746 ud2
063c7748 mov       0x48(%rsp),%rdx
063c774d mov       0x50(%rsp),%rcx
063c7752 call      0x0000`0000`063C`7630
063c7757 mov       %rax,0x28(%rsp)
063c775c jmp       0x0000`0000`063C`7788
063c775e mov       0x60(%rsp),%rax
063c7763 mov       (%rax),%cl
063c7765 mov       %cl,0x87(%rsp)
063c776c call      0x0000`0000`063B`5850
063c7771 and       $1,%al
063c7773 mov       %al,0x5F(%rsp)
063c7777 mov       0x5F(%rsp),%al
063c777b and       $1,%al
063c777d movzbl    %al,%eax
063c7780 add       $0xA8,%rsp
063c7787 ret
063c7788 mov       0x40(%rsp),%rax
063c778d mov       0x28(%rsp),%rcx
063c7792 cmp       %rcx,%rax
063c7795 sete      %al
063c7798 and       $1,%al
063c779a mov       %al,0x5F(%rsp)
063c779e jmp       0x0000`0000`063C`7777

core::str::impl$0::floor_char_boundary:
063c77a0 sub       $0x128,%rsp
063c77a7 mov       %r8,0x70(%rsp)
063c77ac mov       %rdx,0x78(%rsp)
063c77b1 mov       %rcx,0x80(%rsp)
063c77b9 mov       %rcx,0xC0(%rsp)
063c77c1 mov       %rdx,0xC8(%rsp)
063c77c9 mov       %r8,0xD0(%rsp)
063c77d1 call      0x0000`0000`063C`7630
063c77d6 mov       %rax,0x88(%rsp)
063c77de mov       0x70(%rsp),%rax
063c77e3 mov       0x88(%rsp),%rcx
063c77eb cmp       %rcx,%rax
063c77ee jae       0x0000`0000`063C`7832
063c77f0 mov       0x70(%rsp),%rax
063c77f5 mov       %rax,0x110(%rsp)
063c77fd movq      $3,0x118(%rsp)
063c7809 xor       %ecx,%ecx
063c780b sub       $3,%rax
063c780f cmovb     %rcx,%rax
063c7813 mov       %rax,0x120(%rsp)
063c781b mov       0x120(%rsp),%rax
063c7823 mov       %rax,0x68(%rsp)
063c7828 mov       %rax,0xD8(%rsp)
063c7830 jmp       0x0000`0000`063C`785C
063c7832 mov       0x78(%rsp),%rdx
063c7837 mov       0x80(%rsp),%rcx
063c783f call      0x0000`0000`063C`7630
063c7844 mov       %rax,0x90(%rsp)
063c784c mov       0x90(%rsp),%rax
063c7854 add       $0x128,%rsp
063c785b ret
063c785c mov       0x78(%rsp),%rax
063c7861 mov       0x80(%rsp),%rcx
063c7869 mov       %rcx,0xF0(%rsp)
063c7871 mov       %rax,0xF8(%rsp)
063c7879 mov       %rcx,0x100(%rsp)
063c7881 mov       %rax,0x108(%rsp)
063c7889 mov       0x100(%rsp),%rax
063c7891 mov       %rax,0x58(%rsp)
063c7896 mov       0x108(%rsp),%rax
063c789e mov       %rax,0x60(%rsp)
063c78a3 mov       0x70(%rsp),%r8
063c78a8 mov       0x68(%rsp),%rdx
063c78ad lea       0xA8(%rsp),%rcx
063c78b5 call      0x0000`0000`063B`7B00
063c78ba mov       0x60(%rsp),%rdx
063c78bf mov       0x58(%rsp),%rcx
063c78c4 lea       0xA8(%rsp),%r8
063c78cc lea       0x63D`1B00,%r9
063c78d3 call      0x0000`0000`063C`1A10
063c78d8 mov       %rax,0x48(%rsp)
063c78dd mov       %rdx,0x50(%rsp)
063c78e2 mov       0x50(%rsp),%rdx
063c78e7 mov       0x48(%rsp),%rcx
063c78ec call      0x0000`0000`063C`3E90
063c78f1 mov       %rdx,0xA0(%rsp)
063c78f9 mov       %rax,0x98(%rsp)
063c7901 lea       0x98(%rsp),%rcx
063c7909 call      0x0000`0000`063C`A930
063c790e mov       %rax,0x38(%rsp)
063c7913 mov       %rdx,0x40(%rsp)
063c7918 mov       %rax,0xE0(%rsp)
063c7920 mov       %rdx,0xE8(%rsp)
063c7928 mov       0x40(%rsp),%rdx
063c792d mov       0x38(%rsp),%rcx
063c7932 lea       0x63D`1B18,%r8
063c7939 call      0x0000`0000`063B`9900
063c793e mov       %rax,0x30(%rsp)
063c7943 mov       0x30(%rsp),%rcx
063c7948 mov       0x68(%rsp),%rax
063c794d add       %rcx,%rax
063c7950 mov       %rax,0x28(%rsp)
063c7955 setb      %al
063c7958 test      $1,%al
063c795a jne       0x0000`0000`063C`796E
063c795c mov       0x28(%rsp),%rax
063c7961 mov       %rax,0x90(%rsp)
063c7969 jmp       0x0000`0000`063C`784C
063c796e lea       0x63C`F3E0,%rcx
063c7975 lea       0x63D`1B30,%r8
063c797c mov       $0x1C,%edx
063c7981 call      0x0000`0000`063B`9FF0
063c7986 ud2

core::str::impl$0::floor_char_boundary::closure$0:
063c7990 sub       $0x38,%rsp
063c7994 mov       %rcx,0x28(%rsp)
063c7999 mov       %rdx,0x30(%rsp)
063c799e mov       (%rdx),%cl
063c79a0 call      0x0000`0000`063B`5850
063c79a5 mov       %al,0x27(%rsp)
063c79a9 mov       0x27(%rsp),%al
063c79ad and       $1,%al
063c79af movzbl    %al,%eax
063c79b2 add       $0x38,%rsp
063c79b6 ret

core::str::impl$0::get<core::ops::range::RangeTo<usize> >:
063c79c0 sub       $0x58,%rsp
063c79c4 mov       %r8,0x28(%rsp)
063c79c9 mov       %rdx,%r8
063c79cc mov       %rcx,%rdx
063c79cf mov       0x28(%rsp),%rcx
063c79d4 mov       %rdx,0x40(%rsp)
063c79d9 mov       %r8,0x48(%rsp)
063c79de mov       %rcx,0x50(%rsp)
063c79e3 call      0x0000`0000`063C`61D0
063c79e8 mov       %rax,0x30(%rsp)
063c79ed mov       %rdx,0x38(%rsp)
063c79f2 mov       0x38(%rsp),%rdx
063c79f7 mov       0x30(%rsp),%rax
063c79fc add       $0x58,%rsp
063c7a00 ret

core::str::impl$0::chars:
063c7a10 sub       $0x88,%rsp
063c7a17 mov       %rcx,0x58(%rsp)
063c7a1c mov       %rdx,0x60(%rsp)
063c7a21 mov       %rcx,0x68(%rsp)
063c7a26 mov       %rdx,0x70(%rsp)
063c7a2b mov       %rcx,0x78(%rsp)
063c7a30 mov       %rdx,0x80(%rsp)
063c7a38 mov       0x78(%rsp),%rax
063c7a3d mov       %rax,0x38(%rsp)
063c7a42 mov       0x80(%rsp),%rax
063c7a4a mov       %rax,0x40(%rsp)
063c7a4f mov       0x40(%rsp),%rdx
063c7a54 mov       0x38(%rsp),%rcx
063c7a59 call      0x0000`0000`063C`3E90
063c7a5e mov       %rax,0x28(%rsp)
063c7a63 mov       %rdx,0x30(%rsp)
063c7a68 mov       0x30(%rsp),%rax
063c7a6d mov       0x28(%rsp),%rcx
063c7a72 mov       %rcx,0x48(%rsp)
063c7a77 mov       %rax,0x50(%rsp)
063c7a7c mov       0x48(%rsp),%rax
063c7a81 mov       0x50(%rsp),%rdx
063c7a86 add       $0x88,%rsp
063c7a8d ret

core::str::impl$0::char_indices:
063c7a90 sub       $0x68,%rsp
063c7a94 mov       %r8,0x28(%rsp)
063c7a99 mov       %rdx,%rax
063c7a9c mov       0x28(%rsp),%rdx
063c7aa1 mov       %rax,0x30(%rsp)
063c7aa6 mov       %rcx,%rax
063c7aa9 mov       0x30(%rsp),%rcx
063c7aae mov       %rax,0x38(%rsp)
063c7ab3 mov       %rax,0x40(%rsp)
063c7ab8 mov       %rcx,0x58(%rsp)
063c7abd mov       %rdx,0x60(%rsp)
063c7ac2 call      0x0000`0000`063C`7A10
063c7ac7 mov       %rax,0x48(%rsp)
063c7acc mov       %rdx,0x50(%rsp)
063c7ad1 mov       0x40(%rsp),%rax
063c7ad6 mov       0x38(%rsp),%rcx
063c7adb mov       0x50(%rsp),%rdx
063c7ae0 mov       0x48(%rsp),%r8
063c7ae5 movq      $0,(%rcx)
063c7aec mov       %r8,8(%rcx)
063c7af0 mov       %rdx,0x10(%rcx)
063c7af4 add       $0x68,%rsp
063c7af8 ret

core::str::impl$0::find<char>:
063c7b00 sub       $0x98,%rsp
063c7b07 mov       %r8d,0x34(%rsp)
063c7b0c mov       %rdx,%r9
063c7b0f mov       0x34(%rsp),%edx
063c7b13 mov       %rcx,%r8
063c7b16 mov       %r8,0x80(%rsp)
063c7b1e mov       %r9,0x88(%rsp)
063c7b26 mov       %edx,0x94(%rsp)
063c7b2d lea       0x50(%rsp),%rcx
063c7b32 call      0x0000`0000`063C`6DE0
063c7b37 lea       0x38(%rsp),%rcx
063c7b3c lea       0x50(%rsp),%rdx
063c7b41 call      0x0000`0000`063C`6930
063c7b46 lea       0x38(%rsp),%rcx
063c7b4b call      0x0000`0000`063B`9970
063c7b50 mov       %rax,0x20(%rsp)
063c7b55 mov       %rdx,0x28(%rsp)
063c7b5a jmp       0x0000`0000`063C`7B5C
063c7b5c mov       0x28(%rsp),%rdx
063c7b61 mov       0x20(%rsp),%rax
063c7b66 add       $0x98,%rsp
063c7b6d ret

core::str::impl$0::find::closure$0<char>:
063c7b70 sub       $0x20,%rsp
063c7b74 mov       %rcx,%rax
063c7b77 mov       %rax,8(%rsp)
063c7b7c mov       %rdx,0x10(%rsp)
063c7b81 mov       %rax,0x18(%rsp)
063c7b86 add       $0x20,%rsp
063c7b8a ret

core::unicode::printable::check:
063c7b90 sub       $0x198,%rsp
063c7b97 mov       %r9,0x98(%rsp)
063c7b9f mov       %r8,%r10
063c7ba2 mov       %r10,0xA0(%rsp)
063c7baa mov       %rdx,%r11
063c7bad mov       %r11,0xA8(%rsp)
063c7bb5 mov       %cx,0xB6(%rsp)
063c7bbd mov       0x1D0(%rsp),%rax
063c7bc5 mov       %rax,0xB8(%rsp)
063c7bcd mov       0x1C8(%rsp),%rdx
063c7bd5 mov       %rdx,0xC0(%rsp)
063c7bdd mov       0x1C0(%rsp),%r8
063c7be5 mov       %r8,0xC8(%rsp)
063c7bed mov       %cx,0x14E(%rsp)
063c7bf5 mov       %r11,0x150(%rsp)
063c7bfd mov       %r10,0x158(%rsp)
063c7c05 mov       %r9,0x160(%rsp)
063c7c0d mov       %r8,0x168(%rsp)
063c7c15 mov       %rdx,0x170(%rsp)
063c7c1d mov       %rax,0x178(%rsp)
063c7c25 shr       $8,%cx
063c7c29 mov       %cx,0xD4(%rsp)
063c7c31 mov       0xA0(%rsp),%rdx
063c7c39 mov       0xA8(%rsp),%rcx
063c7c41 mov       0xD4(%rsp),%ax
063c7c49 mov       %al,0x87(%rsp)
063c7c50 mov       %al,0x185(%rsp)
063c7c57 movq      $0,0xD8(%rsp)
063c7c63 call      0x0000`0000`063C`2C60
063c7c68 mov       %rax,0x88(%rsp)
063c7c70 mov       %rdx,0x90(%rsp)
063c7c78 mov       0x90(%rsp),%rax
063c7c80 mov       0x88(%rsp),%rcx
063c7c88 mov       %rcx,0xE0(%rsp)
063c7c90 mov       %rax,0xE8(%rsp)
063c7c98 lea       0xE0(%rsp),%rcx
063c7ca0 call      0x0000`0000`063C`A0F0
063c7ca5 mov       %rax,0xF0(%rsp)
063c7cad mov       0xF0(%rsp),%rax
063c7cb5 test      %rax,%rax
063c7cb8 setne     %al
063c7cbb movzbl    %al,%eax
063c7cbe je        0x0000`0000`063C`7CC6
063c7cc0 jmp       0x0000`0000`063C`7CC2
063c7cc2 jmp       0x0000`0000`063C`7CFC
063c7cc4 ud2
063c7cc6 mov       0xB8(%rsp),%rdx
063c7cce mov       0xC0(%rsp),%rcx
063c7cd6 mov       0xB6(%rsp),%ax
063c7cde movzwl    %ax,%eax
063c7ce1 mov       %eax,0x124(%rsp)
063c7ce8 call      0x0000`0000`063C`3E90
063c7ced mov       %rax,0x70(%rsp)
063c7cf2 mov       %rdx,0x78(%rsp)
063c7cf7 jmp       0x0000`0000`063C`7E91
063c7cfc mov       0xF0(%rsp),%rax
063c7d04 mov       (%rax),%al
063c7d06 mov       %al,0x67(%rsp)
063c7d0a mov       %al,0x186(%rsp)
063c7d11 mov       0xF0(%rsp),%rax
063c7d19 mov       1(%rax),%cl
063c7d1c mov       %cl,0x187(%rsp)
063c7d23 mov       0xD8(%rsp),%rax
063c7d2b movzbl    %cl,%ecx
063c7d2e add       %rcx,%rax
063c7d31 mov       %rax,0x68(%rsp)
063c7d36 setb      %al
063c7d39 test      $1,%al
063c7d3b jne       0x0000`0000`063C`7D5B
063c7d3d mov       0x87(%rsp),%al
063c7d44 mov       0x67(%rsp),%cl
063c7d48 mov       0x68(%rsp),%rdx
063c7d4d mov       %rdx,0x188(%rsp)
063c7d55 cmp       %cl,%al
063c7d57 je        0x0000`0000`063C`7D8D
063c7d59 jmp       0x0000`0000`063C`7D75
063c7d5b lea       0x63C`F3E0,%rcx
063c7d62 lea       0x63D`1BC8,%r8
063c7d69 mov       $0x1C,%edx
063c7d6e call      0x0000`0000`063B`9FF0
063c7d73 ud2
063c7d75 mov       0x87(%rsp),%al
063c7d7c mov       0x67(%rsp),%cl
063c7d80 cmp       %cl,%al
063c7d82 jb        0x0000`0000`063C`7CC6
063c7d88 jmp       0x0000`0000`063C`7E46
063c7d8d mov       0xC8(%rsp),%rdx
063c7d95 mov       0x98(%rsp),%rcx
063c7d9d mov       0x68(%rsp),%rax
063c7da2 mov       0xD8(%rsp),%r8
063c7daa mov       %r8,0xF8(%rsp)
063c7db2 mov       %rax,0x100(%rsp)
063c7dba mov       0xF8(%rsp),%r8
063c7dc2 mov       0x100(%rsp),%r9
063c7dca lea       0x63D`1BE0,%rax
063c7dd1 mov       %rax,0x20(%rsp)
063c7dd6 call      0x0000`0000`063C`1910
063c7ddb mov       %rax,0x50(%rsp)
063c7de0 mov       %rdx,0x58(%rsp)
063c7de5 mov       0x58(%rsp),%rdx
063c7dea mov       0x50(%rsp),%rcx
063c7def call      0x0000`0000`063C`2C30
063c7df4 mov       %rax,0x40(%rsp)
063c7df9 mov       %rdx,0x48(%rsp)
063c7dfe mov       0x48(%rsp),%rax
063c7e03 mov       0x40(%rsp),%rcx
063c7e08 mov       %rcx,0x108(%rsp)
063c7e10 mov       %rax,0x110(%rsp)
063c7e18 lea       0x108(%rsp),%rcx
063c7e20 call      0x0000`0000`063C`9D90
063c7e25 mov       %rax,0x118(%rsp)
063c7e2d mov       0x118(%rsp),%rax
063c7e35 test      %rax,%rax
063c7e38 setne     %al
063c7e3b movzbl    %al,%eax
063c7e3e je        0x0000`0000`063C`7E46
063c7e40 jmp       0x0000`0000`063C`7E42
063c7e42 jmp       0x0000`0000`063C`7E58
063c7e44 ud2
063c7e46 mov       0x68(%rsp),%rax
063c7e4b mov       %rax,0xD8(%rsp)
063c7e53 jmp       0x0000`0000`063C`7C98
063c7e58 mov       0xB6(%rsp),%cx
063c7e60 mov       0x118(%rsp),%rax
063c7e68 mov       (%rax),%al
063c7e6a mov       %al,0x196(%rsp)
063c7e71 cmp       %cl,%al
063c7e73 jne       0x0000`0000`063C`7E18
063c7e75 movb      $0,0xD7(%rsp)
063c7e7d mov       0xD7(%rsp),%al
063c7e84 and       $1,%al
063c7e86 movzbl    %al,%eax
063c7e89 add       $0x198,%rsp
063c7e90 ret
063c7e91 mov       0x78(%rsp),%rdx
063c7e96 mov       0x70(%rsp),%rcx
063c7e9b call      0x0000`0000`063B`94A0
063c7ea0 mov       %rdx,0x130(%rsp)
063c7ea8 mov       %rax,0x128(%rsp)
063c7eb0 movb      $1,0x13F(%rsp)
063c7eb8 lea       0x128(%rsp),%rcx
063c7ec0 call      0x0000`0000`063B`8AD0
063c7ec5 mov       %dl,0x141(%rsp)
063c7ecc mov       %al,0x140(%rsp)
063c7ed3 mov       0x140(%rsp),%al
063c7eda and       $1,%al
063c7edc movzbl    %al,%eax
063c7edf cmp       $1,%rax
063c7ee3 jne       0x0000`0000`063C`7EFF
063c7ee5 mov       0x141(%rsp),%al
063c7eec mov       %al,0x3F(%rsp)
063c7ef0 mov       %al,0x197(%rsp)
063c7ef7 and       $0x80,%al
063c7ef9 cmp       $0,%al
063c7efb je        0x0000`0000`063C`7F14
063c7efd jmp       0x0000`0000`063C`7F24
063c7eff mov       0x13F(%rsp),%al
063c7f06 and       $1,%al
063c7f08 mov       %al,0xD7(%rsp)
063c7f0f jmp       0x0000`0000`063C`7E7D
063c7f14 mov       0x3F(%rsp),%al
063c7f18 movzbl    %al,%eax
063c7f1b mov       %eax,0x148(%rsp)
063c7f22 jmp       0x0000`0000`063C`7F78
063c7f24 mov       0x3F(%rsp),%al
063c7f28 and       $0x7F,%al
063c7f2a movzbl    %al,%eax
063c7f2d shl       $8,%eax
063c7f30 mov       %eax,0x38(%rsp)
063c7f34 lea       0x128(%rsp),%rcx
063c7f3c call      0x0000`0000`063B`8AD0
063c7f41 mov       %al,0x36(%rsp)
063c7f45 mov       %dl,0x37(%rsp)
063c7f49 mov       0x37(%rsp),%dl
063c7f4d mov       0x36(%rsp),%cl
063c7f51 and       $1,%cl
063c7f54 lea       0x63D`1BF8,%r8
063c7f5b call      0x0000`0000`063B`96D0
063c7f60 mov       %al,0x35(%rsp)
063c7f64 mov       0x38(%rsp),%eax
063c7f68 mov       0x35(%rsp),%cl
063c7f6c movzbl    %cl,%ecx
063c7f6f or        %ecx,%eax
063c7f71 mov       %eax,0x148(%rsp)
063c7f78 mov       0x148(%rsp),%ecx
063c7f7f mov       0x124(%rsp),%eax
063c7f86 sub       %ecx,%eax
063c7f88 mov       %eax,0x30(%rsp)
063c7f8c seto      %al
063c7f8f test      $1,%al
063c7f91 jne       0x0000`0000`063C`7FAE
063c7f93 mov       0x30(%rsp),%eax
063c7f97 mov       %eax,0x124(%rsp)
063c7f9e cmpl      $0,0x124(%rsp)
063c7fa6 jl        0x0000`0000`063C`7EFF
063c7fac jmp       0x0000`0000`063C`7FC8
063c7fae lea       0x63C`F3B0,%rcx
063c7fb5 lea       0x63D`1C10,%r8
063c7fbc mov       $0x21,%edx
063c7fc1 call      0x0000`0000`063B`9FF0
063c7fc6 ud2
063c7fc8 mov       0x13F(%rsp),%al
063c7fcf xor       $0xFF,%al
063c7fd1 and       $1,%al
063c7fd3 mov       %al,0x13F(%rsp)
063c7fda jmp       0x0000`0000`063C`7EB8

core::unicode::printable::is_printable:
063c7fe0 sub       $0x58,%rsp
063c7fe4 mov       %ecx,0x3C(%rsp)
063c7fe8 mov       %ecx,0x4C(%rsp)
063c7fec mov       %ecx,0x50(%rsp)
063c7ff0 mov       %cx,%ax
063c7ff3 mov       %ax,0x40(%rsp)
063c7ff8 mov       %ax,0x56(%rsp)
063c7ffd cmp       $0x1`0000,%ecx
063c8003 jb        0x0000`0000`063C`8012
063c8005 mov       0x3C(%rsp),%eax
063c8009 cmp       $0x2`0000,%eax
063c800e jb        0x0000`0000`063C`8072
063c8010 jmp       0x0000`0000`063C`8063
063c8012 mov       0x40(%rsp),%cx
063c8017 mov       0x63D`1C78,%rdx
063c801e mov       0x63D`1C80,%r8
063c8025 lea       0x63D`1C88,%r9
063c802c lea       0x63D`1DA8,%rax
063c8033 movq      $0x120,0x20(%rsp)
063c803c mov       %rax,0x28(%rsp)
063c8041 movq      $0x12F,0x30(%rsp)
063c804a call      0x0000`0000`063C`7B90
063c804f and       $1,%al
063c8051 mov       %al,0x43(%rsp)
063c8055 mov       0x43(%rsp),%al
063c8059 and       $1,%al
063c805b movzbl    %al,%eax
063c805e add       $0x58,%rsp
063c8062 ret
063c8063 mov       0x3C(%rsp),%ecx
063c8067 mov       $0x2`A6E0,%eax
063c806c cmp       %ecx,%eax
063c806e jbe       0x0000`0000`063C`80BE
063c8070 jmp       0x0000`0000`063C`80B7
063c8072 mov       0x40(%rsp),%cx
063c8077 mov       0x63D`1F30,%rdx
063c807e mov       0x63D`1F38,%r8
063c8085 lea       0x63D`1F40,%r9
063c808c lea       0x63D`2000,%rax
063c8093 movq      $0xC0,0x20(%rsp)
063c809c mov       %rax,0x28(%rsp)
063c80a1 movq      $0x1B6,0x30(%rsp)
063c80aa call      0x0000`0000`063C`7B90
063c80af and       $1,%al
063c80b1 mov       %al,0x43(%rsp)
063c80b5 jmp       0x0000`0000`063C`8055
063c80b7 movb      $0,0x44(%rsp)
063c80bc jmp       0x0000`0000`063C`80D0
063c80be mov       0x3C(%rsp),%eax
063c80c2 cmp       $0x2`A700,%eax
063c80c7 setb      %al
063c80ca and       $1,%al
063c80cc mov       %al,0x44(%rsp)
063c80d0 testb     $1,0x44(%rsp)
063c80d5 jne       0x0000`0000`063C`80E6
063c80d7 mov       0x3C(%rsp),%ecx
063c80db mov       $0x2`B739,%eax
063c80e0 cmp       %ecx,%eax
063c80e2 jbe       0x0000`0000`063C`80F7
063c80e4 jmp       0x0000`0000`063C`80F0
063c80e6 movb      $0,0x43(%rsp)
063c80eb jmp       0x0000`0000`063C`8055
063c80f0 movb      $0,0x45(%rsp)
063c80f5 jmp       0x0000`0000`063C`8109
063c80f7 mov       0x3C(%rsp),%eax
063c80fb cmp       $0x2`B740,%eax
063c8100 setb      %al
063c8103 and       $1,%al
063c8105 mov       %al,0x45(%rsp)
063c8109 testb     $1,0x45(%rsp)
063c810e jne       0x0000`0000`063C`811F
063c8110 mov       0x3C(%rsp),%ecx
063c8114 mov       $0x2`B81E,%eax
063c8119 cmp       %ecx,%eax
063c811b jbe       0x0000`0000`063C`8130
063c811d jmp       0x0000`0000`063C`8129
063c811f movb      $0,0x43(%rsp)
063c8124 jmp       0x0000`0000`063C`8055
063c8129 movb      $0,0x46(%rsp)
063c812e jmp       0x0000`0000`063C`8142
063c8130 mov       0x3C(%rsp),%eax
063c8134 cmp       $0x2`B820,%eax
063c8139 setb      %al
063c813c and       $1,%al
063c813e mov       %al,0x46(%rsp)
063c8142 testb     $1,0x46(%rsp)
063c8147 jne       0x0000`0000`063C`8158
063c8149 mov       0x3C(%rsp),%ecx
063c814d mov       $0x2`CEA2,%eax
063c8152 cmp       %ecx,%eax
063c8154 jbe       0x0000`0000`063C`8169
063c8156 jmp       0x0000`0000`063C`8162
063c8158 movb      $0,0x43(%rsp)
063c815d jmp       0x0000`0000`063C`8055
063c8162 movb      $0,0x47(%rsp)
063c8167 jmp       0x0000`0000`063C`817B
063c8169 mov       0x3C(%rsp),%eax
063c816d cmp       $0x2`CEB0,%eax
063c8172 setb      %al
063c8175 and       $1,%al
063c8177 mov       %al,0x47(%rsp)
063c817b testb     $1,0x47(%rsp)
063c8180 jne       0x0000`0000`063C`8191
063c8182 mov       0x3C(%rsp),%ecx
063c8186 mov       $0x2`EBE1,%eax
063c818b cmp       %ecx,%eax
063c818d jbe       0x0000`0000`063C`81A2
063c818f jmp       0x0000`0000`063C`819B
063c8191 movb      $0,0x43(%rsp)
063c8196 jmp       0x0000`0000`063C`8055
063c819b movb      $0,0x48(%rsp)
063c81a0 jmp       0x0000`0000`063C`81B4
063c81a2 mov       0x3C(%rsp),%eax
063c81a6 cmp       $0x2`F800,%eax
063c81ab setb      %al
063c81ae and       $1,%al
063c81b0 mov       %al,0x48(%rsp)
063c81b4 testb     $1,0x48(%rsp)
063c81b9 jne       0x0000`0000`063C`81CA
063c81bb mov       0x3C(%rsp),%ecx
063c81bf mov       $0x2`FA1E,%eax
063c81c4 cmp       %ecx,%eax
063c81c6 jbe       0x0000`0000`063C`81DB
063c81c8 jmp       0x0000`0000`063C`81D4
063c81ca movb      $0,0x43(%rsp)
063c81cf jmp       0x0000`0000`063C`8055
063c81d4 movb      $0,0x49(%rsp)
063c81d9 jmp       0x0000`0000`063C`81ED
063c81db mov       0x3C(%rsp),%eax
063c81df cmp       $0x3`0000,%eax
063c81e4 setb      %al
063c81e7 and       $1,%al
063c81e9 mov       %al,0x49(%rsp)
063c81ed testb     $1,0x49(%rsp)
063c81f2 jne       0x0000`0000`063C`8203
063c81f4 mov       0x3C(%rsp),%ecx
063c81f8 mov       $0x3`134B,%eax
063c81fd cmp       %ecx,%eax
063c81ff jbe       0x0000`0000`063C`8214
063c8201 jmp       0x0000`0000`063C`820D
063c8203 movb      $0,0x43(%rsp)
063c8208 jmp       0x0000`0000`063C`8055
063c820d movb      $0,0x4A(%rsp)
063c8212 jmp       0x0000`0000`063C`8226
063c8214 mov       0x3C(%rsp),%eax
063c8218 cmp       $0xE`0100,%eax
063c821d setb      %al
063c8220 and       $1,%al
063c8222 mov       %al,0x4A(%rsp)
063c8226 testb     $1,0x4A(%rsp)
063c822b jne       0x0000`0000`063C`823C
063c822d mov       0x3C(%rsp),%ecx
063c8231 mov       $0xE`01F0,%eax
063c8236 cmp       %ecx,%eax
063c8238 jbe       0x0000`0000`063C`824D
063c823a jmp       0x0000`0000`063C`8246
063c823c movb      $0,0x43(%rsp)
063c8241 jmp       0x0000`0000`063C`8055
063c8246 movb      $0,0x4B(%rsp)
063c824b jmp       0x0000`0000`063C`825F
063c824d mov       0x3C(%rsp),%eax
063c8251 cmp       $0x11`0000,%eax
063c8256 setb      %al
063c8259 and       $1,%al
063c825b mov       %al,0x4B(%rsp)
063c825f testb     $1,0x4B(%rsp)
063c8264 jne       0x0000`0000`063C`8270
063c8266 movb      $1,0x43(%rsp)
063c826b jmp       0x0000`0000`063C`8055
063c8270 movb      $0,0x43(%rsp)
063c8275 jmp       0x0000`0000`063C`8055

core::unicode::unicode_data::decode_prefix_sum:
063c8280 push      %rax
063c8281 mov       %ecx,%eax
063c8283 mov       %eax,4(%rsp)
063c8287 and       $0x1F`FFFF,%eax
063c828c pop       %rcx
063c828d ret

core::unicode::unicode_data::decode_length:
063c8290 push      %rax
063c8291 mov       %ecx,4(%rsp)
063c8295 shr       $0x15,%ecx
063c8298 mov       %ecx,(%rsp)
063c829b mov       (%rsp),%eax
063c829e mov       %eax,%eax
063c82a0 pop       %rcx
063c82a1 ret

core::unicode::unicode_data::skip_search::closure$0<32,707>:
063c82b0 sub       $0x48,%rsp
063c82b4 mov       %rdx,0x28(%rsp)
063c82b9 mov       %rcx,%rax
063c82bc mov       0x28(%rsp),%rcx
063c82c1 mov       %rax,0x38(%rsp)
063c82c6 mov       %rcx,0x40(%rsp)
063c82cb mov       $0xB,%edx
063c82d0 call      0x0000`0000`063C`8920
063c82d5 mov       %eax,0x34(%rsp)
063c82d9 mov       0x34(%rsp),%eax
063c82dd add       $0x48,%rsp
063c82e1 ret

core::unicode::unicode_data::skip_search::closure$1<32,707>:
063c82f0 sub       $0x48,%rsp
063c82f4 mov       %rdx,0x28(%rsp)
063c82f9 mov       %rcx,0x30(%rsp)
063c82fe mov       %rcx,0x38(%rsp)
063c8303 mov       %rdx,0x40(%rsp)
063c8308 cmp       $0x20,%rdx
063c830c setb      %al
063c830f test      $1,%al
063c8311 jne       0x0000`0000`063C`8315
063c8313 jmp       0x0000`0000`063C`832D
063c8315 mov       0x30(%rsp),%rax
063c831a mov       0x28(%rsp),%rcx
063c831f mov       (%rax,%rcx,4),%ecx
063c8322 call      0x0000`0000`063C`8280
063c8327 mov       %eax,0x24(%rsp)
063c832b jmp       0x0000`0000`063C`8345
063c832d mov       0x28(%rsp),%rcx
063c8332 lea       0x63D`2330,%r8
063c8339 mov       $0x20,%edx
063c833e call      0x0000`0000`063B`A050
063c8343 ud2
063c8345 mov       0x24(%rsp),%eax
063c8349 add       $0x48,%rsp
063c834d ret

core::num::impl$11::checked_sub:
063c8350 sub       $0x88,%rsp
063c8357 mov       %rcx,0x28(%rsp)
063c835c mov       %rdx,0x30(%rsp)
063c8361 mov       %rcx,0x58(%rsp)
063c8366 mov       %rdx,0x60(%rsp)
063c836b sub       %rdx,%rcx
063c836e mov       %rcx,0x68(%rsp)
063c8373 setb      0x70(%rsp)
063c8378 mov       0x68(%rsp),%rcx
063c837d mov       0x70(%rsp),%al
063c8381 mov       %rcx,0x78(%rsp)
063c8386 mov       %al,0x87(%rsp)
063c838d mov       %rcx,0x48(%rsp)
063c8392 mov       %al,0x50(%rsp)
063c8396 mov       0x48(%rsp),%rax
063c839b mov       %rax,8(%rsp)
063c83a0 mov       0x50(%rsp),%al
063c83a4 mov       %al,0x17(%rsp)
063c83a8 mov       0x17(%rsp),%al
063c83ac mov       8(%rsp),%rcx
063c83b1 mov       %rcx,0x38(%rsp)
063c83b6 mov       %al,%cl
063c83b8 and       $1,%cl
063c83bb mov       %cl,0x46(%rsp)
063c83bf and       $1,%al
063c83c1 mov       %al,0x47(%rsp)
063c83c5 mov       0x47(%rsp),%al
063c83c9 mov       %al,7(%rsp)
063c83cd mov       7(%rsp),%al
063c83d1 test      $1,%al
063c83d3 jne       0x0000`0000`063C`83EC
063c83d5 jmp       0x0000`0000`063C`83D7
063c83d7 mov       8(%rsp),%rax
063c83dc mov       %rax,0x20(%rsp)
063c83e1 movq      $1,0x18(%rsp)
063c83ea jmp       0x0000`0000`063C`83F5
063c83ec movq      $0,0x18(%rsp)
063c83f5 mov       0x18(%rsp),%rax
063c83fa mov       0x20(%rsp),%rdx
063c83ff add       $0x88,%rsp
063c8406 ret

core::num::impl$11::checked_mul:
063c8410 sub       $0x88,%rsp
063c8417 mov       %rcx,%rax
063c841a mov       %rax,0x28(%rsp)
063c841f mov       %rdx,0x30(%rsp)
063c8424 mov       %rax,0x58(%rsp)
063c8429 mov       %rdx,0x60(%rsp)
063c842e mul       %rdx
063c8431 mov       %rax,0x68(%rsp)
063c8436 seto      0x70(%rsp)
063c843b mov       0x68(%rsp),%rcx
063c8440 mov       0x70(%rsp),%al
063c8444 mov       %rcx,0x78(%rsp)
063c8449 mov       %al,0x87(%rsp)
063c8450 mov       %rcx,0x48(%rsp)
063c8455 mov       %al,0x50(%rsp)
063c8459 mov       0x48(%rsp),%rax
063c845e mov       %rax,8(%rsp)
063c8463 mov       0x50(%rsp),%al
063c8467 mov       %al,0x17(%rsp)
063c846b mov       0x17(%rsp),%al
063c846f mov       8(%rsp),%rcx
063c8474 mov       %rcx,0x38(%rsp)
063c8479 mov       %al,%cl
063c847b and       $1,%cl
063c847e mov       %cl,0x46(%rsp)
063c8482 and       $1,%al
063c8484 mov       %al,0x47(%rsp)
063c8488 mov       0x47(%rsp),%al
063c848c mov       %al,7(%rsp)
063c8490 mov       7(%rsp),%al
063c8494 test      $1,%al
063c8496 jne       0x0000`0000`063C`84AF
063c8498 jmp       0x0000`0000`063C`849A
063c849a mov       8(%rsp),%rax
063c849f mov       %rax,0x20(%rsp)
063c84a4 movq      $1,0x18(%rsp)
063c84ad jmp       0x0000`0000`063C`84B8
063c84af movq      $0,0x18(%rsp)
063c84b8 mov       0x18(%rsp),%rax
063c84bd mov       0x20(%rsp),%rdx
063c84c2 add       $0x88,%rsp
063c84c9 ret

core::num::impl$11::saturating_mul:
063c84d0 sub       $0x58,%rsp
063c84d4 mov       %rcx,0x40(%rsp)
063c84d9 mov       %rdx,0x48(%rsp)
063c84de call      0x0000`0000`063C`8410
063c84e3 mov       %rdx,0x38(%rsp)
063c84e8 mov       %rax,0x30(%rsp)
063c84ed mov       0x30(%rsp),%rax
063c84f2 test      %rax,%rax
063c84f5 je        0x0000`0000`063C`84FD
063c84f7 jmp       0x0000`0000`063C`84F9
063c84f9 jmp       0x0000`0000`063C`8508
063c84fb ud2
063c84fd movq      $0xFFFF`FFFF`FFFF`FFFF,0x28(%rsp)
063c8506 jmp       0x0000`0000`063C`8517
063c8508 mov       0x38(%rsp),%rax
063c850d mov       %rax,0x50(%rsp)
063c8512 mov       %rax,0x28(%rsp)
063c8517 mov       0x28(%rsp),%rax
063c851c add       $0x58,%rsp
063c8520 ret

core::clone::impls::impl$5::clone:
063c8530 push      %rax
063c8531 mov       %rcx,(%rsp)
063c8535 mov       (%rcx),%rax
063c8538 pop       %rcx
063c8539 ret

core::clone::impls::impl$6::clone:
063c8540 push      %rax
063c8541 mov       %rcx,(%rsp)
063c8545 mov       (%rcx),%al
063c8547 pop       %rcx
063c8548 ret

core::cmp::impl$10::eq:
063c8550 sub       $0x20,%rsp
063c8554 mov       %rcx,8(%rsp)
063c8559 mov       %rdx,0x10(%rsp)
063c855e mov       (%rcx),%al
063c8560 mov       %al,0x1E(%rsp)
063c8564 mov       (%rdx),%cl
063c8566 mov       %cl,0x1F(%rsp)
063c856a cmp       %cl,%al
063c856c je        0x0000`0000`063C`8575
063c856e movb      $0,7(%rsp)
063c8573 jmp       0x0000`0000`063C`857A
063c8575 movb      $1,7(%rsp)
063c857a mov       7(%rsp),%al
063c857e and       $1,%al
063c8580 movzbl    %al,%eax
063c8583 add       $0x20,%rsp
063c8587 ret

core::cmp::impls::impl$21::eq:
063c8590 sub       $0x10,%rsp
063c8594 mov       %rcx,(%rsp)
063c8598 mov       %rdx,8(%rsp)
063c859d mov       (%rcx),%rax
063c85a0 cmp       (%rdx),%rax
063c85a3 sete      %al
063c85a6 and       $1,%al
063c85a8 movzbl    %al,%eax
063c85ab add       $0x10,%rsp
063c85af ret

core::cmp::impls::impl$24::eq:
063c85b0 sub       $0x10,%rsp
063c85b4 mov       %rcx,(%rsp)
063c85b8 mov       %rdx,8(%rsp)
063c85bd mov       (%rcx),%eax
063c85bf cmp       (%rdx),%eax
063c85c1 sete      %al
063c85c4 and       $1,%al
063c85c6 movzbl    %al,%eax
063c85c9 add       $0x10,%rsp
063c85cd ret

core::cmp::impls::impl$54::lt:
063c85d0 sub       $0x10,%rsp
063c85d4 mov       %rcx,(%rsp)
063c85d8 mov       %rdx,8(%rsp)
063c85dd mov       (%rcx),%rax
063c85e0 cmp       (%rdx),%rax
063c85e3 setb      %al
063c85e6 and       $1,%al
063c85e8 movzbl    %al,%eax
063c85eb add       $0x10,%rsp
063c85ef ret

core::cmp::impls::impl$54::ge:
063c85f0 sub       $0x10,%rsp
063c85f4 mov       %rcx,(%rsp)
063c85f8 mov       %rdx,8(%rsp)
063c85fd mov       (%rcx),%rax
063c8600 cmp       (%rdx),%rax
063c8603 setae     %al
063c8606 and       $1,%al
063c8608 movzbl    %al,%eax
063c860b add       $0x10,%rsp
063c860f ret

core::cmp::impls::impl$55::cmp:
063c8610 sub       $0x28,%rsp
063c8614 mov       %rdx,(%rsp)
063c8618 mov       %rcx,8(%rsp)
063c861d mov       %rcx,0x18(%rsp)
063c8622 mov       %rdx,0x20(%rsp)
063c8627 mov       (%rcx),%rax
063c862a cmp       (%rdx),%rax
063c862d jb        0x0000`0000`063C`8642
063c862f mov       (%rsp),%rcx
063c8633 mov       8(%rsp),%rax
063c8638 mov       (%rax),%rax
063c863b cmp       (%rcx),%rax
063c863e je        0x0000`0000`063C`8657
063c8640 jmp       0x0000`0000`063C`8650
063c8642 movb      $0xFF,0x17(%rsp)
063c8647 mov       0x17(%rsp),%al
063c864b add       $0x28,%rsp
063c864f ret
063c8650 movb      $1,0x17(%rsp)
063c8655 jmp       0x0000`0000`063C`8647
063c8657 movb      $0,0x17(%rsp)
063c865c jmp       0x0000`0000`063C`8647

core::cmp::impls::impl$60::ge:
063c8660 sub       $0x10,%rsp
063c8664 mov       %rcx,(%rsp)
063c8668 mov       %rdx,8(%rsp)
063c866d mov       (%rcx),%eax
063c866f cmp       (%rdx),%eax
063c8671 setae     %al
063c8674 and       $1,%al
063c8676 movzbl    %al,%eax
063c8679 add       $0x10,%rsp
063c867d ret

core::cmp::impls::impl$61::cmp:
063c8680 sub       $0x28,%rsp
063c8684 mov       %rdx,(%rsp)
063c8688 mov       %rcx,8(%rsp)
063c868d mov       %rcx,0x18(%rsp)
063c8692 mov       %rdx,0x20(%rsp)
063c8697 mov       (%rcx),%eax
063c8699 cmp       (%rdx),%eax
063c869b jb        0x0000`0000`063C`86AE
063c869d mov       (%rsp),%rcx
063c86a1 mov       8(%rsp),%rax
063c86a6 mov       (%rax),%eax
063c86a8 cmp       (%rcx),%eax
063c86aa je        0x0000`0000`063C`86C3
063c86ac jmp       0x0000`0000`063C`86BC
063c86ae movb      $0xFF,0x17(%rsp)
063c86b3 mov       0x17(%rsp),%al
063c86b7 add       $0x28,%rsp
063c86bb ret
063c86bc movb      $1,0x17(%rsp)
063c86c1 jmp       0x0000`0000`063C`86B3
063c86c3 movb      $0,0x17(%rsp)
063c86c8 jmp       0x0000`0000`063C`86B3

core::ops::arith::impl$56::sub:
063c86d0 sub       $0x38,%rsp
063c86d4 mov       %rcx,0x28(%rsp)
063c86d9 mov       %rdx,0x30(%rsp)
063c86de sub       %rdx,%rcx
063c86e1 mov       %rcx,0x20(%rsp)
063c86e6 setb      %al
063c86e9 test      $1,%al
063c86eb jne       0x0000`0000`063C`86F7
063c86ed mov       0x20(%rsp),%rax
063c86f2 add       $0x38,%rsp
063c86f6 ret
063c86f7 lea       0x63C`F3B0,%rcx
063c86fe lea       0x63D`23C0,%r8
063c8705 mov       $0x21,%edx
063c870a call      0x0000`0000`063B`9FF0
063c870f ud2

core::ops::arith::impl$59::sub:
063c8720 sub       $0x38,%rsp
063c8724 mov       %ecx,0x30(%rsp)
063c8728 mov       %edx,0x34(%rsp)
063c872c sub       %edx,%ecx
063c872e mov       %ecx,0x2C(%rsp)
063c8732 setb      %al
063c8735 test      $1,%al
063c8737 jne       0x0000`0000`063C`8742
063c8739 mov       0x2C(%rsp),%eax
063c873d add       $0x38,%rsp
063c8741 ret
063c8742 lea       0x63C`F3B0,%rcx
063c8749 lea       0x63D`23C0,%r8
063c8750 mov       $0x21,%edx
063c8755 call      0x0000`0000`063B`9FF0
063c875a ud2

core::ops::arith::impl$168::div:
063c8760 sub       $0x48,%rsp
063c8764 mov       %rdx,0x28(%rsp)
063c8769 mov       %rcx,0x30(%rsp)
063c876e mov       %rcx,0x38(%rsp)
063c8773 mov       %rdx,0x40(%rsp)
063c8778 cmp       $0,%rdx
063c877c sete      %al
063c877f test      $1,%al
063c8781 jne       0x0000`0000`063C`8797
063c8783 mov       0x28(%rsp),%rcx
063c8788 mov       0x30(%rsp),%rax
063c878d xor       %edx,%edx
063c878f div       %rcx
063c8792 add       $0x48,%rsp
063c8796 ret
063c8797 lea       0x63C`F4D0,%rcx
063c879e lea       0x63D`23D8,%r8
063c87a5 mov       $0x19,%edx
063c87aa call      0x0000`0000`063B`9FF0
063c87af ud2

core::ops::arith::impl$171::div:
063c87c0 sub       $0x38,%rsp
063c87c4 mov       %edx,0x28(%rsp)
063c87c8 mov       %ecx,0x2C(%rsp)
063c87cc mov       %ecx,0x30(%rsp)
063c87d0 mov       %edx,0x34(%rsp)
063c87d4 cmp       $0,%edx
063c87d7 sete      %al
063c87da test      $1,%al
063c87dc jne       0x0000`0000`063C`87EF
063c87de mov       0x28(%rsp),%ecx
063c87e2 mov       0x2C(%rsp),%eax
063c87e6 xor       %edx,%edx
063c87e8 div       %ecx
063c87ea add       $0x38,%rsp
063c87ee ret
063c87ef lea       0x63C`F4D0,%rcx
063c87f6 lea       0x63D`23D8,%r8
063c87fd mov       $0x19,%edx
063c8802 call      0x0000`0000`063B`9FF0
063c8807 ud2

core::ops::arith::impl$224::rem:
063c8810 sub       $0x48,%rsp
063c8814 mov       %rdx,0x28(%rsp)
063c8819 mov       %rcx,0x30(%rsp)
063c881e mov       %rcx,0x38(%rsp)
063c8823 mov       %rdx,0x40(%rsp)
063c8828 cmp       $0,%rdx
063c882c sete      %al
063c882f test      $1,%al
063c8831 jne       0x0000`0000`063C`884A
063c8833 mov       0x28(%rsp),%rcx
063c8838 mov       0x30(%rsp),%rax
063c883d xor       %edx,%edx
063c883f div       %rcx
063c8842 mov       %rdx,%rax
063c8845 add       $0x48,%rsp
063c8849 ret
063c884a lea       0x63C`F4F0,%rcx
063c8851 lea       0x63D`23F0,%r8
063c8858 mov       $0x39,%edx
063c885d call      0x0000`0000`063B`9FF0
063c8862 ud2

core::ops::arith::impl$227::rem:
063c8870 sub       $0x38,%rsp
063c8874 mov       %edx,0x28(%rsp)
063c8878 mov       %ecx,0x2C(%rsp)
063c887c mov       %ecx,0x30(%rsp)
063c8880 mov       %edx,0x34(%rsp)
063c8884 cmp       $0,%edx
063c8887 sete      %al
063c888a test      $1,%al
063c888c jne       0x0000`0000`063C`88A1
063c888e mov       0x28(%rsp),%ecx
063c8892 mov       0x2C(%rsp),%eax
063c8896 xor       %edx,%edx
063c8898 div       %ecx
063c889a mov       %edx,%eax
063c889c add       $0x38,%rsp
063c88a0 ret
063c88a1 lea       0x63C`F4F0,%rcx
063c88a8 lea       0x63D`23F0,%r8
063c88af mov       $0x39,%edx
063c88b4 call      0x0000`0000`063B`9FF0
063c88b9 ud2

core::ops::bit::impl$311::shl:
063c88c0 sub       $0x38,%rsp
063c88c4 mov       %edx,0x28(%rsp)
063c88c8 mov       %ecx,%edx
063c88ca mov       0x28(%rsp),%ecx
063c88ce mov       %edx,0x30(%rsp)
063c88d2 mov       %ecx,0x34(%rsp)
063c88d6 mov       %ecx,%eax
063c88d8 and       $0xFFFF`FFE0,%eax
063c88db cmp       $0,%eax
063c88de setne     %al
063c88e1 and       $0x1F,%ecx
063c88e4 shl       %cl,%edx
063c88e6 mov       %edx,0x2C(%rsp)
063c88ea test      $1,%al
063c88ec jne       0x0000`0000`063C`88F7
063c88ee mov       0x2C(%rsp),%eax
063c88f2 add       $0x38,%rsp
063c88f6 ret
063c88f7 lea       0x63C`F430,%rcx
063c88fe lea       0x63D`2480,%r8
063c8905 mov       $0x23,%edx
063c890a call      0x0000`0000`063B`9FF0
063c890f ud2

core::ops::bit::impl$312::shl:
063c8920 sub       $0x38,%rsp
063c8924 mov       %rcx,0x28(%rsp)
063c8929 mov       %edx,0x34(%rsp)
063c892d mov       (%rcx),%ecx
063c892f call      0x0000`0000`063C`88C0
063c8934 mov       %eax,0x24(%rsp)
063c8938 mov       0x24(%rsp),%eax
063c893c add       $0x38,%rsp
063c8940 ret

core::iter::range::impl$37::forward_unchecked:
063c8950 sub       $0x30,%rsp
063c8954 mov       %rcx,8(%rsp)
063c8959 mov       %rdx,0x10(%rsp)
063c895e mov       %rcx,0x18(%rsp)
063c8963 mov       %rdx,0x20(%rsp)
063c8968 add       %rdx,%rcx
063c896b mov       %rcx,0x28(%rsp)
063c8970 mov       0x28(%rsp),%rax
063c8975 mov       %rax,(%rsp)
063c8979 mov       (%rsp),%rax
063c897d add       $0x30,%rsp
063c8981 ret

core::iter::traits::accum::impl$48::sum<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> > >:
063c8990 sub       $0x38,%rsp
063c8994 mov       %rcx,0x28(%rsp)
063c8999 mov       %rdx,0x30(%rsp)
063c899e xor       %eax,%eax
063c89a0 mov       %eax,%r8d
063c89a3 call      0x0000`0000`063B`8F00
063c89a8 mov       %rax,0x20(%rsp)
063c89ad mov       0x20(%rsp),%rax
063c89b2 add       $0x38,%rsp
063c89b6 ret

core::iter::traits::accum::impl$48::sum::closure$0<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> > >:
063c89c0 sub       $0x48,%rsp
063c89c4 mov       %rcx,0x30(%rsp)
063c89c9 mov       %rdx,0x38(%rsp)
063c89ce mov       %r8,0x40(%rsp)
063c89d3 add       %r8,%rdx
063c89d6 mov       %rdx,0x28(%rsp)
063c89db setb      %al
063c89de test      $1,%al
063c89e0 jne       0x0000`0000`063C`89EC
063c89e2 mov       0x28(%rsp),%rax
063c89e7 add       $0x48,%rsp
063c89eb ret
063c89ec lea       0x63C`F3E0,%rcx
063c89f3 lea       0x63D`2518,%r8
063c89fa mov       $0x1C,%edx
063c89ff call      0x0000`0000`063B`9FF0
063c8a04 ud2

core::fmt::num::impl$8::to_u64:
063c8a10 push      %rax
063c8a11 mov       %rcx,(%rsp)
063c8a15 movzbl    (%rcx),%eax
063c8a18 pop       %rcx
063c8a19 ret

core::fmt::num::impl$10::zero:
063c8a20 xor       %eax,%eax
063c8a22 ret

core::fmt::num::impl$10::from_u8:
063c8a30 push      %rax
063c8a31 mov       %cl,7(%rsp)
063c8a35 movzbl    %cl,%eax
063c8a38 pop       %rcx
063c8a39 ret

core::fmt::num::impl$10::to_u8:
063c8a40 push      %rax
063c8a41 mov       %rcx,(%rsp)
063c8a45 mov       (%rcx),%eax
063c8a47 pop       %rcx
063c8a48 ret

core::fmt::num::impl$10::to_u64:
063c8a50 push      %rax
063c8a51 mov       %rcx,(%rsp)
063c8a55 mov       (%rcx),%eax
063c8a57 pop       %rcx
063c8a58 ret

core::fmt::num::impl$13::zero:
063c8a60 xor       %eax,%eax
063c8a62 ret

core::fmt::num::impl$13::from_u8:
063c8a70 push      %rax
063c8a71 mov       %cl,7(%rsp)
063c8a75 movzbl    %cl,%eax
063c8a78 pop       %rcx
063c8a79 ret

core::fmt::num::impl$13::to_u8:
063c8a80 push      %rax
063c8a81 mov       %rcx,(%rsp)
063c8a85 mov       (%rcx),%rax
063c8a88 pop       %rcx
063c8a89 ret

core::fmt::num::impl$13::to_u64:
063c8a90 push      %rax
063c8a91 mov       %rcx,(%rsp)
063c8a95 mov       (%rcx),%rax
063c8a98 pop       %rcx
063c8a99 ret

core::fmt::num::impl$28::digit:
063c8aa0 sub       $0xB8,%rsp
063c8aa7 mov       %cl,0x5D(%rsp)
063c8aab mov       %cl,0xB5(%rsp)
063c8ab2 xor       %eax,%eax
063c8ab4 cmp       %cl,%al
063c8ab6 jbe       0x0000`0000`063C`8AC4
063c8ab8 mov       0x5D(%rsp),%cl
063c8abc mov       $0xA,%al
063c8abe cmp       %cl,%al
063c8ac0 jbe       0x0000`0000`063C`8B34
063c8ac2 jmp       0x0000`0000`063C`8B14
063c8ac4 mov       0x5D(%rsp),%al
063c8ac8 cmp       $9,%al
063c8aca ja        0x0000`0000`063C`8AB8
063c8acc mov       0x5D(%rsp),%al
063c8ad0 mov       %al,0xB6(%rsp)
063c8ad7 add       $0x30,%al
063c8ad9 mov       %al,0x5C(%rsp)
063c8add setb      %al
063c8ae0 test      $1,%al
063c8ae2 jne       0x0000`0000`063C`8AEE
063c8ae4 mov       0x5C(%rsp),%al
063c8ae8 mov       %al,0x5E(%rsp)
063c8aec jmp       0x0000`0000`063C`8B08
063c8aee lea       0x63C`F3E0,%rcx
063c8af5 lea       0x63D`2570,%r8
063c8afc mov       $0x1C,%edx
063c8b01 call      0x0000`0000`063B`9FF0
063c8b06 ud2
063c8b08 mov       0x5E(%rsp),%al
063c8b0c add       $0xB8,%rsp
063c8b13 ret
063c8b14 mov       0x5D(%rsp),%al
063c8b18 mov       %al,0x5F(%rsp)
063c8b1c lea       0x63D`25B8,%rcx
063c8b23 call      0x0000`0000`063C`99C0
063c8b28 mov       %rax,0x48(%rsp)
063c8b2d mov       %rdx,0x50(%rsp)
063c8b32 jmp       0x0000`0000`063C`8BA8
063c8b34 mov       0x5D(%rsp),%al
063c8b38 cmp       $0xF,%al
063c8b3a ja        0x0000`0000`063C`8B14
063c8b3c mov       0x5D(%rsp),%al
063c8b40 mov       %al,0xB7(%rsp)
063c8b47 sub       $0xA,%al
063c8b49 mov       %al,0x47(%rsp)
063c8b4d setb      %al
063c8b50 test      $1,%al
063c8b52 jne       0x0000`0000`063C`8B67
063c8b54 mov       0x47(%rsp),%al
063c8b58 add       $0x61,%al
063c8b5a mov       %al,0x46(%rsp)
063c8b5e setb      %al
063c8b61 test      $1,%al
063c8b63 jne       0x0000`0000`063C`8B8E
063c8b65 jmp       0x0000`0000`063C`8B81
063c8b67 lea       0x63C`F3B0,%rcx
063c8b6e lea       0x63D`2588,%r8
063c8b75 mov       $0x21,%edx
063c8b7a call      0x0000`0000`063B`9FF0
063c8b7f ud2
063c8b81 mov       0x46(%rsp),%al
063c8b85 mov       %al,0x5E(%rsp)
063c8b89 jmp       0x0000`0000`063C`8B08
063c8b8e lea       0x63C`F3E0,%rcx
063c8b95 lea       0x63D`25A0,%r8
063c8b9c mov       $0x1C,%edx
063c8ba1 call      0x0000`0000`063B`9FF0
063c8ba6 ud2
063c8ba8 lea       0x5F(%rsp),%rcx
063c8bad call      0x0000`0000`063C`99C0
063c8bb2 mov       %rax,0x30(%rsp)
063c8bb7 mov       %rdx,0x38(%rsp)
063c8bbc mov       0x38(%rsp),%rax
063c8bc1 mov       0x30(%rsp),%rcx
063c8bc6 mov       0x50(%rsp),%rdx
063c8bcb mov       0x48(%rsp),%r8
063c8bd0 mov       %r8,0x90(%rsp)
063c8bd8 mov       %rdx,0x98(%rsp)
063c8be0 mov       %rcx,0xA0(%rsp)
063c8be8 mov       %rax,0xA8(%rsp)
063c8bf0 lea       0x90(%rsp),%r9
063c8bf8 lea       0x60(%rsp),%rcx
063c8bfd lea       0x63D`2550,%rdx
063c8c04 mov       $2,%r8d
063c8c0a movq      $2,0x20(%rsp)
063c8c13 call      0x0000`0000`063B`EFF0
063c8c18 lea       0x63D`25C0,%rdx
063c8c1f lea       0x60(%rsp),%rcx
063c8c24 call      0x0000`0000`063B`A100
063c8c29 ud2

core::fmt::num::impl$29::digit:
063c8c30 sub       $0xB8,%rsp
063c8c37 mov       %cl,0x5D(%rsp)
063c8c3b mov       %cl,0xB5(%rsp)
063c8c42 xor       %eax,%eax
063c8c44 cmp       %cl,%al
063c8c46 jbe       0x0000`0000`063C`8C54
063c8c48 mov       0x5D(%rsp),%cl
063c8c4c mov       $0xA,%al
063c8c4e cmp       %cl,%al
063c8c50 jbe       0x0000`0000`063C`8CC4
063c8c52 jmp       0x0000`0000`063C`8CA4
063c8c54 mov       0x5D(%rsp),%al
063c8c58 cmp       $9,%al
063c8c5a ja        0x0000`0000`063C`8C48
063c8c5c mov       0x5D(%rsp),%al
063c8c60 mov       %al,0xB6(%rsp)
063c8c67 add       $0x30,%al
063c8c69 mov       %al,0x5C(%rsp)
063c8c6d setb      %al
063c8c70 test      $1,%al
063c8c72 jne       0x0000`0000`063C`8C7E
063c8c74 mov       0x5C(%rsp),%al
063c8c78 mov       %al,0x5E(%rsp)
063c8c7c jmp       0x0000`0000`063C`8C98
063c8c7e lea       0x63C`F3E0,%rcx
063c8c85 lea       0x63D`25D8,%r8
063c8c8c mov       $0x1C,%edx
063c8c91 call      0x0000`0000`063B`9FF0
063c8c96 ud2
063c8c98 mov       0x5E(%rsp),%al
063c8c9c add       $0xB8,%rsp
063c8ca3 ret
063c8ca4 mov       0x5D(%rsp),%al
063c8ca8 mov       %al,0x5F(%rsp)
063c8cac lea       0x63D`25B8,%rcx
063c8cb3 call      0x0000`0000`063C`99C0
063c8cb8 mov       %rax,0x48(%rsp)
063c8cbd mov       %rdx,0x50(%rsp)
063c8cc2 jmp       0x0000`0000`063C`8D38
063c8cc4 mov       0x5D(%rsp),%al
063c8cc8 cmp       $0xF,%al
063c8cca ja        0x0000`0000`063C`8CA4
063c8ccc mov       0x5D(%rsp),%al
063c8cd0 mov       %al,0xB7(%rsp)
063c8cd7 sub       $0xA,%al
063c8cd9 mov       %al,0x47(%rsp)
063c8cdd setb      %al
063c8ce0 test      $1,%al
063c8ce2 jne       0x0000`0000`063C`8CF7
063c8ce4 mov       0x47(%rsp),%al
063c8ce8 add       $0x41,%al
063c8cea mov       %al,0x46(%rsp)
063c8cee setb      %al
063c8cf1 test      $1,%al
063c8cf3 jne       0x0000`0000`063C`8D1E
063c8cf5 jmp       0x0000`0000`063C`8D11
063c8cf7 lea       0x63C`F3B0,%rcx
063c8cfe lea       0x63D`25F0,%r8
063c8d05 mov       $0x21,%edx
063c8d0a call      0x0000`0000`063B`9FF0
063c8d0f ud2
063c8d11 mov       0x46(%rsp),%al
063c8d15 mov       %al,0x5E(%rsp)
063c8d19 jmp       0x0000`0000`063C`8C98
063c8d1e lea       0x63C`F3E0,%rcx
063c8d25 lea       0x63D`2608,%r8
063c8d2c mov       $0x1C,%edx
063c8d31 call      0x0000`0000`063B`9FF0
063c8d36 ud2
063c8d38 lea       0x5F(%rsp),%rcx
063c8d3d call      0x0000`0000`063C`99C0
063c8d42 mov       %rax,0x30(%rsp)
063c8d47 mov       %rdx,0x38(%rsp)
063c8d4c mov       0x38(%rsp),%rax
063c8d51 mov       0x30(%rsp),%rcx
063c8d56 mov       0x50(%rsp),%rdx
063c8d5b mov       0x48(%rsp),%r8
063c8d60 mov       %r8,0x90(%rsp)
063c8d68 mov       %rdx,0x98(%rsp)
063c8d70 mov       %rcx,0xA0(%rsp)
063c8d78 mov       %rax,0xA8(%rsp)
063c8d80 lea       0x90(%rsp),%r9
063c8d88 lea       0x60(%rsp),%rcx
063c8d8d lea       0x63D`2550,%rdx
063c8d94 mov       $2,%r8d
063c8d9a movq      $2,0x20(%rsp)
063c8da3 call      0x0000`0000`063B`EFF0
063c8da8 lea       0x63D`2620,%rdx
063c8daf lea       0x60(%rsp),%rcx
063c8db4 call      0x0000`0000`063B`A100
063c8db9 ud2

core::fmt::num::impl$36::fmt:
063c8dc0 sub       $0x38,%rsp
063c8dc4 mov       %rdx,%r8
063c8dc7 mov       %rcx,0x28(%rsp)
063c8dcc mov       %r8,0x30(%rsp)
063c8dd1 mov       (%rcx),%rdx
063c8dd4 lea       0x63C`F530,%rcx
063c8ddb call      0x0000`0000`063B`C450
063c8de0 mov       %al,0x27(%rsp)
063c8de4 mov       0x27(%rsp),%al
063c8de8 and       $1,%al
063c8dea movzbl    %al,%eax
063c8ded add       $0x38,%rsp
063c8df1 ret

core::fmt::num::impl$37::fmt:
063c8e00 sub       $0x38,%rsp
063c8e04 mov       %rdx,%r8
063c8e07 mov       %rcx,0x28(%rsp)
063c8e0c mov       %r8,0x30(%rsp)
063c8e11 mov       (%rcx),%rdx
063c8e14 lea       0x63C`F530,%rcx
063c8e1b call      0x0000`0000`063B`BE40
063c8e20 mov       %al,0x27(%rsp)
063c8e24 mov       0x27(%rsp),%al
063c8e28 and       $1,%al
063c8e2a movzbl    %al,%eax
063c8e2d add       $0x38,%rsp
063c8e31 ret

core::fmt::num::impl$61::fmt:
063c8e40 sub       $0x38,%rsp
063c8e44 mov       %rdx,%r8
063c8e47 mov       %rcx,0x28(%rsp)
063c8e4c mov       %r8,0x30(%rsp)
063c8e51 mov       (%rcx),%edx
063c8e53 lea       0x63C`F530,%rcx
063c8e5a call      0x0000`0000`063B`B850
063c8e5f mov       %al,0x27(%rsp)
063c8e63 mov       0x27(%rsp),%al
063c8e67 and       $1,%al
063c8e69 movzbl    %al,%eax
063c8e6c add       $0x38,%rsp
063c8e70 ret

core::fmt::num::impl$89::fmt:
063c8e80 sub       $0x58,%rsp
063c8e84 mov       %rdx,0x30(%rsp)
063c8e89 mov       %rcx,%rax
063c8e8c mov       0x30(%rsp),%rcx
063c8e91 mov       %rax,0x38(%rsp)
063c8e96 mov       %rax,0x48(%rsp)
063c8e9b mov       %rcx,0x50(%rsp)
063c8ea0 call      0x0000`0000`063C`0D10
063c8ea5 mov       %al,0x46(%rsp)
063c8ea9 mov       0x46(%rsp),%al
063c8ead test      $1,%al
063c8eaf jne       0x0000`0000`063C`8EC3
063c8eb1 jmp       0x0000`0000`063C`8EB3
063c8eb3 mov       0x30(%rsp),%rcx
063c8eb8 call      0x0000`0000`063C`0D30
063c8ebd mov       %al,0x2F(%rsp)
063c8ec1 jmp       0x0000`0000`063C`8EE6
063c8ec3 mov       0x30(%rsp),%rdx
063c8ec8 mov       0x38(%rsp),%rcx
063c8ecd call      0x0000`0000`063C`8DC0
063c8ed2 and       $1,%al
063c8ed4 mov       %al,0x47(%rsp)
063c8ed8 mov       0x47(%rsp),%al
063c8edc and       $1,%al
063c8ede movzbl    %al,%eax
063c8ee1 add       $0x58,%rsp
063c8ee5 ret
063c8ee6 mov       0x2F(%rsp),%al
063c8eea test      $1,%al
063c8eec jne       0x0000`0000`063C`8F07
063c8eee jmp       0x0000`0000`063C`8EF0
063c8ef0 mov       0x30(%rsp),%rdx
063c8ef5 mov       0x38(%rsp),%rcx
063c8efa call      0x0000`0000`063C`98B0
063c8eff and       $1,%al
063c8f01 mov       %al,0x47(%rsp)
063c8f05 jmp       0x0000`0000`063C`8ED8
063c8f07 mov       0x30(%rsp),%rdx
063c8f0c mov       0x38(%rsp),%rcx
063c8f11 call      0x0000`0000`063C`8E00
063c8f16 and       $1,%al
063c8f18 mov       %al,0x47(%rsp)
063c8f1c jmp       0x0000`0000`063C`8ED8

core::fmt::num::imp::fmt_u64:
063c8f20 sub       $0x2D8,%rsp
063c8f27 mov       %r8,0x128(%rsp)
063c8f2f mov       %dl,0x136(%rsp)
063c8f36 mov       %rcx,0x138(%rsp)
063c8f3e and       $1,%dl
063c8f41 mov       %dl,0x17F(%rsp)
063c8f48 mov       %r8,0x180(%rsp)
063c8f50 mov       0x1D7(%rsp),%al
063c8f57 mov       %al,0x137(%rsp)
063c8f5e mov       0x137(%rsp),%dl
063c8f65 lea       0x141(%rsp),%rcx
063c8f6d mov       $0x27,%r8d
063c8f73 call      0x0000`0000`063C`BCC0
063c8f78 movq      $0x27,0x168(%rsp)
063c8f84 lea       0x141(%rsp),%rcx
063c8f8c mov       %rcx,0x1D8(%rsp)
063c8f94 movq      $0x27,0x1E0(%rsp)
063c8fa0 mov       $0x27,%edx
063c8fa5 call      0x0000`0000`063C`3E40
063c8faa mov       %rax,0x120(%rsp)
063c8fb2 mov       %rax,0x188(%rsp)
063c8fba mov       0x63D`0600,%rcx
063c8fc1 mov       $0xC8,%edx
063c8fc6 call      0x0000`0000`063C`3DA0
063c8fcb mov       %rax,0x118(%rsp)
063c8fd3 mov       %rax,0x190(%rsp)
063c8fdb jmp       0x0000`0000`063C`8FDD
063c8fdd mov       $8,%eax
063c8fe2 cmp       $2,%rax
063c8fe6 setae     %al
063c8fe9 xor       $0xFF,%al
063c8feb test      $1,%al
063c8fed jne       0x0000`0000`063C`8FFF
063c8fef cmpq      $0x2710,0x138(%rsp)
063c8ffb jae       0x0000`0000`063C`903D
063c8ffd jmp       0x0000`0000`063C`9019
063c8fff lea       0x63D`2638,%rcx
063c9006 lea       0x63D`2670,%r8
063c900d mov       $0x33,%edx
063c9012 call      0x0000`0000`063B`9FF0
063c9017 ud2
063c9019 mov       0x138(%rsp),%rax
063c9021 mov       %rax,0x170(%rsp)
063c9029 cmpq      $0x64,0x170(%rsp)
063c9032 jge       0x0000`0000`063C`9302
063c9038 jmp       0x0000`0000`063C`92EE
063c903d mov       0x138(%rsp),%rax
063c9045 mov       $0x2710,%ecx
063c904a xor       %edx,%edx
063c904c div       %rcx
063c904f mov       %rdx,0x110(%rsp)
063c9057 mov       %rdx,0x198(%rsp)
063c905f mov       0x138(%rsp),%rax
063c9067 mov       $0x2710,%ecx
063c906c xor       %edx,%edx
063c906e div       %rcx
063c9071 mov       0x110(%rsp),%rdx
063c9079 mov       %rax,0x138(%rsp)
063c9081 movabs    $0x8000`0000`0000`0000,%rax
063c908b cmp       %rax,%rdx
063c908e sete      %al
063c9091 and       $0,%al
063c9093 test      $1,%al
063c9095 jne       0x0000`0000`063C`90B7
063c9097 mov       0x110(%rsp),%rax
063c909f mov       $0x64,%ecx
063c90a4 cqto
063c90a6 idiv      %rcx
063c90a9 shl       $1,%rax
063c90ad mov       %rax,0x108(%rsp)
063c90b5 jmp       0x0000`0000`063C`90D1
063c90b7 lea       0x63C`F4B0,%rcx
063c90be lea       0x63D`2670,%r8
063c90c5 mov       $0x1F,%edx
063c90ca call      0x0000`0000`063B`9FF0
063c90cf ud2
063c90d1 mov       0x110(%rsp),%rax
063c90d9 mov       0x108(%rsp),%rcx
063c90e1 mov       %rcx,0x1A0(%rsp)
063c90e9 movabs    $0x8000`0000`0000`0000,%rcx
063c90f3 cmp       %rcx,%rax
063c90f6 sete      %al
063c90f9 and       $0,%al
063c90fb test      $1,%al
063c90fd jne       0x0000`0000`063C`911F
063c90ff mov       0x110(%rsp),%rax
063c9107 mov       $0x64,%ecx
063c910c cqto
063c910e idiv      %rcx
063c9111 shl       $1,%rdx
063c9115 mov       %rdx,0x100(%rsp)
063c911d jmp       0x0000`0000`063C`9139
063c911f lea       0x63D`2690,%rcx
063c9126 lea       0x63D`2670,%r8
063c912d mov       $0x30,%edx
063c9132 call      0x0000`0000`063B`9FF0
063c9137 ud2
063c9139 mov       0x100(%rsp),%rax
063c9141 mov       %rax,0x1A8(%rsp)
063c9149 mov       0x168(%rsp),%rax
063c9151 sub       $4,%rax
063c9155 mov       %rax,0xF8(%rsp)
063c915d seto      %al
063c9160 test      $1,%al
063c9162 jne       0x0000`0000`063C`91B1
063c9164 mov       0x108(%rsp),%rcx
063c916c mov       0x118(%rsp),%rax
063c9174 mov       0xF8(%rsp),%rdx
063c917c mov       %rdx,0x168(%rsp)
063c9184 mov       %rax,0x230(%rsp)
063c918c mov       %rcx,0x238(%rsp)
063c9194 add       %rcx,%rax
063c9197 mov       %rax,0x240(%rsp)
063c919f mov       0x240(%rsp),%rax
063c91a7 mov       %rax,0xF0(%rsp)
063c91af jmp       0x0000`0000`063C`91CB
063c91b1 lea       0x63C`F3B0,%rcx
063c91b8 lea       0x63D`2670,%r8
063c91bf mov       $0x21,%edx
063c91c4 call      0x0000`0000`063B`9FF0
063c91c9 ud2
063c91cb mov       0x120(%rsp),%rax
063c91d3 mov       0x168(%rsp),%rcx
063c91db mov       %rax,0x2C0(%rsp)
063c91e3 mov       %rcx,0x2C8(%rsp)
063c91eb add       %rcx,%rax
063c91ee mov       %rax,0x2D0(%rsp)
063c91f6 mov       0x2D0(%rsp),%rax
063c91fe mov       %rax,0xE8(%rsp)
063c9206 mov       0xE8(%rsp),%rdx
063c920e mov       0xF0(%rsp),%rcx
063c9216 mov       $2,%r8d
063c921c call      0x0000`0000`063B`5B20
063c9221 mov       0x100(%rsp),%rcx
063c9229 mov       0x118(%rsp),%rax
063c9231 mov       %rax,0x218(%rsp)
063c9239 mov       %rcx,0x220(%rsp)
063c9241 add       %rcx,%rax
063c9244 mov       %rax,0x228(%rsp)
063c924c mov       0x228(%rsp),%rax
063c9254 mov       %rax,0xE0(%rsp)
063c925c mov       0x168(%rsp),%rax
063c9264 add       $2,%rax
063c9268 mov       %rax,0xD8(%rsp)
063c9270 seto      %al
063c9273 test      $1,%al
063c9275 jne       0x0000`0000`063C`92B4
063c9277 mov       0xD8(%rsp),%rcx
063c927f mov       0x120(%rsp),%rax
063c9287 mov       %rax,0x2A8(%rsp)
063c928f mov       %rcx,0x2B0(%rsp)
063c9297 add       %rcx,%rax
063c929a mov       %rax,0x2B8(%rsp)
063c92a2 mov       0x2B8(%rsp),%rax
063c92aa mov       %rax,0xD0(%rsp)
063c92b2 jmp       0x0000`0000`063C`92CE
063c92b4 lea       0x63C`F3E0,%rcx
063c92bb lea       0x63D`2670,%r8
063c92c2 mov       $0x1C,%edx
063c92c7 call      0x0000`0000`063B`9FF0
063c92cc ud2
063c92ce mov       0xD0(%rsp),%rdx
063c92d6 mov       0xE0(%rsp),%rcx
063c92de mov       $2,%r8d
063c92e4 call      0x0000`0000`063B`5B20
063c92e9 jmp       0x0000`0000`063C`8FEF
063c92ee cmpq      $0xA,0x170(%rsp)
063c92f7 jl        0x0000`0000`063C`94B9
063c92fd jmp       0x0000`0000`063C`94A0
063c9302 mov       0x170(%rsp),%rax
063c930a mov       %rax,0xC8(%rsp)
063c9312 movabs    $0x8000`0000`0000`0000,%rcx
063c931c cmp       %rcx,%rax
063c931f sete      %al
063c9322 and       $0,%al
063c9324 test      $1,%al
063c9326 jne       0x0000`0000`063C`9348
063c9328 mov       0xC8(%rsp),%rax
063c9330 mov       $0x64,%ecx
063c9335 cqto
063c9337 idiv      %rcx
063c933a shl       $1,%rdx
063c933e mov       %rdx,0xC0(%rsp)
063c9346 jmp       0x0000`0000`063C`9362
063c9348 lea       0x63D`2690,%rcx
063c934f lea       0x63D`2670,%r8
063c9356 mov       $0x30,%edx
063c935b call      0x0000`0000`063B`9FF0
063c9360 ud2
063c9362 mov       0xC0(%rsp),%rax
063c936a mov       %rax,0x1B0(%rsp)
063c9372 movabs    $0x8000`0000`0000`0000,%rax
063c937c cmp       %rax,0x170(%rsp)
063c9384 sete      %al
063c9387 and       $0,%al
063c9389 test      $1,%al
063c938b jne       0x0000`0000`063C`93C4
063c938d mov       0x170(%rsp),%rax
063c9395 mov       $0x64,%ecx
063c939a cqto
063c939c idiv      %rcx
063c939f mov       %rax,0x170(%rsp)
063c93a7 mov       0x168(%rsp),%rax
063c93af sub       $2,%rax
063c93b3 mov       %rax,0xB8(%rsp)
063c93bb seto      %al
063c93be test      $1,%al
063c93c0 jne       0x0000`0000`063C`942B
063c93c2 jmp       0x0000`0000`063C`93DE
063c93c4 lea       0x63C`F4B0,%rcx
063c93cb lea       0x63D`2670,%r8
063c93d2 mov       $0x1F,%edx
063c93d7 call      0x0000`0000`063B`9FF0
063c93dc ud2
063c93de mov       0xC0(%rsp),%rcx
063c93e6 mov       0x118(%rsp),%rax
063c93ee mov       0xB8(%rsp),%rdx
063c93f6 mov       %rdx,0x168(%rsp)
063c93fe mov       %rax,0x200(%rsp)
063c9406 mov       %rcx,0x208(%rsp)
063c940e add       %rcx,%rax
063c9411 mov       %rax,0x210(%rsp)
063c9419 mov       0x210(%rsp),%rax
063c9421 mov       %rax,0xB0(%rsp)
063c9429 jmp       0x0000`0000`063C`9445
063c942b lea       0x63C`F3B0,%rcx
063c9432 lea       0x63D`2670,%r8
063c9439 mov       $0x21,%edx
063c943e call      0x0000`0000`063B`9FF0
063c9443 ud2
063c9445 mov       0x120(%rsp),%rax
063c944d mov       0x168(%rsp),%rcx
063c9455 mov       %rax,0x290(%rsp)
063c945d mov       %rcx,0x298(%rsp)
063c9465 add       %rcx,%rax
063c9468 mov       %rax,0x2A0(%rsp)
063c9470 mov       0x2A0(%rsp),%rax
063c9478 mov       %rax,0xA8(%rsp)
063c9480 mov       0xA8(%rsp),%rdx
063c9488 mov       0xB0(%rsp),%rcx
063c9490 mov       $2,%r8d
063c9496 call      0x0000`0000`063B`5B20
063c949b jmp       0x0000`0000`063C`92EE
063c94a0 mov       0x170(%rsp),%rax
063c94a8 shl       $1,%rax
063c94ac mov       %rax,0xA0(%rsp)
063c94b4 jmp       0x0000`0000`063C`95BF
063c94b9 mov       0x168(%rsp),%rax
063c94c1 dec       %rax
063c94c4 mov       %rax,0x98(%rsp)
063c94cc seto      %al
063c94cf test      $1,%al
063c94d1 jne       0x0000`0000`063C`94FD
063c94d3 mov       0x98(%rsp),%rax
063c94db mov       %rax,0x168(%rsp)
063c94e3 mov       0x170(%rsp),%rax
063c94eb add       $0x30,%al
063c94ed mov       %al,0x97(%rsp)
063c94f4 setb      %al
063c94f7 test      $1,%al
063c94f9 jne       0x0000`0000`063C`9554
063c94fb jmp       0x0000`0000`063C`9517
063c94fd lea       0x63C`F3B0,%rcx
063c9504 lea       0x63D`2670,%r8
063c950b mov       $0x21,%edx
063c9510 call      0x0000`0000`063B`9FF0
063c9515 ud2
063c9517 mov       0x120(%rsp),%rax
063c951f mov       0x168(%rsp),%rcx
063c9527 mov       %rax,0x278(%rsp)
063c952f mov       %rcx,0x280(%rsp)
063c9537 add       %rcx,%rax
063c953a mov       %rax,0x288(%rsp)
063c9542 mov       0x288(%rsp),%rax
063c954a mov       %rax,0x88(%rsp)
063c9552 jmp       0x0000`0000`063C`956E
063c9554 lea       0x63C`F3E0,%rcx
063c955b lea       0x63D`2670,%r8
063c9562 mov       $0x1C,%edx
063c9567 call      0x0000`0000`063B`9FF0
063c956c ud2
063c956e mov       0x88(%rsp),%rax
063c9576 mov       0x97(%rsp),%cl
063c957d mov       %cl,(%rax)
063c957f mov       0x120(%rsp),%rax
063c9587 mov       0x168(%rsp),%rcx
063c958f mov       %rax,0x248(%rsp)
063c9597 mov       %rcx,0x250(%rsp)
063c959f add       %rcx,%rax
063c95a2 mov       %rax,0x258(%rsp)
063c95aa mov       0x258(%rsp),%rax
063c95b2 mov       %rax,0x80(%rsp)
063c95ba jmp       0x0000`0000`063C`969A
063c95bf mov       0xA0(%rsp),%rax
063c95c7 mov       %rax,0x1B8(%rsp)
063c95cf mov       0x168(%rsp),%rax
063c95d7 sub       $2,%rax
063c95db mov       %rax,0x78(%rsp)
063c95e0 seto      %al
063c95e3 test      $1,%al
063c95e5 jne       0x0000`0000`063C`962E
063c95e7 mov       0xA0(%rsp),%rcx
063c95ef mov       0x118(%rsp),%rax
063c95f7 mov       0x78(%rsp),%rdx
063c95fc mov       %rdx,0x168(%rsp)
063c9604 mov       %rax,0x1E8(%rsp)
063c960c mov       %rcx,0x1F0(%rsp)
063c9614 add       %rcx,%rax
063c9617 mov       %rax,0x1F8(%rsp)
063c961f mov       0x1F8(%rsp),%rax
063c9627 mov       %rax,0x70(%rsp)
063c962c jmp       0x0000`0000`063C`9648
063c962e lea       0x63C`F3B0,%rcx
063c9635 lea       0x63D`2670,%r8
063c963c mov       $0x21,%edx
063c9641 call      0x0000`0000`063B`9FF0
063c9646 ud2
063c9648 mov       0x120(%rsp),%rax
063c9650 mov       0x168(%rsp),%rcx
063c9658 mov       %rax,0x260(%rsp)
063c9660 mov       %rcx,0x268(%rsp)
063c9668 add       %rcx,%rax
063c966b mov       %rax,0x270(%rsp)
063c9673 mov       0x270(%rsp),%rax
063c967b mov       %rax,0x68(%rsp)
063c9680 mov       0x68(%rsp),%rdx
063c9685 mov       0x70(%rsp),%rcx
063c968a mov       $2,%r8d
063c9690 call      0x0000`0000`063B`5B20
063c9695 jmp       0x0000`0000`063C`957F
063c969a mov       $0x27,%eax
063c969f sub       0x168(%rsp),%rax
063c96a7 mov       %rax,0x60(%rsp)
063c96ac setb      %al
063c96af test      $1,%al
063c96b1 jne       0x0000`0000`063C`96D1
063c96b3 mov       0x60(%rsp),%rdx
063c96b8 mov       0x80(%rsp),%rcx
063c96c0 call      0x0000`0000`063C`36A0
063c96c5 mov       %rax,0x50(%rsp)
063c96ca mov       %rdx,0x58(%rsp)
063c96cf jmp       0x0000`0000`063C`96EB
063c96d1 lea       0x63C`F3B0,%rcx
063c96d8 lea       0x63D`2670,%r8
063c96df mov       $0x21,%edx
063c96e4 call      0x0000`0000`063B`9FF0
063c96e9 ud2
063c96eb mov       0x58(%rsp),%rdx
063c96f0 mov       0x50(%rsp),%rcx
063c96f5 call      0x0000`0000`063C`5130
063c96fa mov       %rax,0x40(%rsp)
063c96ff mov       %rdx,0x48(%rsp)
063c9704 mov       %rax,0x1C0(%rsp)
063c970c mov       %rdx,0x1C8(%rsp)
063c9714 mov       0x128(%rsp),%rcx
063c971c mov       0x136(%rsp),%dl
063c9723 mov       0x40(%rsp),%r8
063c9728 mov       0x48(%rsp),%r9
063c972d mov       %rsp,%rax
063c9730 mov       %r9,0x28(%rax)
063c9734 mov       %r8,0x20(%rax)
063c9738 and       $1,%dl
063c973b lea       0x63C`F530,%r8
063c9742 xor       %eax,%eax
063c9744 mov       %eax,%r9d
063c9747 call      0x0000`0000`063B`FB90
063c974c mov       %al,0x3F(%rsp)
063c9750 mov       0x3F(%rsp),%al
063c9754 and       $1,%al
063c9756 movzbl    %al,%eax
063c9759 add       $0x2D8,%rsp
063c9760 ret

core::fmt::num::imp::impl$1::fmt:
063c9770 sub       $0x78,%rsp
063c9774 mov       %rdx,0x30(%rsp)
063c9779 mov       %rcx,0x38(%rsp)
063c977e mov       %rcx,0x50(%rsp)
063c9783 mov       %rdx,0x58(%rsp)
063c9788 cmpb      $0,(%rcx)
063c978b setae     %al
063c978e mov       %al,0x47(%rsp)
063c9792 mov       %al,%cl
063c9794 and       $1,%cl
063c9797 mov       %cl,0x67(%rsp)
063c979b test      $1,%al
063c979d jne       0x0000`0000`063C`97B0
063c979f mov       0x38(%rsp),%rcx
063c97a4 call      0x0000`0000`063C`8A10
063c97a9 mov       %rax,0x28(%rsp)
063c97ae jmp       0x0000`0000`063C`97DB
063c97b0 mov       0x38(%rsp),%rcx
063c97b5 call      0x0000`0000`063C`8A10
063c97ba mov       %rax,0x48(%rsp)
063c97bf mov       0x30(%rsp),%r8
063c97c4 mov       0x47(%rsp),%dl
063c97c8 mov       0x48(%rsp),%rcx
063c97cd and       $1,%dl
063c97d0 call      0x0000`0000`063C`8F20
063c97d5 mov       %al,0x27(%rsp)
063c97d9 jmp       0x0000`0000`063C`97FD
063c97db mov       0x28(%rsp),%rax
063c97e0 xor       $0xFFFF`FFFF`FFFF`FFFF,%rax
063c97e4 mov       %rax,0x68(%rsp)
063c97e9 movq      $1,0x70(%rsp)
063c97f2 add       $1,%rax
063c97f6 mov       %rax,0x48(%rsp)
063c97fb jmp       0x0000`0000`063C`97BF
063c97fd mov       0x27(%rsp),%al
063c9801 and       $1,%al
063c9803 movzbl    %al,%eax
063c9806 add       $0x78,%rsp
063c980a ret

core::fmt::num::imp::impl$5::fmt:
063c9810 sub       $0x78,%rsp
063c9814 mov       %rdx,0x30(%rsp)
063c9819 mov       %rcx,0x38(%rsp)
063c981e mov       %rcx,0x50(%rsp)
063c9823 mov       %rdx,0x58(%rsp)
063c9828 cmpl      $0,(%rcx)
063c982b setae     %al
063c982e mov       %al,0x47(%rsp)
063c9832 mov       %al,%cl
063c9834 and       $1,%cl
063c9837 mov       %cl,0x67(%rsp)
063c983b test      $1,%al
063c983d jne       0x0000`0000`063C`9850
063c983f mov       0x38(%rsp),%rcx
063c9844 call      0x0000`0000`063C`8A50
063c9849 mov       %rax,0x28(%rsp)
063c984e jmp       0x0000`0000`063C`987B
063c9850 mov       0x38(%rsp),%rcx
063c9855 call      0x0000`0000`063C`8A50
063c985a mov       %rax,0x48(%rsp)
063c985f mov       0x30(%rsp),%r8
063c9864 mov       0x47(%rsp),%dl
063c9868 mov       0x48(%rsp),%rcx
063c986d and       $1,%dl
063c9870 call      0x0000`0000`063C`8F20
063c9875 mov       %al,0x27(%rsp)
063c9879 jmp       0x0000`0000`063C`989D
063c987b mov       0x28(%rsp),%rax
063c9880 xor       $0xFFFF`FFFF`FFFF`FFFF,%rax
063c9884 mov       %rax,0x68(%rsp)
063c9889 movq      $1,0x70(%rsp)
063c9892 add       $1,%rax
063c9896 mov       %rax,0x48(%rsp)
063c989b jmp       0x0000`0000`063C`985F
063c989d mov       0x27(%rsp),%al
063c98a1 and       $1,%al
063c98a3 movzbl    %al,%eax
063c98a6 add       $0x78,%rsp
063c98aa ret

core::fmt::num::imp::impl$8::fmt:
063c98b0 sub       $0x78,%rsp
063c98b4 mov       %rdx,0x30(%rsp)
063c98b9 mov       %rcx,0x38(%rsp)
063c98be mov       %rcx,0x50(%rsp)
063c98c3 mov       %rdx,0x58(%rsp)
063c98c8 cmpq      $0,(%rcx)
063c98cc setae     %al
063c98cf mov       %al,0x47(%rsp)
063c98d3 mov       %al,%cl
063c98d5 and       $1,%cl
063c98d8 mov       %cl,0x67(%rsp)
063c98dc test      $1,%al
063c98de jne       0x0000`0000`063C`98F1
063c98e0 mov       0x38(%rsp),%rcx
063c98e5 call      0x0000`0000`063C`8A90
063c98ea mov       %rax,0x28(%rsp)
063c98ef jmp       0x0000`0000`063C`991C
063c98f1 mov       0x38(%rsp),%rcx
063c98f6 call      0x0000`0000`063C`8A90
063c98fb mov       %rax,0x48(%rsp)
063c9900 mov       0x30(%rsp),%r8
063c9905 mov       0x47(%rsp),%dl
063c9909 mov       0x48(%rsp),%rcx
063c990e and       $1,%dl
063c9911 call      0x0000`0000`063C`8F20
063c9916 mov       %al,0x27(%rsp)
063c991a jmp       0x0000`0000`063C`993E
063c991c mov       0x28(%rsp),%rax
063c9921 xor       $0xFFFF`FFFF`FFFF`FFFF,%rax
063c9925 mov       %rax,0x68(%rsp)
063c992a movq      $1,0x70(%rsp)
063c9933 add       $1,%rax
063c9937 mov       %rax,0x48(%rsp)
063c993c jmp       0x0000`0000`063C`9900
063c993e mov       0x27(%rsp),%al
063c9942 and       $1,%al
063c9944 movzbl    %al,%eax
063c9947 add       $0x78,%rsp
063c994b ret

core::fmt::impl$37::fmt:
063c9950 sub       $0x48,%rsp
063c9954 mov       %rdx,0x28(%rsp)
063c9959 mov       %rcx,%rax
063c995c mov       0x28(%rsp),%rcx
063c9961 mov       %rax,0x38(%rsp)
063c9966 mov       %rcx,0x40(%rsp)
063c996b lea       0x63D`26C0,%rdx
063c9972 mov       $5,%r8d
063c9978 call      0x0000`0000`063C`0C10
063c997d mov       %al,0x37(%rsp)
063c9981 mov       0x37(%rsp),%al
063c9985 and       $1,%al
063c9987 movzbl    %al,%eax
063c998a add       $0x48,%rsp
063c998e ret

core::fmt::ArgumentV1::new_display<usize>:
063c9990 sub       $0x38,%rsp
063c9994 mov       %rcx,0x30(%rsp)
063c9999 lea       0x63C`98B0,%rdx
063c99a0 call      0x0000`0000`063B`ED00
063c99a5 mov       %rax,0x20(%rsp)
063c99aa mov       %rdx,0x28(%rsp)
063c99af mov       0x28(%rsp),%rdx
063c99b4 mov       0x20(%rsp),%rax
063c99b9 add       $0x38,%rsp
063c99bd ret

core::fmt::ArgumentV1::new_display<u8>:
063c99c0 sub       $0x38,%rsp
063c99c4 mov       %rcx,0x30(%rsp)
063c99c9 lea       0x63C`9770,%rdx
063c99d0 call      0x0000`0000`063B`EEE0
063c99d5 mov       %rax,0x20(%rsp)
063c99da mov       %rdx,0x28(%rsp)
063c99df mov       0x28(%rsp),%rdx
063c99e4 mov       0x20(%rsp),%rax
063c99e9 add       $0x38,%rsp
063c99ed ret

core::fmt::ArgumentV1::new_display<ref$<core::fmt::Arguments> >:
063c99f0 sub       $0x38,%rsp
063c99f4 mov       %rcx,0x30(%rsp)
063c99f9 lea       0x63C`9C00,%rdx
063c9a00 call      0x0000`0000`063B`EE20
063c9a05 mov       %rax,0x20(%rsp)
063c9a0a mov       %rdx,0x28(%rsp)
063c9a0f mov       0x28(%rsp),%rdx
063c9a14 mov       0x20(%rsp),%rax
063c9a19 add       $0x38,%rsp
063c9a1d ret

core::fmt::ArgumentV1::new_display<u32>:
063c9a20 sub       $0x38,%rsp
063c9a24 mov       %rcx,0x30(%rsp)
063c9a29 lea       0x63C`9810,%rdx
063c9a30 call      0x0000`0000`063B`EF40
063c9a35 mov       %rax,0x20(%rsp)
063c9a3a mov       %rdx,0x28(%rsp)
063c9a3f mov       0x28(%rsp),%rdx
063c9a44 mov       0x20(%rsp),%rax
063c9a49 add       $0x38,%rsp
063c9a4d ret

core::fmt::ArgumentV1::new_display<core::fmt::Arguments>:
063c9a50 sub       $0x38,%rsp
063c9a54 mov       %rcx,0x30(%rsp)
063c9a59 lea       0x63B`F140,%rdx
063c9a60 call      0x0000`0000`063B`EDC0
063c9a65 mov       %rax,0x20(%rsp)
063c9a6a mov       %rdx,0x28(%rsp)
063c9a6f mov       0x28(%rsp),%rdx
063c9a74 mov       0x20(%rsp),%rax
063c9a79 add       $0x38,%rsp
063c9a7d ret

core::fmt::ArgumentV1::new_display<str>:
063c9a80 sub       $0x38,%rsp
063c9a84 mov       %rcx,0x30(%rsp)
063c9a89 lea       0x63C`9C30,%rdx
063c9a90 call      0x0000`0000`063B`ECA0
063c9a95 mov       %rax,0x20(%rsp)
063c9a9a mov       %rdx,0x28(%rsp)
063c9a9f mov       0x28(%rsp),%rdx
063c9aa4 mov       0x20(%rsp),%rax
063c9aa9 add       $0x38,%rsp
063c9aad ret

core::fmt::ArgumentV1::new_debug<core::ops::range::Range<usize> >:
063c9ab0 sub       $0x38,%rsp
063c9ab4 mov       %rcx,0x30(%rsp)
063c9ab9 lea       0x63B`79B0,%rdx
063c9ac0 call      0x0000`0000`063B`ED60
063c9ac5 mov       %rax,0x20(%rsp)
063c9aca mov       %rdx,0x28(%rsp)
063c9acf mov       0x28(%rsp),%rdx
063c9ad4 mov       0x20(%rsp),%rax
063c9ad9 add       $0x38,%rsp
063c9add ret

core::fmt::ArgumentV1::new_debug<char>:
063c9ae0 sub       $0x38,%rsp
063c9ae4 mov       %rcx,0x30(%rsp)
063c9ae9 lea       0x63C`0E20,%rdx
063c9af0 call      0x0000`0000`063B`EC40
063c9af5 mov       %rax,0x20(%rsp)
063c9afa mov       %rdx,0x28(%rsp)
063c9aff mov       0x28(%rsp),%rdx
063c9b04 mov       0x20(%rsp),%rax
063c9b09 add       $0x38,%rsp
063c9b0d ret

core::fmt::ArgumentV1::new_debug<ref$<dyn$<core::fmt::Debug> > >:
063c9b10 sub       $0x38,%rsp
063c9b14 mov       %rcx,0x30(%rsp)
063c9b19 lea       0x63C`9BA0,%rdx
063c9b20 call      0x0000`0000`063B`EE80
063c9b25 mov       %rax,0x20(%rsp)
063c9b2a mov       %rdx,0x28(%rsp)
063c9b2f mov       0x28(%rsp),%rdx
063c9b34 mov       0x20(%rsp),%rax
063c9b39 add       $0x38,%rsp
063c9b3d ret

core::fmt::ArgumentV1::new_upper_hex<u32>:
063c9b40 sub       $0x38,%rsp
063c9b44 mov       %rcx,0x30(%rsp)
063c9b49 lea       0x63C`8E40,%rdx
063c9b50 call      0x0000`0000`063B`EF40
063c9b55 mov       %rax,0x20(%rsp)
063c9b5a mov       %rdx,0x28(%rsp)
063c9b5f mov       0x28(%rsp),%rdx
063c9b64 mov       0x20(%rsp),%rax
063c9b69 add       $0x38,%rsp
063c9b6d ret

core::fmt::impl$52::fmt<tuple$<> >:
063c9b70 sub       $0x38,%rsp
063c9b74 mov       %rcx,0x28(%rsp)
063c9b79 mov       %rdx,0x30(%rsp)
063c9b7e mov       (%rcx),%rcx
063c9b81 call      0x0000`0000`063C`1120
063c9b86 mov       %al,0x27(%rsp)
063c9b8a mov       0x27(%rsp),%al
063c9b8e and       $1,%al
063c9b90 movzbl    %al,%eax
063c9b93 add       $0x38,%rsp
063c9b97 ret

core::fmt::impl$52::fmt<dyn$<core::fmt::Debug> >:
063c9ba0 sub       $0x38,%rsp
063c9ba4 mov       %rcx,%rax
063c9ba7 mov       %rax,0x28(%rsp)
063c9bac mov       %rdx,0x30(%rsp)
063c9bb1 mov       (%rax),%rcx
063c9bb4 mov       8(%rax),%rax
063c9bb8 callq     *0x18(%rax)
063c9bbb mov       %al,0x27(%rsp)
063c9bbf mov       0x27(%rsp),%al
063c9bc3 and       $1,%al
063c9bc5 movzbl    %al,%eax
063c9bc8 add       $0x38,%rsp
063c9bcc ret

core::fmt::impl$52::fmt<usize>:
063c9bd0 sub       $0x38,%rsp
063c9bd4 mov       %rcx,0x28(%rsp)
063c9bd9 mov       %rdx,0x30(%rsp)
063c9bde mov       (%rcx),%rcx
063c9be1 call      0x0000`0000`063C`8E80
063c9be6 mov       %al,0x27(%rsp)
063c9bea mov       0x27(%rsp),%al
063c9bee and       $1,%al
063c9bf0 movzbl    %al,%eax
063c9bf3 add       $0x38,%rsp
063c9bf7 ret

core::fmt::impl$54::fmt<core::fmt::Arguments>:
063c9c00 sub       $0x38,%rsp
063c9c04 mov       %rcx,0x28(%rsp)
063c9c09 mov       %rdx,0x30(%rsp)
063c9c0e mov       (%rcx),%rcx
063c9c11 call      0x0000`0000`063B`F140
063c9c16 mov       %al,0x27(%rsp)
063c9c1a mov       0x27(%rsp),%al
063c9c1e and       $1,%al
063c9c20 movzbl    %al,%eax
063c9c23 add       $0x38,%rsp
063c9c27 ret

core::fmt::impl$54::fmt<str>:
063c9c30 sub       $0x38,%rsp
063c9c34 mov       %rdx,%r8
063c9c37 mov       %rcx,%rax
063c9c3a mov       %rax,0x28(%rsp)
063c9c3f mov       %r8,0x30(%rsp)
063c9c44 mov       (%rax),%rcx
063c9c47 mov       8(%rax),%rdx
063c9c4b call      0x0000`0000`063C`0DE0
063c9c50 mov       %al,0x27(%rsp)
063c9c54 mov       0x27(%rsp),%al
063c9c58 and       $1,%al
063c9c5a movzbl    %al,%eax
063c9c5d add       $0x38,%rsp
063c9c61 ret

core::slice::iter::impl$173::next<core::fmt::ArgumentV1>:
063c9c70 sub       $0x98,%rsp
063c9c77 mov       %rcx,0x40(%rsp)
063c9c7c mov       %rcx,0x58(%rsp)
063c9c81 mov       (%rcx),%rcx
063c9c84 call      0x0000`0000`063B`6360
063c9c89 mov       %rax,0x48(%rsp)
063c9c8e mov       0x48(%rsp),%rcx
063c9c93 call      0x0000`0000`063B`67D0
063c9c98 jmp       0x0000`0000`063C`9C9A
063c9c9a mov       $0x10,%eax
063c9c9f cmp       $0,%rax
063c9ca3 jne       0x0000`0000`063C`9CB9
063c9ca5 mov       0x40(%rsp),%rax
063c9caa mov       (%rax),%rcx
063c9cad call      0x0000`0000`063B`6360
063c9cb2 mov       %rax,0x38(%rsp)
063c9cb7 jmp       0x0000`0000`063C`9CC9
063c9cb9 mov       0x40(%rsp),%rax
063c9cbe mov       8(%rax),%rcx
063c9cc2 call      0x0000`0000`063B`6460
063c9cc7 jmp       0x0000`0000`063C`9CA5
063c9cc9 mov       0x38(%rsp),%rax
063c9cce mov       0x40(%rsp),%rcx
063c9cd3 cmp       8(%rcx),%rax
063c9cd7 je        0x0000`0000`063C`9D60
063c9cdd mov       0x40(%rsp),%rax
063c9ce2 mov       %rax,0x68(%rsp)
063c9ce7 movq      $1,0x70(%rsp)
063c9cf0 mov       (%rax),%rcx
063c9cf3 call      0x0000`0000`063B`6360
063c9cf8 mov       %rax,%rcx
063c9cfb mov       0x40(%rsp),%rax
063c9d00 mov       %rcx,0x28(%rsp)
063c9d05 mov       %rcx,0x78(%rsp)
063c9d0a mov       (%rax),%rcx
063c9d0d call      0x0000`0000`063B`6360
063c9d12 mov       %rax,0x80(%rsp)
063c9d1a movq      $1,0x88(%rsp)
063c9d26 add       $0x10,%rax
063c9d2a mov       %rax,0x90(%rsp)
063c9d32 mov       0x90(%rsp),%rcx
063c9d3a call      0x0000`0000`063B`62C0
063c9d3f mov       0x40(%rsp),%rcx
063c9d44 mov       %rax,%rdx
063c9d47 mov       0x28(%rsp),%rax
063c9d4c mov       %rdx,(%rcx)
063c9d4f mov       %rax,0x60(%rsp)
063c9d54 mov       0x60(%rsp),%rax
063c9d59 mov       %rax,0x30(%rsp)
063c9d5e jmp       0x0000`0000`063C`9D76
063c9d60 movq      $0,0x50(%rsp)
063c9d69 mov       0x50(%rsp),%rax
063c9d6e add       $0x98,%rsp
063c9d75 ret
063c9d76 mov       0x30(%rsp),%rax
063c9d7b mov       %rax,0x50(%rsp)
063c9d80 jmp       0x0000`0000`063C`9D69

core::slice::iter::impl$173::next<u8>:
063c9d90 sub       $0x98,%rsp
063c9d97 mov       %rcx,0x40(%rsp)
063c9d9c mov       %rcx,0x58(%rsp)
063c9da1 mov       (%rcx),%rcx
063c9da4 call      0x0000`0000`063B`6340
063c9da9 mov       %rax,0x48(%rsp)
063c9dae mov       0x48(%rsp),%rcx
063c9db3 call      0x0000`0000`063B`6890
063c9db8 jmp       0x0000`0000`063C`9DBA
063c9dba mov       $1,%eax
063c9dbf cmp       $0,%rax
063c9dc3 jne       0x0000`0000`063C`9DD9
063c9dc5 mov       0x40(%rsp),%rax
063c9dca mov       (%rax),%rcx
063c9dcd call      0x0000`0000`063B`6340
063c9dd2 mov       %rax,0x38(%rsp)
063c9dd7 jmp       0x0000`0000`063C`9DE9
063c9dd9 mov       0x40(%rsp),%rax
063c9dde mov       8(%rax),%rcx
063c9de2 call      0x0000`0000`063B`63A0
063c9de7 jmp       0x0000`0000`063C`9DC5
063c9de9 mov       0x38(%rsp),%rax
063c9dee mov       0x40(%rsp),%rcx
063c9df3 cmp       8(%rcx),%rax
063c9df7 je        0x0000`0000`063C`9E80
063c9dfd mov       0x40(%rsp),%rax
063c9e02 mov       %rax,0x68(%rsp)
063c9e07 movq      $1,0x70(%rsp)
063c9e10 mov       (%rax),%rcx
063c9e13 call      0x0000`0000`063B`6340
063c9e18 mov       %rax,%rcx
063c9e1b mov       0x40(%rsp),%rax
063c9e20 mov       %rcx,0x28(%rsp)
063c9e25 mov       %rcx,0x78(%rsp)
063c9e2a mov       (%rax),%rcx
063c9e2d call      0x0000`0000`063B`6340
063c9e32 mov       %rax,0x80(%rsp)
063c9e3a movq      $1,0x88(%rsp)
063c9e46 add       $1,%rax
063c9e4a mov       %rax,0x90(%rsp)
063c9e52 mov       0x90(%rsp),%rcx
063c9e5a call      0x0000`0000`063B`6280
063c9e5f mov       0x40(%rsp),%rcx
063c9e64 mov       %rax,%rdx
063c9e67 mov       0x28(%rsp),%rax
063c9e6c mov       %rdx,(%rcx)
063c9e6f mov       %rax,0x60(%rsp)
063c9e74 mov       0x60(%rsp),%rax
063c9e79 mov       %rax,0x30(%rsp)
063c9e7e jmp       0x0000`0000`063C`9E96
063c9e80 movq      $0,0x50(%rsp)
063c9e89 mov       0x50(%rsp),%rax
063c9e8e add       $0x98,%rsp
063c9e95 ret
063c9e96 mov       0x30(%rsp),%rax
063c9e9b mov       %rax,0x50(%rsp)
063c9ea0 jmp       0x0000`0000`063C`9E89

core::slice::iter::impl$173::next<array$<usize,4> >:
063c9eb0 sub       $0x98,%rsp
063c9eb7 mov       %rcx,0x40(%rsp)
063c9ebc mov       %rcx,0x58(%rsp)
063c9ec1 mov       (%rcx),%rcx
063c9ec4 call      0x0000`0000`063B`6330
063c9ec9 mov       %rax,0x48(%rsp)
063c9ece mov       0x48(%rsp),%rcx
063c9ed3 call      0x0000`0000`063B`68C0
063c9ed8 jmp       0x0000`0000`063C`9EDA
063c9eda mov       $0x20,%eax
063c9edf cmp       $0,%rax
063c9ee3 jne       0x0000`0000`063C`9EF9
063c9ee5 mov       0x40(%rsp),%rax
063c9eea mov       (%rax),%rcx
063c9eed call      0x0000`0000`063B`6330
063c9ef2 mov       %rax,0x38(%rsp)
063c9ef7 jmp       0x0000`0000`063C`9F09
063c9ef9 mov       0x40(%rsp),%rax
063c9efe mov       8(%rax),%rcx
063c9f02 call      0x0000`0000`063B`6430
063c9f07 jmp       0x0000`0000`063C`9EE5
063c9f09 mov       0x38(%rsp),%rax
063c9f0e mov       0x40(%rsp),%rcx
063c9f13 cmp       8(%rcx),%rax
063c9f17 je        0x0000`0000`063C`9FA0
063c9f1d mov       0x40(%rsp),%rax
063c9f22 mov       %rax,0x68(%rsp)
063c9f27 movq      $1,0x70(%rsp)
063c9f30 mov       (%rax),%rcx
063c9f33 call      0x0000`0000`063B`6330
063c9f38 mov       %rax,%rcx
063c9f3b mov       0x40(%rsp),%rax
063c9f40 mov       %rcx,0x28(%rsp)
063c9f45 mov       %rcx,0x78(%rsp)
063c9f4a mov       (%rax),%rcx
063c9f4d call      0x0000`0000`063B`6330
063c9f52 mov       %rax,0x80(%rsp)
063c9f5a movq      $1,0x88(%rsp)
063c9f66 add       $0x20,%rax
063c9f6a mov       %rax,0x90(%rsp)
063c9f72 mov       0x90(%rsp),%rcx
063c9f7a call      0x0000`0000`063B`62A0
063c9f7f mov       0x40(%rsp),%rcx
063c9f84 mov       %rax,%rdx
063c9f87 mov       0x28(%rsp),%rax
063c9f8c mov       %rdx,(%rcx)
063c9f8f mov       %rax,0x60(%rsp)
063c9f94 mov       0x60(%rsp),%rax
063c9f99 mov       %rax,0x30(%rsp)
063c9f9e jmp       0x0000`0000`063C`9FB6
063c9fa0 movq      $0,0x50(%rsp)
063c9fa9 mov       0x50(%rsp),%rax
063c9fae add       $0x98,%rsp
063c9fb5 ret
063c9fb6 mov       0x30(%rsp),%rax
063c9fbb mov       %rax,0x50(%rsp)
063c9fc0 jmp       0x0000`0000`063C`9FA9

core::slice::iter::impl$173::next<usize>:
063c9fd0 sub       $0x98,%rsp
063c9fd7 mov       %rcx,0x40(%rsp)
063c9fdc mov       %rcx,0x58(%rsp)
063c9fe1 mov       (%rcx),%rcx
063c9fe4 call      0x0000`0000`063B`6320
063c9fe9 mov       %rax,0x48(%rsp)
063c9fee mov       0x48(%rsp),%rcx
063c9ff3 call      0x0000`0000`063B`6860
063c9ff8 jmp       0x0000`0000`063C`9FFA
063c9ffa mov       $8,%eax
063c9fff cmp       $0,%rax
063ca003 jne       0x0000`0000`063C`A019
063ca005 mov       0x40(%rsp),%rax
063ca00a mov       (%rax),%rcx
063ca00d call      0x0000`0000`063B`6320
063ca012 mov       %rax,0x38(%rsp)
063ca017 jmp       0x0000`0000`063C`A029
063ca019 mov       0x40(%rsp),%rax
063ca01e mov       8(%rax),%rcx
063ca022 call      0x0000`0000`063B`6370
063ca027 jmp       0x0000`0000`063C`A005
063ca029 mov       0x38(%rsp),%rax
063ca02e mov       0x40(%rsp),%rcx
063ca033 cmp       8(%rcx),%rax
063ca037 je        0x0000`0000`063C`A0C0
063ca03d mov       0x40(%rsp),%rax
063ca042 mov       %rax,0x68(%rsp)
063ca047 movq      $1,0x70(%rsp)
063ca050 mov       (%rax),%rcx
063ca053 call      0x0000`0000`063B`6320
063ca058 mov       %rax,%rcx
063ca05b mov       0x40(%rsp),%rax
063ca060 mov       %rcx,0x28(%rsp)
063ca065 mov       %rcx,0x78(%rsp)
063ca06a mov       (%rax),%rcx
063ca06d call      0x0000`0000`063B`6320
063ca072 mov       %rax,0x80(%rsp)
063ca07a movq      $1,0x88(%rsp)
063ca086 add       $8,%rax
063ca08a mov       %rax,0x90(%rsp)
063ca092 mov       0x90(%rsp),%rcx
063ca09a call      0x0000`0000`063B`6260
063ca09f mov       0x40(%rsp),%rcx
063ca0a4 mov       %rax,%rdx
063ca0a7 mov       0x28(%rsp),%rax
063ca0ac mov       %rdx,(%rcx)
063ca0af mov       %rax,0x60(%rsp)
063ca0b4 mov       0x60(%rsp),%rax
063ca0b9 mov       %rax,0x30(%rsp)
063ca0be jmp       0x0000`0000`063C`A0D6
063ca0c0 movq      $0,0x50(%rsp)
063ca0c9 mov       0x50(%rsp),%rax
063ca0ce add       $0x98,%rsp
063ca0d5 ret
063ca0d6 mov       0x30(%rsp),%rax
063ca0db mov       %rax,0x50(%rsp)
063ca0e0 jmp       0x0000`0000`063C`A0C9

core::slice::iter::impl$173::next<tuple$<u8,u8> >:
063ca0f0 sub       $0x98,%rsp
063ca0f7 mov       %rcx,0x40(%rsp)
063ca0fc mov       %rcx,0x58(%rsp)
063ca101 mov       (%rcx),%rcx
063ca104 call      0x0000`0000`063B`6310
063ca109 mov       %rax,0x48(%rsp)
063ca10e mov       0x48(%rsp),%rcx
063ca113 call      0x0000`0000`063B`68F0
063ca118 jmp       0x0000`0000`063C`A11A
063ca11a mov       $2,%eax
063ca11f cmp       $0,%rax
063ca123 jne       0x0000`0000`063C`A139
063ca125 mov       0x40(%rsp),%rax
063ca12a mov       (%rax),%rcx
063ca12d call      0x0000`0000`063B`6310
063ca132 mov       %rax,0x38(%rsp)
063ca137 jmp       0x0000`0000`063C`A149
063ca139 mov       0x40(%rsp),%rax
063ca13e mov       8(%rax),%rcx
063ca142 call      0x0000`0000`063B`6400
063ca147 jmp       0x0000`0000`063C`A125
063ca149 mov       0x38(%rsp),%rax
063ca14e mov       0x40(%rsp),%rcx
063ca153 cmp       8(%rcx),%rax
063ca157 je        0x0000`0000`063C`A1E0
063ca15d mov       0x40(%rsp),%rax
063ca162 mov       %rax,0x68(%rsp)
063ca167 movq      $1,0x70(%rsp)
063ca170 mov       (%rax),%rcx
063ca173 call      0x0000`0000`063B`6310
063ca178 mov       %rax,%rcx
063ca17b mov       0x40(%rsp),%rax
063ca180 mov       %rcx,0x28(%rsp)
063ca185 mov       %rcx,0x78(%rsp)
063ca18a mov       (%rax),%rcx
063ca18d call      0x0000`0000`063B`6310
063ca192 mov       %rax,0x80(%rsp)
063ca19a movq      $1,0x88(%rsp)
063ca1a6 add       $2,%rax
063ca1aa mov       %rax,0x90(%rsp)
063ca1b2 mov       0x90(%rsp),%rcx
063ca1ba call      0x0000`0000`063B`62E0
063ca1bf mov       0x40(%rsp),%rcx
063ca1c4 mov       %rax,%rdx
063ca1c7 mov       0x28(%rsp),%rax
063ca1cc mov       %rdx,(%rcx)
063ca1cf mov       %rax,0x60(%rsp)
063ca1d4 mov       0x60(%rsp),%rax
063ca1d9 mov       %rax,0x30(%rsp)
063ca1de jmp       0x0000`0000`063C`A1F6
063ca1e0 movq      $0,0x50(%rsp)
063ca1e9 mov       0x50(%rsp),%rax
063ca1ee add       $0x98,%rsp
063ca1f5 ret
063ca1f6 mov       0x30(%rsp),%rax
063ca1fb mov       %rax,0x50(%rsp)
063ca200 jmp       0x0000`0000`063C`A1E9

core::slice::iter::impl$173::next<core::fmt::rt::v1::Argument>:
063ca210 sub       $0x98,%rsp
063ca217 mov       %rcx,0x40(%rsp)
063ca21c mov       %rcx,0x58(%rsp)
063ca221 mov       (%rcx),%rcx
063ca224 call      0x0000`0000`063B`6300
063ca229 mov       %rax,0x48(%rsp)
063ca22e mov       0x48(%rsp),%rcx
063ca233 call      0x0000`0000`063B`6800
063ca238 jmp       0x0000`0000`063C`A23A
063ca23a mov       $0x38,%eax
063ca23f cmp       $0,%rax
063ca243 jne       0x0000`0000`063C`A259
063ca245 mov       0x40(%rsp),%rax
063ca24a mov       (%rax),%rcx
063ca24d call      0x0000`0000`063B`6300
063ca252 mov       %rax,0x38(%rsp)
063ca257 jmp       0x0000`0000`063C`A269
063ca259 mov       0x40(%rsp),%rax
063ca25e mov       8(%rax),%rcx
063ca262 call      0x0000`0000`063B`63D0
063ca267 jmp       0x0000`0000`063C`A245
063ca269 mov       0x38(%rsp),%rax
063ca26e mov       0x40(%rsp),%rcx
063ca273 cmp       8(%rcx),%rax
063ca277 je        0x0000`0000`063C`A300
063ca27d mov       0x40(%rsp),%rax
063ca282 mov       %rax,0x68(%rsp)
063ca287 movq      $1,0x70(%rsp)
063ca290 mov       (%rax),%rcx
063ca293 call      0x0000`0000`063B`6300
063ca298 mov       %rax,%rcx
063ca29b mov       0x40(%rsp),%rax
063ca2a0 mov       %rcx,0x28(%rsp)
063ca2a5 mov       %rcx,0x78(%rsp)
063ca2aa mov       (%rax),%rcx
063ca2ad call      0x0000`0000`063B`6300
063ca2b2 mov       %rax,0x80(%rsp)
063ca2ba movq      $1,0x88(%rsp)
063ca2c6 add       $0x38,%rax
063ca2ca mov       %rax,0x90(%rsp)
063ca2d2 mov       0x90(%rsp),%rcx
063ca2da call      0x0000`0000`063B`6240
063ca2df mov       0x40(%rsp),%rcx
063ca2e4 mov       %rax,%rdx
063ca2e7 mov       0x28(%rsp),%rax
063ca2ec mov       %rdx,(%rcx)
063ca2ef mov       %rax,0x60(%rsp)
063ca2f4 mov       0x60(%rsp),%rax
063ca2f9 mov       %rax,0x30(%rsp)
063ca2fe jmp       0x0000`0000`063C`A316
063ca300 movq      $0,0x50(%rsp)
063ca309 mov       0x50(%rsp),%rax
063ca30e add       $0x98,%rsp
063ca315 ret
063ca316 mov       0x30(%rsp),%rax
063ca31b mov       %rax,0x50(%rsp)
063ca320 jmp       0x0000`0000`063C`A309

core::slice::iter::impl$173::position<u8,core::slice::memchr::memchr_general_case::closure_env$0>:
063ca330 sub       $0xF8,%rsp
063ca337 mov       %rcx,0x60(%rsp)
063ca33c mov       %rdx,0x78(%rsp)
063ca341 mov       %rcx,0xB0(%rsp)
063ca349 mov       (%rcx),%rcx
063ca34c mov       %rcx,0x68(%rsp)
063ca351 mov       %rcx,0xB8(%rsp)
063ca359 call      0x0000`0000`063B`6340
063ca35e mov       %rax,0x70(%rsp)
063ca363 mov       0x70(%rsp),%rax
063ca368 mov       %rax,0xE0(%rsp)
063ca370 movq      $1,0xC0(%rsp)
063ca37c mov       $1,%eax
063ca381 cmp       $0,%rax
063ca385 jne       0x0000`0000`063C`A3A6
063ca387 mov       0x68(%rsp),%rcx
063ca38c mov       0x60(%rsp),%rax
063ca391 mov       8(%rax),%rax
063ca395 mov       %rax,0x50(%rsp)
063ca39a call      0x0000`0000`063B`6340
063ca39f mov       %rax,0x58(%rsp)
063ca3a4 jmp       0x0000`0000`063C`A40C
063ca3a6 mov       0x68(%rsp),%rcx
063ca3ab mov       0x60(%rsp),%rax
063ca3b0 mov       8(%rax),%rax
063ca3b4 mov       %rax,0x40(%rsp)
063ca3b9 call      0x0000`0000`063B`6340
063ca3be mov       %rax,0x48(%rsp)
063ca3c3 mov       0x48(%rsp),%rcx
063ca3c8 mov       0x40(%rsp),%rax
063ca3cd sub       %rcx,%rax
063ca3d0 mov       %rax,0xC8(%rsp)
063ca3d8 mov       0xC8(%rsp),%rax
063ca3e0 mov       %rax,0x38(%rsp)
063ca3e5 mov       %rax,0xD0(%rsp)
063ca3ed mov       0x38(%rsp),%rax
063ca3f2 shr       $0,%rax
063ca3f6 mov       %rax,0x90(%rsp)
063ca3fe movq      $0,0x98(%rsp)
063ca40a jmp       0x0000`0000`063C`A433
063ca40c mov       0x58(%rsp),%rcx
063ca411 mov       0x50(%rsp),%rax
063ca416 mov       %rax,0xE8(%rsp)
063ca41e mov       %rcx,0xF0(%rsp)
063ca426 sub       %rcx,%rax
063ca429 mov       %rax,0x90(%rsp)
063ca431 jmp       0x0000`0000`063C`A3FE
063ca433 mov       0x60(%rsp),%rcx
063ca438 call      0x0000`0000`063C`9D90
063ca43d mov       %rax,0xA0(%rsp)
063ca445 mov       $1,%eax
063ca44a xor       %ecx,%ecx
063ca44c cmpq      $0,0xA0(%rsp)
063ca455 cmove     %rcx,%rax
063ca459 cmp       $1,%rax
063ca45d jne       0x0000`0000`063C`A48F
063ca45f mov       0xA0(%rsp),%rax
063ca467 mov       %rax,0xD8(%rsp)
063ca46f mov       %rax,0xA8(%rsp)
063ca477 mov       0xA8(%rsp),%rdx
063ca47f lea       0x78(%rsp),%rcx
063ca484 call      0x0000`0000`063C`1770
063ca489 mov       %al,0x37(%rsp)
063ca48d jmp       0x0000`0000`063C`A4B3
063ca48f movq      $0,0x80(%rsp)
063ca49b mov       0x80(%rsp),%rax
063ca4a3 mov       0x88(%rsp),%rdx
063ca4ab add       $0xF8,%rsp
063ca4b2 ret
063ca4b3 mov       0x37(%rsp),%al
063ca4b7 test      $1,%al
063ca4b9 jne       0x0000`0000`063C`A4D7
063ca4bb jmp       0x0000`0000`063C`A4BD
063ca4bd mov       0x98(%rsp),%rax
063ca4c5 add       $1,%rax
063ca4c9 mov       %rax,0x28(%rsp)
063ca4ce setb      %al
063ca4d1 test      $1,%al
063ca4d3 jne       0x0000`0000`063C`A50F
063ca4d5 jmp       0x0000`0000`063C`A4FD
063ca4d7 mov       0x98(%rsp),%rax
063ca4df mov       0x98(%rsp),%rax
063ca4e7 mov       %rax,0x88(%rsp)
063ca4ef movq      $1,0x80(%rsp)
063ca4fb jmp       0x0000`0000`063C`A49B
063ca4fd mov       0x28(%rsp),%rax
063ca502 mov       %rax,0x98(%rsp)
063ca50a jmp       0x0000`0000`063C`A433
063ca50f lea       0x63C`F3E0,%rcx
063ca516 lea       0x63D`26C8,%r8
063ca51d mov       $0x1C,%edx
063ca522 call      0x0000`0000`063B`9FF0
063ca527 ud2

core::slice::iter::impl$173::position<u8,core::slice::memchr::memchr::closure_env$0>:
063ca530 sub       $0xF8,%rsp
063ca537 mov       %rcx,0x60(%rsp)
063ca53c mov       %rdx,0x78(%rsp)
063ca541 mov       %rcx,0xB0(%rsp)
063ca549 mov       (%rcx),%rcx
063ca54c mov       %rcx,0x68(%rsp)
063ca551 mov       %rcx,0xB8(%rsp)
063ca559 call      0x0000`0000`063B`6340
063ca55e mov       %rax,0x70(%rsp)
063ca563 mov       0x70(%rsp),%rax
063ca568 mov       %rax,0xE0(%rsp)
063ca570 movq      $1,0xC0(%rsp)
063ca57c mov       $1,%eax
063ca581 cmp       $0,%rax
063ca585 jne       0x0000`0000`063C`A5A6
063ca587 mov       0x68(%rsp),%rcx
063ca58c mov       0x60(%rsp),%rax
063ca591 mov       8(%rax),%rax
063ca595 mov       %rax,0x50(%rsp)
063ca59a call      0x0000`0000`063B`6340
063ca59f mov       %rax,0x58(%rsp)
063ca5a4 jmp       0x0000`0000`063C`A60C
063ca5a6 mov       0x68(%rsp),%rcx
063ca5ab mov       0x60(%rsp),%rax
063ca5b0 mov       8(%rax),%rax
063ca5b4 mov       %rax,0x40(%rsp)
063ca5b9 call      0x0000`0000`063B`6340
063ca5be mov       %rax,0x48(%rsp)
063ca5c3 mov       0x48(%rsp),%rcx
063ca5c8 mov       0x40(%rsp),%rax
063ca5cd sub       %rcx,%rax
063ca5d0 mov       %rax,0xC8(%rsp)
063ca5d8 mov       0xC8(%rsp),%rax
063ca5e0 mov       %rax,0x38(%rsp)
063ca5e5 mov       %rax,0xD0(%rsp)
063ca5ed mov       0x38(%rsp),%rax
063ca5f2 shr       $0,%rax
063ca5f6 mov       %rax,0x90(%rsp)
063ca5fe movq      $0,0x98(%rsp)
063ca60a jmp       0x0000`0000`063C`A633
063ca60c mov       0x58(%rsp),%rcx
063ca611 mov       0x50(%rsp),%rax
063ca616 mov       %rax,0xE8(%rsp)
063ca61e mov       %rcx,0xF0(%rsp)
063ca626 sub       %rcx,%rax
063ca629 mov       %rax,0x90(%rsp)
063ca631 jmp       0x0000`0000`063C`A5FE
063ca633 mov       0x60(%rsp),%rcx
063ca638 call      0x0000`0000`063C`9D90
063ca63d mov       %rax,0xA0(%rsp)
063ca645 mov       $1,%eax
063ca64a xor       %ecx,%ecx
063ca64c cmpq      $0,0xA0(%rsp)
063ca655 cmove     %rcx,%rax
063ca659 cmp       $1,%rax
063ca65d jne       0x0000`0000`063C`A68F
063ca65f mov       0xA0(%rsp),%rax
063ca667 mov       %rax,0xD8(%rsp)
063ca66f mov       %rax,0xA8(%rsp)
063ca677 mov       0xA8(%rsp),%rdx
063ca67f lea       0x78(%rsp),%rcx
063ca684 call      0x0000`0000`063C`12B0
063ca689 mov       %al,0x37(%rsp)
063ca68d jmp       0x0000`0000`063C`A6B3
063ca68f movq      $0,0x80(%rsp)
063ca69b mov       0x80(%rsp),%rax
063ca6a3 mov       0x88(%rsp),%rdx
063ca6ab add       $0xF8,%rsp
063ca6b2 ret
063ca6b3 mov       0x37(%rsp),%al
063ca6b7 test      $1,%al
063ca6b9 jne       0x0000`0000`063C`A6D7
063ca6bb jmp       0x0000`0000`063C`A6BD
063ca6bd mov       0x98(%rsp),%rax
063ca6c5 add       $1,%rax
063ca6c9 mov       %rax,0x28(%rsp)
063ca6ce setb      %al
063ca6d1 test      $1,%al
063ca6d3 jne       0x0000`0000`063C`A70F
063ca6d5 jmp       0x0000`0000`063C`A6FD
063ca6d7 mov       0x98(%rsp),%rax
063ca6df mov       0x98(%rsp),%rax
063ca6e7 mov       %rax,0x88(%rsp)
063ca6ef movq      $1,0x80(%rsp)
063ca6fb jmp       0x0000`0000`063C`A69B
063ca6fd mov       0x28(%rsp),%rax
063ca702 mov       %rax,0x98(%rsp)
063ca70a jmp       0x0000`0000`063C`A633
063ca70f lea       0x63C`F3E0,%rcx
063ca716 lea       0x63D`26C8,%r8
063ca71d mov       $0x1C,%edx
063ca722 call      0x0000`0000`063B`9FF0
063ca727 ud2

core::slice::iter::impl$173::position<u8,core::slice::memchr::memchr_general_case::closure_env$1>:
063ca730 sub       $0xF8,%rsp
063ca737 mov       %rcx,0x60(%rsp)
063ca73c mov       %rdx,0x78(%rsp)
063ca741 mov       %rcx,0xB0(%rsp)
063ca749 mov       (%rcx),%rcx
063ca74c mov       %rcx,0x68(%rsp)
063ca751 mov       %rcx,0xB8(%rsp)
063ca759 call      0x0000`0000`063B`6340
063ca75e mov       %rax,0x70(%rsp)
063ca763 mov       0x70(%rsp),%rax
063ca768 mov       %rax,0xE0(%rsp)
063ca770 movq      $1,0xC0(%rsp)
063ca77c mov       $1,%eax
063ca781 cmp       $0,%rax
063ca785 jne       0x0000`0000`063C`A7A6
063ca787 mov       0x68(%rsp),%rcx
063ca78c mov       0x60(%rsp),%rax
063ca791 mov       8(%rax),%rax
063ca795 mov       %rax,0x50(%rsp)
063ca79a call      0x0000`0000`063B`6340
063ca79f mov       %rax,0x58(%rsp)
063ca7a4 jmp       0x0000`0000`063C`A80C
063ca7a6 mov       0x68(%rsp),%rcx
063ca7ab mov       0x60(%rsp),%rax
063ca7b0 mov       8(%rax),%rax
063ca7b4 mov       %rax,0x40(%rsp)
063ca7b9 call      0x0000`0000`063B`6340
063ca7be mov       %rax,0x48(%rsp)
063ca7c3 mov       0x48(%rsp),%rcx
063ca7c8 mov       0x40(%rsp),%rax
063ca7cd sub       %rcx,%rax
063ca7d0 mov       %rax,0xC8(%rsp)
063ca7d8 mov       0xC8(%rsp),%rax
063ca7e0 mov       %rax,0x38(%rsp)
063ca7e5 mov       %rax,0xD0(%rsp)
063ca7ed mov       0x38(%rsp),%rax
063ca7f2 shr       $0,%rax
063ca7f6 mov       %rax,0x90(%rsp)
063ca7fe movq      $0,0x98(%rsp)
063ca80a jmp       0x0000`0000`063C`A833
063ca80c mov       0x58(%rsp),%rcx
063ca811 mov       0x50(%rsp),%rax
063ca816 mov       %rax,0xE8(%rsp)
063ca81e mov       %rcx,0xF0(%rsp)
063ca826 sub       %rcx,%rax
063ca829 mov       %rax,0x90(%rsp)
063ca831 jmp       0x0000`0000`063C`A7FE
063ca833 mov       0x60(%rsp),%rcx
063ca838 call      0x0000`0000`063C`9D90
063ca83d mov       %rax,0xA0(%rsp)
063ca845 mov       $1,%eax
063ca84a xor       %ecx,%ecx
063ca84c cmpq      $0,0xA0(%rsp)
063ca855 cmove     %rcx,%rax
063ca859 cmp       $1,%rax
063ca85d jne       0x0000`0000`063C`A88F
063ca85f mov       0xA0(%rsp),%rax
063ca867 mov       %rax,0xD8(%rsp)
063ca86f mov       %rax,0xA8(%rsp)
063ca877 mov       0xA8(%rsp),%rdx
063ca87f lea       0x78(%rsp),%rcx
063ca884 call      0x0000`0000`063C`17A0
063ca889 mov       %al,0x37(%rsp)
063ca88d jmp       0x0000`0000`063C`A8B3
063ca88f movq      $0,0x80(%rsp)
063ca89b mov       0x80(%rsp),%rax
063ca8a3 mov       0x88(%rsp),%rdx
063ca8ab add       $0xF8,%rsp
063ca8b2 ret
063ca8b3 mov       0x37(%rsp),%al
063ca8b7 test      $1,%al
063ca8b9 jne       0x0000`0000`063C`A8D7
063ca8bb jmp       0x0000`0000`063C`A8BD
063ca8bd mov       0x98(%rsp),%rax
063ca8c5 add       $1,%rax
063ca8c9 mov       %rax,0x28(%rsp)
063ca8ce setb      %al
063ca8d1 test      $1,%al
063ca8d3 jne       0x0000`0000`063C`A90F
063ca8d5 jmp       0x0000`0000`063C`A8FD
063ca8d7 mov       0x98(%rsp),%rax
063ca8df mov       0x98(%rsp),%rax
063ca8e7 mov       %rax,0x88(%rsp)
063ca8ef movq      $1,0x80(%rsp)
063ca8fb jmp       0x0000`0000`063C`A89B
063ca8fd mov       0x28(%rsp),%rax
063ca902 mov       %rax,0x98(%rsp)
063ca90a jmp       0x0000`0000`063C`A833
063ca90f lea       0x63C`F3E0,%rcx
063ca916 lea       0x63D`26C8,%r8
063ca91d mov       $0x1C,%edx
063ca922 call      0x0000`0000`063B`9FF0
063ca927 ud2

core::slice::iter::impl$173::rposition<u8,core::str::impl$0::floor_char_boundary::closure_env$0>:
063ca930 sub       $0xF8,%rsp
063ca937 mov       %rcx,0x60(%rsp)
063ca93c mov       %rcx,0xB0(%rsp)
063ca944 mov       (%rcx),%rcx
063ca947 mov       %rcx,0x68(%rsp)
063ca94c mov       %rcx,0xB8(%rsp)
063ca954 call      0x0000`0000`063B`6340
063ca959 mov       %rax,0x70(%rsp)
063ca95e mov       0x70(%rsp),%rax
063ca963 mov       %rax,0xE0(%rsp)
063ca96b movq      $1,0xC0(%rsp)
063ca977 mov       $1,%eax
063ca97c cmp       $0,%rax
063ca980 jne       0x0000`0000`063C`A9A1
063ca982 mov       0x68(%rsp),%rcx
063ca987 mov       0x60(%rsp),%rax
063ca98c mov       8(%rax),%rax
063ca990 mov       %rax,0x50(%rsp)
063ca995 call      0x0000`0000`063B`6340
063ca99a mov       %rax,0x58(%rsp)
063ca99f jmp       0x0000`0000`063C`AA0B
063ca9a1 mov       0x68(%rsp),%rcx
063ca9a6 mov       0x60(%rsp),%rax
063ca9ab mov       8(%rax),%rax
063ca9af mov       %rax,0x40(%rsp)
063ca9b4 call      0x0000`0000`063B`6340
063ca9b9 mov       %rax,0x48(%rsp)
063ca9be mov       0x48(%rsp),%rcx
063ca9c3 mov       0x40(%rsp),%rax
063ca9c8 sub       %rcx,%rax
063ca9cb mov       %rax,0xC8(%rsp)
063ca9d3 mov       0xC8(%rsp),%rax
063ca9db mov       %rax,0x38(%rsp)
063ca9e0 mov       %rax,0xD0(%rsp)
063ca9e8 mov       0x38(%rsp),%rax
063ca9ed shr       $0,%rax
063ca9f1 mov       %rax,0x90(%rsp)
063ca9f9 mov       0x90(%rsp),%rax
063caa01 mov       %rax,0x98(%rsp)
063caa09 jmp       0x0000`0000`063C`AA32
063caa0b mov       0x58(%rsp),%rcx
063caa10 mov       0x50(%rsp),%rax
063caa15 mov       %rax,0xE8(%rsp)
063caa1d mov       %rcx,0xF0(%rsp)
063caa25 sub       %rcx,%rax
063caa28 mov       %rax,0x90(%rsp)
063caa30 jmp       0x0000`0000`063C`A9F9
063caa32 mov       0x60(%rsp),%rcx
063caa37 call      0x0000`0000`063C`AB40
063caa3c mov       %rax,0xA0(%rsp)
063caa44 mov       $1,%eax
063caa49 xor       %ecx,%ecx
063caa4b cmpq      $0,0xA0(%rsp)
063caa54 cmove     %rcx,%rax
063caa58 cmp       $1,%rax
063caa5c jne       0x0000`0000`063C`AA8D
063caa5e mov       0xA0(%rsp),%rax
063caa66 mov       %rax,0x28(%rsp)
063caa6b mov       %rax,0xD8(%rsp)
063caa73 mov       0x98(%rsp),%rax
063caa7b sub       $1,%rax
063caa7f mov       %rax,0x30(%rsp)
063caa84 setb      %al
063caa87 test      $1,%al
063caa89 jne       0x0000`0000`063C`AAE5
063caa8b jmp       0x0000`0000`063C`AAB3
063caa8d jmp       0x0000`0000`063C`AA8F
063caa8f movq      $0,0x80(%rsp)
063caa9b mov       0x80(%rsp),%rax
063caaa3 mov       0x88(%rsp),%rdx
063caaab add       $0xF8,%rsp
063caab2 ret
063caab3 mov       0x28(%rsp),%rax
063caab8 mov       0x30(%rsp),%rcx
063caabd mov       %rcx,0x98(%rsp)
063caac5 mov       %rax,0xA8(%rsp)
063caacd mov       0xA8(%rsp),%rdx
063caad5 lea       0x78(%rsp),%rcx
063caada call      0x0000`0000`063C`7990
063caadf mov       %al,0x27(%rsp)
063caae3 jmp       0x0000`0000`063C`AAFF
063caae5 lea       0x63C`F3B0,%rcx
063caaec lea       0x63D`26C8,%r8
063caaf3 mov       $0x21,%edx
063caaf8 call      0x0000`0000`063B`9FF0
063caafd ud2
063caaff mov       0x27(%rsp),%al
063cab03 test      $1,%al
063cab05 jne       0x0000`0000`063C`AB0E
063cab07 jmp       0x0000`0000`063C`AB09
063cab09 jmp       0x0000`0000`063C`AA32
063cab0e mov       0x98(%rsp),%rax
063cab16 mov       0x98(%rsp),%rax
063cab1e mov       %rax,0x88(%rsp)
063cab26 movq      $1,0x80(%rsp)
063cab32 jmp       0x0000`0000`063C`AA9B

core::slice::iter::impl$174::next_back<u8>:
063cab40 sub       $0x88,%rsp
063cab47 mov       %rcx,0x38(%rsp)
063cab4c mov       %rcx,0x50(%rsp)
063cab51 mov       (%rcx),%rcx
063cab54 call      0x0000`0000`063B`6340
063cab59 mov       %rax,0x40(%rsp)
063cab5e mov       0x40(%rsp),%rcx
063cab63 call      0x0000`0000`063B`6890
063cab68 jmp       0x0000`0000`063C`AB6A
063cab6a mov       $1,%eax
063cab6f cmp       $0,%rax
063cab73 jne       0x0000`0000`063C`AB89
063cab75 mov       0x38(%rsp),%rax
063cab7a mov       (%rax),%rcx
063cab7d call      0x0000`0000`063B`6340
063cab82 mov       %rax,0x30(%rsp)
063cab87 jmp       0x0000`0000`063C`AB99
063cab89 mov       0x38(%rsp),%rax
063cab8e mov       8(%rax),%rcx
063cab92 call      0x0000`0000`063B`63A0
063cab97 jmp       0x0000`0000`063C`AB75
063cab99 mov       0x30(%rsp),%rax
063cab9e mov       0x38(%rsp),%rcx
063caba3 cmp       8(%rcx),%rax
063caba7 je        0x0000`0000`063C`AC30
063cabad mov       0x38(%rsp),%rax
063cabb2 mov       %rax,0x60(%rsp)
063cabb7 movq      $1,0x68(%rsp)
063cabc0 mov       8(%rax),%rax
063cabc4 mov       %rax,0x28(%rsp)
063cabc9 xor       %eax,%eax
063cabcb test      $1,%al
063cabcd jne       0x0000`0000`063C`ABD1
063cabcf jmp       0x0000`0000`063C`ABEB
063cabd1 lea       0x63C`F490,%rcx
063cabd8 lea       0x63D`26C8,%r8
063cabdf mov       $0x1F,%edx
063cabe4 call      0x0000`0000`063B`9FF0
063cabe9 ud2
063cabeb mov       0x38(%rsp),%rax
063cabf0 mov       0x28(%rsp),%rcx
063cabf5 mov       %rcx,0x70(%rsp)
063cabfa movq      $0xFFFF`FFFF`FFFF`FFFF,0x78(%rsp)
063cac03 add       $0xFFFF`FFFF`FFFF`FFFF,%rcx
063cac07 mov       %rcx,0x80(%rsp)
063cac0f mov       0x80(%rsp),%rcx
063cac17 mov       %rcx,8(%rax)
063cac1b mov       8(%rax),%rax
063cac1f mov       %rax,0x58(%rsp)
063cac24 mov       0x58(%rsp),%rax
063cac29 mov       %rax,0x20(%rsp)
063cac2e jmp       0x0000`0000`063C`AC46
063cac30 movq      $0,0x48(%rsp)
063cac39 mov       0x48(%rsp),%rax
063cac3e add       $0x88,%rsp
063cac45 ret
063cac46 mov       0x20(%rsp),%rax
063cac4b mov       %rax,0x48(%rsp)
063cac50 jmp       0x0000`0000`063C`AC39

core::slice::iter::impl$180::next_back<core::mem::maybe_uninit::MaybeUninit<u8> >:
063cac60 sub       $0x88,%rsp
063cac67 mov       %rcx,0x38(%rsp)
063cac6c mov       %rcx,0x50(%rsp)
063cac71 mov       (%rcx),%rcx
063cac74 call      0x0000`0000`063B`6350
063cac79 mov       %rax,0x40(%rsp)
063cac7e mov       0x40(%rsp),%rcx
063cac83 call      0x0000`0000`063B`6830
063cac88 jmp       0x0000`0000`063C`AC8A
063cac8a mov       $1,%eax
063cac8f cmp       $0,%rax
063cac93 jne       0x0000`0000`063C`ACA9
063cac95 mov       0x38(%rsp),%rax
063cac9a mov       (%rax),%rcx
063cac9d call      0x0000`0000`063B`6350
063caca2 mov       %rax,0x30(%rsp)
063caca7 jmp       0x0000`0000`063C`ACB9
063caca9 mov       0x38(%rsp),%rax
063cacae mov       8(%rax),%rcx
063cacb2 call      0x0000`0000`063B`6830
063cacb7 jmp       0x0000`0000`063C`AC95
063cacb9 mov       0x30(%rsp),%rax
063cacbe mov       0x38(%rsp),%rcx
063cacc3 cmp       8(%rcx),%rax
063cacc7 je        0x0000`0000`063C`AD50
063caccd mov       0x38(%rsp),%rax
063cacd2 mov       %rax,0x60(%rsp)
063cacd7 movq      $1,0x68(%rsp)
063cace0 mov       8(%rax),%rax
063cace4 mov       %rax,0x28(%rsp)
063cace9 xor       %eax,%eax
063caceb test      $1,%al
063caced jne       0x0000`0000`063C`ACF1
063cacef jmp       0x0000`0000`063C`AD0B
063cacf1 lea       0x63C`F490,%rcx
063cacf8 lea       0x63D`26E0,%r8
063cacff mov       $0x1F,%edx
063cad04 call      0x0000`0000`063B`9FF0
063cad09 ud2
063cad0b mov       0x38(%rsp),%rax
063cad10 mov       0x28(%rsp),%rcx
063cad15 mov       %rcx,0x70(%rsp)
063cad1a movq      $0xFFFF`FFFF`FFFF`FFFF,0x78(%rsp)
063cad23 add       $0xFFFF`FFFF`FFFF`FFFF,%rcx
063cad27 mov       %rcx,0x80(%rsp)
063cad2f mov       0x80(%rsp),%rcx
063cad37 mov       %rcx,8(%rax)
063cad3b mov       8(%rax),%rax
063cad3f mov       %rax,0x58(%rsp)
063cad44 mov       0x58(%rsp),%rax
063cad49 mov       %rax,0x20(%rsp)
063cad4e jmp       0x0000`0000`063C`AD66
063cad50 movq      $0,0x48(%rsp)
063cad59 mov       0x48(%rsp),%rax
063cad5e add       $0x88,%rsp
063cad65 ret
063cad66 mov       0x20(%rsp),%rax
063cad6b mov       %rax,0x48(%rsp)
063cad70 jmp       0x0000`0000`063C`AD59

core::unicode::unicode_data::grapheme_extend::lookup:
063cad80 sub       $0x138,%rsp
063cad87 mov       %ecx,%eax
063cad89 mov       %eax,0x78(%rsp)
063cad8d mov       %eax,0x7C(%rsp)
063cad91 mov       %eax,0xFC(%rsp)
063cad98 lea       0x63D`26F8,%rcx
063cad9f mov       %rcx,0x100(%rsp)
063cada7 lea       0x63D`2778,%rdx
063cadae mov       %rdx,0x108(%rsp)
063cadb6 shl       $0xB,%eax
063cadb9 mov       %eax,0x9C(%rsp)
063cadc0 mov       $0x20,%edx
063cadc5 lea       0x9C(%rsp),%r8
063cadcd call      0x0000`0000`063C`48C0
063cadd2 mov       %rdx,0x90(%rsp)
063cadda mov       %rax,0x88(%rsp)
063cade2 mov       0x88(%rsp),%rax
063cadea test      %rax,%rax
063caded je        0x0000`0000`063C`ADF5
063cadef jmp       0x0000`0000`063C`ADF1
063cadf1 jmp       0x0000`0000`063C`AE17
063cadf3 ud2
063cadf5 mov       0x90(%rsp),%rax
063cadfd mov       %rax,0x118(%rsp)
063cae05 add       $1,%rax
063cae09 mov       %rax,0x70(%rsp)
063cae0e setb      %al
063cae11 test      $1,%al
063cae13 jne       0x0000`0000`063C`AE58
063cae15 jmp       0x0000`0000`063C`AE49
063cae17 mov       0x90(%rsp),%rax
063cae1f mov       %rax,0x110(%rsp)
063cae27 mov       %rax,0x80(%rsp)
063cae2f mov       0x80(%rsp),%rax
063cae37 mov       %rax,0x68(%rsp)
063cae3c cmp       $0x20,%rax
063cae40 setb      %al
063cae43 test      $1,%al
063cae45 jne       0x0000`0000`063C`AE72
063cae47 jmp       0x0000`0000`063C`AEA8
063cae49 mov       0x70(%rsp),%rax
063cae4e mov       %rax,0x80(%rsp)
063cae56 jmp       0x0000`0000`063C`AE2F
063cae58 lea       0x63C`F3E0,%rcx
063cae5f lea       0x63D`2240,%r8
063cae66 mov       $0x1C,%edx
063cae6b call      0x0000`0000`063B`9FF0
063cae70 ud2
063cae72 mov       0x68(%rsp),%rcx
063cae77 lea       0x63D`26F8,%rax
063cae7e mov       (%rax,%rcx,4),%ecx
063cae81 call      0x0000`0000`063C`8290
063cae86 mov       %rax,0xA0(%rsp)
063cae8e mov       0x80(%rsp),%rax
063cae96 add       $1,%rax
063cae9a mov       %rax,0x60(%rsp)
063cae9f setb      %al
063caea2 test      $1,%al
063caea4 jne       0x0000`0000`063C`AEFA
063caea6 jmp       0x0000`0000`063C`AEC0
063caea8 mov       0x68(%rsp),%rcx
063caead lea       0x63D`2258,%r8
063caeb4 mov       $0x20,%edx
063caeb9 call      0x0000`0000`063B`A050
063caebe ud2
063caec0 mov       0x60(%rsp),%r8
063caec5 lea       0x63D`26F8,%rcx
063caecc mov       $0x20,%edx
063caed1 call      0x0000`0000`063C`3A10
063caed6 mov       %rax,0xB0(%rsp)
063caede mov       $1,%eax
063caee3 xor       %ecx,%ecx
063caee5 cmpq      $0,0xB0(%rsp)
063caeee cmove     %rcx,%rax
063caef2 cmp       $1,%rax
063caef6 je        0x0000`0000`063C`AF14
063caef8 jmp       0x0000`0000`063C`AF48
063caefa lea       0x63C`F3E0,%rcx
063caf01 lea       0x63D`2270,%r8
063caf08 mov       $0x1C,%edx
063caf0d call      0x0000`0000`063B`9FF0
063caf12 ud2
063caf14 mov       0xB0(%rsp),%rax
063caf1c mov       %rax,0x120(%rsp)
063caf24 mov       (%rax),%ecx
063caf26 call      0x0000`0000`063C`8290
063caf2b sub       0xA0(%rsp),%rax
063caf33 mov       %rax,0x58(%rsp)
063caf38 setb      %al
063caf3b test      $1,%al
063caf3d jne       0x0000`0000`063C`AFF0
063caf43 jmp       0x0000`0000`063C`AFE1
063caf48 mov       $0x2C3,%eax
063caf4d sub       0xA0(%rsp),%rax
063caf55 mov       %rax,0x50(%rsp)
063caf5a setb      %al
063caf5d test      $1,%al
063caf5f jne       0x0000`0000`063C`AF70
063caf61 mov       0x50(%rsp),%rax
063caf66 mov       %rax,0xA8(%rsp)
063caf6e jmp       0x0000`0000`063C`AF8A
063caf70 lea       0x63C`F3B0,%rcx
063caf77 lea       0x63D`2288,%r8
063caf7e mov       $0x21,%edx
063caf83 call      0x0000`0000`063B`9FF0
063caf88 ud2
063caf8a mov       0x80(%rsp),%rcx
063caf92 mov       $1,%edx
063caf97 call      0x0000`0000`063C`8350
063caf9c mov       %rax,%rcx
063caf9f lea       0x63D`26F8,%rax
063cafa6 mov       %rax,0xB8(%rsp)
063cafae mov       0xB8(%rsp),%r8
063cafb6 call      0x0000`0000`063B`9B10
063cafbb mov       %eax,%ecx
063cafbd xor       %r8d,%r8d
063cafc0 call      0x0000`0000`063B`97C0
063cafc5 mov       %eax,%ecx
063cafc7 mov       0x78(%rsp),%eax
063cafcb mov       %ecx,0x12C(%rsp)
063cafd2 sub       %ecx,%eax
063cafd4 mov       %eax,0x4C(%rsp)
063cafd8 setb      %al
063cafdb test      $1,%al
063cafdd jne       0x0000`0000`063C`B03A
063cafdf jmp       0x0000`0000`063C`B00A
063cafe1 mov       0x58(%rsp),%rax
063cafe6 mov       %rax,0xA8(%rsp)
063cafee jmp       0x0000`0000`063C`AF8A
063caff0 lea       0x63C`F3B0,%rcx
063caff7 lea       0x63D`22A0,%r8
063caffe mov       $0x21,%edx
063cb003 call      0x0000`0000`063B`9FF0
063cb008 ud2
063cb00a mov       0x4C(%rsp),%eax
063cb00e mov       %eax,0x130(%rsp)
063cb015 movl      $0,0xC4(%rsp)
063cb020 mov       0xA8(%rsp),%rax
063cb028 sub       $1,%rax
063cb02c mov       %rax,0x40(%rsp)
063cb031 setb      %al
063cb034 test      $1,%al
063cb036 jne       0x0000`0000`063C`B094
063cb038 jmp       0x0000`0000`063C`B054
063cb03a lea       0x63C`F3B0,%rcx
063cb041 lea       0x63D`22B8,%r8
063cb048 mov       $0x21,%edx
063cb04d call      0x0000`0000`063B`9FF0
063cb052 ud2
063cb054 mov       0x40(%rsp),%rax
063cb059 movq      $0,0xC8(%rsp)
063cb065 mov       %rax,0xD0(%rsp)
063cb06d mov       0xC8(%rsp),%rcx
063cb075 mov       0xD0(%rsp),%rdx
063cb07d call      0x0000`0000`063B`90F0
063cb082 mov       %rax,0xD8(%rsp)
063cb08a mov       %rdx,0xE0(%rsp)
063cb092 jmp       0x0000`0000`063C`B0AE
063cb094 lea       0x63C`F3B0,%rcx
063cb09b lea       0x63D`22D0,%r8
063cb0a2 mov       $0x21,%edx
063cb0a7 call      0x0000`0000`063B`9FF0
063cb0ac ud2
063cb0ae lea       0xD8(%rsp),%rcx
063cb0b6 call      0x0000`0000`063B`9040
063cb0bb mov       %rdx,0xF0(%rsp)
063cb0c3 mov       %rax,0xE8(%rsp)
063cb0cb mov       0xE8(%rsp),%rax
063cb0d3 test      %rax,%rax
063cb0d6 je        0x0000`0000`063C`B1BB
063cb0dc jmp       0x0000`0000`063C`B0DE
063cb0de jmp       0x0000`0000`063C`B0E2
063cb0e0 ud2
063cb0e2 mov       0xA0(%rsp),%rax
063cb0ea mov       %rax,0x38(%rsp)
063cb0ef cmp       $0x2C3,%rax
063cb0f5 setb      %al
063cb0f8 test      $1,%al
063cb0fa jne       0x0000`0000`063C`B0FE
063cb0fc jmp       0x0000`0000`063C`B12B
063cb0fe mov       0x38(%rsp),%rcx
063cb103 lea       0x63D`2778,%rax
063cb10a mov       (%rax,%rcx),%al
063cb10d mov       %al,0x137(%rsp)
063cb114 movzbl    %al,%eax
063cb117 add       0xC4(%rsp),%eax
063cb11e mov       %eax,0x34(%rsp)
063cb122 setb      %al
063cb125 test      $1,%al
063cb127 jne       0x0000`0000`063C`B15D
063cb129 jmp       0x0000`0000`063C`B143
063cb12b mov       0x38(%rsp),%rcx
063cb130 lea       0x63D`22E8,%r8
063cb137 mov       $0x2C3,%edx
063cb13c call      0x0000`0000`063B`A050
063cb141 ud2
063cb143 mov       0x4C(%rsp),%eax
063cb147 mov       0x34(%rsp),%ecx
063cb14b mov       %ecx,0xC4(%rsp)
063cb152 cmp       %eax,0xC4(%rsp)
063cb159 ja        0x0000`0000`063C`B1BB
063cb15b jmp       0x0000`0000`063C`B177
063cb15d lea       0x63C`F3E0,%rcx
063cb164 lea       0x63D`2300,%r8
063cb16b mov       $0x1C,%edx
063cb170 call      0x0000`0000`063B`9FF0
063cb175 ud2
063cb177 mov       0xA0(%rsp),%rax
063cb17f add       $1,%rax
063cb183 mov       %rax,0x28(%rsp)
063cb188 setb      %al
063cb18b test      $1,%al
063cb18d jne       0x0000`0000`063C`B1A1
063cb18f mov       0x28(%rsp),%rax
063cb194 mov       %rax,0xA0(%rsp)
063cb19c jmp       0x0000`0000`063C`B0AE
063cb1a1 lea       0x63C`F3E0,%rcx
063cb1a8 lea       0x63D`2318,%r8
063cb1af mov       $0x1C,%edx
063cb1b4 call      0x0000`0000`063B`9FF0
063cb1b9 ud2
063cb1bb mov       0xA0(%rsp),%rax
063cb1c3 and       $1,%rax
063cb1c7 cmp       $1,%rax
063cb1cb sete      %al
063cb1ce mov       %al,0x27(%rsp)
063cb1d2 mov       0x27(%rsp),%al
063cb1d6 and       $1,%al
063cb1d8 movzbl    %al,%eax
063cb1db add       $0x138,%rsp
063cb1e2 ret

core::num::impl$9::checked_div:
063cb220 sub       $0x50,%rsp
063cb224 mov       %rdx,8(%rsp)
063cb229 mov       %rcx,0x10(%rsp)
063cb22e mov       %rcx,0x30(%rsp)
063cb233 mov       %rdx,0x38(%rsp)
063cb238 cmp       $0,%rdx
063cb23c sete      %al
063cb23f and       $1,%al
063cb241 mov       %al,0x47(%rsp)
063cb245 mov       0x47(%rsp),%al
063cb249 mov       %al,0x1F(%rsp)
063cb24d mov       0x1F(%rsp),%al
063cb251 test      $1,%al
063cb253 jne       0x0000`0000`063C`B276
063cb255 jmp       0x0000`0000`063C`B257
063cb257 mov       8(%rsp),%rcx
063cb25c mov       0x10(%rsp),%rax
063cb261 xor       %edx,%edx
063cb263 div       %rcx
063cb266 mov       %rax,0x48(%rsp)
063cb26b mov       0x48(%rsp),%rax
063cb270 mov       %rax,(%rsp)
063cb274 jmp       0x0000`0000`063C`B28E
063cb276 movq      $0,0x20(%rsp)
063cb27f mov       0x20(%rsp),%rax
063cb284 mov       0x28(%rsp),%rdx
063cb289 add       $0x50,%rsp
063cb28d ret
063cb28e mov       (%rsp),%rax
063cb292 mov       %rax,0x28(%rsp)
063cb297 movq      $1,0x20(%rsp)
063cb2a0 jmp       0x0000`0000`063C`B27F

core::num::impl$9::checked_rem:
063cb2b0 sub       $0x50,%rsp
063cb2b4 mov       %rdx,8(%rsp)
063cb2b9 mov       %rcx,0x10(%rsp)
063cb2be mov       %rcx,0x30(%rsp)
063cb2c3 mov       %rdx,0x38(%rsp)
063cb2c8 cmp       $0,%rdx
063cb2cc sete      %al
063cb2cf and       $1,%al
063cb2d1 mov       %al,0x47(%rsp)
063cb2d5 mov       0x47(%rsp),%al
063cb2d9 mov       %al,0x1F(%rsp)
063cb2dd mov       0x1F(%rsp),%al
063cb2e1 test      $1,%al
063cb2e3 jne       0x0000`0000`063C`B306
063cb2e5 jmp       0x0000`0000`063C`B2E7
063cb2e7 mov       8(%rsp),%rcx
063cb2ec mov       0x10(%rsp),%rax
063cb2f1 xor       %edx,%edx
063cb2f3 div       %rcx
063cb2f6 mov       %rdx,0x48(%rsp)
063cb2fb mov       0x48(%rsp),%rax
063cb300 mov       %rax,(%rsp)
063cb304 jmp       0x0000`0000`063C`B31E
063cb306 movq      $0,0x20(%rsp)
063cb30f mov       0x20(%rsp),%rax
063cb314 mov       0x28(%rsp),%rdx
063cb319 add       $0x50,%rsp
063cb31d ret
063cb31e mov       (%rsp),%rax
063cb322 mov       %rax,0x28(%rsp)
063cb327 movq      $1,0x20(%rsp)
063cb330 jmp       0x0000`0000`063C`B30F

core::hint::unreachable_unchecked:
063cb340 ud2

compiler_builtins::int::specialized_div_rem::zero_div_fn:
063cb350 sub       $0x28,%rsp
063cb354 call      0x0000`0000`063C`B340
063cb359 ud2

compiler_builtins::int::specialized_div_rem::u64_by_u64_div_rem:
063cb360 sub       $0x88,%rsp
063cb367 mov       %rdx,0x28(%rsp)
063cb36c mov       %rcx,0x30(%rsp)
063cb371 mov       %rcx,0x68(%rsp)
063cb376 mov       %rdx,0x70(%rsp)
063cb37b call      0x0000`0000`063C`B220
063cb380 mov       %rdx,0x50(%rsp)
063cb385 mov       %rax,0x48(%rsp)
063cb38a cmpq      $1,0x48(%rsp)
063cb390 jne       0x0000`0000`063C`B3BC
063cb392 mov       0x28(%rsp),%rdx
063cb397 mov       0x30(%rsp),%rcx
063cb39c mov       0x50(%rsp),%rax
063cb3a1 mov       %rax,0x20(%rsp)
063cb3a6 mov       %rax,0x78(%rsp)
063cb3ab call      0x0000`0000`063C`B2B0
063cb3b0 mov       %rdx,0x60(%rsp)
063cb3b5 mov       %rax,0x58(%rsp)
063cb3ba jmp       0x0000`0000`063C`B3C3
063cb3bc call      0x0000`0000`063C`B350
063cb3c1 ud2
063cb3c3 cmpq      $1,0x58(%rsp)
063cb3c9 jne       0x0000`0000`063C`B3BC
063cb3cb mov       0x20(%rsp),%rcx
063cb3d0 mov       0x60(%rsp),%rax
063cb3d5 mov       %rax,0x80(%rsp)
063cb3dd mov       %rcx,0x38(%rsp)
063cb3e2 mov       %rax,0x40(%rsp)
063cb3e7 mov       0x38(%rsp),%rax
063cb3ec mov       0x40(%rsp),%rdx
063cb3f1 add       $0x88,%rsp
063cb3f8 ret

compiler_builtins::int::specialized_div_rem::u128_by_u64_div_rem:
063cb400 sub       $0x60,%rsp
063cb404 mov       %r8,(%rsp)
063cb408 mov       %rcx,0x38(%rsp)
063cb40d mov       %rdx,0x40(%rsp)
063cb412 mov       %r8,0x48(%rsp)
063cb417 mov       %rcx,%rax
063cb41a mov       %rax,8(%rsp)
063cb41f mov       %rcx,0x50(%rsp)
063cb424 xor       %eax,%eax
063cb426 mov       %rdx,0x10(%rsp)
063cb42b mov       8(%rsp),%rax
063cb430 mov       (%rsp),%rcx
063cb434 mov       0x10(%rsp),%rdx
063cb439 mov       %rdx,0x58(%rsp)
063cb43e div       %rcx
063cb441 mov       %rax,0x28(%rsp)
063cb446 mov       %rdx,0x30(%rsp)
063cb44b mov       0x28(%rsp),%rcx
063cb450 mov       0x30(%rsp),%rax
063cb455 mov       %rcx,0x18(%rsp)
063cb45a mov       %rax,0x20(%rsp)
063cb45f mov       0x18(%rsp),%rax
063cb464 mov       0x20(%rsp),%rdx
063cb469 add       $0x60,%rsp
063cb46d ret

compiler_builtins::int::specialized_div_rem::u128_div_rem:
063cb470 sub       $0x278,%rsp
063cb477 mov       %rcx,%rax
063cb47a mov       %rax,0x138(%rsp)
063cb482 mov       0x2A0(%rsp),%rax
063cb48a mov       %rax,0x140(%rsp)
063cb492 mov       %r9,0x148(%rsp)
063cb49a mov       %r8,0x150(%rsp)
063cb4a2 mov       %rdx,0x158(%rsp)
063cb4aa mov       %rcx,0x160(%rsp)
063cb4b2 mov       %rdx,0x1B0(%rsp)
063cb4ba mov       %r8,0x1B8(%rsp)
063cb4c2 mov       %rax,0x1C8(%rsp)
063cb4ca mov       %r9,0x1C0(%rsp)
063cb4d2 movl      $0x40,0x1D4(%rsp)
063cb4dd mov       %rdx,%rax
063cb4e0 mov       %rax,0x168(%rsp)
063cb4e8 mov       %rdx,0x1D8(%rsp)
063cb4f0 xor       %eax,%eax
063cb4f2 mov       %r8,0x170(%rsp)
063cb4fa mov       0x140(%rsp),%rax
063cb502 mov       0x148(%rsp),%rcx
063cb50a mov       0x170(%rsp),%rdx
063cb512 mov       %rdx,%r8
063cb515 mov       %r8,0x120(%rsp)
063cb51d mov       %rdx,0x1E0(%rsp)
063cb525 mov       %rcx,%rdx
063cb528 mov       %rdx,0x128(%rsp)
063cb530 mov       %rcx,0x1E8(%rsp)
063cb538 xor       %ecx,%ecx
063cb53a mov       %rax,0x130(%rsp)
063cb542 mov       0x130(%rsp),%rax
063cb54a mov       %rax,0x118(%rsp)
063cb552 mov       %rax,0x1F0(%rsp)
063cb55a cmp       $0,%rax
063cb55e jne       0x0000`0000`063C`B577
063cb560 mov       0x128(%rsp),%rax
063cb568 cmp       $0,%rax
063cb56c je        0x0000`0000`063C`BA3C
063cb572 jmp       0x0000`0000`063C`BA43
063cb577 mov       0x118(%rsp),%rax
063cb57f mov       %rax,0x248(%rsp)
063cb587 bsr       %rax,%rax
063cb58b mov       $0x7F,%ecx
063cb590 cmove     %rcx,%rax
063cb594 xor       $0x3F,%rax
063cb598 mov       %rax,0x250(%rsp)
063cb5a0 mov       0x250(%rsp),%rax
063cb5a8 mov       %eax,0x114(%rsp)
063cb5af mov       %eax,0x1F8(%rsp)
063cb5b6 mov       0x114(%rsp),%ecx
063cb5bd mov       $0x40,%eax
063cb5c2 sub       %ecx,%eax
063cb5c4 mov       %eax,0x110(%rsp)
063cb5cb setb      %al
063cb5ce test      $1,%al
063cb5d0 jne       0x0000`0000`063C`B628
063cb5d2 mov       0x140(%rsp),%rdx
063cb5da mov       0x148(%rsp),%r8
063cb5e2 mov       0x110(%rsp),%ecx
063cb5e9 mov       %ecx,0x1FC(%rsp)
063cb5f0 test      $0xFFFF`FF80,%ecx
063cb5f6 setne     %al
063cb5f9 mov       %cl,%r9b
063cb5fc mov       %r9b,%cl
063cb5ff shrd      %cl,%rdx,%r8
063cb603 mov       %r9b,%cl
063cb606 shr       %cl,%rdx
063cb609 mov       %rdx,%rcx
063cb60c xor       %edx,%edx
063cb60e test      $0x40,%r9b
063cb612 cmovne    %rcx,%r8
063cb616 mov       %r8,0x108(%rsp)
063cb61e cmovne    %rdx,%rcx
063cb622 test      $1,%al
063cb624 jne       0x0000`0000`063C`B68A
063cb626 jmp       0x0000`0000`063C`B642
063cb628 lea       0x63D`2A40,%rcx
063cb62f lea       0x63D`2C50,%r8
063cb636 mov       $0x21,%edx
063cb63b call      0x0000`0000`063B`9FF0
063cb640 ud2
063cb642 mov       0x150(%rsp),%rax
063cb64a mov       0x158(%rsp),%rdx
063cb652 mov       0x108(%rsp),%rcx
063cb65a mov       %rcx,%r8
063cb65d mov       %r8,0xF0(%rsp)
063cb665 mov       %rcx,0x200(%rsp)
063cb66d mov       %rax,%rcx
063cb670 shld      $0x3F,%rdx,%rcx
063cb675 mov       %rcx,0xF8(%rsp)
063cb67d shr       $1,%rax
063cb680 mov       %rax,0x100(%rsp)
063cb688 jmp       0x0000`0000`063C`B6A4
063cb68a lea       0x63D`2A70,%rcx
063cb691 lea       0x63D`2C50,%r8
063cb698 mov       $0x24,%edx
063cb69d call      0x0000`0000`063B`9FF0
063cb6a2 ud2
063cb6a4 mov       0xF0(%rsp),%r8
063cb6ac mov       0x100(%rsp),%rdx
063cb6b4 mov       0xF8(%rsp),%rcx
063cb6bc call      0x0000`0000`063C`B400
063cb6c1 mov       %rax,0xE8(%rsp)
063cb6c9 mov       %rax,0x208(%rsp)
063cb6d1 mov       %rdx,0x210(%rsp)
063cb6d9 mov       $0x40,%eax
063cb6de sub       $1,%eax
063cb6e1 mov       %eax,0xE4(%rsp)
063cb6e8 setb      %al
063cb6eb test      $1,%al
063cb6ed jne       0x0000`0000`063C`B70F
063cb6ef mov       0x114(%rsp),%ecx
063cb6f6 mov       0xE4(%rsp),%eax
063cb6fd sub       %ecx,%eax
063cb6ff mov       %eax,0xE0(%rsp)
063cb706 setb      %al
063cb709 test      $1,%al
063cb70b jne       0x0000`0000`063C`B75A
063cb70d jmp       0x0000`0000`063C`B729
063cb70f lea       0x63D`2A40,%rcx
063cb716 lea       0x63D`2C50,%r8
063cb71d mov       $0x21,%edx
063cb722 call      0x0000`0000`063B`9FF0
063cb727 ud2
063cb729 mov       0xE8(%rsp),%rdx
063cb731 mov       0xE0(%rsp),%ecx
063cb738 mov       %ecx,%eax
063cb73a and       $0xFFFF`FFC0,%eax
063cb73d cmp       $0,%eax
063cb740 setne     %al
063cb743 mov       %ecx,%ecx
063cb745 and       $0x3F,%rcx
063cb749 shr       %cl,%rdx
063cb74c mov       %rdx,0xD8(%rsp)
063cb754 test      $1,%al
063cb756 jne       0x0000`0000`063C`B791
063cb758 jmp       0x0000`0000`063C`B774
063cb75a lea       0x63D`2A40,%rcx
063cb761 lea       0x63D`2C50,%r8
063cb768 mov       $0x21,%edx
063cb76d call      0x0000`0000`063B`9FF0
063cb772 ud2
063cb774 mov       0xD8(%rsp),%rax
063cb77c mov       %rax,0x198(%rsp)
063cb784 cmpq      $0,0x198(%rsp)
063cb78d je        0x0000`0000`063C`B7AB
063cb78f jmp       0x0000`0000`063C`B806
063cb791 lea       0x63D`2A70,%rcx
063cb798 lea       0x63D`2C50,%r8
063cb79f mov       $0x24,%edx
063cb7a4 call      0x0000`0000`063B`9FF0
063cb7a9 ud2
063cb7ab mov       0x140(%rsp),%r8
063cb7b3 mov       0x148(%rsp),%rdx
063cb7bb mov       0x198(%rsp),%rcx
063cb7c3 mov       %rcx,0x258(%rsp)
063cb7cb movq      $0,0x260(%rsp)
063cb7d7 mov       %r8,0x270(%rsp)
063cb7df mov       %rdx,0x268(%rsp)
063cb7e7 mov       %rcx,%rax
063cb7ea mul       %rdx
063cb7ed imul      %r8,%rcx
063cb7f1 add       %rcx,%rdx
063cb7f4 mov       %rdx,0xC8(%rsp)
063cb7fc mov       %rax,0xD0(%rsp)
063cb804 jmp       0x0000`0000`063C`B850
063cb806 mov       0x198(%rsp),%rax
063cb80e sub       $1,%rax
063cb812 mov       %rax,0xC0(%rsp)
063cb81a setb      %al
063cb81d test      $1,%al
063cb81f jne       0x0000`0000`063C`B836
063cb821 mov       0xC0(%rsp),%rax
063cb829 mov       %rax,0x198(%rsp)
063cb831 jmp       0x0000`0000`063C`B7AB
063cb836 lea       0x63D`2A40,%rcx
063cb83d lea       0x63D`2C50,%r8
063cb844 mov       $0x21,%edx
063cb849 call      0x0000`0000`063B`9FF0
063cb84e ud2
063cb850 mov       0xC8(%rsp),%rax
063cb858 mov       0x150(%rsp),%rcx
063cb860 mov       0xD0(%rsp),%r8
063cb868 mov       0x158(%rsp),%rdx
063cb870 sub       %r8,%rdx
063cb873 mov       %rdx,0xB0(%rsp)
063cb87b sbb       %rax,%rcx
063cb87e setb      %al
063cb881 mov       %rcx,0xB8(%rsp)
063cb889 test      $1,%al
063cb88b jne       0x0000`0000`063C`B8D7
063cb88d mov       0x140(%rsp),%rcx
063cb895 mov       0x148(%rsp),%r8
063cb89d mov       0xB8(%rsp),%rax
063cb8a5 mov       0xB0(%rsp),%rdx
063cb8ad mov       %rdx,0x1A0(%rsp)
063cb8b5 mov       %rax,0x1A8(%rsp)
063cb8bd mov       0x1A0(%rsp),%rdx
063cb8c5 mov       0x1A8(%rsp),%rax
063cb8cd sub       %r8,%rdx
063cb8d0 sbb       %rcx,%rax
063cb8d3 jae       0x0000`0000`063C`B932
063cb8d5 jmp       0x0000`0000`063C`B8F1
063cb8d7 lea       0x63D`2A40,%rcx
063cb8de lea       0x63D`2C50,%r8
063cb8e5 mov       $0x21,%edx
063cb8ea call      0x0000`0000`063B`9FF0
063cb8ef ud2
063cb8f1 mov       0x198(%rsp),%rdx
063cb8f9 mov       0x1A0(%rsp),%rax
063cb901 mov       0x1A8(%rsp),%rcx
063cb909 mov       %rdx,0x178(%rsp)
063cb911 movq      $0,0x180(%rsp)
063cb91d mov       %rcx,0x190(%rsp)
063cb925 mov       %rax,0x188(%rsp)
063cb92d jmp       0x0000`0000`063C`B9F5
063cb932 mov       0x198(%rsp),%rax
063cb93a add       $1,%rax
063cb93e mov       %rax,0xA8(%rsp)
063cb946 setb      %al
063cb949 test      $1,%al
063cb94b jne       0x0000`0000`063C`B99C
063cb94d mov       0x140(%rsp),%rax
063cb955 mov       0x148(%rsp),%r8
063cb95d mov       0xA8(%rsp),%rcx
063cb965 mov       %rcx,0x198(%rsp)
063cb96d mov       0x1A0(%rsp),%rdx
063cb975 mov       0x1A8(%rsp),%rcx
063cb97d sub       %r8,%rdx
063cb980 mov       %rdx,0x98(%rsp)
063cb988 sbb       %rax,%rcx
063cb98b setb      %al
063cb98e mov       %rcx,0xA0(%rsp)
063cb996 test      $1,%al
063cb998 jne       0x0000`0000`063C`B9DB
063cb99a jmp       0x0000`0000`063C`B9B6
063cb99c lea       0x63D`2AA0,%rcx
063cb9a3 lea       0x63D`2C50,%r8
063cb9aa mov       $0x1C,%edx
063cb9af call      0x0000`0000`063B`9FF0
063cb9b4 ud2
063cb9b6 mov       0xA0(%rsp),%rax
063cb9be mov       0x98(%rsp),%rcx
063cb9c6 mov       %rcx,0x1A0(%rsp)
063cb9ce mov       %rax,0x1A8(%rsp)
063cb9d6 jmp       0x0000`0000`063C`B8F1
063cb9db lea       0x63D`2A40,%rcx
063cb9e2 lea       0x63D`2C50,%r8
063cb9e9 mov       $0x21,%edx
063cb9ee call      0x0000`0000`063B`9FF0
063cb9f3 ud2
063cb9f5 mov       0x138(%rsp),%rax
063cb9fd mov       0x160(%rsp),%rcx
063cba05 mov       0x178(%rsp),%rdx
063cba0d mov       0x180(%rsp),%r8
063cba15 mov       0x188(%rsp),%r9
063cba1d mov       0x190(%rsp),%r10
063cba25 mov       %r10,0x18(%rcx)
063cba29 mov       %r9,0x10(%rcx)
063cba2d mov       %r8,8(%rcx)
063cba31 mov       %rdx,(%rcx)
063cba34 add       $0x278,%rsp
063cba3b ret
063cba3c call      0x0000`0000`063C`B350
063cba41 ud2
063cba43 mov       0x120(%rsp),%rax
063cba4b mov       0x128(%rsp),%rcx
063cba53 cmp       %rcx,%rax
063cba56 jb        0x0000`0000`063C`BA7F
063cba58 mov       0x128(%rsp),%rdx
063cba60 mov       0x120(%rsp),%rcx
063cba68 call      0x0000`0000`063C`B360
063cba6d mov       %rax,0x88(%rsp)
063cba75 mov       %rdx,0x90(%rsp)
063cba7d jmp       0x0000`0000`063C`BAF3
063cba7f mov       0x128(%rsp),%r8
063cba87 mov       0x150(%rsp),%rdx
063cba8f mov       0x158(%rsp),%rcx
063cba97 call      0x0000`0000`063C`B400
063cba9c mov       %rdx,0x78(%rsp)
063cbaa1 mov       %rax,0x80(%rsp)
063cbaa9 mov       0x78(%rsp),%rax
063cbaae mov       0x80(%rsp),%rcx
063cbab6 mov       %rcx,0x218(%rsp)
063cbabe mov       %rax,0x220(%rsp)
063cbac6 mov       %rcx,0x178(%rsp)
063cbace movq      $0,0x180(%rsp)
063cbada mov       %rax,0x188(%rsp)
063cbae2 movq      $0,0x190(%rsp)
063cbaee jmp       0x0000`0000`063C`B9F5
063cbaf3 mov       0x90(%rsp),%rcx
063cbafb mov       0x168(%rsp),%rax
063cbb03 mov       0x88(%rsp),%rdx
063cbb0b mov       %rdx,0x228(%rsp)
063cbb13 mov       %rcx,0x230(%rsp)
063cbb1b mov       %rax,0x58(%rsp)
063cbb20 xor       %eax,%eax
063cbb22 mov       %rax,0x60(%rsp)
063cbb27 mov       %rcx,0x68(%rsp)
063cbb2c mov       %rax,0x70(%rsp)
063cbb31 mov       0x128(%rsp),%r8
063cbb39 mov       0x68(%rsp),%rax
063cbb3e mov       0x60(%rsp),%rdx
063cbb43 mov       0x70(%rsp),%r9
063cbb48 mov       0x58(%rsp),%rcx
063cbb4d or        %r9,%rcx
063cbb50 or        %rax,%rdx
063cbb53 call      0x0000`0000`063C`B400
063cbb58 mov       %rdx,0x48(%rsp)
063cbb5d mov       %rax,0x50(%rsp)
063cbb62 mov       %rax,0x238(%rsp)
063cbb6a mov       %rdx,0x240(%rsp)
063cbb72 mov       0x88(%rsp),%rax
063cbb7a mov       0x50(%rsp),%rcx
063cbb7f mov       %rcx,0x28(%rsp)
063cbb84 xor       %ecx,%ecx
063cbb86 mov       %rcx,0x30(%rsp)
063cbb8b mov       %rcx,0x38(%rsp)
063cbb90 mov       %rax,0x40(%rsp)
063cbb95 mov       0x48(%rsp),%rax
063cbb9a mov       0x30(%rsp),%r8
063cbb9f mov       0x28(%rsp),%rdx
063cbba4 mov       0x40(%rsp),%r9
063cbba9 mov       0x38(%rsp),%rcx
063cbbae or        %r9,%rcx
063cbbb1 or        %r8,%rdx
063cbbb4 mov       %rdx,0x178(%rsp)
063cbbbc mov       %rcx,0x180(%rsp)
063cbbc4 mov       %rax,0x188(%rsp)
063cbbcc movq      $0,0x190(%rsp)
063cbbd8 jmp       0x0000`0000`063C`B9F5

compiler_builtins::int::udiv::__udivti3:
063cbbe0 sub       $0x78,%rsp
063cbbe4 mov       %r8,%rax
063cbbe7 mov       %rdx,0x30(%rsp)
063cbbec mov       %rcx,%rdx
063cbbef mov       0x30(%rsp),%rcx
063cbbf4 mov       %rdx,0x38(%rsp)
063cbbf9 mov       %rdx,0x40(%rsp)
063cbbfe mov       (%rcx),%rdx
063cbc01 mov       8(%rcx),%r8
063cbc05 mov       (%rax),%r9
063cbc08 mov       8(%rax),%rcx
063cbc0c mov       %rsp,%rax
063cbc0f mov       %rcx,0x20(%rax)
063cbc13 lea       0x58(%rsp),%rcx
063cbc18 call      0x0000`0000`063C`B470
063cbc1d mov       0x58(%rsp),%rax
063cbc22 mov       %rax,0x48(%rsp)
063cbc27 mov       0x60(%rsp),%rax
063cbc2c mov       %rax,0x50(%rsp)
063cbc31 mov       0x40(%rsp),%rax
063cbc36 mov       0x38(%rsp),%rcx
063cbc3b mov       0x50(%rsp),%rdx
063cbc40 mov       0x48(%rsp),%r8
063cbc45 mov       %r8,(%rcx)
063cbc48 mov       %rdx,8(%rcx)
063cbc4c add       $0x78,%rsp
063cbc50 ret

compiler_builtins::int::udiv::__udivti3::__udivti3:
063cbc60 sub       $0x58,%rsp
063cbc64 mov       %r8,0x28(%rsp)
063cbc69 mov       %rdx,%rax
063cbc6c mov       0x28(%rsp),%rdx
063cbc71 mov       %rcx,%r8
063cbc74 mov       %r8,0x30(%rsp)
063cbc79 mov       (%rax),%r8
063cbc7c mov       8(%rax),%r9
063cbc80 mov       (%rdx),%rax
063cbc83 mov       8(%rdx),%rdx
063cbc87 mov       %r9,0x40(%rsp)
063cbc8c mov       %r8,0x38(%rsp)
063cbc91 mov       %rdx,0x50(%rsp)
063cbc96 mov       %rax,0x48(%rsp)
063cbc9b lea       0x38(%rsp),%rdx
063cbca0 lea       0x48(%rsp),%r8
063cbca5 call      0x0000`0000`063C`BBE0
063cbcaa mov       0x30(%rsp),%rax
063cbcaf add       $0x58,%rsp
063cbcb3 ret

compiler_builtins::mem::memcpy:
063cbcf0 push      %rsi
063cbcf1 push      %rdi
063cbcf2 sub       $0x48,%rsp
063cbcf6 mov       %r8,%rax
063cbcf9 mov       %rdx,%rsi
063cbcfc mov       %rcx,%rdi
063cbcff mov       %rdi,(%rsp)
063cbd03 mov       %rdi,8(%rsp)
063cbd08 mov       %rsi,0x10(%rsp)
063cbd0d mov       %rax,0x18(%rsp)
063cbd12 mov       %rdi,0x20(%rsp)
063cbd17 mov       %rsi,0x28(%rsp)
063cbd1c mov       %rax,0x30(%rsp)
063cbd21 mov       %rax,%rcx
063cbd24 shr       $3,%rcx
063cbd28 mov       %rcx,0x38(%rsp)
063cbd2d and       $7,%rax
063cbd31 mov       %rax,0x40(%rsp)
063cbd36 rep movsq (%rsi),(%rdi)
063cbd39 mov       %eax,%ecx
063cbd3b rep movsb (%rsi),(%rdi)
063cbd3d mov       (%rsp),%rax
063cbd41 add       $0x48,%rsp
063cbd45 pop       %rdi
063cbd46 pop       %rsi
063cbd47 ret

compiler_builtins::mem::memcpy::memcpy:
063cbd50 sub       $0x48,%rsp
063cbd54 mov       %rcx,0x30(%rsp)
063cbd59 mov       %rdx,0x38(%rsp)
063cbd5e mov       %r8,0x40(%rsp)
063cbd63 call      0x0000`0000`063C`BCF0
063cbd68 mov       %rax,0x28(%rsp)
063cbd6d mov       0x28(%rsp),%rax
063cbd72 add       $0x48,%rsp
063cbd76 ret

compiler_builtins::mem::memset:
063cbd80 push      %rdi
063cbd81 sub       $0x80,%rsp
063cbd88 mov       %rcx,0x20(%rsp)
063cbd8d mov       %rcx,0x40(%rsp)
063cbd92 mov       %edx,0x4C(%rsp)
063cbd96 mov       %r8,0x50(%rsp)
063cbd9b mov       %dl,%al
063cbd9d mov       %rcx,0x58(%rsp)
063cbda2 mov       %al,0x67(%rsp)
063cbda6 mov       %r8,0x68(%rsp)
063cbdab mov       %r8,%rcx
063cbdae shr       $3,%rcx
063cbdb2 mov       %rcx,0x28(%rsp)
063cbdb7 mov       %rcx,0x70(%rsp)
063cbdbc and       $7,%r8
063cbdc0 mov       %r8,0x30(%rsp)
063cbdc5 mov       %r8,0x78(%rsp)
063cbdca movzbl    %al,%eax
063cbdcd movabs    $0x101`0101`0101`0101,%rcx
063cbdd7 mul       %rcx
063cbdda mov       %rax,0x38(%rsp)
063cbddf seto      %al
063cbde2 test      $1,%al
063cbde4 jne       0x0000`0000`063C`BDE8
063cbde6 jmp       0x0000`0000`063C`BE02
063cbde8 lea       0x63D`2AC0,%rcx
063cbdef lea       0x63D`2B50,%r8
063cbdf6 mov       $0x21,%edx
063cbdfb call      0x0000`0000`063B`9FF0
063cbe00 ud2
063cbe02 mov       0x38(%rsp),%rax
063cbe07 mov       0x20(%rsp),%rdi
063cbe0c mov       0x28(%rsp),%rcx
063cbe11 mov       0x30(%rsp),%rdx
063cbe16 rep stos  %rax,(%rdi)
063cbe19 mov       %edx,%ecx
063cbe1b rep stos  %al,(%rdi)
063cbe1d mov       0x20(%rsp),%rax
063cbe22 add       $0x80,%rsp
063cbe29 pop       %rdi
063cbe2a ret

compiler_builtins::mem::memset::memset:
063cbcc0 sub       $0x48,%rsp
063cbcc4 mov       %rcx,0x30(%rsp)
063cbcc9 mov       %edx,0x3C(%rsp)
063cbccd mov       %r8,0x40(%rsp)
063cbcd2 call      0x0000`0000`063C`BD80
063cbcd7 mov       %rax,0x28(%rsp)
063cbcdc mov       0x28(%rsp),%rax
063cbce1 add       $0x48,%rsp
063cbce5 ret

compiler_builtins::mem::memcmp:
063cbe30 sub       $0xE8,%rsp
063cbe37 mov       %r8,0x50(%rsp)
063cbe3c mov       %rdx,0x58(%rsp)
063cbe41 mov       %rcx,0x60(%rsp)
063cbe46 mov       %rcx,0x78(%rsp)
063cbe4b mov       %rdx,0x80(%rsp)
063cbe53 mov       %r8,0x88(%rsp)
063cbe5b movq      $0,0x70(%rsp)
063cbe64 mov       0x50(%rsp),%rax
063cbe69 cmp       %rax,0x70(%rsp)
063cbe6e jb        0x0000`0000`063C`BE7D
063cbe70 movl      $0,0x6C(%rsp)
063cbe78 jmp       0x0000`0000`063C`BF83
063cbe7d mov       0x60(%rsp),%rax
063cbe82 mov       0x70(%rsp),%rcx
063cbe87 mov       %rax,0xA8(%rsp)
063cbe8f mov       %rcx,0xB0(%rsp)
063cbe97 mov       %rax,0xB8(%rsp)
063cbe9f mov       %rcx,0xC0(%rsp)
063cbea7 add       %rcx,%rax
063cbeaa mov       %rax,0xC8(%rsp)
063cbeb2 mov       0xC8(%rsp),%rax
063cbeba mov       %rax,0x48(%rsp)
063cbebf mov       0x58(%rsp),%rax
063cbec4 mov       0x48(%rsp),%rcx
063cbec9 mov       (%rcx),%cl
063cbecb mov       %cl,0x3F(%rsp)
063cbecf mov       %cl,0x96(%rsp)
063cbed6 mov       0x70(%rsp),%rcx
063cbedb mov       %rax,0x98(%rsp)
063cbee3 mov       %rcx,0xA0(%rsp)
063cbeeb mov       %rax,0xD0(%rsp)
063cbef3 mov       %rcx,0xD8(%rsp)
063cbefb add       %rcx,%rax
063cbefe mov       %rax,0xE0(%rsp)
063cbf06 mov       0xE0(%rsp),%rax
063cbf0e mov       %rax,0x40(%rsp)
063cbf13 mov       0x3F(%rsp),%al
063cbf17 mov       0x40(%rsp),%rcx
063cbf1c mov       (%rcx),%cl
063cbf1e mov       %cl,0x3E(%rsp)
063cbf22 mov       %cl,0x97(%rsp)
063cbf29 cmp       %cl,%al
063cbf2b jne       0x0000`0000`063C`BF44
063cbf2d mov       0x70(%rsp),%rax
063cbf32 add       $1,%rax
063cbf36 mov       %rax,0x30(%rsp)
063cbf3b setb      %al
063cbf3e test      $1,%al
063cbf40 jne       0x0000`0000`063C`BF9E
063cbf42 jmp       0x0000`0000`063C`BF8F
063cbf44 mov       0x3E(%rsp),%cl
063cbf48 mov       0x3F(%rsp),%al
063cbf4c movzbl    %al,%eax
063cbf4f movzbl    %cl,%ecx
063cbf52 sub       %ecx,%eax
063cbf54 mov       %eax,0x2C(%rsp)
063cbf58 seto      %al
063cbf5b test      $1,%al
063cbf5d jne       0x0000`0000`063C`BF69
063cbf5f mov       0x2C(%rsp),%eax
063cbf63 mov       %eax,0x6C(%rsp)
063cbf67 jmp       0x0000`0000`063C`BF83
063cbf69 lea       0x63D`2A40,%rcx
063cbf70 lea       0x63D`2C68,%r8
063cbf77 mov       $0x21,%edx
063cbf7c call      0x0000`0000`063B`9FF0
063cbf81 ud2
063cbf83 mov       0x6C(%rsp),%eax
063cbf87 add       $0xE8,%rsp
063cbf8e ret
063cbf8f mov       0x30(%rsp),%rax
063cbf94 mov       %rax,0x70(%rsp)
063cbf99 jmp       0x0000`0000`063C`BE64
063cbf9e lea       0x63D`2AA0,%rcx
063cbfa5 lea       0x63D`2C80,%r8
063cbfac mov       $0x1C,%edx
063cbfb1 call      0x0000`0000`063B`9FF0
063cbfb6 ud2

compiler_builtins::mem::memcmp::memcmp:
063cbfc0 sub       $0x48,%rsp
063cbfc4 mov       %rcx,0x30(%rsp)
063cbfc9 mov       %rdx,0x38(%rsp)
063cbfce mov       %r8,0x40(%rsp)
063cbfd3 call      0x0000`0000`063C`BE30
063cbfd8 mov       %eax,0x2C(%rsp)
063cbfdc mov       0x2C(%rsp),%eax
063cbfe0 add       $0x48,%rsp
063cbfe4 ret

core::result::impl$28::from_residual<tuple$<>,enum$<ucs2::Error>,enum$<ucs2::Error> >:
063cbff0 sub       $0x28,%rsp
063cbff4 and       $1,%cl
063cbff7 mov       %cl,0x25(%rsp)
063cbffb mov       0x25(%rsp),%cl
063cbfff mov       %cl,%al
063cc001 and       $1,%al
063cc003 mov       %al,0x27(%rsp)
063cc007 and       $1,%cl
063cc00a call      0x0000`0000`063C`C220
063cc00f mov       %al,0x24(%rsp)
063cc013 mov       0x24(%rsp),%al
063cc017 and       $1,%al
063cc019 mov       %al,0x26(%rsp)
063cc01d mov       0x26(%rsp),%al
063cc021 add       $0x28,%rsp
063cc025 ret

core::ptr::mut_ptr::impl$0::is_null<u16>:
063cc030 sub       $0x38,%rsp
063cc034 mov       %rcx,0x30(%rsp)
063cc039 mov       %rcx,0x28(%rsp)
063cc03e mov       0x28(%rsp),%rcx
063cc043 xor       %eax,%eax
063cc045 mov       %eax,%edx
063cc047 call      0x0000`0000`063B`6920
063cc04c mov       %al,0x27(%rsp)
063cc050 mov       0x27(%rsp),%al
063cc054 and       $1,%al
063cc056 movzbl    %al,%eax
063cc059 add       $0x38,%rsp
063cc05d ret

core::ptr::non_null::NonNull<u16>::new_unchecked<u16>:
063cc060 sub       $0x10,%rsp
063cc064 mov       %rcx,8(%rsp)
063cc069 mov       %rcx,(%rsp)
063cc06d mov       (%rsp),%rax
063cc071 add       $0x10,%rsp
063cc075 ret

core::ptr::non_null::NonNull<u16>::as_ptr<u16>:
063cc080 push      %rax
063cc081 mov       %rcx,%rax
063cc084 mov       %rax,(%rsp)
063cc088 pop       %rcx
063cc089 ret

core::ptr::const_ptr::impl$0::is_null<u16>:
063cc090 sub       $0x38,%rsp
063cc094 mov       %rcx,0x30(%rsp)
063cc099 mov       %rcx,0x28(%rsp)
063cc09e mov       0x28(%rsp),%rcx
063cc0a3 xor       %eax,%eax
063cc0a5 mov       %eax,%edx
063cc0a7 call      0x0000`0000`063B`64E0
063cc0ac mov       %al,0x27(%rsp)
063cc0b0 mov       0x27(%rsp),%al
063cc0b4 and       $1,%al
063cc0b6 movzbl    %al,%eax
063cc0b9 add       $0x38,%rsp
063cc0bd ret

core::slice::impl$0::iter<u16>:
063cc0c0 sub       $0x48,%rsp
063cc0c4 mov       %rcx,0x38(%rsp)
063cc0c9 mov       %rdx,0x40(%rsp)
063cc0ce call      0x0000`0000`063C`C110
063cc0d3 mov       %rax,0x28(%rsp)
063cc0d8 mov       %rdx,0x30(%rsp)
063cc0dd mov       0x30(%rsp),%rdx
063cc0e2 mov       0x28(%rsp),%rax
063cc0e7 add       $0x48,%rsp
063cc0eb ret

core::slice::impl$0::as_ptr<u16>:
063cc0f0 sub       $0x10,%rsp
063cc0f4 mov       %rcx,%rax
063cc0f7 mov       %rax,(%rsp)
063cc0fb mov       %rdx,8(%rsp)
063cc100 add       $0x10,%rsp
063cc104 ret

core::slice::iter::Iter<u16>::new<u16>:
063cc110 sub       $0xC8,%rsp
063cc117 mov       %rdx,0x38(%rsp)
063cc11c mov       %rcx,0x60(%rsp)
063cc121 mov       %rdx,0x68(%rsp)
063cc126 call      0x0000`0000`063C`C0F0
063cc12b mov       %rax,0x40(%rsp)
063cc130 mov       %rax,0x70(%rsp)
063cc135 mov       0x40(%rsp),%rcx
063cc13a call      0x0000`0000`063C`C090
063cc13f jmp       0x0000`0000`063C`C141
063cc141 mov       $2,%eax
063cc146 cmp       $0,%rax
063cc14a jne       0x0000`0000`063C`C18D
063cc14c mov       0x38(%rsp),%rcx
063cc151 mov       0x40(%rsp),%rax
063cc156 mov       %rax,0x78(%rsp)
063cc15b mov       %rcx,0x80(%rsp)
063cc163 mov       %rax,0x88(%rsp)
063cc16b mov       %rcx,0x90(%rsp)
063cc173 add       %rcx,%rax
063cc176 mov       %rax,0x98(%rsp)
063cc17e mov       0x98(%rsp),%rax
063cc186 mov       %rax,0x30(%rsp)
063cc18b jmp       0x0000`0000`063C`C1E4
063cc18d mov       0x40(%rsp),%rax
063cc192 mov       0x38(%rsp),%rcx
063cc197 mov       %rax,0xA0(%rsp)
063cc19f mov       %rcx,0xA8(%rsp)
063cc1a7 mov       %rax,0xB0(%rsp)
063cc1af mov       %rcx,0xB8(%rsp)
063cc1b7 shl       $1,%rcx
063cc1bb add       %rcx,%rax
063cc1be mov       %rax,0xC0(%rsp)
063cc1c6 mov       0xC0(%rsp),%rax
063cc1ce mov       %rax,0x58(%rsp)
063cc1d3 mov       0x40(%rsp),%rcx
063cc1d8 call      0x0000`0000`063C`C060
063cc1dd mov       %rax,0x28(%rsp)
063cc1e2 jmp       0x0000`0000`063C`C1F0
063cc1e4 mov       0x30(%rsp),%rax
063cc1e9 mov       %rax,0x58(%rsp)
063cc1ee jmp       0x0000`0000`063C`C1D3
063cc1f0 mov       0x28(%rsp),%rcx
063cc1f5 mov       0x58(%rsp),%rax
063cc1fa mov       %rcx,0x48(%rsp)
063cc1ff mov       %rax,0x50(%rsp)
063cc204 mov       0x48(%rsp),%rax
063cc209 mov       0x50(%rsp),%rdx
063cc20e add       $0xC8,%rsp
063cc215 ret

core::convert::impl$4::from<enum$<ucs2::Error> >:
063cc220 push      %rax
063cc221 mov       %cl,%al
063cc223 and       $1,%al
063cc225 mov       %al,7(%rsp)
063cc229 and       $1,%cl
063cc22c movzbl    %cl,%eax
063cc22f pop       %rcx
063cc230 ret

core::result::impl$27::branch<tuple$<>,enum$<ucs2::Error> >:
063cc240 sub       $0x10,%rsp
063cc244 mov       %cl,5(%rsp)
063cc248 mov       5(%rsp),%al
063cc24c add       $0xFE,%al
063cc24e setne     %al
063cc251 movzbl    %al,%eax
063cc254 je        0x0000`0000`063C`C25C
063cc256 jmp       0x0000`0000`063C`C258
063cc258 jmp       0x0000`0000`063C`C263
063cc25a ud2
063cc25c movb      $2,6(%rsp)
063cc261 jmp       0x0000`0000`063C`C280
063cc263 mov       5(%rsp),%al
063cc267 mov       %al,%cl
063cc269 and       $1,%cl
063cc26c mov       %cl,0xF(%rsp)
063cc270 and       $1,%al
063cc272 mov       %al,7(%rsp)
063cc276 mov       7(%rsp),%al
063cc27a and       $1,%al
063cc27c mov       %al,6(%rsp)
063cc280 mov       6(%rsp),%al
063cc284 add       $0x10,%rsp
063cc288 ret

core::slice::iter::impl$173::next<u16>:
063cc290 sub       $0x98,%rsp
063cc297 mov       %rcx,0x40(%rsp)
063cc29c mov       %rcx,0x58(%rsp)
063cc2a1 mov       (%rcx),%rcx
063cc2a4 call      0x0000`0000`063C`C080
063cc2a9 mov       %rax,0x48(%rsp)
063cc2ae mov       0x48(%rsp),%rcx
063cc2b3 call      0x0000`0000`063C`C030
063cc2b8 jmp       0x0000`0000`063C`C2BA
063cc2ba mov       $2,%eax
063cc2bf cmp       $0,%rax
063cc2c3 jne       0x0000`0000`063C`C2D9
063cc2c5 mov       0x40(%rsp),%rax
063cc2ca mov       (%rax),%rcx
063cc2cd call      0x0000`0000`063C`C080
063cc2d2 mov       %rax,0x38(%rsp)
063cc2d7 jmp       0x0000`0000`063C`C2E9
063cc2d9 mov       0x40(%rsp),%rax
063cc2de mov       8(%rax),%rcx
063cc2e2 call      0x0000`0000`063C`C090
063cc2e7 jmp       0x0000`0000`063C`C2C5
063cc2e9 mov       0x38(%rsp),%rax
063cc2ee mov       0x40(%rsp),%rcx
063cc2f3 cmp       8(%rcx),%rax
063cc2f7 je        0x0000`0000`063C`C380
063cc2fd mov       0x40(%rsp),%rax
063cc302 mov       %rax,0x68(%rsp)
063cc307 movq      $1,0x70(%rsp)
063cc310 mov       (%rax),%rcx
063cc313 call      0x0000`0000`063C`C080
063cc318 mov       %rax,%rcx
063cc31b mov       0x40(%rsp),%rax
063cc320 mov       %rcx,0x28(%rsp)
063cc325 mov       %rcx,0x78(%rsp)
063cc32a mov       (%rax),%rcx
063cc32d call      0x0000`0000`063C`C080
063cc332 mov       %rax,0x80(%rsp)
063cc33a movq      $1,0x88(%rsp)
063cc346 add       $2,%rax
063cc34a mov       %rax,0x90(%rsp)
063cc352 mov       0x90(%rsp),%rcx
063cc35a call      0x0000`0000`063C`C060
063cc35f mov       0x40(%rsp),%rcx
063cc364 mov       %rax,%rdx
063cc367 mov       0x28(%rsp),%rax
063cc36c mov       %rdx,(%rcx)
063cc36f mov       %rax,0x60(%rsp)
063cc374 mov       0x60(%rsp),%rax
063cc379 mov       %rax,0x30(%rsp)
063cc37e jmp       0x0000`0000`063C`C396
063cc380 movq      $0,0x50(%rsp)
063cc389 mov       0x50(%rsp),%rax
063cc38e add       $0x98,%rsp
063cc395 ret
063cc396 mov       0x30(%rsp),%rax
063cc39b mov       %rax,0x50(%rsp)
063cc3a0 jmp       0x0000`0000`063C`C389

