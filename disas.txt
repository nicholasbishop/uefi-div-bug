core::fmt::ArgumentV1::new_display<u128>:
063aae40 sub       $0x38,%rsp
063aae44 mov       %rcx,0x30(%rsp)
063aae49 lea       0x63B`CC80,%rdx
063aae50 call      0x0000`0000`063A`AE70
063aae55 mov       %rax,0x20(%rsp)
063aae5a mov       %rdx,0x28(%rsp)
063aae5f mov       0x28(%rsp),%rdx
063aae64 mov       0x20(%rsp),%rax
063aae69 add       $0x38,%rsp
063aae6d ret

core::fmt::ArgumentV1::new<u128>:
063aae70 sub       $0x48,%rsp
063aae74 mov       %rcx,8(%rsp)
063aae79 mov       %rcx,0x28(%rsp)
063aae7e mov       %rdx,0x30(%rsp)
063aae83 mov       %rdx,0x38(%rsp)
063aae88 mov       0x38(%rsp),%rax
063aae8d mov       %rax,0x10(%rsp)
063aae92 mov       8(%rsp),%rax
063aae97 mov       %rax,0x40(%rsp)
063aae9c mov       0x40(%rsp),%rax
063aaea1 mov       %rax,(%rsp)
063aaea5 mov       0x10(%rsp),%rax
063aaeaa mov       (%rsp),%rcx
063aaeae mov       %rcx,0x18(%rsp)
063aaeb3 mov       %rax,0x20(%rsp)
063aaeb8 mov       0x18(%rsp),%rax
063aaebd mov       0x20(%rsp),%rdx
063aaec2 add       $0x48,%rsp
063aaec6 ret

core::fmt::ArgumentV1::new<ptr_const$<tuple$<> > >:
063aaed0 sub       $0x48,%rsp
063aaed4 mov       %rcx,8(%rsp)
063aaed9 mov       %rcx,0x28(%rsp)
063aaede mov       %rdx,0x30(%rsp)
063aaee3 mov       %rdx,0x38(%rsp)
063aaee8 mov       0x38(%rsp),%rax
063aaeed mov       %rax,0x10(%rsp)
063aaef2 mov       8(%rsp),%rax
063aaef7 mov       %rax,0x40(%rsp)
063aaefc mov       0x40(%rsp),%rax
063aaf01 mov       %rax,(%rsp)
063aaf05 mov       0x10(%rsp),%rax
063aaf0a mov       (%rsp),%rcx
063aaf0e mov       %rcx,0x18(%rsp)
063aaf13 mov       %rax,0x20(%rsp)
063aaf18 mov       0x18(%rsp),%rax
063aaf1d mov       0x20(%rsp),%rdx
063aaf22 add       $0x48,%rsp
063aaf26 ret

core::fmt::ArgumentV1::new_debug<ptr_const$<tuple$<> > >:
063aaf30 sub       $0x38,%rsp
063aaf34 mov       %rcx,0x30(%rsp)
063aaf39 lea       0x63B`FF30,%rdx
063aaf40 call      0x0000`0000`063A`AED0
063aaf45 mov       %rax,0x20(%rsp)
063aaf4a mov       %rdx,0x28(%rsp)
063aaf4f mov       0x28(%rsp),%rdx
063aaf54 mov       0x20(%rsp),%rax
063aaf59 add       $0x38,%rsp
063aaf5d ret

core::fmt::Arguments::new_v1_formatted:
063aaf60 push      %rsi
063aaf61 sub       $0x48,%rsp
063aaf65 mov       %rdx,%r10
063aaf68 mov       %rcx,%rax
063aaf6b mov       0x88(%rsp),%r11
063aaf73 mov       0x80(%rsp),%rsi
063aaf7b mov       0x78(%rsp),%rdx
063aaf80 mov       %r10,0x10(%rsp)
063aaf85 mov       %r8,0x18(%rsp)
063aaf8a mov       %r9,0x20(%rsp)
063aaf8f mov       %rdx,0x28(%rsp)
063aaf94 mov       %rsi,0x30(%rsp)
063aaf99 mov       %r11,0x38(%rsp)
063aaf9e mov       %rsi,(%rsp)
063aafa2 mov       %r11,8(%rsp)
063aafa7 mov       %r10,(%rcx)
063aafaa mov       %r8,8(%rcx)
063aafae mov       (%rsp),%r10
063aafb2 mov       8(%rsp),%r8
063aafb7 mov       %r10,0x10(%rcx)
063aafbb mov       %r8,0x18(%rcx)
063aafbf mov       %r9,0x20(%rcx)
063aafc3 mov       %rdx,0x28(%rcx)
063aafc7 add       $0x48,%rsp
063aafcb pop       %rsi
063aafcc ret

core::fmt::Arguments::new_v1:
063aafd0 sub       $0xC8,%rsp
063aafd7 mov       %r9,0x30(%rsp)
063aafdc mov       %r8,0x38(%rsp)
063aafe1 mov       %rdx,0x40(%rsp)
063aafe6 mov       %rcx,0x48(%rsp)
063aafeb mov       %rcx,0x50(%rsp)
063aaff0 mov       0xF0(%rsp),%rax
063aaff8 mov       %rax,0x58(%rsp)
063aaffd mov       %rdx,0xA8(%rsp)
063ab005 mov       %r8,0xB0(%rsp)
063ab00d mov       %r9,0xB8(%rsp)
063ab015 mov       %rax,0xC0(%rsp)
063ab01d cmp       %rax,%r8
063ab020 jb        0x0000`0000`063A`B039
063ab022 mov       0x58(%rsp),%rax
063ab027 add       $1,%rax
063ab02b mov       %rax,0x28(%rsp)
063ab030 setb      %al
063ab033 test      $1,%al
063ab035 jne       0x0000`0000`063A`B063
063ab037 jmp       0x0000`0000`063A`B04B
063ab039 movb      $1,0x67(%rsp)
063ab03e testb     $1,0x67(%rsp)
063ab043 jne       0x0000`0000`063A`B0D6
063ab049 jmp       0x0000`0000`063A`B07D
063ab04b mov       0x38(%rsp),%rax
063ab050 mov       0x28(%rsp),%rcx
063ab055 cmp       %rcx,%rax
063ab058 seta      %al
063ab05b and       $1,%al
063ab05d mov       %al,0x67(%rsp)
063ab061 jmp       0x0000`0000`063A`B03E
063ab063 lea       0x63C`BED0,%rcx
063ab06a lea       0x63C`BEB8,%r8
063ab071 mov       $0x1C,%edx
063ab076 call      0x0000`0000`063B`8E30
063ab07b ud2
063ab07d mov       0x50(%rsp),%rax
063ab082 mov       0x48(%rsp),%rcx
063ab087 mov       0x58(%rsp),%rdx
063ab08c mov       0x30(%rsp),%r8
063ab091 mov       0x38(%rsp),%r9
063ab096 mov       0x40(%rsp),%r10
063ab09b movq      $0,0x98(%rsp)
063ab0a7 mov       %r10,(%rcx)
063ab0aa mov       %r9,8(%rcx)
063ab0ae mov       0x98(%rsp),%r10
063ab0b6 mov       0xA0(%rsp),%r9
063ab0be mov       %r10,0x10(%rcx)
063ab0c2 mov       %r9,0x18(%rcx)
063ab0c6 mov       %r8,0x20(%rcx)
063ab0ca mov       %rdx,0x28(%rcx)
063ab0ce add       $0xC8,%rsp
063ab0d5 ret
063ab0d6 lea       0x68(%rsp),%rcx
063ab0db lea       0x63C`BEF8,%rdx
063ab0e2 mov       $1,%r8d
063ab0e8 lea       0x63C`BF08,%r9
063ab0ef xor       %eax,%eax
063ab0f1 movq      $0,0x20(%rsp)
063ab0fa call      0x0000`0000`063A`AFD0
063ab0ff lea       0x63C`BF08,%rdx
063ab106 lea       0x68(%rsp),%rcx
063ab10b call      0x0000`0000`063B`8F40
063ab110 ud2

core::sync::atomic::AtomicUsize::load:
063ab120 sub       $0x58,%rsp
063ab124 mov       %dl,0x37(%rsp)
063ab128 mov       %rcx,0x40(%rsp)
063ab12d mov       %dl,0x4F(%rsp)
063ab131 mov       %rcx,0x38(%rsp)
063ab136 mov       %rcx,0x50(%rsp)
063ab13b mov       0x37(%rsp),%dl
063ab13f mov       0x38(%rsp),%rcx
063ab144 call      0x0000`0000`063B`97B0
063ab149 mov       %rax,0x28(%rsp)
063ab14e mov       0x28(%rsp),%rax
063ab153 add       $0x58,%rsp
063ab157 ret

log::impl$4::le:
063ab160 sub       $0x10,%rsp
063ab164 mov       %rcx,(%rsp)
063ab168 mov       %rdx,8(%rsp)
063ab16d mov       (%rcx),%rax
063ab170 mov       (%rdx),%rcx
063ab173 cmp       %rcx,%rax
063ab176 setbe     %al
063ab179 and       $1,%al
063ab17b movzbl    %al,%eax
063ab17e add       $0x10,%rsp
063ab182 ret

uefi_div_bug::hide_u128:
063ab190 sub       $0x10,%rsp
063ab194 mov       %rcx,%rax
063ab197 mov       %rax,(%rsp)
063ab19b mov       %rdx,8(%rsp)
063ab1a0 add       $0x10,%rsp
063ab1a4 ret

uefi_div_bug::do_div:
063ab1b0 sub       $0x88,%rsp
063ab1b7 mov       %r9,0x20(%rsp)
063ab1bc mov       %r8,0x28(%rsp)
063ab1c1 mov       %rdx,0x30(%rsp)
063ab1c6 mov       %rcx,0x38(%rsp)
063ab1cb mov       %rcx,0x68(%rsp)
063ab1d0 mov       %rdx,0x70(%rsp)
063ab1d5 mov       %r9,0x80(%rsp)
063ab1dd mov       %r8,0x78(%rsp)
063ab1e2 or        %r9,%r8
063ab1e5 sete      %al
063ab1e8 test      $1,%al
063ab1ea jne       0x0000`0000`063A`B22B
063ab1ec mov       0x28(%rsp),%rax
063ab1f1 mov       0x20(%rsp),%rcx
063ab1f6 mov       0x30(%rsp),%rdx
063ab1fb mov       0x38(%rsp),%r8
063ab200 mov       %r8,0x50(%rsp)
063ab205 mov       %rdx,0x58(%rsp)
063ab20a mov       %rcx,0x48(%rsp)
063ab20f mov       %rax,0x40(%rsp)
063ab214 lea       0x50(%rsp),%rcx
063ab219 lea       0x40(%rsp),%rdx
063ab21e call      0x0000`0000`063C`AAA0
063ab223 add       $0x88,%rsp
063ab22a ret
063ab22b lea       0x63C`BF50,%rcx
063ab232 lea       0x63C`BF30,%r8
063ab239 mov       $0x19,%edx
063ab23e call      0x0000`0000`063B`8E30
063ab243 ud2

uefi_div_bug::efi_main:
063ab250 sub       $0x458,%rsp
063ab257 mov       %rdx,0x138(%rsp)
063ab25f mov       %rcx,0x3F0(%rsp)
063ab267 lea       0x138(%rsp),%rcx
063ab26f call      0x0000`0000`063A`C3B0
063ab274 mov       %rax,0x128(%rsp)
063ab27c mov       %rdx,0x130(%rsp)
063ab284 mov       0x130(%rsp),%rdx
063ab28c mov       0x128(%rsp),%rcx
063ab294 lea       0x63C`BF70,%r8
063ab29b call      0x0000`0000`063A`EE60
063ab2a0 movq      $3,0x140(%rsp)
063ab2ac lea       0x140(%rsp),%rcx
063ab2b4 lea       0x63C`BF88,%rdx
063ab2bb call      0x0000`0000`063A`B160
063ab2c0 mov       %al,0x127(%rsp)
063ab2c7 mov       0x127(%rsp),%al
063ab2ce test      $1,%al
063ab2d0 jne       0x0000`0000`063A`B2DE
063ab2d2 jmp       0x0000`0000`063A`B2D4
063ab2d4 movb      $0,0x14F(%rsp)
063ab2dc jmp       0x0000`0000`063A`B33D
063ab2de movb      $0,0x44F(%rsp)
063ab2e6 mov       0x44F(%rsp),%dl
063ab2ed mov       0x63D`1E50,%rcx
063ab2f4 call      0x0000`0000`063A`B120
063ab2f9 mov       %rax,0x450(%rsp)
063ab301 mov       0x450(%rsp),%rax
063ab309 mov       %rax,0x150(%rsp)
063ab311 lea       0x140(%rsp),%rcx
063ab319 lea       0x150(%rsp),%rdx
063ab321 call      0x0000`0000`063A`B160
063ab326 mov       %al,0x126(%rsp)
063ab32d mov       0x126(%rsp),%al
063ab334 and       $1,%al
063ab336 mov       %al,0x14F(%rsp)
063ab33d testb     $1,0x14F(%rsp)
063ab345 jne       0x0000`0000`063A`B36A
063ab347 xor       %eax,%eax
063ab349 mov       %eax,%edx
063ab34b mov       $2,%ecx
063ab350 call      0x0000`0000`063A`B190
063ab355 mov       %rdx,0x1A0(%rsp)
063ab35d mov       %rax,0x198(%rsp)
063ab365 jmp       0x0000`0000`063A`B417
063ab36a lea       0x63C`BFB0,%rcx
063ab371 call      0x0000`0000`063A`AF30
063ab376 mov       %rax,0x110(%rsp)
063ab37e mov       %rdx,0x118(%rsp)
063ab386 mov       0x118(%rsp),%rax
063ab38e mov       0x110(%rsp),%rcx
063ab396 mov       %rcx,0x188(%rsp)
063ab39e mov       %rax,0x190(%rsp)
063ab3a6 lea       0x188(%rsp),%rax
063ab3ae mov       %rax,0x108(%rsp)
063ab3b6 mov       0x108(%rsp),%r9
063ab3be lea       0x158(%rsp),%rcx
063ab3c6 lea       0x63C`BFA0,%rdx
063ab3cd mov       $1,%r8d
063ab3d3 lea       0x63C`BFB8,%rax
063ab3da movq      $1,0x20(%rsp)
063ab3e3 mov       %rax,0x28(%rsp)
063ab3e8 movq      $1,0x30(%rsp)
063ab3f1 call      0x0000`0000`063A`AF60
063ab3f6 mov       0x140(%rsp),%rdx
063ab3fe lea       0x158(%rsp),%rcx
063ab406 lea       0x63C`C000,%r8
063ab40d call      0x0000`0000`063B`4040
063ab412 jmp       0x0000`0000`063A`B347
063ab417 xor       %eax,%eax
063ab419 mov       %eax,%edx
063ab41b mov       $1,%ecx
063ab420 call      0x0000`0000`063A`B190
063ab425 mov       %rdx,0x1B0(%rsp)
063ab42d mov       %rax,0x1A8(%rsp)
063ab435 movq      $3,0x1B8(%rsp)
063ab441 lea       0x1B8(%rsp),%rcx
063ab449 lea       0x63C`BF88,%rdx
063ab450 call      0x0000`0000`063A`B160
063ab455 mov       %al,0x107(%rsp)
063ab45c mov       0x107(%rsp),%al
063ab463 test      $1,%al
063ab465 jne       0x0000`0000`063A`B473
063ab467 jmp       0x0000`0000`063A`B469
063ab469 movb      $0,0x1C7(%rsp)
063ab471 jmp       0x0000`0000`063A`B4D2
063ab473 movb      $0,0x43F(%rsp)
063ab47b mov       0x43F(%rsp),%dl
063ab482 mov       0x63D`1E50,%rcx
063ab489 call      0x0000`0000`063A`B120
063ab48e mov       %rax,0x440(%rsp)
063ab496 mov       0x440(%rsp),%rax
063ab49e mov       %rax,0x1C8(%rsp)
063ab4a6 lea       0x1B8(%rsp),%rcx
063ab4ae lea       0x1C8(%rsp),%rdx
063ab4b6 call      0x0000`0000`063A`B160
063ab4bb mov       %al,0x106(%rsp)
063ab4c2 mov       0x106(%rsp),%al
063ab4c9 and       $1,%al
063ab4cb mov       %al,0x1C7(%rsp)
063ab4d2 testb     $1,0x1C7(%rsp)
063ab4da jne       0x0000`0000`063A`B508
063ab4dc movq      $3,0x220(%rsp)
063ab4e8 lea       0x220(%rsp),%rcx
063ab4f0 lea       0x63C`BF88,%rdx
063ab4f7 call      0x0000`0000`063A`B160
063ab4fc mov       %al,0x105(%rsp)
063ab503 jmp       0x0000`0000`063A`B5CE
063ab508 lea       0x198(%rsp),%rcx
063ab510 call      0x0000`0000`063A`AE40
063ab515 mov       %rax,0xF0(%rsp)
063ab51d mov       %rdx,0xF8(%rsp)
063ab525 lea       0x1A8(%rsp),%rcx
063ab52d call      0x0000`0000`063A`AE40
063ab532 mov       %rax,0xE0(%rsp)
063ab53a mov       %rdx,0xE8(%rsp)
063ab542 mov       0xE8(%rsp),%rax
063ab54a mov       0xE0(%rsp),%rcx
063ab552 mov       0xF8(%rsp),%rdx
063ab55a mov       0xF0(%rsp),%r8
063ab562 mov       %r8,0x200(%rsp)
063ab56a mov       %rdx,0x208(%rsp)
063ab572 mov       %rcx,0x210(%rsp)
063ab57a mov       %rax,0x218(%rsp)
063ab582 lea       0x200(%rsp),%r9
063ab58a lea       0x1D0(%rsp),%rcx
063ab592 lea       0x63C`C040,%rdx
063ab599 mov       $2,%r8d
063ab59f movq      $2,0x20(%rsp)
063ab5a8 call      0x0000`0000`063A`AFD0
063ab5ad mov       0x1B8(%rsp),%rdx
063ab5b5 lea       0x1D0(%rsp),%rcx
063ab5bd lea       0x63C`C060,%r8
063ab5c4 call      0x0000`0000`063B`4040
063ab5c9 jmp       0x0000`0000`063A`B4DC
063ab5ce mov       0x105(%rsp),%al
063ab5d5 test      $1,%al
063ab5d7 jne       0x0000`0000`063A`B5E5
063ab5d9 jmp       0x0000`0000`063A`B5DB
063ab5db movb      $0,0x22F(%rsp)
063ab5e3 jmp       0x0000`0000`063A`B644
063ab5e5 movb      $0,0x42F(%rsp)
063ab5ed mov       0x42F(%rsp),%dl
063ab5f4 mov       0x63D`1E50,%rcx
063ab5fb call      0x0000`0000`063A`B120
063ab600 mov       %rax,0x430(%rsp)
063ab608 mov       0x430(%rsp),%rax
063ab610 mov       %rax,0x230(%rsp)
063ab618 lea       0x220(%rsp),%rcx
063ab620 lea       0x230(%rsp),%rdx
063ab628 call      0x0000`0000`063A`B160
063ab62d mov       %al,0xDF(%rsp)
063ab634 mov       0xDF(%rsp),%al
063ab63b and       $1,%al
063ab63d mov       %al,0x22F(%rsp)
063ab644 testb     $1,0x22F(%rsp)
063ab64c jne       0x0000`0000`063A`B67A
063ab64e movq      $3,0x288(%rsp)
063ab65a lea       0x288(%rsp),%rcx
063ab662 lea       0x63C`BF88,%rdx
063ab669 call      0x0000`0000`063A`B160
063ab66e mov       %al,0xDE(%rsp)
063ab675 jmp       0x0000`0000`063A`B77C
063ab67a mov       0x198(%rsp),%rdx
063ab682 mov       0x1A0(%rsp),%rcx
063ab68a mov       0x1A8(%rsp),%r8
063ab692 mov       0x1B0(%rsp),%rax
063ab69a add       %r8,%rdx
063ab69d mov       %rdx,0xC8(%rsp)
063ab6a5 adc       %rax,%rcx
063ab6a8 setb      %al
063ab6ab mov       %rcx,0xD0(%rsp)
063ab6b3 test      $1,%al
063ab6b5 jne       0x0000`0000`063A`B6F6
063ab6b7 mov       0xD0(%rsp),%rax
063ab6bf mov       0xC8(%rsp),%rcx
063ab6c7 mov       %rcx,0x278(%rsp)
063ab6cf mov       %rax,0x280(%rsp)
063ab6d7 lea       0x278(%rsp),%rcx
063ab6df call      0x0000`0000`063A`AE40
063ab6e4 mov       %rax,0xB8(%rsp)
063ab6ec mov       %rdx,0xC0(%rsp)
063ab6f4 jmp       0x0000`0000`063A`B710
063ab6f6 lea       0x63C`BED0,%rcx
063ab6fd lea       0x63C`C0B0,%r8
063ab704 mov       $0x1C,%edx
063ab709 call      0x0000`0000`063B`8E30
063ab70e ud2
063ab710 mov       0xC0(%rsp),%rax
063ab718 mov       0xB8(%rsp),%rcx
063ab720 mov       %rcx,0x268(%rsp)
063ab728 mov       %rax,0x270(%rsp)
063ab730 lea       0x268(%rsp),%r9
063ab738 lea       0x238(%rsp),%rcx
063ab740 lea       0x63C`C0A0,%rdx
063ab747 mov       $1,%r8d
063ab74d movq      $1,0x20(%rsp)
063ab756 call      0x0000`0000`063A`AFD0
063ab75b mov       0x220(%rsp),%rdx
063ab763 lea       0x238(%rsp),%rcx
063ab76b lea       0x63C`C0C8,%r8
063ab772 call      0x0000`0000`063B`4040
063ab777 jmp       0x0000`0000`063A`B64E
063ab77c mov       0xDE(%rsp),%al
063ab783 test      $1,%al
063ab785 jne       0x0000`0000`063A`B793
063ab787 jmp       0x0000`0000`063A`B789
063ab789 movb      $0,0x297(%rsp)
063ab791 jmp       0x0000`0000`063A`B7F2
063ab793 movb      $0,0x41F(%rsp)
063ab79b mov       0x41F(%rsp),%dl
063ab7a2 mov       0x63D`1E50,%rcx
063ab7a9 call      0x0000`0000`063A`B120
063ab7ae mov       %rax,0x420(%rsp)
063ab7b6 mov       0x420(%rsp),%rax
063ab7be mov       %rax,0x298(%rsp)
063ab7c6 lea       0x288(%rsp),%rcx
063ab7ce lea       0x298(%rsp),%rdx
063ab7d6 call      0x0000`0000`063A`B160
063ab7db mov       %al,0xB7(%rsp)
063ab7e2 mov       0xB7(%rsp),%al
063ab7e9 and       $1,%al
063ab7eb mov       %al,0x297(%rsp)
063ab7f2 testb     $1,0x297(%rsp)
063ab7fa jne       0x0000`0000`063A`B828
063ab7fc movq      $3,0x2F0(%rsp)
063ab808 lea       0x2F0(%rsp),%rcx
063ab810 lea       0x63C`BF88,%rdx
063ab817 call      0x0000`0000`063A`B160
063ab81c mov       %al,0xB6(%rsp)
063ab823 jmp       0x0000`0000`063A`B92A
063ab828 mov       0x198(%rsp),%rdx
063ab830 mov       0x1A0(%rsp),%rcx
063ab838 mov       0x1A8(%rsp),%r8
063ab840 mov       0x1B0(%rsp),%rax
063ab848 sub       %r8,%rdx
063ab84b mov       %rdx,0xA0(%rsp)
063ab853 sbb       %rax,%rcx
063ab856 setb      %al
063ab859 mov       %rcx,0xA8(%rsp)
063ab861 test      $1,%al
063ab863 jne       0x0000`0000`063A`B8A4
063ab865 mov       0xA8(%rsp),%rax
063ab86d mov       0xA0(%rsp),%rcx
063ab875 mov       %rcx,0x2E0(%rsp)
063ab87d mov       %rax,0x2E8(%rsp)
063ab885 lea       0x2E0(%rsp),%rcx
063ab88d call      0x0000`0000`063A`AE40
063ab892 mov       %rax,0x90(%rsp)
063ab89a mov       %rdx,0x98(%rsp)
063ab8a2 jmp       0x0000`0000`063A`B8BE
063ab8a4 lea       0x63C`C130,%rcx
063ab8ab lea       0x63C`C118,%r8
063ab8b2 mov       $0x21,%edx
063ab8b7 call      0x0000`0000`063B`8E30
063ab8bc ud2
063ab8be mov       0x98(%rsp),%rax
063ab8c6 mov       0x90(%rsp),%rcx
063ab8ce mov       %rcx,0x2D0(%rsp)
063ab8d6 mov       %rax,0x2D8(%rsp)
063ab8de lea       0x2D0(%rsp),%r9
063ab8e6 lea       0x2A0(%rsp),%rcx
063ab8ee lea       0x63C`C108,%rdx
063ab8f5 mov       $1,%r8d
063ab8fb movq      $1,0x20(%rsp)
063ab904 call      0x0000`0000`063A`AFD0
063ab909 mov       0x288(%rsp),%rdx
063ab911 lea       0x2A0(%rsp),%rcx
063ab919 lea       0x63C`C158,%r8
063ab920 call      0x0000`0000`063B`4040
063ab925 jmp       0x0000`0000`063A`B7FC
063ab92a mov       0xB6(%rsp),%al
063ab931 test      $1,%al
063ab933 jne       0x0000`0000`063A`B941
063ab935 jmp       0x0000`0000`063A`B937
063ab937 movb      $0,0x2FF(%rsp)
063ab93f jmp       0x0000`0000`063A`B9A0
063ab941 movb      $0,0x40F(%rsp)
063ab949 mov       0x40F(%rsp),%dl
063ab950 mov       0x63D`1E50,%rcx
063ab957 call      0x0000`0000`063A`B120
063ab95c mov       %rax,0x410(%rsp)
063ab964 mov       0x410(%rsp),%rax
063ab96c mov       %rax,0x300(%rsp)
063ab974 lea       0x2F0(%rsp),%rcx
063ab97c lea       0x300(%rsp),%rdx
063ab984 call      0x0000`0000`063A`B160
063ab989 mov       %al,0x8F(%rsp)
063ab990 mov       0x8F(%rsp),%al
063ab997 and       $1,%al
063ab999 mov       %al,0x2FF(%rsp)
063ab9a0 testb     $1,0x2FF(%rsp)
063ab9a8 jne       0x0000`0000`063A`B9D6
063ab9aa movq      $3,0x358(%rsp)
063ab9b6 lea       0x358(%rsp),%rcx
063ab9be lea       0x63C`BF88,%rdx
063ab9c5 call      0x0000`0000`063A`B160
063ab9ca mov       %al,0x8E(%rsp)
063ab9d1 jmp       0x0000`0000`063A`BB1C
063ab9d6 mov       0x198(%rsp),%rax
063ab9de mov       %rax,0x68(%rsp)
063ab9e3 mov       0x1A0(%rsp),%rax
063ab9eb mov       0x1A8(%rsp),%rcx
063ab9f3 mov       0x1B0(%rsp),%rdx
063ab9fb mov       %rdx,0x60(%rsp)
063aba00 test      %rdx,%rdx
063aba03 setne     %dl
063aba06 test      %rax,%rax
063aba09 setne     %r9b
063aba0d and       %dl,%r9b
063aba10 mul       %rcx
063aba13 mov       0x68(%rsp),%rdx
063aba18 mov       %rax,%r8
063aba1b mov       0x60(%rsp),%rax
063aba20 seto      %r10b
063aba24 or        %r10b,%r9b
063aba27 mul       %rdx
063aba2a mov       %rax,%rdx
063aba2d mov       0x68(%rsp),%rax
063aba32 seto      %r10b
063aba36 or        %r10b,%r9b
063aba39 mov       %r9b,0x77(%rsp)
063aba3e add       %rdx,%r8
063aba41 mul       %rcx
063aba44 mov       %rax,%rcx
063aba47 mov       0x77(%rsp),%al
063aba4b add       %r8,%rdx
063aba4e mov       %rdx,0x78(%rsp)
063aba53 setb      %r8b
063aba57 or        %r8b,%al
063aba5a mov       %rcx,0x80(%rsp)
063aba62 test      $1,%al
063aba64 jne       0x0000`0000`063A`BA9C
063aba66 mov       0x78(%rsp),%rax
063aba6b mov       0x80(%rsp),%rcx
063aba73 mov       %rcx,0x348(%rsp)
063aba7b mov       %rax,0x350(%rsp)
063aba83 lea       0x348(%rsp),%rcx
063aba8b call      0x0000`0000`063A`AE40
063aba90 mov       %rax,0x50(%rsp)
063aba95 mov       %rdx,0x58(%rsp)
063aba9a jmp       0x0000`0000`063A`BAB6
063aba9c lea       0x63C`C1C0,%rcx
063abaa3 lea       0x63C`C1A8,%r8
063abaaa mov       $0x21,%edx
063abaaf call      0x0000`0000`063B`8E30
063abab4 ud2
063abab6 mov       0x58(%rsp),%rax
063ababb mov       0x50(%rsp),%rcx
063abac0 mov       %rcx,0x338(%rsp)
063abac8 mov       %rax,0x340(%rsp)
063abad0 lea       0x338(%rsp),%r9
063abad8 lea       0x308(%rsp),%rcx
063abae0 lea       0x63C`C198,%rdx
063abae7 mov       $1,%r8d
063abaed movq      $1,0x20(%rsp)
063abaf6 call      0x0000`0000`063A`AFD0
063abafb mov       0x2F0(%rsp),%rdx
063abb03 lea       0x308(%rsp),%rcx
063abb0b lea       0x63C`C1E8,%r8
063abb12 call      0x0000`0000`063B`4040
063abb17 jmp       0x0000`0000`063A`B9AA
063abb1c mov       0x8E(%rsp),%al
063abb23 test      $1,%al
063abb25 jne       0x0000`0000`063A`BB33
063abb27 jmp       0x0000`0000`063A`BB29
063abb29 movb      $0,0x367(%rsp)
063abb31 jmp       0x0000`0000`063A`BB8C
063abb33 movb      $0,0x3FF(%rsp)
063abb3b mov       0x3FF(%rsp),%dl
063abb42 mov       0x63D`1E50,%rcx
063abb49 call      0x0000`0000`063A`B120
063abb4e mov       %rax,0x400(%rsp)
063abb56 mov       0x400(%rsp),%rax
063abb5e mov       %rax,0x368(%rsp)
063abb66 lea       0x358(%rsp),%rcx
063abb6e lea       0x368(%rsp),%rdx
063abb76 call      0x0000`0000`063A`B160
063abb7b mov       %al,0x4F(%rsp)
063abb7f mov       0x4F(%rsp),%al
063abb83 and       $1,%al
063abb85 mov       %al,0x367(%rsp)
063abb8c testb     $1,0x367(%rsp)
063abb94 jne       0x0000`0000`063A`BBC7
063abb96 lea       0x3C0(%rsp),%rcx
063abb9e lea       0x63C`C280,%rdx
063abba5 mov       $1,%r8d
063abbab lea       0x63C`BF08,%r9
063abbb2 xor       %eax,%eax
063abbb4 movq      $0,0x20(%rsp)
063abbbd call      0x0000`0000`063A`AFD0
063abbc2 jmp       0x0000`0000`063A`BC79
063abbc7 mov       0x198(%rsp),%rcx
063abbcf mov       0x1A0(%rsp),%rdx
063abbd7 mov       0x1A8(%rsp),%r8
063abbdf mov       0x1B0(%rsp),%r9
063abbe7 call      0x0000`0000`063A`B1B0
063abbec mov       %rdx,0x3B8(%rsp)
063abbf4 mov       %rax,0x3B0(%rsp)
063abbfc lea       0x3B0(%rsp),%rcx
063abc04 call      0x0000`0000`063A`AE40
063abc09 mov       %rax,0x38(%rsp)
063abc0e mov       %rdx,0x40(%rsp)
063abc13 mov       0x40(%rsp),%rax
063abc18 mov       0x38(%rsp),%rcx
063abc1d mov       %rcx,0x3A0(%rsp)
063abc25 mov       %rax,0x3A8(%rsp)
063abc2d lea       0x3A0(%rsp),%r9
063abc35 lea       0x370(%rsp),%rcx
063abc3d lea       0x63C`C228,%rdx
063abc44 mov       $1,%r8d
063abc4a movq      $1,0x20(%rsp)
063abc53 call      0x0000`0000`063A`AFD0
063abc58 mov       0x358(%rsp),%rdx
063abc60 lea       0x370(%rsp),%rcx
063abc68 lea       0x63C`C238,%r8
063abc6f call      0x0000`0000`063B`4040
063abc74 jmp       0x0000`0000`063A`BB96
063abc79 lea       0x63C`C290,%rdx
063abc80 lea       0x3C0(%rsp),%rcx
063abc88 call      0x0000`0000`063B`8F40
063abc8d ud2

log::set_max_level:
063abc90 sub       $0x38,%rsp
063abc94 mov       %rcx,%rdx
063abc97 mov       %rdx,0x30(%rsp)
063abc9c movb      $4,0x2F(%rsp)
063abca1 mov       0x2F(%rsp),%r8b
063abca6 mov       0x63D`1E50,%rcx
063abcad call      0x0000`0000`063A`C060
063abcb2 add       $0x38,%rsp
063abcb6 ret

core::iter::range::impl$35::forward_unchecked:
063abcc0 sub       $0x30,%rsp
063abcc4 mov       %rcx,8(%rsp)
063abcc9 mov       %rdx,0x10(%rsp)
063abcce mov       %rcx,0x18(%rsp)
063abcd3 mov       %rdx,0x20(%rsp)
063abcd8 add       %rdx,%rcx
063abcdb mov       %rcx,0x28(%rsp)
063abce0 mov       0x28(%rsp),%rax
063abce5 mov       %rax,(%rsp)
063abce9 mov       (%rsp),%rax
063abced add       $0x30,%rsp
063abcf1 ret

core::intrinsics::is_aligned_and_not_null<u64>:
063abd00 sub       $0x38,%rsp
063abd04 mov       %rcx,0x20(%rsp)
063abd09 mov       %rcx,0x30(%rsp)
063abd0e call      0x0000`0000`063A`D930
063abd13 mov       %al,0x2E(%rsp)
063abd17 mov       0x2E(%rsp),%al
063abd1b xor       $0xFF,%al
063abd1d test      $1,%al
063abd1f jne       0x0000`0000`063A`BD28
063abd21 movb      $0,0x2F(%rsp)
063abd26 jmp       0x0000`0000`063A`BD6A
063abd28 mov       $8,%eax
063abd2d cmp       $0,%rax
063abd31 sete      %al
063abd34 test      $1,%al
063abd36 jne       0x0000`0000`063A`BD50
063abd38 mov       0x20(%rsp),%rax
063abd3d and       $7,%rax
063abd41 cmp       $0,%rax
063abd45 sete      %al
063abd48 and       $1,%al
063abd4a mov       %al,0x2F(%rsp)
063abd4e jmp       0x0000`0000`063A`BD6A
063abd50 lea       0x63C`C340,%rcx
063abd57 lea       0x63C`C328,%r8
063abd5e mov       $0x39,%edx
063abd63 call      0x0000`0000`063B`8E30
063abd68 ud2
063abd6a mov       0x2F(%rsp),%al
063abd6e and       $1,%al
063abd70 movzbl    %al,%eax
063abd73 add       $0x38,%rsp
063abd77 ret

core::cmp::impls::impl$62::lt:
063abd80 sub       $0x10,%rsp
063abd84 mov       %rcx,(%rsp)
063abd88 mov       %rdx,8(%rsp)
063abd8d mov       (%rcx),%rax
063abd90 cmp       (%rdx),%rax
063abd93 setb      %al
063abd96 and       $1,%al
063abd98 movzbl    %al,%eax
063abd9b add       $0x10,%rsp
063abd9f ret

core::fmt::Arguments::new_v1:
063abda0 sub       $0xC8,%rsp
063abda7 mov       %r9,0x30(%rsp)
063abdac mov       %r8,0x38(%rsp)
063abdb1 mov       %rdx,0x40(%rsp)
063abdb6 mov       %rcx,0x48(%rsp)
063abdbb mov       %rcx,0x50(%rsp)
063abdc0 mov       0xF0(%rsp),%rax
063abdc8 mov       %rax,0x58(%rsp)
063abdcd mov       %rdx,0xA8(%rsp)
063abdd5 mov       %r8,0xB0(%rsp)
063abddd mov       %r9,0xB8(%rsp)
063abde5 mov       %rax,0xC0(%rsp)
063abded cmp       %rax,%r8
063abdf0 jb        0x0000`0000`063A`BE09
063abdf2 mov       0x58(%rsp),%rax
063abdf7 add       $1,%rax
063abdfb mov       %rax,0x28(%rsp)
063abe00 setb      %al
063abe03 test      $1,%al
063abe05 jne       0x0000`0000`063A`BE33
063abe07 jmp       0x0000`0000`063A`BE1B
063abe09 movb      $1,0x67(%rsp)
063abe0e testb     $1,0x67(%rsp)
063abe13 jne       0x0000`0000`063A`BEA6
063abe19 jmp       0x0000`0000`063A`BE4D
063abe1b mov       0x38(%rsp),%rax
063abe20 mov       0x28(%rsp),%rcx
063abe25 cmp       %rcx,%rax
063abe28 seta      %al
063abe2b and       $1,%al
063abe2d mov       %al,0x67(%rsp)
063abe31 jmp       0x0000`0000`063A`BE0E
063abe33 lea       0x63C`C410,%rcx
063abe3a lea       0x63C`C3F0,%r8
063abe41 mov       $0x1C,%edx
063abe46 call      0x0000`0000`063B`8E30
063abe4b ud2
063abe4d mov       0x50(%rsp),%rax
063abe52 mov       0x48(%rsp),%rcx
063abe57 mov       0x58(%rsp),%rdx
063abe5c mov       0x30(%rsp),%r8
063abe61 mov       0x38(%rsp),%r9
063abe66 mov       0x40(%rsp),%r10
063abe6b movq      $0,0x98(%rsp)
063abe77 mov       %r10,(%rcx)
063abe7a mov       %r9,8(%rcx)
063abe7e mov       0x98(%rsp),%r10
063abe86 mov       0xA0(%rsp),%r9
063abe8e mov       %r10,0x10(%rcx)
063abe92 mov       %r9,0x18(%rcx)
063abe96 mov       %r8,0x20(%rcx)
063abe9a mov       %rdx,0x28(%rcx)
063abe9e add       $0xC8,%rsp
063abea5 ret
063abea6 lea       0x68(%rsp),%rcx
063abeab lea       0x63C`C438,%rdx
063abeb2 mov       $1,%r8d
063abeb8 lea       0x63C`C448,%r9
063abebf xor       %eax,%eax
063abec1 movq      $0,0x20(%rsp)
063abeca call      0x0000`0000`063A`BDA0
063abecf lea       0x63C`C448,%rdx
063abed6 lea       0x68(%rsp),%rcx
063abedb call      0x0000`0000`063B`8F40
063abee0 ud2

core::mem::replace<u64>:
063abef0 sub       $0x58,%rsp
063abef4 mov       %rdx,0x28(%rsp)
063abef9 mov       %rcx,0x30(%rsp)
063abefe mov       %rcx,0x40(%rsp)
063abf03 mov       %rdx,0x48(%rsp)
063abf08 call      0x0000`0000`063A`BFA0
063abf0d mov       %rax,0x38(%rsp)
063abf12 mov       %rax,0x50(%rsp)
063abf17 mov       0x28(%rsp),%rdx
063abf1c mov       0x30(%rsp),%rcx
063abf21 call      0x0000`0000`063A`D740
063abf26 mov       0x38(%rsp),%rax
063abf2b add       $0x58,%rsp
063abf2f ret

core::ptr::write_volatile<u64>:
063abf30 sub       $0x48,%rsp
063abf34 mov       %rdx,0x20(%rsp)
063abf39 mov       %rcx,0x28(%rsp)
063abf3e mov       %rcx,0x38(%rsp)
063abf43 mov       %rdx,0x40(%rsp)
063abf48 call      0x0000`0000`063A`BD00
063abf4d mov       %al,0x37(%rsp)
063abf51 mov       0x37(%rsp),%al
063abf55 xor       $0xFF,%al
063abf57 test      $1,%al
063abf59 jne       0x0000`0000`063A`BF6A
063abf5b mov       0x28(%rsp),%rax
063abf60 mov       0x20(%rsp),%rcx
063abf65 mov       %rcx,(%rax)
063abf68 jmp       0x0000`0000`063A`BF6E
063abf6a ud2
063abf6c ud2
063abf6e add       $0x48,%rsp
063abf72 ret

core::ptr::drop_in_place<log::SetLoggerError>:
063abf80 push      %rax
063abf81 mov       %rcx,(%rsp)
063abf85 pop       %rax
063abf86 ret

core::ptr::drop_in_place<uefi::logger::Logger>:
063abf90 push      %rax
063abf91 mov       %rcx,(%rsp)
063abf95 pop       %rax
063abf96 ret

core::ptr::read<u64>:
063abfa0 sub       $0x40,%rsp
063abfa4 mov       %rcx,8(%rsp)
063abfa9 mov       %rcx,0x18(%rsp)
063abfae mov       0x30(%rsp),%rax
063abfb3 mov       %rax,0x10(%rsp)
063abfb8 lea       0x10(%rsp),%rax
063abfbd mov       %rax,0x20(%rsp)
063abfc2 mov       8(%rsp),%rax
063abfc7 mov       (%rax),%rax
063abfca mov       %rax,0x10(%rsp)
063abfcf mov       0x10(%rsp),%rax
063abfd4 mov       %rax,(%rsp)
063abfd8 mov       %rax,0x28(%rsp)
063abfdd mov       %rax,0x38(%rsp)
063abfe2 mov       (%rsp),%rax
063abfe6 add       $0x40,%rsp
063abfea ret

core::iter::range::impl$3::next<u64>:
063abff0 sub       $0x38,%rsp
063abff4 mov       %rcx,0x30(%rsp)
063abff9 call      0x0000`0000`063A`C310
063abffe mov       %rax,0x20(%rsp)
063ac003 mov       %rdx,0x28(%rsp)
063ac008 mov       0x28(%rsp),%rdx
063ac00d mov       0x20(%rsp),%rax
063ac012 add       $0x38,%rsp
063ac016 ret

core::sync::atomic::AtomicUsize::load:
063ac020 sub       $0x58,%rsp
063ac024 mov       %dl,0x37(%rsp)
063ac028 mov       %rcx,0x40(%rsp)
063ac02d mov       %dl,0x4F(%rsp)
063ac031 mov       %rcx,0x38(%rsp)
063ac036 mov       %rcx,0x50(%rsp)
063ac03b mov       0x37(%rsp),%dl
063ac03f mov       0x38(%rsp),%rcx
063ac044 call      0x0000`0000`063B`97B0
063ac049 mov       %rax,0x28(%rsp)
063ac04e mov       0x28(%rsp),%rax
063ac053 add       $0x58,%rsp
063ac057 ret

core::sync::atomic::AtomicUsize::store:
063ac060 sub       $0x58,%rsp
063ac064 mov       %r8b,0x27(%rsp)
063ac069 mov       %rdx,0x28(%rsp)
063ac06e mov       %rcx,0x38(%rsp)
063ac073 mov       %rdx,0x40(%rsp)
063ac078 mov       %r8b,0x4F(%rsp)
063ac07d mov       %rcx,0x30(%rsp)
063ac082 mov       %rcx,0x50(%rsp)
063ac087 mov       0x27(%rsp),%r8b
063ac08c mov       0x28(%rsp),%rdx
063ac091 mov       0x30(%rsp),%rcx
063ac096 call      0x0000`0000`063B`3230
063ac09b add       $0x58,%rsp
063ac09f ret

core::clone::impls::impl$9::clone:
063ac0a0 push      %rax
063ac0a1 mov       %rcx,(%rsp)
063ac0a5 mov       (%rcx),%rax
063ac0a8 pop       %rcx
063ac0a9 ret

enum$<core::option::Option<uefi::table::system::SystemTable<uefi::table::system::Boot> >, 1, 18446744073709551615, Some>::as_ref<uefi::table::system::SystemTable<uefi::table::system::Boot> >:
063ac0b0 sub       $0x20,%rsp
063ac0b4 mov       %rcx,(%rsp)
063ac0b8 mov       %rcx,0x10(%rsp)
063ac0bd mov       (%rcx),%rax
063ac0c0 test      %rax,%rax
063ac0c3 setne     %al
063ac0c6 movzbl    %al,%eax
063ac0c9 je        0x0000`0000`063A`C0D1
063ac0cb jmp       0x0000`0000`063A`C0CD
063ac0cd jmp       0x0000`0000`063A`C0DC
063ac0cf ud2
063ac0d1 movq      $0,8(%rsp)
063ac0da jmp       0x0000`0000`063A`C0EA
063ac0dc mov       (%rsp),%rax
063ac0e0 mov       %rax,0x18(%rsp)
063ac0e5 mov       %rax,8(%rsp)
063ac0ea mov       8(%rsp),%rax
063ac0ef add       $0x20,%rsp
063ac0f3 ret

enum$<core::option::Option<uefi::logger::Logger> >::as_ref<uefi::logger::Logger>:
063ac100 sub       $0x20,%rsp
063ac104 mov       %rcx,(%rsp)
063ac108 mov       %rcx,0x10(%rsp)
063ac10d mov       (%rcx),%rax
063ac110 test      %rax,%rax
063ac113 je        0x0000`0000`063A`C11B
063ac115 jmp       0x0000`0000`063A`C117
063ac117 jmp       0x0000`0000`063A`C126
063ac119 ud2
063ac11b movq      $0,8(%rsp)
063ac124 jmp       0x0000`0000`063A`C138
063ac126 mov       (%rsp),%rax
063ac12a add       $8,%rax
063ac12e mov       %rax,0x18(%rsp)
063ac133 mov       %rax,8(%rsp)
063ac138 mov       8(%rsp),%rax
063ac13d add       $0x20,%rsp
063ac141 ret

enum$<core::option::Option<ref$<uefi::logger::Logger> >, 1, 18446744073709551615, Some>::unwrap<ref$<uefi::logger::Logger> >:
063ac150 sub       $0x38,%rsp
063ac154 mov       %rdx,0x20(%rsp)
063ac159 mov       %rcx,0x28(%rsp)
063ac15e mov       0x28(%rsp),%rax
063ac163 test      %rax,%rax
063ac166 setne     %al
063ac169 movzbl    %al,%eax
063ac16c je        0x0000`0000`063A`C174
063ac16e jmp       0x0000`0000`063A`C170
063ac170 jmp       0x0000`0000`063A`C18C
063ac172 ud2
063ac174 mov       0x20(%rsp),%r8
063ac179 lea       0x63C`C460,%rcx
063ac180 mov       $0x2B,%edx
063ac185 call      0x0000`0000`063B`8E30
063ac18a ud2
063ac18c mov       0x28(%rsp),%rax
063ac191 mov       %rax,0x30(%rsp)
063ac196 add       $0x38,%rsp
063ac19a ret

enum$<core::option::Option<uefi::table::system::SystemTable<uefi::table::system::Boot> >, 1, 18446744073709551615, Some>::is_some<uefi::table::system::SystemTable<uefi::table::system::Boot> >:
063ac1a0 sub       $0x10,%rsp
063ac1a4 mov       %rcx,%rdx
063ac1a7 mov       %rdx,8(%rsp)
063ac1ac mov       $1,%eax
063ac1b1 xor       %ecx,%ecx
063ac1b3 cmpq      $0,(%rdx)
063ac1b7 cmove     %rcx,%rax
063ac1bb cmp       $1,%rax
063ac1bf jne       0x0000`0000`063A`C1C8
063ac1c1 movb      $1,7(%rsp)
063ac1c6 jmp       0x0000`0000`063A`C1CD
063ac1c8 movb      $0,7(%rsp)
063ac1cd mov       7(%rsp),%al
063ac1d1 and       $1,%al
063ac1d3 movzbl    %al,%eax
063ac1d6 add       $0x10,%rsp
063ac1da ret

enum$<core::result::Result<uefi::data_types::Event,uefi::result::error::Error<tuple$<> > > >::map<uefi::data_types::Event,uefi::result::error::Error<tuple$<> >,tuple$<>,uefi_services::init::closure_env$0>:
063ac1e0 sub       $0x68,%rsp
063ac1e4 mov       %rcx,0x28(%rsp)
063ac1e9 movb      $0,0x4F(%rsp)
063ac1ee movb      $1,0x4F(%rsp)
063ac1f3 mov       (%rcx),%rax
063ac1f6 test      %rax,%rax
063ac1f9 je        0x0000`0000`063A`C201
063ac1fb jmp       0x0000`0000`063A`C1FD
063ac1fd jmp       0x0000`0000`063A`C225
063ac1ff ud2
063ac201 mov       0x28(%rsp),%rax
063ac206 mov       8(%rax),%rax
063ac20a mov       %rax,0x60(%rsp)
063ac20f movb      $0,0x4F(%rsp)
063ac214 mov       %rax,0x40(%rsp)
063ac219 mov       0x40(%rsp),%rcx
063ac21e call      0x0000`0000`063A`C4C0
063ac223 jmp       0x0000`0000`063A`C24A
063ac225 mov       0x28(%rsp),%rax
063ac22a mov       8(%rax),%rax
063ac22e mov       %rax,0x58(%rsp)
063ac233 mov       %rax,0x38(%rsp)
063ac238 movq      $1,0x30(%rsp)
063ac241 testb     $1,0x4F(%rsp)
063ac246 jne       0x0000`0000`063A`C264
063ac248 jmp       0x0000`0000`063A`C255
063ac24a movq      $0,0x30(%rsp)
063ac253 jmp       0x0000`0000`063A`C241
063ac255 mov       0x30(%rsp),%rax
063ac25a mov       0x38(%rsp),%rdx
063ac25f add       $0x68,%rsp
063ac263 ret
063ac264 jmp       0x0000`0000`063A`C255

core::result::Result::unwrap<tuple$<>,log::SetLoggerError>:
063ac270 sub       $0x48,%rsp
063ac274 mov       %rdx,0x28(%rsp)
063ac279 and       $1,%cl
063ac27c mov       %cl,0x37(%rsp)
063ac280 movzbl    0x37(%rsp),%eax
063ac285 test      $1,%al
063ac287 je        0x0000`0000`063A`C28F
063ac289 jmp       0x0000`0000`063A`C28B
063ac28b jmp       0x0000`0000`063A`C294
063ac28d ud2
063ac28f add       $0x48,%rsp
063ac293 ret
063ac294 mov       0x28(%rsp),%rcx
063ac299 mov       %rsp,%rax
063ac29c mov       %rcx,0x20(%rax)
063ac2a0 lea       0x63C`C48B,%rcx
063ac2a7 lea       0x63C`C4B8,%r9
063ac2ae mov       $0x2B,%edx
063ac2b3 lea       0x38(%rsp),%r8
063ac2b8 call      0x0000`0000`063B`9550
063ac2bd ud2

core::iter::traits::collect::impl$0::into_iter<core::ops::range::Range<u64> >:
063ac2c0 sub       $0x10,%rsp
063ac2c4 mov       %rcx,%rax
063ac2c7 mov       %rax,(%rsp)
063ac2cb mov       %rdx,8(%rsp)
063ac2d0 add       $0x10,%rsp
063ac2d4 ret

log::impl$4::le:
063ac2e0 sub       $0x10,%rsp
063ac2e4 mov       %rcx,(%rsp)
063ac2e8 mov       %rdx,8(%rsp)
063ac2ed mov       (%rcx),%rax
063ac2f0 mov       (%rdx),%rcx
063ac2f3 cmp       %rcx,%rax
063ac2f6 setbe     %al
063ac2f9 and       $1,%al
063ac2fb movzbl    %al,%eax
063ac2fe add       $0x10,%rsp
063ac302 ret

core::iter::range::impl$2::spec_next<u64>:
063ac310 sub       $0x68,%rsp
063ac314 mov       %rcx,%rdx
063ac317 mov       %rdx,0x38(%rsp)
063ac31c mov       %rdx,0x58(%rsp)
063ac321 mov       %rdx,%rcx
063ac324 add       $8,%rdx
063ac328 call      0x0000`0000`063A`BD80
063ac32d mov       %al,0x47(%rsp)
063ac331 mov       0x47(%rsp),%al
063ac335 test      $1,%al
063ac337 jne       0x0000`0000`063A`C346
063ac339 jmp       0x0000`0000`063A`C33B
063ac33b movq      $0,0x48(%rsp)
063ac344 jmp       0x0000`0000`063A`C395
063ac346 mov       0x38(%rsp),%rcx
063ac34b call      0x0000`0000`063A`C0A0
063ac350 mov       %rax,0x30(%rsp)
063ac355 mov       0x30(%rsp),%rcx
063ac35a mov       $1,%edx
063ac35f call      0x0000`0000`063A`BCC0
063ac364 mov       %rax,0x28(%rsp)
063ac369 mov       %rax,0x60(%rsp)
063ac36e mov       0x28(%rsp),%rdx
063ac373 mov       0x38(%rsp),%rcx
063ac378 call      0x0000`0000`063A`BEF0
063ac37d mov       %rax,0x20(%rsp)
063ac382 mov       0x20(%rsp),%rax
063ac387 mov       %rax,0x50(%rsp)
063ac38c movq      $1,0x48(%rsp)
063ac395 mov       0x48(%rsp),%rax
063ac39a mov       0x50(%rsp),%rdx
063ac39f add       $0x68,%rsp
063ac3a3 ret

uefi_services::init:
063ac3b0 sub       $0x98,%rsp
063ac3b7 mov       %rcx,0x40(%rsp)
063ac3bc mov       %rcx,0x88(%rsp)
063ac3c4 lea       0x63D`1E58,%rcx
063ac3cb call      0x0000`0000`063A`C1A0
063ac3d0 mov       %al,0x4F(%rsp)
063ac3d4 mov       0x4F(%rsp),%al
063ac3d8 test      $1,%al
063ac3da jne       0x0000`0000`063A`C3EF
063ac3dc jmp       0x0000`0000`063A`C3DE
063ac3de mov       0x40(%rsp),%rcx
063ac3e3 call      0x0000`0000`063B`0B80
063ac3e8 mov       %rax,0x38(%rsp)
063ac3ed jmp       0x0000`0000`063A`C414
063ac3ef xor       %eax,%eax
063ac3f1 mov       %eax,%ecx
063ac3f3 call      0x0000`0000`063A`FB30
063ac3f8 mov       %rdx,0x58(%rsp)
063ac3fd mov       %rax,0x50(%rsp)
063ac402 mov       0x50(%rsp),%rax
063ac407 mov       0x58(%rsp),%rdx
063ac40c add       $0x98,%rsp
063ac413 ret
063ac414 mov       0x40(%rsp),%rcx
063ac419 mov       0x38(%rsp),%rax
063ac41e mov       %rax,0x60(%rsp)
063ac423 mov       0x60(%rsp),%rax
063ac428 mov       %rax,0x63D`1E58
063ac42f call      0x0000`0000`063A`C4D0
063ac434 mov       0x40(%rsp),%rcx
063ac439 call      0x0000`0000`063B`0B70
063ac43e mov       %rax,0x30(%rsp)
063ac443 mov       %rax,0x90(%rsp)
063ac44b mov       0x30(%rsp),%rcx
063ac450 call      0x0000`0000`063B`1450
063ac455 mov       0x30(%rsp),%rdx
063ac45a lea       0x63A`C590,%rax
063ac461 mov       %rax,0x78(%rsp)
063ac466 movq      $0,0x80(%rsp)
063ac472 mov       0x78(%rsp),%r10
063ac477 mov       0x80(%rsp),%rax
063ac47f lea       0x68(%rsp),%rcx
063ac484 mov       $0x201,%r8d
063ac48a mov       $0x10,%r9d
063ac490 mov       %r10,0x20(%rsp)
063ac495 mov       %rax,0x28(%rsp)
063ac49a call      0x0000`0000`063B`0BA0
063ac49f lea       0x68(%rsp),%rcx
063ac4a4 call      0x0000`0000`063A`C1E0
063ac4a9 mov       %rdx,0x58(%rsp)
063ac4ae mov       %rax,0x50(%rsp)
063ac4b3 jmp       0x0000`0000`063A`C402

uefi_services::init::closure$0:
063ac4c0 sub       $0x10,%rsp
063ac4c4 mov       %rcx,8(%rsp)
063ac4c9 add       $0x10,%rsp
063ac4cd ret

uefi_services::init_logger:
063ac4d0 sub       $0x78,%rsp
063ac4d4 mov       %rcx,0x60(%rsp)
063ac4d9 call      0x0000`0000`063B`0B30
063ac4de mov       %rax,0x40(%rsp)
063ac4e3 mov       %rax,0x68(%rsp)
063ac4e8 mov       0x40(%rsp),%rcx
063ac4ed call      0x0000`0000`063B`14A0
063ac4f2 mov       %rax,0x38(%rsp)
063ac4f7 mov       0x38(%rsp),%rax
063ac4fc mov       %rax,0x50(%rsp)
063ac501 movq      $1,0x48(%rsp)
063ac50a mov       0x48(%rsp),%rcx
063ac50f mov       0x50(%rsp),%rax
063ac514 mov       %rcx,0x63D`1E60
063ac51b mov       %rax,0x63D`1E68
063ac522 lea       0x63D`1E60,%rcx
063ac529 call      0x0000`0000`063A`C100
063ac52e mov       %rax,0x30(%rsp)
063ac533 mov       0x30(%rsp),%rcx
063ac538 lea       0x63C`C540,%rdx
063ac53f call      0x0000`0000`063A`C150
063ac544 mov       %rax,0x28(%rsp)
063ac549 mov       %rax,0x70(%rsp)
063ac54e mov       0x28(%rsp),%rcx
063ac553 lea       0x63C`C570,%rdx
063ac55a call      0x0000`0000`063B`3E10
063ac55f mov       %al,0x27(%rsp)
063ac563 mov       0x27(%rsp),%cl
063ac567 and       $1,%cl
063ac56a lea       0x63C`C5A8,%rdx
063ac571 call      0x0000`0000`063A`C270
063ac576 movq      $3,0x58(%rsp)
063ac57f mov       0x58(%rsp),%rcx
063ac584 call      0x0000`0000`063A`BC90
063ac589 add       $0x78,%rsp
063ac58d ret

uefi_services::exit_boot_services:
063ac590 sub       $0x48,%rsp
063ac594 mov       %rcx,0x30(%rsp)
063ac599 mov       %rdx,0x38(%rsp)
063ac59e movq      $0,0x28(%rsp)
063ac5a7 mov       0x28(%rsp),%rax
063ac5ac mov       %rax,0x63D`1E58
063ac5b3 cmpq      $1,0x63D`1E60
063ac5bb jne       0x0000`0000`063A`C5DD
063ac5bd lea       0x63D`1E60,%rax
063ac5c4 add       $8,%rax
063ac5c8 mov       %rax,0x40(%rsp)
063ac5cd lea       0x63D`1E60,%rcx
063ac5d4 add       $8,%rcx
063ac5d8 call      0x0000`0000`063B`14D0
063ac5dd call      0x0000`0000`063B`1480
063ac5e2 add       $0x48,%rsp
063ac5e6 ret

uefi_services::panic_handler:
063ac5f0 sub       $0x2B8,%rsp
063ac5f7 mov       %rcx,0xB0(%rsp)
063ac5ff mov       %rcx,0x260(%rsp)
063ac607 call      0x0000`0000`063B`8E10
063ac60c mov       %rax,0xB8(%rsp)
063ac614 mov       $1,%eax
063ac619 xor       %ecx,%ecx
063ac61b cmpq      $0,0xB8(%rsp)
063ac624 cmove     %rcx,%rax
063ac628 cmp       $1,%rax
063ac62c jne       0x0000`0000`063A`C66F
063ac62e mov       0xB8(%rsp),%rax
063ac636 mov       %rax,0xA0(%rsp)
063ac63e mov       %rax,0x268(%rsp)
063ac646 movq      $1,0xC0(%rsp)
063ac652 lea       0xC0(%rsp),%rcx
063ac65a lea       0x63C`C5C0,%rdx
063ac661 call      0x0000`0000`063A`C2E0
063ac666 mov       %al,0xAF(%rsp)
063ac66d jmp       0x0000`0000`063A`C688
063ac66f lea       0x63D`1E58,%rcx
063ac676 call      0x0000`0000`063A`C0B0
063ac67b mov       %rax,0x1B8(%rsp)
063ac683 jmp       0x0000`0000`063A`C9A2
063ac688 mov       0xAF(%rsp),%al
063ac68f test      $1,%al
063ac691 jne       0x0000`0000`063A`C69F
063ac693 jmp       0x0000`0000`063A`C695
063ac695 movb      $0,0xCF(%rsp)
063ac69d jmp       0x0000`0000`063A`C6FE
063ac69f movb      $0,0x2AF(%rsp)
063ac6a7 mov       0x2AF(%rsp),%dl
063ac6ae mov       0x63D`1E50,%rcx
063ac6b5 call      0x0000`0000`063A`C020
063ac6ba mov       %rax,0x2B0(%rsp)
063ac6c2 mov       0x2B0(%rsp),%rax
063ac6ca mov       %rax,0xD0(%rsp)
063ac6d2 lea       0xC0(%rsp),%rcx
063ac6da lea       0xD0(%rsp),%rdx
063ac6e2 call      0x0000`0000`063A`C2E0
063ac6e7 mov       %al,0x9F(%rsp)
063ac6ee mov       0x9F(%rsp),%al
063ac6f5 and       $1,%al
063ac6f7 mov       %al,0xCF(%rsp)
063ac6fe testb     $1,0xCF(%rsp)
063ac706 jne       0x0000`0000`063A`C722
063ac708 mov       0xB0(%rsp),%rcx
063ac710 call      0x0000`0000`063B`8E00
063ac715 mov       %rax,0x150(%rsp)
063ac71d jmp       0x0000`0000`063A`C858
063ac722 mov       0xA0(%rsp),%rcx
063ac72a call      0x0000`0000`063B`8D80
063ac72f mov       %rdx,0x140(%rsp)
063ac737 mov       %rax,0x138(%rsp)
063ac73f lea       0x138(%rsp),%rcx
063ac747 call      0x0000`0000`063C`88C0
063ac74c mov       %rax,0x88(%rsp)
063ac754 mov       %rdx,0x90(%rsp)
063ac75c mov       0xA0(%rsp),%rcx
063ac764 call      0x0000`0000`063B`8D90
063ac769 mov       %eax,0x148(%rsp)
063ac770 lea       0x148(%rsp),%rcx
063ac778 call      0x0000`0000`063C`8860
063ac77d mov       %rax,0x78(%rsp)
063ac782 mov       %rdx,0x80(%rsp)
063ac78a mov       0xA0(%rsp),%rcx
063ac792 call      0x0000`0000`063B`8DA0
063ac797 mov       %eax,0x14C(%rsp)
063ac79e lea       0x14C(%rsp),%rcx
063ac7a6 call      0x0000`0000`063C`8860
063ac7ab mov       %rax,0x68(%rsp)
063ac7b0 mov       %rdx,0x70(%rsp)
063ac7b5 mov       0x70(%rsp),%rax
063ac7ba mov       0x68(%rsp),%rcx
063ac7bf mov       0x80(%rsp),%rdx
063ac7c7 mov       0x78(%rsp),%r8
063ac7cc mov       0x90(%rsp),%r9
063ac7d4 mov       0x88(%rsp),%r10
063ac7dc mov       %r10,0x108(%rsp)
063ac7e4 mov       %r9,0x110(%rsp)
063ac7ec mov       %r8,0x118(%rsp)
063ac7f4 mov       %rdx,0x120(%rsp)
063ac7fc mov       %rcx,0x128(%rsp)
063ac804 mov       %rax,0x130(%rsp)
063ac80c lea       0x108(%rsp),%r9
063ac814 lea       0xD8(%rsp),%rcx
063ac81c lea       0x63C`C5E0,%rdx
063ac823 mov       $4,%r8d
063ac829 movq      $3,0x20(%rsp)
063ac832 call      0x0000`0000`063A`BDA0
063ac837 mov       0xC0(%rsp),%rdx
063ac83f lea       0xD8(%rsp),%rcx
063ac847 lea       0x63C`C630,%r8
063ac84e call      0x0000`0000`063B`4040
063ac853 jmp       0x0000`0000`063A`C708
063ac858 mov       $1,%eax
063ac85d xor       %ecx,%ecx
063ac85f cmpq      $0,0x150(%rsp)
063ac868 cmove     %rcx,%rax
063ac86c cmp       $1,%rax
063ac870 jne       0x0000`0000`063A`C66F
063ac876 mov       0x150(%rsp),%rax
063ac87e mov       %rax,0x158(%rsp)
063ac886 movq      $1,0x160(%rsp)
063ac892 lea       0x160(%rsp),%rcx
063ac89a lea       0x63C`C5C0,%rdx
063ac8a1 call      0x0000`0000`063A`C2E0
063ac8a6 mov       %al,0x67(%rsp)
063ac8aa mov       0x67(%rsp),%al
063ac8ae test      $1,%al
063ac8b0 jne       0x0000`0000`063A`C8BE
063ac8b2 jmp       0x0000`0000`063A`C8B4
063ac8b4 movb      $0,0x16F(%rsp)
063ac8bc jmp       0x0000`0000`063A`C917
063ac8be movb      $0,0x29F(%rsp)
063ac8c6 mov       0x29F(%rsp),%dl
063ac8cd mov       0x63D`1E50,%rcx
063ac8d4 call      0x0000`0000`063A`C020
063ac8d9 mov       %rax,0x2A0(%rsp)
063ac8e1 mov       0x2A0(%rsp),%rax
063ac8e9 mov       %rax,0x170(%rsp)
063ac8f1 lea       0x160(%rsp),%rcx
063ac8f9 lea       0x170(%rsp),%rdx
063ac901 call      0x0000`0000`063A`C2E0
063ac906 mov       %al,0x66(%rsp)
063ac90a mov       0x66(%rsp),%al
063ac90e and       $1,%al
063ac910 mov       %al,0x16F(%rsp)
063ac917 testb     $1,0x16F(%rsp)
063ac91f je        0x0000`0000`063A`C66F
063ac925 lea       0x158(%rsp),%rcx
063ac92d call      0x0000`0000`063C`8830
063ac932 mov       %rax,0x50(%rsp)
063ac937 mov       %rdx,0x58(%rsp)
063ac93c mov       0x58(%rsp),%rax
063ac941 mov       0x50(%rsp),%rcx
063ac946 mov       %rcx,0x1A8(%rsp)
063ac94e mov       %rax,0x1B0(%rsp)
063ac956 lea       0x1A8(%rsp),%r9
063ac95e lea       0x178(%rsp),%rcx
063ac966 lea       0x63C`C668,%rdx
063ac96d mov       $1,%r8d
063ac973 movq      $1,0x20(%rsp)
063ac97c call      0x0000`0000`063A`BDA0
063ac981 mov       0x160(%rsp),%rdx
063ac989 lea       0x178(%rsp),%rcx
063ac991 lea       0x63C`C678,%r8
063ac998 call      0x0000`0000`063B`4040
063ac99d jmp       0x0000`0000`063A`C66F
063ac9a2 mov       $1,%eax
063ac9a7 xor       %ecx,%ecx
063ac9a9 cmpq      $0,0x1B8(%rsp)
063ac9b2 cmove     %rcx,%rax
063ac9b6 cmp       $1,%rax
063ac9ba jne       0x0000`0000`063A`C9DB
063ac9bc mov       0x1B8(%rsp),%rcx
063ac9c4 mov       %rcx,0x278(%rsp)
063ac9cc call      0x0000`0000`063B`0B70
063ac9d1 mov       %rax,0x48(%rsp)
063ac9d6 jmp       0x0000`0000`063A`CA9D
063ac9db movq      $0,0x1C0(%rsp)
063ac9e7 movq      $0,0x1C8(%rsp)
063ac9f3 movq      $0x11E1`A300,0x1D0(%rsp)
063ac9ff mov       0x1C8(%rsp),%rcx
063aca07 mov       0x1D0(%rsp),%rdx
063aca0f call      0x0000`0000`063A`C2C0
063aca14 mov       %rax,0x38(%rsp)
063aca19 mov       %rdx,0x40(%rsp)
063aca1e mov       0x40(%rsp),%rax
063aca23 mov       0x38(%rsp),%rcx
063aca28 mov       %rcx,0x1D8(%rsp)
063aca30 mov       %rax,0x1E0(%rsp)
063aca38 lea       0x1D8(%rsp),%rcx
063aca40 call      0x0000`0000`063A`BFF0
063aca45 mov       %rdx,0x1F0(%rsp)
063aca4d mov       %rax,0x1E8(%rsp)
063aca55 mov       0x1E8(%rsp),%rax
063aca5d test      %rax,%rax
063aca60 je        0x0000`0000`063A`CA68
063aca62 jmp       0x0000`0000`063A`CA64
063aca64 jmp       0x0000`0000`063A`CA7E
063aca66 ud2
063aca68 lea       0x63D`1E58,%rcx
063aca6f call      0x0000`0000`063A`C0B0
063aca74 mov       %rax,0x1F8(%rsp)
063aca7c jmp       0x0000`0000`063A`CAAE
063aca7e mov       0x1F0(%rsp),%rdx
063aca86 mov       %rdx,0x270(%rsp)
063aca8e lea       0x1C0(%rsp),%rcx
063aca96 call      0x0000`0000`063A`BF30
063aca9b jmp       0x0000`0000`063A`CA38
063aca9d mov       0x48(%rsp),%rcx
063acaa2 mov       $0x98`9680,%edx
063acaa7 call      0x0000`0000`063B`0C90
063acaac jmp       0x0000`0000`063A`CA68
063acaae mov       $1,%eax
063acab3 xor       %ecx,%ecx
063acab5 cmpq      $0,0x1F8(%rsp)
063acabe cmove     %rcx,%rax
063acac2 cmp       $1,%rax
063acac6 jne       0x0000`0000`063A`CAE7
063acac8 mov       0x1F8(%rsp),%rcx
063acad0 mov       %rcx,0x280(%rsp)
063acad8 call      0x0000`0000`063B`0B60
063acadd mov       %rax,0x30(%rsp)
063acae2 jmp       0x0000`0000`063A`CBCF
063acae7 movq      $1,0x218(%rsp)
063acaf3 lea       0x218(%rsp),%rcx
063acafb lea       0x63C`C5C0,%rdx
063acb02 call      0x0000`0000`063A`C2E0
063acb07 mov       %al,0x2F(%rsp)
063acb0b mov       0x2F(%rsp),%al
063acb0f test      $1,%al
063acb11 jne       0x0000`0000`063A`CB1F
063acb13 jmp       0x0000`0000`063A`CB15
063acb15 movb      $0,0x227(%rsp)
063acb1d jmp       0x0000`0000`063A`CB78
063acb1f movb      $0,0x28F(%rsp)
063acb27 mov       0x28F(%rsp),%dl
063acb2e mov       0x63D`1E50,%rcx
063acb35 call      0x0000`0000`063A`C020
063acb3a mov       %rax,0x290(%rsp)
063acb42 mov       0x290(%rsp),%rax
063acb4a mov       %rax,0x228(%rsp)
063acb52 lea       0x218(%rsp),%rcx
063acb5a lea       0x228(%rsp),%rdx
063acb62 call      0x0000`0000`063A`C2E0
063acb67 mov       %al,0x2E(%rsp)
063acb6b mov       0x2E(%rsp),%al
063acb6f and       $1,%al
063acb71 mov       %al,0x227(%rsp)
063acb78 testb     $1,0x227(%rsp)
063acb80 jne       0x0000`0000`063A`CB85
063acb82 hlt
063acb83 jmp       0x0000`0000`063A`CB82
063acb85 lea       0x230(%rsp),%rcx
063acb8d lea       0x63C`C6F0,%rdx
063acb94 mov       $1,%r8d
063acb9a lea       0x63C`C448,%r9
063acba1 xor       %eax,%eax
063acba3 movq      $0,0x20(%rsp)
063acbac call      0x0000`0000`063A`BDA0
063acbb1 mov       0x218(%rsp),%rdx
063acbb9 lea       0x230(%rsp),%rcx
063acbc1 lea       0x63C`C700,%r8
063acbc8 call      0x0000`0000`063B`4040
063acbcd jmp       0x0000`0000`063A`CB82
063acbcf mov       0x30(%rsp),%rcx
063acbd4 movl      $2,0x204(%rsp)
063acbdf movq      $0,0x208(%rsp)
063acbeb mov       0x204(%rsp),%edx
063acbf2 mov       0x208(%rsp),%r9
063acbfa mov       0x210(%rsp),%r8
063acc02 mov       %rsp,%rax
063acc05 mov       %r8,0x20(%rax)
063acc09 movabs    $0x8000`0000`0000`0015,%r8
063acc13 call      0x0000`0000`063B`0D50
063acc18 ud2

core::str::iter::impl$70::next<char>:
063acc20 sub       $0x38,%rsp
063acc24 mov       %rcx,0x30(%rsp)
063acc29 call      0x0000`0000`063A`DFC0
063acc2e mov       %rax,0x20(%rsp)
063acc33 mov       %rdx,0x28(%rsp)
063acc38 mov       0x28(%rsp),%rdx
063acc3d mov       0x20(%rsp),%rax
063acc42 add       $0x38,%rsp
063acc46 ret

core::iter::adapters::map::impl$2::next<str,core::str::iter::SplitTerminator<char>,core::str::LinesAnyMap>:
063acc50 sub       $0x58,%rsp
063acc54 mov       %rcx,0x38(%rsp)
063acc59 mov       %rcx,0x50(%rsp)
063acc5e call      0x0000`0000`063A`CC20
063acc63 mov       %rax,0x40(%rsp)
063acc68 mov       %rdx,0x48(%rsp)
063acc6d mov       0x48(%rsp),%rdx
063acc72 mov       0x40(%rsp),%rcx
063acc77 mov       0x38(%rsp),%r8
063acc7c call      0x0000`0000`063A`ECF0
063acc81 mov       %rax,0x28(%rsp)
063acc86 mov       %rdx,0x30(%rsp)
063acc8b mov       0x30(%rsp),%rdx
063acc90 mov       0x28(%rsp),%rax
063acc95 add       $0x58,%rsp
063acc99 ret

core::slice::index::impl$3::get_unchecked<u16>:
063acca0 sub       $0xB8,%rsp
063acca7 mov       %r9,0x48(%rsp)
063accac mov       %r8,0x58(%rsp)
063accb1 mov       %rdx,%rax
063accb4 mov       0x48(%rsp),%rdx
063accb9 mov       %rax,0x50(%rsp)
063accbe mov       %rcx,%r8
063accc1 mov       0x58(%rsp),%rcx
063accc6 mov       %r8,0x60(%rsp)
063acccb mov       %r8,0x70(%rsp)
063accd0 mov       %rax,0x78(%rsp)
063accd5 mov       %rcx,0x80(%rsp)
063accdd mov       %rdx,0x88(%rsp)
063acce5 call      0x0000`0000`063A`D960
063accea mov       %rax,0x68(%rsp)
063accef mov       0x68(%rsp),%rax
063accf4 mov       0x60(%rsp),%rcx
063accf9 mov       %rax,0x90(%rsp)
063acd01 mov       %rcx,0x98(%rsp)
063acd09 mov       %rax,0xA0(%rsp)
063acd11 mov       %rcx,0xA8(%rsp)
063acd19 shl       $1,%rcx
063acd1d add       %rcx,%rax
063acd20 mov       %rax,0xB0(%rsp)
063acd28 mov       0xB0(%rsp),%rax
063acd30 mov       %rax,0x40(%rsp)
063acd35 mov       0x60(%rsp),%rcx
063acd3a mov       0x50(%rsp),%rax
063acd3f sub       %rcx,%rax
063acd42 mov       %rax,0x38(%rsp)
063acd47 setb      %al
063acd4a test      $1,%al
063acd4c jne       0x0000`0000`063A`CD69
063acd4e mov       0x38(%rsp),%rdx
063acd53 mov       0x40(%rsp),%rcx
063acd58 call      0x0000`0000`063A`D6B0
063acd5d mov       %rax,0x28(%rsp)
063acd62 mov       %rdx,0x30(%rsp)
063acd67 jmp       0x0000`0000`063A`CD83
063acd69 lea       0x63C`C7D0,%rcx
063acd70 lea       0x63C`C7B8,%r8
063acd77 mov       $0x21,%edx
063acd7c call      0x0000`0000`063B`8E30
063acd81 ud2
063acd83 mov       0x30(%rsp),%rdx
063acd88 mov       0x28(%rsp),%rax
063acd8d add       $0xB8,%rsp
063acd94 ret

core::slice::index::impl$3::index<u16>:
063acda0 sub       $0x78,%rsp
063acda4 mov       %r9,0x30(%rsp)
063acda9 mov       %r8,0x38(%rsp)
063acdae mov       %rdx,0x40(%rsp)
063acdb3 mov       %rcx,0x48(%rsp)
063acdb8 mov       0xA0(%rsp),%rax
063acdc0 mov       %rax,0x50(%rsp)
063acdc5 mov       %rcx,0x58(%rsp)
063acdca mov       %rdx,0x60(%rsp)
063acdcf mov       %r8,0x68(%rsp)
063acdd4 mov       %r9,0x70(%rsp)
063acdd9 cmp       %rdx,%rcx
063acddc ja        0x0000`0000`063A`CDEF
063acdde mov       0x40(%rsp),%rax
063acde3 mov       0x30(%rsp),%rcx
063acde8 cmp       %rcx,%rax
063acdeb ja        0x0000`0000`063A`CE2A
063acded jmp       0x0000`0000`063A`CE05
063acdef mov       0x50(%rsp),%r8
063acdf4 mov       0x40(%rsp),%rdx
063acdf9 mov       0x48(%rsp),%rcx
063acdfe call      0x0000`0000`063C`0AE0
063ace03 ud2
063ace05 mov       0x30(%rsp),%r9
063ace0a mov       0x38(%rsp),%r8
063ace0f mov       0x40(%rsp),%rdx
063ace14 mov       0x48(%rsp),%rcx
063ace19 call      0x0000`0000`063A`CCA0
063ace1e mov       %rax,0x20(%rsp)
063ace23 mov       %rdx,0x28(%rsp)
063ace28 jmp       0x0000`0000`063A`CE40
063ace2a mov       0x50(%rsp),%r8
063ace2f mov       0x30(%rsp),%rdx
063ace34 mov       0x40(%rsp),%rcx
063ace39 call      0x0000`0000`063C`0A30
063ace3e ud2
063ace40 mov       0x28(%rsp),%rdx
063ace45 mov       0x20(%rsp),%rax
063ace4a add       $0x78,%rsp
063ace4e ret

core::iter::adapters::enumerate::impl$1::next<core::slice::iter::Iter<u16> >:
063ace50 sub       $0x98,%rsp
063ace57 mov       %rcx,0x38(%rsp)
063ace5c mov       %rcx,0x70(%rsp)
063ace61 call      0x0000`0000`063C`B0D0
063ace66 mov       %rax,0x40(%rsp)
063ace6b mov       0x40(%rsp),%rcx
063ace70 call      0x0000`0000`063A`FD20
063ace75 mov       %rax,0x58(%rsp)
063ace7a mov       0x58(%rsp),%rax
063ace7f test      %rax,%rax
063ace82 sete      %al
063ace85 movzbl    %al,%eax
063ace88 jne       0x0000`0000`063A`CE90
063ace8a jmp       0x0000`0000`063A`CE8C
063ace8c jmp       0x0000`0000`063A`CED6
063ace8e ud2
063ace90 mov       0x38(%rsp),%rax
063ace95 mov       0x58(%rsp),%rcx
063ace9a mov       %rcx,0x20(%rsp)
063ace9f mov       %rcx,0x80(%rsp)
063acea7 mov       %rcx,0x88(%rsp)
063aceaf mov       0x10(%rax),%rcx
063aceb3 mov       %rcx,0x28(%rsp)
063aceb8 mov       %rcx,0x90(%rsp)
063acec0 mov       0x10(%rax),%rax
063acec4 add       $1,%rax
063acec8 mov       %rax,0x30(%rsp)
063acecd setb      %al
063aced0 test      $1,%al
063aced2 jne       0x0000`0000`063A`CF2F
063aced4 jmp       0x0000`0000`063A`CEF7
063aced6 call      0x0000`0000`063B`02B0
063acedb mov       %rdx,0x50(%rsp)
063acee0 mov       %rax,0x48(%rsp)
063acee5 mov       0x48(%rsp),%rax
063aceea mov       0x50(%rsp),%rdx
063aceef add       $0x98,%rsp
063acef6 ret
063acef7 mov       0x20(%rsp),%rax
063acefc mov       0x28(%rsp),%rcx
063acf01 mov       0x38(%rsp),%rdx
063acf06 mov       0x30(%rsp),%r8
063acf0b mov       %r8,0x10(%rdx)
063acf0f mov       %rcx,0x60(%rsp)
063acf14 mov       %rax,0x68(%rsp)
063acf19 mov       0x60(%rsp),%rcx
063acf1e mov       0x68(%rsp),%rax
063acf23 mov       %rcx,0x48(%rsp)
063acf28 mov       %rax,0x50(%rsp)
063acf2d jmp       0x0000`0000`063A`CEE5
063acf2f lea       0x63C`C890,%rcx
063acf36 lea       0x63C`C878,%r8
063acf3d mov       $0x1C,%edx
063acf42 call      0x0000`0000`063B`8E30
063acf47 ud2

core::slice::index::impl$7::index<u16>:
063acf50 sub       $0x98,%rsp
063acf57 mov       %r9,0x48(%rsp)
063acf5c mov       %r8,0x50(%rsp)
063acf61 mov       %rdx,0x58(%rsp)
063acf66 mov       %rcx,0x60(%rsp)
063acf6b mov       %rdx,0x88(%rsp)
063acf73 mov       %r8,0x90(%rsp)
063acf7b call      0x0000`0000`063B`6960
063acf80 mov       %rax,0x68(%rsp)
063acf85 mov       0x68(%rsp),%rax
063acf8a cmpq      $0xFFFF`FFFF`FFFF`FFFF,(%rax)
063acf8e je        0x0000`0000`063A`CFC8
063acf90 mov       0x60(%rsp),%rax
063acf95 mov       (%rax),%rcx
063acf98 mov       %rcx,0x70(%rsp)
063acf9d mov       8(%rax),%rcx
063acfa1 mov       %rcx,0x78(%rsp)
063acfa6 mov       0x10(%rax),%rax
063acfaa mov       %rax,0x80(%rsp)
063acfb2 lea       0x70(%rsp),%rcx
063acfb7 call      0x0000`0000`063A`D5D0
063acfbc mov       %rax,0x38(%rsp)
063acfc1 mov       %rdx,0x40(%rsp)
063acfc6 jmp       0x0000`0000`063A`CFD4
063acfc8 mov       0x48(%rsp),%rcx
063acfcd call      0x0000`0000`063C`0B90
063acfd2 ud2
063acfd4 mov       0x48(%rsp),%rax
063acfd9 mov       0x50(%rsp),%r9
063acfde mov       0x58(%rsp),%r8
063acfe3 mov       0x40(%rsp),%rdx
063acfe8 mov       0x38(%rsp),%rcx
063acfed mov       %rax,0x20(%rsp)
063acff2 call      0x0000`0000`063A`CDA0
063acff7 mov       %rax,0x28(%rsp)
063acffc mov       %rdx,0x30(%rsp)
063ad001 mov       0x30(%rsp),%rdx
063ad006 mov       0x28(%rsp),%rax
063ad00b add       $0x98,%rsp
063ad012 ret

core::slice::index::impl$8::index<u16>:
063ad020 sub       $0x78,%rsp
063ad024 mov       %r9,0x30(%rsp)
063ad029 mov       %r8,%rax
063ad02c mov       %rax,0x38(%rsp)
063ad031 mov       %rdx,0x40(%rsp)
063ad036 mov       %rcx,%r8
063ad039 mov       %r8,0x60(%rsp)
063ad03e mov       %rdx,0x68(%rsp)
063ad043 mov       %rax,0x70(%rsp)
063ad048 lea       0x48(%rsp),%rcx
063ad04d xor       %eax,%eax
063ad04f mov       %eax,%edx
063ad051 call      0x0000`0000`063B`6940
063ad056 mov       0x30(%rsp),%r9
063ad05b mov       0x38(%rsp),%r8
063ad060 mov       0x40(%rsp),%rdx
063ad065 lea       0x48(%rsp),%rcx
063ad06a call      0x0000`0000`063A`CF50
063ad06f mov       %rax,0x20(%rsp)
063ad074 mov       %rdx,0x28(%rsp)
063ad079 mov       0x28(%rsp),%rdx
063ad07e mov       0x20(%rsp),%rax
063ad083 add       $0x78,%rsp
063ad087 ret

enum$<log::MaybeStaticStr>::get:
063ad090 sub       $0x40,%rsp
063ad094 mov       %rcx,(%rsp)
063ad098 mov       %rcx,0x18(%rsp)
063ad09d mov       (%rcx),%rax
063ad0a0 test      %rax,%rax
063ad0a3 je        0x0000`0000`063A`D0AB
063ad0a5 jmp       0x0000`0000`063A`D0A7
063ad0a7 jmp       0x0000`0000`063A`D0CD
063ad0a9 ud2
063ad0ab mov       (%rsp),%rax
063ad0af mov       8(%rax),%rcx
063ad0b3 mov       0x10(%rax),%rax
063ad0b7 mov       %rcx,0x30(%rsp)
063ad0bc mov       %rax,0x38(%rsp)
063ad0c1 mov       %rcx,8(%rsp)
063ad0c6 mov       %rax,0x10(%rsp)
063ad0cb jmp       0x0000`0000`063A`D0ED
063ad0cd mov       (%rsp),%rax
063ad0d1 mov       8(%rax),%rcx
063ad0d5 mov       0x10(%rax),%rax
063ad0d9 mov       %rcx,0x20(%rsp)
063ad0de mov       %rax,0x28(%rsp)
063ad0e3 mov       %rcx,8(%rsp)
063ad0e8 mov       %rax,0x10(%rsp)
063ad0ed mov       8(%rsp),%rax
063ad0f2 mov       0x10(%rsp),%rdx
063ad0f7 add       $0x40,%rsp
063ad0fb ret

log::Record::args:
063ad100 push      %rax
063ad101 mov       %rcx,%rax
063ad104 mov       %rax,(%rsp)
063ad108 add       $0x18,%rax
063ad10c pop       %rcx
063ad10d ret

log::Record::file:
063ad110 sub       $0x58,%rsp
063ad114 mov       %rcx,0x50(%rsp)
063ad119 mov       0x60(%rcx),%rax
063ad11d mov       %rax,0x38(%rsp)
063ad122 mov       0x68(%rcx),%rax
063ad126 mov       %rax,0x40(%rsp)
063ad12b mov       0x70(%rcx),%rax
063ad12f mov       %rax,0x48(%rsp)
063ad134 lea       0x38(%rsp),%rcx
063ad139 call      0x0000`0000`063A`EBF0
063ad13e mov       %rax,0x28(%rsp)
063ad143 mov       %rdx,0x30(%rsp)
063ad148 mov       0x30(%rsp),%rdx
063ad14d mov       0x28(%rsp),%rax
063ad152 add       $0x58,%rsp
063ad156 ret

log::impl$19::file::closure$0:
063ad160 sub       $0x38,%rsp
063ad164 call      0x0000`0000`063A`D090
063ad169 mov       %rax,0x20(%rsp)
063ad16e mov       %rdx,0x28(%rsp)
063ad173 mov       0x28(%rsp),%rdx
063ad178 mov       0x20(%rsp),%rax
063ad17d add       $0x38,%rsp
063ad181 ret

log::Record::line:
063ad190 push      %rax
063ad191 mov       %rcx,(%rsp)
063ad195 mov       0x78(%rcx),%eax
063ad198 mov       0x7C(%rcx),%edx
063ad19b pop       %rcx
063ad19c ret

log::Record::level:
063ad1a0 sub       $0x38,%rsp
063ad1a4 mov       %rcx,0x30(%rsp)
063ad1a9 call      0x0000`0000`063A`D1C0
063ad1ae mov       %rax,0x28(%rsp)
063ad1b3 mov       0x28(%rsp),%rax
063ad1b8 add       $0x38,%rsp
063ad1bc ret

log::Metadata::level:
063ad1c0 push      %rax
063ad1c1 mov       %rcx,(%rsp)
063ad1c5 mov       (%rcx),%rax
063ad1c8 pop       %rcx
063ad1c9 ret

core::fmt::impl$52::fmt<uefi::result::status::Status>:
063ad1d0 sub       $0x38,%rsp
063ad1d4 mov       %rcx,0x28(%rsp)
063ad1d9 mov       %rdx,0x30(%rsp)
063ad1de mov       (%rcx),%rcx
063ad1e1 call      0x0000`0000`063B`1E10
063ad1e6 mov       %al,0x27(%rsp)
063ad1ea mov       0x27(%rsp),%al
063ad1ee and       $1,%al
063ad1f0 movzbl    %al,%eax
063ad1f3 add       $0x38,%rsp
063ad1f7 ret

core::fmt::ArgumentV1::new_display<enum$<log::Level> >:
063ad200 sub       $0x38,%rsp
063ad204 mov       %rcx,0x30(%rsp)
063ad209 lea       0x63B`3980,%rdx
063ad210 call      0x0000`0000`063A`D230
063ad215 mov       %rax,0x20(%rsp)
063ad21a mov       %rdx,0x28(%rsp)
063ad21f mov       0x28(%rsp),%rdx
063ad224 mov       0x20(%rsp),%rax
063ad229 add       $0x38,%rsp
063ad22d ret

core::fmt::ArgumentV1::new<enum$<log::Level> >:
063ad230 sub       $0x48,%rsp
063ad234 mov       %rcx,8(%rsp)
063ad239 mov       %rcx,0x28(%rsp)
063ad23e mov       %rdx,0x30(%rsp)
063ad243 mov       %rdx,0x38(%rsp)
063ad248 mov       0x38(%rsp),%rax
063ad24d mov       %rax,0x10(%rsp)
063ad252 mov       8(%rsp),%rax
063ad257 mov       %rax,0x40(%rsp)
063ad25c mov       0x40(%rsp),%rax
063ad261 mov       %rax,(%rsp)
063ad265 mov       0x10(%rsp),%rax
063ad26a mov       (%rsp),%rcx
063ad26e mov       %rcx,0x18(%rsp)
063ad273 mov       %rax,0x20(%rsp)
063ad278 mov       0x18(%rsp),%rax
063ad27d mov       0x20(%rsp),%rdx
063ad282 add       $0x48,%rsp
063ad286 ret

core::fmt::Write::write_char<uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output> >:
063ad290 sub       $0x68,%rsp
063ad294 mov       %edx,0x3C(%rsp)
063ad298 mov       %rcx,0x30(%rsp)
063ad29d mov       %rcx,0x58(%rsp)
063ad2a2 mov       %edx,0x64(%rsp)
063ad2a6 lea       0x54(%rsp),%rcx
063ad2ab xor       %edx,%edx
063ad2ad mov       $4,%r8d
063ad2b3 call      0x0000`0000`063C`AB00
063ad2b8 mov       0x3C(%rsp),%ecx
063ad2bc lea       0x54(%rsp),%rdx
063ad2c1 mov       $4,%r8d
063ad2c7 call      0x0000`0000`063A`E910
063ad2cc mov       %rax,0x40(%rsp)
063ad2d1 mov       %rdx,0x48(%rsp)
063ad2d6 mov       0x48(%rsp),%r8
063ad2db mov       0x40(%rsp),%rdx
063ad2e0 mov       0x30(%rsp),%rcx
063ad2e5 call      0x0000`0000`063B`1770
063ad2ea mov       %al,0x2F(%rsp)
063ad2ee mov       0x2F(%rsp),%al
063ad2f2 and       $1,%al
063ad2f4 movzbl    %al,%eax
063ad2f7 add       $0x68,%rsp
063ad2fb ret

core::fmt::Write::write_char<uefi::proto::console::text::output::Output>:
063ad300 sub       $0x68,%rsp
063ad304 mov       %edx,0x3C(%rsp)
063ad308 mov       %rcx,0x30(%rsp)
063ad30d mov       %rcx,0x58(%rsp)
063ad312 mov       %edx,0x64(%rsp)
063ad316 lea       0x54(%rsp),%rcx
063ad31b xor       %edx,%edx
063ad31d mov       $4,%r8d
063ad323 call      0x0000`0000`063C`AB00
063ad328 mov       0x3C(%rsp),%ecx
063ad32c lea       0x54(%rsp),%rdx
063ad331 mov       $4,%r8d
063ad337 call      0x0000`0000`063A`E910
063ad33c mov       %rax,0x40(%rsp)
063ad341 mov       %rdx,0x48(%rsp)
063ad346 mov       0x48(%rsp),%r8
063ad34b mov       0x40(%rsp),%rdx
063ad350 mov       0x30(%rsp),%rcx
063ad355 call      0x0000`0000`063B`0EB0
063ad35a mov       %al,0x2F(%rsp)
063ad35e mov       0x2F(%rsp),%al
063ad362 and       $1,%al
063ad364 movzbl    %al,%eax
063ad367 add       $0x68,%rsp
063ad36b ret

core::fmt::Write::write_fmt<uefi::proto::console::text::output::Output>:
063ad370 sub       $0x68,%rsp
063ad374 mov       %rcx,0x30(%rsp)
063ad379 lea       0x30(%rsp),%rax
063ad37e mov       %rax,0x20(%rsp)
063ad383 lea       0x38(%rsp),%rcx
063ad388 mov       $0x30,%r8d
063ad38e call      0x0000`0000`063C`AB90
063ad393 mov       0x20(%rsp),%rcx
063ad398 lea       0x63C`C8B0,%rdx
063ad39f lea       0x38(%rsp),%r8
063ad3a4 call      0x0000`0000`063B`DFE0
063ad3a9 mov       %al,0x2F(%rsp)
063ad3ad mov       0x2F(%rsp),%al
063ad3b1 and       $1,%al
063ad3b3 movzbl    %al,%eax
063ad3b6 add       $0x68,%rsp
063ad3ba ret

core::fmt::Write::write_fmt<uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output> >:
063ad3c0 sub       $0x68,%rsp
063ad3c4 mov       %rcx,0x30(%rsp)
063ad3c9 lea       0x30(%rsp),%rax
063ad3ce mov       %rax,0x20(%rsp)
063ad3d3 lea       0x38(%rsp),%rcx
063ad3d8 mov       $0x30,%r8d
063ad3de call      0x0000`0000`063C`AB90
063ad3e3 mov       0x20(%rsp),%rcx
063ad3e8 lea       0x63C`C8E0,%rdx
063ad3ef lea       0x38(%rsp),%r8
063ad3f4 call      0x0000`0000`063B`DFE0
063ad3f9 mov       %al,0x2F(%rsp)
063ad3fd mov       0x2F(%rsp),%al
063ad401 and       $1,%al
063ad403 movzbl    %al,%eax
063ad406 add       $0x68,%rsp
063ad40a ret

core::fmt::Arguments::new_v1_formatted:
063ad410 push      %rsi
063ad411 sub       $0x48,%rsp
063ad415 mov       %rdx,%r10
063ad418 mov       %rcx,%rax
063ad41b mov       0x88(%rsp),%r11
063ad423 mov       0x80(%rsp),%rsi
063ad42b mov       0x78(%rsp),%rdx
063ad430 mov       %r10,0x10(%rsp)
063ad435 mov       %r8,0x18(%rsp)
063ad43a mov       %r9,0x20(%rsp)
063ad43f mov       %rdx,0x28(%rsp)
063ad444 mov       %rsi,0x30(%rsp)
063ad449 mov       %r11,0x38(%rsp)
063ad44e mov       %rsi,(%rsp)
063ad452 mov       %r11,8(%rsp)
063ad457 mov       %r10,(%rcx)
063ad45a mov       %r8,8(%rcx)
063ad45e mov       (%rsp),%r10
063ad462 mov       8(%rsp),%r8
063ad467 mov       %r10,0x10(%rcx)
063ad46b mov       %r8,0x18(%rcx)
063ad46f mov       %r9,0x20(%rcx)
063ad473 mov       %rdx,0x28(%rcx)
063ad477 add       $0x48,%rsp
063ad47b pop       %rsi
063ad47c ret

core::fmt::Arguments::new_v1:
063ad480 sub       $0xC8,%rsp
063ad487 mov       %r9,0x30(%rsp)
063ad48c mov       %r8,0x38(%rsp)
063ad491 mov       %rdx,0x40(%rsp)
063ad496 mov       %rcx,0x48(%rsp)
063ad49b mov       %rcx,0x50(%rsp)
063ad4a0 mov       0xF0(%rsp),%rax
063ad4a8 mov       %rax,0x58(%rsp)
063ad4ad mov       %rdx,0xA8(%rsp)
063ad4b5 mov       %r8,0xB0(%rsp)
063ad4bd mov       %r9,0xB8(%rsp)
063ad4c5 mov       %rax,0xC0(%rsp)
063ad4cd cmp       %rax,%r8
063ad4d0 jb        0x0000`0000`063A`D4E9
063ad4d2 mov       0x58(%rsp),%rax
063ad4d7 add       $1,%rax
063ad4db mov       %rax,0x28(%rsp)
063ad4e0 setb      %al
063ad4e3 test      $1,%al
063ad4e5 jne       0x0000`0000`063A`D513
063ad4e7 jmp       0x0000`0000`063A`D4FB
063ad4e9 movb      $1,0x67(%rsp)
063ad4ee testb     $1,0x67(%rsp)
063ad4f3 jne       0x0000`0000`063A`D586
063ad4f9 jmp       0x0000`0000`063A`D52D
063ad4fb mov       0x38(%rsp),%rax
063ad500 mov       0x28(%rsp),%rcx
063ad505 cmp       %rcx,%rax
063ad508 seta      %al
063ad50b and       $1,%al
063ad50d mov       %al,0x67(%rsp)
063ad511 jmp       0x0000`0000`063A`D4EE
063ad513 lea       0x63C`C890,%rcx
063ad51a lea       0x63C`C988,%r8
063ad521 mov       $0x1C,%edx
063ad526 call      0x0000`0000`063B`8E30
063ad52b ud2
063ad52d mov       0x50(%rsp),%rax
063ad532 mov       0x48(%rsp),%rcx
063ad537 mov       0x58(%rsp),%rdx
063ad53c mov       0x30(%rsp),%r8
063ad541 mov       0x38(%rsp),%r9
063ad546 mov       0x40(%rsp),%r10
063ad54b movq      $0,0x98(%rsp)
063ad557 mov       %r10,(%rcx)
063ad55a mov       %r9,8(%rcx)
063ad55e mov       0x98(%rsp),%r10
063ad566 mov       0xA0(%rsp),%r9
063ad56e mov       %r10,0x10(%rcx)
063ad572 mov       %r9,0x18(%rcx)
063ad576 mov       %r8,0x20(%rcx)
063ad57a mov       %rdx,0x28(%rcx)
063ad57e add       $0xC8,%rsp
063ad585 ret
063ad586 lea       0x68(%rsp),%rcx
063ad58b lea       0x63C`C9B0,%rdx
063ad592 mov       $1,%r8d
063ad598 lea       0x63C`C9C0,%r9
063ad59f xor       %eax,%eax
063ad5a1 movq      $0,0x20(%rsp)
063ad5aa call      0x0000`0000`063A`D480
063ad5af lea       0x63C`C9C0,%rdx
063ad5b6 lea       0x68(%rsp),%rcx
063ad5bb call      0x0000`0000`063B`8F40
063ad5c0 ud2

core::ops::range::RangeInclusive<usize>::into_slice_range:
063ad5d0 sub       $0x58,%rsp
063ad5d4 mov       %rcx,0x28(%rsp)
063ad5d9 mov       8(%rcx),%rax
063ad5dd add       $1,%rax
063ad5e1 mov       %rax,0x30(%rsp)
063ad5e6 setb      %al
063ad5e9 test      $1,%al
063ad5eb jne       0x0000`0000`063A`D604
063ad5ed mov       0x28(%rsp),%rax
063ad5f2 mov       0x30(%rsp),%rcx
063ad5f7 mov       %rcx,0x50(%rsp)
063ad5fc testb     $1,0x10(%rax)
063ad600 jne       0x0000`0000`063A`D62D
063ad602 jmp       0x0000`0000`063A`D61E
063ad604 lea       0x63C`C890,%rcx
063ad60b lea       0x63C`CA50,%r8
063ad612 mov       $0x1C,%edx
063ad617 call      0x0000`0000`063B`8E30
063ad61c ud2
063ad61e mov       0x28(%rsp),%rax
063ad623 mov       (%rax),%rax
063ad626 mov       %rax,0x48(%rsp)
063ad62b jmp       0x0000`0000`063A`D637
063ad62d mov       0x30(%rsp),%rax
063ad632 mov       %rax,0x48(%rsp)
063ad637 mov       0x30(%rsp),%rax
063ad63c mov       0x48(%rsp),%rcx
063ad641 mov       %rcx,0x38(%rsp)
063ad646 mov       %rax,0x40(%rsp)
063ad64b mov       0x38(%rsp),%rax
063ad650 mov       0x40(%rsp),%rdx
063ad655 add       $0x58,%rsp
063ad659 ret

core::ops::function::impls::impl$4::call_once<tuple$<str>,core::str::LinesAnyMap>:
063ad660 sub       $0x48,%rsp
063ad664 mov       %rdx,0x30(%rsp)
063ad669 mov       %r8,0x38(%rsp)
063ad66e mov       %rcx,0x40(%rsp)
063ad673 mov       0x30(%rsp),%rdx
063ad678 mov       0x38(%rsp),%r8
063ad67d call      0x0000`0000`063B`04D0
063ad682 mov       %rax,0x20(%rsp)
063ad687 mov       %rdx,0x28(%rsp)
063ad68c mov       0x28(%rsp),%rdx
063ad691 mov       0x20(%rsp),%rax
063ad696 add       $0x48,%rsp
063ad69a ret

core::ptr::drop_in_place<ref_mut$<uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output> > >:
063ad6a0 push      %rax
063ad6a1 mov       %rcx,(%rsp)
063ad6a5 pop       %rax
063ad6a6 ret

core::ptr::slice_from_raw_parts<u16>:
063ad6b0 sub       $0x58,%rsp
063ad6b4 mov       %rdx,0x38(%rsp)
063ad6b9 mov       %rcx,0x48(%rsp)
063ad6be mov       %rdx,0x50(%rsp)
063ad6c3 call      0x0000`0000`063A`D920
063ad6c8 mov       %rax,0x40(%rsp)
063ad6cd mov       0x38(%rsp),%rdx
063ad6d2 mov       0x40(%rsp),%rcx
063ad6d7 call      0x0000`0000`063A`D7D0
063ad6dc mov       %rax,0x28(%rsp)
063ad6e1 mov       %rdx,0x30(%rsp)
063ad6e6 mov       0x30(%rsp),%rdx
063ad6eb mov       0x28(%rsp),%rax
063ad6f0 add       $0x58,%rsp
063ad6f4 ret

core::ptr::drop_in_place<ref$<tuple$<> > >:
063ad700 push      %rax
063ad701 mov       %rcx,(%rsp)
063ad705 pop       %rax
063ad706 ret

core::ptr::drop_in_place<core::fmt::Error>:
063ad710 push      %rax
063ad711 mov       %rcx,(%rsp)
063ad715 pop       %rax
063ad716 ret

core::ptr::drop_in_place<uefi::result::error::Error<tuple$<> > >:
063ad720 push      %rax
063ad721 mov       %rcx,(%rsp)
063ad725 pop       %rax
063ad726 ret

core::ptr::drop_in_place<ref$<uefi::result::status::Status> >:
063ad730 push      %rax
063ad731 mov       %rcx,(%rsp)
063ad735 pop       %rax
063ad736 ret

core::ptr::write<u64>:
063ad740 sub       $0x10,%rsp
063ad744 mov       %rdx,(%rsp)
063ad748 mov       %rcx,8(%rsp)
063ad74d mov       (%rsp),%rax
063ad751 mov       %rax,(%rcx)
063ad754 add       $0x10,%rsp
063ad758 ret

core::ptr::drop_in_place<ref_mut$<uefi::proto::console::text::output::Output> >:
063ad760 push      %rax
063ad761 mov       %rcx,(%rsp)
063ad765 pop       %rax
063ad766 ret

core::ptr::mut_ptr::impl$0::is_null<uefi::table::boot::BootServices>:
063ad770 sub       $0x38,%rsp
063ad774 mov       %rcx,0x30(%rsp)
063ad779 mov       %rcx,0x28(%rsp)
063ad77e mov       0x28(%rsp),%rcx
063ad783 xor       %eax,%eax
063ad785 mov       %eax,%edx
063ad787 call      0x0000`0000`063B`5760
063ad78c mov       %al,0x27(%rsp)
063ad790 mov       0x27(%rsp),%al
063ad794 and       $1,%al
063ad796 movzbl    %al,%eax
063ad799 add       $0x38,%rsp
063ad79d ret

core::ptr::mut_ptr::impl$0::is_null<uefi::proto::console::text::output::Output>:
063ad7a0 sub       $0x38,%rsp
063ad7a4 mov       %rcx,0x30(%rsp)
063ad7a9 mov       %rcx,0x28(%rsp)
063ad7ae mov       0x28(%rsp),%rcx
063ad7b3 xor       %eax,%eax
063ad7b5 mov       %eax,%edx
063ad7b7 call      0x0000`0000`063B`5760
063ad7bc mov       %al,0x27(%rsp)
063ad7c0 mov       0x27(%rsp),%al
063ad7c4 and       $1,%al
063ad7c6 movzbl    %al,%eax
063ad7c9 add       $0x38,%rsp
063ad7cd ret

core::ptr::metadata::from_raw_parts<slice$<u16> >:
063ad7d0 sub       $0x30,%rsp
063ad7d4 mov       %rcx,0x20(%rsp)
063ad7d9 mov       %rdx,0x28(%rsp)
063ad7de mov       %rcx,0x10(%rsp)
063ad7e3 mov       %rdx,0x18(%rsp)
063ad7e8 mov       0x10(%rsp),%rcx
063ad7ed mov       0x18(%rsp),%rax
063ad7f2 mov       %rcx,(%rsp)
063ad7f6 mov       %rax,8(%rsp)
063ad7fb mov       (%rsp),%rax
063ad7ff mov       8(%rsp),%rdx
063ad804 add       $0x30,%rsp
063ad808 ret

core::ptr::non_null::NonNull<uefi::table::boot::BootServices>::new_unchecked<uefi::table::boot::BootServices>:
063ad810 sub       $0x10,%rsp
063ad814 mov       %rcx,8(%rsp)
063ad819 mov       %rcx,(%rsp)
063ad81d mov       (%rsp),%rax
063ad821 add       $0x10,%rsp
063ad825 ret

core::ptr::non_null::NonNull<uefi::proto::console::text::output::Output>::new_unchecked<uefi::proto::console::text::output::Output>:
063ad830 sub       $0x10,%rsp
063ad834 mov       %rcx,8(%rsp)
063ad839 mov       %rcx,(%rsp)
063ad83d mov       (%rsp),%rax
063ad841 add       $0x10,%rsp
063ad845 ret

core::ptr::non_null::NonNull<uefi::proto::console::text::output::Output>::new<uefi::proto::console::text::output::Output>:
063ad850 sub       $0x48,%rsp
063ad854 mov       %rcx,0x28(%rsp)
063ad859 mov       %rcx,0x40(%rsp)
063ad85e call      0x0000`0000`063A`D7A0
063ad863 mov       %al,0x37(%rsp)
063ad867 mov       0x37(%rsp),%al
063ad86b xor       $0xFF,%al
063ad86d test      $1,%al
063ad86f jne       0x0000`0000`063A`D87C
063ad871 movq      $0,0x38(%rsp)
063ad87a jmp       0x0000`0000`063A`D895
063ad87c mov       0x28(%rsp),%rcx
063ad881 call      0x0000`0000`063A`D830
063ad886 mov       %rax,0x20(%rsp)
063ad88b mov       0x20(%rsp),%rax
063ad890 mov       %rax,0x38(%rsp)
063ad895 mov       0x38(%rsp),%rax
063ad89a add       $0x48,%rsp
063ad89e ret

core::ptr::non_null::NonNull<uefi::table::boot::BootServices>::new<uefi::table::boot::BootServices>:
063ad8a0 sub       $0x48,%rsp
063ad8a4 mov       %rcx,0x28(%rsp)
063ad8a9 mov       %rcx,0x40(%rsp)
063ad8ae call      0x0000`0000`063A`D770
063ad8b3 mov       %al,0x37(%rsp)
063ad8b7 mov       0x37(%rsp),%al
063ad8bb xor       $0xFF,%al
063ad8bd test      $1,%al
063ad8bf jne       0x0000`0000`063A`D8CC
063ad8c1 movq      $0,0x38(%rsp)
063ad8ca jmp       0x0000`0000`063A`D8E5
063ad8cc mov       0x28(%rsp),%rcx
063ad8d1 call      0x0000`0000`063A`D810
063ad8d6 mov       %rax,0x20(%rsp)
063ad8db mov       0x20(%rsp),%rax
063ad8e0 mov       %rax,0x38(%rsp)
063ad8e5 mov       0x38(%rsp),%rax
063ad8ea add       $0x48,%rsp
063ad8ee ret

core::ptr::non_null::NonNull<uefi::proto::console::text::output::Output>::as_mut<uefi::proto::console::text::output::Output>:
063ad8f0 sub       $0x38,%rsp
063ad8f4 mov       %rcx,0x30(%rsp)
063ad8f9 mov       (%rcx),%rcx
063ad8fc call      0x0000`0000`063A`D910
063ad901 mov       %rax,0x28(%rsp)
063ad906 mov       0x28(%rsp),%rax
063ad90b add       $0x38,%rsp
063ad90f ret

core::ptr::non_null::NonNull<uefi::proto::console::text::output::Output>::as_ptr<uefi::proto::console::text::output::Output>:
063ad910 push      %rax
063ad911 mov       %rcx,%rax
063ad914 mov       %rax,(%rsp)
063ad918 pop       %rcx
063ad919 ret

core::ptr::const_ptr::impl$0::cast<u16,tuple$<> >:
063ad920 push      %rax
063ad921 mov       %rcx,%rax
063ad924 mov       %rax,(%rsp)
063ad928 pop       %rcx
063ad929 ret

core::ptr::const_ptr::impl$0::is_null<u64>:
063ad930 sub       $0x38,%rsp
063ad934 mov       %rcx,0x30(%rsp)
063ad939 mov       %rcx,0x28(%rsp)
063ad93e mov       0x28(%rsp),%rcx
063ad943 xor       %eax,%eax
063ad945 mov       %eax,%edx
063ad947 call      0x0000`0000`063B`5320
063ad94c mov       %al,0x27(%rsp)
063ad950 mov       0x27(%rsp),%al
063ad954 and       $1,%al
063ad956 movzbl    %al,%eax
063ad959 add       $0x38,%rsp
063ad95d ret

core::ptr::const_ptr::impl$1::as_ptr<u16>:
063ad960 sub       $0x10,%rsp
063ad964 mov       %rcx,%rax
063ad967 mov       %rax,(%rsp)
063ad96b mov       %rdx,8(%rsp)
063ad970 add       $0x10,%rsp
063ad974 ret

core::str::validations::utf8_first_byte:
063ad980 sub       $0x28,%rsp
063ad984 mov       %cl,0x21(%rsp)
063ad988 mov       %cl,0x23(%rsp)
063ad98c mov       %edx,0x24(%rsp)
063ad990 mov       %edx,%eax
063ad992 and       $0xFFFF`FFF8,%eax
063ad995 cmp       $0,%eax
063ad998 setne     %al
063ad99b mov       %dl,%cl
063ad99d and       $7,%cl
063ad9a0 mov       $0x7F,%dl
063ad9a2 shr       %cl,%dl
063ad9a4 mov       %dl,0x22(%rsp)
063ad9a8 test      $1,%al
063ad9aa jne       0x0000`0000`063A`D9BE
063ad9ac mov       0x22(%rsp),%cl
063ad9b0 mov       0x21(%rsp),%al
063ad9b4 and       %cl,%al
063ad9b6 movzbl    %al,%eax
063ad9b9 add       $0x28,%rsp
063ad9bd ret
063ad9be lea       0x63C`CB00,%rcx
063ad9c5 lea       0x63C`CAE8,%r8
063ad9cc mov       $0x24,%edx
063ad9d1 call      0x0000`0000`063B`8E30
063ad9d6 ud2

core::str::validations::utf8_is_cont_byte:
063ad9e0 push      %rax
063ad9e1 mov       %cl,7(%rsp)
063ad9e5 cmp       $0xC0,%cl
063ad9e8 setl      %al
063ad9eb and       $1,%al
063ad9ed movzbl    %al,%eax
063ad9f0 pop       %rcx
063ad9f1 ret

core::str::validations::utf8_acc_cont_byte:
063ada00 sub       $0x10,%rsp
063ada04 mov       %dl,3(%rsp)
063ada08 mov       %ecx,8(%rsp)
063ada0c mov       %dl,0xF(%rsp)
063ada10 shl       $6,%ecx
063ada13 mov       %ecx,4(%rsp)
063ada17 mov       4(%rsp),%eax
063ada1b mov       3(%rsp),%cl
063ada1f and       $0x3F,%cl
063ada22 movzbl    %cl,%ecx
063ada25 or        %ecx,%eax
063ada27 add       $0x10,%rsp
063ada2b ret

core::str::validations::next_code_point_reverse<core::slice::iter::Iter<u8> >:
063ada30 sub       $0xD8,%rsp
063ada37 mov       %rcx,0x88(%rsp)
063ada3f mov       %rcx,0xB0(%rsp)
063ada47 call      0x0000`0000`063C`9980
063ada4c mov       %rax,0x90(%rsp)
063ada54 mov       0x90(%rsp),%rcx
063ada5c call      0x0000`0000`063B`8C50
063ada61 mov       %rax,0xA0(%rsp)
063ada69 mov       0xA0(%rsp),%rax
063ada71 test      %rax,%rax
063ada74 sete      %al
063ada77 movzbl    %al,%eax
063ada7a jne       0x0000`0000`063A`DA82
063ada7c jmp       0x0000`0000`063A`DA7E
063ada7e jmp       0x0000`0000`063A`DAA9
063ada80 ud2
063ada82 mov       0xA0(%rsp),%rax
063ada8a mov       %rax,0x80(%rsp)
063ada92 mov       %rax,0xC0(%rsp)
063ada9a mov       %rax,0xC8(%rsp)
063adaa2 cmpb      $0x80,(%rax)
063adaa5 jb        0x0000`0000`063A`DB02
063adaa7 jmp       0x0000`0000`063A`DAD2
063adaa9 call      0x0000`0000`063B`8D40
063adaae mov       %edx,0x9C(%rsp)
063adab5 mov       %eax,0x98(%rsp)
063adabc mov       0x98(%rsp),%eax
063adac3 mov       0x9C(%rsp),%edx
063adaca add       $0xD8,%rsp
063adad1 ret
063adad2 mov       0x88(%rsp),%rcx
063adada mov       0x80(%rsp),%rax
063adae2 mov       (%rax),%al
063adae4 mov       %al,0x77(%rsp)
063adae8 mov       %al,0xD3(%rsp)
063adaef mov       %al,0xD4(%rsp)
063adaf6 call      0x0000`0000`063C`9980
063adafb mov       %rax,0x78(%rsp)
063adb00 jmp       0x0000`0000`063A`DB2A
063adb02 mov       0x80(%rsp),%rax
063adb0a mov       (%rax),%al
063adb0c mov       %al,0xD2(%rsp)
063adb13 movzbl    %al,%eax
063adb16 mov       %eax,0x9C(%rsp)
063adb1d movl      $1,0x98(%rsp)
063adb28 jmp       0x0000`0000`063A`DABC
063adb2a mov       0x78(%rsp),%rcx
063adb2f lea       0x63C`CB28,%rdx
063adb36 call      0x0000`0000`063B`86D0
063adb3b mov       %rax,0x68(%rsp)
063adb40 mov       0x68(%rsp),%rax
063adb45 mov       (%rax),%cl
063adb47 mov       %cl,0x63(%rsp)
063adb4b mov       %cl,0xD5(%rsp)
063adb52 mov       $2,%edx
063adb57 call      0x0000`0000`063A`D980
063adb5c mov       %eax,0x64(%rsp)
063adb60 mov       0x63(%rsp),%cl
063adb64 mov       0x64(%rsp),%eax
063adb68 mov       %eax,0xAC(%rsp)
063adb6f call      0x0000`0000`063A`D9E0
063adb74 mov       %al,0x62(%rsp)
063adb78 mov       0x62(%rsp),%al
063adb7c test      $1,%al
063adb7e jne       0x0000`0000`063A`DB9B
063adb80 jmp       0x0000`0000`063A`DB82
063adb82 mov       0x77(%rsp),%dl
063adb86 mov       0xAC(%rsp),%ecx
063adb8d call      0x0000`0000`063A`DA00
063adb92 mov       %eax,0x5C(%rsp)
063adb96 jmp       0x0000`0000`063A`DC9E
063adb9b mov       0x88(%rsp),%rcx
063adba3 call      0x0000`0000`063C`9980
063adba8 mov       %rax,0x50(%rsp)
063adbad mov       0x50(%rsp),%rcx
063adbb2 lea       0x63C`CB40,%rdx
063adbb9 call      0x0000`0000`063B`86D0
063adbbe mov       %rax,0x48(%rsp)
063adbc3 mov       0x48(%rsp),%rax
063adbc8 mov       (%rax),%cl
063adbca mov       %cl,0x43(%rsp)
063adbce mov       %cl,0xD6(%rsp)
063adbd5 mov       $3,%edx
063adbda call      0x0000`0000`063A`D980
063adbdf mov       %eax,0x44(%rsp)
063adbe3 mov       0x43(%rsp),%cl
063adbe7 mov       0x44(%rsp),%eax
063adbeb mov       %eax,0xAC(%rsp)
063adbf2 call      0x0000`0000`063A`D9E0
063adbf7 mov       %al,0x42(%rsp)
063adbfb mov       0x42(%rsp),%al
063adbff test      $1,%al
063adc01 jne       0x0000`0000`063A`DC1B
063adc03 jmp       0x0000`0000`063A`DC05
063adc05 mov       0x63(%rsp),%dl
063adc09 mov       0xAC(%rsp),%ecx
063adc10 call      0x0000`0000`063A`DA00
063adc15 mov       %eax,0x3C(%rsp)
063adc19 jmp       0x0000`0000`063A`DC8E
063adc1b mov       0x88(%rsp),%rcx
063adc23 call      0x0000`0000`063C`9980
063adc28 mov       %rax,0x30(%rsp)
063adc2d mov       0x30(%rsp),%rcx
063adc32 lea       0x63C`CB58,%rdx
063adc39 call      0x0000`0000`063B`86D0
063adc3e mov       %rax,0x28(%rsp)
063adc43 mov       0x28(%rsp),%rax
063adc48 mov       (%rax),%cl
063adc4a mov       %cl,0xD7(%rsp)
063adc51 mov       $4,%edx
063adc56 call      0x0000`0000`063A`D980
063adc5b mov       %eax,0x24(%rsp)
063adc5f mov       0x43(%rsp),%dl
063adc63 mov       0x24(%rsp),%eax
063adc67 mov       %eax,0xAC(%rsp)
063adc6e mov       0xAC(%rsp),%ecx
063adc75 call      0x0000`0000`063A`DA00
063adc7a mov       %eax,0x20(%rsp)
063adc7e mov       0x20(%rsp),%eax
063adc82 mov       %eax,0xAC(%rsp)
063adc89 jmp       0x0000`0000`063A`DC05
063adc8e mov       0x3C(%rsp),%eax
063adc92 mov       %eax,0xAC(%rsp)
063adc99 jmp       0x0000`0000`063A`DB82
063adc9e mov       0x5C(%rsp),%eax
063adca2 mov       %eax,0xAC(%rsp)
063adca9 mov       0xAC(%rsp),%eax
063adcb0 mov       %eax,0x9C(%rsp)
063adcb7 movl      $1,0x98(%rsp)
063adcc2 jmp       0x0000`0000`063A`DABC

core::str::impl$0::get_unchecked<core::ops::range::Range<usize> >:
063adcd0 sub       $0x68,%rsp
063adcd4 mov       %r9,0x28(%rsp)
063adcd9 mov       %r8,0x30(%rsp)
063adcde mov       %rdx,%r9
063adce1 mov       0x28(%rsp),%rdx
063adce6 mov       %rcx,%r8
063adce9 mov       0x30(%rsp),%rcx
063adcee mov       %r8,0x48(%rsp)
063adcf3 mov       %r9,0x50(%rsp)
063adcf8 mov       %rcx,0x58(%rsp)
063adcfd mov       %rdx,0x60(%rsp)
063add02 call      0x0000`0000`063A`E220
063add07 mov       %rax,0x38(%rsp)
063add0c mov       %rdx,0x40(%rsp)
063add11 mov       0x40(%rsp),%rdx
063add16 mov       0x38(%rsp),%rax
063add1b add       $0x68,%rsp
063add1f ret

core::str::impl$0::split_terminator<char>:
063add20 sub       $0xD8,%rsp
063add27 mov       %rcx,0x20(%rsp)
063add2c mov       %rcx,0x28(%rsp)
063add31 mov       %rdx,0xC0(%rsp)
063add39 mov       %r8,0xC8(%rsp)
063add41 mov       %r9d,0xD4(%rsp)
063add49 lea       0x78(%rsp),%rcx
063add4e call      0x0000`0000`063A`DEF0
063add53 mov       0x78(%rsp),%rax
063add58 mov       %rax,0x30(%rsp)
063add5d mov       0x80(%rsp),%rax
063add65 mov       %rax,0x38(%rsp)
063add6a lea       0x30(%rsp),%rcx
063add6f add       $0x10,%rcx
063add73 lea       0x78(%rsp),%rdx
063add78 add       $0x10,%rdx
063add7c mov       $0x30,%r8d
063add82 call      0x0000`0000`063C`AB90
063add87 mov       0x20(%rsp),%rcx
063add8c movb      $0,0x70(%rsp)
063add91 mov       0xB9(%rsp),%al
063add98 and       $1,%al
063add9a mov       %al,0x71(%rsp)
063add9e lea       0x30(%rsp),%rdx
063adda3 mov       $0x48,%r8d
063adda9 call      0x0000`0000`063C`AB90
063addae mov       0x28(%rsp),%rax
063addb3 add       $0xD8,%rsp
063addba ret

core::str::impl$0::len:
063addc0 sub       $0x38,%rsp
063addc4 mov       %rcx,8(%rsp)
063addc9 mov       %rdx,0x10(%rsp)
063addce mov       %rcx,0x18(%rsp)
063addd3 mov       %rdx,0x20(%rsp)
063addd8 mov       %rcx,0x28(%rsp)
063adddd mov       %rdx,0x30(%rsp)
063adde2 mov       0x28(%rsp),%rax
063adde7 mov       0x30(%rsp),%rax
063addec mov       %rax,(%rsp)
063addf0 mov       (%rsp),%rax
063addf4 add       $0x38,%rsp
063addf8 ret

core::str::impl$0::chars:
063ade00 sub       $0x88,%rsp
063ade07 mov       %rcx,0x58(%rsp)
063ade0c mov       %rdx,0x60(%rsp)
063ade11 mov       %rcx,0x68(%rsp)
063ade16 mov       %rdx,0x70(%rsp)
063ade1b mov       %rcx,0x78(%rsp)
063ade20 mov       %rdx,0x80(%rsp)
063ade28 mov       0x78(%rsp),%rax
063ade2d mov       %rax,0x38(%rsp)
063ade32 mov       0x80(%rsp),%rax
063ade3a mov       %rax,0x40(%rsp)
063ade3f mov       0x40(%rsp),%rdx
063ade44 mov       0x38(%rsp),%rcx
063ade49 call      0x0000`0000`063C`2CD0
063ade4e mov       %rax,0x28(%rsp)
063ade53 mov       %rdx,0x30(%rsp)
063ade58 mov       0x30(%rsp),%rax
063ade5d mov       0x28(%rsp),%rcx
063ade62 mov       %rcx,0x48(%rsp)
063ade67 mov       %rax,0x50(%rsp)
063ade6c mov       0x48(%rsp),%rax
063ade71 mov       0x50(%rsp),%rdx
063ade76 add       $0x88,%rsp
063ade7d ret

core::str::impl$0::lines:
063ade80 sub       $0xD8,%rsp
063ade87 mov       %rcx,0x28(%rsp)
063ade8c mov       %rcx,0x30(%rsp)
063ade91 mov       %rdx,0xC8(%rsp)
063ade99 mov       %r8,0xD0(%rsp)
063adea1 lea       0x80(%rsp),%rcx
063adea9 mov       $0xA,%r9d
063adeaf call      0x0000`0000`063A`DD20
063adeb4 lea       0x38(%rsp),%rcx
063adeb9 lea       0x80(%rsp),%rdx
063adec1 call      0x0000`0000`063A`EA00
063adec6 mov       0x28(%rsp),%rcx
063adecb lea       0x38(%rsp),%rdx
063aded0 mov       $0x48,%r8d
063aded6 call      0x0000`0000`063C`AB90
063adedb mov       0x30(%rsp),%rax
063adee0 add       $0xD8,%rsp
063adee7 ret

core::str::impl$0::split<char>:
063adef0 sub       $0xE8,%rsp
063adef7 mov       %r9d,0x2C(%rsp)
063adefc mov       %r8,0x30(%rsp)
063adf01 mov       %rdx,%rax
063adf04 mov       0x30(%rsp),%rdx
063adf09 mov       %rax,0x38(%rsp)
063adf0e mov       %rcx,%rax
063adf11 mov       0x38(%rsp),%rcx
063adf16 mov       %rax,0x40(%rsp)
063adf1b mov       %rax,0x48(%rsp)
063adf20 mov       %rcx,0xD0(%rsp)
063adf28 mov       %rdx,0xD8(%rsp)
063adf30 mov       %r9d,0xE4(%rsp)
063adf38 call      0x0000`0000`063A`DDC0
063adf3d mov       %rax,0x50(%rsp)
063adf42 mov       0x30(%rsp),%r9
063adf47 mov       0x38(%rsp),%r8
063adf4c mov       0x2C(%rsp),%edx
063adf50 lea       0xA0(%rsp),%rcx
063adf58 call      0x0000`0000`063A`FB60
063adf5d mov       0x50(%rsp),%rax
063adf62 movq      $0,0x58(%rsp)
063adf6b mov       %rax,0x60(%rsp)
063adf70 lea       0x58(%rsp),%rcx
063adf75 add       $0x10,%rcx
063adf79 lea       0xA0(%rsp),%rdx
063adf81 mov       $0x30,%r8d
063adf87 call      0x0000`0000`063C`AB90
063adf8c mov       0x40(%rsp),%rcx
063adf91 movb      $1,0x98(%rsp)
063adf99 movb      $0,0x99(%rsp)
063adfa1 lea       0x58(%rsp),%rdx
063adfa6 mov       $0x48,%r8d
063adfac call      0x0000`0000`063C`AB90
063adfb1 mov       0x48(%rsp),%rax
063adfb6 add       $0xE8,%rsp
063adfbd ret

core::str::iter::SplitInternal<char>::next<char>:
063adfc0 sub       $0xC8,%rsp
063adfc7 mov       %rcx,0x50(%rsp)
063adfcc mov       %rcx,0x90(%rsp)
063adfd4 testb     $1,0x41(%rcx)
063adfd8 jne       0x0000`0000`063A`E004
063adfda mov       0x50(%rsp),%rcx
063adfdf add       $0x10,%rcx
063adfe3 call      0x0000`0000`063B`02A0
063adfe8 mov       %rax,0x40(%rsp)
063adfed mov       %rdx,0x48(%rsp)
063adff2 mov       %rax,0x98(%rsp)
063adffa mov       %rdx,0xA0(%rsp)
063ae002 jmp       0x0000`0000`063A`E01F
063ae004 movq      $0,0x58(%rsp)
063ae00d mov       0x58(%rsp),%rax
063ae012 mov       0x60(%rsp),%rdx
063ae017 add       $0xC8,%rsp
063ae01e ret
063ae01f mov       0x50(%rsp),%rdx
063ae024 add       $0x10,%rdx
063ae028 lea       0x68(%rsp),%rcx
063ae02d call      0x0000`0000`063A`FDF0
063ae032 mov       0x68(%rsp),%rax
063ae037 test      %rax,%rax
063ae03a je        0x0000`0000`063A`E042
063ae03c jmp       0x0000`0000`063A`E03E
063ae03e jmp       0x0000`0000`063A`E058
063ae040 ud2
063ae042 mov       0x50(%rsp),%rcx
063ae047 call      0x0000`0000`063A`E0F0
063ae04c mov       %rdx,0x60(%rsp)
063ae051 mov       %rax,0x58(%rsp)
063ae056 jmp       0x0000`0000`063A`E00D
063ae058 mov       0x48(%rsp),%rdx
063ae05d mov       0x40(%rsp),%rcx
063ae062 mov       0x50(%rsp),%r8
063ae067 mov       0x70(%rsp),%rax
063ae06c mov       %rax,0xA8(%rsp)
063ae074 mov       0x78(%rsp),%r9
063ae079 mov       %r9,0x28(%rsp)
063ae07e mov       %r9,0xB0(%rsp)
063ae086 mov       (%r8),%r8
063ae089 mov       %r8,0x80(%rsp)
063ae091 mov       %rax,0x88(%rsp)
063ae099 mov       0x80(%rsp),%r8
063ae0a1 mov       0x88(%rsp),%r9
063ae0a9 call      0x0000`0000`063A`DCD0
063ae0ae mov       %rax,0x30(%rsp)
063ae0b3 mov       %rdx,0x38(%rsp)
063ae0b8 mov       %rax,0xB8(%rsp)
063ae0c0 mov       %rdx,0xC0(%rsp)
063ae0c8 mov       0x38(%rsp),%rax
063ae0cd mov       0x30(%rsp),%rcx
063ae0d2 mov       0x50(%rsp),%rdx
063ae0d7 mov       0x28(%rsp),%r8
063ae0dc mov       %r8,(%rdx)
063ae0df mov       %rcx,0x58(%rsp)
063ae0e4 mov       %rax,0x60(%rsp)
063ae0e9 jmp       0x0000`0000`063A`E00D

core::str::iter::SplitInternal<char>::get_end<char>:
063ae0f0 sub       $0x98,%rsp
063ae0f7 mov       %rcx,0x50(%rsp)
063ae0fc mov       %rcx,0x80(%rsp)
063ae104 mov       0x41(%rcx),%al
063ae107 xor       $0xFF,%al
063ae109 test      $1,%al
063ae10b jne       0x0000`0000`063A`E114
063ae10d movb      $0,0x6E(%rsp)
063ae112 jmp       0x0000`0000`063A`E178
063ae114 mov       0x50(%rsp),%rax
063ae119 testb     $1,0x40(%rax)
063ae11d jne       0x0000`0000`063A`E139
063ae11f mov       0x50(%rsp),%rcx
063ae124 mov       8(%rcx),%rax
063ae128 sub       (%rcx),%rax
063ae12b mov       %rax,0x48(%rsp)
063ae130 setb      %al
063ae133 test      $1,%al
063ae135 jne       0x0000`0000`063A`E15E
063ae137 jmp       0x0000`0000`063A`E14A
063ae139 movb      $1,0x6F(%rsp)
063ae13e mov       0x6F(%rsp),%al
063ae142 and       $1,%al
063ae144 mov       %al,0x6E(%rsp)
063ae148 jmp       0x0000`0000`063A`E178
063ae14a mov       0x48(%rsp),%rax
063ae14f cmp       $0,%rax
063ae153 seta      %al
063ae156 and       $1,%al
063ae158 mov       %al,0x6F(%rsp)
063ae15c jmp       0x0000`0000`063A`E13E
063ae15e lea       0x63C`C7D0,%rcx
063ae165 lea       0x63C`CBE8,%r8
063ae16c mov       $0x21,%edx
063ae171 call      0x0000`0000`063B`8E30
063ae176 ud2
063ae178 testb     $1,0x6E(%rsp)
063ae17d jne       0x0000`0000`063A`E18A
063ae17f movq      $0,0x58(%rsp)
063ae188 jmp       0x0000`0000`063A`E203
063ae18a mov       0x50(%rsp),%rcx
063ae18f movb      $1,0x41(%rcx)
063ae193 add       $0x10,%rcx
063ae197 call      0x0000`0000`063B`02A0
063ae19c mov       %rax,0x38(%rsp)
063ae1a1 mov       %rdx,0x40(%rsp)
063ae1a6 mov       0x40(%rsp),%rdx
063ae1ab mov       0x38(%rsp),%rcx
063ae1b0 mov       0x50(%rsp),%rax
063ae1b5 mov       (%rax),%r8
063ae1b8 mov       8(%rax),%rax
063ae1bc mov       %r8,0x70(%rsp)
063ae1c1 mov       %rax,0x78(%rsp)
063ae1c6 mov       0x70(%rsp),%r8
063ae1cb mov       0x78(%rsp),%r9
063ae1d0 call      0x0000`0000`063A`DCD0
063ae1d5 mov       %rax,0x28(%rsp)
063ae1da mov       %rdx,0x30(%rsp)
063ae1df mov       %rax,0x88(%rsp)
063ae1e7 mov       %rdx,0x90(%rsp)
063ae1ef mov       0x30(%rsp),%rax
063ae1f4 mov       0x28(%rsp),%rcx
063ae1f9 mov       %rcx,0x58(%rsp)
063ae1fe mov       %rax,0x60(%rsp)
063ae203 mov       0x58(%rsp),%rax
063ae208 mov       0x60(%rsp),%rdx
063ae20d add       $0x98,%rsp
063ae214 ret

core::str::traits::impl$7::get_unchecked:
063ae220 sub       $0xD8,%rsp
063ae227 mov       %r9,0x48(%rsp)
063ae22c mov       %r8,0x58(%rsp)
063ae231 mov       %rdx,%rax
063ae234 mov       0x48(%rsp),%rdx
063ae239 mov       %rax,0x50(%rsp)
063ae23e mov       %rcx,%r8
063ae241 mov       0x58(%rsp),%rcx
063ae246 mov       %r8,0x60(%rsp)
063ae24b mov       %r8,0x70(%rsp)
063ae250 mov       %rax,0x78(%rsp)
063ae255 mov       %rcx,0x80(%rsp)
063ae25d mov       %rdx,0x88(%rsp)
063ae265 mov       %rcx,0x90(%rsp)
063ae26d mov       %rdx,0x98(%rsp)
063ae275 call      0x0000`0000`063B`55D0
063ae27a mov       %rax,0x68(%rsp)
063ae27f mov       0x60(%rsp),%rcx
063ae284 mov       0x68(%rsp),%rax
063ae289 mov       %rax,0xB0(%rsp)
063ae291 mov       %rcx,0xB8(%rsp)
063ae299 mov       %rax,0xC0(%rsp)
063ae2a1 mov       %rcx,0xC8(%rsp)
063ae2a9 add       %rcx,%rax
063ae2ac mov       %rax,0xD0(%rsp)
063ae2b4 mov       0xD0(%rsp),%rax
063ae2bc mov       %rax,0x40(%rsp)
063ae2c1 mov       %rax,0xA0(%rsp)
063ae2c9 mov       0x60(%rsp),%rcx
063ae2ce mov       0x50(%rsp),%rax
063ae2d3 sub       %rcx,%rax
063ae2d6 mov       %rax,0x38(%rsp)
063ae2db setb      %al
063ae2de test      $1,%al
063ae2e0 jne       0x0000`0000`063A`E305
063ae2e2 mov       0x38(%rsp),%rdx
063ae2e7 mov       0x40(%rsp),%rcx
063ae2ec mov       %rdx,0xA8(%rsp)
063ae2f4 call      0x0000`0000`063B`57E0
063ae2f9 mov       %rax,0x28(%rsp)
063ae2fe mov       %rdx,0x30(%rsp)
063ae303 jmp       0x0000`0000`063A`E31F
063ae305 lea       0x63C`C7D0,%rcx
063ae30c lea       0x63C`CC80,%r8
063ae313 mov       $0x21,%edx
063ae318 call      0x0000`0000`063B`8E30
063ae31d ud2
063ae31f mov       0x30(%rsp),%rdx
063ae324 mov       0x28(%rsp),%rax
063ae329 add       $0xD8,%rsp
063ae330 ret

core::str::converts::from_utf8_unchecked_mut:
063ae340 sub       $0x10,%rsp
063ae344 mov       %rcx,%rax
063ae347 mov       %rax,(%rsp)
063ae34b mov       %rdx,8(%rsp)
063ae350 add       $0x10,%rsp
063ae354 ret

core::char::convert::char_try_from_u32:
063ae360 sub       $0x20,%rsp
063ae364 mov       %ecx,%eax
063ae366 mov       %eax,4(%rsp)
063ae36a mov       %eax,0x10(%rsp)
063ae36e xor       $0xD800,%eax
063ae373 mov       %eax,0x18(%rsp)
063ae377 movl      $0x800,0x1C(%rsp)
063ae37f sub       $0x800,%eax
063ae384 mov       %eax,8(%rsp)
063ae388 mov       8(%rsp),%eax
063ae38c cmp       $0x10`F800,%eax
063ae391 jae       0x0000`0000`063A`E3A4
063ae393 mov       4(%rsp),%eax
063ae397 mov       %eax,0x14(%rsp)
063ae39b mov       0x14(%rsp),%eax
063ae39f mov       %eax,(%rsp)
063ae3a2 jmp       0x0000`0000`063A`E3B5
063ae3a4 movl      $0x11`0000,0xC(%rsp)
063ae3ac mov       0xC(%rsp),%eax
063ae3b0 add       $0x20,%rsp
063ae3b4 ret
063ae3b5 mov       (%rsp),%eax
063ae3b8 mov       %eax,0xC(%rsp)
063ae3bc jmp       0x0000`0000`063A`E3AC

core::char::convert::from_u32_unchecked:
063ae3c0 sub       $0x38,%rsp
063ae3c4 mov       %ecx,0x34(%rsp)
063ae3c8 call      0x0000`0000`063A`E960
063ae3cd mov       %eax,0x30(%rsp)
063ae3d1 mov       0x30(%rsp),%ecx
063ae3d5 lea       0x63C`CD18,%rdx
063ae3dc call      0x0000`0000`063B`8470
063ae3e1 mov       %eax,0x2C(%rsp)
063ae3e5 mov       0x2C(%rsp),%eax
063ae3e9 add       $0x38,%rsp
063ae3ed ret

core::char::convert::impl$8::try_from:
063ae3f0 sub       $0x28,%rsp
063ae3f4 mov       %ecx,0x24(%rsp)
063ae3f8 call      0x0000`0000`063A`E360
063ae3fd mov       %eax,0x20(%rsp)
063ae401 mov       0x20(%rsp),%eax
063ae405 add       $0x28,%rsp
063ae409 ret

core::char::convert::from_u32:
063ae410 sub       $0x38,%rsp
063ae414 mov       %ecx,0x30(%rsp)
063ae418 call      0x0000`0000`063A`E360
063ae41d mov       %eax,0x2C(%rsp)
063ae421 mov       0x2C(%rsp),%eax
063ae425 add       $0xFFEF`0000,%eax
063ae42a sete      %al
063ae42d movzbl    %al,%eax
063ae430 jne       0x0000`0000`063A`E438
063ae432 jmp       0x0000`0000`063A`E434
063ae434 jmp       0x0000`0000`063A`E446
063ae436 ud2
063ae438 mov       0x2C(%rsp),%eax
063ae43c mov       %eax,0x34(%rsp)
063ae440 mov       %eax,0x28(%rsp)
063ae444 jmp       0x0000`0000`063A`E44E
063ae446 movl      $0x11`0000,0x28(%rsp)
063ae44e mov       0x28(%rsp),%eax
063ae452 add       $0x38,%rsp
063ae456 ret

core::char::methods::encode_utf8_raw:
063ae460 sub       $0x1F8,%rsp
063ae467 mov       %r8,0xF0(%rsp)
063ae46f mov       %rdx,0xF8(%rsp)
063ae477 mov       %ecx,0x104(%rsp)
063ae47e mov       %rdx,0x198(%rsp)
063ae486 mov       %r8,0x1A0(%rsp)
063ae48e mov       0x104(%rsp),%ecx
063ae495 call      0x0000`0000`063A`E980
063ae49a mov       %rax,0x108(%rsp)
063ae4a2 mov       0xF0(%rsp),%rdx
063ae4aa mov       0xF8(%rsp),%rcx
063ae4b2 mov       0x108(%rsp),%rax
063ae4ba mov       %rax,0xD8(%rsp)
063ae4c2 lea       0x63C`CDB0,%r8
063ae4c9 call      0x0000`0000`063C`0950
063ae4ce mov       %rax,0xE0(%rsp)
063ae4d6 mov       %rdx,0xE8(%rsp)
063ae4de mov       0xE8(%rsp),%rax
063ae4e6 mov       0xE0(%rsp),%rcx
063ae4ee mov       0xD8(%rsp),%rdx
063ae4f6 mov       %rdx,0x110(%rsp)
063ae4fe mov       %rcx,0x118(%rsp)
063ae506 mov       %rax,0x120(%rsp)
063ae50e mov       0x110(%rsp),%rax
063ae516 add       $0xFFFF`FFFF`FFFF`FFFF,%rax
063ae51a mov       %rax,0xD0(%rsp)
063ae522 sub       $3,%rax
063ae526 ja        0x0000`0000`063A`E540
063ae528 mov       0xD0(%rsp),%rax
063ae530 lea       0x63A`E8F4,%rcx
063ae537 movslq    (%rcx,%rax,4),%rax
063ae53b add       %rcx,%rax
063ae53e jmp       *%rax
063ae540 lea       0x108(%rsp),%rcx
063ae548 call      0x0000`0000`063C`87D0
063ae54d mov       %rax,0xC0(%rsp)
063ae555 mov       %rdx,0xC8(%rsp)
063ae55d jmp       0x0000`0000`063A`E81E
063ae562 cmpq      $1,0x120(%rsp)
063ae56b jae       0x0000`0000`063A`E7E8
063ae571 jmp       0x0000`0000`063A`E540
063ae573 cmpq      $2,0x120(%rsp)
063ae57c jae       0x0000`0000`063A`E782
063ae582 jmp       0x0000`0000`063A`E540
063ae584 cmpq      $3,0x120(%rsp)
063ae58d jae       0x0000`0000`063A`E6E4
063ae593 jmp       0x0000`0000`063A`E540
063ae595 cmpq      $4,0x120(%rsp)
063ae59e jb        0x0000`0000`063A`E540
063ae5a0 mov       0x118(%rsp),%rax
063ae5a8 mov       %rax,0x98(%rsp)
063ae5b0 mov       %rax,0x1A8(%rsp)
063ae5b8 mov       0x118(%rsp),%rax
063ae5c0 add       $1,%rax
063ae5c4 mov       %rax,0xA0(%rsp)
063ae5cc mov       %rax,0x1B0(%rsp)
063ae5d4 mov       0x118(%rsp),%rax
063ae5dc add       $2,%rax
063ae5e0 mov       %rax,0xA8(%rsp)
063ae5e8 mov       %rax,0x1B8(%rsp)
063ae5f0 mov       0x118(%rsp),%rax
063ae5f8 add       $3,%rax
063ae5fc mov       %rax,0xB0(%rsp)
063ae604 mov       %rax,0x1C0(%rsp)
063ae60c mov       0x104(%rsp),%eax
063ae613 shr       $0x12,%eax
063ae616 mov       %eax,0xBC(%rsp)
063ae61d mov       0x98(%rsp),%rax
063ae625 mov       0xBC(%rsp),%ecx
063ae62c and       $7,%ecx
063ae62f or        $0xF0,%cl
063ae632 mov       %cl,(%rax)
063ae634 mov       0x104(%rsp),%eax
063ae63b shr       $0xC,%eax
063ae63e mov       %eax,0x94(%rsp)
063ae645 mov       0xA0(%rsp),%rax
063ae64d mov       0x94(%rsp),%ecx
063ae654 and       $0x3F,%ecx
063ae657 or        $0x80,%cl
063ae65a mov       %cl,(%rax)
063ae65c mov       0x104(%rsp),%eax
063ae663 shr       $6,%eax
063ae666 mov       %eax,0x90(%rsp)
063ae66d mov       0xB0(%rsp),%rax
063ae675 mov       0xA8(%rsp),%rcx
063ae67d mov       0x90(%rsp),%edx
063ae684 and       $0x3F,%edx
063ae687 or        $0x80,%dl
063ae68a mov       %dl,(%rcx)
063ae68c mov       0x104(%rsp),%ecx
063ae693 and       $0x3F,%ecx
063ae696 or        $0x80,%cl
063ae699 mov       %cl,(%rax)
063ae69b mov       0xF0(%rsp),%rdx
063ae6a3 mov       0xF8(%rsp),%rcx
063ae6ab mov       0x108(%rsp),%rax
063ae6b3 mov       %rax,0x190(%rsp)
063ae6bb mov       0x190(%rsp),%r8
063ae6c3 lea       0x63C`CDC8,%r9
063ae6ca call      0x0000`0000`063C`0900
063ae6cf mov       %rax,0x80(%rsp)
063ae6d7 mov       %rdx,0x88(%rsp)
063ae6df jmp       0x0000`0000`063A`E806
063ae6e4 mov       0x118(%rsp),%rax
063ae6ec mov       %rax,0x60(%rsp)
063ae6f1 mov       %rax,0x1C8(%rsp)
063ae6f9 mov       0x118(%rsp),%rax
063ae701 add       $1,%rax
063ae705 mov       %rax,0x68(%rsp)
063ae70a mov       %rax,0x1D0(%rsp)
063ae712 mov       0x118(%rsp),%rax
063ae71a add       $2,%rax
063ae71e mov       %rax,0x70(%rsp)
063ae723 mov       %rax,0x1D8(%rsp)
063ae72b mov       0x104(%rsp),%eax
063ae732 shr       $0xC,%eax
063ae735 mov       %eax,0x7C(%rsp)
063ae739 mov       0x60(%rsp),%rax
063ae73e mov       0x7C(%rsp),%ecx
063ae742 and       $0xF,%ecx
063ae745 or        $0xE0,%cl
063ae748 mov       %cl,(%rax)
063ae74a mov       0x104(%rsp),%eax
063ae751 shr       $6,%eax
063ae754 mov       %eax,0x5C(%rsp)
063ae758 mov       0x70(%rsp),%rax
063ae75d mov       0x68(%rsp),%rcx
063ae762 mov       0x5C(%rsp),%edx
063ae766 and       $0x3F,%edx
063ae769 or        $0x80,%dl
063ae76c mov       %dl,(%rcx)
063ae76e mov       0x104(%rsp),%ecx
063ae775 and       $0x3F,%ecx
063ae778 or        $0x80,%cl
063ae77b mov       %cl,(%rax)
063ae77d jmp       0x0000`0000`063A`E69B
063ae782 mov       0x118(%rsp),%rax
063ae78a mov       %rax,0x48(%rsp)
063ae78f mov       %rax,0x1E0(%rsp)
063ae797 mov       0x118(%rsp),%rax
063ae79f add       $1,%rax
063ae7a3 mov       %rax,0x50(%rsp)
063ae7a8 mov       %rax,0x1E8(%rsp)
063ae7b0 mov       0x104(%rsp),%eax
063ae7b7 shr       $6,%eax
063ae7ba mov       %eax,0x58(%rsp)
063ae7be mov       0x50(%rsp),%rax
063ae7c3 mov       0x48(%rsp),%rcx
063ae7c8 mov       0x58(%rsp),%edx
063ae7cc and       $0x1F,%edx
063ae7cf or        $0xC0,%dl
063ae7d2 mov       %dl,(%rcx)
063ae7d4 mov       0x104(%rsp),%ecx
063ae7db and       $0x3F,%ecx
063ae7de or        $0x80,%cl
063ae7e1 mov       %cl,(%rax)
063ae7e3 jmp       0x0000`0000`063A`E69B
063ae7e8 mov       0x118(%rsp),%rax
063ae7f0 mov       %rax,0x1F0(%rsp)
063ae7f8 mov       0x104(%rsp),%ecx
063ae7ff mov       %cl,(%rax)
063ae801 jmp       0x0000`0000`063A`E69B
063ae806 mov       0x88(%rsp),%rdx
063ae80e mov       0x80(%rsp),%rax
063ae816 add       $0x1F8,%rsp
063ae81d ret
063ae81e lea       0x104(%rsp),%rcx
063ae826 call      0x0000`0000`063C`8980
063ae82b mov       %rax,0x38(%rsp)
063ae830 mov       %rdx,0x40(%rsp)
063ae835 mov       0xF0(%rsp),%rax
063ae83d mov       %rax,0x188(%rsp)
063ae845 lea       0x188(%rsp),%rcx
063ae84d call      0x0000`0000`063C`87D0
063ae852 mov       %rax,0x28(%rsp)
063ae857 mov       %rdx,0x30(%rsp)
063ae85c mov       0x30(%rsp),%rax
063ae861 mov       0x28(%rsp),%rcx
063ae866 mov       0x40(%rsp),%rdx
063ae86b mov       0x38(%rsp),%r8
063ae870 mov       0xC8(%rsp),%r9
063ae878 mov       0xC0(%rsp),%r10
063ae880 mov       %r10,0x158(%rsp)
063ae888 mov       %r9,0x160(%rsp)
063ae890 mov       %r8,0x168(%rsp)
063ae898 mov       %rdx,0x170(%rsp)
063ae8a0 mov       %rcx,0x178(%rsp)
063ae8a8 mov       %rax,0x180(%rsp)
063ae8b0 lea       0x158(%rsp),%r9
063ae8b8 lea       0x128(%rsp),%rcx
063ae8c0 lea       0x63C`CE20,%rdx
063ae8c7 mov       $3,%r8d
063ae8cd movq      $3,0x20(%rsp)
063ae8d6 call      0x0000`0000`063A`D480
063ae8db lea       0x63C`CE50,%rdx
063ae8e2 lea       0x128(%rsp),%rcx
063ae8ea call      0x0000`0000`063B`8F40
063ae8ef ud2

core::char::methods::impl$0::encode_utf8:
063ae910 sub       $0x58,%rsp
063ae914 mov       %ecx,0x44(%rsp)
063ae918 mov       %rdx,0x48(%rsp)
063ae91d mov       %r8,0x50(%rsp)
063ae922 call      0x0000`0000`063A`E460
063ae927 mov       %rax,0x30(%rsp)
063ae92c mov       %rdx,0x38(%rsp)
063ae931 mov       0x38(%rsp),%rdx
063ae936 mov       0x30(%rsp),%rcx
063ae93b call      0x0000`0000`063A`E340
063ae940 mov       %rax,0x20(%rsp)
063ae945 mov       %rdx,0x28(%rsp)
063ae94a mov       0x28(%rsp),%rdx
063ae94f mov       0x20(%rsp),%rax
063ae954 add       $0x58,%rsp
063ae958 ret

core::char::methods::impl$0::from_u32:
063ae960 sub       $0x28,%rsp
063ae964 mov       %ecx,0x24(%rsp)
063ae968 call      0x0000`0000`063A`E410
063ae96d mov       %eax,0x20(%rsp)
063ae971 mov       0x20(%rsp),%eax
063ae975 add       $0x28,%rsp
063ae979 ret

core::char::methods::len_utf8:
063ae980 sub       $0x18,%rsp
063ae984 mov       %ecx,4(%rsp)
063ae988 mov       %ecx,0x14(%rsp)
063ae98c cmp       $0x80,%ecx
063ae992 jb        0x0000`0000`063A`E9A1
063ae994 mov       4(%rsp),%eax
063ae998 cmp       $0x800,%eax
063ae99d jb        0x0000`0000`063A`E9C1
063ae99f jmp       0x0000`0000`063A`E9B4
063ae9a1 movq      $1,8(%rsp)
063ae9aa mov       8(%rsp),%rax
063ae9af add       $0x18,%rsp
063ae9b3 ret
063ae9b4 mov       4(%rsp),%eax
063ae9b8 cmp       $0x1`0000,%eax
063ae9bd jb        0x0000`0000`063A`E9D7
063ae9bf jmp       0x0000`0000`063A`E9CC
063ae9c1 movq      $2,8(%rsp)
063ae9ca jmp       0x0000`0000`063A`E9AA
063ae9cc movq      $4,8(%rsp)
063ae9d5 jmp       0x0000`0000`063A`E9AA
063ae9d7 movq      $3,8(%rsp)
063ae9e0 jmp       0x0000`0000`063A`E9AA

core::hint::unreachable_unchecked:
063ae9f0 ud2

core::iter::traits::iterator::Iterator::map<core::str::iter::SplitTerminator<char>,str,core::str::LinesAnyMap>:
063aea00 sub       $0x88,%rsp
063aea07 mov       %rcx,0x30(%rsp)
063aea0c mov       %rcx,0x28(%rsp)
063aea11 lea       0x38(%rsp),%rcx
063aea16 mov       $0x48,%r8d
063aea1c call      0x0000`0000`063C`AB90
063aea21 mov       0x30(%rsp),%rcx
063aea26 lea       0x38(%rsp),%rdx
063aea2b call      0x0000`0000`063A`EA70
063aea30 mov       0x28(%rsp),%rax
063aea35 add       $0x88,%rsp
063aea3c ret

core::iter::traits::iterator::Iterator::enumerate<core::slice::iter::Iter<u16> >:
063aea40 sub       $0x38,%rsp
063aea44 mov       %rcx,%rax
063aea47 mov       %rax,0x20(%rsp)
063aea4c mov       %rdx,0x28(%rsp)
063aea51 mov       %r8,0x30(%rsp)
063aea56 call      0x0000`0000`063A`EAC0
063aea5b mov       0x20(%rsp),%rax
063aea60 add       $0x38,%rsp
063aea64 ret

core::iter::adapters::map::Map<core::str::iter::SplitTerminator<char>,core::str::LinesAnyMap>::new<core::str::iter::SplitTerminator<char>,core::str::LinesAnyMap>:
063aea70 sub       $0x88,%rsp
063aea77 mov       %rcx,0x28(%rsp)
063aea7c mov       %rcx,0x30(%rsp)
063aea81 lea       0x38(%rsp),%rcx
063aea86 mov       $0x48,%r8d
063aea8c call      0x0000`0000`063C`AB90
063aea91 mov       0x28(%rsp),%rcx
063aea96 lea       0x38(%rsp),%rdx
063aea9b mov       $0x48,%r8d
063aeaa1 call      0x0000`0000`063C`AB90
063aeaa6 mov       0x30(%rsp),%rax
063aeaab add       $0x88,%rsp
063aeab2 ret

core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<u16> >::new<core::slice::iter::Iter<u16> >:
063aeac0 sub       $0x10,%rsp
063aeac4 mov       %rcx,%rax
063aeac7 mov       %rdx,(%rsp)
063aeacb mov       %r8,8(%rsp)
063aead0 mov       %rdx,(%rcx)
063aead3 mov       %r8,8(%rcx)
063aead7 movq      $0,0x10(%rcx)
063aeadf add       $0x10,%rsp
063aeae3 ret

core::slice::impl$0::as_ptr<uefi::data_types::chars::Char16>:
063aeaf0 sub       $0x10,%rsp
063aeaf4 mov       %rcx,%rax
063aeaf7 mov       %rax,(%rsp)
063aeafb mov       %rdx,8(%rsp)
063aeb00 add       $0x10,%rsp
063aeb04 ret

core::slice::index::impl$0::index<u16,core::ops::range::RangeToInclusive<usize> >:
063aeb10 sub       $0x58,%rsp
063aeb14 mov       %r8,0x28(%rsp)
063aeb19 mov       %rdx,%r8
063aeb1c mov       %rcx,%rdx
063aeb1f mov       0x28(%rsp),%rcx
063aeb24 mov       %rdx,0x40(%rsp)
063aeb29 mov       %r8,0x48(%rsp)
063aeb2e mov       %rcx,0x50(%rsp)
063aeb33 call      0x0000`0000`063A`D020
063aeb38 mov       %rax,0x30(%rsp)
063aeb3d mov       %rdx,0x38(%rsp)
063aeb42 mov       0x38(%rsp),%rdx
063aeb47 mov       0x30(%rsp),%rax
063aeb4c add       $0x58,%rsp
063aeb50 ret

core::slice::memchr::memchr:
063aeb60 sub       $0x78,%rsp
063aeb64 mov       %r8,0x28(%rsp)
063aeb69 mov       %rdx,0x30(%rsp)
063aeb6e mov       %cl,0x3F(%rsp)
063aeb72 mov       %rdx,0x68(%rsp)
063aeb77 mov       %r8,0x70(%rsp)
063aeb7c cmp       $0x10,%r8
063aeb80 jb        0x0000`0000`063A`EBA1
063aeb82 mov       0x28(%rsp),%r8
063aeb87 mov       0x30(%rsp),%rdx
063aeb8c mov       0x3F(%rsp),%cl
063aeb90 call      0x0000`0000`063C`0120
063aeb95 mov       %rdx,0x48(%rsp)
063aeb9a mov       %rax,0x40(%rsp)
063aeb9f jmp       0x0000`0000`063A`EBDD
063aeba1 mov       0x28(%rsp),%rdx
063aeba6 mov       0x30(%rsp),%rcx
063aebab call      0x0000`0000`063C`2CD0
063aebb0 mov       %rdx,0x58(%rsp)
063aebb5 mov       %rax,0x50(%rsp)
063aebba lea       0x3F(%rsp),%rax
063aebbf mov       %rax,0x60(%rsp)
063aebc4 mov       0x60(%rsp),%rdx
063aebc9 lea       0x50(%rsp),%rcx
063aebce call      0x0000`0000`063C`9370
063aebd3 mov       %rdx,0x48(%rsp)
063aebd8 mov       %rax,0x40(%rsp)
063aebdd mov       0x40(%rsp),%rax
063aebe2 mov       0x48(%rsp),%rdx
063aebe7 add       $0x78,%rsp
063aebeb ret

enum$<core::option::Option<enum$<log::MaybeStaticStr> >, 0, 1, Some>::map<enum$<log::MaybeStaticStr>,str,log::impl$19::file::closure_env$0>:
063aebf0 sub       $0xA8,%rsp
063aebf7 mov       %rcx,0x38(%rsp)
063aebfc movb      $0,0x9F(%rsp)
063aec04 movb      $1,0x9F(%rsp)
063aec0c mov       (%rcx),%rax
063aec0f add       $0xFFFF`FFFF`FFFF`FFFE,%rax
063aec13 setne     %al
063aec16 movzbl    %al,%eax
063aec19 je        0x0000`0000`063A`EC21
063aec1b jmp       0x0000`0000`063A`EC1D
063aec1d jmp       0x0000`0000`063A`EC2F
063aec1f ud2
063aec21 movq      $0,0x40(%rsp)
063aec2a jmp       0x0000`0000`063A`ECCC
063aec2f mov       0x38(%rsp),%rax
063aec34 mov       (%rax),%rcx
063aec37 mov       %rcx,0x50(%rsp)
063aec3c mov       8(%rax),%rcx
063aec40 mov       %rcx,0x58(%rsp)
063aec45 mov       0x10(%rax),%rax
063aec49 mov       %rax,0x60(%rsp)
063aec4e movb      $0,0x9F(%rsp)
063aec56 mov       0x50(%rsp),%rax
063aec5b mov       %rax,0x80(%rsp)
063aec63 mov       0x58(%rsp),%rax
063aec68 mov       %rax,0x88(%rsp)
063aec70 mov       0x60(%rsp),%rax
063aec75 mov       %rax,0x90(%rsp)
063aec7d mov       0x80(%rsp),%rax
063aec85 mov       %rax,0x68(%rsp)
063aec8a mov       0x88(%rsp),%rax
063aec92 mov       %rax,0x70(%rsp)
063aec97 mov       0x90(%rsp),%rax
063aec9f mov       %rax,0x78(%rsp)
063aeca4 lea       0x68(%rsp),%rcx
063aeca9 call      0x0000`0000`063A`D160
063aecae mov       %rax,0x28(%rsp)
063aecb3 mov       %rdx,0x30(%rsp)
063aecb8 mov       0x30(%rsp),%rax
063aecbd mov       0x28(%rsp),%rcx
063aecc2 mov       %rcx,0x40(%rsp)
063aecc7 mov       %rax,0x48(%rsp)
063aeccc testb     $1,0x9F(%rsp)
063aecd4 jne       0x0000`0000`063A`ECE8
063aecd6 mov       0x40(%rsp),%rax
063aecdb mov       0x48(%rsp),%rdx
063aece0 add       $0xA8,%rsp
063aece7 ret
063aece8 jmp       0x0000`0000`063A`ECD6

enum$<core::option::Option<str>, 1, 18446744073709551615, Some>::map<str,str,ref_mut$<core::str::LinesAnyMap> >:
063aecf0 sub       $0x88,%rsp
063aecf7 mov       %r8,0x30(%rsp)
063aecfc mov       %rcx,0x38(%rsp)
063aed01 mov       %rdx,0x40(%rsp)
063aed06 mov       %r8,0x70(%rsp)
063aed0b movb      $0,0x6F(%rsp)
063aed10 movb      $1,0x6F(%rsp)
063aed15 mov       0x38(%rsp),%rax
063aed1a test      %rax,%rax
063aed1d setne     %al
063aed20 movzbl    %al,%eax
063aed23 je        0x0000`0000`063A`ED2B
063aed25 jmp       0x0000`0000`063A`ED27
063aed27 jmp       0x0000`0000`063A`ED36
063aed29 ud2
063aed2b movq      $0,0x48(%rsp)
063aed34 jmp       0x0000`0000`063A`ED8E
063aed36 mov       0x30(%rsp),%rcx
063aed3b mov       0x38(%rsp),%rdx
063aed40 mov       0x40(%rsp),%rax
063aed45 mov       %rdx,0x78(%rsp)
063aed4a mov       %rax,0x80(%rsp)
063aed52 movb      $0,0x6F(%rsp)
063aed57 mov       %rdx,0x58(%rsp)
063aed5c mov       %rax,0x60(%rsp)
063aed61 mov       0x58(%rsp),%rdx
063aed66 mov       0x60(%rsp),%r8
063aed6b call      0x0000`0000`063A`D660
063aed70 mov       %rax,0x20(%rsp)
063aed75 mov       %rdx,0x28(%rsp)
063aed7a mov       0x28(%rsp),%rax
063aed7f mov       0x20(%rsp),%rcx
063aed84 mov       %rcx,0x48(%rsp)
063aed89 mov       %rax,0x50(%rsp)
063aed8e testb     $1,0x6F(%rsp)
063aed93 jne       0x0000`0000`063A`EDA7
063aed95 mov       0x48(%rsp),%rax
063aed9a mov       0x50(%rsp),%rdx
063aed9f add       $0x88,%rsp
063aeda6 ret
063aeda7 jmp       0x0000`0000`063A`ED95

enum$<core::option::Option<u32> >::map<u32,char,core::str::iter::impl$2::next_back::closure_env$0>:
063aedb0 sub       $0x48,%rsp
063aedb4 mov       %ecx,0x28(%rsp)
063aedb8 mov       %edx,0x2C(%rsp)
063aedbc movb      $0,0x3F(%rsp)
063aedc1 movb      $1,0x3F(%rsp)
063aedc6 mov       0x28(%rsp),%eax
063aedca test      %rax,%rax
063aedcd je        0x0000`0000`063A`EDD5
063aedcf jmp       0x0000`0000`063A`EDD1
063aedd1 jmp       0x0000`0000`063A`EDDF
063aedd3 ud2
063aedd5 movl      $0x11`0000,0x34(%rsp)
063aeddd jmp       0x0000`0000`063A`EE05
063aeddf mov       0x2C(%rsp),%eax
063aede3 mov       %eax,0x44(%rsp)
063aede7 movb      $0,0x3F(%rsp)
063aedec mov       %eax,0x38(%rsp)
063aedf0 mov       0x38(%rsp),%ecx
063aedf4 call      0x0000`0000`063B`0560
063aedf9 mov       %eax,0x24(%rsp)
063aedfd mov       0x24(%rsp),%eax
063aee01 mov       %eax,0x34(%rsp)
063aee05 testb     $1,0x3F(%rsp)
063aee0a jne       0x0000`0000`063A`EE15
063aee0c mov       0x34(%rsp),%eax
063aee10 add       $0x48,%rsp
063aee14 ret
063aee15 jmp       0x0000`0000`063A`EE0C

enum$<core::option::Option<core::ptr::non_null::NonNull<uefi::proto::console::text::output::Output> >, 1, 18446744073709551615, Some>::is_some<core::ptr::non_null::NonNull<uefi::proto::console::text::output::Output> >:
063aee20 sub       $0x10,%rsp
063aee24 mov       %rcx,%rdx
063aee27 mov       %rdx,8(%rsp)
063aee2c mov       $1,%eax
063aee31 xor       %ecx,%ecx
063aee33 cmpq      $0,(%rdx)
063aee37 cmove     %rcx,%rax
063aee3b cmp       $1,%rax
063aee3f jne       0x0000`0000`063A`EE48
063aee41 movb      $1,7(%rsp)
063aee46 jmp       0x0000`0000`063A`EE4D
063aee48 movb      $0,7(%rsp)
063aee4d mov       7(%rsp),%al
063aee51 and       $1,%al
063aee53 movzbl    %al,%eax
063aee56 add       $0x10,%rsp
063aee5a ret

enum$<core::result::Result<tuple$<>,uefi::result::error::Error<tuple$<> > > >::unwrap<tuple$<>,uefi::result::error::Error<tuple$<> > >:
063aee60 sub       $0x58,%rsp
063aee64 mov       %r8,0x30(%rsp)
063aee69 mov       %rcx,0x38(%rsp)
063aee6e mov       %rdx,0x40(%rsp)
063aee73 mov       0x38(%rsp),%rax
063aee78 test      %rax,%rax
063aee7b je        0x0000`0000`063A`EE83
063aee7d jmp       0x0000`0000`063A`EE7F
063aee7f jmp       0x0000`0000`063A`EE88
063aee81 ud2
063aee83 add       $0x58,%rsp
063aee87 ret
063aee88 mov       0x30(%rsp),%rcx
063aee8d mov       0x40(%rsp),%rax
063aee92 mov       %rax,0x48(%rsp)
063aee97 mov       %rsp,%rax
063aee9a mov       %rcx,0x20(%rax)
063aee9e lea       0x63C`CE88,%rcx
063aeea5 lea       0x63C`CE68,%r9
063aeeac mov       $0x2B,%edx
063aeeb1 lea       0x48(%rsp),%r8
063aeeb6 call      0x0000`0000`063B`9550
063aeebb ud2

core::result::Result::unwrap<tuple$<>,core::fmt::Error>:
063aeec0 sub       $0x48,%rsp
063aeec4 mov       %rdx,0x28(%rsp)
063aeec9 and       $1,%cl
063aeecc mov       %cl,0x37(%rsp)
063aeed0 movzbl    0x37(%rsp),%eax
063aeed5 test      $1,%al
063aeed7 je        0x0000`0000`063A`EEDF
063aeed9 jmp       0x0000`0000`063A`EEDB
063aeedb jmp       0x0000`0000`063A`EEE4
063aeedd ud2
063aeedf add       $0x48,%rsp
063aeee3 ret
063aeee4 mov       0x28(%rsp),%rcx
063aeee9 mov       %rsp,%rax
063aeeec mov       %rcx,0x20(%rax)
063aeef0 lea       0x63C`CE88,%rcx
063aeef7 lea       0x63C`CEB8,%r9
063aeefe mov       $0x2B,%edx
063aef03 lea       0x38(%rsp),%r8
063aef08 call      0x0000`0000`063B`9550
063aef0d ud2

enum$<core::result::Result<tuple$<>,enum$<ucs2::Error> >, 0, 1, Err>::map_err<tuple$<>,enum$<ucs2::Error>,core::fmt::Error,uefi::proto::console::text::output::impl$1::write_str::closure_env$3>:
063aef10 sub       $0x38,%rsp
063aef14 mov       %cl,0x24(%rsp)
063aef18 movb      $0,0x27(%rsp)
063aef1d movb      $1,0x27(%rsp)
063aef22 mov       0x24(%rsp),%al
063aef26 add       $0xFE,%al
063aef28 setne     %al
063aef2b movzbl    %al,%eax
063aef2e je        0x0000`0000`063A`EF36
063aef30 jmp       0x0000`0000`063A`EF32
063aef32 jmp       0x0000`0000`063A`EF3D
063aef34 ud2
063aef36 movb      $0,0x25(%rsp)
063aef3b jmp       0x0000`0000`063A`EF66
063aef3d mov       0x24(%rsp),%al
063aef41 mov       %al,%cl
063aef43 and       $1,%cl
063aef46 mov       %cl,0x37(%rsp)
063aef4a movb      $0,0x27(%rsp)
063aef4f and       $1,%al
063aef51 mov       %al,0x26(%rsp)
063aef55 mov       0x26(%rsp),%cl
063aef59 and       $1,%cl
063aef5c call      0x0000`0000`063B`1440
063aef61 movb      $1,0x25(%rsp)
063aef66 testb     $1,0x27(%rsp)
063aef6b jne       0x0000`0000`063A`EF7B
063aef6d mov       0x25(%rsp),%al
063aef71 and       $1,%al
063aef73 movzbl    %al,%eax
063aef76 add       $0x38,%rsp
063aef7a ret
063aef7b jmp       0x0000`0000`063A`EF6D

enum$<core::result::Result<ref$<uefi::data_types::strs::CStr16>,enum$<uefi::data_types::strs::FromSliceWithNulError> > >::map_err<ref$<uefi::data_types::strs::CStr16>,enum$<uefi::data_types::strs::FromSliceWithNulError>,core::fmt::Error,uefi::proto::console::text::output::impl$1::write_str::closure$0::closure_env$0>:
063aef80 sub       $0x78,%rsp
063aef84 mov       %rcx,0x20(%rsp)
063aef89 movb      $0,0x4F(%rsp)
063aef8e movb      $1,0x4F(%rsp)
063aef93 mov       (%rcx),%rax
063aef96 test      %rax,%rax
063aef99 je        0x0000`0000`063A`EFA1
063aef9b jmp       0x0000`0000`063A`EF9D
063aef9d jmp       0x0000`0000`063A`EFC4
063aef9f ud2
063aefa1 mov       0x20(%rsp),%rax
063aefa6 mov       8(%rax),%rcx
063aefaa mov       0x10(%rax),%rax
063aefae mov       %rcx,0x68(%rsp)
063aefb3 mov       %rax,0x70(%rsp)
063aefb8 mov       %rcx,0x28(%rsp)
063aefbd mov       %rax,0x30(%rsp)
063aefc2 jmp       0x0000`0000`063A`F002
063aefc4 mov       0x20(%rsp),%rax
063aefc9 mov       8(%rax),%rcx
063aefcd mov       0x10(%rax),%rax
063aefd1 mov       %rcx,0x58(%rsp)
063aefd6 mov       %rax,0x60(%rsp)
063aefdb movb      $0,0x4F(%rsp)
063aefe0 mov       %rcx,0x38(%rsp)
063aefe5 mov       %rax,0x40(%rsp)
063aefea mov       0x38(%rsp),%rcx
063aefef mov       0x40(%rsp),%rdx
063aeff4 call      0x0000`0000`063B`11E0
063aeff9 movq      $0,0x28(%rsp)
063af002 testb     $1,0x4F(%rsp)
063af007 jne       0x0000`0000`063A`F018
063af009 mov       0x28(%rsp),%rax
063af00e mov       0x30(%rsp),%rdx
063af013 add       $0x78,%rsp
063af017 ret
063af018 jmp       0x0000`0000`063A`F009

core::result::Result::map_err<tuple$<>,core::fmt::Error,enum$<ucs2::Error>,uefi::proto::console::text::output::impl$1::write_str::closure$1::closure_env$0>:
063af020 sub       $0x48,%rsp
063af024 and       $1,%cl
063af027 mov       %cl,0x26(%rsp)
063af02b movb      $0,0x2F(%rsp)
063af030 movb      $1,0x2F(%rsp)
063af035 movzbl    0x26(%rsp),%eax
063af03a test      $1,%al
063af03c je        0x0000`0000`063A`F044
063af03e jmp       0x0000`0000`063A`F040
063af040 jmp       0x0000`0000`063A`F04B
063af042 ud2
063af044 movb      $2,0x27(%rsp)
063af049 jmp       0x0000`0000`063A`F063
063af04b movb      $0,0x2F(%rsp)
063af050 call      0x0000`0000`063B`1360
063af055 mov       %al,0x25(%rsp)
063af059 mov       0x25(%rsp),%al
063af05d and       $1,%al
063af05f mov       %al,0x27(%rsp)
063af063 testb     $1,0x2F(%rsp)
063af068 jne       0x0000`0000`063A`F073
063af06a mov       0x27(%rsp),%al
063af06e add       $0x48,%rsp
063af072 ret
063af073 jmp       0x0000`0000`063A`F06A

enum$<core::result::Result<tuple$<>,uefi::result::error::Error<tuple$<> > > >::map_err<tuple$<>,uefi::result::error::Error<tuple$<> >,core::fmt::Error,uefi::proto::console::text::output::impl$1::write_str::closure$0::closure_env$1>:
063af080 sub       $0x68,%rsp
063af084 mov       %rcx,0x28(%rsp)
063af089 mov       %rdx,0x30(%rsp)
063af08e movb      $0,0x4F(%rsp)
063af093 movb      $1,0x4F(%rsp)
063af098 mov       0x28(%rsp),%rax
063af09d test      %rax,%rax
063af0a0 je        0x0000`0000`063A`F0A8
063af0a2 jmp       0x0000`0000`063A`F0A4
063af0a4 jmp       0x0000`0000`063A`F0AF
063af0a6 ud2
063af0a8 movb      $0,0x3F(%rsp)
063af0ad jmp       0x0000`0000`063A`F0D2
063af0af mov       0x30(%rsp),%rax
063af0b4 mov       %rax,0x60(%rsp)
063af0b9 movb      $0,0x4F(%rsp)
063af0be mov       %rax,0x40(%rsp)
063af0c3 mov       0x40(%rsp),%rcx
063af0c8 call      0x0000`0000`063B`1200
063af0cd movb      $1,0x3F(%rsp)
063af0d2 testb     $1,0x4F(%rsp)
063af0d7 jne       0x0000`0000`063A`F0E7
063af0d9 mov       0x3F(%rsp),%al
063af0dd and       $1,%al
063af0df movzbl    %al,%eax
063af0e2 add       $0x68,%rsp
063af0e6 ret
063af0e7 jmp       0x0000`0000`063A`F0D9

core::convert::num::impl$38::from:
063af0f0 push      %rax
063af0f1 mov       %cl,7(%rsp)
063af0f5 movzbl    %cl,%eax
063af0f8 pop       %rcx
063af0f9 ret

core::convert::num::impl$43::from:
063af100 push      %rax
063af101 mov       %cx,6(%rsp)
063af106 movzwl    %cx,%eax
063af109 pop       %rcx
063af10a ret

core::panicking::assert_failed<uefi::result::status::Status,uefi::result::status::Status>:
063af110 sub       $0x88,%rsp
063af117 mov       %rdx,%rax
063af11a mov       0xB0(%rsp),%rdx
063af122 mov       %rax,0x40(%rsp)
063af127 mov       %r8,0x48(%rsp)
063af12c mov       %cl,0x87(%rsp)
063af133 mov       0x28(%r9),%rax
063af137 mov       %rax,0x78(%rsp)
063af13c mov       0x20(%r9),%rax
063af140 mov       %rax,0x70(%rsp)
063af145 mov       0x18(%r9),%rax
063af149 mov       %rax,0x68(%rsp)
063af14e mov       0x10(%r9),%rax
063af152 mov       %rax,0x60(%rsp)
063af157 mov       (%r9),%rax
063af15a mov       8(%r9),%r8
063af15e mov       %r8,0x58(%rsp)
063af163 mov       %rax,0x50(%rsp)
063af168 mov       %rsp,%rax
063af16b mov       %rdx,0x30(%rax)
063af16f lea       0x50(%rsp),%rdx
063af174 mov       %rdx,0x28(%rax)
063af178 lea       0x63C`CED8,%r8
063af17f mov       %r8,0x20(%rax)
063af183 lea       0x40(%rsp),%rdx
063af188 lea       0x48(%rsp),%r9
063af18d call      0x0000`0000`063B`9020
063af192 ud2

ucs2::encode_with<uefi::proto::console::text::output::impl$1::write_str::closure_env$2>:
063af1a0 sub       $0x168,%rsp
063af1a7 mov       %r8,0xE8(%rsp)
063af1af mov       %rcx,0x108(%rsp)
063af1b7 mov       %rdx,0x110(%rsp)
063af1bf mov       %rcx,0x148(%rsp)
063af1c7 mov       %rdx,0x150(%rsp)
063af1cf mov       %rcx,0x158(%rsp)
063af1d7 mov       %rdx,0x160(%rsp)
063af1df mov       0x158(%rsp),%rcx
063af1e7 mov       %rcx,0xD8(%rsp)
063af1ef mov       0x160(%rsp),%rax
063af1f7 mov       %rax,0xE0(%rsp)
063af1ff mov       %rcx,0x120(%rsp)
063af207 mov       %rax,0x128(%rsp)
063af20f mov       0xE0(%rsp),%rax
063af217 mov       %rax,0x130(%rsp)
063af21f movq      $0,0xF8(%rsp)
063af22b mov       0xE0(%rsp),%rax
063af233 cmp       %rax,0xF8(%rsp)
063af23b jb        0x0000`0000`063A`F24A
063af23d movb      $2,0xF7(%rsp)
063af245 jmp       0x0000`0000`063A`F99D
063af24a mov       0xE0(%rsp),%rcx
063af252 mov       0xF8(%rsp),%rax
063af25a mov       %rax,0xD0(%rsp)
063af262 cmp       %rcx,%rax
063af265 setb      %al
063af268 test      $1,%al
063af26a jne       0x0000`0000`063A`F26E
063af26c jmp       0x0000`0000`063A`F289
063af26e mov       0xD8(%rsp),%rax
063af276 mov       0xD0(%rsp),%rcx
063af27e mov       (%rax,%rcx),%al
063af281 and       $0x80,%al
063af283 cmp       $0,%al
063af285 je        0x0000`0000`063A`F2A7
063af287 jmp       0x0000`0000`063A`F2D2
063af289 mov       0xE0(%rsp),%rdx
063af291 mov       0xD0(%rsp),%rcx
063af299 lea       0x63C`CF50,%r8
063af2a0 call      0x0000`0000`063B`8E90
063af2a5 ud2
063af2a7 mov       0xE0(%rsp),%rcx
063af2af mov       0xF8(%rsp),%rax
063af2b7 mov       %rax,0xC8(%rsp)
063af2bf cmp       %rcx,%rax
063af2c2 setb      %al
063af2c5 test      $1,%al
063af2c7 jne       0x0000`0000`063A`F8B7
063af2cd jmp       0x0000`0000`063A`F8D6
063af2d2 mov       0xE0(%rsp),%rcx
063af2da mov       0xF8(%rsp),%rax
063af2e2 mov       %rax,0xC0(%rsp)
063af2ea cmp       %rcx,%rax
063af2ed setb      %al
063af2f0 test      $1,%al
063af2f2 jne       0x0000`0000`063A`F2F6
063af2f4 jmp       0x0000`0000`063A`F311
063af2f6 mov       0xD8(%rsp),%rax
063af2fe mov       0xC0(%rsp),%rcx
063af306 mov       (%rax,%rcx),%al
063af309 and       $0xE0,%al
063af30b cmp       $0xC0,%al
063af30d je        0x0000`0000`063A`F32F
063af30f jmp       0x0000`0000`063A`F353
063af311 mov       0xE0(%rsp),%rdx
063af319 mov       0xC0(%rsp),%rcx
063af321 lea       0x63C`CF68,%r8
063af328 call      0x0000`0000`063B`8E90
063af32d ud2
063af32f mov       0xF8(%rsp),%rax
063af337 add       $1,%rax
063af33b mov       %rax,0xB8(%rsp)
063af343 setb      %al
063af346 test      $1,%al
063af348 jne       0x0000`0000`063A`F73F
063af34e jmp       0x0000`0000`063A`F728
063af353 mov       0xE0(%rsp),%rcx
063af35b mov       0xF8(%rsp),%rax
063af363 mov       %rax,0xB0(%rsp)
063af36b cmp       %rcx,%rax
063af36e setb      %al
063af371 test      $1,%al
063af373 jne       0x0000`0000`063A`F377
063af375 jmp       0x0000`0000`063A`F392
063af377 mov       0xD8(%rsp),%rax
063af37f mov       0xB0(%rsp),%rcx
063af387 mov       (%rax,%rcx),%al
063af38a and       $0xF0,%al
063af38c cmp       $0xE0,%al
063af38e je        0x0000`0000`063A`F3B0
063af390 jmp       0x0000`0000`063A`F3D1
063af392 mov       0xE0(%rsp),%rdx
063af39a mov       0xB0(%rsp),%rcx
063af3a2 lea       0x63C`CF80,%r8
063af3a9 call      0x0000`0000`063B`8E90
063af3ae ud2
063af3b0 mov       0xF8(%rsp),%rax
063af3b8 add       $2,%rax
063af3bc mov       %rax,0xA8(%rsp)
063af3c4 setb      %al
063af3c7 test      $1,%al
063af3c9 jne       0x0000`0000`063A`F45B
063af3cf jmp       0x0000`0000`063A`F444
063af3d1 mov       0xE0(%rsp),%rcx
063af3d9 mov       0xF8(%rsp),%rax
063af3e1 mov       %rax,0xA0(%rsp)
063af3e9 cmp       %rcx,%rax
063af3ec setb      %al
063af3ef test      $1,%al
063af3f1 jne       0x0000`0000`063A`F3F5
063af3f3 jmp       0x0000`0000`063A`F410
063af3f5 mov       0xD8(%rsp),%rax
063af3fd mov       0xA0(%rsp),%rcx
063af405 mov       (%rax,%rcx),%al
063af408 and       $0xF0,%al
063af40a cmp       $0xF0,%al
063af40c je        0x0000`0000`063A`F42E
063af40e jmp       0x0000`0000`063A`F438
063af410 mov       0xE0(%rsp),%rdx
063af418 mov       0xA0(%rsp),%rcx
063af420 lea       0x63C`CF98,%r8
063af427 call      0x0000`0000`063B`8E90
063af42c ud2
063af42e movb      $1,0xF7(%rsp)
063af436 jmp       0x0000`0000`063A`F43F
063af438 call      0x0000`0000`063A`E9F0
063af43d ud2
063af43f jmp       0x0000`0000`063A`F99D
063af444 mov       0xA8(%rsp),%rax
063af44c mov       0xE0(%rsp),%rcx
063af454 cmp       %rcx,%rax
063af457 jae       0x0000`0000`063A`F492
063af459 jmp       0x0000`0000`063A`F475
063af45b lea       0x63C`C890,%rcx
063af462 lea       0x63C`CFB0,%r8
063af469 mov       $0x1C,%edx
063af46e call      0x0000`0000`063B`8E30
063af473 ud2
063af475 mov       0xF8(%rsp),%rax
063af47d add       $1,%rax
063af481 mov       %rax,0x98(%rsp)
063af489 setb      %al
063af48c test      $1,%al
063af48e jne       0x0000`0000`063A`F4C7
063af490 jmp       0x0000`0000`063A`F4A6
063af492 movb      $1,0x104(%rsp)
063af49a testb     $1,0x104(%rsp)
063af4a2 jne       0x0000`0000`063A`F505
063af4a4 jmp       0x0000`0000`063A`F4E1
063af4a6 mov       0x98(%rsp),%rax
063af4ae mov       0xE0(%rsp),%rcx
063af4b6 cmp       %rcx,%rax
063af4b9 setae     %al
063af4bc and       $1,%al
063af4be mov       %al,0x104(%rsp)
063af4c5 jmp       0x0000`0000`063A`F49A
063af4c7 lea       0x63C`C890,%rcx
063af4ce lea       0x63C`CFC8,%r8
063af4d5 mov       $0x1C,%edx
063af4da call      0x0000`0000`063B`8E30
063af4df ud2
063af4e1 mov       0xE0(%rsp),%rcx
063af4e9 mov       0xF8(%rsp),%rax
063af4f1 mov       %rax,0x90(%rsp)
063af4f9 cmp       %rcx,%rax
063af4fc setb      %al
063af4ff test      $1,%al
063af501 jne       0x0000`0000`063A`F50C
063af503 jmp       0x0000`0000`063A`F539
063af505 call      0x0000`0000`063A`E9F0
063af50a ud2
063af50c mov       0xD8(%rsp),%rax
063af514 mov       0x90(%rsp),%rcx
063af51c mov       (%rax,%rcx),%cl
063af51f and       $0xF,%cl
063af522 call      0x0000`0000`063A`F0F0
063af527 mov       %ax,0x8E(%rsp)
063af52f mov       %ax,0x13C(%rsp)
063af537 jmp       0x0000`0000`063A`F557
063af539 mov       0xE0(%rsp),%rdx
063af541 mov       0x90(%rsp),%rcx
063af549 lea       0x63C`CFE0,%r8
063af550 call      0x0000`0000`063B`8E90
063af555 ud2
063af557 mov       0xF8(%rsp),%rax
063af55f add       $1,%rax
063af563 mov       %rax,0x80(%rsp)
063af56b setb      %al
063af56e test      $1,%al
063af570 jne       0x0000`0000`063A`F58E
063af572 mov       0x80(%rsp),%rax
063af57a mov       0xE0(%rsp),%rcx
063af582 cmp       %rcx,%rax
063af585 setb      %al
063af588 test      $1,%al
063af58a jne       0x0000`0000`063A`F5A8
063af58c jmp       0x0000`0000`063A`F5D2
063af58e lea       0x63C`C890,%rcx
063af595 lea       0x63C`CFF8,%r8
063af59c mov       $0x1C,%edx
063af5a1 call      0x0000`0000`063B`8E30
063af5a6 ud2
063af5a8 mov       0xD8(%rsp),%rax
063af5b0 mov       0x80(%rsp),%rcx
063af5b8 mov       (%rax,%rcx),%cl
063af5bb and       $0x3F,%cl
063af5be call      0x0000`0000`063A`F0F0
063af5c3 mov       %ax,0x7E(%rsp)
063af5c8 mov       %ax,0x13E(%rsp)
063af5d0 jmp       0x0000`0000`063A`F5F0
063af5d2 mov       0xE0(%rsp),%rdx
063af5da mov       0x80(%rsp),%rcx
063af5e2 lea       0x63C`D010,%r8
063af5e9 call      0x0000`0000`063B`8E90
063af5ee ud2
063af5f0 mov       0xF8(%rsp),%rax
063af5f8 add       $2,%rax
063af5fc mov       %rax,0x70(%rsp)
063af601 setb      %al
063af604 test      $1,%al
063af606 jne       0x0000`0000`063A`F621
063af608 mov       0x70(%rsp),%rax
063af60d mov       0xE0(%rsp),%rcx
063af615 cmp       %rcx,%rax
063af618 setb      %al
063af61b test      $1,%al
063af61d jne       0x0000`0000`063A`F63B
063af61f jmp       0x0000`0000`063A`F662
063af621 lea       0x63C`C890,%rcx
063af628 lea       0x63C`D028,%r8
063af62f mov       $0x1C,%edx
063af634 call      0x0000`0000`063B`8E30
063af639 ud2
063af63b mov       0xD8(%rsp),%rax
063af643 mov       0x70(%rsp),%rcx
063af648 mov       (%rax,%rcx),%cl
063af64b and       $0x3F,%cl
063af64e call      0x0000`0000`063A`F0F0
063af653 mov       %ax,0x6E(%rsp)
063af658 mov       %ax,0x140(%rsp)
063af660 jmp       0x0000`0000`063A`F67D
063af662 mov       0xE0(%rsp),%rdx
063af66a mov       0x70(%rsp),%rcx
063af66f lea       0x63C`D040,%r8
063af676 call      0x0000`0000`063B`8E90
063af67b ud2
063af67d mov       0x8E(%rsp),%ax
063af685 shl       $0xC,%ax
063af689 mov       %ax,0x6C(%rsp)
063af68e mov       0x7E(%rsp),%ax
063af693 shl       $6,%ax
063af697 mov       %ax,0x6A(%rsp)
063af69c mov       0x6E(%rsp),%cx
063af6a1 mov       0x6A(%rsp),%dx
063af6a6 mov       0x6C(%rsp),%ax
063af6ab or        %dx,%ax
063af6ae or        %cx,%ax
063af6b1 mov       %ax,0x102(%rsp)
063af6b9 mov       0xF8(%rsp),%rax
063af6c1 add       $3,%rax
063af6c5 mov       %rax,0x60(%rsp)
063af6ca setb      %al
063af6cd test      $1,%al
063af6cf jne       0x0000`0000`063A`F6E0
063af6d1 mov       0x60(%rsp),%rax
063af6d6 mov       %rax,0xF8(%rsp)
063af6de jmp       0x0000`0000`063A`F6FA
063af6e0 lea       0x63C`C890,%rcx
063af6e7 lea       0x63C`D058,%r8
063af6ee mov       $0x1C,%edx
063af6f3 call      0x0000`0000`063B`8E30
063af6f8 ud2
063af6fa mov       0x102(%rsp),%ax
063af702 mov       %ax,0x106(%rsp)
063af70a mov       0x106(%rsp),%dx
063af712 lea       0xE8(%rsp),%rcx
063af71a call      0x0000`0000`063B`1380
063af71f mov       %al,0x5F(%rsp)
063af723 jmp       0x0000`0000`063A`F945
063af728 mov       0xB8(%rsp),%rax
063af730 mov       0xE0(%rsp),%rcx
063af738 cmp       %rcx,%rax
063af73b jae       0x0000`0000`063A`F77A
063af73d jmp       0x0000`0000`063A`F759
063af73f lea       0x63C`C890,%rcx
063af746 lea       0x63C`D070,%r8
063af74d mov       $0x1C,%edx
063af752 call      0x0000`0000`063B`8E30
063af757 ud2
063af759 mov       0xE0(%rsp),%rcx
063af761 mov       0xF8(%rsp),%rax
063af769 mov       %rax,0x50(%rsp)
063af76e cmp       %rcx,%rax
063af771 setb      %al
063af774 test      $1,%al
063af776 jne       0x0000`0000`063A`F781
063af778 jmp       0x0000`0000`063A`F7A8
063af77a call      0x0000`0000`063A`E9F0
063af77f ud2
063af781 mov       0xD8(%rsp),%rax
063af789 mov       0x50(%rsp),%rcx
063af78e mov       (%rax,%rcx),%cl
063af791 and       $0x1F,%cl
063af794 call      0x0000`0000`063A`F0F0
063af799 mov       %ax,0x4E(%rsp)
063af79e mov       %ax,0x142(%rsp)
063af7a6 jmp       0x0000`0000`063A`F7C3
063af7a8 mov       0xE0(%rsp),%rdx
063af7b0 mov       0x50(%rsp),%rcx
063af7b5 lea       0x63C`D088,%r8
063af7bc call      0x0000`0000`063B`8E90
063af7c1 ud2
063af7c3 mov       0xF8(%rsp),%rax
063af7cb add       $1,%rax
063af7cf mov       %rax,0x40(%rsp)
063af7d4 setb      %al
063af7d7 test      $1,%al
063af7d9 jne       0x0000`0000`063A`F7F4
063af7db mov       0x40(%rsp),%rax
063af7e0 mov       0xE0(%rsp),%rcx
063af7e8 cmp       %rcx,%rax
063af7eb setb      %al
063af7ee test      $1,%al
063af7f0 jne       0x0000`0000`063A`F80E
063af7f2 jmp       0x0000`0000`063A`F835
063af7f4 lea       0x63C`C890,%rcx
063af7fb lea       0x63C`D0A0,%r8
063af802 mov       $0x1C,%edx
063af807 call      0x0000`0000`063B`8E30
063af80c ud2
063af80e mov       0xD8(%rsp),%rax
063af816 mov       0x40(%rsp),%rcx
063af81b mov       (%rax,%rcx),%cl
063af81e and       $0x3F,%cl
063af821 call      0x0000`0000`063A`F0F0
063af826 mov       %ax,0x3E(%rsp)
063af82b mov       %ax,0x144(%rsp)
063af833 jmp       0x0000`0000`063A`F850
063af835 mov       0xE0(%rsp),%rdx
063af83d mov       0x40(%rsp),%rcx
063af842 lea       0x63C`D0B8,%r8
063af849 call      0x0000`0000`063B`8E90
063af84e ud2
063af850 mov       0x4E(%rsp),%ax
063af855 shl       $6,%ax
063af859 mov       %ax,0x3C(%rsp)
063af85e mov       0x3E(%rsp),%cx
063af863 mov       0x3C(%rsp),%ax
063af868 or        %cx,%ax
063af86b mov       %ax,0x102(%rsp)
063af873 mov       0xF8(%rsp),%rax
063af87b add       $2,%rax
063af87f mov       %rax,0x30(%rsp)
063af884 setb      %al
063af887 test      $1,%al
063af889 jne       0x0000`0000`063A`F89D
063af88b mov       0x30(%rsp),%rax
063af890 mov       %rax,0xF8(%rsp)
063af898 jmp       0x0000`0000`063A`F6FA
063af89d lea       0x63C`C890,%rcx
063af8a4 lea       0x63C`D0D0,%r8
063af8ab mov       $0x1C,%edx
063af8b0 call      0x0000`0000`063B`8E30
063af8b5 ud2
063af8b7 mov       0xD8(%rsp),%rax
063af8bf mov       0xC8(%rsp),%rcx
063af8c7 mov       (%rax,%rcx),%cl
063af8ca call      0x0000`0000`063A`F0F0
063af8cf mov       %ax,0x2E(%rsp)
063af8d4 jmp       0x0000`0000`063A`F8F4
063af8d6 mov       0xE0(%rsp),%rdx
063af8de mov       0xC8(%rsp),%rcx
063af8e6 lea       0x63C`D0E8,%r8
063af8ed call      0x0000`0000`063B`8E90
063af8f2 ud2
063af8f4 mov       0x2E(%rsp),%ax
063af8f9 mov       %ax,0x102(%rsp)
063af901 mov       0xF8(%rsp),%rax
063af909 add       $1,%rax
063af90d mov       %rax,0x20(%rsp)
063af912 setb      %al
063af915 test      $1,%al
063af917 jne       0x0000`0000`063A`F92B
063af919 mov       0x20(%rsp),%rax
063af91e mov       %rax,0xF8(%rsp)
063af926 jmp       0x0000`0000`063A`F6FA
063af92b lea       0x63C`C890,%rcx
063af932 lea       0x63C`D100,%r8
063af939 mov       $0x1C,%edx
063af93e call      0x0000`0000`063B`8E30
063af943 ud2
063af945 mov       0x5F(%rsp),%cl
063af949 call      0x0000`0000`063C`B080
063af94e mov       %al,0x105(%rsp)
063af955 mov       0x105(%rsp),%al
063af95c add       $0xFE,%al
063af95e setne     %al
063af961 movzbl    %al,%eax
063af964 je        0x0000`0000`063A`F22B
063af96a jmp       0x0000`0000`063A`F96C
063af96c jmp       0x0000`0000`063A`F970
063af96e ud2
063af970 mov       0x105(%rsp),%cl
063af977 mov       %cl,%al
063af979 and       $1,%al
063af97b mov       %al,0x147(%rsp)
063af982 and       $1,%cl
063af985 lea       0x63C`D118,%rdx
063af98c call      0x0000`0000`063C`AE30
063af991 mov       %al,0xF7(%rsp)
063af998 jmp       0x0000`0000`063A`F43F
063af99d mov       0xF7(%rsp),%al
063af9a4 add       $0x168,%rsp
063af9ab ret

core::fmt::impl$0::write_char<uefi::proto::console::text::output::Output>:
063af9b0 sub       $0x38,%rsp
063af9b4 mov       %rcx,0x28(%rsp)
063af9b9 mov       %edx,0x34(%rsp)
063af9bd mov       (%rcx),%rcx
063af9c0 call      0x0000`0000`063A`D300
063af9c5 mov       %al,0x27(%rsp)
063af9c9 mov       0x27(%rsp),%al
063af9cd and       $1,%al
063af9cf movzbl    %al,%eax
063af9d2 add       $0x38,%rsp
063af9d6 ret

core::fmt::impl$0::write_char<uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output> >:
063af9e0 sub       $0x38,%rsp
063af9e4 mov       %rcx,0x28(%rsp)
063af9e9 mov       %edx,0x34(%rsp)
063af9ed mov       (%rcx),%rcx
063af9f0 call      0x0000`0000`063A`D290
063af9f5 mov       %al,0x27(%rsp)
063af9f9 mov       0x27(%rsp),%al
063af9fd and       $1,%al
063af9ff movzbl    %al,%eax
063afa02 add       $0x38,%rsp
063afa06 ret

core::fmt::impl$0::write_fmt<uefi::proto::console::text::output::Output>:
063afa10 sub       $0x68,%rsp
063afa14 mov       %rcx,0x60(%rsp)
063afa19 mov       (%rcx),%rax
063afa1c mov       %rax,0x20(%rsp)
063afa21 lea       0x30(%rsp),%rcx
063afa26 mov       $0x30,%r8d
063afa2c call      0x0000`0000`063C`AB90
063afa31 mov       0x20(%rsp),%rcx
063afa36 lea       0x30(%rsp),%rdx
063afa3b call      0x0000`0000`063A`D370
063afa40 mov       %al,0x2F(%rsp)
063afa44 mov       0x2F(%rsp),%al
063afa48 and       $1,%al
063afa4a movzbl    %al,%eax
063afa4d add       $0x68,%rsp
063afa51 ret

core::fmt::impl$0::write_fmt<uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output> >:
063afa60 sub       $0x68,%rsp
063afa64 mov       %rcx,0x60(%rsp)
063afa69 mov       (%rcx),%rax
063afa6c mov       %rax,0x20(%rsp)
063afa71 lea       0x30(%rsp),%rcx
063afa76 mov       $0x30,%r8d
063afa7c call      0x0000`0000`063C`AB90
063afa81 mov       0x20(%rsp),%rcx
063afa86 lea       0x30(%rsp),%rdx
063afa8b call      0x0000`0000`063A`D3C0
063afa90 mov       %al,0x2F(%rsp)
063afa94 mov       0x2F(%rsp),%al
063afa98 and       $1,%al
063afa9a movzbl    %al,%eax
063afa9d add       $0x68,%rsp
063afaa1 ret

core::fmt::impl$0::write_str<uefi::proto::console::text::output::Output>:
063afab0 sub       $0x48,%rsp
063afab4 mov       %rcx,0x30(%rsp)
063afab9 mov       %rdx,0x38(%rsp)
063afabe mov       %r8,0x40(%rsp)
063afac3 mov       (%rcx),%rcx
063afac6 call      0x0000`0000`063B`0EB0
063afacb mov       %al,0x2F(%rsp)
063afacf mov       0x2F(%rsp),%al
063afad3 and       $1,%al
063afad5 movzbl    %al,%eax
063afad8 add       $0x48,%rsp
063afadc ret

core::fmt::impl$0::write_str<uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output> >:
063afae0 sub       $0x48,%rsp
063afae4 mov       %rcx,0x30(%rsp)
063afae9 mov       %rdx,0x38(%rsp)
063afaee mov       %r8,0x40(%rsp)
063afaf3 mov       (%rcx),%rcx
063afaf6 call      0x0000`0000`063B`1770
063afafb mov       %al,0x2F(%rsp)
063afaff mov       0x2F(%rsp),%al
063afb03 and       $1,%al
063afb05 movzbl    %al,%eax
063afb08 add       $0x48,%rsp
063afb0c ret

core::convert::impl$3::into<uefi::result::status::Status,uefi::result::error::Error<tuple$<> > >:
063afb10 sub       $0x38,%rsp
063afb14 mov       %rcx,0x30(%rsp)
063afb19 call      0x0000`0000`063B`0930
063afb1e mov       %rax,0x28(%rsp)
063afb23 mov       0x28(%rsp),%rax
063afb28 add       $0x38,%rsp
063afb2c ret

core::convert::impl$3::into<uefi::result::status::Status,enum$<core::result::Result<tuple$<>,uefi::result::error::Error<tuple$<> > > > >:
063afb30 sub       $0x38,%rsp
063afb34 mov       %rcx,0x30(%rsp)
063afb39 call      0x0000`0000`063B`0AE0
063afb3e mov       %rax,0x20(%rsp)
063afb43 mov       %rdx,0x28(%rsp)
063afb48 mov       0x28(%rsp),%rdx
063afb4d mov       0x20(%rsp),%rax
063afb52 add       $0x38,%rsp
063afb56 ret

core::str::pattern::impl$3::into_searcher:
063afb60 push      %rsi
063afb61 sub       $0x90,%rsp
063afb68 mov       %r9,0x30(%rsp)
063afb6d mov       %r8,0x38(%rsp)
063afb72 mov       %edx,0x54(%rsp)
063afb76 mov       %rcx,0x40(%rsp)
063afb7b mov       %rcx,0x48(%rsp)
063afb80 mov       %edx,0x74(%rsp)
063afb84 mov       %r8,0x78(%rsp)
063afb89 mov       %r9,0x80(%rsp)
063afb91 lea       0x6C(%rsp),%rcx
063afb96 xor       %edx,%edx
063afb98 mov       $4,%r8d
063afb9e call      0x0000`0000`063C`AB00
063afba3 mov       0x54(%rsp),%ecx
063afba7 lea       0x6C(%rsp),%rdx
063afbac mov       $4,%r8d
063afbb2 call      0x0000`0000`063A`E910
063afbb7 mov       %rax,0x58(%rsp)
063afbbc mov       %rdx,0x60(%rsp)
063afbc1 mov       0x60(%rsp),%rdx
063afbc6 mov       0x58(%rsp),%rcx
063afbcb call      0x0000`0000`063A`DDC0
063afbd0 mov       %rax,0x28(%rsp)
063afbd5 mov       %rax,0x88(%rsp)
063afbdd mov       0x30(%rsp),%rdx
063afbe2 mov       0x38(%rsp),%rcx
063afbe7 call      0x0000`0000`063A`DDC0
063afbec mov       %rax,0x20(%rsp)
063afbf1 mov       0x48(%rsp),%rax
063afbf6 mov       0x40(%rsp),%rcx
063afbfb mov       0x28(%rsp),%rdx
063afc00 mov       0x54(%rsp),%r8d
063afc05 mov       0x20(%rsp),%r9
063afc0a mov       0x30(%rsp),%r10
063afc0f mov       0x38(%rsp),%r11
063afc14 mov       0x6C(%rsp),%esi
063afc18 mov       %esi,0x70(%rsp)
063afc1c mov       %r11,(%rcx)
063afc1f mov       %r10,8(%rcx)
063afc23 movq      $0,0x10(%rcx)
063afc2b mov       %r9,0x18(%rcx)
063afc2f mov       %r8d,0x28(%rcx)
063afc33 mov       %rdx,0x20(%rcx)
063afc37 mov       0x70(%rsp),%edx
063afc3b mov       %edx,0x2C(%rcx)
063afc3e add       $0x90,%rsp
063afc45 pop       %rsi
063afc46 ret

core::convert::impl$6::try_into<u32,char>:
063afc50 sub       $0x28,%rsp
063afc54 mov       %ecx,0x24(%rsp)
063afc58 call      0x0000`0000`063A`E3F0
063afc5d mov       %eax,0x20(%rsp)
063afc61 mov       0x20(%rsp),%eax
063afc65 add       $0x28,%rsp
063afc69 ret

core::convert::impl$6::try_into<char,uefi::data_types::chars::Char16>:
063afc70 sub       $0x28,%rsp
063afc74 mov       %ecx,0x24(%rsp)
063afc78 call      0x0000`0000`063B`0580
063afc7d mov       %ax,0x20(%rsp)
063afc82 mov       %dx,0x22(%rsp)
063afc87 mov       0x22(%rsp),%dx
063afc8c mov       0x20(%rsp),%ax
063afc91 add       $0x28,%rsp
063afc95 ret

core::convert::impl$6::try_into<u16,uefi::data_types::chars::Char16>:
063afca0 sub       $0x28,%rsp
063afca4 mov       %cx,0x26(%rsp)
063afca9 call      0x0000`0000`063B`05D0
063afcae mov       %ax,0x22(%rsp)
063afcb3 mov       %dx,0x24(%rsp)
063afcb8 mov       0x24(%rsp),%dx
063afcbd mov       0x22(%rsp),%ax
063afcc2 add       $0x28,%rsp
063afcc6 ret

core::iter::traits::collect::impl$0::into_iter<core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<u16> > >:
063afcd0 mov       %rcx,%rax
063afcd3 mov       (%rdx),%r8
063afcd6 mov       %r8,(%rcx)
063afcd9 mov       8(%rdx),%r8
063afcdd mov       %r8,8(%rcx)
063afce1 mov       0x10(%rdx),%rdx
063afce5 mov       %rdx,0x10(%rcx)
063afce9 ret

core::iter::traits::collect::impl$0::into_iter<core::str::iter::Lines>:
063afcf0 sub       $0x28,%rsp
063afcf4 mov       %rcx,%rax
063afcf7 mov       %rax,0x20(%rsp)
063afcfc mov       $0x48,%r8d
063afd02 call      0x0000`0000`063C`AB90
063afd07 mov       0x20(%rsp),%rax
063afd0c add       $0x28,%rsp
063afd10 ret

core::option::impl$35::branch<ref$<u16> >:
063afd20 sub       $0x18,%rsp
063afd24 mov       %rcx,(%rsp)
063afd28 mov       (%rsp),%rax
063afd2c test      %rax,%rax
063afd2f setne     %al
063afd32 movzbl    %al,%eax
063afd35 je        0x0000`0000`063A`FD3D
063afd37 jmp       0x0000`0000`063A`FD39
063afd39 jmp       0x0000`0000`063A`FD48
063afd3b ud2
063afd3d movq      $0,8(%rsp)
063afd46 jmp       0x0000`0000`063A`FD56
063afd48 mov       (%rsp),%rax
063afd4c mov       %rax,0x10(%rsp)
063afd51 mov       %rax,8(%rsp)
063afd56 mov       8(%rsp),%rax
063afd5b add       $0x18,%rsp
063afd5f ret

core::result::impl$27::branch<ref$<uefi::data_types::strs::CStr16>,core::fmt::Error>:
063afd60 sub       $0x40,%rsp
063afd64 mov       %rcx,(%rsp)
063afd68 mov       %rdx,8(%rsp)
063afd6d mov       (%rsp),%rax
063afd71 test      %rax,%rax
063afd74 sete      %al
063afd77 movzbl    %al,%eax
063afd7a jne       0x0000`0000`063A`FD82
063afd7c jmp       0x0000`0000`063A`FD7E
063afd7e jmp       0x0000`0000`063A`FDA1
063afd80 ud2
063afd82 mov       (%rsp),%rcx
063afd86 mov       8(%rsp),%rax
063afd8b mov       %rcx,0x30(%rsp)
063afd90 mov       %rax,0x38(%rsp)
063afd95 mov       %rcx,0x10(%rsp)
063afd9a mov       %rax,0x18(%rsp)
063afd9f jmp       0x0000`0000`063A`FDAA
063afda1 movq      $0,0x10(%rsp)
063afdaa mov       0x10(%rsp),%rax
063afdaf mov       0x18(%rsp),%rdx
063afdb4 add       $0x40,%rsp
063afdb8 ret

core::str::iter::impl$30::next:
063afdc0 sub       $0x38,%rsp
063afdc4 mov       %rcx,0x30(%rsp)
063afdc9 call      0x0000`0000`063A`CC50
063afdce mov       %rax,0x20(%rsp)
063afdd3 mov       %rdx,0x28(%rsp)
063afdd8 mov       0x28(%rsp),%rdx
063afddd mov       0x20(%rsp),%rax
063afde2 add       $0x38,%rsp
063afde6 ret

core::str::pattern::impl$0::next_match:
063afdf0 sub       $0x1D8,%rsp
063afdf7 mov       %rdx,0xA8(%rsp)
063afdff mov       %rcx,0xB0(%rsp)
063afe07 mov       %rcx,0xB8(%rsp)
063afe0f mov       %rdx,0x150(%rsp)
063afe17 mov       0xA8(%rsp),%rax
063afe1f mov       (%rax),%rcx
063afe22 mov       8(%rax),%rax
063afe26 mov       %rcx,0x1B8(%rsp)
063afe2e mov       %rax,0x1C0(%rsp)
063afe36 mov       %rcx,0x1C8(%rsp)
063afe3e mov       %rax,0x1D0(%rsp)
063afe46 mov       0x1C8(%rsp),%rax
063afe4e mov       %rax,0x98(%rsp)
063afe56 mov       0x1D0(%rsp),%rax
063afe5e mov       %rax,0xA0(%rsp)
063afe66 mov       0xA0(%rsp),%rdx
063afe6e mov       0x98(%rsp),%rcx
063afe76 mov       0xA8(%rsp),%rax
063afe7e mov       0x10(%rax),%r8
063afe82 mov       0x18(%rax),%rax
063afe86 mov       %r8,0xD0(%rsp)
063afe8e mov       %rax,0xD8(%rsp)
063afe96 mov       0xD0(%rsp),%r8
063afe9e mov       0xD8(%rsp),%r9
063afea6 call      0x0000`0000`063C`2910
063afeab mov       %rax,0x88(%rsp)
063afeb3 mov       %rdx,0x90(%rsp)
063afebb mov       0x90(%rsp),%rdx
063afec3 mov       0x88(%rsp),%rcx
063afecb call      0x0000`0000`063B`8BF0
063afed0 mov       %rdx,0xC8(%rsp)
063afed8 mov       %rax,0xC0(%rsp)
063afee0 mov       0xC0(%rsp),%rax
063afee8 test      %rax,%rax
063afeeb sete      %al
063afeee movzbl    %al,%eax
063afef1 jne       0x0000`0000`063A`FEF9
063afef3 jmp       0x0000`0000`063A`FEF5
063afef5 jmp       0x0000`0000`063A`FF60
063afef7 ud2
063afef9 mov       0xA8(%rsp),%rax
063aff01 mov       0xC0(%rsp),%rdx
063aff09 mov       %rdx,0x68(%rsp)
063aff0e mov       0xC8(%rsp),%rcx
063aff16 mov       %rcx,0x70(%rsp)
063aff1b mov       %rdx,0x160(%rsp)
063aff23 mov       %rcx,0x168(%rsp)
063aff2b mov       %rdx,0x170(%rsp)
063aff33 mov       %rcx,0x178(%rsp)
063aff3b mov       %rax,%rcx
063aff3e add       $0x2C,%rcx
063aff42 mov       %rcx,0x78(%rsp)
063aff47 mov       0x20(%rax),%rax
063aff4b sub       $1,%rax
063aff4f mov       %rax,0x80(%rsp)
063aff57 setb      %al
063aff5a test      $1,%al
063aff5c jne       0x0000`0000`063A`FF9B
063aff5e jmp       0x0000`0000`063A`FF7D
063aff60 mov       0xB0(%rsp),%rcx
063aff68 call      0x0000`0000`063B`8CD0
063aff6d mov       0xB8(%rsp),%rax
063aff75 add       $0x1D8,%rsp
063aff7c ret
063aff7d mov       0x80(%rsp),%r8
063aff85 mov       0x78(%rsp),%rcx
063aff8a mov       $4,%edx
063aff8f call      0x0000`0000`063C`2AC0
063aff94 mov       %rax,0x60(%rsp)
063aff99 jmp       0x0000`0000`063A`FFB5
063aff9b lea       0x63C`C7D0,%rcx
063affa2 lea       0x63C`D1B0,%r8
063affa9 mov       $0x21,%edx
063affae call      0x0000`0000`063B`8E30
063affb3 ud2
063affb5 mov       0x70(%rsp),%r8
063affba mov       0x68(%rsp),%rdx
063affbf mov       0x60(%rsp),%rax
063affc4 mov       (%rax),%cl
063affc6 mov       %cl,0x187(%rsp)
063affcd call      0x0000`0000`063A`EB60
063affd2 mov       %rdx,0xE8(%rsp)
063affda mov       %rax,0xE0(%rsp)
063affe2 cmpq      $1,0xE0(%rsp)
063affeb jne       0x0000`0000`063B`000F
063affed mov       0xE8(%rsp),%rax
063afff5 mov       %rax,0x188(%rsp)
063afffd add       $1,%rax
063b0001 mov       %rax,0x58(%rsp)
063b0006 setb      %al
063b0009 test      $1,%al
063b000b jne       0x0000`0000`063B`0052
063b000d jmp       0x0000`0000`063B`0033
063b000f mov       0xB0(%rsp),%rax
063b0017 mov       0xA8(%rsp),%rcx
063b001f mov       0x18(%rcx),%rdx
063b0023 mov       %rdx,0x10(%rcx)
063b0027 movq      $0,(%rax)
063b002e jmp       0x0000`0000`063A`FF6D
063b0033 mov       0xA8(%rsp),%rcx
063b003b mov       0x58(%rsp),%rax
063b0040 add       0x10(%rcx),%rax
063b0044 mov       %rax,0x50(%rsp)
063b0049 setb      %al
063b004c test      $1,%al
063b004e jne       0x0000`0000`063B`008C
063b0050 jmp       0x0000`0000`063B`006C
063b0052 lea       0x63C`C890,%rcx
063b0059 lea       0x63C`D1C8,%r8
063b0060 mov       $0x1C,%edx
063b0065 call      0x0000`0000`063B`8E30
063b006a ud2
063b006c mov       0xA8(%rsp),%rcx
063b0074 mov       0x50(%rsp),%rax
063b0079 mov       %rax,0x10(%rcx)
063b007d mov       0x10(%rcx),%rax
063b0081 cmp       0x20(%rcx),%rax
063b0085 jae       0x0000`0000`063B`00A6
063b0087 jmp       0x0000`0000`063A`FE17
063b008c lea       0x63C`C890,%rcx
063b0093 lea       0x63C`D1E0,%r8
063b009a mov       $0x1C,%edx
063b009f call      0x0000`0000`063B`8E30
063b00a4 ud2
063b00a6 mov       0xA8(%rsp),%rcx
063b00ae mov       0x10(%rcx),%rax
063b00b2 sub       0x20(%rcx),%rax
063b00b6 mov       %rax,0x48(%rsp)
063b00bb setb      %al
063b00be test      $1,%al
063b00c0 jne       0x0000`0000`063B`011A
063b00c2 mov       0xA8(%rsp),%rax
063b00ca mov       0x48(%rsp),%rcx
063b00cf mov       %rcx,0x190(%rsp)
063b00d7 mov       (%rax),%rcx
063b00da mov       8(%rax),%rax
063b00de mov       %rcx,0x198(%rsp)
063b00e6 mov       %rax,0x1A0(%rsp)
063b00ee mov       %rcx,0x1A8(%rsp)
063b00f6 mov       %rax,0x1B0(%rsp)
063b00fe mov       0x1A8(%rsp),%rax
063b0106 mov       %rax,0x38(%rsp)
063b010b mov       0x1B0(%rsp),%rax
063b0113 mov       %rax,0x40(%rsp)
063b0118 jmp       0x0000`0000`063B`0134
063b011a lea       0x63C`C7D0,%rcx
063b0121 lea       0x63C`D1F8,%r8
063b0128 mov       $0x21,%edx
063b012d call      0x0000`0000`063B`8E30
063b0132 ud2
063b0134 mov       0x40(%rsp),%rdx
063b0139 mov       0x38(%rsp),%rcx
063b013e mov       0x48(%rsp),%r8
063b0143 mov       0xA8(%rsp),%rax
063b014b mov       0x10(%rax),%rax
063b014f mov       %r8,0x100(%rsp)
063b0157 mov       %rax,0x108(%rsp)
063b015f mov       0x100(%rsp),%r8
063b0167 mov       0x108(%rsp),%r9
063b016f call      0x0000`0000`063C`2910
063b0174 mov       %rdx,0xF8(%rsp)
063b017c mov       %rax,0xF0(%rsp)
063b0184 mov       $1,%eax
063b0189 xor       %ecx,%ecx
063b018b cmpq      $0,0xF0(%rsp)
063b0194 cmove     %rcx,%rax
063b0198 cmp       $1,%rax
063b019c jne       0x0000`0000`063A`FE17
063b01a2 mov       0xA8(%rsp),%rax
063b01aa mov       0xF0(%rsp),%rdx
063b01b2 mov       0xF8(%rsp),%rcx
063b01ba mov       %rdx,0x110(%rsp)
063b01c2 mov       %rcx,0x118(%rsp)
063b01ca mov       %rax,%rcx
063b01cd add       $0x2C,%rcx
063b01d1 mov       0x20(%rax),%rax
063b01d5 movq      $0,0x130(%rsp)
063b01e1 mov       %rax,0x138(%rsp)
063b01e9 mov       0x130(%rsp),%rdx
063b01f1 mov       0x138(%rsp),%r8
063b01f9 lea       0x63C`D210,%r9
063b0200 call      0x0000`0000`063B`6A80
063b0205 mov       %rax,0x28(%rsp)
063b020a mov       %rdx,0x30(%rsp)
063b020f mov       0x30(%rsp),%rax
063b0214 mov       0x28(%rsp),%rcx
063b0219 mov       %rcx,0x120(%rsp)
063b0221 mov       %rax,0x128(%rsp)
063b0229 lea       0x110(%rsp),%rcx
063b0231 lea       0x120(%rsp),%rdx
063b0239 call      0x0000`0000`063B`6790
063b023e mov       %al,0x27(%rsp)
063b0242 mov       0x27(%rsp),%al
063b0246 test      $1,%al
063b0248 jne       0x0000`0000`063B`024F
063b024a jmp       0x0000`0000`063A`FE17
063b024f mov       0xB0(%rsp),%rax
063b0257 mov       0x48(%rsp),%rdx
063b025c mov       0xA8(%rsp),%rcx
063b0264 mov       0x10(%rcx),%rcx
063b0268 mov       %rdx,0x140(%rsp)
063b0270 mov       %rcx,0x148(%rsp)
063b0278 mov       0x140(%rsp),%rdx
063b0280 mov       0x148(%rsp),%rcx
063b0288 mov       %rdx,8(%rax)
063b028c mov       %rcx,0x10(%rax)
063b0290 movq      $1,(%rax)
063b0297 jmp       0x0000`0000`063A`FF6D

core::str::pattern::impl$0::haystack:
063b02a0 push      %rax
063b02a1 mov       %rcx,(%rsp)
063b02a5 mov       (%rcx),%rax
063b02a8 mov       8(%rcx),%rdx
063b02ac pop       %rcx
063b02ad ret

core::option::impl$36::from_residual<tuple$<usize,ref$<u16> > >:
063b02b0 sub       $0x18,%rsp
063b02b4 movq      $0,8(%rsp)
063b02bd mov       (%rsp),%rax
063b02c1 mov       8(%rsp),%rdx
063b02c6 add       $0x18,%rsp
063b02ca ret

core::str::impl$4::call:
063b02d0 sub       $0xE8,%rsp
063b02d7 mov       %rdx,0x70(%rsp)
063b02dc mov       %r8,0x78(%rsp)
063b02e1 mov       %rcx,0xA8(%rsp)
063b02e9 mov       0x70(%rsp),%rcx
063b02ee mov       %rcx,0x58(%rsp)
063b02f3 mov       0x78(%rsp),%rdx
063b02f8 mov       %rdx,0x60(%rsp)
063b02fd mov       %rcx,0xB0(%rsp)
063b0305 mov       %rdx,0xB8(%rsp)
063b030d call      0x0000`0000`063A`DDC0
063b0312 mov       %rax,0x68(%rsp)
063b0317 mov       %rax,0xC0(%rsp)
063b031f mov       0x68(%rsp),%rax
063b0324 cmp       $0,%rax
063b0328 ja        0x0000`0000`063B`0337
063b032a movb      $0,0x97(%rsp)
063b0332 jmp       0x0000`0000`063B`03F4
063b0337 mov       0x60(%rsp),%rax
063b033c mov       0x58(%rsp),%rcx
063b0341 mov       %rcx,0xC8(%rsp)
063b0349 mov       %rax,0xD0(%rsp)
063b0351 mov       %rcx,0xD8(%rsp)
063b0359 mov       %rax,0xE0(%rsp)
063b0361 mov       0xD8(%rsp),%rax
063b0369 mov       %rax,0x48(%rsp)
063b036e mov       0xE0(%rsp),%rax
063b0376 mov       %rax,0x50(%rsp)
063b037b mov       0x68(%rsp),%rax
063b0380 sub       $1,%rax
063b0384 mov       %rax,0x40(%rsp)
063b0389 setb      %al
063b038c test      $1,%al
063b038e jne       0x0000`0000`063B`03A6
063b0390 mov       0x40(%rsp),%rax
063b0395 mov       0x50(%rsp),%rcx
063b039a cmp       %rcx,%rax
063b039d setb      %al
063b03a0 test      $1,%al
063b03a2 jne       0x0000`0000`063B`03C0
063b03a4 jmp       0x0000`0000`063B`03DC
063b03a6 lea       0x63C`C7D0,%rcx
063b03ad lea       0x63C`D2A0,%r8
063b03b4 mov       $0x21,%edx
063b03b9 call      0x0000`0000`063B`8E30
063b03be ud2
063b03c0 mov       0x48(%rsp),%rax
063b03c5 mov       0x40(%rsp),%rcx
063b03ca cmpb      $0xD,(%rax,%rcx)
063b03ce sete      %al
063b03d1 and       $1,%al
063b03d3 mov       %al,0x97(%rsp)
063b03da jmp       0x0000`0000`063B`03F4
063b03dc mov       0x50(%rsp),%rdx
063b03e1 mov       0x40(%rsp),%rcx
063b03e6 lea       0x63C`D2B8,%r8
063b03ed call      0x0000`0000`063B`8E90
063b03f2 ud2
063b03f4 testb     $1,0x97(%rsp)
063b03fc jne       0x0000`0000`063B`041D
063b03fe mov       0x60(%rsp),%rax
063b0403 mov       0x58(%rsp),%rcx
063b0408 mov       %rcx,0x80(%rsp)
063b0410 mov       %rax,0x88(%rsp)
063b0418 jmp       0x0000`0000`063B`04B6
063b041d mov       0x68(%rsp),%rax
063b0422 sub       $1,%rax
063b0426 mov       %rax,0x38(%rsp)
063b042b setb      %al
063b042e test      $1,%al
063b0430 jne       0x0000`0000`063B`0482
063b0432 mov       0x60(%rsp),%rdx
063b0437 mov       0x58(%rsp),%rcx
063b043c mov       0x38(%rsp),%rax
063b0441 movq      $0,0x98(%rsp)
063b044d mov       %rax,0xA0(%rsp)
063b0455 mov       0x98(%rsp),%r8
063b045d mov       0xA0(%rsp),%r9
063b0465 lea       0x63C`D2E8,%rax
063b046c mov       %rax,0x20(%rsp)
063b0471 call      0x0000`0000`063C`4C60
063b0476 mov       %rax,0x28(%rsp)
063b047b mov       %rdx,0x30(%rsp)
063b0480 jmp       0x0000`0000`063B`049C
063b0482 lea       0x63C`C7D0,%rcx
063b0489 lea       0x63C`D2D0,%r8
063b0490 mov       $0x21,%edx
063b0495 call      0x0000`0000`063B`8E30
063b049a ud2
063b049c mov       0x30(%rsp),%rax
063b04a1 mov       0x28(%rsp),%rcx
063b04a6 mov       %rcx,0x80(%rsp)
063b04ae mov       %rax,0x88(%rsp)
063b04b6 mov       0x80(%rsp),%rax
063b04be mov       0x88(%rsp),%rdx
063b04c6 add       $0xE8,%rsp
063b04cd ret

core::str::impl$5::call_mut:
063b04d0 sub       $0x68,%rsp
063b04d4 mov       %rdx,0x30(%rsp)
063b04d9 mov       %r8,0x38(%rsp)
063b04de mov       %rcx,0x50(%rsp)
063b04e3 mov       0x30(%rsp),%rdx
063b04e8 mov       0x38(%rsp),%rax
063b04ed mov       %rdx,0x58(%rsp)
063b04f2 mov       %rax,0x60(%rsp)
063b04f7 mov       %rdx,0x40(%rsp)
063b04fc mov       %rax,0x48(%rsp)
063b0501 mov       0x40(%rsp),%rdx
063b0506 mov       0x48(%rsp),%r8
063b050b call      0x0000`0000`063B`02D0
063b0510 mov       %rax,0x20(%rsp)
063b0515 mov       %rdx,0x28(%rsp)
063b051a mov       0x28(%rsp),%rdx
063b051f mov       0x20(%rsp),%rax
063b0524 add       $0x68,%rsp
063b0528 ret

core::str::iter::impl$2::next_back:
063b0530 sub       $0x38,%rsp
063b0534 mov       %rcx,0x30(%rsp)
063b0539 call      0x0000`0000`063A`DA30
063b053e mov       %eax,0x28(%rsp)
063b0542 mov       %edx,0x2C(%rsp)
063b0546 mov       0x2C(%rsp),%edx
063b054a mov       0x28(%rsp),%ecx
063b054e call      0x0000`0000`063A`EDB0
063b0553 mov       %eax,0x24(%rsp)
063b0557 mov       0x24(%rsp),%eax
063b055b add       $0x38,%rsp
063b055f ret

core::str::iter::impl$2::next_back::closure$0:
063b0560 sub       $0x38,%rsp
063b0564 mov       %ecx,0x34(%rsp)
063b0568 call      0x0000`0000`063A`E3C0
063b056d mov       %eax,0x2C(%rsp)
063b0571 mov       0x2C(%rsp),%eax
063b0575 add       $0x38,%rsp
063b0579 ret

uefi::data_types::chars::impl$6::try_from:
063b0580 sub       $0x18,%rsp
063b0584 mov       %ecx,4(%rsp)
063b0588 mov       %ecx,0x10(%rsp)
063b058c mov       %ecx,0x14(%rsp)
063b0590 cmp       $0xFFFF,%ecx
063b0596 jbe       0x0000`0000`063B`05A1
063b0598 movw      $1,8(%rsp)
063b059f jmp       0x0000`0000`063B`05BB
063b05a1 mov       4(%rsp),%eax
063b05a5 mov       %ax,0xE(%rsp)
063b05aa mov       0xE(%rsp),%ax
063b05af mov       %ax,0xA(%rsp)
063b05b4 movw      $0,8(%rsp)
063b05bb mov       8(%rsp),%ax
063b05c0 mov       0xA(%rsp),%dx
063b05c5 add       $0x18,%rsp
063b05c9 ret

uefi::data_types::chars::impl$8::try_from:
063b05d0 sub       $0x38,%rsp
063b05d4 mov       %cx,0x32(%rsp)
063b05d9 call      0x0000`0000`063A`F100
063b05de mov       %eax,0x24(%rsp)
063b05e2 mov       0x24(%rsp),%ecx
063b05e6 call      0x0000`0000`063A`FC50
063b05eb mov       %eax,0x2C(%rsp)
063b05ef mov       0x2C(%rsp),%edx
063b05f3 sub       $0x11`0000,%edx
063b05f9 xor       %eax,%eax
063b05fb mov       $1,%ecx
063b0600 cmp       $0,%edx
063b0603 cmove     %rcx,%rax
063b0607 cmp       $0,%rax
063b060b jne       0x0000`0000`063B`0626
063b060d mov       0x2C(%rsp),%ecx
063b0611 mov       %ecx,0x34(%rsp)
063b0615 call      0x0000`0000`063A`FC70
063b061a mov       %dx,0x2A(%rsp)
063b061f mov       %ax,0x28(%rsp)
063b0624 jmp       0x0000`0000`063B`062D
063b0626 movw      $1,0x28(%rsp)
063b062d mov       0x28(%rsp),%ax
063b0632 mov       0x2A(%rsp),%dx
063b0637 add       $0x38,%rsp
063b063b ret

uefi::data_types::strs::CStr16::from_u16_with_nul:
063b0640 sub       $0x128,%rsp
063b0647 mov       %r8,0x48(%rsp)
063b064c mov       %rdx,%rax
063b064f mov       0x48(%rsp),%rdx
063b0654 mov       %rax,0x50(%rsp)
063b0659 mov       %rcx,%rax
063b065c mov       0x50(%rsp),%rcx
063b0661 mov       %rax,0x58(%rsp)
063b0666 mov       %rax,0x60(%rsp)
063b066b mov       %rcx,0x108(%rsp)
063b0673 mov       %rdx,0x110(%rsp)
063b067b call      0x0000`0000`063C`AF00
063b0680 mov       %rax,0x68(%rsp)
063b0685 mov       %rdx,0x70(%rsp)
063b068a mov       0x70(%rsp),%r8
063b068f mov       0x68(%rsp),%rdx
063b0694 lea       0x90(%rsp),%rcx
063b069c call      0x0000`0000`063A`EA40
063b06a1 lea       0x78(%rsp),%rcx
063b06a6 lea       0x90(%rsp),%rdx
063b06ae call      0x0000`0000`063A`FCD0
063b06b3 mov       0x78(%rsp),%rax
063b06b8 mov       %rax,0xA8(%rsp)
063b06c0 mov       0x80(%rsp),%rax
063b06c8 mov       %rax,0xB0(%rsp)
063b06d0 mov       0x88(%rsp),%rax
063b06d8 mov       %rax,0xB8(%rsp)
063b06e0 lea       0xA8(%rsp),%rcx
063b06e8 call      0x0000`0000`063A`CE50
063b06ed mov       %rdx,0xC8(%rsp)
063b06f5 mov       %rax,0xC0(%rsp)
063b06fd mov       0xC8(%rsp),%rax
063b0705 test      %rax,%rax
063b0708 setne     %al
063b070b movzbl    %al,%eax
063b070e je        0x0000`0000`063B`0716
063b0710 jmp       0x0000`0000`063B`0712
063b0712 jmp       0x0000`0000`063B`074B
063b0714 ud2
063b0716 mov       0x58(%rsp),%rax
063b071b movq      $2,0xF8(%rsp)
063b0727 mov       0xF8(%rsp),%rdx
063b072f mov       0x100(%rsp),%rcx
063b0737 mov       %rdx,8(%rax)
063b073b mov       %rcx,0x10(%rax)
063b073f movq      $1,(%rax)
063b0746 jmp       0x0000`0000`063B`07E8
063b074b mov       0xC8(%rsp),%rax
063b0753 mov       (%rax),%cx
063b0756 mov       %cx,0x11E(%rsp)
063b075e mov       0xC0(%rsp),%rax
063b0766 mov       %rax,0x40(%rsp)
063b076b mov       %rax,0x120(%rsp)
063b0773 call      0x0000`0000`063A`FCA0
063b0778 mov       %dx,0xD2(%rsp)
063b0780 mov       %ax,0xD0(%rsp)
063b0788 movzwl    0xD0(%rsp),%eax
063b0790 test      %rax,%rax
063b0793 je        0x0000`0000`063B`079B
063b0795 jmp       0x0000`0000`063B`0797
063b0797 jmp       0x0000`0000`063B`07AB
063b0799 ud2
063b079b cmpw      $0,0xD2(%rsp)
063b07a4 je        0x0000`0000`063B`07F5
063b07a6 jmp       0x0000`0000`063B`06E0
063b07ab mov       0x58(%rsp),%rax
063b07b0 mov       0x40(%rsp),%rcx
063b07b5 mov       %rcx,0xF0(%rsp)
063b07bd movq      $0,0xE8(%rsp)
063b07c9 mov       0xE8(%rsp),%rdx
063b07d1 mov       0xF0(%rsp),%rcx
063b07d9 mov       %rdx,8(%rax)
063b07dd mov       %rcx,0x10(%rax)
063b07e1 movq      $1,(%rax)
063b07e8 mov       0x60(%rsp),%rax
063b07ed add       $0x128,%rsp
063b07f4 ret
063b07f5 mov       0x48(%rsp),%rax
063b07fa sub       $1,%rax
063b07fe mov       %rax,0x38(%rsp)
063b0803 setb      %al
063b0806 test      $1,%al
063b0808 jne       0x0000`0000`063B`081B
063b080a mov       0x40(%rsp),%rax
063b080f mov       0x38(%rsp),%rcx
063b0814 cmp       %rcx,%rax
063b0817 jne       0x0000`0000`063B`0850
063b0819 jmp       0x0000`0000`063B`0835
063b081b lea       0x63C`C7D0,%rcx
063b0822 lea       0x63C`D388,%r8
063b0829 mov       $0x21,%edx
063b082e call      0x0000`0000`063B`8E30
063b0833 ud2
063b0835 mov       0x48(%rsp),%rdx
063b083a mov       0x50(%rsp),%rcx
063b083f call      0x0000`0000`063B`08C0
063b0844 mov       %rax,0x28(%rsp)
063b0849 mov       %rdx,0x30(%rsp)
063b084e jmp       0x0000`0000`063B`0892
063b0850 mov       0x58(%rsp),%rax
063b0855 mov       0x40(%rsp),%rcx
063b085a mov       %rcx,0xE0(%rsp)
063b0862 movq      $1,0xD8(%rsp)
063b086e mov       0xD8(%rsp),%rdx
063b0876 mov       0xE0(%rsp),%rcx
063b087e mov       %rdx,8(%rax)
063b0882 mov       %rcx,0x10(%rax)
063b0886 movq      $1,(%rax)
063b088d jmp       0x0000`0000`063B`07E8
063b0892 mov       0x58(%rsp),%rax
063b0897 mov       0x30(%rsp),%rcx
063b089c mov       0x28(%rsp),%rdx
063b08a1 mov       %rdx,8(%rax)
063b08a5 mov       %rcx,0x10(%rax)
063b08a9 movq      $0,(%rax)
063b08b0 jmp       0x0000`0000`063B`07E8

uefi::data_types::strs::CStr16::from_u16_with_nul_unchecked:
063b08c0 sub       $0x10,%rsp
063b08c4 mov       %rcx,%rax
063b08c7 mov       %rax,(%rsp)
063b08cb mov       %rdx,8(%rsp)
063b08d0 add       $0x10,%rsp
063b08d4 ret

uefi::data_types::strs::CStr16::as_ptr:
063b08e0 sub       $0x38,%rsp
063b08e4 mov       %rcx,0x28(%rsp)
063b08e9 mov       %rdx,0x30(%rsp)
063b08ee call      0x0000`0000`063A`EAF0
063b08f3 mov       %rax,0x20(%rsp)
063b08f8 mov       0x20(%rsp),%rax
063b08fd add       $0x38,%rsp
063b0901 ret

uefi::result::error::Error<tuple$<> >::new<tuple$<> >:
063b0910 sub       $0x18,%rsp
063b0914 mov       %rcx,8(%rsp)
063b0919 mov       %rcx,(%rsp)
063b091d mov       (%rsp),%rax
063b0921 add       $0x18,%rsp
063b0925 ret

uefi::result::error::impl$1::from:
063b0930 sub       $0x10,%rsp
063b0934 mov       %rcx,8(%rsp)
063b0939 mov       %rcx,(%rsp)
063b093d mov       (%rsp),%rax
063b0941 add       $0x10,%rsp
063b0945 ret

uefi::result::status::Status::is_success:
063b0950 sub       $0x38,%rsp
063b0954 mov       %rcx,0x30(%rsp)
063b0959 lea       0x30(%rsp),%rcx
063b095e lea       0x63C`D300,%rdx
063b0965 call      0x0000`0000`063B`2F50
063b096a mov       %al,0x2F(%rsp)
063b096e mov       0x2F(%rsp),%al
063b0972 and       $1,%al
063b0974 movzbl    %al,%eax
063b0977 add       $0x38,%rsp
063b097b ret

uefi::result::status::Status::into_with_val<uefi::data_types::Event,uefi::table::boot::impl$0::create_event::closure_env$0>:
063b0980 sub       $0x68,%rsp
063b0984 mov       %r8,0x30(%rsp)
063b0989 mov       %rdx,0x38(%rsp)
063b098e mov       %rcx,%rax
063b0991 mov       0x38(%rsp),%rcx
063b0996 mov       %rax,0x40(%rsp)
063b099b mov       %rax,0x48(%rsp)
063b09a0 mov       %rcx,0x58(%rsp)
063b09a5 mov       %r8,0x60(%rsp)
063b09aa movb      $0,0x57(%rsp)
063b09af movb      $1,0x57(%rsp)
063b09b4 call      0x0000`0000`063B`0950
063b09b9 mov       %al,0x56(%rsp)
063b09bd mov       0x56(%rsp),%al
063b09c1 test      $1,%al
063b09c3 jne       0x0000`0000`063B`09D8
063b09c5 jmp       0x0000`0000`063B`09C7
063b09c7 mov       0x38(%rsp),%rcx
063b09cc call      0x0000`0000`063A`FB10
063b09d1 mov       %rax,0x28(%rsp)
063b09d6 jmp       0x0000`0000`063B`0A0A
063b09d8 mov       0x30(%rsp),%rcx
063b09dd movb      $0,0x57(%rsp)
063b09e2 call      0x0000`0000`063B`0C70
063b09e7 mov       %rax,0x20(%rsp)
063b09ec mov       0x40(%rsp),%rax
063b09f1 mov       0x20(%rsp),%rcx
063b09f6 mov       %rcx,8(%rax)
063b09fa movq      $0,(%rax)
063b0a01 testb     $1,0x57(%rsp)
063b0a06 jne       0x0000`0000`063B`0A2B
063b0a08 jmp       0x0000`0000`063B`0A21
063b0a0a mov       0x40(%rsp),%rax
063b0a0f mov       0x28(%rsp),%rcx
063b0a14 mov       %rcx,8(%rax)
063b0a18 movq      $1,(%rax)
063b0a1f jmp       0x0000`0000`063B`0A01
063b0a21 mov       0x48(%rsp),%rax
063b0a26 add       $0x68,%rsp
063b0a2a ret
063b0a2b jmp       0x0000`0000`063B`0A21

uefi::result::status::Status::into_with<tuple$<>,tuple$<>,uefi::result::status::impl$1::from::closure_env$0,uefi::result::status::impl$1::from::closure_env$1>:
063b0a30 sub       $0x78,%rsp
063b0a34 mov       %rcx,0x30(%rsp)
063b0a39 mov       %rcx,0x60(%rsp)
063b0a3e movb      $0,0x5F(%rsp)
063b0a43 movb      $0,0x5E(%rsp)
063b0a48 movb      $1,0x5F(%rsp)
063b0a4d movb      $1,0x5E(%rsp)
063b0a52 call      0x0000`0000`063B`0950
063b0a57 mov       %al,0x3F(%rsp)
063b0a5b mov       0x3F(%rsp),%al
063b0a5f test      $1,%al
063b0a61 jne       0x0000`0000`063B`0A80
063b0a63 jmp       0x0000`0000`063B`0A65
063b0a65 mov       0x30(%rsp),%rax
063b0a6a movb      $0,0x5E(%rsp)
063b0a6f mov       %rax,0x50(%rsp)
063b0a74 mov       0x50(%rsp),%rcx
063b0a79 call      0x0000`0000`063B`0B20
063b0a7e jmp       0x0000`0000`063B`0A9C
063b0a80 movb      $0,0x5F(%rsp)
063b0a85 call      0x0000`0000`063B`0B10
063b0a8a movq      $0,0x40(%rsp)
063b0a93 testb     $1,0x5E(%rsp)
063b0a98 jne       0x0000`0000`063B`0AC9
063b0a9a jmp       0x0000`0000`063B`0AC0
063b0a9c mov       0x30(%rsp),%rcx
063b0aa1 call      0x0000`0000`063B`0910
063b0aa6 mov       %rax,0x28(%rsp)
063b0aab mov       0x28(%rsp),%rax
063b0ab0 mov       %rax,0x48(%rsp)
063b0ab5 movq      $1,0x40(%rsp)
063b0abe jmp       0x0000`0000`063B`0A93
063b0ac0 testb     $1,0x5F(%rsp)
063b0ac5 jne       0x0000`0000`063B`0ADA
063b0ac7 jmp       0x0000`0000`063B`0ACB
063b0ac9 jmp       0x0000`0000`063B`0AC0
063b0acb mov       0x40(%rsp),%rax
063b0ad0 mov       0x48(%rsp),%rdx
063b0ad5 add       $0x78,%rsp
063b0ad9 ret
063b0ada jmp       0x0000`0000`063B`0ACB

uefi::result::status::impl$1::from:
063b0ae0 sub       $0x38,%rsp
063b0ae4 mov       %rcx,0x30(%rsp)
063b0ae9 call      0x0000`0000`063B`0A30
063b0aee mov       %rax,0x20(%rsp)
063b0af3 mov       %rdx,0x28(%rsp)
063b0af8 mov       0x28(%rsp),%rdx
063b0afd mov       0x20(%rsp),%rax
063b0b02 add       $0x38,%rsp
063b0b06 ret

uefi::result::status::impl$1::from::closure$0:
063b0b10 push      %rax
063b0b11 pop       %rax
063b0b12 ret

uefi::result::status::impl$1::from::closure$1:
063b0b20 sub       $0x10,%rsp
063b0b24 mov       %rcx,8(%rsp)
063b0b29 add       $0x10,%rsp
063b0b2d ret

uefi::table::system::SystemTable<uefi::table::system::Boot>::stdout:
063b0b30 sub       $0x18,%rsp
063b0b34 mov       %rcx,8(%rsp)
063b0b39 mov       (%rcx),%rax
063b0b3c mov       0x40(%rax),%rax
063b0b40 mov       %rax,(%rsp)
063b0b44 mov       %rax,0x10(%rsp)
063b0b49 mov       (%rsp),%rax
063b0b4d add       $0x18,%rsp
063b0b51 ret

uefi::table::system::SystemTable<uefi::table::system::Boot>::runtime_services:
063b0b60 push      %rax
063b0b61 mov       %rcx,(%rsp)
063b0b65 mov       (%rcx),%rax
063b0b68 mov       0x58(%rax),%rax
063b0b6c pop       %rcx
063b0b6d ret

uefi::table::system::SystemTable<uefi::table::system::Boot>::boot_services:
063b0b70 push      %rax
063b0b71 mov       %rcx,(%rsp)
063b0b75 mov       (%rcx),%rax
063b0b78 mov       0x60(%rax),%rax
063b0b7c pop       %rcx
063b0b7d ret

uefi::table::system::SystemTable<uefi::table::system::Boot>::unsafe_clone:
063b0b80 sub       $0x10,%rsp
063b0b84 mov       %rcx,8(%rsp)
063b0b89 mov       (%rcx),%rax
063b0b8c mov       %rax,(%rsp)
063b0b90 mov       (%rsp),%rax
063b0b94 add       $0x10,%rsp
063b0b98 ret

uefi::table::boot::BootServices::create_event:
063b0ba0 sub       $0xA8,%rsp
063b0ba7 mov       %r9,0x38(%rsp)
063b0bac mov       %r8d,0x44(%rsp)
063b0bb1 mov       %rdx,0x48(%rsp)
063b0bb6 mov       %rcx,0x50(%rsp)
063b0bbb mov       %rcx,0x58(%rsp)
063b0bc0 mov       0xD8(%rsp),%rax
063b0bc8 mov       %rax,0x60(%rsp)
063b0bcd mov       0xD0(%rsp),%rax
063b0bd5 mov       %rax,0x68(%rsp)
063b0bda mov       %rdx,0x80(%rsp)
063b0be2 mov       %r8d,0x8C(%rsp)
063b0bea mov       %r9,0x90(%rsp)
063b0bf2 mov       0xA0(%rsp),%rax
063b0bfa mov       %rax,0x70(%rsp)
063b0bff mov       0x48(%rsp),%rax
063b0c04 mov       0x50(%rax),%rax
063b0c08 mov       %rax,0x30(%rsp)
063b0c0d lea       0x70(%rsp),%rax
063b0c12 mov       %rax,0x98(%rsp)
063b0c1a mov       0x30(%rsp),%rax
063b0c1f mov       0x60(%rsp),%r9
063b0c24 mov       0x68(%rsp),%r8
063b0c29 mov       0x38(%rsp),%rdx
063b0c2e mov       0x44(%rsp),%ecx
063b0c32 lea       0x70(%rsp),%r10
063b0c37 mov       %r10,0x20(%rsp)
063b0c3c call      *%rax
063b0c3e mov       %rax,0x28(%rsp)
063b0c43 mov       0x28(%rsp),%rdx
063b0c48 mov       0x50(%rsp),%rcx
063b0c4d mov       0x70(%rsp),%rax
063b0c52 mov       %rax,0x78(%rsp)
063b0c57 mov       0x78(%rsp),%r8
063b0c5c call      0x0000`0000`063B`0980
063b0c61 mov       0x58(%rsp),%rax
063b0c66 add       $0xA8,%rsp
063b0c6d ret

uefi::table::boot::impl$0::create_event::closure$0:
063b0c70 sub       $0x20,%rsp
063b0c74 mov       %rcx,(%rsp)
063b0c78 mov       %rcx,8(%rsp)
063b0c7d mov       %rcx,0x10(%rsp)
063b0c82 mov       %rcx,0x18(%rsp)
063b0c87 mov       (%rsp),%rax
063b0c8b add       $0x20,%rsp
063b0c8f ret

uefi::table::boot::BootServices::stall:
063b0c90 sub       $0xB8,%rsp
063b0c97 mov       %rdx,0x40(%rsp)
063b0c9c mov       %rcx,%rax
063b0c9f mov       0x40(%rsp),%rcx
063b0ca4 mov       %rax,0x98(%rsp)
063b0cac mov       %rcx,0xA0(%rsp)
063b0cb4 callq     *0xF8(%rax)
063b0cba mov       %rax,0x58(%rsp)
063b0cbf lea       0x58(%rsp),%rax
063b0cc4 mov       %rax,0x48(%rsp)
063b0cc9 lea       0x63C`D300,%rax
063b0cd0 mov       %rax,0x50(%rsp)
063b0cd5 mov       0x48(%rsp),%rcx
063b0cda mov       %rcx,0x28(%rsp)
063b0cdf mov       %rcx,0xA8(%rsp)
063b0ce7 mov       0x50(%rsp),%rdx
063b0cec mov       %rdx,0x30(%rsp)
063b0cf1 mov       %rdx,0xB0(%rsp)
063b0cf9 call      0x0000`0000`063B`2F50
063b0cfe mov       %al,0x3F(%rsp)
063b0d02 mov       0x3F(%rsp),%al
063b0d06 xor       $0xFF,%al
063b0d08 test      $1,%al
063b0d0a jne       0x0000`0000`063B`0D14
063b0d0c add       $0xB8,%rsp
063b0d13 ret
063b0d14 mov       0x30(%rsp),%r8
063b0d19 mov       0x28(%rsp),%rdx
063b0d1e movb      $0,0x67(%rsp)
063b0d23 movq      $0,0x68(%rsp)
063b0d2c lea       0x63C`D400,%rcx
063b0d33 mov       %rsp,%rax
063b0d36 mov       %rcx,0x20(%rax)
063b0d3a xor       %eax,%eax
063b0d3c mov       %al,%cl
063b0d3e lea       0x68(%rsp),%r9
063b0d43 call      0x0000`0000`063A`F110
063b0d48 ud2

uefi::table::runtime::RuntimeServices::reset:
063b0d50 sub       $0xA8,%rsp
063b0d57 mov       %r8,0x38(%rsp)
063b0d5c mov       %edx,0x44(%rsp)
063b0d60 mov       %rcx,0x48(%rsp)
063b0d65 mov       0xD0(%rsp),%rax
063b0d6d mov       %r9,0x50(%rsp)
063b0d72 mov       %rax,0x58(%rsp)
063b0d77 mov       %rcx,0x70(%rsp)
063b0d7c mov       %edx,0x7C(%rsp)
063b0d80 mov       %r8,0x80(%rsp)
063b0d88 mov       0x50(%rsp),%rax
063b0d8d test      %rax,%rax
063b0d90 setne     %al
063b0d93 movzbl    %al,%eax
063b0d96 je        0x0000`0000`063B`0D9E
063b0d98 jmp       0x0000`0000`063B`0D9A
063b0d9a jmp       0x0000`0000`063B`0DA0
063b0d9c ud2
063b0d9e jmp       0x0000`0000`063B`0E0D
063b0da0 mov       0x50(%rsp),%rcx
063b0da5 mov       0x58(%rsp),%rdx
063b0daa mov       %rdx,0x28(%rsp)
063b0daf mov       %rcx,0x88(%rsp)
063b0db7 mov       %rdx,0x90(%rsp)
063b0dbf call      0x0000`0000`063C`2BE0
063b0dc4 mov       %rax,0x30(%rsp)
063b0dc9 mov       0x30(%rsp),%rax
063b0dce mov       0x28(%rsp),%rcx
063b0dd3 mov       %rcx,0x60(%rsp)
063b0dd8 mov       %rax,0x68(%rsp)
063b0ddd mov       0x38(%rsp),%rdx
063b0de2 mov       0x44(%rsp),%ecx
063b0de6 mov       0x48(%rsp),%rax
063b0deb mov       0x60(%rsp),%r8
063b0df0 mov       %r8,0x98(%rsp)
063b0df8 mov       0x68(%rsp),%r9
063b0dfd mov       %r9,0xA0(%rsp)
063b0e05 mov       0x68(%rax),%rax
063b0e09 call      *%rax
063b0e0b ud2
063b0e0d movq      $0,0x60(%rsp)
063b0e16 movq      $0,0x68(%rsp)
063b0e1f jmp       0x0000`0000`063B`0DDD

uefi::proto::console::text::output::Output::output_string:
063b0e30 sub       $0x78,%rsp
063b0e34 mov       %r8,0x38(%rsp)
063b0e39 mov       %rdx,%rax
063b0e3c mov       0x38(%rsp),%rdx
063b0e41 mov       %rax,0x40(%rsp)
063b0e46 mov       %rcx,%rax
063b0e49 mov       0x40(%rsp),%rcx
063b0e4e mov       %rax,0x48(%rsp)
063b0e53 mov       %rax,0x60(%rsp)
063b0e58 mov       %rcx,0x68(%rsp)
063b0e5d mov       %rdx,0x70(%rsp)
063b0e62 mov       8(%rax),%rax
063b0e66 mov       %rax,0x50(%rsp)
063b0e6b call      0x0000`0000`063B`08E0
063b0e70 mov       %rax,0x58(%rsp)
063b0e75 mov       0x50(%rsp),%rax
063b0e7a mov       0x58(%rsp),%rdx
063b0e7f mov       0x48(%rsp),%rcx
063b0e84 call      *%rax
063b0e86 mov       %rax,0x30(%rsp)
063b0e8b mov       0x30(%rsp),%rcx
063b0e90 call      0x0000`0000`063A`FB30
063b0e95 mov       %rax,0x20(%rsp)
063b0e9a mov       %rdx,0x28(%rsp)
063b0e9f mov       0x28(%rsp),%rdx
063b0ea4 mov       0x20(%rsp),%rax
063b0ea9 add       $0x78,%rsp
063b0ead ret

uefi::proto::console::text::output::impl$1::write_str:
063b0eb0 sub       $0x1C8,%rsp
063b0eb7 mov       %r8,0x40(%rsp)
063b0ebc mov       %rdx,0x38(%rsp)
063b0ec1 mov       %rcx,0x30(%rsp)
063b0ec6 mov       %rcx,0x1A0(%rsp)
063b0ece mov       %rdx,0x1A8(%rsp)
063b0ed6 mov       %r8,0x1B0(%rsp)
063b0ede lea       0x4E(%rsp),%rcx
063b0ee3 xor       %edx,%edx
063b0ee5 mov       $0x102,%r8d
063b0eeb call      0x0000`0000`063C`AB00
063b0ef0 mov       0x30(%rsp),%rax
063b0ef5 mov       0x38(%rsp),%rcx
063b0efa mov       0x40(%rsp),%rdx
063b0eff movq      $0,0x150(%rsp)
063b0f0b mov       %rax,0x158(%rsp)
063b0f13 lea       0x4E(%rsp),%rax
063b0f18 mov       %rax,0x160(%rsp)
063b0f20 lea       0x150(%rsp),%rax
063b0f28 mov       %rax,0x168(%rsp)
063b0f30 lea       0x158(%rsp),%rax
063b0f38 mov       %rax,0x170(%rsp)
063b0f40 lea       0x160(%rsp),%rax
063b0f48 mov       %rax,0x178(%rsp)
063b0f50 mov       0x178(%rsp),%r8
063b0f58 call      0x0000`0000`063A`F1A0
063b0f5d mov       %al,0x4C(%rsp)
063b0f61 mov       0x4C(%rsp),%cl
063b0f65 call      0x0000`0000`063A`EF10
063b0f6a mov       %al,0x2F(%rsp)
063b0f6e mov       0x2F(%rsp),%cl
063b0f72 and       $1,%cl
063b0f75 call      0x0000`0000`063B`96F0
063b0f7a and       $1,%al
063b0f7c mov       %al,0x187(%rsp)
063b0f83 movzbl    0x187(%rsp),%eax
063b0f8b test      $1,%al
063b0f8d je        0x0000`0000`063B`0F95
063b0f8f jmp       0x0000`0000`063B`0F91
063b0f91 jmp       0x0000`0000`063B`0FEB
063b0f93 ud2
063b0f95 lea       0x4E(%rsp),%rax
063b0f9a mov       %rax,0x188(%rsp)
063b0fa2 movq      $0x81,0x190(%rsp)
063b0fae lea       0x150(%rsp),%rax
063b0fb6 mov       %rax,0x198(%rsp)
063b0fbe mov       0x188(%rsp),%rdx
063b0fc6 mov       0x190(%rsp),%r8
063b0fce mov       0x198(%rsp),%r9
063b0fd6 lea       0x158(%rsp),%rcx
063b0fde call      0x0000`0000`063B`1010
063b0fe3 and       $1,%al
063b0fe5 mov       %al,0x4D(%rsp)
063b0fe9 jmp       0x0000`0000`063B`0FFD
063b0feb lea       0x63C`D488,%rcx
063b0ff2 call      0x0000`0000`063B`9770
063b0ff7 and       $1,%al
063b0ff9 mov       %al,0x4D(%rsp)
063b0ffd mov       0x4D(%rsp),%al
063b1001 and       $1,%al
063b1003 movzbl    %al,%eax
063b1006 add       $0x1C8,%rsp
063b100d ret

uefi::proto::console::text::output::impl$1::write_str::closure$0:
063b1010 sub       $0x118,%rsp
063b1017 mov       %r9,0x58(%rsp)
063b101c mov       %r8,0x60(%rsp)
063b1021 mov       %rdx,0x68(%rsp)
063b1026 mov       %rcx,0x70(%rsp)
063b102b mov       %rcx,0xB8(%rsp)
063b1033 mov       0xB8(%rsp),%rax
063b103b mov       (%rax),%rax
063b103e mov       %rax,0xC0(%rsp)
063b1046 mov       %rdx,0xC8(%rsp)
063b104e mov       %r8,0xD0(%rsp)
063b1056 mov       %r9,0xD8(%rsp)
063b105e mov       (%r9),%rax
063b1061 mov       %rax,0x78(%rsp)
063b1066 cmp       %r8,%rax
063b1069 setb      %al
063b106c test      $1,%al
063b106e jne       0x0000`0000`063B`1072
063b1070 jmp       0x0000`0000`063B`10B8
063b1072 mov       0x60(%rsp),%rdx
063b1077 mov       0x68(%rsp),%rcx
063b107c mov       0x58(%rsp),%rax
063b1081 mov       0x78(%rsp),%r8
063b1086 movw      $0,(%rcx,%r8,2)
063b108d mov       (%rax),%rax
063b1090 mov       %rax,0x88(%rsp)
063b1098 mov       0x88(%rsp),%r8
063b10a0 lea       0x63C`D4B8,%r9
063b10a7 call      0x0000`0000`063A`EB10
063b10ac mov       %rax,0x48(%rsp)
063b10b1 mov       %rdx,0x50(%rsp)
063b10b6 jmp       0x0000`0000`063B`10D0
063b10b8 mov       0x60(%rsp),%rdx
063b10bd mov       0x78(%rsp),%rcx
063b10c2 lea       0x63C`D4A0,%r8
063b10c9 call      0x0000`0000`063B`8E90
063b10ce ud2
063b10d0 mov       0x50(%rsp),%r8
063b10d5 mov       0x48(%rsp),%rdx
063b10da mov       0x58(%rsp),%rax
063b10df mov       %rdx,0xE8(%rsp)
063b10e7 mov       %r8,0xF0(%rsp)
063b10ef movq      $0,(%rax)
063b10f6 lea       0xA0(%rsp),%rcx
063b10fe call      0x0000`0000`063B`0640
063b1103 lea       0xA0(%rsp),%rcx
063b110b call      0x0000`0000`063A`EF80
063b1110 mov       %rax,0x38(%rsp)
063b1115 mov       %rdx,0x40(%rsp)
063b111a mov       0x40(%rsp),%rdx
063b111f mov       0x38(%rsp),%rcx
063b1124 call      0x0000`0000`063A`FD60
063b1129 mov       %rdx,0x98(%rsp)
063b1131 mov       %rax,0x90(%rsp)
063b1139 mov       0x90(%rsp),%rax
063b1141 test      %rax,%rax
063b1144 sete      %al
063b1147 movzbl    %al,%eax
063b114a jne       0x0000`0000`063B`1152
063b114c jmp       0x0000`0000`063B`114E
063b114e jmp       0x0000`0000`063B`119B
063b1150 ud2
063b1152 mov       0x70(%rsp),%rax
063b1157 mov       0x90(%rsp),%rdx
063b115f mov       0x98(%rsp),%r8
063b1167 mov       %rdx,0xF8(%rsp)
063b116f mov       %r8,0x100(%rsp)
063b1177 mov       %rdx,0x108(%rsp)
063b117f mov       %r8,0x110(%rsp)
063b1187 mov       (%rax),%rcx
063b118a call      0x0000`0000`063B`0E30
063b118f mov       %rax,0x28(%rsp)
063b1194 mov       %rdx,0x30(%rsp)
063b1199 jmp       0x0000`0000`063B`11C4
063b119b lea       0x63C`D4D0,%rcx
063b11a2 call      0x0000`0000`063B`9770
063b11a7 and       $1,%al
063b11a9 mov       %al,0x87(%rsp)
063b11b0 mov       0x87(%rsp),%al
063b11b7 and       $1,%al
063b11b9 movzbl    %al,%eax
063b11bc add       $0x118,%rsp
063b11c3 ret
063b11c4 mov       0x30(%rsp),%rdx
063b11c9 mov       0x28(%rsp),%rcx
063b11ce call      0x0000`0000`063A`F080
063b11d3 and       $1,%al
063b11d5 mov       %al,0x87(%rsp)
063b11dc jmp       0x0000`0000`063B`11B0

uefi::proto::console::text::output::impl$1::write_str::closure$0::closure$0:
063b11e0 sub       $0x18,%rsp
063b11e4 mov       %rcx,8(%rsp)
063b11e9 mov       %rdx,0x10(%rsp)
063b11ee add       $0x18,%rsp
063b11f2 ret

uefi::proto::console::text::output::impl$1::write_str::closure$0::closure$1:
063b1200 sub       $0x10,%rsp
063b1204 mov       %rcx,8(%rsp)
063b1209 add       $0x10,%rsp
063b120d ret

uefi::proto::console::text::output::impl$1::write_str::closure$1:
063b1210 sub       $0x98,%rsp
063b1217 mov       %dx,0x3E(%rsp)
063b121c mov       %rcx,0x40(%rsp)
063b1221 mov       %rcx,0x70(%rsp)
063b1226 mov       0x70(%rsp),%rax
063b122b mov       (%rax),%rax
063b122e mov       %rax,0x78(%rsp)
063b1233 mov       0x70(%rsp),%rax
063b1238 mov       8(%rax),%rax
063b123c mov       %rax,0x80(%rsp)
063b1244 mov       0x70(%rsp),%rax
063b1249 mov       0x10(%rax),%rax
063b124d mov       %rax,0x88(%rsp)
063b1255 mov       %dx,0x96(%rsp)
063b125d mov       8(%rcx),%rax
063b1261 mov       (%rax),%rax
063b1264 mov       %rax,0x48(%rsp)
063b1269 cmp       $0x81,%rax
063b126f setb      %al
063b1272 test      $1,%al
063b1274 jne       0x0000`0000`063B`1278
063b1276 jmp       0x0000`0000`063B`12A9
063b1278 mov       0x40(%rsp),%rax
063b127d mov       0x48(%rsp),%rdx
063b1282 mov       0x3E(%rsp),%r8w
063b1288 mov       (%rax),%rcx
063b128b mov       %r8w,(%rcx,%rdx,2)
063b1290 mov       8(%rax),%rax
063b1294 mov       (%rax),%rax
063b1297 add       $1,%rax
063b129b mov       %rax,0x30(%rsp)
063b12a0 setb      %al
063b12a3 test      $1,%al
063b12a5 jne       0x0000`0000`063B`12E1
063b12a7 jmp       0x0000`0000`063B`12C1
063b12a9 mov       0x48(%rsp),%rcx
063b12ae lea       0x63C`D4E8,%r8
063b12b5 mov       $0x81,%edx
063b12ba call      0x0000`0000`063B`8E90
063b12bf ud2
063b12c1 mov       0x40(%rsp),%rax
063b12c6 mov       0x30(%rsp),%rdx
063b12cb mov       8(%rax),%rcx
063b12cf mov       %rdx,(%rcx)
063b12d2 mov       8(%rax),%rax
063b12d6 cmpq      $0x80,(%rax)
063b12dd je        0x0000`0000`063B`1302
063b12df jmp       0x0000`0000`063B`12FB
063b12e1 lea       0x63C`C890,%rcx
063b12e8 lea       0x63C`D500,%r8
063b12ef mov       $0x1C,%edx
063b12f4 call      0x0000`0000`063B`8E30
063b12f9 ud2
063b12fb movb      $2,0x57(%rsp)
063b1300 jmp       0x0000`0000`063B`134D
063b1302 mov       0x40(%rsp),%rax
063b1307 mov       0x10(%rax),%rcx
063b130b mov       (%rax),%rdx
063b130e mov       8(%rax),%rax
063b1312 mov       %rdx,0x58(%rsp)
063b1317 movq      $0x81,0x60(%rsp)
063b1320 mov       %rax,0x68(%rsp)
063b1325 mov       0x58(%rsp),%rdx
063b132a mov       0x60(%rsp),%r8
063b132f mov       0x68(%rsp),%r9
063b1334 call      0x0000`0000`063B`1010
063b1339 mov       %al,0x2F(%rsp)
063b133d mov       0x2F(%rsp),%cl
063b1341 and       $1,%cl
063b1344 call      0x0000`0000`063A`F020
063b1349 mov       %al,0x57(%rsp)
063b134d mov       0x57(%rsp),%al
063b1351 add       $0x98,%rsp
063b1358 ret

uefi::proto::console::text::output::impl$1::write_str::closure$1::closure$0:
063b1360 sub       $0x18,%rsp
063b1364 movb      $0,7(%rsp)
063b1369 mov       7(%rsp),%al
063b136d and       $1,%al
063b136f movzbl    %al,%eax
063b1372 add       $0x18,%rsp
063b1376 ret

uefi::proto::console::text::output::impl$1::write_str::closure$2:
063b1380 sub       $0x58,%rsp
063b1384 mov       %dx,0x26(%rsp)
063b1389 mov       %rcx,0x28(%rsp)
063b138e mov       %rcx,0x38(%rsp)
063b1393 mov       0x38(%rsp),%rax
063b1398 mov       (%rax),%rax
063b139b mov       %rax,0x40(%rsp)
063b13a0 mov       %dx,0x4E(%rsp)
063b13a5 cmp       $0xA,%dx
063b13a9 je        0x0000`0000`063B`13CD
063b13ab mov       0x26(%rsp),%ax
063b13b0 mov       0x28(%rsp),%rcx
063b13b5 mov       (%rcx),%rcx
063b13b8 mov       %ax,0x36(%rsp)
063b13bd mov       0x36(%rsp),%dx
063b13c2 call      0x0000`0000`063B`1210
063b13c7 mov       %al,0x32(%rsp)
063b13cb jmp       0x0000`0000`063B`142A
063b13cd mov       0x28(%rsp),%rax
063b13d2 mov       (%rax),%rcx
063b13d5 movw      $0xD,0x34(%rsp)
063b13dc mov       0x34(%rsp),%dx
063b13e1 call      0x0000`0000`063B`1210
063b13e6 mov       %al,0x25(%rsp)
063b13ea mov       0x25(%rsp),%cl
063b13ee call      0x0000`0000`063C`B080
063b13f3 mov       %al,0x33(%rsp)
063b13f7 mov       0x33(%rsp),%al
063b13fb add       $0xFE,%al
063b13fd setne     %al
063b1400 movzbl    %al,%eax
063b1403 je        0x0000`0000`063B`13AB
063b1405 jmp       0x0000`0000`063B`1407
063b1407 jmp       0x0000`0000`063B`140B
063b1409 ud2
063b140b mov       0x33(%rsp),%cl
063b140f mov       %cl,%al
063b1411 and       $1,%al
063b1413 mov       %al,0x57(%rsp)
063b1417 and       $1,%cl
063b141a lea       0x63C`D518,%rdx
063b1421 call      0x0000`0000`063C`AE30
063b1426 mov       %al,0x32(%rsp)
063b142a mov       0x32(%rsp),%al
063b142e add       $0x58,%rsp
063b1432 ret

uefi::proto::console::text::output::impl$1::write_str::closure$3:
063b1440 push      %rax
063b1441 and       $1,%cl
063b1444 mov       %cl,7(%rsp)
063b1448 pop       %rax
063b1449 ret

uefi::alloc::init:
063b1450 sub       $0x38,%rsp
063b1454 mov       %rcx,0x30(%rsp)
063b1459 call      0x0000`0000`063A`D8A0
063b145e mov       %rax,0x28(%rsp)
063b1463 mov       0x28(%rsp),%rax
063b1468 mov       %rax,0x63D`1E70
063b146f add       $0x38,%rsp
063b1473 ret

uefi::alloc::exit_boot_services:
063b1480 push      %rax
063b1481 movq      $0,(%rsp)
063b1489 mov       (%rsp),%rax
063b148d mov       %rax,0x63D`1E70
063b1494 pop       %rax
063b1495 ret

uefi::logger::Logger::new:
063b14a0 sub       $0x38,%rsp
063b14a4 mov       %rcx,0x30(%rsp)
063b14a9 call      0x0000`0000`063A`D850
063b14ae mov       %rax,0x20(%rsp)
063b14b3 mov       0x20(%rsp),%rax
063b14b8 mov       %rax,0x28(%rsp)
063b14bd mov       0x28(%rsp),%rax
063b14c2 add       $0x38,%rsp
063b14c6 ret

uefi::logger::Logger::disable:
063b14d0 sub       $0x10,%rsp
063b14d4 mov       %rcx,8(%rsp)
063b14d9 movq      $0,(%rsp)
063b14e1 mov       (%rsp),%rax
063b14e5 mov       %rax,(%rcx)
063b14e8 add       $0x10,%rsp
063b14ec ret

uefi::logger::impl$1::enabled:
063b14f0 sub       $0x38,%rsp
063b14f4 mov       %rcx,0x28(%rsp)
063b14f9 mov       %rdx,0x30(%rsp)
063b14fe call      0x0000`0000`063A`EE20
063b1503 mov       %al,0x27(%rsp)
063b1507 mov       0x27(%rsp),%al
063b150b and       $1,%al
063b150d movzbl    %al,%eax
063b1510 add       $0x38,%rsp
063b1514 ret

uefi::logger::impl$1::log:
063b1520 sub       $0xB8,%rsp
063b1527 mov       %rdx,%rax
063b152a mov       %rax,0x80(%rsp)
063b1532 mov       %rcx,%rdx
063b1535 mov       %rdx,0x88(%rsp)
063b153d mov       %rdx,0x98(%rsp)
063b1545 mov       %rax,0xA0(%rsp)
063b154d mov       $1,%eax
063b1552 xor       %ecx,%ecx
063b1554 cmpq      $0,(%rdx)
063b1558 cmove     %rcx,%rax
063b155c cmp       $1,%rax
063b1560 jne       0x0000`0000`063B`1589
063b1562 mov       0x88(%rsp),%rax
063b156a mov       (%rax),%rax
063b156d mov       %rax,0x90(%rsp)
063b1575 lea       0x90(%rsp),%rcx
063b157d call      0x0000`0000`063A`D8F0
063b1582 mov       %rax,0x78(%rsp)
063b1587 jmp       0x0000`0000`063B`1591
063b1589 add       $0xB8,%rsp
063b1590 ret
063b1591 mov       0x80(%rsp),%rcx
063b1599 mov       0x78(%rsp),%rax
063b159e mov       %rax,0xA8(%rsp)
063b15a6 call      0x0000`0000`063A`D1A0
063b15ab mov       %rax,0x70(%rsp)
063b15b0 mov       0x80(%rsp),%rcx
063b15b8 call      0x0000`0000`063A`D100
063b15bd mov       %rax,0x68(%rsp)
063b15c2 mov       0x80(%rsp),%rcx
063b15ca call      0x0000`0000`063A`D110
063b15cf mov       %rax,0x58(%rsp)
063b15d4 mov       %rdx,0x60(%rsp)
063b15d9 mov       0x60(%rsp),%rdx
063b15de mov       0x58(%rsp),%rcx
063b15e3 lea       0x63C`D534,%r8
063b15ea mov       $0xE,%r9d
063b15f0 call      0x0000`0000`063B`8560
063b15f5 mov       %rax,0x48(%rsp)
063b15fa mov       %rdx,0x50(%rsp)
063b15ff mov       0x80(%rsp),%rcx
063b1607 call      0x0000`0000`063A`D190
063b160c mov       %eax,0x40(%rsp)
063b1610 mov       %edx,0x44(%rsp)
063b1614 mov       0x44(%rsp),%edx
063b1618 mov       0x40(%rsp),%ecx
063b161c xor       %r8d,%r8d
063b161f call      0x0000`0000`063B`8600
063b1624 mov       %eax,0x3C(%rsp)
063b1628 mov       0x3C(%rsp),%eax
063b162c mov       0x50(%rsp),%r10
063b1631 mov       0x48(%rsp),%r9
063b1636 mov       0x68(%rsp),%r8
063b163b mov       0x70(%rsp),%rdx
063b1640 mov       0x78(%rsp),%rcx
063b1645 mov       %r10,0x20(%rsp)
063b164a mov       %eax,0x28(%rsp)
063b164e call      0x0000`0000`063B`1690
063b1653 mov       %al,0x3B(%rsp)
063b1657 and       $1,%al
063b1659 mov       %al,0xB7(%rsp)
063b1660 mov       0x3B(%rsp),%cl
063b1664 and       $1,%cl
063b1667 lea       0x63C`D5A0,%rdx
063b166e call      0x0000`0000`063A`EEC0
063b1673 jmp       0x0000`0000`063B`1589

uefi::logger::impl$1::flush:
063b1680 push      %rax
063b1681 mov       %rcx,(%rsp)
063b1685 pop       %rax
063b1686 ret

uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output>::write<uefi::proto::console::text::output::Output>:
063b1690 sub       $0xD8,%rsp
063b1697 mov       %r8,0x30(%rsp)
063b169c mov       %rdx,%r8
063b169f mov       %rcx,%r10
063b16a2 mov       0x30(%rsp),%rcx
063b16a7 mov       0x108(%rsp),%eax
063b16ae mov       0x100(%rsp),%rdx
063b16b6 mov       %r10,0xB0(%rsp)
063b16be mov       %r8,0xB8(%rsp)
063b16c6 mov       %rcx,0xC0(%rsp)
063b16ce mov       %r9,0xC8(%rsp)
063b16d6 mov       %rdx,0xD0(%rsp)
063b16de mov       %r10,0x48(%rsp)
063b16e3 mov       %r8,0x50(%rsp)
063b16e8 movb      $1,0x6C(%rsp)
063b16ed mov       %r9,0x58(%rsp)
063b16f2 mov       %rdx,0x60(%rsp)
063b16f7 mov       %eax,0x68(%rsp)
063b16fb call      0x0000`0000`063C`8890
063b1700 mov       %rax,0x38(%rsp)
063b1705 mov       %rdx,0x40(%rsp)
063b170a mov       0x40(%rsp),%rax
063b170f mov       0x38(%rsp),%rcx
063b1714 mov       %rcx,0xA0(%rsp)
063b171c mov       %rax,0xA8(%rsp)
063b1724 lea       0xA0(%rsp),%r9
063b172c lea       0x70(%rsp),%rcx
063b1731 lea       0x63C`D5C0,%rdx
063b1738 mov       $2,%r8d
063b173e movq      $1,0x20(%rsp)
063b1747 call      0x0000`0000`063A`D480
063b174c lea       0x48(%rsp),%rcx
063b1751 lea       0x70(%rsp),%rdx
063b1756 call      0x0000`0000`063A`D3C0
063b175b mov       %al,0x2F(%rsp)
063b175f mov       0x2F(%rsp),%al
063b1763 and       $1,%al
063b1765 movzbl    %al,%eax
063b1768 add       $0xD8,%rsp
063b176f ret

uefi::logger::impl$5::write_str<uefi::proto::console::text::output::Output>:
063b1770 sub       $0x408,%rsp
063b1777 mov       %r8,0xE8(%rsp)
063b177f mov       %rdx,0xF0(%rsp)
063b1787 mov       %rcx,0xF8(%rsp)
063b178f mov       %rcx,0x3B0(%rsp)
063b1797 mov       %rdx,0x3B8(%rsp)
063b179f mov       %r8,0x3C0(%rsp)
063b17a7 lea       0x108(%rsp),%rcx
063b17af call      0x0000`0000`063A`DE80
063b17b4 lea       0x108(%rsp),%rcx
063b17bc call      0x0000`0000`063A`FDC0
063b17c1 mov       %rax,0xD8(%rsp)
063b17c9 mov       %rdx,0xE0(%rsp)
063b17d1 mov       0xE0(%rsp),%rdx
063b17d9 mov       0xD8(%rsp),%rcx
063b17e1 lea       0x63C`C9C0,%r8
063b17e8 xor       %eax,%eax
063b17ea mov       %eax,%r9d
063b17ed call      0x0000`0000`063B`8560
063b17f2 mov       %rdx,0x158(%rsp)
063b17fa mov       %rax,0x150(%rsp)
063b1802 mov       0xF8(%rsp),%rax
063b180a testb     $1,0x24(%rax)
063b180e jne       0x0000`0000`063B`1845
063b1810 mov       0xF8(%rsp),%rax
063b1818 mov       (%rax),%rax
063b181b mov       %rax,0xC0(%rsp)
063b1823 lea       0x150(%rsp),%rcx
063b182b call      0x0000`0000`063C`88C0
063b1830 mov       %rax,0xC8(%rsp)
063b1838 mov       %rdx,0xD0(%rsp)
063b1840 jmp       0x0000`0000`063B`19DD
063b1845 mov       0xF8(%rsp),%rcx
063b184d mov       (%rcx),%rax
063b1850 mov       %rax,0xA8(%rsp)
063b1858 add       $8,%rcx
063b185c call      0x0000`0000`063A`D200
063b1861 mov       %rax,0xB0(%rsp)
063b1869 mov       %rdx,0xB8(%rsp)
063b1871 mov       0xF8(%rsp),%rcx
063b1879 add       $0x10,%rcx
063b187d call      0x0000`0000`063C`88C0
063b1882 mov       %rax,0x98(%rsp)
063b188a mov       %rdx,0xA0(%rsp)
063b1892 mov       0xF8(%rsp),%rcx
063b189a add       $0x20,%rcx
063b189e call      0x0000`0000`063C`8860
063b18a3 mov       %rax,0x88(%rsp)
063b18ab mov       %rdx,0x90(%rsp)
063b18b3 mov       0x90(%rsp),%rax
063b18bb mov       0x88(%rsp),%rcx
063b18c3 mov       0xA0(%rsp),%rdx
063b18cb mov       0x98(%rsp),%r8
063b18d3 mov       0xB8(%rsp),%r9
063b18db mov       0xB0(%rsp),%r10
063b18e3 mov       %r10,0x198(%rsp)
063b18eb mov       %r9,0x1A0(%rsp)
063b18f3 mov       %r8,0x1A8(%rsp)
063b18fb mov       %rdx,0x1B0(%rsp)
063b1903 mov       %rcx,0x1B8(%rsp)
063b190b mov       %rax,0x1C0(%rsp)
063b1913 lea       0x198(%rsp),%rax
063b191b mov       %rax,0x80(%rsp)
063b1923 mov       0x80(%rsp),%r9
063b192b lea       0x168(%rsp),%rcx
063b1933 lea       0x63C`D5E8,%rdx
063b193a mov       $4,%r8d
063b1940 lea       0x63C`D628,%rax
063b1947 movq      $3,0x20(%rsp)
063b1950 mov       %rax,0x28(%rsp)
063b1955 movq      $3,0x30(%rsp)
063b195e call      0x0000`0000`063A`D410
063b1963 mov       0xA8(%rsp),%rcx
063b196b lea       0x168(%rsp),%rdx
063b1973 call      0x0000`0000`063A`D370
063b1978 mov       %al,0x7F(%rsp)
063b197c mov       0x7F(%rsp),%cl
063b1980 and       $1,%cl
063b1983 call      0x0000`0000`063B`96F0
063b1988 and       $1,%al
063b198a mov       %al,0x167(%rsp)
063b1991 movzbl    0x167(%rsp),%eax
063b1999 test      $1,%al
063b199b je        0x0000`0000`063B`19A3
063b199d jmp       0x0000`0000`063B`199F
063b199f jmp       0x0000`0000`063B`19B4
063b19a1 ud2
063b19a3 mov       0xF8(%rsp),%rax
063b19ab movb      $0,0x24(%rax)
063b19af jmp       0x0000`0000`063B`1810
063b19b4 lea       0x63C`D6D0,%rcx
063b19bb call      0x0000`0000`063B`9770
063b19c0 and       $1,%al
063b19c2 mov       %al,0x107(%rsp)
063b19c9 mov       0x107(%rsp),%al
063b19d0 and       $1,%al
063b19d2 movzbl    %al,%eax
063b19d5 add       $0x408,%rsp
063b19dc ret
063b19dd mov       0xD0(%rsp),%rax
063b19e5 mov       0xC8(%rsp),%rcx
063b19ed mov       %rcx,0x200(%rsp)
063b19f5 mov       %rax,0x208(%rsp)
063b19fd lea       0x200(%rsp),%r9
063b1a05 lea       0x1D0(%rsp),%rcx
063b1a0d lea       0x63C`D310,%rdx
063b1a14 mov       $1,%r8d
063b1a1a movq      $1,0x20(%rsp)
063b1a23 call      0x0000`0000`063A`D480
063b1a28 mov       0xC0(%rsp),%rcx
063b1a30 lea       0x1D0(%rsp),%rdx
063b1a38 call      0x0000`0000`063A`D370
063b1a3d mov       %al,0x7E(%rsp)
063b1a41 mov       0x7E(%rsp),%cl
063b1a45 and       $1,%cl
063b1a48 call      0x0000`0000`063B`96F0
063b1a4d and       $1,%al
063b1a4f mov       %al,0x1CF(%rsp)
063b1a56 movzbl    0x1CF(%rsp),%eax
063b1a5e test      $1,%al
063b1a60 je        0x0000`0000`063B`1A68
063b1a62 jmp       0x0000`0000`063B`1A64
063b1a64 jmp       0x0000`0000`063B`1A9A
063b1a66 ud2
063b1a68 lea       0x258(%rsp),%rcx
063b1a70 lea       0x108(%rsp),%rdx
063b1a78 mov       $0x48,%r8d
063b1a7e call      0x0000`0000`063C`AB90
063b1a83 lea       0x210(%rsp),%rcx
063b1a8b lea       0x258(%rsp),%rdx
063b1a93 call      0x0000`0000`063A`FCF0
063b1a98 jmp       0x0000`0000`063B`1AB4
063b1a9a lea       0x63C`D6E8,%rcx
063b1aa1 call      0x0000`0000`063B`9770
063b1aa6 and       $1,%al
063b1aa8 mov       %al,0x107(%rsp)
063b1aaf jmp       0x0000`0000`063B`19C9
063b1ab4 lea       0x2A0(%rsp),%rcx
063b1abc lea       0x210(%rsp),%rdx
063b1ac4 mov       $0x48,%r8d
063b1aca call      0x0000`0000`063C`AB90
063b1acf lea       0x2A0(%rsp),%rcx
063b1ad7 call      0x0000`0000`063A`FDC0
063b1adc mov       %rdx,0x2F0(%rsp)
063b1ae4 mov       %rax,0x2E8(%rsp)
063b1aec mov       0x2E8(%rsp),%rax
063b1af4 test      %rax,%rax
063b1af7 setne     %al
063b1afa movzbl    %al,%eax
063b1afd je        0x0000`0000`063B`1B05
063b1aff jmp       0x0000`0000`063B`1B01
063b1b01 jmp       0x0000`0000`063B`1B2F
063b1b03 ud2
063b1b05 mov       0xE8(%rsp),%rdx
063b1b0d mov       0xF0(%rsp),%rcx
063b1b15 call      0x0000`0000`063A`DE00
063b1b1a mov       %rdx,0x370(%rsp)
063b1b22 mov       %rax,0x368(%rsp)
063b1b2a jmp       0x0000`0000`063B`1C43
063b1b2f mov       0xF8(%rsp),%rcx
063b1b37 mov       0x2E8(%rsp),%rdx
063b1b3f mov       0x2F0(%rsp),%rax
063b1b47 mov       %rdx,0x2F8(%rsp)
063b1b4f mov       %rax,0x300(%rsp)
063b1b57 mov       (%rcx),%rax
063b1b5a mov       %rax,0x60(%rsp)
063b1b5f add       $8,%rcx
063b1b63 call      0x0000`0000`063A`D200
063b1b68 mov       %rax,0x68(%rsp)
063b1b6d mov       %rdx,0x70(%rsp)
063b1b72 lea       0x2F8(%rsp),%rcx
063b1b7a call      0x0000`0000`063C`88C0
063b1b7f mov       %rax,0x50(%rsp)
063b1b84 mov       %rdx,0x58(%rsp)
063b1b89 mov       0x58(%rsp),%rax
063b1b8e mov       0x50(%rsp),%rcx
063b1b93 mov       0x70(%rsp),%rdx
063b1b98 mov       0x68(%rsp),%r8
063b1b9d mov       %r8,0x340(%rsp)
063b1ba5 mov       %rdx,0x348(%rsp)
063b1bad mov       %rcx,0x350(%rsp)
063b1bb5 mov       %rax,0x358(%rsp)
063b1bbd lea       0x340(%rsp),%r9
063b1bc5 lea       0x310(%rsp),%rcx
063b1bcd lea       0x63C`D700,%rdx
063b1bd4 mov       $2,%r8d
063b1bda movq      $2,0x20(%rsp)
063b1be3 call      0x0000`0000`063A`D480
063b1be8 mov       0x60(%rsp),%rcx
063b1bed lea       0x310(%rsp),%rdx
063b1bf5 call      0x0000`0000`063A`D370
063b1bfa mov       %al,0x4F(%rsp)
063b1bfe mov       0x4F(%rsp),%cl
063b1c02 and       $1,%cl
063b1c05 call      0x0000`0000`063B`96F0
063b1c0a and       $1,%al
063b1c0c mov       %al,0x30F(%rsp)
063b1c13 movzbl    0x30F(%rsp),%eax
063b1c1b test      $1,%al
063b1c1d je        0x0000`0000`063B`1ACF
063b1c23 jmp       0x0000`0000`063B`1C25
063b1c25 jmp       0x0000`0000`063B`1C29
063b1c27 ud2
063b1c29 lea       0x63C`D720,%rcx
063b1c30 call      0x0000`0000`063B`9770
063b1c35 and       $1,%al
063b1c37 mov       %al,0x107(%rsp)
063b1c3e jmp       0x0000`0000`063B`19C9
063b1c43 lea       0x368(%rsp),%rcx
063b1c4b call      0x0000`0000`063B`0530
063b1c50 mov       %eax,0x364(%rsp)
063b1c57 mov       0x364(%rsp),%edx
063b1c5e sub       $0x11`0000,%edx
063b1c64 mov       $1,%eax
063b1c69 xor       %ecx,%ecx
063b1c6b cmp       $0,%edx
063b1c6e cmove     %rcx,%rax
063b1c72 cmp       $1,%rax
063b1c76 jne       0x0000`0000`063B`1C82
063b1c78 cmpl      $0xA,0x364(%rsp)
063b1c80 je        0x0000`0000`063B`1C8F
063b1c82 movb      $0,0x107(%rsp)
063b1c8a jmp       0x0000`0000`063B`19C9
063b1c8f mov       0xF8(%rsp),%rax
063b1c97 mov       (%rax),%rax
063b1c9a mov       %rax,0x40(%rsp)
063b1c9f lea       0x380(%rsp),%rcx
063b1ca7 lea       0x63C`D738,%rdx
063b1cae mov       $1,%r8d
063b1cb4 lea       0x63C`C9C0,%r9
063b1cbb xor       %eax,%eax
063b1cbd movq      $0,0x20(%rsp)
063b1cc6 call      0x0000`0000`063A`D480
063b1ccb mov       0x40(%rsp),%rcx
063b1cd0 lea       0x380(%rsp),%rdx
063b1cd8 call      0x0000`0000`063A`D370
063b1cdd mov       %al,0x3F(%rsp)
063b1ce1 mov       0x3F(%rsp),%cl
063b1ce5 and       $1,%cl
063b1ce8 call      0x0000`0000`063B`96F0
063b1ced and       $1,%al
063b1cef mov       %al,0x37F(%rsp)
063b1cf6 movzbl    0x37F(%rsp),%eax
063b1cfe test      $1,%al
063b1d00 je        0x0000`0000`063B`1D08
063b1d02 jmp       0x0000`0000`063B`1D04
063b1d04 jmp       0x0000`0000`063B`1D19
063b1d06 ud2
063b1d08 mov       0xF8(%rsp),%rax
063b1d10 movb      $1,0x24(%rax)
063b1d14 jmp       0x0000`0000`063B`1C82
063b1d19 lea       0x63C`D748,%rcx
063b1d20 call      0x0000`0000`063B`9770
063b1d25 and       $1,%al
063b1d27 mov       %al,0x107(%rsp)
063b1d2e jmp       0x0000`0000`063B`19C9

uefi::result::error::impl$3::fmt<tuple$<> >:
063b1d40 sub       $0x88,%rsp
063b1d47 mov       %rcx,0x30(%rsp)
063b1d4c mov       %rcx,0x60(%rsp)
063b1d51 mov       %rdx,0x68(%rsp)
063b1d56 mov       %rcx,0x70(%rsp)
063b1d5b mov       %rcx,0x38(%rsp)
063b1d60 mov       %rcx,0x78(%rsp)
063b1d65 lea       0x40(%rsp),%rcx
063b1d6a lea       0x63C`D760,%r8
063b1d71 mov       $5,%r9d
063b1d77 call      0x0000`0000`063B`FB90
063b1d7c mov       0x30(%rsp),%rax
063b1d81 lea       0x40(%rsp),%rcx
063b1d86 mov       %rcx,0x80(%rsp)
063b1d8e mov       %rax,0x50(%rsp)
063b1d93 lea       0x50(%rsp),%r9
063b1d98 lea       0x40(%rsp),%rcx
063b1d9d lea       0x63C`D765,%rdx
063b1da4 mov       $6,%r8d
063b1daa lea       0x63C`CED8,%rax
063b1db1 mov       %rax,0x20(%rsp)
063b1db6 call      0x0000`0000`063B`9C80
063b1dbb mov       0x38(%rsp),%rax
063b1dc0 mov       %rax,0x58(%rsp)
063b1dc5 lea       0x58(%rsp),%r9
063b1dca lea       0x40(%rsp),%rcx
063b1dcf lea       0x63C`D530,%rdx
063b1dd6 mov       $4,%r8d
063b1ddc lea       0x63C`D770,%rax
063b1de3 mov       %rax,0x20(%rsp)
063b1de8 call      0x0000`0000`063B`9C80
063b1ded lea       0x40(%rsp),%rcx
063b1df2 call      0x0000`0000`063B`A0B0
063b1df7 mov       %al,0x2F(%rsp)
063b1dfb mov       0x2F(%rsp),%al
063b1dff and       $1,%al
063b1e01 movzbl    %al,%eax
063b1e04 add       $0x88,%rsp
063b1e0b ret

uefi::result::status::impl$8::fmt:
063b1e10 sub       $0x888,%rsp
063b1e17 mov       %rdx,0x50(%rsp)
063b1e1c mov       %rcx,0x58(%rsp)
063b1e21 mov       %rcx,0x878(%rsp)
063b1e29 mov       %rdx,0x880(%rsp)
063b1e31 mov       (%rcx),%rax
063b1e34 mov       %rax,0x60(%rsp)
063b1e39 movabs    $0x8000`0000`0000`0001,%rcx
063b1e43 sub       %rcx,%rax
063b1e46 je        0x0000`0000`063B`23C5
063b1e4c jmp       0x0000`0000`063B`1E4E
063b1e4e mov       0x60(%rsp),%rax
063b1e53 movabs    $0x8000`0000`0000`0002,%rcx
063b1e5d sub       %rcx,%rax
063b1e60 je        0x0000`0000`063B`23F6
063b1e66 jmp       0x0000`0000`063B`1E68
063b1e68 mov       0x60(%rsp),%rax
063b1e6d movabs    $0x8000`0000`0000`0003,%rcx
063b1e77 sub       %rcx,%rax
063b1e7a je        0x0000`0000`063B`2427
063b1e80 jmp       0x0000`0000`063B`1E82
063b1e82 mov       0x60(%rsp),%rax
063b1e87 movabs    $0x8000`0000`0000`0004,%rcx
063b1e91 sub       %rcx,%rax
063b1e94 je        0x0000`0000`063B`2458
063b1e9a jmp       0x0000`0000`063B`1E9C
063b1e9c mov       0x60(%rsp),%rax
063b1ea1 movabs    $0x8000`0000`0000`0005,%rcx
063b1eab sub       %rcx,%rax
063b1eae je        0x0000`0000`063B`2489
063b1eb4 jmp       0x0000`0000`063B`1EB6
063b1eb6 mov       0x60(%rsp),%rax
063b1ebb movabs    $0x8000`0000`0000`0006,%rcx
063b1ec5 sub       %rcx,%rax
063b1ec8 je        0x0000`0000`063B`24BA
063b1ece jmp       0x0000`0000`063B`1ED0
063b1ed0 mov       0x60(%rsp),%rax
063b1ed5 movabs    $0x8000`0000`0000`0007,%rcx
063b1edf sub       %rcx,%rax
063b1ee2 je        0x0000`0000`063B`24EB
063b1ee8 jmp       0x0000`0000`063B`1EEA
063b1eea mov       0x60(%rsp),%rax
063b1eef movabs    $0x8000`0000`0000`0008,%rcx
063b1ef9 sub       %rcx,%rax
063b1efc je        0x0000`0000`063B`251C
063b1f02 jmp       0x0000`0000`063B`1F04
063b1f04 mov       0x60(%rsp),%rax
063b1f09 movabs    $0x8000`0000`0000`0009,%rcx
063b1f13 sub       %rcx,%rax
063b1f16 je        0x0000`0000`063B`254D
063b1f1c jmp       0x0000`0000`063B`1F1E
063b1f1e mov       0x60(%rsp),%rax
063b1f23 movabs    $0x8000`0000`0000`000A,%rcx
063b1f2d sub       %rcx,%rax
063b1f30 je        0x0000`0000`063B`257E
063b1f36 jmp       0x0000`0000`063B`1F38
063b1f38 mov       0x60(%rsp),%rax
063b1f3d movabs    $0x8000`0000`0000`000B,%rcx
063b1f47 sub       %rcx,%rax
063b1f4a je        0x0000`0000`063B`25AF
063b1f50 jmp       0x0000`0000`063B`1F52
063b1f52 mov       0x60(%rsp),%rax
063b1f57 movabs    $0x8000`0000`0000`000C,%rcx
063b1f61 sub       %rcx,%rax
063b1f64 je        0x0000`0000`063B`25E0
063b1f6a jmp       0x0000`0000`063B`1F6C
063b1f6c mov       0x60(%rsp),%rax
063b1f71 movabs    $0x8000`0000`0000`000D,%rcx
063b1f7b sub       %rcx,%rax
063b1f7e je        0x0000`0000`063B`2611
063b1f84 jmp       0x0000`0000`063B`1F86
063b1f86 mov       0x60(%rsp),%rax
063b1f8b movabs    $0x8000`0000`0000`000E,%rcx
063b1f95 sub       %rcx,%rax
063b1f98 je        0x0000`0000`063B`2642
063b1f9e jmp       0x0000`0000`063B`1FA0
063b1fa0 mov       0x60(%rsp),%rax
063b1fa5 movabs    $0x8000`0000`0000`000F,%rcx
063b1faf sub       %rcx,%rax
063b1fb2 je        0x0000`0000`063B`2673
063b1fb8 jmp       0x0000`0000`063B`1FBA
063b1fba mov       0x60(%rsp),%rax
063b1fbf movabs    $0x8000`0000`0000`0010,%rcx
063b1fc9 sub       %rcx,%rax
063b1fcc je        0x0000`0000`063B`26A4
063b1fd2 jmp       0x0000`0000`063B`1FD4
063b1fd4 mov       0x60(%rsp),%rax
063b1fd9 movabs    $0x8000`0000`0000`0011,%rcx
063b1fe3 sub       %rcx,%rax
063b1fe6 je        0x0000`0000`063B`26D5
063b1fec jmp       0x0000`0000`063B`1FEE
063b1fee mov       0x60(%rsp),%rax
063b1ff3 movabs    $0x8000`0000`0000`0012,%rcx
063b1ffd sub       %rcx,%rax
063b2000 je        0x0000`0000`063B`2706
063b2006 jmp       0x0000`0000`063B`2008
063b2008 mov       0x60(%rsp),%rax
063b200d movabs    $0x8000`0000`0000`0013,%rcx
063b2017 sub       %rcx,%rax
063b201a je        0x0000`0000`063B`2737
063b2020 jmp       0x0000`0000`063B`2022
063b2022 mov       0x60(%rsp),%rax
063b2027 movabs    $0x8000`0000`0000`0014,%rcx
063b2031 sub       %rcx,%rax
063b2034 je        0x0000`0000`063B`2768
063b203a jmp       0x0000`0000`063B`203C
063b203c mov       0x60(%rsp),%rax
063b2041 movabs    $0x8000`0000`0000`0015,%rcx
063b204b sub       %rcx,%rax
063b204e je        0x0000`0000`063B`2799
063b2054 jmp       0x0000`0000`063B`2056
063b2056 mov       0x60(%rsp),%rax
063b205b movabs    $0x8000`0000`0000`0016,%rcx
063b2065 sub       %rcx,%rax
063b2068 je        0x0000`0000`063B`27CA
063b206e jmp       0x0000`0000`063B`2070
063b2070 mov       0x60(%rsp),%rax
063b2075 movabs    $0x8000`0000`0000`0017,%rcx
063b207f sub       %rcx,%rax
063b2082 je        0x0000`0000`063B`27FB
063b2088 jmp       0x0000`0000`063B`208A
063b208a mov       0x60(%rsp),%rax
063b208f movabs    $0x8000`0000`0000`0018,%rcx
063b2099 sub       %rcx,%rax
063b209c je        0x0000`0000`063B`282C
063b20a2 jmp       0x0000`0000`063B`20A4
063b20a4 mov       0x60(%rsp),%rax
063b20a9 movabs    $0x8000`0000`0000`0019,%rcx
063b20b3 sub       %rcx,%rax
063b20b6 je        0x0000`0000`063B`285D
063b20bc jmp       0x0000`0000`063B`20BE
063b20be mov       0x60(%rsp),%rax
063b20c3 movabs    $0x8000`0000`0000`001A,%rcx
063b20cd sub       %rcx,%rax
063b20d0 je        0x0000`0000`063B`288E
063b20d6 jmp       0x0000`0000`063B`20D8
063b20d8 mov       0x60(%rsp),%rax
063b20dd movabs    $0x8000`0000`0000`001B,%rcx
063b20e7 sub       %rcx,%rax
063b20ea je        0x0000`0000`063B`28BF
063b20f0 jmp       0x0000`0000`063B`20F2
063b20f2 mov       0x60(%rsp),%rax
063b20f7 movabs    $0x8000`0000`0000`001C,%rcx
063b2101 sub       %rcx,%rax
063b2104 je        0x0000`0000`063B`28F0
063b210a jmp       0x0000`0000`063B`210C
063b210c mov       0x60(%rsp),%rax
063b2111 movabs    $0x8000`0000`0000`001F,%rcx
063b211b sub       %rcx,%rax
063b211e je        0x0000`0000`063B`2921
063b2124 jmp       0x0000`0000`063B`2126
063b2126 mov       0x60(%rsp),%rax
063b212b movabs    $0x8000`0000`0000`0020,%rcx
063b2135 sub       %rcx,%rax
063b2138 je        0x0000`0000`063B`2952
063b213e jmp       0x0000`0000`063B`2140
063b2140 mov       0x60(%rsp),%rax
063b2145 movabs    $0x8000`0000`0000`0021,%rcx
063b214f sub       %rcx,%rax
063b2152 je        0x0000`0000`063B`2983
063b2158 jmp       0x0000`0000`063B`215A
063b215a mov       0x60(%rsp),%rax
063b215f movabs    $0x8000`0000`0000`0022,%rcx
063b2169 sub       %rcx,%rax
063b216c je        0x0000`0000`063B`29B4
063b2172 jmp       0x0000`0000`063B`2174
063b2174 mov       0x60(%rsp),%rax
063b2179 movabs    $0x8000`0000`0000`0023,%rcx
063b2183 sub       %rcx,%rax
063b2186 je        0x0000`0000`063B`29E5
063b218c jmp       0x0000`0000`063B`218E
063b218e mov       0x60(%rsp),%rax
063b2193 test      %rax,%rax
063b2196 je        0x0000`0000`063B`2240
063b219c jmp       0x0000`0000`063B`219E
063b219e mov       0x60(%rsp),%rax
063b21a3 sub       $1,%rax
063b21a7 je        0x0000`0000`063B`226E
063b21ad jmp       0x0000`0000`063B`21AF
063b21af mov       0x60(%rsp),%rax
063b21b4 sub       $2,%rax
063b21b8 je        0x0000`0000`063B`229F
063b21be jmp       0x0000`0000`063B`21C0
063b21c0 mov       0x60(%rsp),%rax
063b21c5 sub       $3,%rax
063b21c9 je        0x0000`0000`063B`22D0
063b21cf jmp       0x0000`0000`063B`21D1
063b21d1 mov       0x60(%rsp),%rax
063b21d6 sub       $4,%rax
063b21da je        0x0000`0000`063B`2301
063b21e0 jmp       0x0000`0000`063B`21E2
063b21e2 mov       0x60(%rsp),%rax
063b21e7 sub       $5,%rax
063b21eb je        0x0000`0000`063B`2332
063b21f1 jmp       0x0000`0000`063B`21F3
063b21f3 mov       0x60(%rsp),%rax
063b21f8 sub       $6,%rax
063b21fc je        0x0000`0000`063B`2363
063b2202 jmp       0x0000`0000`063B`2204
063b2204 mov       0x60(%rsp),%rax
063b2209 sub       $7,%rax
063b220d je        0x0000`0000`063B`2394
063b2213 jmp       0x0000`0000`063B`2215
063b2215 mov       0x58(%rsp),%rax
063b221a mov       (%rax),%rax
063b221d mov       %rax,0x820(%rsp)
063b2225 lea       0x63C`D7D0,%rcx
063b222c call      0x0000`0000`063C`88C0
063b2231 mov       %rax,0x40(%rsp)
063b2236 mov       %rdx,0x48(%rsp)
063b223b jmp       0x0000`0000`063B`2A16
063b2240 lea       0x70(%rsp),%rcx
063b2245 lea       0x63C`DD18,%rdx
063b224c mov       $1,%r8d
063b2252 lea       0x63C`C9C0,%r9
063b2259 xor       %eax,%eax
063b225b movq      $0,0x20(%rsp)
063b2264 call      0x0000`0000`063A`D480
063b2269 jmp       0x0000`0000`063B`2F31
063b226e lea       0xA0(%rsp),%rcx
063b2276 lea       0x63C`DD00,%rdx
063b227d mov       $1,%r8d
063b2283 lea       0x63C`C9C0,%r9
063b228a xor       %eax,%eax
063b228c movq      $0,0x20(%rsp)
063b2295 call      0x0000`0000`063A`D480
063b229a jmp       0x0000`0000`063B`2F14
063b229f lea       0xD0(%rsp),%rcx
063b22a7 lea       0x63C`DCD8,%rdx
063b22ae mov       $1,%r8d
063b22b4 lea       0x63C`C9C0,%r9
063b22bb xor       %eax,%eax
063b22bd movq      $0,0x20(%rsp)
063b22c6 call      0x0000`0000`063A`D480
063b22cb jmp       0x0000`0000`063B`2EF7
063b22d0 lea       0x100(%rsp),%rcx
063b22d8 lea       0x63C`DCB0,%rdx
063b22df mov       $1,%r8d
063b22e5 lea       0x63C`C9C0,%r9
063b22ec xor       %eax,%eax
063b22ee movq      $0,0x20(%rsp)
063b22f7 call      0x0000`0000`063A`D480
063b22fc jmp       0x0000`0000`063B`2EDA
063b2301 lea       0x130(%rsp),%rcx
063b2309 lea       0x63C`DC88,%rdx
063b2310 mov       $1,%r8d
063b2316 lea       0x63C`C9C0,%r9
063b231d xor       %eax,%eax
063b231f movq      $0,0x20(%rsp)
063b2328 call      0x0000`0000`063A`D480
063b232d jmp       0x0000`0000`063B`2EBD
063b2332 lea       0x160(%rsp),%rcx
063b233a lea       0x63C`DC60,%rdx
063b2341 mov       $1,%r8d
063b2347 lea       0x63C`C9C0,%r9
063b234e xor       %eax,%eax
063b2350 movq      $0,0x20(%rsp)
063b2359 call      0x0000`0000`063A`D480
063b235e jmp       0x0000`0000`063B`2EA0
063b2363 lea       0x190(%rsp),%rcx
063b236b lea       0x63C`DC40,%rdx
063b2372 mov       $1,%r8d
063b2378 lea       0x63C`C9C0,%r9
063b237f xor       %eax,%eax
063b2381 movq      $0,0x20(%rsp)
063b238a call      0x0000`0000`063A`D480
063b238f jmp       0x0000`0000`063B`2E83
063b2394 lea       0x1C0(%rsp),%rcx
063b239c lea       0x63C`DC20,%rdx
063b23a3 mov       $1,%r8d
063b23a9 lea       0x63C`C9C0,%r9
063b23b0 xor       %eax,%eax
063b23b2 movq      $0,0x20(%rsp)
063b23bb call      0x0000`0000`063A`D480
063b23c0 jmp       0x0000`0000`063B`2E66
063b23c5 lea       0x1F0(%rsp),%rcx
063b23cd lea       0x63C`DBF8,%rdx
063b23d4 mov       $1,%r8d
063b23da lea       0x63C`C9C0,%r9
063b23e1 xor       %eax,%eax
063b23e3 movq      $0,0x20(%rsp)
063b23ec call      0x0000`0000`063A`D480
063b23f1 jmp       0x0000`0000`063B`2E49
063b23f6 lea       0x220(%rsp),%rcx
063b23fe lea       0x63C`DBD8,%rdx
063b2405 mov       $1,%r8d
063b240b lea       0x63C`C9C0,%r9
063b2412 xor       %eax,%eax
063b2414 movq      $0,0x20(%rsp)
063b241d call      0x0000`0000`063A`D480
063b2422 jmp       0x0000`0000`063B`2E2C
063b2427 lea       0x250(%rsp),%rcx
063b242f lea       0x63C`DBB0,%rdx
063b2436 mov       $1,%r8d
063b243c lea       0x63C`C9C0,%r9
063b2443 xor       %eax,%eax
063b2445 movq      $0,0x20(%rsp)
063b244e call      0x0000`0000`063A`D480
063b2453 jmp       0x0000`0000`063B`2E0F
063b2458 lea       0x280(%rsp),%rcx
063b2460 lea       0x63C`DB90,%rdx
063b2467 mov       $1,%r8d
063b246d lea       0x63C`C9C0,%r9
063b2474 xor       %eax,%eax
063b2476 movq      $0,0x20(%rsp)
063b247f call      0x0000`0000`063A`D480
063b2484 jmp       0x0000`0000`063B`2DF2
063b2489 lea       0x2B0(%rsp),%rcx
063b2491 lea       0x63C`DB70,%rdx
063b2498 mov       $1,%r8d
063b249e lea       0x63C`C9C0,%r9
063b24a5 xor       %eax,%eax
063b24a7 movq      $0,0x20(%rsp)
063b24b0 call      0x0000`0000`063A`D480
063b24b5 jmp       0x0000`0000`063B`2DD5
063b24ba lea       0x2E0(%rsp),%rcx
063b24c2 lea       0x63C`DB50,%rdx
063b24c9 mov       $1,%r8d
063b24cf lea       0x63C`C9C0,%r9
063b24d6 xor       %eax,%eax
063b24d8 movq      $0,0x20(%rsp)
063b24e1 call      0x0000`0000`063A`D480
063b24e6 jmp       0x0000`0000`063B`2DB8
063b24eb lea       0x310(%rsp),%rcx
063b24f3 lea       0x63C`DB30,%rdx
063b24fa mov       $1,%r8d
063b2500 lea       0x63C`C9C0,%r9
063b2507 xor       %eax,%eax
063b2509 movq      $0,0x20(%rsp)
063b2512 call      0x0000`0000`063A`D480
063b2517 jmp       0x0000`0000`063B`2D9B
063b251c lea       0x340(%rsp),%rcx
063b2524 lea       0x63C`DB10,%rdx
063b252b mov       $1,%r8d
063b2531 lea       0x63C`C9C0,%r9
063b2538 xor       %eax,%eax
063b253a movq      $0,0x20(%rsp)
063b2543 call      0x0000`0000`063A`D480
063b2548 jmp       0x0000`0000`063B`2D7E
063b254d lea       0x370(%rsp),%rcx
063b2555 lea       0x63C`DAF0,%rdx
063b255c mov       $1,%r8d
063b2562 lea       0x63C`C9C0,%r9
063b2569 xor       %eax,%eax
063b256b movq      $0,0x20(%rsp)
063b2574 call      0x0000`0000`063A`D480
063b2579 jmp       0x0000`0000`063B`2D61
063b257e lea       0x3A0(%rsp),%rcx
063b2586 lea       0x63C`DAD0,%rdx
063b258d mov       $1,%r8d
063b2593 lea       0x63C`C9C0,%r9
063b259a xor       %eax,%eax
063b259c movq      $0,0x20(%rsp)
063b25a5 call      0x0000`0000`063A`D480
063b25aa jmp       0x0000`0000`063B`2D44
063b25af lea       0x3D0(%rsp),%rcx
063b25b7 lea       0x63C`DAB0,%rdx
063b25be mov       $1,%r8d
063b25c4 lea       0x63C`C9C0,%r9
063b25cb xor       %eax,%eax
063b25cd movq      $0,0x20(%rsp)
063b25d6 call      0x0000`0000`063A`D480
063b25db jmp       0x0000`0000`063B`2D27
063b25e0 lea       0x400(%rsp),%rcx
063b25e8 lea       0x63C`DA90,%rdx
063b25ef mov       $1,%r8d
063b25f5 lea       0x63C`C9C0,%r9
063b25fc xor       %eax,%eax
063b25fe movq      $0,0x20(%rsp)
063b2607 call      0x0000`0000`063A`D480
063b260c jmp       0x0000`0000`063B`2D0A
063b2611 lea       0x430(%rsp),%rcx
063b2619 lea       0x63C`DA78,%rdx
063b2620 mov       $1,%r8d
063b2626 lea       0x63C`C9C0,%r9
063b262d xor       %eax,%eax
063b262f movq      $0,0x20(%rsp)
063b2638 call      0x0000`0000`063A`D480
063b263d jmp       0x0000`0000`063B`2CED
063b2642 lea       0x460(%rsp),%rcx
063b264a lea       0x63C`DA58,%rdx
063b2651 mov       $1,%r8d
063b2657 lea       0x63C`C9C0,%r9
063b265e xor       %eax,%eax
063b2660 movq      $0,0x20(%rsp)
063b2669 call      0x0000`0000`063A`D480
063b266e jmp       0x0000`0000`063B`2CD0
063b2673 lea       0x490(%rsp),%rcx
063b267b lea       0x63C`DA38,%rdx
063b2682 mov       $1,%r8d
063b2688 lea       0x63C`C9C0,%r9
063b268f xor       %eax,%eax
063b2691 movq      $0,0x20(%rsp)
063b269a call      0x0000`0000`063A`D480
063b269f jmp       0x0000`0000`063B`2CB3
063b26a4 lea       0x4C0(%rsp),%rcx
063b26ac lea       0x63C`DA18,%rdx
063b26b3 mov       $1,%r8d
063b26b9 lea       0x63C`C9C0,%r9
063b26c0 xor       %eax,%eax
063b26c2 movq      $0,0x20(%rsp)
063b26cb call      0x0000`0000`063A`D480
063b26d0 jmp       0x0000`0000`063B`2C96
063b26d5 lea       0x4F0(%rsp),%rcx
063b26dd lea       0x63C`D9F8,%rdx
063b26e4 mov       $1,%r8d
063b26ea lea       0x63C`C9C0,%r9
063b26f1 xor       %eax,%eax
063b26f3 movq      $0,0x20(%rsp)
063b26fc call      0x0000`0000`063A`D480
063b2701 jmp       0x0000`0000`063B`2C79
063b2706 lea       0x520(%rsp),%rcx
063b270e lea       0x63C`D9D8,%rdx
063b2715 mov       $1,%r8d
063b271b lea       0x63C`C9C0,%r9
063b2722 xor       %eax,%eax
063b2724 movq      $0,0x20(%rsp)
063b272d call      0x0000`0000`063A`D480
063b2732 jmp       0x0000`0000`063B`2C5C
063b2737 lea       0x550(%rsp),%rcx
063b273f lea       0x63C`D9C0,%rdx
063b2746 mov       $1,%r8d
063b274c lea       0x63C`C9C0,%r9
063b2753 xor       %eax,%eax
063b2755 movq      $0,0x20(%rsp)
063b275e call      0x0000`0000`063A`D480
063b2763 jmp       0x0000`0000`063B`2C3F
063b2768 lea       0x580(%rsp),%rcx
063b2770 lea       0x63C`D9A0,%rdx
063b2777 mov       $1,%r8d
063b277d lea       0x63C`C9C0,%r9
063b2784 xor       %eax,%eax
063b2786 movq      $0,0x20(%rsp)
063b278f call      0x0000`0000`063A`D480
063b2794 jmp       0x0000`0000`063B`2C22
063b2799 lea       0x5B0(%rsp),%rcx
063b27a1 lea       0x63C`D980,%rdx
063b27a8 mov       $1,%r8d
063b27ae lea       0x63C`C9C0,%r9
063b27b5 xor       %eax,%eax
063b27b7 movq      $0,0x20(%rsp)
063b27c0 call      0x0000`0000`063A`D480
063b27c5 jmp       0x0000`0000`063B`2C05
063b27ca lea       0x5E0(%rsp),%rcx
063b27d2 lea       0x63C`D968,%rdx
063b27d9 mov       $1,%r8d
063b27df lea       0x63C`C9C0,%r9
063b27e6 xor       %eax,%eax
063b27e8 movq      $0,0x20(%rsp)
063b27f1 call      0x0000`0000`063A`D480
063b27f6 jmp       0x0000`0000`063B`2BE8
063b27fb lea       0x610(%rsp),%rcx
063b2803 lea       0x63C`D948,%rdx
063b280a mov       $1,%r8d
063b2810 lea       0x63C`C9C0,%r9
063b2817 xor       %eax,%eax
063b2819 movq      $0,0x20(%rsp)
063b2822 call      0x0000`0000`063A`D480
063b2827 jmp       0x0000`0000`063B`2BCB
063b282c lea       0x640(%rsp),%rcx
063b2834 lea       0x63C`D928,%rdx
063b283b mov       $1,%r8d
063b2841 lea       0x63C`C9C0,%r9
063b2848 xor       %eax,%eax
063b284a movq      $0,0x20(%rsp)
063b2853 call      0x0000`0000`063A`D480
063b2858 jmp       0x0000`0000`063B`2BAE
063b285d lea       0x670(%rsp),%rcx
063b2865 lea       0x63C`D908,%rdx
063b286c mov       $1,%r8d
063b2872 lea       0x63C`C9C0,%r9
063b2879 xor       %eax,%eax
063b287b movq      $0,0x20(%rsp)
063b2884 call      0x0000`0000`063A`D480
063b2889 jmp       0x0000`0000`063B`2B91
063b288e lea       0x6A0(%rsp),%rcx
063b2896 lea       0x63C`D8E0,%rdx
063b289d mov       $1,%r8d
063b28a3 lea       0x63C`C9C0,%r9
063b28aa xor       %eax,%eax
063b28ac movq      $0,0x20(%rsp)
063b28b5 call      0x0000`0000`063A`D480
063b28ba jmp       0x0000`0000`063B`2B74
063b28bf lea       0x6D0(%rsp),%rcx
063b28c7 lea       0x63C`D8B8,%rdx
063b28ce mov       $1,%r8d
063b28d4 lea       0x63C`C9C0,%r9
063b28db xor       %eax,%eax
063b28dd movq      $0,0x20(%rsp)
063b28e6 call      0x0000`0000`063A`D480
063b28eb jmp       0x0000`0000`063B`2B57
063b28f0 lea       0x700(%rsp),%rcx
063b28f8 lea       0x63C`D898,%rdx
063b28ff mov       $1,%r8d
063b2905 lea       0x63C`C9C0,%r9
063b290c xor       %eax,%eax
063b290e movq      $0,0x20(%rsp)
063b2917 call      0x0000`0000`063A`D480
063b291c jmp       0x0000`0000`063B`2B3A
063b2921 lea       0x730(%rsp),%rcx
063b2929 lea       0x63C`D878,%rdx
063b2930 mov       $1,%r8d
063b2936 lea       0x63C`C9C0,%r9
063b293d xor       %eax,%eax
063b293f movq      $0,0x20(%rsp)
063b2948 call      0x0000`0000`063A`D480
063b294d jmp       0x0000`0000`063B`2B1D
063b2952 lea       0x760(%rsp),%rcx
063b295a lea       0x63C`D858,%rdx
063b2961 mov       $1,%r8d
063b2967 lea       0x63C`C9C0,%r9
063b296e xor       %eax,%eax
063b2970 movq      $0,0x20(%rsp)
063b2979 call      0x0000`0000`063A`D480
063b297e jmp       0x0000`0000`063B`2B03
063b2983 lea       0x790(%rsp),%rcx
063b298b lea       0x63C`D838,%rdx
063b2992 mov       $1,%r8d
063b2998 lea       0x63C`C9C0,%r9
063b299f xor       %eax,%eax
063b29a1 movq      $0,0x20(%rsp)
063b29aa call      0x0000`0000`063A`D480
063b29af jmp       0x0000`0000`063B`2AE9
063b29b4 lea       0x7C0(%rsp),%rcx
063b29bc lea       0x63C`D818,%rdx
063b29c3 mov       $1,%r8d
063b29c9 lea       0x63C`C9C0,%r9
063b29d0 xor       %eax,%eax
063b29d2 movq      $0,0x20(%rsp)
063b29db call      0x0000`0000`063A`D480
063b29e0 jmp       0x0000`0000`063B`2ACF
063b29e5 lea       0x7F0(%rsp),%rcx
063b29ed lea       0x63C`D7F0,%rdx
063b29f4 mov       $1,%r8d
063b29fa lea       0x63C`C9C0,%r9
063b2a01 xor       %eax,%eax
063b2a03 movq      $0,0x20(%rsp)
063b2a0c call      0x0000`0000`063A`D480
063b2a11 jmp       0x0000`0000`063B`2AB5
063b2a16 lea       0x820(%rsp),%rcx
063b2a1e call      0x0000`0000`063C`87D0
063b2a23 mov       %rax,0x30(%rsp)
063b2a28 mov       %rdx,0x38(%rsp)
063b2a2d mov       0x38(%rsp),%rax
063b2a32 mov       0x30(%rsp),%rcx
063b2a37 mov       0x48(%rsp),%rdx
063b2a3c mov       0x40(%rsp),%r8
063b2a41 mov       %r8,0x858(%rsp)
063b2a49 mov       %rdx,0x860(%rsp)
063b2a51 mov       %rcx,0x868(%rsp)
063b2a59 mov       %rax,0x870(%rsp)
063b2a61 lea       0x858(%rsp),%r9
063b2a69 lea       0x828(%rsp),%rcx
063b2a71 lea       0x63C`D798,%rdx
063b2a78 mov       $3,%r8d
063b2a7e movq      $2,0x20(%rsp)
063b2a87 call      0x0000`0000`063A`D480
063b2a8c mov       0x50(%rsp),%rcx
063b2a91 lea       0x828(%rsp),%rdx
063b2a99 call      0x0000`0000`063B`FA90
063b2a9e and       $1,%al
063b2aa0 mov       %al,0x6F(%rsp)
063b2aa4 mov       0x6F(%rsp),%al
063b2aa8 and       $1,%al
063b2aaa movzbl    %al,%eax
063b2aad add       $0x888,%rsp
063b2ab4 ret
063b2ab5 mov       0x50(%rsp),%rcx
063b2aba lea       0x7F0(%rsp),%rdx
063b2ac2 call      0x0000`0000`063B`FA90
063b2ac7 and       $1,%al
063b2ac9 mov       %al,0x6F(%rsp)
063b2acd jmp       0x0000`0000`063B`2AA4
063b2acf mov       0x50(%rsp),%rcx
063b2ad4 lea       0x7C0(%rsp),%rdx
063b2adc call      0x0000`0000`063B`FA90
063b2ae1 and       $1,%al
063b2ae3 mov       %al,0x6F(%rsp)
063b2ae7 jmp       0x0000`0000`063B`2AA4
063b2ae9 mov       0x50(%rsp),%rcx
063b2aee lea       0x790(%rsp),%rdx
063b2af6 call      0x0000`0000`063B`FA90
063b2afb and       $1,%al
063b2afd mov       %al,0x6F(%rsp)
063b2b01 jmp       0x0000`0000`063B`2AA4
063b2b03 mov       0x50(%rsp),%rcx
063b2b08 lea       0x760(%rsp),%rdx
063b2b10 call      0x0000`0000`063B`FA90
063b2b15 and       $1,%al
063b2b17 mov       %al,0x6F(%rsp)
063b2b1b jmp       0x0000`0000`063B`2AA4
063b2b1d mov       0x50(%rsp),%rcx
063b2b22 lea       0x730(%rsp),%rdx
063b2b2a call      0x0000`0000`063B`FA90
063b2b2f and       $1,%al
063b2b31 mov       %al,0x6F(%rsp)
063b2b35 jmp       0x0000`0000`063B`2AA4
063b2b3a mov       0x50(%rsp),%rcx
063b2b3f lea       0x700(%rsp),%rdx
063b2b47 call      0x0000`0000`063B`FA90
063b2b4c and       $1,%al
063b2b4e mov       %al,0x6F(%rsp)
063b2b52 jmp       0x0000`0000`063B`2AA4
063b2b57 mov       0x50(%rsp),%rcx
063b2b5c lea       0x6D0(%rsp),%rdx
063b2b64 call      0x0000`0000`063B`FA90
063b2b69 and       $1,%al
063b2b6b mov       %al,0x6F(%rsp)
063b2b6f jmp       0x0000`0000`063B`2AA4
063b2b74 mov       0x50(%rsp),%rcx
063b2b79 lea       0x6A0(%rsp),%rdx
063b2b81 call      0x0000`0000`063B`FA90
063b2b86 and       $1,%al
063b2b88 mov       %al,0x6F(%rsp)
063b2b8c jmp       0x0000`0000`063B`2AA4
063b2b91 mov       0x50(%rsp),%rcx
063b2b96 lea       0x670(%rsp),%rdx
063b2b9e call      0x0000`0000`063B`FA90
063b2ba3 and       $1,%al
063b2ba5 mov       %al,0x6F(%rsp)
063b2ba9 jmp       0x0000`0000`063B`2AA4
063b2bae mov       0x50(%rsp),%rcx
063b2bb3 lea       0x640(%rsp),%rdx
063b2bbb call      0x0000`0000`063B`FA90
063b2bc0 and       $1,%al
063b2bc2 mov       %al,0x6F(%rsp)
063b2bc6 jmp       0x0000`0000`063B`2AA4
063b2bcb mov       0x50(%rsp),%rcx
063b2bd0 lea       0x610(%rsp),%rdx
063b2bd8 call      0x0000`0000`063B`FA90
063b2bdd and       $1,%al
063b2bdf mov       %al,0x6F(%rsp)
063b2be3 jmp       0x0000`0000`063B`2AA4
063b2be8 mov       0x50(%rsp),%rcx
063b2bed lea       0x5E0(%rsp),%rdx
063b2bf5 call      0x0000`0000`063B`FA90
063b2bfa and       $1,%al
063b2bfc mov       %al,0x6F(%rsp)
063b2c00 jmp       0x0000`0000`063B`2AA4
063b2c05 mov       0x50(%rsp),%rcx
063b2c0a lea       0x5B0(%rsp),%rdx
063b2c12 call      0x0000`0000`063B`FA90
063b2c17 and       $1,%al
063b2c19 mov       %al,0x6F(%rsp)
063b2c1d jmp       0x0000`0000`063B`2AA4
063b2c22 mov       0x50(%rsp),%rcx
063b2c27 lea       0x580(%rsp),%rdx
063b2c2f call      0x0000`0000`063B`FA90
063b2c34 and       $1,%al
063b2c36 mov       %al,0x6F(%rsp)
063b2c3a jmp       0x0000`0000`063B`2AA4
063b2c3f mov       0x50(%rsp),%rcx
063b2c44 lea       0x550(%rsp),%rdx
063b2c4c call      0x0000`0000`063B`FA90
063b2c51 and       $1,%al
063b2c53 mov       %al,0x6F(%rsp)
063b2c57 jmp       0x0000`0000`063B`2AA4
063b2c5c mov       0x50(%rsp),%rcx
063b2c61 lea       0x520(%rsp),%rdx
063b2c69 call      0x0000`0000`063B`FA90
063b2c6e and       $1,%al
063b2c70 mov       %al,0x6F(%rsp)
063b2c74 jmp       0x0000`0000`063B`2AA4
063b2c79 mov       0x50(%rsp),%rcx
063b2c7e lea       0x4F0(%rsp),%rdx
063b2c86 call      0x0000`0000`063B`FA90
063b2c8b and       $1,%al
063b2c8d mov       %al,0x6F(%rsp)
063b2c91 jmp       0x0000`0000`063B`2AA4
063b2c96 mov       0x50(%rsp),%rcx
063b2c9b lea       0x4C0(%rsp),%rdx
063b2ca3 call      0x0000`0000`063B`FA90
063b2ca8 and       $1,%al
063b2caa mov       %al,0x6F(%rsp)
063b2cae jmp       0x0000`0000`063B`2AA4
063b2cb3 mov       0x50(%rsp),%rcx
063b2cb8 lea       0x490(%rsp),%rdx
063b2cc0 call      0x0000`0000`063B`FA90
063b2cc5 and       $1,%al
063b2cc7 mov       %al,0x6F(%rsp)
063b2ccb jmp       0x0000`0000`063B`2AA4
063b2cd0 mov       0x50(%rsp),%rcx
063b2cd5 lea       0x460(%rsp),%rdx
063b2cdd call      0x0000`0000`063B`FA90
063b2ce2 and       $1,%al
063b2ce4 mov       %al,0x6F(%rsp)
063b2ce8 jmp       0x0000`0000`063B`2AA4
063b2ced mov       0x50(%rsp),%rcx
063b2cf2 lea       0x430(%rsp),%rdx
063b2cfa call      0x0000`0000`063B`FA90
063b2cff and       $1,%al
063b2d01 mov       %al,0x6F(%rsp)
063b2d05 jmp       0x0000`0000`063B`2AA4
063b2d0a mov       0x50(%rsp),%rcx
063b2d0f lea       0x400(%rsp),%rdx
063b2d17 call      0x0000`0000`063B`FA90
063b2d1c and       $1,%al
063b2d1e mov       %al,0x6F(%rsp)
063b2d22 jmp       0x0000`0000`063B`2AA4
063b2d27 mov       0x50(%rsp),%rcx
063b2d2c lea       0x3D0(%rsp),%rdx
063b2d34 call      0x0000`0000`063B`FA90
063b2d39 and       $1,%al
063b2d3b mov       %al,0x6F(%rsp)
063b2d3f jmp       0x0000`0000`063B`2AA4
063b2d44 mov       0x50(%rsp),%rcx
063b2d49 lea       0x3A0(%rsp),%rdx
063b2d51 call      0x0000`0000`063B`FA90
063b2d56 and       $1,%al
063b2d58 mov       %al,0x6F(%rsp)
063b2d5c jmp       0x0000`0000`063B`2AA4
063b2d61 mov       0x50(%rsp),%rcx
063b2d66 lea       0x370(%rsp),%rdx
063b2d6e call      0x0000`0000`063B`FA90
063b2d73 and       $1,%al
063b2d75 mov       %al,0x6F(%rsp)
063b2d79 jmp       0x0000`0000`063B`2AA4
063b2d7e mov       0x50(%rsp),%rcx
063b2d83 lea       0x340(%rsp),%rdx
063b2d8b call      0x0000`0000`063B`FA90
063b2d90 and       $1,%al
063b2d92 mov       %al,0x6F(%rsp)
063b2d96 jmp       0x0000`0000`063B`2AA4
063b2d9b mov       0x50(%rsp),%rcx
063b2da0 lea       0x310(%rsp),%rdx
063b2da8 call      0x0000`0000`063B`FA90
063b2dad and       $1,%al
063b2daf mov       %al,0x6F(%rsp)
063b2db3 jmp       0x0000`0000`063B`2AA4
063b2db8 mov       0x50(%rsp),%rcx
063b2dbd lea       0x2E0(%rsp),%rdx
063b2dc5 call      0x0000`0000`063B`FA90
063b2dca and       $1,%al
063b2dcc mov       %al,0x6F(%rsp)
063b2dd0 jmp       0x0000`0000`063B`2AA4
063b2dd5 mov       0x50(%rsp),%rcx
063b2dda lea       0x2B0(%rsp),%rdx
063b2de2 call      0x0000`0000`063B`FA90
063b2de7 and       $1,%al
063b2de9 mov       %al,0x6F(%rsp)
063b2ded jmp       0x0000`0000`063B`2AA4
063b2df2 mov       0x50(%rsp),%rcx
063b2df7 lea       0x280(%rsp),%rdx
063b2dff call      0x0000`0000`063B`FA90
063b2e04 and       $1,%al
063b2e06 mov       %al,0x6F(%rsp)
063b2e0a jmp       0x0000`0000`063B`2AA4
063b2e0f mov       0x50(%rsp),%rcx
063b2e14 lea       0x250(%rsp),%rdx
063b2e1c call      0x0000`0000`063B`FA90
063b2e21 and       $1,%al
063b2e23 mov       %al,0x6F(%rsp)
063b2e27 jmp       0x0000`0000`063B`2AA4
063b2e2c mov       0x50(%rsp),%rcx
063b2e31 lea       0x220(%rsp),%rdx
063b2e39 call      0x0000`0000`063B`FA90
063b2e3e and       $1,%al
063b2e40 mov       %al,0x6F(%rsp)
063b2e44 jmp       0x0000`0000`063B`2AA4
063b2e49 mov       0x50(%rsp),%rcx
063b2e4e lea       0x1F0(%rsp),%rdx
063b2e56 call      0x0000`0000`063B`FA90
063b2e5b and       $1,%al
063b2e5d mov       %al,0x6F(%rsp)
063b2e61 jmp       0x0000`0000`063B`2AA4
063b2e66 mov       0x50(%rsp),%rcx
063b2e6b lea       0x1C0(%rsp),%rdx
063b2e73 call      0x0000`0000`063B`FA90
063b2e78 and       $1,%al
063b2e7a mov       %al,0x6F(%rsp)
063b2e7e jmp       0x0000`0000`063B`2AA4
063b2e83 mov       0x50(%rsp),%rcx
063b2e88 lea       0x190(%rsp),%rdx
063b2e90 call      0x0000`0000`063B`FA90
063b2e95 and       $1,%al
063b2e97 mov       %al,0x6F(%rsp)
063b2e9b jmp       0x0000`0000`063B`2AA4
063b2ea0 mov       0x50(%rsp),%rcx
063b2ea5 lea       0x160(%rsp),%rdx
063b2ead call      0x0000`0000`063B`FA90
063b2eb2 and       $1,%al
063b2eb4 mov       %al,0x6F(%rsp)
063b2eb8 jmp       0x0000`0000`063B`2AA4
063b2ebd mov       0x50(%rsp),%rcx
063b2ec2 lea       0x130(%rsp),%rdx
063b2eca call      0x0000`0000`063B`FA90
063b2ecf and       $1,%al
063b2ed1 mov       %al,0x6F(%rsp)
063b2ed5 jmp       0x0000`0000`063B`2AA4
063b2eda mov       0x50(%rsp),%rcx
063b2edf lea       0x100(%rsp),%rdx
063b2ee7 call      0x0000`0000`063B`FA90
063b2eec and       $1,%al
063b2eee mov       %al,0x6F(%rsp)
063b2ef2 jmp       0x0000`0000`063B`2AA4
063b2ef7 mov       0x50(%rsp),%rcx
063b2efc lea       0xD0(%rsp),%rdx
063b2f04 call      0x0000`0000`063B`FA90
063b2f09 and       $1,%al
063b2f0b mov       %al,0x6F(%rsp)
063b2f0f jmp       0x0000`0000`063B`2AA4
063b2f14 mov       0x50(%rsp),%rcx
063b2f19 lea       0xA0(%rsp),%rdx
063b2f21 call      0x0000`0000`063B`FA90
063b2f26 and       $1,%al
063b2f28 mov       %al,0x6F(%rsp)
063b2f2c jmp       0x0000`0000`063B`2AA4
063b2f31 mov       0x50(%rsp),%rcx
063b2f36 lea       0x70(%rsp),%rdx
063b2f3b call      0x0000`0000`063B`FA90
063b2f40 and       $1,%al
063b2f42 mov       %al,0x6F(%rsp)
063b2f46 jmp       0x0000`0000`063B`2AA4

uefi::result::status::impl$14::eq:
063b2f50 sub       $0x20,%rsp
063b2f54 mov       %rcx,(%rsp)
063b2f58 mov       %rdx,8(%rsp)
063b2f5d mov       %rdx,0x10(%rsp)
063b2f62 mov       %rcx,0x18(%rsp)
063b2f67 mov       (%rcx),%rax
063b2f6a cmp       (%rdx),%rax
063b2f6d sete      %al
063b2f70 and       $1,%al
063b2f72 movzbl    %al,%eax
063b2f75 add       $0x20,%rsp
063b2f79 ret

core::fmt::Arguments::new_v1:
063b2f80 sub       $0xC8,%rsp
063b2f87 mov       %r9,0x30(%rsp)
063b2f8c mov       %r8,0x38(%rsp)
063b2f91 mov       %rdx,0x40(%rsp)
063b2f96 mov       %rcx,0x48(%rsp)
063b2f9b mov       %rcx,0x50(%rsp)
063b2fa0 mov       0xF0(%rsp),%rax
063b2fa8 mov       %rax,0x58(%rsp)
063b2fad mov       %rdx,0xA8(%rsp)
063b2fb5 mov       %r8,0xB0(%rsp)
063b2fbd mov       %r9,0xB8(%rsp)
063b2fc5 mov       %rax,0xC0(%rsp)
063b2fcd cmp       %rax,%r8
063b2fd0 jb        0x0000`0000`063B`2FE9
063b2fd2 mov       0x58(%rsp),%rax
063b2fd7 add       $1,%rax
063b2fdb mov       %rax,0x28(%rsp)
063b2fe0 setb      %al
063b2fe3 test      $1,%al
063b2fe5 jne       0x0000`0000`063B`3013
063b2fe7 jmp       0x0000`0000`063B`2FFB
063b2fe9 movb      $1,0x67(%rsp)
063b2fee testb     $1,0x67(%rsp)
063b2ff3 jne       0x0000`0000`063B`3086
063b2ff9 jmp       0x0000`0000`063B`302D
063b2ffb mov       0x38(%rsp),%rax
063b3000 mov       0x28(%rsp),%rcx
063b3005 cmp       %rcx,%rax
063b3008 seta      %al
063b300b and       $1,%al
063b300d mov       %al,0x67(%rsp)
063b3011 jmp       0x0000`0000`063B`2FEE
063b3013 lea       0x63C`DD30,%rcx
063b301a lea       0x63C`DDC8,%r8
063b3021 mov       $0x1C,%edx
063b3026 call      0x0000`0000`063B`8E30
063b302b ud2
063b302d mov       0x50(%rsp),%rax
063b3032 mov       0x48(%rsp),%rcx
063b3037 mov       0x58(%rsp),%rdx
063b303c mov       0x30(%rsp),%r8
063b3041 mov       0x38(%rsp),%r9
063b3046 mov       0x40(%rsp),%r10
063b304b movq      $0,0x98(%rsp)
063b3057 mov       %r10,(%rcx)
063b305a mov       %r9,8(%rcx)
063b305e mov       0x98(%rsp),%r10
063b3066 mov       0xA0(%rsp),%r9
063b306e mov       %r10,0x10(%rcx)
063b3072 mov       %r9,0x18(%rcx)
063b3076 mov       %r8,0x20(%rcx)
063b307a mov       %rdx,0x28(%rcx)
063b307e add       $0xC8,%rsp
063b3085 ret
063b3086 lea       0x68(%rsp),%rcx
063b308b lea       0x63C`DDF0,%rdx
063b3092 mov       $1,%r8d
063b3098 lea       0x63C`DE00,%r9
063b309f xor       %eax,%eax
063b30a1 movq      $0,0x20(%rsp)
063b30aa call      0x0000`0000`063B`2F80
063b30af lea       0x63C`DE00,%rdx
063b30b6 lea       0x68(%rsp),%rcx
063b30bb call      0x0000`0000`063B`8F40
063b30c0 ud2

core::ops::function::FnOnce::call_once<enum$<log::MaybeStaticStr> (*)(str),tuple$<str> >:
063b30d0 sub       $0x48,%rsp
063b30d4 mov       %rcx,%rax
063b30d7 mov       %rax,0x28(%rsp)
063b30dc mov       %rdx,0x30(%rsp)
063b30e1 mov       %r8,0x38(%rsp)
063b30e6 mov       0x30(%rsp),%rdx
063b30eb mov       0x38(%rsp),%r8
063b30f0 call      0x0000`0000`063B`4260
063b30f5 mov       0x28(%rsp),%rax
063b30fa add       $0x48,%rsp
063b30fe ret

core::ptr::drop_in_place<ref$<tuple$<> > >:
063b3100 push      %rax
063b3101 mov       %rcx,(%rsp)
063b3105 pop       %rax
063b3106 ret

core::ptr::drop_in_place<log::NopLogger>:
063b3110 push      %rax
063b3111 mov       %rcx,(%rsp)
063b3115 pop       %rax
063b3116 ret

core::hint::spin_loop:
063b3120 ret

core::sync::atomic::AtomicUsize::compare_exchange:
063b3130 sub       $0x88,%rsp
063b3137 mov       %r9b,0x3F(%rsp)
063b313c mov       %r8,0x40(%rsp)
063b3141 mov       %rdx,0x48(%rsp)
063b3146 mov       0xB0(%rsp),%al
063b314d mov       %al,0x57(%rsp)
063b3151 mov       %rcx,0x60(%rsp)
063b3156 mov       %rdx,0x68(%rsp)
063b315b mov       %r8,0x70(%rsp)
063b3160 mov       %r9b,0x7F(%rsp)
063b3165 mov       %rcx,0x58(%rsp)
063b316a mov       %rcx,0x80(%rsp)
063b3172 mov       0x57(%rsp),%al
063b3176 mov       0x3F(%rsp),%r9b
063b317b mov       0x40(%rsp),%r8
063b3180 mov       0x48(%rsp),%rdx
063b3185 mov       0x58(%rsp),%rcx
063b318a mov       %al,0x20(%rsp)
063b318e call      0x0000`0000`063B`3350
063b3193 mov       %rax,0x28(%rsp)
063b3198 mov       %rdx,0x30(%rsp)
063b319d mov       0x30(%rsp),%rdx
063b31a2 mov       0x28(%rsp),%rax
063b31a7 add       $0x88,%rsp
063b31ae ret

core::sync::atomic::AtomicUsize::load:
063b31b0 sub       $0x58,%rsp
063b31b4 mov       %dl,0x37(%rsp)
063b31b8 mov       %rcx,0x40(%rsp)
063b31bd mov       %dl,0x4F(%rsp)
063b31c1 mov       %rcx,0x38(%rsp)
063b31c6 mov       %rcx,0x50(%rsp)
063b31cb mov       0x37(%rsp),%dl
063b31cf mov       0x38(%rsp),%rcx
063b31d4 call      0x0000`0000`063B`97B0
063b31d9 mov       %rax,0x28(%rsp)
063b31de mov       0x28(%rsp),%rax
063b31e3 add       $0x58,%rsp
063b31e7 ret

core::sync::atomic::AtomicUsize::store:
063b31f0 sub       $0x58,%rsp
063b31f4 mov       %r8b,0x27(%rsp)
063b31f9 mov       %rdx,0x28(%rsp)
063b31fe mov       %rcx,0x38(%rsp)
063b3203 mov       %rdx,0x40(%rsp)
063b3208 mov       %r8b,0x4F(%rsp)
063b320d mov       %rcx,0x30(%rsp)
063b3212 mov       %rcx,0x50(%rsp)
063b3217 mov       0x27(%rsp),%r8b
063b321c mov       0x28(%rsp),%rdx
063b3221 mov       0x30(%rsp),%rcx
063b3226 call      0x0000`0000`063B`3230
063b322b add       $0x58,%rsp
063b322f ret

core::sync::atomic::atomic_store<usize>:
063b3230 sub       $0xB8,%rsp
063b3237 mov       %rdx,0x28(%rsp)
063b323c mov       %rcx,0x30(%rsp)
063b3241 mov       %r8b,0x47(%rsp)
063b3246 mov       %rcx,0xA8(%rsp)
063b324e mov       %rdx,0xB0(%rsp)
063b3256 movzbl    0x47(%rsp),%eax
063b325b mov       %rax,0x38(%rsp)
063b3260 mov       0x38(%rsp),%rax
063b3265 lea       0x63B`3328,%rcx
063b326c movslq    (%rcx,%rax,4),%rax
063b3270 add       %rcx,%rax
063b3273 jmp       *%rax
063b3275 ud2
063b3277 mov       0x30(%rsp),%rax
063b327c mov       0x28(%rsp),%rcx
063b3281 mov       %rcx,(%rax)
063b3284 jmp       0x0000`0000`063B`32F8
063b3286 mov       0x30(%rsp),%rax
063b328b mov       0x28(%rsp),%rcx
063b3290 mov       %rcx,(%rax)
063b3293 jmp       0x0000`0000`063B`32F8
063b3295 lea       0x48(%rsp),%rcx
063b329a lea       0x63C`DF28,%rdx
063b32a1 mov       $1,%r8d
063b32a7 lea       0x63C`DE00,%r9
063b32ae xor       %eax,%eax
063b32b0 movq      $0,0x20(%rsp)
063b32b9 call      0x0000`0000`063B`2F80
063b32be jmp       0x0000`0000`063B`3313
063b32c0 lea       0x78(%rsp),%rcx
063b32c5 lea       0x63C`DE50,%rdx
063b32cc mov       $1,%r8d
063b32d2 lea       0x63C`DE00,%r9
063b32d9 xor       %eax,%eax
063b32db movq      $0,0x20(%rsp)
063b32e4 call      0x0000`0000`063B`2F80
063b32e9 jmp       0x0000`0000`063B`3300
063b32eb mov       0x30(%rsp),%rcx
063b32f0 mov       0x28(%rsp),%rax
063b32f5 xchg      %rax,(%rcx)
063b32f8 add       $0xB8,%rsp
063b32ff ret
063b3300 lea       0x63C`DEE0,%rdx
063b3307 lea       0x78(%rsp),%rcx
063b330c call      0x0000`0000`063B`8F40
063b3311 ud2
063b3313 lea       0x63C`DF38,%rdx
063b331a lea       0x48(%rsp),%rcx
063b331f call      0x0000`0000`063B`8F40
063b3324 ud2

core::sync::atomic::spin_loop_hint:
063b3340 sub       $0x28,%rsp
063b3344 call      0x0000`0000`063B`3120
063b3349 add       $0x28,%rsp
063b334d ret

core::sync::atomic::atomic_compare_exchange<usize>:
063b3350 sub       $0x158,%rsp
063b3357 mov       %r8,0x50(%rsp)
063b335c mov       %rdx,0x58(%rsp)
063b3361 mov       %rcx,0x60(%rsp)
063b3366 mov       0x180(%rsp),%al
063b336d mov       %rcx,0x128(%rsp)
063b3375 mov       %rdx,0x130(%rsp)
063b337d mov       %r8,0x138(%rsp)
063b3385 mov       %r9b,0x147(%rsp)
063b338d mov       %r9b,0x90(%rsp)
063b3395 mov       %al,0x91(%rsp)
063b339c movzbl    0x90(%rsp),%eax
063b33a4 mov       %rax,0x68(%rsp)
063b33a9 mov       0x68(%rsp),%rax
063b33ae lea       0x63B`377C,%rcx
063b33b5 movslq    (%rcx,%rax,4),%rax
063b33b9 add       %rcx,%rax
063b33bc jmp       *%rax
063b33be ud2
063b33c0 movzbl    0x91(%rsp),%eax
063b33c8 cmp       $0,%rax
063b33cc je        0x0000`0000`063B`3646
063b33d2 jmp       0x0000`0000`063B`3472
063b33d7 movzbl    0x91(%rsp),%eax
063b33df cmp       $0,%rax
063b33e3 je        0x0000`0000`063B`3616
063b33e9 jmp       0x0000`0000`063B`3472
063b33ee movzbl    0x91(%rsp),%eax
063b33f6 mov       %rax,0x48(%rsp)
063b33fb test      %rax,%rax
063b33fe je        0x0000`0000`063B`35B6
063b3404 jmp       0x0000`0000`063B`3406
063b3406 mov       0x48(%rsp),%rax
063b340b sub       $2,%rax
063b340f je        0x0000`0000`063B`35E6
063b3415 jmp       0x0000`0000`063B`3472
063b3417 movzbl    0x91(%rsp),%eax
063b341f mov       %rax,0x40(%rsp)
063b3424 test      %rax,%rax
063b3427 je        0x0000`0000`063B`3559
063b342d jmp       0x0000`0000`063B`342F
063b342f mov       0x40(%rsp),%rax
063b3434 sub       $2,%rax
063b3438 je        0x0000`0000`063B`3586
063b343e jmp       0x0000`0000`063B`3472
063b3440 movzbl    0x91(%rsp),%eax
063b3448 mov       %rax,0x38(%rsp)
063b344d test      %rax,%rax
063b3450 je        0x0000`0000`063B`349F
063b3452 jmp       0x0000`0000`063B`3454
063b3454 mov       0x38(%rsp),%rax
063b3459 sub       $2,%rax
063b345d je        0x0000`0000`063B`34CC
063b345f jmp       0x0000`0000`063B`3461
063b3461 mov       0x38(%rsp),%rax
063b3466 sub       $4,%rax
063b346a je        0x0000`0000`063B`34F9
063b3470 jmp       0x0000`0000`063B`3472
063b3472 movzbl    0x91(%rsp),%eax
063b347a mov       %rax,0x30(%rsp)
063b347f sub       $1,%rax
063b3483 je        0x0000`0000`063B`36A4
063b3489 jmp       0x0000`0000`063B`348B
063b348b mov       0x30(%rsp),%rax
063b3490 sub       $3,%rax
063b3494 je        0x0000`0000`063B`36D2
063b349a jmp       0x0000`0000`063B`3676
063b349f mov       0x60(%rsp),%rcx
063b34a4 mov       0x50(%rsp),%rdx
063b34a9 mov       0x58(%rsp),%rax
063b34ae lock cmpxchg %rdx,(%rcx)
063b34b3 mov       %rax,%rcx
063b34b6 sete      %al
063b34b9 and       $1,%al
063b34bb mov       %rcx,0x80(%rsp)
063b34c3 mov       %al,0x88(%rsp)
063b34ca jmp       0x0000`0000`063B`3524
063b34cc mov       0x60(%rsp),%rcx
063b34d1 mov       0x50(%rsp),%rdx
063b34d6 mov       0x58(%rsp),%rax
063b34db lock cmpxchg %rdx,(%rcx)
063b34e0 mov       %rax,%rcx
063b34e3 sete      %al
063b34e6 and       $1,%al
063b34e8 mov       %rcx,0x80(%rsp)
063b34f0 mov       %al,0x88(%rsp)
063b34f7 jmp       0x0000`0000`063B`3524
063b34f9 mov       0x60(%rsp),%rcx
063b34fe mov       0x50(%rsp),%rdx
063b3503 mov       0x58(%rsp),%rax
063b3508 lock cmpxchg %rdx,(%rcx)
063b350d mov       %rax,%rcx
063b3510 sete      %al
063b3513 and       $1,%al
063b3515 mov       %rcx,0x80(%rsp)
063b351d mov       %al,0x88(%rsp)
063b3524 mov       0x80(%rsp),%rax
063b352c mov       %rax,0x28(%rsp)
063b3531 mov       %rax,0x148(%rsp)
063b3539 mov       0x88(%rsp),%al
063b3540 mov       %al,%cl
063b3542 and       $1,%cl
063b3545 mov       %cl,0x157(%rsp)
063b354c test      $1,%al
063b354e jne       0x0000`0000`063B`3757
063b3554 jmp       0x0000`0000`063B`3742
063b3559 mov       0x60(%rsp),%rcx
063b355e mov       0x50(%rsp),%rdx
063b3563 mov       0x58(%rsp),%rax
063b3568 lock cmpxchg %rdx,(%rcx)
063b356d mov       %rax,%rcx
063b3570 sete      %al
063b3573 and       $1,%al
063b3575 mov       %rcx,0x80(%rsp)
063b357d mov       %al,0x88(%rsp)
063b3584 jmp       0x0000`0000`063B`3524
063b3586 mov       0x60(%rsp),%rcx
063b358b mov       0x50(%rsp),%rdx
063b3590 mov       0x58(%rsp),%rax
063b3595 lock cmpxchg %rdx,(%rcx)
063b359a mov       %rax,%rcx
063b359d sete      %al
063b35a0 and       $1,%al
063b35a2 mov       %rcx,0x80(%rsp)
063b35aa mov       %al,0x88(%rsp)
063b35b1 jmp       0x0000`0000`063B`3524
063b35b6 mov       0x60(%rsp),%rcx
063b35bb mov       0x50(%rsp),%rdx
063b35c0 mov       0x58(%rsp),%rax
063b35c5 lock cmpxchg %rdx,(%rcx)
063b35ca mov       %rax,%rcx
063b35cd sete      %al
063b35d0 and       $1,%al
063b35d2 mov       %rcx,0x80(%rsp)
063b35da mov       %al,0x88(%rsp)
063b35e1 jmp       0x0000`0000`063B`3524
063b35e6 mov       0x60(%rsp),%rcx
063b35eb mov       0x50(%rsp),%rdx
063b35f0 mov       0x58(%rsp),%rax
063b35f5 lock cmpxchg %rdx,(%rcx)
063b35fa mov       %rax,%rcx
063b35fd sete      %al
063b3600 and       $1,%al
063b3602 mov       %rcx,0x80(%rsp)
063b360a mov       %al,0x88(%rsp)
063b3611 jmp       0x0000`0000`063B`3524
063b3616 mov       0x60(%rsp),%rcx
063b361b mov       0x50(%rsp),%rdx
063b3620 mov       0x58(%rsp),%rax
063b3625 lock cmpxchg %rdx,(%rcx)
063b362a mov       %rax,%rcx
063b362d sete      %al
063b3630 and       $1,%al
063b3632 mov       %rcx,0x80(%rsp)
063b363a mov       %al,0x88(%rsp)
063b3641 jmp       0x0000`0000`063B`3524
063b3646 mov       0x60(%rsp),%rcx
063b364b mov       0x50(%rsp),%rdx
063b3650 mov       0x58(%rsp),%rax
063b3655 lock cmpxchg %rdx,(%rcx)
063b365a mov       %rax,%rcx
063b365d sete      %al
063b3660 and       $1,%al
063b3662 mov       %rcx,0x80(%rsp)
063b366a mov       %al,0x88(%rsp)
063b3671 jmp       0x0000`0000`063B`3524
063b3676 lea       0xF8(%rsp),%rcx
063b367e lea       0x63C`DF90,%rdx
063b3685 mov       $1,%r8d
063b368b lea       0x63C`DE00,%r9
063b3692 xor       %eax,%eax
063b3694 movq      $0,0x20(%rsp)
063b369d call      0x0000`0000`063B`2F80
063b36a2 jmp       0x0000`0000`063B`3700
063b36a4 lea       0xC8(%rsp),%rcx
063b36ac lea       0x63C`E058,%rdx
063b36b3 mov       $1,%r8d
063b36b9 lea       0x63C`DE00,%r9
063b36c0 xor       %eax,%eax
063b36c2 movq      $0,0x20(%rsp)
063b36cb call      0x0000`0000`063B`2F80
063b36d0 jmp       0x0000`0000`063B`372C
063b36d2 lea       0x98(%rsp),%rcx
063b36da lea       0x63C`DFF8,%rdx
063b36e1 mov       $1,%r8d
063b36e7 lea       0x63C`DE00,%r9
063b36ee xor       %eax,%eax
063b36f0 movq      $0,0x20(%rsp)
063b36f9 call      0x0000`0000`063B`2F80
063b36fe jmp       0x0000`0000`063B`3716
063b3700 lea       0x63C`DFA0,%rdx
063b3707 lea       0xF8(%rsp),%rcx
063b370f call      0x0000`0000`063B`8F40
063b3714 ud2
063b3716 lea       0x63C`E008,%rdx
063b371d lea       0x98(%rsp),%rcx
063b3725 call      0x0000`0000`063B`8F40
063b372a ud2
063b372c lea       0x63C`E068,%rdx
063b3733 lea       0xC8(%rsp),%rcx
063b373b call      0x0000`0000`063B`8F40
063b3740 ud2
063b3742 mov       0x28(%rsp),%rax
063b3747 mov       %rax,0x78(%rsp)
063b374c movq      $1,0x70(%rsp)
063b3755 jmp       0x0000`0000`063B`376A
063b3757 mov       0x28(%rsp),%rax
063b375c mov       %rax,0x78(%rsp)
063b3761 movq      $0,0x70(%rsp)
063b376a mov       0x70(%rsp),%rax
063b376f mov       0x78(%rsp),%rdx
063b3774 add       $0x158,%rsp
063b377b ret

core::clone::impls::impl$8::clone:
063b3790 push      %rax
063b3791 mov       %rcx,(%rsp)
063b3795 mov       (%rcx),%eax
063b3797 pop       %rcx
063b3798 ret

enum$<core::option::Option<str>, 1, 18446744073709551615, Some>::map<str,enum$<log::MaybeStaticStr>,enum$<log::MaybeStaticStr> (*)(str)>:
063b37a0 sub       $0x88,%rsp
063b37a7 mov       %rcx,0x20(%rsp)
063b37ac mov       %rcx,0x28(%rsp)
063b37b1 mov       %rdx,0x30(%rsp)
063b37b6 mov       %r8,0x38(%rsp)
063b37bb movb      $0,0x6F(%rsp)
063b37c0 movb      $1,0x6F(%rsp)
063b37c5 mov       0x30(%rsp),%rax
063b37ca test      %rax,%rax
063b37cd setne     %al
063b37d0 movzbl    %al,%eax
063b37d3 je        0x0000`0000`063B`37DB
063b37d5 jmp       0x0000`0000`063B`37D7
063b37d7 jmp       0x0000`0000`063B`37E9
063b37d9 ud2
063b37db mov       0x20(%rsp),%rax
063b37e0 movq      $2,(%rax)
063b37e7 jmp       0x0000`0000`063B`3842
063b37e9 mov       0x30(%rsp),%rcx
063b37ee mov       0x38(%rsp),%rax
063b37f3 mov       %rcx,0x78(%rsp)
063b37f8 mov       %rax,0x80(%rsp)
063b3800 movb      $0,0x6F(%rsp)
063b3805 mov       %rcx,0x58(%rsp)
063b380a mov       %rax,0x60(%rsp)
063b380f mov       0x58(%rsp),%rdx
063b3814 mov       0x60(%rsp),%r8
063b3819 lea       0x40(%rsp),%rcx
063b381e call      0x0000`0000`063B`30D0
063b3823 mov       0x20(%rsp),%rax
063b3828 mov       0x40(%rsp),%rcx
063b382d mov       %rcx,(%rax)
063b3830 mov       0x48(%rsp),%rcx
063b3835 mov       %rcx,8(%rax)
063b3839 mov       0x50(%rsp),%rcx
063b383e mov       %rcx,0x10(%rax)
063b3842 testb     $1,0x6F(%rsp)
063b3847 jne       0x0000`0000`063B`3856
063b3849 mov       0x28(%rsp),%rax
063b384e add       $0x88,%rsp
063b3855 ret
063b3856 jmp       0x0000`0000`063B`3849

core::fmt::impl$51::clone:
063b3860 sub       $0x38,%rsp
063b3864 mov       %rcx,%rax
063b3867 mov       %rax,0x28(%rsp)
063b386c mov       %rdx,0x30(%rsp)
063b3871 mov       $0x30,%r8d
063b3877 call      0x0000`0000`063C`AB90
063b387c mov       0x28(%rsp),%rax
063b3881 add       $0x38,%rsp
063b3885 ret

core::option::impl$5::clone<u32>:
063b3890 sub       $0x48,%rsp
063b3894 mov       %rcx,0x28(%rsp)
063b3899 mov       %rcx,0x38(%rsp)
063b389e mov       (%rcx),%eax
063b38a0 test      %rax,%rax
063b38a3 je        0x0000`0000`063B`38AB
063b38a5 jmp       0x0000`0000`063B`38A7
063b38a7 jmp       0x0000`0000`063B`38B5
063b38a9 ud2
063b38ab movl      $0,0x30(%rsp)
063b38b3 jmp       0x0000`0000`063B`38DC
063b38b5 mov       0x28(%rsp),%rcx
063b38ba add       $4,%rcx
063b38be mov       %rcx,0x40(%rsp)
063b38c3 call      0x0000`0000`063B`3790
063b38c8 mov       %eax,0x24(%rsp)
063b38cc mov       0x24(%rsp),%eax
063b38d0 mov       %eax,0x34(%rsp)
063b38d4 movl      $1,0x30(%rsp)
063b38dc mov       0x30(%rsp),%eax
063b38e0 mov       0x34(%rsp),%edx
063b38e4 add       $0x48,%rsp
063b38e8 ret

core::option::impl$5::clone<enum$<log::MaybeStaticStr> >:
063b38f0 sub       $0x68,%rsp
063b38f4 mov       %rdx,0x28(%rsp)
063b38f9 mov       %rcx,0x30(%rsp)
063b38fe mov       %rcx,0x38(%rsp)
063b3903 mov       %rdx,0x58(%rsp)
063b3908 mov       (%rdx),%rax
063b390b add       $0xFFFF`FFFF`FFFF`FFFE,%rax
063b390f setne     %al
063b3912 movzbl    %al,%eax
063b3915 je        0x0000`0000`063B`391D
063b3917 jmp       0x0000`0000`063B`3919
063b3919 jmp       0x0000`0000`063B`392B
063b391b ud2
063b391d mov       0x30(%rsp),%rax
063b3922 movq      $2,(%rax)
063b3929 jmp       0x0000`0000`063B`395E
063b392b mov       0x28(%rsp),%rdx
063b3930 mov       %rdx,0x60(%rsp)
063b3935 lea       0x40(%rsp),%rcx
063b393a call      0x0000`0000`063B`4290
063b393f mov       0x30(%rsp),%rax
063b3944 mov       0x40(%rsp),%rcx
063b3949 mov       %rcx,(%rax)
063b394c mov       0x48(%rsp),%rcx
063b3951 mov       %rcx,8(%rax)
063b3955 mov       0x50(%rsp),%rcx
063b395a mov       %rcx,0x10(%rax)
063b395e mov       0x38(%rsp),%rax
063b3963 add       $0x68,%rsp
063b3967 ret

log::impl$0::clone:
063b3970 push      %rax
063b3971 mov       %rcx,(%rsp)
063b3975 mov       (%rcx),%rax
063b3978 pop       %rcx
063b3979 ret

log::impl$7::fmt:
063b3980 sub       $0x58,%rsp
063b3984 mov       %rdx,0x30(%rsp)
063b3989 mov       %rcx,0x48(%rsp)
063b398e mov       %rdx,0x50(%rsp)
063b3993 call      0x0000`0000`063B`39D0
063b3998 mov       %rax,0x38(%rsp)
063b399d mov       %rdx,0x40(%rsp)
063b39a2 mov       0x40(%rsp),%r8
063b39a7 mov       0x38(%rsp),%rdx
063b39ac mov       0x30(%rsp),%rcx
063b39b1 call      0x0000`0000`063B`F380
063b39b6 mov       %al,0x2F(%rsp)
063b39ba mov       0x2F(%rsp),%al
063b39be and       $1,%al
063b39c0 movzbl    %al,%eax
063b39c3 add       $0x58,%rsp
063b39c7 ret

log::Level::as_str:
063b39d0 sub       $0x38,%rsp
063b39d4 mov       %rcx,0x30(%rsp)
063b39d9 mov       (%rcx),%rax
063b39dc mov       %rax,0x28(%rsp)
063b39e1 cmp       $6,%rax
063b39e5 setb      %al
063b39e8 test      $1,%al
063b39ea jne       0x0000`0000`063B`39EE
063b39ec jmp       0x0000`0000`063B`3A0C
063b39ee mov       0x28(%rsp),%rcx
063b39f3 shl       $4,%rcx
063b39f7 lea       0x63C`E0F0,%rdx
063b39fe mov       (%rcx,%rdx),%rax
063b3a02 mov       8(%rcx,%rdx),%rdx
063b3a07 add       $0x38,%rsp
063b3a0b ret
063b3a0c mov       0x28(%rsp),%rcx
063b3a11 lea       0x63C`E1A8,%r8
063b3a18 mov       $6,%edx
063b3a1d call      0x0000`0000`063B`8E90
063b3a22 ud2

log::Record::builder:
063b3a30 sub       $0x28,%rsp
063b3a34 mov       %rcx,%rax
063b3a37 mov       %rax,0x20(%rsp)
063b3a3c call      0x0000`0000`063B`3A50
063b3a41 mov       0x20(%rsp),%rax
063b3a46 add       $0x28,%rsp
063b3a4a ret

log::RecordBuilder::new:
063b3a50 sub       $0x158,%rsp
063b3a57 mov       %rcx,0x30(%rsp)
063b3a5c mov       %rcx,0x38(%rsp)
063b3a61 lea       0xC0(%rsp),%rcx
063b3a69 lea       0x63C`DE00,%r9
063b3a70 mov       %r9,%rdx
063b3a73 xor       %eax,%eax
063b3a75 mov       %eax,%r8d
063b3a78 movq      $0,0x20(%rsp)
063b3a81 call      0x0000`0000`063B`2F80
063b3a86 lea       0x108(%rsp),%rcx
063b3a8e call      0x0000`0000`063B`3D30
063b3a93 lea       0xF0(%rsp),%rcx
063b3a9b lea       0x108(%rsp),%rdx
063b3aa3 call      0x0000`0000`063B`3DA0
063b3aa8 movq      $2,0x120(%rsp)
063b3ab4 movq      $2,0x138(%rsp)
063b3ac0 movl      $0,0x150(%rsp)
063b3acb mov       0xF0(%rsp),%rax
063b3ad3 mov       %rax,0x40(%rsp)
063b3ad8 mov       0xF8(%rsp),%rax
063b3ae0 mov       %rax,0x48(%rsp)
063b3ae5 mov       0x100(%rsp),%rax
063b3aed mov       %rax,0x50(%rsp)
063b3af2 lea       0x40(%rsp),%rcx
063b3af7 add       $0x18,%rcx
063b3afb lea       0xC0(%rsp),%rdx
063b3b03 mov       $0x30,%r8d
063b3b09 call      0x0000`0000`063C`AB90
063b3b0e mov       0x30(%rsp),%rcx
063b3b13 mov       0x120(%rsp),%rax
063b3b1b mov       %rax,0x88(%rsp)
063b3b23 mov       0x128(%rsp),%rax
063b3b2b mov       %rax,0x90(%rsp)
063b3b33 mov       0x130(%rsp),%rax
063b3b3b mov       %rax,0x98(%rsp)
063b3b43 mov       0x138(%rsp),%rax
063b3b4b mov       %rax,0xA0(%rsp)
063b3b53 mov       0x140(%rsp),%rax
063b3b5b mov       %rax,0xA8(%rsp)
063b3b63 mov       0x148(%rsp),%rax
063b3b6b mov       %rax,0xB0(%rsp)
063b3b73 mov       0x150(%rsp),%edx
063b3b7a mov       0x154(%rsp),%eax
063b3b81 mov       %edx,0xB8(%rsp)
063b3b88 mov       %eax,0xBC(%rsp)
063b3b8f lea       0x40(%rsp),%rdx
063b3b94 mov       $0x80,%r8d
063b3b9a call      0x0000`0000`063C`AB90
063b3b9f mov       0x38(%rsp),%rax
063b3ba4 add       $0x158,%rsp
063b3bab ret

log::RecordBuilder::args:
063b3bb0 sub       $0x68,%rsp
063b3bb4 mov       %rcx,0x28(%rsp)
063b3bb9 mov       %rcx,0x60(%rsp)
063b3bbe lea       0x30(%rsp),%rcx
063b3bc3 mov       $0x30,%r8d
063b3bc9 call      0x0000`0000`063C`AB90
063b3bce mov       0x28(%rsp),%rcx
063b3bd3 add       $0x18,%rcx
063b3bd7 lea       0x30(%rsp),%rdx
063b3bdc mov       $0x30,%r8d
063b3be2 call      0x0000`0000`063C`AB90
063b3be7 mov       0x28(%rsp),%rax
063b3bec add       $0x68,%rsp
063b3bf0 ret

log::RecordBuilder::level:
063b3c00 sub       $0x10,%rsp
063b3c04 mov       %rcx,%rax
063b3c07 mov       %rax,(%rsp)
063b3c0b mov       %rdx,8(%rsp)
063b3c10 mov       %rdx,(%rax)
063b3c13 add       $0x10,%rsp
063b3c17 ret

log::RecordBuilder::target:
063b3c20 sub       $0x18,%rsp
063b3c24 mov       %rcx,%rax
063b3c27 mov       %rax,(%rsp)
063b3c2b mov       %rdx,8(%rsp)
063b3c30 mov       %r8,0x10(%rsp)
063b3c35 mov       %rdx,8(%rax)
063b3c39 mov       %r8,0x10(%rax)
063b3c3d add       $0x18,%rsp
063b3c41 ret

log::RecordBuilder::module_path_static:
063b3c50 sub       $0x58,%rsp
063b3c54 mov       %rcx,0x20(%rsp)
063b3c59 mov       %rcx,0x40(%rsp)
063b3c5e mov       %rdx,0x48(%rsp)
063b3c63 mov       %r8,0x50(%rsp)
063b3c68 lea       0x28(%rsp),%rcx
063b3c6d call      0x0000`0000`063B`37A0
063b3c72 mov       0x20(%rsp),%rax
063b3c77 mov       0x28(%rsp),%rcx
063b3c7c mov       %rcx,0x48(%rax)
063b3c80 mov       0x30(%rsp),%rcx
063b3c85 mov       %rcx,0x50(%rax)
063b3c89 mov       0x38(%rsp),%rcx
063b3c8e mov       %rcx,0x58(%rax)
063b3c92 add       $0x58,%rsp
063b3c96 ret

log::RecordBuilder::file_static:
063b3ca0 sub       $0x58,%rsp
063b3ca4 mov       %rcx,0x20(%rsp)
063b3ca9 mov       %rcx,0x40(%rsp)
063b3cae mov       %rdx,0x48(%rsp)
063b3cb3 mov       %r8,0x50(%rsp)
063b3cb8 lea       0x28(%rsp),%rcx
063b3cbd call      0x0000`0000`063B`37A0
063b3cc2 mov       0x20(%rsp),%rax
063b3cc7 mov       0x28(%rsp),%rcx
063b3ccc mov       %rcx,0x60(%rax)
063b3cd0 mov       0x30(%rsp),%rcx
063b3cd5 mov       %rcx,0x68(%rax)
063b3cd9 mov       0x38(%rsp),%rcx
063b3cde mov       %rcx,0x70(%rax)
063b3ce2 add       $0x58,%rsp
063b3ce6 ret

log::RecordBuilder::line:
063b3cf0 sub       $0x10,%rsp
063b3cf4 mov       %rcx,%rax
063b3cf7 mov       %rax,(%rsp)
063b3cfb mov       %edx,8(%rsp)
063b3cff mov       %r8d,0xC(%rsp)
063b3d04 mov       %edx,0x78(%rax)
063b3d07 mov       %r8d,0x7C(%rax)
063b3d0b add       $0x10,%rsp
063b3d0f ret

log::RecordBuilder::build:
063b3d10 sub       $0x38,%rsp
063b3d14 mov       %rcx,%rax
063b3d17 mov       %rax,0x28(%rsp)
063b3d1c mov       %rdx,0x30(%rsp)
063b3d21 call      0x0000`0000`063B`42B0
063b3d26 mov       0x28(%rsp),%rax
063b3d2b add       $0x38,%rsp
063b3d2f ret

log::Metadata::builder:
063b3d30 sub       $0x28,%rsp
063b3d34 mov       %rcx,%rax
063b3d37 mov       %rax,0x20(%rsp)
063b3d3c call      0x0000`0000`063B`3D50
063b3d41 mov       0x20(%rsp),%rax
063b3d46 add       $0x28,%rsp
063b3d4a ret

log::MetadataBuilder::new:
063b3d50 sub       $0x18,%rsp
063b3d54 mov       %rcx,%rax
063b3d57 movq      $3,(%rsp)
063b3d5f lea       0x63C`DE00,%rdx
063b3d66 mov       %rdx,8(%rsp)
063b3d6b movq      $0,0x10(%rsp)
063b3d74 mov       (%rsp),%rdx
063b3d78 mov       %rdx,(%rcx)
063b3d7b mov       8(%rsp),%rdx
063b3d80 mov       %rdx,8(%rcx)
063b3d84 mov       0x10(%rsp),%rdx
063b3d89 mov       %rdx,0x10(%rcx)
063b3d8d add       $0x18,%rsp
063b3d91 ret

log::MetadataBuilder::build:
063b3da0 sub       $0x38,%rsp
063b3da4 mov       %rcx,%rax
063b3da7 mov       %rax,0x28(%rsp)
063b3dac mov       %rdx,0x30(%rsp)
063b3db1 call      0x0000`0000`063B`4410
063b3db6 mov       0x28(%rsp),%rax
063b3dbb add       $0x38,%rsp
063b3dbf ret

log::impl$23::enabled:
063b3dc0 sub       $0x10,%rsp
063b3dc4 mov       %rcx,(%rsp)
063b3dc8 mov       %rdx,8(%rsp)
063b3dcd xor       %eax,%eax
063b3dcf and       $1,%al
063b3dd1 movzbl    %al,%eax
063b3dd4 add       $0x10,%rsp
063b3dd8 ret

log::impl$23::log:
063b3de0 sub       $0x10,%rsp
063b3de4 mov       %rcx,(%rsp)
063b3de8 mov       %rdx,8(%rsp)
063b3ded add       $0x10,%rsp
063b3df1 ret

log::impl$23::flush:
063b3e00 push      %rax
063b3e01 mov       %rcx,(%rsp)
063b3e05 pop       %rax
063b3e06 ret

log::set_logger:
063b3e10 sub       $0x48,%rsp
063b3e14 mov       %rcx,0x30(%rsp)
063b3e19 mov       %rdx,0x38(%rsp)
063b3e1e lea       0x30(%rsp),%rax
063b3e23 mov       %rax,0x40(%rsp)
063b3e28 mov       0x40(%rsp),%rcx
063b3e2d call      0x0000`0000`063B`3E60
063b3e32 mov       %al,0x2F(%rsp)
063b3e36 mov       0x2F(%rsp),%al
063b3e3a and       $1,%al
063b3e3c movzbl    %al,%eax
063b3e3f add       $0x48,%rsp
063b3e43 ret

log::set_logger::closure$0:
063b3e50 push      %rax
063b3e51 mov       %rcx,(%rsp)
063b3e55 mov       (%rcx),%rax
063b3e58 mov       8(%rcx),%rdx
063b3e5c pop       %rcx
063b3e5d ret

log::set_logger_inner<log::set_logger::closure_env$0>:
063b3e60 sub       $0x98,%rsp
063b3e67 mov       %rcx,0x50(%rsp)
063b3e6c mov       %rcx,0x88(%rsp)
063b3e74 movb      $0,0x87(%rsp)
063b3e7c movb      $1,0x87(%rsp)
063b3e84 movb      $4,0x76(%rsp)
063b3e89 movb      $4,0x77(%rsp)
063b3e8e mov       0x76(%rsp),%r9b
063b3e93 mov       0x77(%rsp),%cl
063b3e97 mov       %rsp,%rax
063b3e9a mov       %cl,0x20(%rax)
063b3e9d lea       0x63D`1E78,%rcx
063b3ea4 xor       %eax,%eax
063b3ea6 mov       %eax,%edx
063b3ea8 mov       $1,%r8d
063b3eae call      0x0000`0000`063B`3130
063b3eb3 mov       %rdx,0x68(%rsp)
063b3eb8 mov       %rax,0x60(%rsp)
063b3ebd mov       0x60(%rsp),%rax
063b3ec2 test      %rax,%rax
063b3ec5 je        0x0000`0000`063B`3ECD
063b3ec7 jmp       0x0000`0000`063B`3EC9
063b3ec9 jmp       0x0000`0000`063B`3ED9
063b3ecb ud2
063b3ecd mov       0x68(%rsp),%rax
063b3ed2 mov       %rax,0x78(%rsp)
063b3ed7 jmp       0x0000`0000`063B`3EE3
063b3ed9 mov       0x68(%rsp),%rax
063b3ede mov       %rax,0x78(%rsp)
063b3ee3 mov       0x78(%rsp),%rax
063b3ee8 mov       %rax,0x48(%rsp)
063b3eed mov       %rax,0x90(%rsp)
063b3ef5 test      %rax,%rax
063b3ef8 je        0x0000`0000`063B`3F10
063b3efa jmp       0x0000`0000`063B`3EFC
063b3efc mov       0x48(%rsp),%rax
063b3f01 sub       $1,%rax
063b3f05 je        0x0000`0000`063B`3F2E
063b3f07 jmp       0x0000`0000`063B`3F09
063b3f09 movb      $1,0x5F(%rsp)
063b3f0e jmp       0x0000`0000`063B`3F50
063b3f10 mov       0x50(%rsp),%rcx
063b3f15 movb      $0,0x87(%rsp)
063b3f1d call      0x0000`0000`063B`3E50
063b3f22 mov       %rax,0x38(%rsp)
063b3f27 mov       %rdx,0x40(%rsp)
063b3f2c jmp       0x0000`0000`063B`3F75
063b3f2e movb      $4,0x86(%rsp)
063b3f36 mov       0x86(%rsp),%dl
063b3f3d lea       0x63D`1E78,%rcx
063b3f44 call      0x0000`0000`063B`31B0
063b3f49 mov       %rax,0x30(%rsp)
063b3f4e jmp       0x0000`0000`063B`3F5C
063b3f50 testb     $1,0x87(%rsp)
063b3f58 jne       0x0000`0000`063B`3FC6
063b3f5a jmp       0x0000`0000`063B`3FB5
063b3f5c mov       0x30(%rsp),%rax
063b3f61 cmp       $1,%rax
063b3f65 je        0x0000`0000`063B`3F6E
063b3f67 movb      $1,0x5F(%rsp)
063b3f6c jmp       0x0000`0000`063B`3F50
063b3f6e call      0x0000`0000`063B`3340
063b3f73 jmp       0x0000`0000`063B`3F2E
063b3f75 mov       0x40(%rsp),%rax
063b3f7a mov       0x38(%rsp),%rcx
063b3f7f mov       %rcx,0x63D`1E40
063b3f86 mov       %rax,0x63D`1E48
063b3f8d movb      $4,0x85(%rsp)
063b3f95 mov       0x85(%rsp),%r8b
063b3f9d lea       0x63D`1E78,%rcx
063b3fa4 mov       $2,%edx
063b3fa9 call      0x0000`0000`063B`31F0
063b3fae movb      $0,0x5F(%rsp)
063b3fb3 jmp       0x0000`0000`063B`3F50
063b3fb5 mov       0x5F(%rsp),%al
063b3fb9 and       $1,%al
063b3fbb movzbl    %al,%eax
063b3fbe add       $0x98,%rsp
063b3fc5 ret
063b3fc6 jmp       0x0000`0000`063B`3FB5

log::logger:
063b3fd0 sub       $0x48,%rsp
063b3fd4 movb      $4,0x47(%rsp)
063b3fd9 mov       0x47(%rsp),%dl
063b3fdd lea       0x63D`1E78,%rcx
063b3fe4 call      0x0000`0000`063B`31B0
063b3fe9 mov       %rax,0x28(%rsp)
063b3fee mov       0x28(%rsp),%rax
063b3ff3 cmp       $2,%rax
063b3ff7 jne       0x0000`0000`063B`4013
063b3ff9 mov       0x63D`1E40,%rcx
063b4000 mov       0x63D`1E48,%rax
063b4007 mov       %rcx,0x30(%rsp)
063b400c mov       %rax,0x38(%rsp)
063b4011 jmp       0x0000`0000`063B`402B
063b4013 lea       0x63C`E1C0,%rax
063b401a mov       %rax,0x30(%rsp)
063b401f lea       0x63C`E098,%rax
063b4026 mov       %rax,0x38(%rsp)
063b402b mov       0x30(%rsp),%rax
063b4030 mov       0x38(%rsp),%rdx
063b4035 add       $0x48,%rsp
063b4039 ret

log::__private_api_log:
063b4040 sub       $0x258,%rsp
063b4047 mov       %r8,0x58(%rsp)
063b404c mov       %rdx,0x60(%rsp)
063b4051 mov       %rcx,0x68(%rsp)
063b4056 mov       %rdx,0x210(%rsp)
063b405e mov       %r8,0x218(%rsp)
063b4066 mov       (%r8),%rcx
063b4069 mov       %rcx,0x70(%rsp)
063b406e mov       8(%r8),%rax
063b4072 mov       %rax,0x78(%rsp)
063b4077 mov       %rcx,0x220(%rsp)
063b407f mov       %rax,0x228(%rsp)
063b4087 mov       0x10(%r8),%rcx
063b408b mov       %rcx,0x80(%rsp)
063b4093 mov       0x18(%r8),%rax
063b4097 mov       %rax,0x88(%rsp)
063b409f mov       %rcx,0x230(%rsp)
063b40a7 mov       %rax,0x238(%rsp)
063b40af mov       0x20(%r8),%rcx
063b40b3 mov       %rcx,0x90(%rsp)
063b40bb mov       0x28(%r8),%rax
063b40bf mov       %rax,0x98(%rsp)
063b40c7 mov       %rcx,0x240(%rsp)
063b40cf mov       %rax,0x248(%rsp)
063b40d7 mov       0x30(%r8),%eax
063b40db mov       %eax,0xA4(%rsp)
063b40e2 mov       %eax,0x254(%rsp)
063b40e9 call      0x0000`0000`063B`3FD0
063b40ee mov       %rax,0xA8(%rsp)
063b40f6 mov       %rdx,0xB0(%rsp)
063b40fe lea       0x138(%rsp),%rcx
063b4106 call      0x0000`0000`063B`3A30
063b410b mov       0x68(%rsp),%rdx
063b4110 lea       0x1B8(%rsp),%rcx
063b4118 mov       $0x30,%r8d
063b411e call      0x0000`0000`063C`AB90
063b4123 lea       0x138(%rsp),%rcx
063b412b lea       0x1B8(%rsp),%rdx
063b4133 call      0x0000`0000`063B`3BB0
063b4138 mov       %rax,0x50(%rsp)
063b413d mov       0x60(%rsp),%rdx
063b4142 mov       0x50(%rsp),%rcx
063b4147 call      0x0000`0000`063B`3C00
063b414c mov       %rax,0x48(%rsp)
063b4151 mov       0x78(%rsp),%r8
063b4156 mov       0x70(%rsp),%rdx
063b415b mov       0x48(%rsp),%rcx
063b4160 call      0x0000`0000`063B`3C20
063b4165 mov       %rax,0x40(%rsp)
063b416a mov       0x40(%rsp),%rcx
063b416f mov       0x88(%rsp),%rax
063b4177 mov       0x80(%rsp),%rdx
063b417f mov       %rdx,0x1E8(%rsp)
063b4187 mov       %rax,0x1F0(%rsp)
063b418f mov       0x1E8(%rsp),%rdx
063b4197 mov       0x1F0(%rsp),%r8
063b419f call      0x0000`0000`063B`3C50
063b41a4 mov       %rax,0x38(%rsp)
063b41a9 mov       0x38(%rsp),%rcx
063b41ae mov       0x98(%rsp),%rax
063b41b6 mov       0x90(%rsp),%rdx
063b41be mov       %rdx,0x1F8(%rsp)
063b41c6 mov       %rax,0x200(%rsp)
063b41ce mov       0x1F8(%rsp),%rdx
063b41d6 mov       0x200(%rsp),%r8
063b41de call      0x0000`0000`063B`3CA0
063b41e3 mov       %rax,0x30(%rsp)
063b41e8 mov       0x30(%rsp),%rcx
063b41ed mov       0xA4(%rsp),%eax
063b41f4 mov       %eax,0x20C(%rsp)
063b41fb movl      $1,0x208(%rsp)
063b4206 mov       0x208(%rsp),%edx
063b420d mov       0x20C(%rsp),%r8d
063b4215 call      0x0000`0000`063B`3CF0
063b421a mov       %rax,0x28(%rsp)
063b421f mov       0x28(%rsp),%rdx
063b4224 lea       0xB8(%rsp),%rcx
063b422c call      0x0000`0000`063B`3D10
063b4231 mov       0xB0(%rsp),%rax
063b4239 mov       0xA8(%rsp),%rcx
063b4241 lea       0xB8(%rsp),%rdx
063b4249 callq     *0x28(%rax)
063b424c add       $0x258,%rsp
063b4253 ret

log::MaybeStaticStr::Static::constructor$0:
063b4260 sub       $0x10,%rsp
063b4264 mov       %rcx,%rax
063b4267 mov       %rdx,(%rsp)
063b426b mov       %r8,8(%rsp)
063b4270 mov       %rdx,8(%rcx)
063b4274 mov       %r8,0x10(%rcx)
063b4278 movq      $0,(%rcx)
063b427f add       $0x10,%rsp
063b4283 ret

log::impl$37::clone:
063b4290 push      %rax
063b4291 mov       %rcx,%rax
063b4294 mov       %rdx,(%rsp)
063b4298 mov       (%rdx),%r8
063b429b mov       %r8,(%rcx)
063b429e mov       8(%rdx),%r8
063b42a2 mov       %r8,8(%rcx)
063b42a6 mov       0x10(%rdx),%rdx
063b42aa mov       %rdx,0x10(%rcx)
063b42ae pop       %rcx
063b42af ret

log::impl$46::clone:
063b42b0 sub       $0x108,%rsp
063b42b7 mov       %rdx,%rax
063b42ba mov       %rcx,0x30(%rsp)
063b42bf mov       %rcx,0x38(%rsp)
063b42c4 mov       %rax,0xD8(%rsp)
063b42cc mov       %rax,%rdx
063b42cf mov       %rdx,0xE0(%rsp)
063b42d7 mov       %rax,%rcx
063b42da add       $0x18,%rcx
063b42de mov       %rcx,0x40(%rsp)
063b42e3 mov       %rcx,0xE8(%rsp)
063b42eb mov       %rax,%rcx
063b42ee add       $0x48,%rcx
063b42f2 mov       %rcx,0x48(%rsp)
063b42f7 mov       %rcx,0xF0(%rsp)
063b42ff mov       %rax,%rcx
063b4302 add       $0x60,%rcx
063b4306 mov       %rcx,0x50(%rsp)
063b430b mov       %rcx,0xF8(%rsp)
063b4313 add       $0x78,%rax
063b4317 mov       %rax,0x58(%rsp)
063b431c mov       %rax,0x100(%rsp)
063b4324 lea       0x60(%rsp),%rcx
063b4329 call      0x0000`0000`063B`4410
063b432e mov       0x40(%rsp),%rdx
063b4333 lea       0x78(%rsp),%rcx
063b4338 call      0x0000`0000`063B`3860
063b433d mov       0x48(%rsp),%rdx
063b4342 lea       0xA8(%rsp),%rcx
063b434a call      0x0000`0000`063B`38F0
063b434f mov       0x50(%rsp),%rdx
063b4354 lea       0xC0(%rsp),%rcx
063b435c call      0x0000`0000`063B`38F0
063b4361 mov       0x58(%rsp),%rcx
063b4366 call      0x0000`0000`063B`3890
063b436b mov       %eax,0x28(%rsp)
063b436f mov       %edx,0x2C(%rsp)
063b4373 mov       0x30(%rsp),%rcx
063b4378 mov       0x60(%rsp),%rax
063b437d mov       %rax,(%rcx)
063b4380 mov       0x68(%rsp),%rax
063b4385 mov       %rax,8(%rcx)
063b4389 mov       0x70(%rsp),%rax
063b438e mov       %rax,0x10(%rcx)
063b4392 add       $0x18,%rcx
063b4396 lea       0x78(%rsp),%rdx
063b439b mov       $0x30,%r8d
063b43a1 call      0x0000`0000`063C`AB90
063b43a6 mov       0x28(%rsp),%r8d
063b43ab mov       0x2C(%rsp),%edx
063b43af mov       0x30(%rsp),%rcx
063b43b4 mov       0x38(%rsp),%rax
063b43b9 mov       0xA8(%rsp),%r9
063b43c1 mov       %r9,0x48(%rcx)
063b43c5 mov       0xB0(%rsp),%r9
063b43cd mov       %r9,0x50(%rcx)
063b43d1 mov       0xB8(%rsp),%r9
063b43d9 mov       %r9,0x58(%rcx)
063b43dd mov       0xC0(%rsp),%r9
063b43e5 mov       %r9,0x60(%rcx)
063b43e9 mov       0xC8(%rsp),%r9
063b43f1 mov       %r9,0x68(%rcx)
063b43f5 mov       0xD0(%rsp),%r9
063b43fd mov       %r9,0x70(%rcx)
063b4401 mov       %r8d,0x78(%rcx)
063b4405 mov       %edx,0x7C(%rcx)
063b4408 add       $0x108,%rsp
063b440f ret

log::impl$49::clone:
063b4410 sub       $0x68,%rsp
063b4414 mov       %rcx,0x30(%rsp)
063b4419 mov       %rcx,0x38(%rsp)
063b441e mov       %rdx,0x50(%rsp)
063b4423 mov       %rdx,%rcx
063b4426 mov       %rcx,0x58(%rsp)
063b442b add       $8,%rdx
063b442f mov       %rdx,0x40(%rsp)
063b4434 mov       %rdx,0x60(%rsp)
063b4439 call      0x0000`0000`063B`3970
063b443e mov       %rax,0x48(%rsp)
063b4443 mov       0x40(%rsp),%rcx
063b4448 call      0x0000`0000`063B`6680
063b444d mov       %rax,0x20(%rsp)
063b4452 mov       %rdx,0x28(%rsp)
063b4457 mov       0x38(%rsp),%rax
063b445c mov       0x30(%rsp),%rcx
063b4461 mov       0x28(%rsp),%rdx
063b4466 mov       0x20(%rsp),%r8
063b446b mov       0x48(%rsp),%r9
063b4470 mov       %r9,(%rcx)
063b4473 mov       %r8,8(%rcx)
063b4477 mov       %rdx,0x10(%rcx)
063b447b add       $0x68,%rsp
063b447f ret

log::impl$66::fmt:
063b4480 sub       $0x78,%rsp
063b4484 mov       %rcx,0x58(%rsp)
063b4489 mov       %rdx,0x60(%rsp)
063b448e mov       %rcx,0x30(%rsp)
063b4493 mov       %rcx,0x68(%rsp)
063b4498 lea       0x38(%rsp),%rcx
063b449d lea       0x63C`E1C0,%r8
063b44a4 mov       $0xE,%r9d
063b44aa call      0x0000`0000`063B`FBC0
063b44af mov       0x30(%rsp),%rax
063b44b4 lea       0x38(%rsp),%rcx
063b44b9 mov       %rcx,0x70(%rsp)
063b44be mov       %rax,0x50(%rsp)
063b44c3 lea       0x50(%rsp),%rdx
063b44c8 lea       0x38(%rsp),%rcx
063b44cd lea       0x63C`E1D0,%r8
063b44d4 call      0x0000`0000`063B`A260
063b44d9 lea       0x38(%rsp),%rcx
063b44de call      0x0000`0000`063B`A520
063b44e3 mov       %al,0x2F(%rsp)
063b44e7 mov       0x2F(%rsp),%al
063b44eb and       $1,%al
063b44ed movzbl    %al,%eax
063b44f0 add       $0x78,%rsp
063b44f4 ret

core::ops::function::FnOnce::call_once<usize (*)(ptr_const$<u8>,usize),tuple$<ptr_const$<u8>,usize> >:
063b4500 sub       $0x48,%rsp
063b4504 mov       %rcx,0x30(%rsp)
063b4509 mov       %rdx,0x38(%rsp)
063b450e mov       0x30(%rsp),%rcx
063b4513 mov       0x38(%rsp),%rdx
063b4518 call      0x0000`0000`063B`5490
063b451d mov       %rax,0x28(%rsp)
063b4522 mov       0x28(%rsp),%rax
063b4527 add       $0x48,%rsp
063b452b ret

core::ops::function::FnOnce::call_once<void (*)(ptr_const$<array$<usize,4> >),tuple$<ptr_const$<array$<usize,4> > > >:
063b4530 sub       $0x38,%rsp
063b4534 mov       %rcx,0x28(%rsp)
063b4539 mov       0x28(%rsp),%rcx
063b453e call      0x0000`0000`063C`2710
063b4543 add       $0x38,%rsp
063b4547 ret

core::ops::function::FnOnce::call_once<void (*)(ptr_const$<u8>),tuple$<ptr_const$<u8> > >:
063b4550 sub       $0x38,%rsp
063b4554 mov       %rcx,0x28(%rsp)
063b4559 mov       0x28(%rsp),%rcx
063b455e call      0x0000`0000`063C`27D0
063b4563 add       $0x38,%rsp
063b4567 ret

core::ops::function::FnOnce::call_once<void (*)(ptr_mut$<u8>),tuple$<ptr_mut$<u8> > >:
063b4570 sub       $0x38,%rsp
063b4574 mov       %rcx,0x28(%rsp)
063b4579 mov       0x28(%rsp),%rcx
063b457e call      0x0000`0000`063B`4AB0
063b4583 add       $0x38,%rsp
063b4587 ret

core::ops::function::FnOnce::call_once<void (*)(ptr_const$<u8>,ptr_mut$<u8>,usize),tuple$<ptr_const$<u8>,ptr_mut$<u8>,usize> >:
063b4590 sub       $0x48,%rsp
063b4594 mov       %rcx,0x28(%rsp)
063b4599 mov       %rdx,0x30(%rsp)
063b459e mov       %r8,0x38(%rsp)
063b45a3 mov       0x28(%rsp),%rcx
063b45a8 mov       0x30(%rsp),%rdx
063b45ad mov       0x38(%rsp),%r8
063b45b2 call      0x0000`0000`063B`49C0
063b45b7 add       $0x48,%rsp
063b45bb ret

core::ops::function::FnOnce::call_once<void (*)(ptr_const$<usize>),tuple$<ptr_const$<usize> > >:
063b45c0 sub       $0x38,%rsp
063b45c4 mov       %rcx,0x28(%rsp)
063b45c9 mov       0x28(%rsp),%rcx
063b45ce call      0x0000`0000`063C`2770
063b45d3 add       $0x38,%rsp
063b45d7 ret

core::ops::function::FnOnce::call_once<core::fmt::USIZE_MARKER::closure_env$0,tuple$<ref$<usize>,ref_mut$<core::fmt::Formatter> > >:
063b45e0 sub       $0x48,%rsp
063b45e4 mov       %rcx,0x38(%rsp)
063b45e9 mov       %rdx,0x40(%rsp)
063b45ee mov       0x38(%rsp),%rdx
063b45f3 mov       0x40(%rsp),%r8
063b45f8 lea       0x30(%rsp),%rcx
063b45fd call      0x0000`0000`063B`DA50
063b4602 mov       %al,0x2F(%rsp)
063b4606 jmp       0x0000`0000`063B`4608
063b4608 mov       0x2F(%rsp),%al
063b460c and       $1,%al
063b460e movzbl    %al,%eax
063b4611 add       $0x48,%rsp
063b4615 ret

core::ops::function::FnOnce::call_once<enum$<core::cmp::Ordering> (*)(ref$<usize>,ref$<usize>),tuple$<ref$<usize>,ref$<usize> > >:
063b4620 sub       $0x48,%rsp
063b4624 mov       %rcx,0x30(%rsp)
063b4629 mov       %rdx,0x38(%rsp)
063b462e mov       0x30(%rsp),%rcx
063b4633 mov       0x38(%rsp),%rdx
063b4638 call      0x0000`0000`063C`7450
063b463d mov       %al,0x2F(%rsp)
063b4641 mov       0x2F(%rsp),%al
063b4645 add       $0x48,%rsp
063b4649 ret

core::ptr::drop_in_place<ref$<usize> >:
063b4650 push      %rax
063b4651 mov       %rcx,(%rsp)
063b4655 pop       %rax
063b4656 ret

core::ptr::drop_in_place<core::fmt::builders::PadAdapter>:
063b4660 push      %rax
063b4661 mov       %rcx,(%rsp)
063b4665 pop       %rax
063b4666 ret

core::ptr::drop_in_place<ref_mut$<core::fmt::builders::PadAdapter> >:
063b4670 push      %rax
063b4671 mov       %rcx,(%rsp)
063b4675 pop       %rax
063b4676 ret

core::ptr::drop_in_place<core::panic::panic_info::impl$0::internal_constructor::NoPayload>:
063b4680 push      %rax
063b4681 mov       %rcx,(%rsp)
063b4685 pop       %rax
063b4686 ret

core::num::impl$6::is_utf8_char_boundary:
063b4690 push      %rax
063b4691 mov       %cl,7(%rsp)
063b4695 cmp       $0xC0,%cl
063b4698 setge     %al
063b469b and       $1,%al
063b469d movzbl    %al,%eax
063b46a0 pop       %rcx
063b46a1 ret

core::hint::unreachable_unchecked:
063b46b0 ud2

core::intrinsics::is_aligned_and_not_null<u8>:
063b46c0 sub       $0x38,%rsp
063b46c4 mov       %rcx,0x20(%rsp)
063b46c9 mov       %rcx,0x30(%rsp)
063b46ce call      0x0000`0000`063B`51E0
063b46d3 mov       %al,0x2E(%rsp)
063b46d7 mov       0x2E(%rsp),%al
063b46db xor       $0xFF,%al
063b46dd test      $1,%al
063b46df jne       0x0000`0000`063B`46E8
063b46e1 movb      $0,0x2F(%rsp)
063b46e6 jmp       0x0000`0000`063B`472A
063b46e8 mov       $1,%eax
063b46ed cmp       $0,%rax
063b46f1 sete      %al
063b46f4 test      $1,%al
063b46f6 jne       0x0000`0000`063B`4710
063b46f8 mov       0x20(%rsp),%rax
063b46fd and       $0,%rax
063b4701 cmp       $0,%rax
063b4705 sete      %al
063b4708 and       $1,%al
063b470a mov       %al,0x2F(%rsp)
063b470e jmp       0x0000`0000`063B`472A
063b4710 lea       0x63C`E330,%rcx
063b4717 lea       0x63C`E3F8,%r8
063b471e mov       $0x39,%edx
063b4723 call      0x0000`0000`063B`8E30
063b4728 ud2
063b472a mov       0x2F(%rsp),%al
063b472e and       $1,%al
063b4730 movzbl    %al,%eax
063b4733 add       $0x38,%rsp
063b4737 ret

core::intrinsics::is_aligned_and_not_null<array$<usize,4> >:
063b4740 sub       $0x38,%rsp
063b4744 mov       %rcx,0x20(%rsp)
063b4749 mov       %rcx,0x30(%rsp)
063b474e call      0x0000`0000`063B`5270
063b4753 mov       %al,0x2E(%rsp)
063b4757 mov       0x2E(%rsp),%al
063b475b xor       $0xFF,%al
063b475d test      $1,%al
063b475f jne       0x0000`0000`063B`4768
063b4761 movb      $0,0x2F(%rsp)
063b4766 jmp       0x0000`0000`063B`47AA
063b4768 mov       $8,%eax
063b476d cmp       $0,%rax
063b4771 sete      %al
063b4774 test      $1,%al
063b4776 jne       0x0000`0000`063B`4790
063b4778 mov       0x20(%rsp),%rax
063b477d and       $7,%rax
063b4781 cmp       $0,%rax
063b4785 sete      %al
063b4788 and       $1,%al
063b478a mov       %al,0x2F(%rsp)
063b478e jmp       0x0000`0000`063B`47AA
063b4790 lea       0x63C`E330,%rcx
063b4797 lea       0x63C`E3F8,%r8
063b479e mov       $0x39,%edx
063b47a3 call      0x0000`0000`063B`8E30
063b47a8 ud2
063b47aa mov       0x2F(%rsp),%al
063b47ae and       $1,%al
063b47b0 movzbl    %al,%eax
063b47b3 add       $0x38,%rsp
063b47b7 ret

core::intrinsics::is_aligned_and_not_null<usize>:
063b47c0 sub       $0x38,%rsp
063b47c4 mov       %rcx,0x20(%rsp)
063b47c9 mov       %rcx,0x30(%rsp)
063b47ce call      0x0000`0000`063B`51B0
063b47d3 mov       %al,0x2E(%rsp)
063b47d7 mov       0x2E(%rsp),%al
063b47db xor       $0xFF,%al
063b47dd test      $1,%al
063b47df jne       0x0000`0000`063B`47E8
063b47e1 movb      $0,0x2F(%rsp)
063b47e6 jmp       0x0000`0000`063B`482A
063b47e8 mov       $8,%eax
063b47ed cmp       $0,%rax
063b47f1 sete      %al
063b47f4 test      $1,%al
063b47f6 jne       0x0000`0000`063B`4810
063b47f8 mov       0x20(%rsp),%rax
063b47fd and       $7,%rax
063b4801 cmp       $0,%rax
063b4805 sete      %al
063b4808 and       $1,%al
063b480a mov       %al,0x2F(%rsp)
063b480e jmp       0x0000`0000`063B`482A
063b4810 lea       0x63C`E330,%rcx
063b4817 lea       0x63C`E3F8,%r8
063b481e mov       $0x39,%edx
063b4823 call      0x0000`0000`063B`8E30
063b4828 ud2
063b482a mov       0x2F(%rsp),%al
063b482e and       $1,%al
063b4830 movzbl    %al,%eax
063b4833 add       $0x38,%rsp
063b4837 ret

core::intrinsics::is_nonoverlapping<u8>:
063b4840 sub       $0x98,%rsp
063b4847 mov       %r8,0x48(%rsp)
063b484c mov       %rdx,0x50(%rsp)
063b4851 mov       %rcx,0x58(%rsp)
063b4856 mov       %rcx,0x68(%rsp)
063b485b mov       %rdx,0x70(%rsp)
063b4860 mov       %r8,0x78(%rsp)
063b4865 mov       %rcx,0x80(%rsp)
063b486d mov       %rdx,0x88(%rsp)
063b4875 mov       0x48(%rsp),%rdx
063b487a mov       $1,%ecx
063b487f call      0x0000`0000`063C`7250
063b4884 mov       %rax,0x38(%rsp)
063b4889 mov       %rdx,0x40(%rsp)
063b488e mov       0x40(%rsp),%rdx
063b4893 mov       0x38(%rsp),%rcx
063b4898 lea       0x63C`E410,%r8
063b489f call      0x0000`0000`063B`84C0
063b48a4 mov       %rax,0x30(%rsp)
063b48a9 mov       %rax,0x90(%rsp)
063b48b1 mov       0x58(%rsp),%rax
063b48b6 mov       0x50(%rsp),%rcx
063b48bb cmp       %rcx,%rax
063b48be ja        0x0000`0000`063B`48DB
063b48c0 mov       0x58(%rsp),%rcx
063b48c5 mov       0x50(%rsp),%rax
063b48ca sub       %rcx,%rax
063b48cd mov       %rax,0x28(%rsp)
063b48d2 setb      %al
063b48d5 test      $1,%al
063b48d7 jne       0x0000`0000`063B`4940
063b48d9 jmp       0x0000`0000`063B`4934
063b48db mov       0x50(%rsp),%rcx
063b48e0 mov       0x58(%rsp),%rax
063b48e5 sub       %rcx,%rax
063b48e8 mov       %rax,0x20(%rsp)
063b48ed setb      %al
063b48f0 test      $1,%al
063b48f2 jne       0x0000`0000`063B`4900
063b48f4 mov       0x20(%rsp),%rax
063b48f9 mov       %rax,0x60(%rsp)
063b48fe jmp       0x0000`0000`063B`491A
063b4900 lea       0x63C`E1F0,%rcx
063b4907 lea       0x63C`E428,%r8
063b490e mov       $0x21,%edx
063b4913 call      0x0000`0000`063B`8E30
063b4918 ud2
063b491a mov       0x30(%rsp),%rax
063b491f cmp       %rax,0x60(%rsp)
063b4924 setae     %al
063b4927 and       $1,%al
063b4929 movzbl    %al,%eax
063b492c add       $0x98,%rsp
063b4933 ret
063b4934 mov       0x28(%rsp),%rax
063b4939 mov       %rax,0x60(%rsp)
063b493e jmp       0x0000`0000`063B`491A
063b4940 lea       0x63C`E1F0,%rcx
063b4947 lea       0x63C`E440,%r8
063b494e mov       $0x21,%edx
063b4953 call      0x0000`0000`063B`8E30
063b4958 ud2

core::intrinsics::copy_nonoverlapping<u8>:
063b4960 sub       $0x68,%rsp
063b4964 mov       %r8,0x20(%rsp)
063b4969 mov       %rdx,0x28(%rsp)
063b496e mov       %rcx,0x30(%rsp)
063b4973 mov       %rcx,0x50(%rsp)
063b4978 mov       %rdx,0x58(%rsp)
063b497d mov       %r8,0x60(%rsp)
063b4982 mov       %rcx,0x38(%rsp)
063b4987 mov       %rdx,0x40(%rsp)
063b498c mov       %r8,0x48(%rsp)
063b4991 lea       0x38(%rsp),%rcx
063b4996 call      0x0000`0000`063B`4B70
063b499b mov       0x30(%rsp),%rdx
063b49a0 mov       0x28(%rsp),%rcx
063b49a5 mov       0x20(%rsp),%r8
063b49aa shl       $0,%r8
063b49ae call      0x0000`0000`063C`AB90
063b49b3 add       $0x68,%rsp
063b49b7 ret

core::intrinsics::copy_nonoverlapping::runtime_check<u8>:
063b49c0 sub       $0x68,%rsp
063b49c4 mov       %r8,0x30(%rsp)
063b49c9 mov       %rdx,0x38(%rsp)
063b49ce mov       %rcx,0x40(%rsp)
063b49d3 mov       %rcx,0x50(%rsp)
063b49d8 mov       %rdx,0x58(%rsp)
063b49dd mov       %r8,0x60(%rsp)
063b49e2 call      0x0000`0000`063B`46C0
063b49e7 mov       %al,0x4D(%rsp)
063b49eb mov       0x4D(%rsp),%al
063b49ef xor       $0xFF,%al
063b49f1 test      $1,%al
063b49f3 jne       0x0000`0000`063B`4A05
063b49f5 mov       0x38(%rsp),%rcx
063b49fa call      0x0000`0000`063B`46C0
063b49ff mov       %al,0x2F(%rsp)
063b4a03 jmp       0x0000`0000`063B`4A13
063b4a05 movb      $1,0x4F(%rsp)
063b4a0a testb     $1,0x4F(%rsp)
063b4a0f jne       0x0000`0000`063B`4A3B
063b4a11 jmp       0x0000`0000`063B`4A21
063b4a13 mov       0x2F(%rsp),%al
063b4a17 xor       $0xFF,%al
063b4a19 and       $1,%al
063b4a1b mov       %al,0x4F(%rsp)
063b4a1f jmp       0x0000`0000`063B`4A0A
063b4a21 mov       0x30(%rsp),%r8
063b4a26 mov       0x38(%rsp),%rdx
063b4a2b mov       0x40(%rsp),%rcx
063b4a30 call      0x0000`0000`063B`4840
063b4a35 mov       %al,0x2E(%rsp)
063b4a39 jmp       0x0000`0000`063B`4A49
063b4a3b movb      $1,0x4E(%rsp)
063b4a40 testb     $1,0x4E(%rsp)
063b4a45 jne       0x0000`0000`063B`4A5C
063b4a47 jmp       0x0000`0000`063B`4A57
063b4a49 mov       0x2E(%rsp),%al
063b4a4d xor       $0xFF,%al
063b4a4f and       $1,%al
063b4a51 mov       %al,0x4E(%rsp)
063b4a55 jmp       0x0000`0000`063B`4A40
063b4a57 add       $0x68,%rsp
063b4a5b ret
063b4a5c ud2
063b4a5e ud2

core::intrinsics::write_bytes<u8>:
063b4a60 sub       $0x58,%rsp
063b4a64 mov       %r8,0x20(%rsp)
063b4a69 mov       %dl,0x2F(%rsp)
063b4a6d mov       %rcx,0x30(%rsp)
063b4a72 mov       %rcx,0x40(%rsp)
063b4a77 mov       %dl,0x4F(%rsp)
063b4a7b mov       %r8,0x50(%rsp)
063b4a80 mov       %rcx,0x38(%rsp)
063b4a85 mov       0x38(%rsp),%rcx
063b4a8a call      0x0000`0000`063B`4B30
063b4a8f mov       0x2F(%rsp),%dl
063b4a93 mov       0x30(%rsp),%rcx
063b4a98 mov       0x20(%rsp),%r8
063b4a9d shl       $0,%r8
063b4aa1 call      0x0000`0000`063C`AB00
063b4aa6 add       $0x58,%rsp
063b4aaa ret

core::intrinsics::write_bytes::runtime_check<u8>:
063b4ab0 sub       $0x68,%rsp
063b4ab4 mov       %rcx,0x60(%rsp)
063b4ab9 call      0x0000`0000`063B`46C0
063b4abe mov       %al,0x2F(%rsp)
063b4ac2 mov       0x2F(%rsp),%al
063b4ac6 xor       $0xFF,%al
063b4ac8 test      $1,%al
063b4aca jne       0x0000`0000`063B`4AD1
063b4acc add       $0x68,%rsp
063b4ad0 ret
063b4ad1 lea       0x30(%rsp),%rcx
063b4ad6 lea       0x63C`E488,%rdx
063b4add mov       $1,%r8d
063b4ae3 lea       0x63C`E370,%r9
063b4aea xor       %eax,%eax
063b4aec movq      $0,0x20(%rsp)
063b4af5 call      0x0000`0000`063B`DE30
063b4afa lea       0x63C`E498,%rdx
063b4b01 lea       0x30(%rsp),%rcx
063b4b06 call      0x0000`0000`063B`8F40
063b4b0b ud2

core::intrinsics::const_eval_select<tuple$<ptr_const$<usize> >,void (*)(ptr_const$<usize>),void (*)(ptr_const$<usize>),tuple$<> >:
063b4b10 sub       $0x38,%rsp
063b4b14 mov       %rcx,0x20(%rsp)
063b4b19 call      0x0000`0000`063B`45C0
063b4b1e jmp       0x0000`0000`063B`4B20
063b4b20 add       $0x38,%rsp
063b4b24 ret

core::intrinsics::const_eval_select<tuple$<ptr_mut$<u8> >,void (*)(ptr_mut$<u8>),void (*)(ptr_mut$<u8>),tuple$<> >:
063b4b30 sub       $0x38,%rsp
063b4b34 mov       %rcx,0x20(%rsp)
063b4b39 call      0x0000`0000`063B`4570
063b4b3e jmp       0x0000`0000`063B`4B40
063b4b40 add       $0x38,%rsp
063b4b44 ret

core::intrinsics::const_eval_select<tuple$<ptr_const$<array$<usize,4> > >,void (*)(ptr_const$<array$<usize,4> >),void (*)(ptr_const$<array$<usize,4> >),tuple$<> >:
063b4b50 sub       $0x38,%rsp
063b4b54 mov       %rcx,0x20(%rsp)
063b4b59 call      0x0000`0000`063B`4530
063b4b5e jmp       0x0000`0000`063B`4B60
063b4b60 add       $0x38,%rsp
063b4b64 ret

core::intrinsics::const_eval_select<tuple$<ptr_const$<u8>,ptr_mut$<u8>,usize>,void (*)(ptr_const$<u8>,ptr_mut$<u8>,usize),void (*)(ptr_const$<u8>,ptr_mut$<u8>,usize),tuple$<> >:
063b4b70 sub       $0x48,%rsp
063b4b74 mov       (%rcx),%rax
063b4b77 mov       %rax,0x20(%rsp)
063b4b7c mov       8(%rcx),%rax
063b4b80 mov       %rax,0x28(%rsp)
063b4b85 mov       0x10(%rcx),%rax
063b4b89 mov       %rax,0x30(%rsp)
063b4b8e mov       0x20(%rsp),%rcx
063b4b93 mov       0x28(%rsp),%rdx
063b4b98 mov       0x30(%rsp),%r8
063b4b9d call      0x0000`0000`063B`4590
063b4ba2 jmp       0x0000`0000`063B`4BA4
063b4ba4 add       $0x48,%rsp
063b4ba8 ret

core::intrinsics::const_eval_select<tuple$<ptr_const$<u8>,usize>,usize (*)(ptr_const$<u8>,usize),usize (*)(ptr_const$<u8>,usize),usize>:
063b4bb0 sub       $0x48,%rsp
063b4bb4 mov       %rcx,0x28(%rsp)
063b4bb9 mov       %rdx,0x30(%rsp)
063b4bbe call      0x0000`0000`063B`4500
063b4bc3 mov       %rax,0x20(%rsp)
063b4bc8 jmp       0x0000`0000`063B`4BCA
063b4bca mov       0x20(%rsp),%rax
063b4bcf add       $0x48,%rsp
063b4bd3 ret

core::intrinsics::const_eval_select<tuple$<ptr_const$<u8> >,void (*)(ptr_const$<u8>),void (*)(ptr_const$<u8>),tuple$<> >:
063b4be0 sub       $0x38,%rsp
063b4be4 mov       %rcx,0x20(%rsp)
063b4be9 call      0x0000`0000`063B`4550
063b4bee jmp       0x0000`0000`063B`4BF0
063b4bf0 add       $0x38,%rsp
063b4bf4 ret

core::mem::size_of_val<slice$<u8> >:
063b4c00 sub       $0x20,%rsp
063b4c04 mov       %rcx,8(%rsp)
063b4c09 mov       %rdx,0x10(%rsp)
063b4c0e shl       $0,%rdx
063b4c12 mov       %rdx,0x18(%rsp)
063b4c17 mov       0x18(%rsp),%rax
063b4c1c mov       %rax,(%rsp)
063b4c20 mov       (%rsp),%rax
063b4c24 add       $0x20,%rsp
063b4c28 ret

core::mem::swap<usize>:
063b4c30 sub       $0x48,%rsp
063b4c34 mov       %rdx,0x28(%rsp)
063b4c39 mov       %rcx,0x30(%rsp)
063b4c3e mov       %rcx,0x38(%rsp)
063b4c43 mov       %rdx,0x40(%rsp)
063b4c48 jmp       0x0000`0000`063B`4C4A
063b4c4a mov       $8,%eax
063b4c4f cmp       $0,%rax
063b4c53 sete      %al
063b4c56 test      $1,%al
063b4c58 jne       0x0000`0000`063B`4C6B
063b4c5a mov       $8,%eax
063b4c5f shr       $3,%rax
063b4c63 cmp       $4,%rax
063b4c67 ja        0x0000`0000`063B`4C96
063b4c69 jmp       0x0000`0000`063B`4C85
063b4c6b lea       0x63C`E310,%rcx
063b4c72 lea       0x63C`E528,%r8
063b4c79 mov       $0x19,%edx
063b4c7e call      0x0000`0000`063B`8E30
063b4c83 ud2
063b4c85 mov       0x28(%rsp),%rdx
063b4c8a mov       0x30(%rsp),%rcx
063b4c8f call      0x0000`0000`063B`4D70
063b4c94 jmp       0x0000`0000`063B`4CAB
063b4c96 mov       0x28(%rsp),%rdx
063b4c9b mov       0x30(%rsp),%rcx
063b4ca0 mov       $1,%r8d
063b4ca6 call      0x0000`0000`063B`5920
063b4cab add       $0x48,%rsp
063b4caf ret

core::mem::swap_simple<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b4cb0 sub       $0x58,%rsp
063b4cb4 mov       %rdx,0x28(%rsp)
063b4cb9 mov       %rcx,0x30(%rsp)
063b4cbe mov       %rcx,0x40(%rsp)
063b4cc3 mov       %rdx,0x48(%rsp)
063b4cc8 call      0x0000`0000`063B`60E0
063b4ccd mov       %al,0x3F(%rsp)
063b4cd1 mov       %al,0x56(%rsp)
063b4cd5 mov       0x28(%rsp),%rcx
063b4cda call      0x0000`0000`063B`60E0
063b4cdf mov       %al,0x27(%rsp)
063b4ce3 mov       %al,0x57(%rsp)
063b4ce7 mov       0x27(%rsp),%dl
063b4ceb mov       0x30(%rsp),%rcx
063b4cf0 call      0x0000`0000`063B`61C0
063b4cf5 mov       0x3F(%rsp),%dl
063b4cf9 mov       0x28(%rsp),%rcx
063b4cfe call      0x0000`0000`063B`61C0
063b4d03 add       $0x58,%rsp
063b4d07 ret

core::mem::swap_simple<core::mem::maybe_uninit::MaybeUninit<usize> >:
063b4d10 sub       $0x68,%rsp
063b4d14 mov       %rdx,0x30(%rsp)
063b4d19 mov       %rcx,0x38(%rsp)
063b4d1e mov       %rcx,0x48(%rsp)
063b4d23 mov       %rdx,0x50(%rsp)
063b4d28 call      0x0000`0000`063B`5FF0
063b4d2d mov       %rax,0x40(%rsp)
063b4d32 mov       %rax,0x58(%rsp)
063b4d37 mov       0x30(%rsp),%rcx
063b4d3c call      0x0000`0000`063B`5FF0
063b4d41 mov       %rax,0x28(%rsp)
063b4d46 mov       %rax,0x60(%rsp)
063b4d4b mov       0x28(%rsp),%rdx
063b4d50 mov       0x38(%rsp),%rcx
063b4d55 call      0x0000`0000`063B`61A0
063b4d5a mov       0x40(%rsp),%rdx
063b4d5f mov       0x30(%rsp),%rcx
063b4d64 call      0x0000`0000`063B`61A0
063b4d69 add       $0x68,%rsp
063b4d6d ret

core::mem::swap_simple<usize>:
063b4d70 sub       $0x68,%rsp
063b4d74 mov       %rdx,0x30(%rsp)
063b4d79 mov       %rcx,0x38(%rsp)
063b4d7e mov       %rcx,0x48(%rsp)
063b4d83 mov       %rdx,0x50(%rsp)
063b4d88 call      0x0000`0000`063B`6130
063b4d8d mov       %rax,0x40(%rsp)
063b4d92 mov       %rax,0x58(%rsp)
063b4d97 mov       0x30(%rsp),%rcx
063b4d9c call      0x0000`0000`063B`6130
063b4da1 mov       %rax,0x28(%rsp)
063b4da6 mov       %rax,0x60(%rsp)
063b4dab mov       0x28(%rsp),%rdx
063b4db0 mov       0x38(%rsp),%rcx
063b4db5 call      0x0000`0000`063B`61E0
063b4dba mov       0x40(%rsp),%rdx
063b4dbf mov       0x30(%rsp),%rcx
063b4dc4 call      0x0000`0000`063B`61E0
063b4dc9 add       $0x68,%rsp
063b4dcd ret

core::mem::replace<enum$<core::fmt::rt::v1::Alignment> >:
063b4dd0 sub       $0x48,%rsp
063b4dd4 mov       %dl,0x27(%rsp)
063b4dd8 mov       %rcx,0x28(%rsp)
063b4ddd mov       %rcx,0x38(%rsp)
063b4de2 mov       %dl,0x46(%rsp)
063b4de6 call      0x0000`0000`063B`6090
063b4deb mov       %al,0x37(%rsp)
063b4def mov       %al,0x47(%rsp)
063b4df3 mov       0x27(%rsp),%dl
063b4df7 mov       0x28(%rsp),%rcx
063b4dfc call      0x0000`0000`063B`6200
063b4e01 mov       0x37(%rsp),%al
063b4e05 add       $0x48,%rsp
063b4e09 ret

core::mem::replace<char>:
063b4e10 sub       $0x48,%rsp
063b4e14 mov       %edx,0x24(%rsp)
063b4e18 mov       %rcx,0x28(%rsp)
063b4e1d mov       %rcx,0x38(%rsp)
063b4e22 mov       %edx,0x40(%rsp)
063b4e26 call      0x0000`0000`063B`6040
063b4e2b mov       %eax,0x34(%rsp)
063b4e2f mov       %eax,0x44(%rsp)
063b4e33 mov       0x24(%rsp),%edx
063b4e37 mov       0x28(%rsp),%rcx
063b4e3c call      0x0000`0000`063B`6180
063b4e41 mov       0x34(%rsp),%eax
063b4e45 add       $0x48,%rsp
063b4e49 ret

core::mem::replace<usize>:
063b4e50 sub       $0x58,%rsp
063b4e54 mov       %rdx,0x28(%rsp)
063b4e59 mov       %rcx,0x30(%rsp)
063b4e5e mov       %rcx,0x40(%rsp)
063b4e63 mov       %rdx,0x48(%rsp)
063b4e68 call      0x0000`0000`063B`6130
063b4e6d mov       %rax,0x38(%rsp)
063b4e72 mov       %rax,0x50(%rsp)
063b4e77 mov       0x28(%rsp),%rdx
063b4e7c mov       0x30(%rsp),%rcx
063b4e81 call      0x0000`0000`063B`61E0
063b4e86 mov       0x38(%rsp),%rax
063b4e8b add       $0x58,%rsp
063b4e8f ret

core::ptr::metadata::metadata<slice$<u8> >:
063b4e90 sub       $0x20,%rsp
063b4e94 mov       %rcx,0x10(%rsp)
063b4e99 mov       %rdx,0x18(%rsp)
063b4e9e mov       %rcx,(%rsp)
063b4ea2 mov       %rdx,8(%rsp)
063b4ea7 mov       8(%rsp),%rax
063b4eac add       $0x20,%rsp
063b4eb0 ret

core::ptr::metadata::metadata<slice$<usize> >:
063b4ec0 sub       $0x20,%rsp
063b4ec4 mov       %rcx,0x10(%rsp)
063b4ec9 mov       %rdx,0x18(%rsp)
063b4ece mov       %rcx,(%rsp)
063b4ed2 mov       %rdx,8(%rsp)
063b4ed7 mov       8(%rsp),%rax
063b4edc add       $0x20,%rsp
063b4ee0 ret

core::ptr::metadata::metadata<slice$<core::mem::maybe_uninit::MaybeUninit<u8> > >:
063b4ef0 sub       $0x20,%rsp
063b4ef4 mov       %rcx,0x10(%rsp)
063b4ef9 mov       %rdx,0x18(%rsp)
063b4efe mov       %rcx,(%rsp)
063b4f02 mov       %rdx,8(%rsp)
063b4f07 mov       8(%rsp),%rax
063b4f0c add       $0x20,%rsp
063b4f10 ret

core::ptr::metadata::from_raw_parts<slice$<usize> >:
063b4f20 sub       $0x30,%rsp
063b4f24 mov       %rcx,0x20(%rsp)
063b4f29 mov       %rdx,0x28(%rsp)
063b4f2e mov       %rcx,0x10(%rsp)
063b4f33 mov       %rdx,0x18(%rsp)
063b4f38 mov       0x10(%rsp),%rcx
063b4f3d mov       0x18(%rsp),%rax
063b4f42 mov       %rcx,(%rsp)
063b4f46 mov       %rax,8(%rsp)
063b4f4b mov       (%rsp),%rax
063b4f4f mov       8(%rsp),%rdx
063b4f54 add       $0x30,%rsp
063b4f58 ret

core::ptr::metadata::from_raw_parts<slice$<core::mem::maybe_uninit::MaybeUninit<u8> > >:
063b4f60 sub       $0x30,%rsp
063b4f64 mov       %rcx,0x20(%rsp)
063b4f69 mov       %rdx,0x28(%rsp)
063b4f6e mov       %rcx,0x10(%rsp)
063b4f73 mov       %rdx,0x18(%rsp)
063b4f78 mov       0x10(%rsp),%rcx
063b4f7d mov       0x18(%rsp),%rax
063b4f82 mov       %rcx,(%rsp)
063b4f86 mov       %rax,8(%rsp)
063b4f8b mov       (%rsp),%rax
063b4f8f mov       8(%rsp),%rdx
063b4f94 add       $0x30,%rsp
063b4f98 ret

core::ptr::metadata::from_raw_parts<slice$<array$<usize,4> > >:
063b4fa0 sub       $0x30,%rsp
063b4fa4 mov       %rcx,0x20(%rsp)
063b4fa9 mov       %rdx,0x28(%rsp)
063b4fae mov       %rcx,0x10(%rsp)
063b4fb3 mov       %rdx,0x18(%rsp)
063b4fb8 mov       0x10(%rsp),%rcx
063b4fbd mov       0x18(%rsp),%rax
063b4fc2 mov       %rcx,(%rsp)
063b4fc6 mov       %rax,8(%rsp)
063b4fcb mov       (%rsp),%rax
063b4fcf mov       8(%rsp),%rdx
063b4fd4 add       $0x30,%rsp
063b4fd8 ret

core::ptr::metadata::from_raw_parts<slice$<u8> >:
063b4fe0 sub       $0x30,%rsp
063b4fe4 mov       %rcx,0x20(%rsp)
063b4fe9 mov       %rdx,0x28(%rsp)
063b4fee mov       %rcx,0x10(%rsp)
063b4ff3 mov       %rdx,0x18(%rsp)
063b4ff8 mov       0x10(%rsp),%rcx
063b4ffd mov       0x18(%rsp),%rax
063b5002 mov       %rcx,(%rsp)
063b5006 mov       %rax,8(%rsp)
063b500b mov       (%rsp),%rax
063b500f mov       8(%rsp),%rdx
063b5014 add       $0x30,%rsp
063b5018 ret

core::ptr::metadata::from_raw_parts_mut<slice$<u8> >:
063b5020 sub       $0x30,%rsp
063b5024 mov       %rcx,0x20(%rsp)
063b5029 mov       %rdx,0x28(%rsp)
063b502e mov       %rcx,0x10(%rsp)
063b5033 mov       %rdx,0x18(%rsp)
063b5038 mov       0x10(%rsp),%rcx
063b503d mov       0x18(%rsp),%rax
063b5042 mov       %rcx,(%rsp)
063b5046 mov       %rax,8(%rsp)
063b504b mov       (%rsp),%rax
063b504f mov       8(%rsp),%rdx
063b5054 add       $0x30,%rsp
063b5058 ret

core::ptr::non_null::NonNull<core::mem::maybe_uninit::MaybeUninit<u8> >::new_unchecked<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b5060 sub       $0x10,%rsp
063b5064 mov       %rcx,8(%rsp)
063b5069 mov       %rcx,(%rsp)
063b506d mov       (%rsp),%rax
063b5071 add       $0x10,%rsp
063b5075 ret

core::ptr::non_null::NonNull<core::fmt::rt::v1::Argument>::new_unchecked<core::fmt::rt::v1::Argument>:
063b5080 sub       $0x10,%rsp
063b5084 mov       %rcx,8(%rsp)
063b5089 mov       %rcx,(%rsp)
063b508d mov       (%rsp),%rax
063b5091 add       $0x10,%rsp
063b5095 ret

core::ptr::non_null::NonNull<usize>::new_unchecked<usize>:
063b50a0 sub       $0x10,%rsp
063b50a4 mov       %rcx,8(%rsp)
063b50a9 mov       %rcx,(%rsp)
063b50ad mov       (%rsp),%rax
063b50b1 add       $0x10,%rsp
063b50b5 ret

core::ptr::non_null::NonNull<u8>::new_unchecked<u8>:
063b50c0 sub       $0x10,%rsp
063b50c4 mov       %rcx,8(%rsp)
063b50c9 mov       %rcx,(%rsp)
063b50cd mov       (%rsp),%rax
063b50d1 add       $0x10,%rsp
063b50d5 ret

core::ptr::non_null::NonNull<array$<usize,4> >::new_unchecked<array$<usize,4> >:
063b50e0 sub       $0x10,%rsp
063b50e4 mov       %rcx,8(%rsp)
063b50e9 mov       %rcx,(%rsp)
063b50ed mov       (%rsp),%rax
063b50f1 add       $0x10,%rsp
063b50f5 ret

core::ptr::non_null::NonNull<core::fmt::ArgumentV1>::new_unchecked<core::fmt::ArgumentV1>:
063b5100 sub       $0x10,%rsp
063b5104 mov       %rcx,8(%rsp)
063b5109 mov       %rcx,(%rsp)
063b510d mov       (%rsp),%rax
063b5111 add       $0x10,%rsp
063b5115 ret

core::ptr::non_null::NonNull<tuple$<u8,u8> >::new_unchecked<tuple$<u8,u8> >:
063b5120 sub       $0x10,%rsp
063b5124 mov       %rcx,8(%rsp)
063b5129 mov       %rcx,(%rsp)
063b512d mov       (%rsp),%rax
063b5131 add       $0x10,%rsp
063b5135 ret

core::ptr::non_null::NonNull<core::fmt::rt::v1::Argument>::as_ptr<core::fmt::rt::v1::Argument>:
063b5140 push      %rax
063b5141 mov       %rcx,%rax
063b5144 mov       %rax,(%rsp)
063b5148 pop       %rcx
063b5149 ret

core::ptr::non_null::NonNull<tuple$<u8,u8> >::as_ptr<tuple$<u8,u8> >:
063b5150 push      %rax
063b5151 mov       %rcx,%rax
063b5154 mov       %rax,(%rsp)
063b5158 pop       %rcx
063b5159 ret

core::ptr::non_null::NonNull<usize>::as_ptr<usize>:
063b5160 push      %rax
063b5161 mov       %rcx,%rax
063b5164 mov       %rax,(%rsp)
063b5168 pop       %rcx
063b5169 ret

core::ptr::non_null::NonNull<array$<usize,4> >::as_ptr<array$<usize,4> >:
063b5170 push      %rax
063b5171 mov       %rcx,%rax
063b5174 mov       %rax,(%rsp)
063b5178 pop       %rcx
063b5179 ret

core::ptr::non_null::NonNull<u8>::as_ptr<u8>:
063b5180 push      %rax
063b5181 mov       %rcx,%rax
063b5184 mov       %rax,(%rsp)
063b5188 pop       %rcx
063b5189 ret

core::ptr::non_null::NonNull<core::mem::maybe_uninit::MaybeUninit<u8> >::as_ptr<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b5190 push      %rax
063b5191 mov       %rcx,%rax
063b5194 mov       %rax,(%rsp)
063b5198 pop       %rcx
063b5199 ret

core::ptr::non_null::NonNull<core::fmt::ArgumentV1>::as_ptr<core::fmt::ArgumentV1>:
063b51a0 push      %rax
063b51a1 mov       %rcx,%rax
063b51a4 mov       %rax,(%rsp)
063b51a8 pop       %rcx
063b51a9 ret

core::ptr::const_ptr::impl$0::is_null<usize>:
063b51b0 sub       $0x38,%rsp
063b51b4 mov       %rcx,0x30(%rsp)
063b51b9 mov       %rcx,0x28(%rsp)
063b51be mov       0x28(%rsp),%rcx
063b51c3 xor       %eax,%eax
063b51c5 mov       %eax,%edx
063b51c7 call      0x0000`0000`063B`5320
063b51cc mov       %al,0x27(%rsp)
063b51d0 mov       0x27(%rsp),%al
063b51d4 and       $1,%al
063b51d6 movzbl    %al,%eax
063b51d9 add       $0x38,%rsp
063b51dd ret

core::ptr::const_ptr::impl$0::is_null<u8>:
063b51e0 sub       $0x38,%rsp
063b51e4 mov       %rcx,0x28(%rsp)
063b51e9 mov       %rcx,0x30(%rsp)
063b51ee mov       0x28(%rsp),%rcx
063b51f3 xor       %eax,%eax
063b51f5 mov       %eax,%edx
063b51f7 call      0x0000`0000`063B`5320
063b51fc mov       %al,0x27(%rsp)
063b5200 mov       0x27(%rsp),%al
063b5204 and       $1,%al
063b5206 movzbl    %al,%eax
063b5209 add       $0x38,%rsp
063b520d ret

core::ptr::const_ptr::impl$0::is_null<core::fmt::rt::v1::Argument>:
063b5210 sub       $0x38,%rsp
063b5214 mov       %rcx,0x30(%rsp)
063b5219 mov       %rcx,0x28(%rsp)
063b521e mov       0x28(%rsp),%rcx
063b5223 xor       %eax,%eax
063b5225 mov       %eax,%edx
063b5227 call      0x0000`0000`063B`5320
063b522c mov       %al,0x27(%rsp)
063b5230 mov       0x27(%rsp),%al
063b5234 and       $1,%al
063b5236 movzbl    %al,%eax
063b5239 add       $0x38,%rsp
063b523d ret

core::ptr::const_ptr::impl$0::is_null<tuple$<u8,u8> >:
063b5240 sub       $0x38,%rsp
063b5244 mov       %rcx,0x30(%rsp)
063b5249 mov       %rcx,0x28(%rsp)
063b524e mov       0x28(%rsp),%rcx
063b5253 xor       %eax,%eax
063b5255 mov       %eax,%edx
063b5257 call      0x0000`0000`063B`5320
063b525c mov       %al,0x27(%rsp)
063b5260 mov       0x27(%rsp),%al
063b5264 and       $1,%al
063b5266 movzbl    %al,%eax
063b5269 add       $0x38,%rsp
063b526d ret

core::ptr::const_ptr::impl$0::is_null<array$<usize,4> >:
063b5270 sub       $0x38,%rsp
063b5274 mov       %rcx,0x30(%rsp)
063b5279 mov       %rcx,0x28(%rsp)
063b527e mov       0x28(%rsp),%rcx
063b5283 xor       %eax,%eax
063b5285 mov       %eax,%edx
063b5287 call      0x0000`0000`063B`5320
063b528c mov       %al,0x27(%rsp)
063b5290 mov       0x27(%rsp),%al
063b5294 and       $1,%al
063b5296 movzbl    %al,%eax
063b5299 add       $0x38,%rsp
063b529d ret

core::ptr::const_ptr::impl$0::is_null<core::fmt::ArgumentV1>:
063b52a0 sub       $0x38,%rsp
063b52a4 mov       %rcx,0x30(%rsp)
063b52a9 mov       %rcx,0x28(%rsp)
063b52ae mov       0x28(%rsp),%rcx
063b52b3 xor       %eax,%eax
063b52b5 mov       %eax,%edx
063b52b7 call      0x0000`0000`063B`5320
063b52bc mov       %al,0x27(%rsp)
063b52c0 mov       0x27(%rsp),%al
063b52c4 and       $1,%al
063b52c6 movzbl    %al,%eax
063b52c9 add       $0x38,%rsp
063b52cd ret

core::ptr::const_ptr::impl$0::cast<u8,tuple$<> >:
063b52d0 push      %rax
063b52d1 mov       %rcx,%rax
063b52d4 mov       %rax,(%rsp)
063b52d8 pop       %rcx
063b52d9 ret

core::ptr::const_ptr::impl$0::cast<usize,array$<usize,4> >:
063b52e0 push      %rax
063b52e1 mov       %rcx,%rax
063b52e4 mov       %rax,(%rsp)
063b52e8 pop       %rcx
063b52e9 ret

core::ptr::const_ptr::impl$0::cast<usize,tuple$<> >:
063b52f0 push      %rax
063b52f1 mov       %rcx,%rax
063b52f4 mov       %rax,(%rsp)
063b52f8 pop       %rcx
063b52f9 ret

core::ptr::const_ptr::impl$0::cast<core::mem::maybe_uninit::MaybeUninit<u8>,tuple$<> >:
063b5300 push      %rax
063b5301 mov       %rcx,%rax
063b5304 mov       %rax,(%rsp)
063b5308 pop       %rcx
063b5309 ret

core::ptr::const_ptr::impl$0::cast<array$<usize,4>,tuple$<> >:
063b5310 push      %rax
063b5311 mov       %rcx,%rax
063b5314 mov       %rax,(%rsp)
063b5318 pop       %rcx
063b5319 ret

core::ptr::const_ptr::impl$0::guaranteed_eq<u8>:
063b5320 sub       $0x20,%rsp
063b5324 mov       %rcx,8(%rsp)
063b5329 mov       %rdx,0x10(%rsp)
063b532e cmp       %rdx,%rcx
063b5331 sete      %al
063b5334 and       $1,%al
063b5336 mov       %al,0x1F(%rsp)
063b533a mov       0x1F(%rsp),%al
063b533e mov       %al,7(%rsp)
063b5342 mov       7(%rsp),%al
063b5346 and       $1,%al
063b5348 movzbl    %al,%eax
063b534b add       $0x20,%rsp
063b534f ret

core::ptr::const_ptr::impl$0::align_offset<u8>:
063b5350 sub       $0xB8,%rsp
063b5357 mov       %rdx,0x38(%rsp)
063b535c mov       %rcx,%rax
063b535f mov       0x38(%rsp),%rcx
063b5364 mov       %rax,0x40(%rsp)
063b5369 mov       %rax,0x90(%rsp)
063b5371 mov       %rcx,0x98(%rsp)
063b5379 mov       %rcx,0xA0(%rsp)
063b5381 mov       %rcx,0xA8(%rsp)
063b5389 mov       %rcx,%rax
063b538c shr       $1,%rax
063b538f movabs    $0x5555`5555`5555`5555,%rdx
063b5399 and       %rdx,%rax
063b539c sub       %rax,%rcx
063b539f movabs    $0x3333`3333`3333`3333,%rdx
063b53a9 mov       %rcx,%rax
063b53ac and       %rdx,%rax
063b53af shr       $2,%rcx
063b53b3 and       %rdx,%rcx
063b53b6 add       %rcx,%rax
063b53b9 mov       %rax,%rcx
063b53bc shr       $4,%rcx
063b53c0 add       %rcx,%rax
063b53c3 movabs    $0xF0F`0F0F`0F0F`0F0F,%rcx
063b53cd and       %rcx,%rax
063b53d0 movabs    $0x101`0101`0101`0101,%rcx
063b53da imul      %rcx,%rax
063b53de shr       $0x38,%rax
063b53e2 mov       %rax,0xB0(%rsp)
063b53ea mov       0xB0(%rsp),%rax
063b53f2 cmp       $1,%eax
063b53f5 sete      %al
063b53f8 mov       %al,0x4F(%rsp)
063b53fc mov       0x4F(%rsp),%al
063b5400 xor       $0xFF,%al
063b5402 test      $1,%al
063b5404 jne       0x0000`0000`063B`543C
063b5406 mov       0x38(%rsp),%rax
063b540b mov       0x40(%rsp),%rcx
063b5410 mov       %rcx,0x80(%rsp)
063b5418 mov       %rax,0x88(%rsp)
063b5420 mov       0x80(%rsp),%rcx
063b5428 mov       0x88(%rsp),%rdx
063b5430 call      0x0000`0000`063B`4BB0
063b5435 mov       %rax,0x30(%rsp)
063b543a jmp       0x0000`0000`063B`5478
063b543c lea       0x50(%rsp),%rcx
063b5441 lea       0x63C`E570,%rdx
063b5448 mov       $1,%r8d
063b544e lea       0x63C`E370,%r9
063b5455 xor       %eax,%eax
063b5457 movq      $0,0x20(%rsp)
063b5460 call      0x0000`0000`063B`DE30
063b5465 lea       0x63C`E600,%rdx
063b546c lea       0x50(%rsp),%rcx
063b5471 call      0x0000`0000`063B`8F40
063b5476 ud2
063b5478 mov       0x30(%rsp),%rax
063b547d add       $0xB8,%rsp
063b5484 ret

core::ptr::const_ptr::impl$0::align_offset::rt_impl<u8>:
063b5490 sub       $0x38,%rsp
063b5494 mov       %rcx,0x28(%rsp)
063b5499 mov       %rdx,0x30(%rsp)
063b549e call      0x0000`0000`063B`6270
063b54a3 mov       %rax,0x20(%rsp)
063b54a8 mov       0x20(%rsp),%rax
063b54ad add       $0x38,%rsp
063b54b1 ret

core::ptr::const_ptr::impl$1::len<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b54c0 sub       $0x38,%rsp
063b54c4 mov       %rcx,0x28(%rsp)
063b54c9 mov       %rdx,0x30(%rsp)
063b54ce call      0x0000`0000`063B`4EF0
063b54d3 mov       %rax,0x20(%rsp)
063b54d8 mov       0x20(%rsp),%rax
063b54dd add       $0x38,%rsp
063b54e1 ret

core::ptr::const_ptr::impl$1::len<u8>:
063b54f0 sub       $0x38,%rsp
063b54f4 mov       %rcx,0x28(%rsp)
063b54f9 mov       %rdx,0x30(%rsp)
063b54fe call      0x0000`0000`063B`4E90
063b5503 mov       %rax,0x20(%rsp)
063b5508 mov       0x20(%rsp),%rax
063b550d add       $0x38,%rsp
063b5511 ret

core::ptr::const_ptr::impl$1::len<usize>:
063b5520 sub       $0x38,%rsp
063b5524 mov       %rcx,0x28(%rsp)
063b5529 mov       %rdx,0x30(%rsp)
063b552e call      0x0000`0000`063B`4EC0
063b5533 mov       %rax,0x20(%rsp)
063b5538 mov       0x20(%rsp),%rax
063b553d add       $0x38,%rsp
063b5541 ret

core::ptr::const_ptr::impl$1::as_ptr<core::fmt::ArgumentV1>:
063b5550 sub       $0x10,%rsp
063b5554 mov       %rcx,%rax
063b5557 mov       %rax,(%rsp)
063b555b mov       %rdx,8(%rsp)
063b5560 add       $0x10,%rsp
063b5564 ret

core::ptr::const_ptr::impl$1::as_ptr<str>:
063b5570 sub       $0x10,%rsp
063b5574 mov       %rcx,%rax
063b5577 mov       %rax,(%rsp)
063b557b mov       %rdx,8(%rsp)
063b5580 add       $0x10,%rsp
063b5584 ret

core::ptr::const_ptr::impl$1::as_ptr<u32>:
063b5590 sub       $0x10,%rsp
063b5594 mov       %rcx,%rax
063b5597 mov       %rax,(%rsp)
063b559b mov       %rdx,8(%rsp)
063b55a0 add       $0x10,%rsp
063b55a4 ret

core::ptr::const_ptr::impl$1::as_ptr<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b55b0 sub       $0x10,%rsp
063b55b4 mov       %rcx,%rax
063b55b7 mov       %rax,(%rsp)
063b55bb mov       %rdx,8(%rsp)
063b55c0 add       $0x10,%rsp
063b55c4 ret

core::ptr::const_ptr::impl$1::as_ptr<u8>:
063b55d0 sub       $0x10,%rsp
063b55d4 mov       %rcx,%rax
063b55d7 mov       %rax,(%rsp)
063b55db mov       %rdx,8(%rsp)
063b55e0 add       $0x10,%rsp
063b55e4 ret

core::ptr::const_ptr::impl$1::as_ptr<usize>:
063b55f0 sub       $0x10,%rsp
063b55f4 mov       %rcx,%rax
063b55f7 mov       %rax,(%rsp)
063b55fb mov       %rdx,8(%rsp)
063b5600 add       $0x10,%rsp
063b5604 ret

core::ptr::mut_ptr::impl$0::is_null<core::fmt::ArgumentV1>:
063b5610 sub       $0x38,%rsp
063b5614 mov       %rcx,0x30(%rsp)
063b5619 mov       %rcx,0x28(%rsp)
063b561e mov       0x28(%rsp),%rcx
063b5623 xor       %eax,%eax
063b5625 mov       %eax,%edx
063b5627 call      0x0000`0000`063B`5760
063b562c mov       %al,0x27(%rsp)
063b5630 mov       0x27(%rsp),%al
063b5634 and       $1,%al
063b5636 movzbl    %al,%eax
063b5639 add       $0x38,%rsp
063b563d ret

core::ptr::mut_ptr::impl$0::is_null<core::fmt::rt::v1::Argument>:
063b5640 sub       $0x38,%rsp
063b5644 mov       %rcx,0x30(%rsp)
063b5649 mov       %rcx,0x28(%rsp)
063b564e mov       0x28(%rsp),%rcx
063b5653 xor       %eax,%eax
063b5655 mov       %eax,%edx
063b5657 call      0x0000`0000`063B`5760
063b565c mov       %al,0x27(%rsp)
063b5660 mov       0x27(%rsp),%al
063b5664 and       $1,%al
063b5666 movzbl    %al,%eax
063b5669 add       $0x38,%rsp
063b566d ret

core::ptr::mut_ptr::impl$0::is_null<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b5670 sub       $0x38,%rsp
063b5674 mov       %rcx,0x28(%rsp)
063b5679 mov       %rcx,0x30(%rsp)
063b567e mov       0x28(%rsp),%rcx
063b5683 xor       %eax,%eax
063b5685 mov       %eax,%edx
063b5687 call      0x0000`0000`063B`5760
063b568c mov       %al,0x27(%rsp)
063b5690 mov       0x27(%rsp),%al
063b5694 and       $1,%al
063b5696 movzbl    %al,%eax
063b5699 add       $0x38,%rsp
063b569d ret

core::ptr::mut_ptr::impl$0::is_null<usize>:
063b56a0 sub       $0x38,%rsp
063b56a4 mov       %rcx,0x30(%rsp)
063b56a9 mov       %rcx,0x28(%rsp)
063b56ae mov       0x28(%rsp),%rcx
063b56b3 xor       %eax,%eax
063b56b5 mov       %eax,%edx
063b56b7 call      0x0000`0000`063B`5760
063b56bc mov       %al,0x27(%rsp)
063b56c0 mov       0x27(%rsp),%al
063b56c4 and       $1,%al
063b56c6 movzbl    %al,%eax
063b56c9 add       $0x38,%rsp
063b56cd ret

core::ptr::mut_ptr::impl$0::is_null<u8>:
063b56d0 sub       $0x38,%rsp
063b56d4 mov       %rcx,0x28(%rsp)
063b56d9 mov       %rcx,0x30(%rsp)
063b56de mov       0x28(%rsp),%rcx
063b56e3 xor       %eax,%eax
063b56e5 mov       %eax,%edx
063b56e7 call      0x0000`0000`063B`5760
063b56ec mov       %al,0x27(%rsp)
063b56f0 mov       0x27(%rsp),%al
063b56f4 and       $1,%al
063b56f6 movzbl    %al,%eax
063b56f9 add       $0x38,%rsp
063b56fd ret

core::ptr::mut_ptr::impl$0::is_null<array$<usize,4> >:
063b5700 sub       $0x38,%rsp
063b5704 mov       %rcx,0x30(%rsp)
063b5709 mov       %rcx,0x28(%rsp)
063b570e mov       0x28(%rsp),%rcx
063b5713 xor       %eax,%eax
063b5715 mov       %eax,%edx
063b5717 call      0x0000`0000`063B`5760
063b571c mov       %al,0x27(%rsp)
063b5720 mov       0x27(%rsp),%al
063b5724 and       $1,%al
063b5726 movzbl    %al,%eax
063b5729 add       $0x38,%rsp
063b572d ret

core::ptr::mut_ptr::impl$0::is_null<tuple$<u8,u8> >:
063b5730 sub       $0x38,%rsp
063b5734 mov       %rcx,0x30(%rsp)
063b5739 mov       %rcx,0x28(%rsp)
063b573e mov       0x28(%rsp),%rcx
063b5743 xor       %eax,%eax
063b5745 mov       %eax,%edx
063b5747 call      0x0000`0000`063B`5760
063b574c mov       %al,0x27(%rsp)
063b5750 mov       0x27(%rsp),%al
063b5754 and       $1,%al
063b5756 movzbl    %al,%eax
063b5759 add       $0x38,%rsp
063b575d ret

core::ptr::mut_ptr::impl$0::guaranteed_eq<u8>:
063b5760 sub       $0x20,%rsp
063b5764 mov       %rcx,8(%rsp)
063b5769 mov       %rdx,0x10(%rsp)
063b576e cmp       %rdx,%rcx
063b5771 sete      %al
063b5774 and       $1,%al
063b5776 mov       %al,0x1F(%rsp)
063b577a mov       0x1F(%rsp),%al
063b577e mov       %al,7(%rsp)
063b5782 mov       7(%rsp),%al
063b5786 and       $1,%al
063b5788 movzbl    %al,%eax
063b578b add       $0x20,%rsp
063b578f ret

core::ptr::slice_from_raw_parts<array$<usize,4> >:
063b5790 sub       $0x58,%rsp
063b5794 mov       %rdx,0x38(%rsp)
063b5799 mov       %rcx,0x48(%rsp)
063b579e mov       %rdx,0x50(%rsp)
063b57a3 call      0x0000`0000`063B`5310
063b57a8 mov       %rax,0x40(%rsp)
063b57ad mov       0x38(%rsp),%rdx
063b57b2 mov       0x40(%rsp),%rcx
063b57b7 call      0x0000`0000`063B`4FA0
063b57bc mov       %rax,0x28(%rsp)
063b57c1 mov       %rdx,0x30(%rsp)
063b57c6 mov       0x30(%rsp),%rdx
063b57cb mov       0x28(%rsp),%rax
063b57d0 add       $0x58,%rsp
063b57d4 ret

core::ptr::slice_from_raw_parts<u8>:
063b57e0 sub       $0x58,%rsp
063b57e4 mov       %rdx,0x38(%rsp)
063b57e9 mov       %rcx,0x48(%rsp)
063b57ee mov       %rdx,0x50(%rsp)
063b57f3 call      0x0000`0000`063B`52D0
063b57f8 mov       %rax,0x40(%rsp)
063b57fd mov       0x38(%rsp),%rdx
063b5802 mov       0x40(%rsp),%rcx
063b5807 call      0x0000`0000`063B`4FE0
063b580c mov       %rax,0x28(%rsp)
063b5811 mov       %rdx,0x30(%rsp)
063b5816 mov       0x30(%rsp),%rdx
063b581b mov       0x28(%rsp),%rax
063b5820 add       $0x58,%rsp
063b5824 ret

core::ptr::slice_from_raw_parts<usize>:
063b5830 sub       $0x58,%rsp
063b5834 mov       %rdx,0x38(%rsp)
063b5839 mov       %rcx,0x48(%rsp)
063b583e mov       %rdx,0x50(%rsp)
063b5843 call      0x0000`0000`063B`52F0
063b5848 mov       %rax,0x40(%rsp)
063b584d mov       0x38(%rsp),%rdx
063b5852 mov       0x40(%rsp),%rcx
063b5857 call      0x0000`0000`063B`4F20
063b585c mov       %rax,0x28(%rsp)
063b5861 mov       %rdx,0x30(%rsp)
063b5866 mov       0x30(%rsp),%rdx
063b586b mov       0x28(%rsp),%rax
063b5870 add       $0x58,%rsp
063b5874 ret

core::ptr::slice_from_raw_parts<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b5880 sub       $0x58,%rsp
063b5884 mov       %rdx,0x38(%rsp)
063b5889 mov       %rcx,0x48(%rsp)
063b588e mov       %rdx,0x50(%rsp)
063b5893 call      0x0000`0000`063B`5300
063b5898 mov       %rax,0x40(%rsp)
063b589d mov       0x38(%rsp),%rdx
063b58a2 mov       0x40(%rsp),%rcx
063b58a7 call      0x0000`0000`063B`4F60
063b58ac mov       %rax,0x28(%rsp)
063b58b1 mov       %rdx,0x30(%rsp)
063b58b6 mov       0x30(%rsp),%rdx
063b58bb mov       0x28(%rsp),%rax
063b58c0 add       $0x58,%rsp
063b58c4 ret

core::ptr::slice_from_raw_parts_mut<u8>:
063b58d0 sub       $0x58,%rsp
063b58d4 mov       %rdx,0x30(%rsp)
063b58d9 mov       %rcx,0x40(%rsp)
063b58de mov       %rdx,0x48(%rsp)
063b58e3 mov       %rcx,0x50(%rsp)
063b58e8 mov       %rcx,0x38(%rsp)
063b58ed mov       0x30(%rsp),%rdx
063b58f2 mov       0x38(%rsp),%rcx
063b58f7 call      0x0000`0000`063B`5020
063b58fc mov       %rax,0x20(%rsp)
063b5901 mov       %rdx,0x28(%rsp)
063b5906 mov       0x28(%rsp),%rdx
063b590b mov       0x20(%rsp),%rax
063b5910 add       $0x58,%rsp
063b5914 ret

core::ptr::swap_nonoverlapping<usize>:
063b5920 sub       $0xF8,%rsp
063b5927 mov       %r8,0x58(%rsp)
063b592c mov       %rdx,0x60(%rsp)
063b5931 mov       %rcx,0x68(%rsp)
063b5936 mov       %rcx,0x78(%rsp)
063b593b mov       %rdx,0x80(%rsp)
063b5943 mov       %r8,0x88(%rsp)
063b594b jmp       0x0000`0000`063B`594D
063b594d jmp       0x0000`0000`063B`5959
063b594f movb      $0,0x74(%rsp)
063b5954 jmp       0x0000`0000`063B`59FB
063b5959 jmp       0x0000`0000`063B`595B
063b595b movq      $8,0xE0(%rsp)
063b5967 movq      $8,0xE8(%rsp)
063b5973 movq      $1,0xF0(%rsp)
063b597f mov       0xF0(%rsp),%rax
063b5987 cmp       $1,%eax
063b598a sete      %al
063b598d mov       %al,0x57(%rsp)
063b5991 mov       0x57(%rsp),%al
063b5995 xor       $0xFF,%al
063b5997 test      $1,%al
063b5999 jne       0x0000`0000`063B`599D
063b599b jmp       0x0000`0000`063B`59AE
063b599d movb      $1,0x75(%rsp)
063b59a2 mov       0x75(%rsp),%al
063b59a6 and       $1,%al
063b59a8 mov       %al,0x74(%rsp)
063b59ac jmp       0x0000`0000`063B`59FB
063b59ae jmp       0x0000`0000`063B`59B0
063b59b0 mov       $8,%eax
063b59b5 mov       $2,%ecx
063b59ba mul       %rcx
063b59bd mov       %rax,0x48(%rsp)
063b59c2 seto      %al
063b59c5 test      $1,%al
063b59c7 jne       0x0000`0000`063B`59E1
063b59c9 mov       0x48(%rsp),%rcx
063b59ce mov       $8,%eax
063b59d3 cmp       %rcx,%rax
063b59d6 seta      %al
063b59d9 and       $1,%al
063b59db mov       %al,0x75(%rsp)
063b59df jmp       0x0000`0000`063B`59A2
063b59e1 lea       0x63C`E240,%rcx
063b59e8 lea       0x63C`E690,%r8
063b59ef mov       $0x21,%edx
063b59f4 call      0x0000`0000`063B`8E30
063b59f9 ud2
063b59fb testb     $1,0x74(%rsp)
063b5a00 jne       0x0000`0000`063B`5A1B
063b5a02 mov       0x58(%rsp),%r8
063b5a07 mov       0x60(%rsp),%rdx
063b5a0c mov       0x68(%rsp),%rcx
063b5a11 call      0x0000`0000`063B`5EC0
063b5a16 jmp       0x0000`0000`063B`5B29
063b5a1b jmp       0x0000`0000`063B`5A1D
063b5a1d jmp       0x0000`0000`063B`5A1F
063b5a1f jmp       0x0000`0000`063B`5A28
063b5a21 movb      $0,0x76(%rsp)
063b5a26 jmp       0x0000`0000`063B`5A6E
063b5a28 jmp       0x0000`0000`063B`5A2A
063b5a2a jmp       0x0000`0000`063B`5A2C
063b5a2c mov       $8,%eax
063b5a31 cmp       $0,%rax
063b5a35 sete      %al
063b5a38 test      $1,%al
063b5a3a jne       0x0000`0000`063B`5A54
063b5a3c mov       $8,%eax
063b5a41 and       $7,%rax
063b5a45 cmp       $0,%rax
063b5a49 sete      %al
063b5a4c and       $1,%al
063b5a4e mov       %al,0x76(%rsp)
063b5a52 jmp       0x0000`0000`063B`5A6E
063b5a54 lea       0x63C`E330,%rcx
063b5a5b lea       0x63C`E6A8,%r8
063b5a62 mov       $0x39,%edx
063b5a67 call      0x0000`0000`063B`8E30
063b5a6c ud2
063b5a6e testb     $1,0x76(%rsp)
063b5a73 jne       0x0000`0000`063B`5A7A
063b5a75 jmp       0x0000`0000`063B`5B31
063b5a7a mov       0x68(%rsp),%rax
063b5a7f mov       %rax,0xC8(%rsp)
063b5a87 mov       %rax,0x90(%rsp)
063b5a8f mov       0x60(%rsp),%rax
063b5a94 mov       %rax,0xC0(%rsp)
063b5a9c mov       %rax,0x98(%rsp)
063b5aa4 jmp       0x0000`0000`063B`5AA6
063b5aa6 jmp       0x0000`0000`063B`5AA8
063b5aa8 mov       $8,%eax
063b5aad cmp       $0,%rax
063b5ab1 sete      %al
063b5ab4 test      $1,%al
063b5ab6 jne       0x0000`0000`063B`5AD7
063b5ab8 mov       0x58(%rsp),%rax
063b5abd mov       $8,%ecx
063b5ac2 shr       $3,%rcx
063b5ac6 mul       %rcx
063b5ac9 mov       %rax,0x40(%rsp)
063b5ace seto      %al
063b5ad1 test      $1,%al
063b5ad3 jne       0x0000`0000`063B`5B0F
063b5ad5 jmp       0x0000`0000`063B`5AF1
063b5ad7 lea       0x63C`E310,%rcx
063b5ade lea       0x63C`E6A8,%r8
063b5ae5 mov       $0x19,%edx
063b5aea call      0x0000`0000`063B`8E30
063b5aef ud2
063b5af1 mov       0x40(%rsp),%r8
063b5af6 mov       0x60(%rsp),%rdx
063b5afb mov       0x68(%rsp),%rcx
063b5b00 mov       %r8,0xA0(%rsp)
063b5b08 call      0x0000`0000`063B`5C60
063b5b0d jmp       0x0000`0000`063B`5B29
063b5b0f lea       0x63C`E240,%rcx
063b5b16 lea       0x63C`E6A8,%r8
063b5b1d mov       $0x21,%edx
063b5b22 call      0x0000`0000`063B`8E30
063b5b27 ud2
063b5b29 add       $0xF8,%rsp
063b5b30 ret
063b5b31 jmp       0x0000`0000`063B`5B33
063b5b33 mov       $8,%eax
063b5b38 cmp       $1,%rax
063b5b3c jae       0x0000`0000`063B`5B45
063b5b3e movb      $0,0x77(%rsp)
063b5b43 jmp       0x0000`0000`063B`5B8B
063b5b45 jmp       0x0000`0000`063B`5B47
063b5b47 jmp       0x0000`0000`063B`5B49
063b5b49 mov       $1,%eax
063b5b4e cmp       $0,%rax
063b5b52 sete      %al
063b5b55 test      $1,%al
063b5b57 jne       0x0000`0000`063B`5B71
063b5b59 mov       $8,%eax
063b5b5e and       $0,%rax
063b5b62 cmp       $0,%rax
063b5b66 sete      %al
063b5b69 and       $1,%al
063b5b6b mov       %al,0x77(%rsp)
063b5b6f jmp       0x0000`0000`063B`5B8B
063b5b71 lea       0x63C`E330,%rcx
063b5b78 lea       0x63C`E6C0,%r8
063b5b7f mov       $0x39,%edx
063b5b84 call      0x0000`0000`063B`8E30
063b5b89 ud2
063b5b8b testb     $1,0x77(%rsp)
063b5b90 je        0x0000`0000`063B`5A02
063b5b96 mov       0x68(%rsp),%rax
063b5b9b mov       %rax,0xD8(%rsp)
063b5ba3 mov       %rax,0x38(%rsp)
063b5ba8 mov       %rax,0xA8(%rsp)
063b5bb0 mov       0x60(%rsp),%rax
063b5bb5 mov       %rax,0xD0(%rsp)
063b5bbd mov       %rax,0x30(%rsp)
063b5bc2 mov       %rax,0xB0(%rsp)
063b5bca jmp       0x0000`0000`063B`5BCC
063b5bcc jmp       0x0000`0000`063B`5BCE
063b5bce mov       $1,%eax
063b5bd3 cmp       $0,%rax
063b5bd7 sete      %al
063b5bda test      $1,%al
063b5bdc jne       0x0000`0000`063B`5BFD
063b5bde mov       0x58(%rsp),%rax
063b5be3 mov       $8,%ecx
063b5be8 shr       $0,%rcx
063b5bec mul       %rcx
063b5bef mov       %rax,0x28(%rsp)
063b5bf4 seto      %al
063b5bf7 test      $1,%al
063b5bf9 jne       0x0000`0000`063B`5C38
063b5bfb jmp       0x0000`0000`063B`5C17
063b5bfd lea       0x63C`E310,%rcx
063b5c04 lea       0x63C`E6C0,%r8
063b5c0b mov       $0x19,%edx
063b5c10 call      0x0000`0000`063B`8E30
063b5c15 ud2
063b5c17 mov       0x28(%rsp),%r8
063b5c1c mov       0x30(%rsp),%rdx
063b5c21 mov       0x38(%rsp),%rcx
063b5c26 mov       %r8,0xB8(%rsp)
063b5c2e call      0x0000`0000`063B`5D90
063b5c33 jmp       0x0000`0000`063B`5B29
063b5c38 lea       0x63C`E240,%rcx
063b5c3f lea       0x63C`E6C0,%r8
063b5c46 mov       $0x21,%edx
063b5c4b call      0x0000`0000`063B`8E30
063b5c50 ud2

core::ptr::swap_nonoverlapping_simple<core::mem::maybe_uninit::MaybeUninit<usize> >:
063b5c60 sub       $0xD8,%rsp
063b5c67 mov       %r8,0x40(%rsp)
063b5c6c mov       %rdx,0x48(%rsp)
063b5c71 mov       %rcx,0x50(%rsp)
063b5c76 mov       %rcx,0x60(%rsp)
063b5c7b mov       %rdx,0x68(%rsp)
063b5c80 mov       %r8,0x70(%rsp)
063b5c85 movq      $0,0x58(%rsp)
063b5c8e mov       0x40(%rsp),%rax
063b5c93 cmp       %rax,0x58(%rsp)
063b5c98 jb        0x0000`0000`063B`5CA2
063b5c9a add       $0xD8,%rsp
063b5ca1 ret
063b5ca2 mov       0x50(%rsp),%rax
063b5ca7 mov       0x58(%rsp),%rcx
063b5cac mov       %rax,0xB0(%rsp)
063b5cb4 mov       %rcx,0xB8(%rsp)
063b5cbc mov       %rax,0xC0(%rsp)
063b5cc4 mov       %rcx,0xC8(%rsp)
063b5ccc shl       $3,%rcx
063b5cd0 add       %rcx,%rax
063b5cd3 mov       %rax,0xD0(%rsp)
063b5cdb mov       0xD0(%rsp),%rax
063b5ce3 mov       %rax,0x38(%rsp)
063b5ce8 mov       0x48(%rsp),%rax
063b5ced mov       0x38(%rsp),%rcx
063b5cf2 mov       %rcx,0x78(%rsp)
063b5cf7 mov       0x58(%rsp),%rcx
063b5cfc mov       %rax,0x88(%rsp)
063b5d04 mov       %rcx,0x90(%rsp)
063b5d0c mov       %rax,0x98(%rsp)
063b5d14 mov       %rcx,0xA0(%rsp)
063b5d1c shl       $3,%rcx
063b5d20 add       %rcx,%rax
063b5d23 mov       %rax,0xA8(%rsp)
063b5d2b mov       0xA8(%rsp),%rax
063b5d33 mov       %rax,0x30(%rsp)
063b5d38 mov       0x30(%rsp),%rdx
063b5d3d mov       0x38(%rsp),%rcx
063b5d42 mov       %rdx,0x80(%rsp)
063b5d4a call      0x0000`0000`063B`4D10
063b5d4f mov       0x58(%rsp),%rax
063b5d54 add       $1,%rax
063b5d58 mov       %rax,0x28(%rsp)
063b5d5d setb      %al
063b5d60 test      $1,%al
063b5d62 jne       0x0000`0000`063B`5D73
063b5d64 mov       0x28(%rsp),%rax
063b5d69 mov       %rax,0x58(%rsp)
063b5d6e jmp       0x0000`0000`063B`5C8E
063b5d73 lea       0x63C`E220,%rcx
063b5d7a lea       0x63C`E6D8,%r8
063b5d81 mov       $0x1C,%edx
063b5d86 call      0x0000`0000`063B`8E30
063b5d8b ud2

core::ptr::swap_nonoverlapping_simple<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b5d90 sub       $0xD8,%rsp
063b5d97 mov       %r8,0x40(%rsp)
063b5d9c mov       %rdx,0x48(%rsp)
063b5da1 mov       %rcx,0x50(%rsp)
063b5da6 mov       %rcx,0x60(%rsp)
063b5dab mov       %rdx,0x68(%rsp)
063b5db0 mov       %r8,0x70(%rsp)
063b5db5 movq      $0,0x58(%rsp)
063b5dbe mov       0x40(%rsp),%rax
063b5dc3 cmp       %rax,0x58(%rsp)
063b5dc8 jb        0x0000`0000`063B`5DD2
063b5dca add       $0xD8,%rsp
063b5dd1 ret
063b5dd2 mov       0x50(%rsp),%rax
063b5dd7 mov       0x58(%rsp),%rcx
063b5ddc mov       %rax,0xB0(%rsp)
063b5de4 mov       %rcx,0xB8(%rsp)
063b5dec mov       %rax,0xC0(%rsp)
063b5df4 mov       %rcx,0xC8(%rsp)
063b5dfc add       %rcx,%rax
063b5dff mov       %rax,0xD0(%rsp)
063b5e07 mov       0xD0(%rsp),%rax
063b5e0f mov       %rax,0x38(%rsp)
063b5e14 mov       0x48(%rsp),%rax
063b5e19 mov       0x38(%rsp),%rcx
063b5e1e mov       %rcx,0x78(%rsp)
063b5e23 mov       0x58(%rsp),%rcx
063b5e28 mov       %rax,0x88(%rsp)
063b5e30 mov       %rcx,0x90(%rsp)
063b5e38 mov       %rax,0x98(%rsp)
063b5e40 mov       %rcx,0xA0(%rsp)
063b5e48 add       %rcx,%rax
063b5e4b mov       %rax,0xA8(%rsp)
063b5e53 mov       0xA8(%rsp),%rax
063b5e5b mov       %rax,0x30(%rsp)
063b5e60 mov       0x30(%rsp),%rdx
063b5e65 mov       0x38(%rsp),%rcx
063b5e6a mov       %rdx,0x80(%rsp)
063b5e72 call      0x0000`0000`063B`4CB0
063b5e77 mov       0x58(%rsp),%rax
063b5e7c add       $1,%rax
063b5e80 mov       %rax,0x28(%rsp)
063b5e85 setb      %al
063b5e88 test      $1,%al
063b5e8a jne       0x0000`0000`063B`5E9B
063b5e8c mov       0x28(%rsp),%rax
063b5e91 mov       %rax,0x58(%rsp)
063b5e96 jmp       0x0000`0000`063B`5DBE
063b5e9b lea       0x63C`E220,%rcx
063b5ea2 lea       0x63C`E6D8,%r8
063b5ea9 mov       $0x1C,%edx
063b5eae call      0x0000`0000`063B`8E30
063b5eb3 ud2

core::ptr::swap_nonoverlapping_simple<usize>:
063b5ec0 sub       $0xD8,%rsp
063b5ec7 mov       %r8,0x40(%rsp)
063b5ecc mov       %rdx,0x48(%rsp)
063b5ed1 mov       %rcx,0x50(%rsp)
063b5ed6 mov       %rcx,0x60(%rsp)
063b5edb mov       %rdx,0x68(%rsp)
063b5ee0 mov       %r8,0x70(%rsp)
063b5ee5 movq      $0,0x58(%rsp)
063b5eee mov       0x40(%rsp),%rax
063b5ef3 cmp       %rax,0x58(%rsp)
063b5ef8 jb        0x0000`0000`063B`5F02
063b5efa add       $0xD8,%rsp
063b5f01 ret
063b5f02 mov       0x50(%rsp),%rax
063b5f07 mov       0x58(%rsp),%rcx
063b5f0c mov       %rax,0xB0(%rsp)
063b5f14 mov       %rcx,0xB8(%rsp)
063b5f1c mov       %rax,0xC0(%rsp)
063b5f24 mov       %rcx,0xC8(%rsp)
063b5f2c shl       $3,%rcx
063b5f30 add       %rcx,%rax
063b5f33 mov       %rax,0xD0(%rsp)
063b5f3b mov       0xD0(%rsp),%rax
063b5f43 mov       %rax,0x38(%rsp)
063b5f48 mov       0x48(%rsp),%rax
063b5f4d mov       0x38(%rsp),%rcx
063b5f52 mov       %rcx,0x78(%rsp)
063b5f57 mov       0x58(%rsp),%rcx
063b5f5c mov       %rax,0x88(%rsp)
063b5f64 mov       %rcx,0x90(%rsp)
063b5f6c mov       %rax,0x98(%rsp)
063b5f74 mov       %rcx,0xA0(%rsp)
063b5f7c shl       $3,%rcx
063b5f80 add       %rcx,%rax
063b5f83 mov       %rax,0xA8(%rsp)
063b5f8b mov       0xA8(%rsp),%rax
063b5f93 mov       %rax,0x30(%rsp)
063b5f98 mov       0x30(%rsp),%rdx
063b5f9d mov       0x38(%rsp),%rcx
063b5fa2 mov       %rdx,0x80(%rsp)
063b5faa call      0x0000`0000`063B`4D70
063b5faf mov       0x58(%rsp),%rax
063b5fb4 add       $1,%rax
063b5fb8 mov       %rax,0x28(%rsp)
063b5fbd setb      %al
063b5fc0 test      $1,%al
063b5fc2 jne       0x0000`0000`063B`5FD3
063b5fc4 mov       0x28(%rsp),%rax
063b5fc9 mov       %rax,0x58(%rsp)
063b5fce jmp       0x0000`0000`063B`5EEE
063b5fd3 lea       0x63C`E220,%rcx
063b5fda lea       0x63C`E6D8,%r8
063b5fe1 mov       $0x1C,%edx
063b5fe6 call      0x0000`0000`063B`8E30
063b5feb ud2

core::ptr::read<core::mem::maybe_uninit::MaybeUninit<usize> >:
063b5ff0 sub       $0x40,%rsp
063b5ff4 mov       %rcx,8(%rsp)
063b5ff9 mov       %rcx,0x18(%rsp)
063b5ffe mov       0x20(%rsp),%rax
063b6003 mov       %rax,0x10(%rsp)
063b6008 lea       0x10(%rsp),%rax
063b600d mov       %rax,0x28(%rsp)
063b6012 mov       8(%rsp),%rax
063b6017 mov       (%rax),%rax
063b601a mov       %rax,0x10(%rsp)
063b601f mov       0x10(%rsp),%rax
063b6024 mov       %rax,(%rsp)
063b6028 mov       %rax,0x30(%rsp)
063b602d mov       %rax,0x38(%rsp)
063b6032 mov       (%rsp),%rax
063b6036 add       $0x40,%rsp
063b603a ret

core::ptr::read<char>:
063b6040 sub       $0x38,%rsp
063b6044 mov       %rcx,8(%rsp)
063b6049 mov       %rcx,0x18(%rsp)
063b604e mov       0x24(%rsp),%eax
063b6052 mov       %eax,0x14(%rsp)
063b6056 lea       0x14(%rsp),%rax
063b605b mov       %rax,0x28(%rsp)
063b6060 mov       8(%rsp),%rax
063b6065 mov       (%rax),%eax
063b6067 mov       %eax,0x14(%rsp)
063b606b mov       0x14(%rsp),%eax
063b606f mov       %eax,4(%rsp)
063b6073 mov       %eax,0x30(%rsp)
063b6077 mov       %eax,0x34(%rsp)
063b607b mov       4(%rsp),%eax
063b607f add       $0x38,%rsp
063b6083 ret

core::ptr::read<enum$<core::fmt::rt::v1::Alignment> >:
063b6090 sub       $0x38,%rsp
063b6094 mov       %rcx,8(%rsp)
063b6099 mov       %rcx,0x18(%rsp)
063b609e mov       0x27(%rsp),%al
063b60a2 mov       %al,0x17(%rsp)
063b60a6 lea       0x17(%rsp),%rax
063b60ab mov       %rax,0x28(%rsp)
063b60b0 mov       8(%rsp),%rax
063b60b5 mov       (%rax),%al
063b60b7 mov       %al,0x17(%rsp)
063b60bb mov       0x17(%rsp),%al
063b60bf mov       %al,7(%rsp)
063b60c3 mov       %al,0x36(%rsp)
063b60c7 mov       %al,0x37(%rsp)
063b60cb mov       7(%rsp),%al
063b60cf add       $0x38,%rsp
063b60d3 ret

core::ptr::read<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b60e0 sub       $0x38,%rsp
063b60e4 mov       %rcx,8(%rsp)
063b60e9 mov       %rcx,0x18(%rsp)
063b60ee mov       0x27(%rsp),%al
063b60f2 mov       %al,0x17(%rsp)
063b60f6 lea       0x17(%rsp),%rax
063b60fb mov       %rax,0x28(%rsp)
063b6100 mov       8(%rsp),%rax
063b6105 mov       (%rax),%al
063b6107 mov       %al,0x17(%rsp)
063b610b mov       0x17(%rsp),%al
063b610f mov       %al,7(%rsp)
063b6113 mov       %al,0x36(%rsp)
063b6117 mov       %al,0x37(%rsp)
063b611b mov       7(%rsp),%al
063b611f add       $0x38,%rsp
063b6123 ret

core::ptr::read<usize>:
063b6130 sub       $0x40,%rsp
063b6134 mov       %rcx,8(%rsp)
063b6139 mov       %rcx,0x18(%rsp)
063b613e mov       0x20(%rsp),%rax
063b6143 mov       %rax,0x10(%rsp)
063b6148 lea       0x10(%rsp),%rax
063b614d mov       %rax,0x28(%rsp)
063b6152 mov       8(%rsp),%rax
063b6157 mov       (%rax),%rax
063b615a mov       %rax,0x10(%rsp)
063b615f mov       0x10(%rsp),%rax
063b6164 mov       %rax,(%rsp)
063b6168 mov       %rax,0x30(%rsp)
063b616d mov       %rax,0x38(%rsp)
063b6172 mov       (%rsp),%rax
063b6176 add       $0x40,%rsp
063b617a ret

core::ptr::write<char>:
063b6180 sub       $0x10,%rsp
063b6184 mov       %edx,4(%rsp)
063b6188 mov       %rcx,8(%rsp)
063b618d mov       4(%rsp),%eax
063b6191 mov       %eax,(%rcx)
063b6193 add       $0x10,%rsp
063b6197 ret

core::ptr::write<core::mem::maybe_uninit::MaybeUninit<usize> >:
063b61a0 sub       $0x10,%rsp
063b61a4 mov       %rdx,(%rsp)
063b61a8 mov       %rcx,8(%rsp)
063b61ad mov       (%rsp),%rax
063b61b1 mov       %rax,(%rcx)
063b61b4 add       $0x10,%rsp
063b61b8 ret

core::ptr::write<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b61c0 sub       $0x10,%rsp
063b61c4 mov       %dl,7(%rsp)
063b61c8 mov       %rcx,8(%rsp)
063b61cd mov       7(%rsp),%al
063b61d1 mov       %al,(%rcx)
063b61d3 add       $0x10,%rsp
063b61d7 ret

core::ptr::write<usize>:
063b61e0 sub       $0x10,%rsp
063b61e4 mov       %rdx,(%rsp)
063b61e8 mov       %rcx,8(%rsp)
063b61ed mov       (%rsp),%rax
063b61f1 mov       %rax,(%rcx)
063b61f4 add       $0x10,%rsp
063b61f8 ret

core::ptr::write<enum$<core::fmt::rt::v1::Alignment> >:
063b6200 sub       $0x10,%rsp
063b6204 mov       %dl,7(%rsp)
063b6208 mov       %rcx,8(%rsp)
063b620d mov       7(%rsp),%al
063b6211 mov       %al,(%rcx)
063b6213 add       $0x10,%rsp
063b6217 ret

core::ptr::read_volatile<usize>:
063b6220 sub       $0x48,%rsp
063b6224 mov       %rcx,0x28(%rsp)
063b6229 mov       %rcx,0x38(%rsp)
063b622e call      0x0000`0000`063B`47C0
063b6233 mov       %al,0x37(%rsp)
063b6237 mov       0x37(%rsp),%al
063b623b xor       $0xFF,%al
063b623d test      $1,%al
063b623f jne       0x0000`0000`063B`625A
063b6241 mov       0x28(%rsp),%rax
063b6246 mov       (%rax),%rax
063b6249 mov       %rax,0x40(%rsp)
063b624e mov       0x40(%rsp),%rax
063b6253 mov       %rax,0x20(%rsp)
063b6258 jmp       0x0000`0000`063B`625E
063b625a ud2
063b625c ud2
063b625e mov       0x20(%rsp),%rax
063b6263 add       $0x48,%rsp
063b6267 ret

core::ptr::align_offset<u8>:
063b6270 sub       $0x158,%rsp
063b6277 mov       %rdx,0x90(%rsp)
063b627f mov       %rcx,0x98(%rsp)
063b6287 mov       %rcx,0xA8(%rsp)
063b628f mov       %rdx,0xB0(%rsp)
063b6297 movq      $1,0xB8(%rsp)
063b62a3 mov       0x90(%rsp),%rax
063b62ab sub       $1,%rax
063b62af mov       %rax,0xC0(%rsp)
063b62b7 mov       0xC0(%rsp),%rax
063b62bf mov       %rax,0x88(%rsp)
063b62c7 mov       %rax,0xC8(%rsp)
063b62cf mov       0x98(%rsp),%rcx
063b62d7 mov       0x90(%rsp),%r8
063b62df mov       0x88(%rsp),%rdx
063b62e7 mov       %rcx,%rax
063b62ea add       %rdx,%rax
063b62ed xor       %edx,%edx
063b62ef sub       %r8,%rdx
063b62f2 and       %rdx,%rax
063b62f5 sub       %rcx,%rax
063b62f8 mov       %rax,0xA0(%rsp)
063b6300 jmp       0x0000`0000`063B`6461
063b6305 mov       0x88(%rsp),%rcx
063b630d mov       0x98(%rsp),%rax
063b6315 and       %rcx,%rax
063b6318 mov       %rax,0x80(%rsp)
063b6320 mov       %rax,0xD0(%rsp)
063b6328 cmp       $0,%rax
063b632c jne       0x0000`0000`063B`633F
063b632e movq      $0,0xA0(%rsp)
063b633a jmp       0x0000`0000`063B`6461
063b633f mov       $1,%eax
063b6344 cmp       $0,%rax
063b6348 jne       0x0000`0000`063B`635B
063b634a movq      $0xFFFF`FFFF`FFFF`FFFF,0xA0(%rsp)
063b6356 jmp       0x0000`0000`063B`6461
063b635b mov       0x88(%rsp),%rax
063b6363 and       $1,%rax
063b6367 mov       %rax,0x70(%rsp)
063b636c mov       %rax,0xD8(%rsp)
063b6374 xor       %eax,%eax
063b6376 mov       %rax,0xE0(%rsp)
063b637e mov       0xE0(%rsp),%rax
063b6386 mov       %rax,0x78(%rsp)
063b638b mov       0x90(%rsp),%rax
063b6393 bsf       %rax,%rax
063b6397 mov       %rax,0xE8(%rsp)
063b639f mov       0xE8(%rsp),%rax
063b63a7 mov       %rax,0x68(%rsp)
063b63ac mov       0x68(%rsp),%rdx
063b63b1 mov       0x78(%rsp),%rcx
063b63b6 call      0x0000`0000`063B`6690
063b63bb mov       %rax,0x60(%rsp)
063b63c0 mov       %rax,0xF0(%rsp)
063b63c8 mov       0x60(%rsp),%rcx
063b63cd mov       $1,%eax
063b63d2 shl       %cl,%rax
063b63d5 mov       %rax,0xF8(%rsp)
063b63dd mov       0xF8(%rsp),%rax
063b63e5 mov       %rax,0x58(%rsp)
063b63ea mov       %rax,0x100(%rsp)
063b63f2 mov       0x58(%rsp),%rax
063b63f7 sub       $1,%rax
063b63fb mov       %rax,0x108(%rsp)
063b6403 mov       0x108(%rsp),%rax
063b640b mov       %rax,0x50(%rsp)
063b6410 mov       0x50(%rsp),%rcx
063b6415 mov       0x98(%rsp),%rax
063b641d and       %rcx,%rax
063b6420 cmp       $0,%rax
063b6424 jne       0x0000`0000`063B`6455
063b6426 mov       0x90(%rsp),%rax
063b642e mov       0x60(%rsp),%rcx
063b6433 shr       %cl,%rax
063b6436 mov       %rax,0x110(%rsp)
063b643e mov       0x110(%rsp),%rax
063b6446 mov       %rax,0x48(%rsp)
063b644b mov       %rax,0x118(%rsp)
063b6453 jmp       0x0000`0000`063B`6471
063b6455 movq      $0xFFFF`FFFF`FFFF`FFFF,0xA0(%rsp)
063b6461 mov       0xA0(%rsp),%rax
063b6469 add       $0x158,%rsp
063b6470 ret
063b6471 mov       0x48(%rsp),%rax
063b6476 sub       $1,%rax
063b647a mov       %rax,0x120(%rsp)
063b6482 mov       0x120(%rsp),%rax
063b648a mov       %rax,0x40(%rsp)
063b648f mov       %rax,0x128(%rsp)
063b6497 mov       0x70(%rsp),%rax
063b649c mov       0x60(%rsp),%rcx
063b64a1 shr       %cl,%rax
063b64a4 mov       %rax,0x130(%rsp)
063b64ac mov       0x130(%rsp),%rax
063b64b4 mov       %rax,0x38(%rsp)
063b64b9 mov       %rax,0x138(%rsp)
063b64c1 mov       0x80(%rsp),%rax
063b64c9 mov       0x60(%rsp),%rcx
063b64ce shr       %cl,%rax
063b64d1 mov       %rax,0x140(%rsp)
063b64d9 mov       0x140(%rsp),%rax
063b64e1 mov       %rax,0x30(%rsp)
063b64e6 mov       0x30(%rsp),%rcx
063b64eb mov       0x48(%rsp),%rax
063b64f0 sub       %rcx,%rax
063b64f3 mov       %rax,0x148(%rsp)
063b64fb mov       0x148(%rsp),%rax
063b6503 mov       %rax,0x28(%rsp)
063b6508 mov       %rax,0x150(%rsp)
063b6510 mov       0x48(%rsp),%rdx
063b6515 mov       0x38(%rsp),%rcx
063b651a call      0x0000`0000`063B`6550
063b651f mov       %rax,0x20(%rsp)
063b6524 mov       0x40(%rsp),%rcx
063b6529 mov       0x20(%rsp),%rdx
063b652e mov       0x28(%rsp),%rax
063b6533 imul      %rdx,%rax
063b6537 and       %rcx,%rax
063b653a mov       %rax,0xA0(%rsp)
063b6542 jmp       0x0000`0000`063B`6461

core::ptr::align_offset::mod_inv:
063b6550 sub       $0x98,%rsp
063b6557 mov       %rdx,0x38(%rsp)
063b655c mov       %rcx,%rax
063b655f mov       %rax,0x40(%rsp)
063b6564 mov       %rax,0x70(%rsp)
063b6569 mov       %rdx,0x78(%rsp)
063b656e mov       0x63C`E6F0,%rcx
063b6575 mov       %rcx,0x58(%rsp)
063b657a and       $0xF,%rax
063b657e shr       $1,%rax
063b6582 mov       %rax,0x48(%rsp)
063b6587 mov       0x48(%rsp),%rax
063b658c cmp       $8,%rax
063b6590 setb      %al
063b6593 test      $1,%al
063b6595 jne       0x0000`0000`063B`6599
063b6597 jmp       0x0000`0000`063B`65D8
063b6599 mov       0x38(%rsp),%rax
063b659e mov       0x48(%rsp),%rcx
063b65a3 movzbl    0x58(%rsp,%rcx),%ecx
063b65a8 mov       %rcx,0x28(%rsp)
063b65ad mov       %rcx,0x80(%rsp)
063b65b5 sub       $1,%rax
063b65b9 mov       %rax,0x88(%rsp)
063b65c1 mov       0x88(%rsp),%rax
063b65c9 mov       %rax,0x30(%rsp)
063b65ce mov       %rax,0x90(%rsp)
063b65d6 jmp       0x0000`0000`063B`65F0
063b65d8 mov       0x48(%rsp),%rcx
063b65dd lea       0x63C`E6F8,%r8
063b65e4 mov       $8,%edx
063b65e9 call      0x0000`0000`063B`8E90
063b65ee ud2
063b65f0 mov       0x38(%rsp),%rax
063b65f5 cmp       $0x10,%rax
063b65f9 jbe       0x0000`0000`063B`6610
063b65fb mov       0x28(%rsp),%rax
063b6600 mov       %rax,0x60(%rsp)
063b6605 movq      $0x100,0x68(%rsp)
063b660e jmp       0x0000`0000`063B`662F
063b6610 mov       0x30(%rsp),%rcx
063b6615 mov       0x28(%rsp),%rax
063b661a and       %rcx,%rax
063b661d mov       %rax,0x50(%rsp)
063b6622 mov       0x50(%rsp),%rax
063b6627 add       $0x98,%rsp
063b662e ret
063b662f mov       0x38(%rsp),%rax
063b6634 mov       0x40(%rsp),%r8
063b6639 mov       0x60(%rsp),%rcx
063b663e imul      0x60(%rsp),%r8
063b6644 mov       $2,%edx
063b6649 sub       %r8,%rdx
063b664c imul      %rdx,%rcx
063b6650 mov       %rcx,0x60(%rsp)
063b6655 cmp       %rax,0x68(%rsp)
063b665a jae       0x0000`0000`063B`666E
063b665c mov       0x68(%rsp),%rax
063b6661 imul      0x68(%rsp),%rax
063b6667 mov       %rax,0x68(%rsp)
063b666c jmp       0x0000`0000`063B`662F
063b666e mov       0x30(%rsp),%rax
063b6673 and       0x60(%rsp),%rax
063b6678 mov       %rax,0x50(%rsp)
063b667d jmp       0x0000`0000`063B`6622

core::clone::impls::impl$3::clone<str>:
063b6680 push      %rax
063b6681 mov       %rcx,(%rsp)
063b6685 mov       (%rcx),%rax
063b6688 mov       8(%rcx),%rdx
063b668c pop       %rcx
063b668d ret

core::cmp::Ord::min<usize>:
063b6690 sub       $0x38,%rsp
063b6694 mov       %rcx,0x28(%rsp)
063b6699 mov       %rdx,0x30(%rsp)
063b669e call      0x0000`0000`063B`66F0
063b66a3 mov       %rax,0x20(%rsp)
063b66a8 mov       0x20(%rsp),%rax
063b66ad add       $0x38,%rsp
063b66b1 ret

core::cmp::min<usize>:
063b66c0 sub       $0x38,%rsp
063b66c4 mov       %rcx,0x28(%rsp)
063b66c9 mov       %rdx,0x30(%rsp)
063b66ce call      0x0000`0000`063B`6690
063b66d3 mov       %rax,0x20(%rsp)
063b66d8 mov       0x20(%rsp),%rax
063b66dd add       $0x38,%rsp
063b66e1 ret

core::cmp::min_by<usize,enum$<core::cmp::Ordering> (*)(ref$<usize>,ref$<usize>)>:
063b66f0 sub       $0x68,%rsp
063b66f4 mov       %rcx,0x28(%rsp)
063b66f9 mov       %rdx,0x30(%rsp)
063b66fe movb      $0,0x5F(%rsp)
063b6703 movb      $0,0x5E(%rsp)
063b6708 movb      $1,0x5F(%rsp)
063b670d movb      $1,0x5E(%rsp)
063b6712 lea       0x28(%rsp),%rax
063b6717 mov       %rax,0x48(%rsp)
063b671c lea       0x30(%rsp),%rax
063b6721 mov       %rax,0x50(%rsp)
063b6726 mov       0x48(%rsp),%rcx
063b672b mov       0x50(%rsp),%rdx
063b6730 call      0x0000`0000`063B`4620
063b6735 mov       %al,0x47(%rsp)
063b6739 mov       0x47(%rsp),%al
063b673d add       $1,%al
063b673f sub       $2,%al
063b6741 jb        0x0000`0000`063B`6749
063b6743 jmp       0x0000`0000`063B`6745
063b6745 jmp       0x0000`0000`063B`675A
063b6747 ud2
063b6749 movb      $0,0x5F(%rsp)
063b674e mov       0x28(%rsp),%rax
063b6753 mov       %rax,0x38(%rsp)
063b6758 jmp       0x0000`0000`063B`6769
063b675a movb      $0,0x5E(%rsp)
063b675f mov       0x30(%rsp),%rax
063b6764 mov       %rax,0x38(%rsp)
063b6769 testb     $1,0x5E(%rsp)
063b676e jne       0x0000`0000`063B`6779
063b6770 testb     $1,0x5F(%rsp)
063b6775 jne       0x0000`0000`063B`6785
063b6777 jmp       0x0000`0000`063B`677B
063b6779 jmp       0x0000`0000`063B`6770
063b677b mov       0x38(%rsp),%rax
063b6780 add       $0x68,%rsp
063b6784 ret
063b6785 jmp       0x0000`0000`063B`677B

core::cmp::impls::impl$9::eq<slice$<u8>,slice$<u8> >:
063b6790 sub       $0x38,%rsp
063b6794 mov       %rdx,%rax
063b6797 mov       %rcx,%rdx
063b679a mov       %rdx,0x28(%rsp)
063b679f mov       %rax,0x30(%rsp)
063b67a4 mov       (%rdx),%rcx
063b67a7 mov       8(%rdx),%rdx
063b67ab mov       (%rax),%r8
063b67ae mov       8(%rax),%r9
063b67b2 call      0x0000`0000`063C`0660
063b67b7 mov       %al,0x27(%rsp)
063b67bb mov       0x27(%rsp),%al
063b67bf and       $1,%al
063b67c1 movzbl    %al,%eax
063b67c4 add       $0x38,%rsp
063b67c8 ret

core::convert::impl$4::from<core::fmt::Error>:
063b67d0 push      %rax
063b67d1 pop       %rax
063b67d2 ret

core::convert::impl$4::from<usize>:
063b67e0 push      %rax
063b67e1 mov       %rcx,%rax
063b67e4 mov       %rax,(%rsp)
063b67e8 pop       %rcx
063b67e9 ret

core::ops::range::impl$1::fmt<usize>:
063b67f0 sub       $0xC8,%rsp
063b67f7 mov       %rdx,0x38(%rsp)
063b67fc mov       %rcx,0x40(%rsp)
063b6801 mov       %rcx,0x88(%rsp)
063b6809 mov       %rdx,0x90(%rsp)
063b6811 call      0x0000`0000`063C`7CC0
063b6816 mov       %al,0x4C(%rsp)
063b681a mov       0x4C(%rsp),%cl
063b681e and       $1,%cl
063b6821 call      0x0000`0000`063B`96F0
063b6826 and       $1,%al
063b6828 mov       %al,0x4E(%rsp)
063b682c movzbl    0x4E(%rsp),%eax
063b6831 test      $1,%al
063b6833 je        0x0000`0000`063B`683B
063b6835 jmp       0x0000`0000`063B`6837
063b6837 jmp       0x0000`0000`063B`6866
063b6839 ud2
063b683b lea       0x50(%rsp),%rcx
063b6840 lea       0x63C`E718,%rdx
063b6847 mov       $1,%r8d
063b684d lea       0x63C`E370,%r9
063b6854 xor       %eax,%eax
063b6856 movq      $0,0x20(%rsp)
063b685f call      0x0000`0000`063B`DE30
063b6864 jmp       0x0000`0000`063B`6889
063b6866 lea       0x63C`E7A0,%rcx
063b686d call      0x0000`0000`063B`9770
063b6872 and       $1,%al
063b6874 mov       %al,0x4D(%rsp)
063b6878 mov       0x4D(%rsp),%al
063b687c and       $1,%al
063b687e movzbl    %al,%eax
063b6881 add       $0xC8,%rsp
063b6888 ret
063b6889 mov       0x38(%rsp),%rcx
063b688e lea       0x50(%rsp),%rdx
063b6893 call      0x0000`0000`063B`FA90
063b6898 mov       %al,0x37(%rsp)
063b689c mov       0x37(%rsp),%cl
063b68a0 and       $1,%cl
063b68a3 call      0x0000`0000`063B`96F0
063b68a8 and       $1,%al
063b68aa mov       %al,0x4F(%rsp)
063b68ae movzbl    0x4F(%rsp),%eax
063b68b3 test      $1,%al
063b68b5 je        0x0000`0000`063B`68BD
063b68b7 jmp       0x0000`0000`063B`68B9
063b68b9 jmp       0x0000`0000`063B`68D6
063b68bb ud2
063b68bd mov       0x38(%rsp),%rdx
063b68c2 mov       0x40(%rsp),%rcx
063b68c7 add       $8,%rcx
063b68cb call      0x0000`0000`063C`7CC0
063b68d0 mov       %al,0x36(%rsp)
063b68d4 jmp       0x0000`0000`063B`68EA
063b68d6 lea       0x63C`E7B8,%rcx
063b68dd call      0x0000`0000`063B`9770
063b68e2 and       $1,%al
063b68e4 mov       %al,0x4D(%rsp)
063b68e8 jmp       0x0000`0000`063B`6878
063b68ea mov       0x36(%rsp),%cl
063b68ee and       $1,%cl
063b68f1 call      0x0000`0000`063B`96F0
063b68f6 and       $1,%al
063b68f8 mov       %al,0x87(%rsp)
063b68ff movzbl    0x87(%rsp),%eax
063b6907 test      $1,%al
063b6909 je        0x0000`0000`063B`6911
063b690b jmp       0x0000`0000`063B`690D
063b690d jmp       0x0000`0000`063B`691B
063b690f ud2
063b6911 movb      $0,0x4D(%rsp)
063b6916 jmp       0x0000`0000`063B`6878
063b691b lea       0x63C`E7D0,%rcx
063b6922 call      0x0000`0000`063B`9770
063b6927 and       $1,%al
063b6929 mov       %al,0x4D(%rsp)
063b692d jmp       0x0000`0000`063B`6878

core::ops::range::RangeInclusive<usize>::new<usize>:
063b6940 sub       $0x10,%rsp
063b6944 mov       %rcx,%rax
063b6947 mov       %rdx,(%rsp)
063b694b mov       %r8,8(%rsp)
063b6950 mov       %rdx,(%rcx)
063b6953 mov       %r8,8(%rcx)
063b6957 movb      $0,0x10(%rcx)
063b695b add       $0x10,%rsp
063b695f ret

core::ops::range::RangeInclusive<usize>::end<usize>:
063b6960 push      %rax
063b6961 mov       %rcx,%rax
063b6964 mov       %rax,(%rsp)
063b6968 add       $8,%rax
063b696c pop       %rcx
063b696d ret

core::ops::range::RangeInclusive<usize>::into_slice_range:
063b6970 sub       $0x58,%rsp
063b6974 mov       %rcx,0x28(%rsp)
063b6979 mov       8(%rcx),%rax
063b697d add       $1,%rax
063b6981 mov       %rax,0x30(%rsp)
063b6986 setb      %al
063b6989 test      $1,%al
063b698b jne       0x0000`0000`063B`69A4
063b698d mov       0x28(%rsp),%rax
063b6992 mov       0x30(%rsp),%rcx
063b6997 mov       %rcx,0x50(%rsp)
063b699c testb     $1,0x10(%rax)
063b69a0 jne       0x0000`0000`063B`69CD
063b69a2 jmp       0x0000`0000`063B`69BE
063b69a4 lea       0x63C`E220,%rcx
063b69ab lea       0x63C`E7E8,%r8
063b69b2 mov       $0x1C,%edx
063b69b7 call      0x0000`0000`063B`8E30
063b69bc ud2
063b69be mov       0x28(%rsp),%rax
063b69c3 mov       (%rax),%rax
063b69c6 mov       %rax,0x48(%rsp)
063b69cb jmp       0x0000`0000`063B`69D7
063b69cd mov       0x30(%rsp),%rax
063b69d2 mov       %rax,0x48(%rsp)
063b69d7 mov       0x30(%rsp),%rax
063b69dc mov       0x48(%rsp),%rcx
063b69e1 mov       %rcx,0x38(%rsp)
063b69e6 mov       %rax,0x40(%rsp)
063b69eb mov       0x38(%rsp),%rax
063b69f0 mov       0x40(%rsp),%rdx
063b69f5 add       $0x58,%rsp
063b69f9 ret

core::any::impl$0::type_id<core::panic::panic_info::impl$0::internal_constructor::NoPayload>:
063b6a00 sub       $0x38,%rsp
063b6a04 mov       %rcx,0x30(%rsp)
063b6a09 call      0x0000`0000`063B`6A20
063b6a0e mov       %rax,0x28(%rsp)
063b6a13 mov       0x28(%rsp),%rax
063b6a18 add       $0x38,%rsp
063b6a1c ret

core::any::TypeId::of<core::panic::panic_info::impl$0::internal_constructor::NoPayload>:
063b6a20 sub       $0x18,%rsp
063b6a24 movabs    $0x93ED`F856`EE82`B78A,%rax
063b6a2e mov       %rax,0x10(%rsp)
063b6a33 mov       0x10(%rsp),%rax
063b6a38 mov       %rax,(%rsp)
063b6a3c mov       (%rsp),%rax
063b6a40 mov       %rax,8(%rsp)
063b6a45 mov       8(%rsp),%rax
063b6a4a add       $0x18,%rsp
063b6a4e ret

core::array::impl$13::into_iter<usize,4>:
063b6a50 sub       $0x38,%rsp
063b6a54 mov       %rcx,0x30(%rsp)
063b6a59 mov       $4,%edx
063b6a5e call      0x0000`0000`063C`2D90
063b6a63 mov       %rax,0x20(%rsp)
063b6a68 mov       %rdx,0x28(%rsp)
063b6a6d mov       0x28(%rsp),%rdx
063b6a72 mov       0x20(%rsp),%rax
063b6a77 add       $0x38,%rsp
063b6a7b ret

core::array::impl$15::index<u8,core::ops::range::Range<usize>,4>:
063b6a80 sub       $0x58,%rsp
063b6a84 mov       %r9,%rax
063b6a87 mov       %r8,%r9
063b6a8a mov       %rdx,%r8
063b6a8d mov       %rcx,0x40(%rsp)
063b6a92 mov       %r8,0x48(%rsp)
063b6a97 mov       %r9,0x50(%rsp)
063b6a9c mov       $4,%edx
063b6aa1 mov       %rax,0x20(%rsp)
063b6aa6 call      0x0000`0000`063C`0750
063b6aab mov       %rax,0x30(%rsp)
063b6ab0 mov       %rdx,0x38(%rsp)
063b6ab5 mov       0x38(%rsp),%rdx
063b6aba mov       0x30(%rsp),%rax
063b6abf add       $0x58,%rsp
063b6ac3 ret

core::array::impl$15::index<core::mem::maybe_uninit::MaybeUninit<u8>,core::ops::range::RangeFrom<usize>,128>:
063b6ad0 sub       $0x48,%rsp
063b6ad4 mov       %r8,%r9
063b6ad7 mov       %rdx,%r8
063b6ada mov       %rcx,0x38(%rsp)
063b6adf mov       %r8,0x40(%rsp)
063b6ae4 mov       $0x80,%edx
063b6ae9 call      0x0000`0000`063C`0800
063b6aee mov       %rax,0x28(%rsp)
063b6af3 mov       %rdx,0x30(%rsp)
063b6af8 mov       0x30(%rsp),%rdx
063b6afd mov       0x28(%rsp),%rax
063b6b02 add       $0x48,%rsp
063b6b06 ret

core::char::convert::from_u32:
063b6b10 sub       $0x38,%rsp
063b6b14 mov       %ecx,0x30(%rsp)
063b6b18 call      0x0000`0000`063B`6B90
063b6b1d mov       %eax,0x2C(%rsp)
063b6b21 mov       0x2C(%rsp),%eax
063b6b25 add       $0xFFEF`0000,%eax
063b6b2a sete      %al
063b6b2d movzbl    %al,%eax
063b6b30 jne       0x0000`0000`063B`6B38
063b6b32 jmp       0x0000`0000`063B`6B34
063b6b34 jmp       0x0000`0000`063B`6B46
063b6b36 ud2
063b6b38 mov       0x2C(%rsp),%eax
063b6b3c mov       %eax,0x34(%rsp)
063b6b40 mov       %eax,0x28(%rsp)
063b6b44 jmp       0x0000`0000`063B`6B4E
063b6b46 movl      $0x11`0000,0x28(%rsp)
063b6b4e mov       0x28(%rsp),%eax
063b6b52 add       $0x38,%rsp
063b6b56 ret

core::char::convert::from_u32_unchecked:
063b6b60 sub       $0x38,%rsp
063b6b64 mov       %ecx,0x34(%rsp)
063b6b68 call      0x0000`0000`063B`6D20
063b6b6d mov       %eax,0x30(%rsp)
063b6b71 mov       0x30(%rsp),%ecx
063b6b75 lea       0x63C`E880,%rdx
063b6b7c call      0x0000`0000`063B`8470
063b6b81 mov       %eax,0x2C(%rsp)
063b6b85 mov       0x2C(%rsp),%eax
063b6b89 add       $0x38,%rsp
063b6b8d ret

core::char::convert::char_try_from_u32:
063b6b90 sub       $0x20,%rsp
063b6b94 mov       %ecx,%eax
063b6b96 mov       %eax,4(%rsp)
063b6b9a mov       %eax,0x10(%rsp)
063b6b9e xor       $0xD800,%eax
063b6ba3 mov       %eax,0x18(%rsp)
063b6ba7 movl      $0x800,0x1C(%rsp)
063b6baf sub       $0x800,%eax
063b6bb4 mov       %eax,8(%rsp)
063b6bb8 mov       8(%rsp),%eax
063b6bbc cmp       $0x10`F800,%eax
063b6bc1 jae       0x0000`0000`063B`6BD4
063b6bc3 mov       4(%rsp),%eax
063b6bc7 mov       %eax,0x14(%rsp)
063b6bcb mov       0x14(%rsp),%eax
063b6bcf mov       %eax,(%rsp)
063b6bd2 jmp       0x0000`0000`063B`6BE5
063b6bd4 movl      $0x11`0000,0xC(%rsp)
063b6bdc mov       0xC(%rsp),%eax
063b6be0 add       $0x20,%rsp
063b6be4 ret
063b6be5 mov       (%rsp),%eax
063b6be8 mov       %eax,0xC(%rsp)
063b6bec jmp       0x0000`0000`063B`6BDC

core::char::convert::from_digit:
063b6bf0 sub       $0x78,%rsp
063b6bf4 mov       %edx,0x2C(%rsp)
063b6bf8 mov       %ecx,0x30(%rsp)
063b6bfc mov       %ecx,0x6C(%rsp)
063b6c00 mov       %edx,0x70(%rsp)
063b6c04 cmp       $0x24,%edx
063b6c07 ja        0x0000`0000`063B`6C17
063b6c09 mov       0x30(%rsp),%eax
063b6c0d mov       0x2C(%rsp),%ecx
063b6c11 cmp       %ecx,%eax
063b6c13 jb        0x0000`0000`063B`6C5D
063b6c15 jmp       0x0000`0000`063B`6C53
063b6c17 lea       0x38(%rsp),%rcx
063b6c1c lea       0x63C`E8C8,%rdx
063b6c23 mov       $1,%r8d
063b6c29 lea       0x63C`E370,%r9
063b6c30 xor       %eax,%eax
063b6c32 movq      $0,0x20(%rsp)
063b6c3b call      0x0000`0000`063B`DE30
063b6c40 lea       0x63C`E8D8,%rdx
063b6c47 lea       0x38(%rsp),%rcx
063b6c4c call      0x0000`0000`063B`8F40
063b6c51 ud2
063b6c53 movl      $0x11`0000,0x34(%rsp)
063b6c5b jmp       0x0000`0000`063B`6CB8
063b6c5d mov       0x30(%rsp),%eax
063b6c61 mov       %al,0x2B(%rsp)
063b6c65 mov       %al,0x77(%rsp)
063b6c69 cmp       $0xA,%al
063b6c6b jb        0x0000`0000`063B`6C80
063b6c6d mov       0x2B(%rsp),%al
063b6c71 add       $0x61,%al
063b6c73 mov       %al,0x2A(%rsp)
063b6c77 setb      %al
063b6c7a test      $1,%al
063b6c7c jne       0x0000`0000`063B`6CD4
063b6c7e jmp       0x0000`0000`063B`6CC1
063b6c80 mov       0x2B(%rsp),%al
063b6c84 add       $0x30,%al
063b6c86 mov       %al,0x29(%rsp)
063b6c8a setb      %al
063b6c8d test      $1,%al
063b6c8f jne       0x0000`0000`063B`6C9E
063b6c91 mov       0x29(%rsp),%al
063b6c95 movzbl    %al,%eax
063b6c98 mov       %eax,0x34(%rsp)
063b6c9c jmp       0x0000`0000`063B`6CB8
063b6c9e lea       0x63C`E220,%rcx
063b6ca5 lea       0x63C`E8F0,%r8
063b6cac mov       $0x1C,%edx
063b6cb1 call      0x0000`0000`063B`8E30
063b6cb6 ud2
063b6cb8 mov       0x34(%rsp),%eax
063b6cbc add       $0x78,%rsp
063b6cc0 ret
063b6cc1 mov       0x2A(%rsp),%al
063b6cc5 sub       $0xA,%al
063b6cc7 mov       %al,0x28(%rsp)
063b6ccb setb      %al
063b6cce test      $1,%al
063b6cd0 jne       0x0000`0000`063B`6CFB
063b6cd2 jmp       0x0000`0000`063B`6CEE
063b6cd4 lea       0x63C`E220,%rcx
063b6cdb lea       0x63C`E908,%r8
063b6ce2 mov       $0x1C,%edx
063b6ce7 call      0x0000`0000`063B`8E30
063b6cec ud2
063b6cee mov       0x28(%rsp),%al
063b6cf2 movzbl    %al,%eax
063b6cf5 mov       %eax,0x34(%rsp)
063b6cf9 jmp       0x0000`0000`063B`6CB8
063b6cfb lea       0x63C`E1F0,%rcx
063b6d02 lea       0x63C`E920,%r8
063b6d09 mov       $0x21,%edx
063b6d0e call      0x0000`0000`063B`8E30
063b6d13 ud2

core::char::methods::impl$0::from_u32:
063b6d20 sub       $0x28,%rsp
063b6d24 mov       %ecx,0x24(%rsp)
063b6d28 call      0x0000`0000`063B`6B10
063b6d2d mov       %eax,0x20(%rsp)
063b6d31 mov       0x20(%rsp),%eax
063b6d35 add       $0x28,%rsp
063b6d39 ret

core::char::methods::impl$0::escape_unicode:
063b6d40 sub       $0x58,%rsp
063b6d44 mov       %edx,0x24(%rsp)
063b6d48 mov       %rcx,0x28(%rsp)
063b6d4d mov       %rcx,0x30(%rsp)
063b6d52 mov       %edx,0x40(%rsp)
063b6d56 mov       %edx,0x44(%rsp)
063b6d5a or        $1,%edx
063b6d5d mov       %edx,0x50(%rsp)
063b6d61 bsr       %edx,%eax
063b6d64 mov       $0x3F,%ecx
063b6d69 cmove     %ecx,%eax
063b6d6c xor       $0x1F,%eax
063b6d6f mov       %eax,0x54(%rsp)
063b6d73 mov       0x54(%rsp),%eax
063b6d77 mov       %eax,0x3C(%rsp)
063b6d7b mov       0x3C(%rsp),%ecx
063b6d7f mov       $0x1F,%eax
063b6d84 sub       %ecx,%eax
063b6d86 mov       %eax,0x20(%rsp)
063b6d8a setb      %al
063b6d8d test      $1,%al
063b6d8f jne       0x0000`0000`063B`6DC1
063b6d91 mov       0x30(%rsp),%rax
063b6d96 mov       0x28(%rsp),%rcx
063b6d9b mov       0x24(%rsp),%r8d
063b6da0 mov       0x20(%rsp),%edx
063b6da4 mov       %edx,0x48(%rsp)
063b6da8 shr       $2,%edx
063b6dab mov       %edx,0x4C(%rsp)
063b6daf mov       %edx,%edx
063b6db1 mov       %r8d,8(%rcx)
063b6db5 movb      $5,0xC(%rcx)
063b6db9 mov       %rdx,(%rcx)
063b6dbc add       $0x58,%rsp
063b6dc0 ret
063b6dc1 lea       0x63C`E1F0,%rcx
063b6dc8 lea       0x63C`E9B8,%r8
063b6dcf mov       $0x21,%edx
063b6dd4 call      0x0000`0000`063B`8E30
063b6dd9 ud2

core::char::methods::impl$0::escape_debug_ext:
063b6de0 sub       $0xB8,%rsp
063b6de7 mov       %edx,0x2C(%rsp)
063b6deb mov       %rcx,0x30(%rsp)
063b6df0 mov       %rcx,0x38(%rsp)
063b6df5 mov       %r8w,%ax
063b6df9 mov       %ax,0x44(%rsp)
063b6dfe shr       $0x10,%r8d
063b6e02 mov       %r8b,%al
063b6e05 mov       %al,0x46(%rsp)
063b6e09 mov       0x46(%rsp),%al
063b6e0d mov       %al,0x42(%rsp)
063b6e11 mov       0x44(%rsp),%ax
063b6e16 mov       %ax,0x40(%rsp)
063b6e1b mov       %edx,0xB4(%rsp)
063b6e22 sub       $9,%edx
063b6e25 je        0x0000`0000`063B`6E70
063b6e27 jmp       0x0000`0000`063B`6E29
063b6e29 mov       0x2C(%rsp),%eax
063b6e2d sub       $0xA,%eax
063b6e30 je        0x0000`0000`063B`6E94
063b6e32 jmp       0x0000`0000`063B`6E34
063b6e34 mov       0x2C(%rsp),%eax
063b6e38 sub       $0xD,%eax
063b6e3b je        0x0000`0000`063B`6E82
063b6e3d jmp       0x0000`0000`063B`6E3F
063b6e3f mov       0x2C(%rsp),%eax
063b6e43 sub       $0x22,%eax
063b6e46 je        0x0000`0000`063B`6EB8
063b6e48 jmp       0x0000`0000`063B`6E4A
063b6e4a mov       0x2C(%rsp),%eax
063b6e4e sub       $0x27,%eax
063b6e51 je        0x0000`0000`063B`6EC5
063b6e53 jmp       0x0000`0000`063B`6E55
063b6e55 mov       0x2C(%rsp),%eax
063b6e59 sub       $0x5C,%eax
063b6e5c je        0x0000`0000`063B`6EA6
063b6e5e jmp       0x0000`0000`063B`6E60
063b6e60 testb     $1,0x40(%rsp)
063b6e65 jne       0x0000`0000`063B`6F8C
063b6e6b jmp       0x0000`0000`063B`6F7D
063b6e70 movl      $0x74,0x4C(%rsp)
063b6e78 movl      $2,0x48(%rsp)
063b6e80 jmp       0x0000`0000`063B`6EDC
063b6e82 movl      $0x72,0x4C(%rsp)
063b6e8a movl      $2,0x48(%rsp)
063b6e92 jmp       0x0000`0000`063B`6EDC
063b6e94 movl      $0x6E,0x4C(%rsp)
063b6e9c movl      $2,0x48(%rsp)
063b6ea4 jmp       0x0000`0000`063B`6EDC
063b6ea6 mov       0x2C(%rsp),%eax
063b6eaa mov       %eax,0x4C(%rsp)
063b6eae movl      $2,0x48(%rsp)
063b6eb6 jmp       0x0000`0000`063B`6EDC
063b6eb8 testb     $1,0x42(%rsp)
063b6ebd jne       0x0000`0000`063B`6F68
063b6ec3 jmp       0x0000`0000`063B`6E60
063b6ec5 testb     $1,0x41(%rsp)
063b6eca je        0x0000`0000`063B`6E60
063b6ecc mov       0x2C(%rsp),%eax
063b6ed0 mov       %eax,0x4C(%rsp)
063b6ed4 movl      $2,0x48(%rsp)
063b6edc mov       0x38(%rsp),%rax
063b6ee1 mov       0x30(%rsp),%rcx
063b6ee6 mov       0x48(%rsp),%rdx
063b6eeb mov       %rdx,0x98(%rsp)
063b6ef3 mov       0x50(%rsp),%rdx
063b6ef8 mov       %rdx,0xA0(%rsp)
063b6f00 mov       0x58(%rsp),%rdx
063b6f05 mov       %rdx,0xA8(%rsp)
063b6f0d mov       0x98(%rsp),%rdx
063b6f15 mov       %rdx,0x80(%rsp)
063b6f1d mov       0xA0(%rsp),%rdx
063b6f25 mov       %rdx,0x88(%rsp)
063b6f2d mov       0xA8(%rsp),%rdx
063b6f35 mov       %rdx,0x90(%rsp)
063b6f3d mov       0x80(%rsp),%rdx
063b6f45 mov       %rdx,(%rcx)
063b6f48 mov       0x88(%rsp),%rdx
063b6f50 mov       %rdx,8(%rcx)
063b6f54 mov       0x90(%rsp),%rdx
063b6f5c mov       %rdx,0x10(%rcx)
063b6f60 add       $0xB8,%rsp
063b6f67 ret
063b6f68 mov       0x2C(%rsp),%eax
063b6f6c mov       %eax,0x4C(%rsp)
063b6f70 movl      $2,0x48(%rsp)
063b6f78 jmp       0x0000`0000`063B`6EDC
063b6f7d mov       0x2C(%rsp),%ecx
063b6f81 call      0x0000`0000`063C`6E20
063b6f86 mov       %al,0x2B(%rsp)
063b6f8a jmp       0x0000`0000`063B`6FD2
063b6f8c mov       0x2C(%rsp),%ecx
063b6f90 call      0x0000`0000`063B`70A0
063b6f95 mov       %al,0x2A(%rsp)
063b6f99 mov       0x2A(%rsp),%al
063b6f9d test      $1,%al
063b6f9f jne       0x0000`0000`063B`6FA3
063b6fa1 jmp       0x0000`0000`063B`6F7D
063b6fa3 mov       0x2C(%rsp),%edx
063b6fa7 lea       0x60(%rsp),%rcx
063b6fac call      0x0000`0000`063B`6D40
063b6fb1 mov       0x60(%rsp),%rax
063b6fb6 mov       %rax,0x50(%rsp)
063b6fbb mov       0x68(%rsp),%rax
063b6fc0 mov       %rax,0x58(%rsp)
063b6fc5 movl      $3,0x48(%rsp)
063b6fcd jmp       0x0000`0000`063B`6EDC
063b6fd2 mov       0x2B(%rsp),%al
063b6fd6 test      $1,%al
063b6fd8 jne       0x0000`0000`063B`6FEC
063b6fda jmp       0x0000`0000`063B`6FDC
063b6fdc mov       0x2C(%rsp),%edx
063b6fe0 lea       0x70(%rsp),%rcx
063b6fe5 call      0x0000`0000`063B`6D40
063b6fea jmp       0x0000`0000`063B`7001
063b6fec mov       0x2C(%rsp),%eax
063b6ff0 mov       %eax,0x4C(%rsp)
063b6ff4 movl      $1,0x48(%rsp)
063b6ffc jmp       0x0000`0000`063B`6EDC
063b7001 mov       0x70(%rsp),%rax
063b7006 mov       %rax,0x50(%rsp)
063b700b mov       0x78(%rsp),%rax
063b7010 mov       %rax,0x58(%rsp)
063b7015 movl      $3,0x48(%rsp)
063b701d jmp       0x0000`0000`063B`6EDC

core::char::methods::impl$0::len_utf8:
063b7030 sub       $0x38,%rsp
063b7034 mov       %ecx,0x34(%rsp)
063b7038 call      0x0000`0000`063B`70C0
063b703d mov       %rax,0x28(%rsp)
063b7042 mov       0x28(%rsp),%rax
063b7047 add       $0x38,%rsp
063b704b ret

core::char::methods::impl$0::encode_utf8:
063b7050 sub       $0x58,%rsp
063b7054 mov       %ecx,0x44(%rsp)
063b7058 mov       %rdx,0x48(%rsp)
063b705d mov       %r8,0x50(%rsp)
063b7062 call      0x0000`0000`063B`7130
063b7067 mov       %rax,0x30(%rsp)
063b706c mov       %rdx,0x38(%rsp)
063b7071 mov       0x38(%rsp),%rdx
063b7076 mov       0x30(%rsp),%rcx
063b707b call      0x0000`0000`063C`3FB0
063b7080 mov       %rax,0x20(%rsp)
063b7085 mov       %rdx,0x28(%rsp)
063b708a mov       0x28(%rsp),%rdx
063b708f mov       0x20(%rsp),%rax
063b7094 add       $0x58,%rsp
063b7098 ret

core::char::methods::impl$0::is_grapheme_extended:
063b70a0 sub       $0x28,%rsp
063b70a4 mov       %ecx,0x24(%rsp)
063b70a8 call      0x0000`0000`063C`9BC0
063b70ad mov       %al,0x23(%rsp)
063b70b1 mov       0x23(%rsp),%al
063b70b5 and       $1,%al
063b70b7 movzbl    %al,%eax
063b70ba add       $0x28,%rsp
063b70be ret

core::char::methods::len_utf8:
063b70c0 sub       $0x18,%rsp
063b70c4 mov       %ecx,4(%rsp)
063b70c8 mov       %ecx,0x14(%rsp)
063b70cc cmp       $0x80,%ecx
063b70d2 jb        0x0000`0000`063B`70E1
063b70d4 mov       4(%rsp),%eax
063b70d8 cmp       $0x800,%eax
063b70dd jb        0x0000`0000`063B`7101
063b70df jmp       0x0000`0000`063B`70F4
063b70e1 movq      $1,8(%rsp)
063b70ea mov       8(%rsp),%rax
063b70ef add       $0x18,%rsp
063b70f3 ret
063b70f4 mov       4(%rsp),%eax
063b70f8 cmp       $0x1`0000,%eax
063b70fd jb        0x0000`0000`063B`7117
063b70ff jmp       0x0000`0000`063B`710C
063b7101 movq      $2,8(%rsp)
063b710a jmp       0x0000`0000`063B`70EA
063b710c movq      $4,8(%rsp)
063b7115 jmp       0x0000`0000`063B`70EA
063b7117 movq      $3,8(%rsp)
063b7120 jmp       0x0000`0000`063B`70EA

core::char::methods::encode_utf8_raw:
063b7130 sub       $0x1F8,%rsp
063b7137 mov       %r8,0xF0(%rsp)
063b713f mov       %rdx,0xF8(%rsp)
063b7147 mov       %ecx,0x104(%rsp)
063b714e mov       %rdx,0x198(%rsp)
063b7156 mov       %r8,0x1A0(%rsp)
063b715e mov       0x104(%rsp),%ecx
063b7165 call      0x0000`0000`063B`70C0
063b716a mov       %rax,0x108(%rsp)
063b7172 mov       0xF0(%rsp),%rdx
063b717a mov       0xF8(%rsp),%rcx
063b7182 mov       0x108(%rsp),%rax
063b718a mov       %rax,0xD8(%rsp)
063b7192 lea       0x63C`E9D0,%r8
063b7199 call      0x0000`0000`063C`0950
063b719e mov       %rax,0xE0(%rsp)
063b71a6 mov       %rdx,0xE8(%rsp)
063b71ae mov       0xE8(%rsp),%rax
063b71b6 mov       0xE0(%rsp),%rcx
063b71be mov       0xD8(%rsp),%rdx
063b71c6 mov       %rdx,0x110(%rsp)
063b71ce mov       %rcx,0x118(%rsp)
063b71d6 mov       %rax,0x120(%rsp)
063b71de mov       0x110(%rsp),%rax
063b71e6 add       $0xFFFF`FFFF`FFFF`FFFF,%rax
063b71ea mov       %rax,0xD0(%rsp)
063b71f2 sub       $3,%rax
063b71f6 ja        0x0000`0000`063B`7210
063b71f8 mov       0xD0(%rsp),%rax
063b7200 lea       0x63B`75C4,%rcx
063b7207 movslq    (%rcx,%rax,4),%rax
063b720b add       %rcx,%rax
063b720e jmp       *%rax
063b7210 lea       0x108(%rsp),%rcx
063b7218 call      0x0000`0000`063C`87D0
063b721d mov       %rax,0xC0(%rsp)
063b7225 mov       %rdx,0xC8(%rsp)
063b722d jmp       0x0000`0000`063B`74EE
063b7232 cmpq      $1,0x120(%rsp)
063b723b jae       0x0000`0000`063B`74B8
063b7241 jmp       0x0000`0000`063B`7210
063b7243 cmpq      $2,0x120(%rsp)
063b724c jae       0x0000`0000`063B`7452
063b7252 jmp       0x0000`0000`063B`7210
063b7254 cmpq      $3,0x120(%rsp)
063b725d jae       0x0000`0000`063B`73B4
063b7263 jmp       0x0000`0000`063B`7210
063b7265 cmpq      $4,0x120(%rsp)
063b726e jb        0x0000`0000`063B`7210
063b7270 mov       0x118(%rsp),%rax
063b7278 mov       %rax,0x98(%rsp)
063b7280 mov       %rax,0x1A8(%rsp)
063b7288 mov       0x118(%rsp),%rax
063b7290 add       $1,%rax
063b7294 mov       %rax,0xA0(%rsp)
063b729c mov       %rax,0x1B0(%rsp)
063b72a4 mov       0x118(%rsp),%rax
063b72ac add       $2,%rax
063b72b0 mov       %rax,0xA8(%rsp)
063b72b8 mov       %rax,0x1B8(%rsp)
063b72c0 mov       0x118(%rsp),%rax
063b72c8 add       $3,%rax
063b72cc mov       %rax,0xB0(%rsp)
063b72d4 mov       %rax,0x1C0(%rsp)
063b72dc mov       0x104(%rsp),%eax
063b72e3 shr       $0x12,%eax
063b72e6 mov       %eax,0xBC(%rsp)
063b72ed mov       0x98(%rsp),%rax
063b72f5 mov       0xBC(%rsp),%ecx
063b72fc and       $7,%ecx
063b72ff or        $0xF0,%cl
063b7302 mov       %cl,(%rax)
063b7304 mov       0x104(%rsp),%eax
063b730b shr       $0xC,%eax
063b730e mov       %eax,0x94(%rsp)
063b7315 mov       0xA0(%rsp),%rax
063b731d mov       0x94(%rsp),%ecx
063b7324 and       $0x3F,%ecx
063b7327 or        $0x80,%cl
063b732a mov       %cl,(%rax)
063b732c mov       0x104(%rsp),%eax
063b7333 shr       $6,%eax
063b7336 mov       %eax,0x90(%rsp)
063b733d mov       0xB0(%rsp),%rax
063b7345 mov       0xA8(%rsp),%rcx
063b734d mov       0x90(%rsp),%edx
063b7354 and       $0x3F,%edx
063b7357 or        $0x80,%dl
063b735a mov       %dl,(%rcx)
063b735c mov       0x104(%rsp),%ecx
063b7363 and       $0x3F,%ecx
063b7366 or        $0x80,%cl
063b7369 mov       %cl,(%rax)
063b736b mov       0xF0(%rsp),%rdx
063b7373 mov       0xF8(%rsp),%rcx
063b737b mov       0x108(%rsp),%rax
063b7383 mov       %rax,0x190(%rsp)
063b738b mov       0x190(%rsp),%r8
063b7393 lea       0x63C`E9E8,%r9
063b739a call      0x0000`0000`063C`0900
063b739f mov       %rax,0x80(%rsp)
063b73a7 mov       %rdx,0x88(%rsp)
063b73af jmp       0x0000`0000`063B`74D6
063b73b4 mov       0x118(%rsp),%rax
063b73bc mov       %rax,0x60(%rsp)
063b73c1 mov       %rax,0x1C8(%rsp)
063b73c9 mov       0x118(%rsp),%rax
063b73d1 add       $1,%rax
063b73d5 mov       %rax,0x68(%rsp)
063b73da mov       %rax,0x1D0(%rsp)
063b73e2 mov       0x118(%rsp),%rax
063b73ea add       $2,%rax
063b73ee mov       %rax,0x70(%rsp)
063b73f3 mov       %rax,0x1D8(%rsp)
063b73fb mov       0x104(%rsp),%eax
063b7402 shr       $0xC,%eax
063b7405 mov       %eax,0x7C(%rsp)
063b7409 mov       0x60(%rsp),%rax
063b740e mov       0x7C(%rsp),%ecx
063b7412 and       $0xF,%ecx
063b7415 or        $0xE0,%cl
063b7418 mov       %cl,(%rax)
063b741a mov       0x104(%rsp),%eax
063b7421 shr       $6,%eax
063b7424 mov       %eax,0x5C(%rsp)
063b7428 mov       0x70(%rsp),%rax
063b742d mov       0x68(%rsp),%rcx
063b7432 mov       0x5C(%rsp),%edx
063b7436 and       $0x3F,%edx
063b7439 or        $0x80,%dl
063b743c mov       %dl,(%rcx)
063b743e mov       0x104(%rsp),%ecx
063b7445 and       $0x3F,%ecx
063b7448 or        $0x80,%cl
063b744b mov       %cl,(%rax)
063b744d jmp       0x0000`0000`063B`736B
063b7452 mov       0x118(%rsp),%rax
063b745a mov       %rax,0x48(%rsp)
063b745f mov       %rax,0x1E0(%rsp)
063b7467 mov       0x118(%rsp),%rax
063b746f add       $1,%rax
063b7473 mov       %rax,0x50(%rsp)
063b7478 mov       %rax,0x1E8(%rsp)
063b7480 mov       0x104(%rsp),%eax
063b7487 shr       $6,%eax
063b748a mov       %eax,0x58(%rsp)
063b748e mov       0x50(%rsp),%rax
063b7493 mov       0x48(%rsp),%rcx
063b7498 mov       0x58(%rsp),%edx
063b749c and       $0x1F,%edx
063b749f or        $0xC0,%dl
063b74a2 mov       %dl,(%rcx)
063b74a4 mov       0x104(%rsp),%ecx
063b74ab and       $0x3F,%ecx
063b74ae or        $0x80,%cl
063b74b1 mov       %cl,(%rax)
063b74b3 jmp       0x0000`0000`063B`736B
063b74b8 mov       0x118(%rsp),%rax
063b74c0 mov       %rax,0x1F0(%rsp)
063b74c8 mov       0x104(%rsp),%ecx
063b74cf mov       %cl,(%rax)
063b74d1 jmp       0x0000`0000`063B`736B
063b74d6 mov       0x88(%rsp),%rdx
063b74de mov       0x80(%rsp),%rax
063b74e6 add       $0x1F8,%rsp
063b74ed ret
063b74ee lea       0x104(%rsp),%rcx
063b74f6 call      0x0000`0000`063C`8980
063b74fb mov       %rax,0x38(%rsp)
063b7500 mov       %rdx,0x40(%rsp)
063b7505 mov       0xF0(%rsp),%rax
063b750d mov       %rax,0x188(%rsp)
063b7515 lea       0x188(%rsp),%rcx
063b751d call      0x0000`0000`063C`87D0
063b7522 mov       %rax,0x28(%rsp)
063b7527 mov       %rdx,0x30(%rsp)
063b752c mov       0x30(%rsp),%rax
063b7531 mov       0x28(%rsp),%rcx
063b7536 mov       0x40(%rsp),%rdx
063b753b mov       0x38(%rsp),%r8
063b7540 mov       0xC8(%rsp),%r9
063b7548 mov       0xC0(%rsp),%r10
063b7550 mov       %r10,0x158(%rsp)
063b7558 mov       %r9,0x160(%rsp)
063b7560 mov       %r8,0x168(%rsp)
063b7568 mov       %rdx,0x170(%rsp)
063b7570 mov       %rcx,0x178(%rsp)
063b7578 mov       %rax,0x180(%rsp)
063b7580 lea       0x158(%rsp),%r9
063b7588 lea       0x128(%rsp),%rcx
063b7590 lea       0x63C`EA40,%rdx
063b7597 mov       $3,%r8d
063b759d movq      $3,0x20(%rsp)
063b75a6 call      0x0000`0000`063B`DE30
063b75ab lea       0x63C`EA70,%rdx
063b75b2 lea       0x128(%rsp),%rcx
063b75ba call      0x0000`0000`063B`8F40
063b75bf ud2

core::char::impl$0::next:
063b75e0 sub       $0x78,%rsp
063b75e4 mov       %rcx,0x48(%rsp)
063b75e9 mov       %rcx,0x68(%rsp)
063b75ee movzbl    0xC(%rcx),%eax
063b75f2 mov       %rax,0x50(%rsp)
063b75f7 mov       0x50(%rsp),%rax
063b75fc lea       0x63B`77B0,%rcx
063b7603 movslq    (%rcx,%rax,4),%rax
063b7607 add       %rcx,%rax
063b760a jmp       *%rax
063b760c ud2
063b760e movl      $0x11`0000,0x5C(%rsp)
063b7616 jmp       0x0000`0000`063B`76AE
063b761b mov       0x48(%rsp),%rax
063b7620 movb      $0,0x67(%rsp)
063b7625 mov       0x67(%rsp),%cl
063b7629 mov       %cl,0xC(%rax)
063b762c movl      $0x7D,0x5C(%rsp)
063b7634 jmp       0x0000`0000`063B`76AE
063b7636 mov       0x48(%rsp),%rax
063b763b mov       8(%rax),%ecx
063b763e mov       %ecx,0x3C(%rsp)
063b7642 mov       (%rax),%rax
063b7645 mov       $4,%ecx
063b764a mul       %rcx
063b764d mov       %rax,0x40(%rsp)
063b7652 seto      %al
063b7655 test      $1,%al
063b7657 jne       0x0000`0000`063B`76DD
063b765d jmp       0x0000`0000`063B`76B7
063b765f mov       0x48(%rsp),%rax
063b7664 movb      $2,0x65(%rsp)
063b7669 mov       0x65(%rsp),%cl
063b766d mov       %cl,0xC(%rax)
063b7670 movl      $0x7B,0x5C(%rsp)
063b7678 jmp       0x0000`0000`063B`76AE
063b767a mov       0x48(%rsp),%rax
063b767f movb      $3,0x64(%rsp)
063b7684 mov       0x64(%rsp),%cl
063b7688 mov       %cl,0xC(%rax)
063b768b movl      $0x75,0x5C(%rsp)
063b7693 jmp       0x0000`0000`063B`76AE
063b7695 mov       0x48(%rsp),%rax
063b769a movb      $4,0x63(%rsp)
063b769f mov       0x63(%rsp),%cl
063b76a3 mov       %cl,0xC(%rax)
063b76a6 movl      $0x5C,0x5C(%rsp)
063b76ae mov       0x5C(%rsp),%eax
063b76b2 add       $0x78,%rsp
063b76b6 ret
063b76b7 mov       0x3C(%rsp),%edx
063b76bb mov       0x40(%rsp),%rcx
063b76c0 mov       %rcx,%rax
063b76c3 and       $0xFFFF`FFFF`FFFF`FFE0,%rax
063b76c7 cmp       $0,%rax
063b76cb setne     %al
063b76ce and       $0x1F,%ecx
063b76d1 shr       %cl,%edx
063b76d3 mov       %edx,0x38(%rsp)
063b76d7 test      $1,%al
063b76d9 jne       0x0000`0000`063B`7712
063b76db jmp       0x0000`0000`063B`76F7
063b76dd lea       0x63C`E240,%rcx
063b76e4 lea       0x63C`EB00,%r8
063b76eb mov       $0x21,%edx
063b76f0 call      0x0000`0000`063B`8E30
063b76f5 ud2
063b76f7 mov       0x38(%rsp),%ecx
063b76fb and       $0xF,%ecx
063b76fe mov       %ecx,0x70(%rsp)
063b7702 mov       $0x10,%edx
063b7707 call      0x0000`0000`063B`6BF0
063b770c mov       %eax,0x34(%rsp)
063b7710 jmp       0x0000`0000`063B`772C
063b7712 lea       0x63C`E2A0,%rcx
063b7719 lea       0x63C`EB18,%r8
063b7720 mov       $0x24,%edx
063b7725 call      0x0000`0000`063B`8E30
063b772a ud2
063b772c mov       0x34(%rsp),%ecx
063b7730 lea       0x63C`EB30,%rdx
063b7737 call      0x0000`0000`063B`8470
063b773c mov       %eax,0x30(%rsp)
063b7740 mov       %eax,0x74(%rsp)
063b7744 mov       0x48(%rsp),%rax
063b7749 cmpq      $0,(%rax)
063b774d jne       0x0000`0000`063B`7762
063b774f mov       0x48(%rsp),%rax
063b7754 movb      $1,0x66(%rsp)
063b7759 mov       0x66(%rsp),%cl
063b775d mov       %cl,0xC(%rax)
063b7760 jmp       0x0000`0000`063B`77A3
063b7762 mov       0x48(%rsp),%rax
063b7767 mov       (%rax),%rax
063b776a sub       $1,%rax
063b776e mov       %rax,0x28(%rsp)
063b7773 setb      %al
063b7776 test      $1,%al
063b7778 jne       0x0000`0000`063B`7789
063b777a mov       0x48(%rsp),%rax
063b777f mov       0x28(%rsp),%rcx
063b7784 mov       %rcx,(%rax)
063b7787 jmp       0x0000`0000`063B`77A3
063b7789 lea       0x63C`E1F0,%rcx
063b7790 lea       0x63C`EB48,%r8
063b7797 mov       $0x21,%edx
063b779c call      0x0000`0000`063B`8E30
063b77a1 ud2
063b77a3 mov       0x30(%rsp),%eax
063b77a7 mov       %eax,0x5C(%rsp)
063b77ab jmp       0x0000`0000`063B`76AE

core::char::impl$4::next:
063b77d0 sub       $0x88,%rsp
063b77d7 mov       %rcx,0x28(%rsp)
063b77dc mov       %rcx,0x70(%rsp)
063b77e1 mov       (%rcx),%eax
063b77e3 mov       %rax,0x30(%rsp)
063b77e8 mov       0x30(%rsp),%rax
063b77ed lea       0x63B`78A8,%rcx
063b77f4 movslq    (%rcx,%rax,4),%rax
063b77f8 add       %rcx,%rax
063b77fb jmp       *%rax
063b77fd ud2
063b77ff movl      $0x11`0000,0x3C(%rsp)
063b7807 jmp       0x0000`0000`063B`7899
063b780c mov       0x28(%rsp),%rcx
063b7811 mov       4(%rcx),%eax
063b7814 mov       %eax,0x84(%rsp)
063b781b movl      $0,0x58(%rsp)
063b7823 mov       0x58(%rsp),%rdx
063b7828 mov       %rdx,(%rcx)
063b782b mov       0x60(%rsp),%rdx
063b7830 mov       %rdx,8(%rcx)
063b7834 mov       0x68(%rsp),%rdx
063b7839 mov       %rdx,0x10(%rcx)
063b783d mov       %eax,0x3C(%rsp)
063b7841 jmp       0x0000`0000`063B`7899
063b7843 mov       0x28(%rsp),%rax
063b7848 mov       4(%rax),%ecx
063b784b mov       %ecx,0x80(%rsp)
063b7852 mov       %ecx,0x44(%rsp)
063b7856 movl      $1,0x40(%rsp)
063b785e mov       0x40(%rsp),%rcx
063b7863 mov       %rcx,(%rax)
063b7866 mov       0x48(%rsp),%rcx
063b786b mov       %rcx,8(%rax)
063b786f mov       0x50(%rsp),%rcx
063b7874 mov       %rcx,0x10(%rax)
063b7878 movl      $0x5C,0x3C(%rsp)
063b7880 jmp       0x0000`0000`063B`7899
063b7882 mov       0x28(%rsp),%rcx
063b7887 add       $8,%rcx
063b788b mov       %rcx,0x78(%rsp)
063b7890 call      0x0000`0000`063B`75E0
063b7895 mov       %eax,0x3C(%rsp)
063b7899 mov       0x3C(%rsp),%eax
063b789d add       $0x88,%rsp
063b78a4 ret

core::char::impl$8::next:
063b78c0 sub       $0x38,%rsp
063b78c4 mov       %rcx,0x30(%rsp)
063b78c9 call      0x0000`0000`063B`77D0
063b78ce mov       %eax,0x2C(%rsp)
063b78d2 mov       0x2C(%rsp),%eax
063b78d6 add       $0x38,%rsp
063b78da ret

core::iter::adapters::cloned::Cloned<core::slice::iter::Iter<u8> >::new<core::slice::iter::Iter<u8> >:
063b78e0 sub       $0x20,%rsp
063b78e4 mov       %rcx,0x10(%rsp)
063b78e9 mov       %rdx,0x18(%rsp)
063b78ee mov       %rcx,(%rsp)
063b78f2 mov       %rdx,8(%rsp)
063b78f7 mov       (%rsp),%rax
063b78fb mov       8(%rsp),%rdx
063b7900 add       $0x20,%rsp
063b7904 ret

core::iter::adapters::cloned::impl$1::next<core::slice::iter::Iter<u8>,u8>:
063b7910 sub       $0x38,%rsp
063b7914 mov       %rcx,0x30(%rsp)
063b7919 call      0x0000`0000`063C`8BD0
063b791e mov       %rax,0x28(%rsp)
063b7923 mov       0x28(%rsp),%rcx
063b7928 call      0x0000`0000`063B`8B10
063b792d mov       %al,0x26(%rsp)
063b7931 mov       %dl,0x27(%rsp)
063b7935 mov       0x27(%rsp),%dl
063b7939 mov       0x26(%rsp),%al
063b793d and       $1,%al
063b793f add       $0x38,%rsp
063b7943 ret

core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<core::fmt::rt::v1::Argument> >::new<core::slice::iter::Iter<core::fmt::rt::v1::Argument> >:
063b7950 sub       $0x10,%rsp
063b7954 mov       %rcx,%rax
063b7957 mov       %rdx,(%rsp)
063b795b mov       %r8,8(%rsp)
063b7960 mov       %rdx,(%rcx)
063b7963 mov       %r8,8(%rcx)
063b7967 movq      $0,0x10(%rcx)
063b796f add       $0x10,%rsp
063b7973 ret

core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<core::fmt::ArgumentV1> >::new<core::slice::iter::Iter<core::fmt::ArgumentV1> >:
063b7980 sub       $0x10,%rsp
063b7984 mov       %rcx,%rax
063b7987 mov       %rdx,(%rsp)
063b798b mov       %r8,8(%rsp)
063b7990 mov       %rdx,(%rcx)
063b7993 mov       %r8,8(%rcx)
063b7997 movq      $0,0x10(%rcx)
063b799f add       $0x10,%rsp
063b79a3 ret

core::iter::adapters::enumerate::impl$1::next<core::slice::iter::Iter<core::fmt::ArgumentV1> >:
063b79b0 sub       $0x98,%rsp
063b79b7 mov       %rcx,0x38(%rsp)
063b79bc mov       %rcx,0x70(%rsp)
063b79c1 call      0x0000`0000`063C`8AB0
063b79c6 mov       %rax,0x40(%rsp)
063b79cb mov       0x40(%rsp),%rcx
063b79d0 call      0x0000`0000`063B`8B70
063b79d5 mov       %rax,0x58(%rsp)
063b79da mov       0x58(%rsp),%rax
063b79df test      %rax,%rax
063b79e2 sete      %al
063b79e5 movzbl    %al,%eax
063b79e8 jne       0x0000`0000`063B`79F0
063b79ea jmp       0x0000`0000`063B`79EC
063b79ec jmp       0x0000`0000`063B`7A36
063b79ee ud2
063b79f0 mov       0x38(%rsp),%rax
063b79f5 mov       0x58(%rsp),%rcx
063b79fa mov       %rcx,0x20(%rsp)
063b79ff mov       %rcx,0x80(%rsp)
063b7a07 mov       %rcx,0x88(%rsp)
063b7a0f mov       0x10(%rax),%rcx
063b7a13 mov       %rcx,0x28(%rsp)
063b7a18 mov       %rcx,0x90(%rsp)
063b7a20 mov       0x10(%rax),%rax
063b7a24 add       $1,%rax
063b7a28 mov       %rax,0x30(%rsp)
063b7a2d setb      %al
063b7a30 test      $1,%al
063b7a32 jne       0x0000`0000`063B`7A8F
063b7a34 jmp       0x0000`0000`063B`7A57
063b7a36 call      0x0000`0000`063B`8D00
063b7a3b mov       %rdx,0x50(%rsp)
063b7a40 mov       %rax,0x48(%rsp)
063b7a45 mov       0x48(%rsp),%rax
063b7a4a mov       0x50(%rsp),%rdx
063b7a4f add       $0x98,%rsp
063b7a56 ret
063b7a57 mov       0x20(%rsp),%rax
063b7a5c mov       0x28(%rsp),%rcx
063b7a61 mov       0x38(%rsp),%rdx
063b7a66 mov       0x30(%rsp),%r8
063b7a6b mov       %r8,0x10(%rdx)
063b7a6f mov       %rcx,0x60(%rsp)
063b7a74 mov       %rax,0x68(%rsp)
063b7a79 mov       0x60(%rsp),%rcx
063b7a7e mov       0x68(%rsp),%rax
063b7a83 mov       %rcx,0x48(%rsp)
063b7a88 mov       %rax,0x50(%rsp)
063b7a8d jmp       0x0000`0000`063B`7A45
063b7a8f lea       0x63C`E220,%rcx
063b7a96 lea       0x63C`EBE8,%r8
063b7a9d mov       $0x1C,%edx
063b7aa2 call      0x0000`0000`063B`8E30
063b7aa7 ud2

core::iter::adapters::enumerate::impl$1::next<core::slice::iter::Iter<core::fmt::rt::v1::Argument> >:
063b7ab0 sub       $0x98,%rsp
063b7ab7 mov       %rcx,0x38(%rsp)
063b7abc mov       %rcx,0x70(%rsp)
063b7ac1 call      0x0000`0000`063C`9050
063b7ac6 mov       %rax,0x40(%rsp)
063b7acb mov       0x40(%rsp),%rcx
063b7ad0 call      0x0000`0000`063B`8C90
063b7ad5 mov       %rax,0x58(%rsp)
063b7ada mov       0x58(%rsp),%rax
063b7adf test      %rax,%rax
063b7ae2 sete      %al
063b7ae5 movzbl    %al,%eax
063b7ae8 jne       0x0000`0000`063B`7AF0
063b7aea jmp       0x0000`0000`063B`7AEC
063b7aec jmp       0x0000`0000`063B`7B36
063b7aee ud2
063b7af0 mov       0x38(%rsp),%rax
063b7af5 mov       0x58(%rsp),%rcx
063b7afa mov       %rcx,0x20(%rsp)
063b7aff mov       %rcx,0x80(%rsp)
063b7b07 mov       %rcx,0x88(%rsp)
063b7b0f mov       0x10(%rax),%rcx
063b7b13 mov       %rcx,0x28(%rsp)
063b7b18 mov       %rcx,0x90(%rsp)
063b7b20 mov       0x10(%rax),%rax
063b7b24 add       $1,%rax
063b7b28 mov       %rax,0x30(%rsp)
063b7b2d setb      %al
063b7b30 test      $1,%al
063b7b32 jne       0x0000`0000`063B`7B8F
063b7b34 jmp       0x0000`0000`063B`7B57
063b7b36 call      0x0000`0000`063B`8CE0
063b7b3b mov       %rdx,0x50(%rsp)
063b7b40 mov       %rax,0x48(%rsp)
063b7b45 mov       0x48(%rsp),%rax
063b7b4a mov       0x50(%rsp),%rdx
063b7b4f add       $0x98,%rsp
063b7b56 ret
063b7b57 mov       0x20(%rsp),%rax
063b7b5c mov       0x28(%rsp),%rcx
063b7b61 mov       0x38(%rsp),%rdx
063b7b66 mov       0x30(%rsp),%r8
063b7b6b mov       %r8,0x10(%rdx)
063b7b6f mov       %rcx,0x60(%rsp)
063b7b74 mov       %rax,0x68(%rsp)
063b7b79 mov       0x60(%rsp),%rcx
063b7b7e mov       0x68(%rsp),%rax
063b7b83 mov       %rcx,0x48(%rsp)
063b7b88 mov       %rax,0x50(%rsp)
063b7b8d jmp       0x0000`0000`063B`7B45
063b7b8f lea       0x63C`E220,%rcx
063b7b96 lea       0x63C`EBE8,%r8
063b7b9d mov       $0x1C,%edx
063b7ba2 call      0x0000`0000`063B`8E30
063b7ba7 ud2

core::iter::adapters::filter::Filter<core::slice::iter::Iter<u8>,core::str::count::char_count_general_case::closure_env$0>::new<core::slice::iter::Iter<u8>,core::str::count::char_count_general_case::closure_env$0>:
063b7bb0 sub       $0x28,%rsp
063b7bb4 mov       %rcx,0x10(%rsp)
063b7bb9 mov       %rdx,0x18(%rsp)
063b7bbe mov       %rcx,(%rsp)
063b7bc2 mov       %rdx,8(%rsp)
063b7bc7 mov       (%rsp),%rax
063b7bcb mov       8(%rsp),%rdx
063b7bd0 add       $0x28,%rsp
063b7bd4 ret

core::iter::adapters::filter::impl$2::count<core::slice::iter::Iter<u8>,core::str::count::char_count_general_case::closure_env$0>:
063b7be0 sub       $0x58,%rsp
063b7be4 mov       %rdx,0x38(%rsp)
063b7be9 mov       %rcx,0x40(%rsp)
063b7bee mov       %rcx,0x48(%rsp)
063b7bf3 mov       %rdx,0x50(%rsp)
063b7bf8 call      0x0000`0000`063B`7C40
063b7bfd mov       0x38(%rsp),%rdx
063b7c02 mov       0x40(%rsp),%rcx
063b7c07 call      0x0000`0000`063B`8160
063b7c0c mov       %rax,0x28(%rsp)
063b7c11 mov       %rdx,0x30(%rsp)
063b7c16 mov       0x30(%rsp),%rdx
063b7c1b mov       0x28(%rsp),%rcx
063b7c20 call      0x0000`0000`063B`8310
063b7c25 mov       %rax,0x20(%rsp)
063b7c2a mov       0x20(%rsp),%rax
063b7c2f add       $0x58,%rsp
063b7c33 ret

core::iter::adapters::filter::impl$2::count::to_usize<ref$<u8>,core::str::count::char_count_general_case::closure_env$0>:
063b7c40 ret

core::iter::adapters::filter::impl$2::count::to_usize::closure$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0>:
063b7c50 sub       $0x48,%rsp
063b7c54 mov       %rdx,0x30(%rsp)
063b7c59 mov       %rcx,0x40(%rsp)
063b7c5e lea       0x30(%rsp),%rax
063b7c63 mov       %rax,0x38(%rsp)
063b7c68 mov       0x38(%rsp),%rdx
063b7c6d call      0x0000`0000`063C`48B0
063b7c72 mov       %al,0x2F(%rsp)
063b7c76 mov       0x2F(%rsp),%al
063b7c7a and       $1,%al
063b7c7c movzbl    %al,%eax
063b7c7f mov       %rax,0x20(%rsp)
063b7c84 mov       0x20(%rsp),%rax
063b7c89 add       $0x48,%rsp
063b7c8d ret

core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> >::new<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> >:
063b7c90 sub       $0x28,%rsp
063b7c94 mov       %rcx,0x10(%rsp)
063b7c99 mov       %rdx,0x18(%rsp)
063b7c9e mov       %rcx,(%rsp)
063b7ca2 mov       %rdx,8(%rsp)
063b7ca7 mov       (%rsp),%rax
063b7cab mov       8(%rsp),%rdx
063b7cb0 add       $0x28,%rsp
063b7cb4 ret

core::iter::adapters::map::map_fold<ref$<u8>,usize,usize,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0>,core::iter::traits::accum::impl$48::sum::closure_env$0<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> > > >:
063b7cc0 ret

core::iter::adapters::map::map_fold::closure$0<ref$<u8>,usize,usize,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0>,core::iter::traits::accum::impl$48::sum::closure_env$0<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> > > >:
063b7cd0 sub       $0x78,%rsp
063b7cd4 mov       %rdx,0x30(%rsp)
063b7cd9 mov       %rcx,0x60(%rsp)
063b7cde mov       %rdx,0x68(%rsp)
063b7ce3 mov       %r8,0x70(%rsp)
063b7ce8 mov       %rcx,%rax
063b7ceb mov       %rax,0x38(%rsp)
063b7cf0 mov       %r8,0x58(%rsp)
063b7cf5 mov       0x58(%rsp),%rdx
063b7cfa call      0x0000`0000`063B`7C50
063b7cff mov       %rax,0x40(%rsp)
063b7d04 mov       0x38(%rsp),%rcx
063b7d09 mov       0x40(%rsp),%rax
063b7d0e mov       0x30(%rsp),%rdx
063b7d13 mov       %rdx,0x48(%rsp)
063b7d18 mov       %rax,0x50(%rsp)
063b7d1d mov       0x48(%rsp),%rdx
063b7d22 mov       0x50(%rsp),%r8
063b7d27 call      0x0000`0000`063C`7800
063b7d2c mov       %rax,0x28(%rsp)
063b7d31 mov       0x28(%rsp),%rax
063b7d36 add       $0x78,%rsp
063b7d3a ret

core::iter::adapters::map::impl$2::fold<usize,core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0>,usize,core::iter::traits::accum::impl$48::sum::closure_env$0<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> > > >:
063b7d40 sub       $0x68,%rsp
063b7d44 mov       %r8,0x30(%rsp)
063b7d49 mov       %rdx,0x38(%rsp)
063b7d4e mov       %rcx,0x40(%rsp)
063b7d53 mov       %rcx,0x48(%rsp)
063b7d58 mov       %rdx,0x50(%rsp)
063b7d5d mov       %r8,0x58(%rsp)
063b7d62 call      0x0000`0000`063B`7CC0
063b7d67 mov       0x30(%rsp),%r8
063b7d6c mov       0x38(%rsp),%rdx
063b7d71 mov       0x40(%rsp),%rcx
063b7d76 call      0x0000`0000`063B`8220
063b7d7b mov       %rax,0x28(%rsp)
063b7d80 mov       0x28(%rsp),%rax
063b7d85 add       $0x68,%rsp
063b7d89 ret

core::iter::adapters::rev::Rev<core::slice::iter::IterMut<core::mem::maybe_uninit::MaybeUninit<u8> > >::new<core::slice::iter::IterMut<core::mem::maybe_uninit::MaybeUninit<u8> > >:
063b7d90 sub       $0x20,%rsp
063b7d94 mov       %rcx,0x10(%rsp)
063b7d99 mov       %rdx,0x18(%rsp)
063b7d9e mov       %rcx,(%rsp)
063b7da2 mov       %rdx,8(%rsp)
063b7da7 mov       (%rsp),%rax
063b7dab mov       8(%rsp),%rdx
063b7db0 add       $0x20,%rsp
063b7db4 ret

core::iter::adapters::rev::impl$1::next<core::slice::iter::IterMut<core::mem::maybe_uninit::MaybeUninit<u8> > >:
063b7dc0 sub       $0x38,%rsp
063b7dc4 mov       %rcx,0x30(%rsp)
063b7dc9 call      0x0000`0000`063C`9AA0
063b7dce mov       %rax,0x28(%rsp)
063b7dd3 mov       0x28(%rsp),%rax
063b7dd8 add       $0x38,%rsp
063b7ddc ret

core::iter::range::impl$2::spec_next<usize>:
063b7de0 sub       $0x68,%rsp
063b7de4 mov       %rcx,%rdx
063b7de7 mov       %rdx,0x38(%rsp)
063b7dec mov       %rdx,0x58(%rsp)
063b7df1 mov       %rdx,%rcx
063b7df4 add       $8,%rdx
063b7df8 call      0x0000`0000`063C`7410
063b7dfd mov       %al,0x47(%rsp)
063b7e01 mov       0x47(%rsp),%al
063b7e05 test      $1,%al
063b7e07 jne       0x0000`0000`063B`7E16
063b7e09 jmp       0x0000`0000`063B`7E0B
063b7e0b movq      $0,0x48(%rsp)
063b7e14 jmp       0x0000`0000`063B`7E65
063b7e16 mov       0x38(%rsp),%rcx
063b7e1b call      0x0000`0000`063C`7370
063b7e20 mov       %rax,0x30(%rsp)
063b7e25 mov       0x30(%rsp),%rcx
063b7e2a mov       $1,%edx
063b7e2f call      0x0000`0000`063C`7790
063b7e34 mov       %rax,0x28(%rsp)
063b7e39 mov       %rax,0x60(%rsp)
063b7e3e mov       0x28(%rsp),%rdx
063b7e43 mov       0x38(%rsp),%rcx
063b7e48 call      0x0000`0000`063B`4E50
063b7e4d mov       %rax,0x20(%rsp)
063b7e52 mov       0x20(%rsp),%rax
063b7e57 mov       %rax,0x50(%rsp)
063b7e5c movq      $1,0x48(%rsp)
063b7e65 mov       0x48(%rsp),%rax
063b7e6a mov       0x50(%rsp),%rdx
063b7e6f add       $0x68,%rsp
063b7e73 ret

core::iter::range::impl$3::next<usize>:
063b7e80 sub       $0x38,%rsp
063b7e84 mov       %rcx,0x30(%rsp)
063b7e89 call      0x0000`0000`063B`7DE0
063b7e8e mov       %rax,0x20(%rsp)
063b7e93 mov       %rdx,0x28(%rsp)
063b7e98 mov       0x28(%rsp),%rdx
063b7e9d mov       0x20(%rsp),%rax
063b7ea2 add       $0x38,%rsp
063b7ea6 ret

core::iter::traits::collect::impl$0::into_iter<core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<core::fmt::ArgumentV1> > >:
063b7eb0 mov       %rcx,%rax
063b7eb3 mov       (%rdx),%r8
063b7eb6 mov       %r8,(%rcx)
063b7eb9 mov       8(%rdx),%r8
063b7ebd mov       %r8,8(%rcx)
063b7ec1 mov       0x10(%rdx),%rdx
063b7ec5 mov       %rdx,0x10(%rcx)
063b7ec9 ret

core::iter::traits::collect::impl$0::into_iter<core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<core::fmt::rt::v1::Argument> > >:
063b7ed0 mov       %rcx,%rax
063b7ed3 mov       (%rdx),%r8
063b7ed6 mov       %r8,(%rcx)
063b7ed9 mov       8(%rdx),%r8
063b7edd mov       %r8,8(%rcx)
063b7ee1 mov       0x10(%rdx),%rdx
063b7ee5 mov       %rdx,0x10(%rcx)
063b7ee9 ret

core::iter::traits::collect::impl$0::into_iter<core::slice::iter::Chunks<usize> >:
063b7ef0 mov       %rcx,%rax
063b7ef3 mov       (%rdx),%r8
063b7ef6 mov       %r8,(%rcx)
063b7ef9 mov       8(%rdx),%r8
063b7efd mov       %r8,8(%rcx)
063b7f01 mov       0x10(%rdx),%rdx
063b7f05 mov       %rdx,0x10(%rcx)
063b7f09 ret

core::iter::traits::collect::impl$0::into_iter<core::iter::adapters::rev::Rev<core::slice::iter::IterMut<core::mem::maybe_uninit::MaybeUninit<u8> > > >:
063b7f10 sub       $0x10,%rsp
063b7f14 mov       %rcx,%rax
063b7f17 mov       %rax,(%rsp)
063b7f1b mov       %rdx,8(%rsp)
063b7f20 add       $0x10,%rsp
063b7f24 ret

core::iter::traits::collect::impl$0::into_iter<core::ops::range::Range<usize> >:
063b7f30 sub       $0x10,%rsp
063b7f34 mov       %rcx,%rax
063b7f37 mov       %rax,(%rsp)
063b7f3b mov       %rdx,8(%rsp)
063b7f40 add       $0x10,%rsp
063b7f44 ret

core::iter::traits::collect::impl$0::into_iter<core::char::EscapeDebug>:
063b7f50 mov       %rcx,%rax
063b7f53 mov       (%rdx),%r8
063b7f56 mov       %r8,(%rcx)
063b7f59 mov       8(%rdx),%r8
063b7f5d mov       %r8,8(%rcx)
063b7f61 mov       0x10(%rdx),%rdx
063b7f65 mov       %rdx,0x10(%rcx)
063b7f69 ret

core::iter::traits::iterator::Iterator::advance_by<core::str::iter::CharIndices>:
063b7f70 sub       $0xF8,%rsp
063b7f77 mov       %rcx,0x40(%rsp)
063b7f7c mov       %rcx,0xC8(%rsp)
063b7f84 mov       %rdx,0xD0(%rsp)
063b7f8c movq      $0,0x68(%rsp)
063b7f95 mov       %rdx,0x70(%rsp)
063b7f9a mov       0x68(%rsp),%rcx
063b7f9f mov       0x70(%rsp),%rdx
063b7fa4 call      0x0000`0000`063B`7F30
063b7fa9 mov       %rax,0x48(%rsp)
063b7fae mov       %rdx,0x50(%rsp)
063b7fb3 mov       0x50(%rsp),%rax
063b7fb8 mov       0x48(%rsp),%rcx
063b7fbd mov       %rcx,0x78(%rsp)
063b7fc2 mov       %rax,0x80(%rsp)
063b7fca lea       0x78(%rsp),%rcx
063b7fcf call      0x0000`0000`063B`7E80
063b7fd4 mov       %rdx,0x90(%rsp)
063b7fdc mov       %rax,0x88(%rsp)
063b7fe4 mov       0x88(%rsp),%rax
063b7fec test      %rax,%rax
063b7fef je        0x0000`0000`063B`7FF7
063b7ff1 jmp       0x0000`0000`063B`7FF3
063b7ff3 jmp       0x0000`0000`063B`8005
063b7ff5 ud2
063b7ff7 movq      $0,0x58(%rsp)
063b8000 jmp       0x0000`0000`063B`80BA
063b8005 mov       0x40(%rsp),%rcx
063b800a mov       0x90(%rsp),%rax
063b8012 mov       %rax,0x28(%rsp)
063b8017 mov       %rax,0xD8(%rsp)
063b801f call      0x0000`0000`063C`49B0
063b8024 mov       %rax,0x30(%rsp)
063b8029 mov       %edx,0x3C(%rsp)
063b802d mov       0x28(%rsp),%r9
063b8032 mov       0x3C(%rsp),%r8d
063b8037 mov       0x30(%rsp),%rdx
063b803c lea       0xB0(%rsp),%rcx
063b8044 call      0x0000`0000`063B`89E0
063b8049 lea       0x98(%rsp),%rcx
063b8051 lea       0xB0(%rsp),%rdx
063b8059 call      0x0000`0000`063B`9670
063b805e mov       0x98(%rsp),%rax
063b8066 test      %rax,%rax
063b8069 je        0x0000`0000`063B`8071
063b806b jmp       0x0000`0000`063B`806D
063b806d jmp       0x0000`0000`063B`8094
063b806f ud2
063b8071 mov       0xA0(%rsp),%rcx
063b8079 mov       0xA8(%rsp),%eax
063b8080 mov       %rcx,0xE8(%rsp)
063b8088 mov       %eax,0xF0(%rsp)
063b808f jmp       0x0000`0000`063B`7FCA
063b8094 mov       0xA0(%rsp),%rcx
063b809c mov       %rcx,0xE0(%rsp)
063b80a4 lea       0x63C`EC88,%rdx
063b80ab call      0x0000`0000`063B`9730
063b80b0 mov       %rdx,0x60(%rsp)
063b80b5 mov       %rax,0x58(%rsp)
063b80ba mov       0x58(%rsp),%rax
063b80bf mov       0x60(%rsp),%rdx
063b80c4 add       $0xF8,%rsp
063b80cb ret

core::iter::traits::iterator::Iterator::nth<core::str::iter::CharIndices>:
063b80d0 sub       $0x78,%rsp
063b80d4 mov       %rcx,0x28(%rsp)
063b80d9 mov       %rcx,0x58(%rsp)
063b80de mov       %rdx,0x60(%rsp)
063b80e3 call      0x0000`0000`063B`7F70
063b80e8 mov       %rax,0x30(%rsp)
063b80ed mov       %rdx,0x38(%rsp)
063b80f2 mov       0x38(%rsp),%rdx
063b80f7 mov       0x30(%rsp),%rcx
063b80fc call      0x0000`0000`063B`9330
063b8101 mov       %al,0x27(%rsp)
063b8105 mov       0x27(%rsp),%cl
063b8109 and       $1,%cl
063b810c call      0x0000`0000`063B`8BB0
063b8111 and       $1,%al
063b8113 mov       %al,0x57(%rsp)
063b8117 movzbl    0x57(%rsp),%eax
063b811c test      $1,%al
063b811e je        0x0000`0000`063B`8126
063b8120 jmp       0x0000`0000`063B`8122
063b8122 jmp       0x0000`0000`063B`813B
063b8124 ud2
063b8126 mov       0x28(%rsp),%rcx
063b812b call      0x0000`0000`063C`49B0
063b8130 mov       %edx,0x48(%rsp)
063b8134 mov       %rax,0x40(%rsp)
063b8139 jmp       0x0000`0000`063B`8149
063b813b call      0x0000`0000`063B`8D20
063b8140 mov       %edx,0x48(%rsp)
063b8144 mov       %rax,0x40(%rsp)
063b8149 mov       0x40(%rsp),%rax
063b814e mov       0x48(%rsp),%edx
063b8152 add       $0x78,%rsp
063b8156 ret

core::iter::traits::iterator::Iterator::map<core::slice::iter::Iter<u8>,usize,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> >:
063b8160 sub       $0x48,%rsp
063b8164 mov       %rcx,0x30(%rsp)
063b8169 mov       %rdx,0x38(%rsp)
063b816e call      0x0000`0000`063B`7C90
063b8173 mov       %rax,0x20(%rsp)
063b8178 mov       %rdx,0x28(%rsp)
063b817d mov       0x28(%rsp),%rdx
063b8182 mov       0x20(%rsp),%rax
063b8187 add       $0x48,%rsp
063b818b ret

core::iter::traits::iterator::Iterator::filter<core::slice::iter::Iter<u8>,core::str::count::char_count_general_case::closure_env$0>:
063b8190 sub       $0x48,%rsp
063b8194 mov       %rcx,0x30(%rsp)
063b8199 mov       %rdx,0x38(%rsp)
063b819e call      0x0000`0000`063B`7BB0
063b81a3 mov       %rax,0x20(%rsp)
063b81a8 mov       %rdx,0x28(%rsp)
063b81ad mov       0x28(%rsp),%rdx
063b81b2 mov       0x20(%rsp),%rax
063b81b7 add       $0x48,%rsp
063b81bb ret

core::iter::traits::iterator::Iterator::enumerate<core::slice::iter::Iter<core::fmt::rt::v1::Argument> >:
063b81c0 sub       $0x38,%rsp
063b81c4 mov       %rcx,%rax
063b81c7 mov       %rax,0x20(%rsp)
063b81cc mov       %rdx,0x28(%rsp)
063b81d1 mov       %r8,0x30(%rsp)
063b81d6 call      0x0000`0000`063B`7950
063b81db mov       0x20(%rsp),%rax
063b81e0 add       $0x38,%rsp
063b81e4 ret

core::iter::traits::iterator::Iterator::enumerate<core::slice::iter::Iter<core::fmt::ArgumentV1> >:
063b81f0 sub       $0x38,%rsp
063b81f4 mov       %rcx,%rax
063b81f7 mov       %rax,0x20(%rsp)
063b81fc mov       %rdx,0x28(%rsp)
063b8201 mov       %r8,0x30(%rsp)
063b8206 call      0x0000`0000`063B`7980
063b820b mov       0x20(%rsp),%rax
063b8210 add       $0x38,%rsp
063b8214 ret

core::iter::traits::iterator::Iterator::fold<core::slice::iter::Iter<u8>,usize,core::iter::adapters::map::map_fold::closure_env$0<ref$<u8>,usize,usize,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0>,core::iter::traits::accum::impl$48::sum::closure_env$0<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> > > > >:
063b8220 sub       $0x78,%rsp
063b8224 mov       %rcx,0x30(%rsp)
063b8229 mov       %rdx,0x38(%rsp)
063b822e mov       %r8,0x68(%rsp)
063b8233 mov       %r8,0x48(%rsp)
063b8238 lea       0x30(%rsp),%rcx
063b823d call      0x0000`0000`063C`8BD0
063b8242 mov       %rax,0x50(%rsp)
063b8247 mov       $1,%eax
063b824c xor       %ecx,%ecx
063b824e cmpq      $0,0x50(%rsp)
063b8254 cmove     %rcx,%rax
063b8258 cmp       $1,%rax
063b825c jne       0x0000`0000`063B`8292
063b825e mov       0x50(%rsp),%rax
063b8263 mov       %rax,0x70(%rsp)
063b8268 mov       0x48(%rsp),%rcx
063b826d mov       %rcx,0x58(%rsp)
063b8272 mov       %rax,0x60(%rsp)
063b8277 mov       0x58(%rsp),%rdx
063b827c mov       0x60(%rsp),%r8
063b8281 lea       0x40(%rsp),%rcx
063b8286 call      0x0000`0000`063B`7CD0
063b828b mov       %rax,0x28(%rsp)
063b8290 jmp       0x0000`0000`063B`82A2
063b8292 jmp       0x0000`0000`063B`8294
063b8294 jmp       0x0000`0000`063B`8296
063b8296 jmp       0x0000`0000`063B`8298
063b8298 mov       0x48(%rsp),%rax
063b829d add       $0x78,%rsp
063b82a1 ret
063b82a2 mov       0x28(%rsp),%rax
063b82a7 mov       %rax,0x48(%rsp)
063b82ac jmp       0x0000`0000`063B`8238

core::iter::traits::iterator::Iterator::rev<core::slice::iter::IterMut<core::mem::maybe_uninit::MaybeUninit<u8> > >:
063b82b0 sub       $0x48,%rsp
063b82b4 mov       %rcx,0x38(%rsp)
063b82b9 mov       %rdx,0x40(%rsp)
063b82be call      0x0000`0000`063B`7D90
063b82c3 mov       %rax,0x28(%rsp)
063b82c8 mov       %rdx,0x30(%rsp)
063b82cd mov       0x30(%rsp),%rdx
063b82d2 mov       0x28(%rsp),%rax
063b82d7 add       $0x48,%rsp
063b82db ret

core::iter::traits::iterator::Iterator::cloned<core::slice::iter::Iter<u8>,u8>:
063b82e0 sub       $0x48,%rsp
063b82e4 mov       %rcx,0x38(%rsp)
063b82e9 mov       %rdx,0x40(%rsp)
063b82ee call      0x0000`0000`063B`78E0
063b82f3 mov       %rax,0x28(%rsp)
063b82f8 mov       %rdx,0x30(%rsp)
063b82fd mov       0x30(%rsp),%rdx
063b8302 mov       0x28(%rsp),%rax
063b8307 add       $0x48,%rsp
063b830b ret

core::iter::traits::iterator::Iterator::sum<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> >,usize>:
063b8310 sub       $0x38,%rsp
063b8314 mov       %rcx,0x28(%rsp)
063b8319 mov       %rdx,0x30(%rsp)
063b831e call      0x0000`0000`063C`77D0
063b8323 mov       %rax,0x20(%rsp)
063b8328 mov       0x20(%rsp),%rax
063b832d add       $0x38,%rsp
063b8331 ret

enum$<core::option::Option<ref$<u8> >, 1, 18446744073709551615, Some>::is_some<ref$<u8> >:
063b8340 sub       $0x10,%rsp
063b8344 mov       %rcx,%rdx
063b8347 mov       %rdx,8(%rsp)
063b834c mov       $1,%eax
063b8351 xor       %ecx,%ecx
063b8353 cmpq      $0,(%rdx)
063b8357 cmove     %rcx,%rax
063b835b cmp       $1,%rax
063b835f jne       0x0000`0000`063B`8368
063b8361 movb      $1,7(%rsp)
063b8366 jmp       0x0000`0000`063B`836D
063b8368 movb      $0,7(%rsp)
063b836d mov       7(%rsp),%al
063b8371 and       $1,%al
063b8373 movzbl    %al,%eax
063b8376 add       $0x10,%rsp
063b837a ret

enum$<core::option::Option<ref_mut$<core::fmt::builders::PadAdapter> >, 1, 18446744073709551615, Some>::is_some<ref_mut$<core::fmt::builders::PadAdapter> >:
063b8380 sub       $0x10,%rsp
063b8384 mov       %rcx,%rdx
063b8387 mov       %rdx,8(%rsp)
063b838c mov       $1,%eax
063b8391 xor       %ecx,%ecx
063b8393 cmpq      $0,(%rdx)
063b8397 cmove     %rcx,%rax
063b839b cmp       $1,%rax
063b839f jne       0x0000`0000`063B`83A8
063b83a1 movb      $1,7(%rsp)
063b83a6 jmp       0x0000`0000`063B`83AD
063b83a8 movb      $0,7(%rsp)
063b83ad mov       7(%rsp),%al
063b83b1 and       $1,%al
063b83b3 movzbl    %al,%eax
063b83b6 add       $0x10,%rsp
063b83ba ret

enum$<core::option::Option<usize> >::is_some<usize>:
063b83c0 sub       $0x10,%rsp
063b83c4 mov       %rcx,8(%rsp)
063b83c9 cmpq      $1,(%rcx)
063b83cd jne       0x0000`0000`063B`83D6
063b83cf movb      $1,7(%rsp)
063b83d4 jmp       0x0000`0000`063B`83DB
063b83d6 movb      $0,7(%rsp)
063b83db mov       7(%rsp),%al
063b83df and       $1,%al
063b83e1 movzbl    %al,%eax
063b83e4 add       $0x10,%rsp
063b83e8 ret

enum$<core::option::Option<usize> >::is_none<usize>:
063b83f0 sub       $0x38,%rsp
063b83f4 mov       %rcx,0x30(%rsp)
063b83f9 call      0x0000`0000`063B`83C0
063b83fe mov       %al,0x2F(%rsp)
063b8402 mov       0x2F(%rsp),%al
063b8406 xor       $0xFF,%al
063b8408 and       $1,%al
063b840a movzbl    %al,%eax
063b840d add       $0x38,%rsp
063b8411 ret

enum$<core::option::Option<core::fmt::builders::PadAdapter>, 1, 18446744073709551615, Some>::as_mut<core::fmt::builders::PadAdapter>:
063b8420 sub       $0x20,%rsp
063b8424 mov       %rcx,(%rsp)
063b8428 mov       %rcx,0x10(%rsp)
063b842d mov       (%rcx),%rax
063b8430 test      %rax,%rax
063b8433 setne     %al
063b8436 movzbl    %al,%eax
063b8439 je        0x0000`0000`063B`8441
063b843b jmp       0x0000`0000`063B`843D
063b843d jmp       0x0000`0000`063B`844C
063b843f ud2
063b8441 movq      $0,8(%rsp)
063b844a jmp       0x0000`0000`063B`845A
063b844c mov       (%rsp),%rax
063b8450 mov       %rax,0x18(%rsp)
063b8455 mov       %rax,8(%rsp)
063b845a mov       8(%rsp),%rax
063b845f add       $0x20,%rsp
063b8463 ret

enum$<core::option::Option<char>, 0, 1114111, Some>::unwrap<char>:
063b8470 sub       $0x38,%rsp
063b8474 mov       %rdx,0x28(%rsp)
063b8479 mov       %ecx,0x30(%rsp)
063b847d mov       0x30(%rsp),%eax
063b8481 add       $0xFFEF`0000,%eax
063b8486 setne     %al
063b8489 movzbl    %al,%eax
063b848c je        0x0000`0000`063B`8494
063b848e jmp       0x0000`0000`063B`8490
063b8490 jmp       0x0000`0000`063B`84AC
063b8492 ud2
063b8494 mov       0x28(%rsp),%r8
063b8499 lea       0x63C`ECA0,%rcx
063b84a0 mov       $0x2B,%edx
063b84a5 call      0x0000`0000`063B`8E30
063b84aa ud2
063b84ac mov       0x30(%rsp),%eax
063b84b0 mov       %eax,0x34(%rsp)
063b84b4 add       $0x38,%rsp
063b84b8 ret

enum$<core::option::Option<usize> >::unwrap<usize>:
063b84c0 sub       $0x48,%rsp
063b84c4 mov       %r8,0x28(%rsp)
063b84c9 mov       %rcx,0x30(%rsp)
063b84ce mov       %rdx,0x38(%rsp)
063b84d3 mov       0x30(%rsp),%rax
063b84d8 test      %rax,%rax
063b84db je        0x0000`0000`063B`84E3
063b84dd jmp       0x0000`0000`063B`84DF
063b84df jmp       0x0000`0000`063B`84FB
063b84e1 ud2
063b84e3 mov       0x28(%rsp),%r8
063b84e8 lea       0x63C`ECA0,%rcx
063b84ef mov       $0x2B,%edx
063b84f4 call      0x0000`0000`063B`8E30
063b84f9 ud2
063b84fb mov       0x38(%rsp),%rax
063b8500 mov       %rax,0x40(%rsp)
063b8505 add       $0x48,%rsp
063b8509 ret

enum$<core::option::Option<u8> >::unwrap<u8>:
063b8510 sub       $0x38,%rsp
063b8514 mov       %r8,0x28(%rsp)
063b8519 and       $1,%cl
063b851c mov       %cl,0x30(%rsp)
063b8520 mov       %dl,0x31(%rsp)
063b8524 movzbl    0x30(%rsp),%eax
063b8529 test      $1,%al
063b852b je        0x0000`0000`063B`8533
063b852d jmp       0x0000`0000`063B`852F
063b852f jmp       0x0000`0000`063B`854B
063b8531 ud2
063b8533 mov       0x28(%rsp),%r8
063b8538 lea       0x63C`ECA0,%rcx
063b853f mov       $0x2B,%edx
063b8544 call      0x0000`0000`063B`8E30
063b8549 ud2
063b854b mov       0x31(%rsp),%al
063b854f mov       %al,0x37(%rsp)
063b8553 add       $0x38,%rsp
063b8557 ret

enum$<core::option::Option<str>, 1, 18446744073709551615, Some>::unwrap_or<str>:
063b8560 sub       $0x58,%rsp
063b8564 mov       %r9,(%rsp)
063b8568 mov       %r8,8(%rsp)
063b856d mov       %rcx,0x10(%rsp)
063b8572 mov       %rdx,0x18(%rsp)
063b8577 mov       %r8,0x38(%rsp)
063b857c mov       %r9,0x40(%rsp)
063b8581 movb      $0,0x37(%rsp)
063b8586 movb      $1,0x37(%rsp)
063b858b mov       0x10(%rsp),%rax
063b8590 test      %rax,%rax
063b8593 setne     %al
063b8596 movzbl    %al,%eax
063b8599 je        0x0000`0000`063B`85A1
063b859b jmp       0x0000`0000`063B`859D
063b859d jmp       0x0000`0000`063B`85BB
063b859f ud2
063b85a1 mov       (%rsp),%rax
063b85a5 mov       8(%rsp),%rcx
063b85aa movb      $0,0x37(%rsp)
063b85af mov       %rcx,0x20(%rsp)
063b85b4 mov       %rax,0x28(%rsp)
063b85b9 jmp       0x0000`0000`063B`85D9
063b85bb mov       0x10(%rsp),%rcx
063b85c0 mov       0x18(%rsp),%rax
063b85c5 mov       %rcx,0x48(%rsp)
063b85ca mov       %rax,0x50(%rsp)
063b85cf mov       %rcx,0x20(%rsp)
063b85d4 mov       %rax,0x28(%rsp)
063b85d9 testb     $1,0x37(%rsp)
063b85de jne       0x0000`0000`063B`85EF
063b85e0 mov       0x20(%rsp),%rax
063b85e5 mov       0x28(%rsp),%rdx
063b85ea add       $0x58,%rsp
063b85ee ret
063b85ef jmp       0x0000`0000`063B`85E0

enum$<core::option::Option<u32> >::unwrap_or<u32>:
063b8600 sub       $0x20,%rsp
063b8604 mov       %r8d,4(%rsp)
063b8609 mov       %ecx,8(%rsp)
063b860d mov       %edx,0xC(%rsp)
063b8611 mov       %r8d,0x18(%rsp)
063b8616 movb      $0,0x17(%rsp)
063b861b movb      $1,0x17(%rsp)
063b8620 mov       8(%rsp),%eax
063b8624 test      %rax,%rax
063b8627 je        0x0000`0000`063B`862F
063b8629 jmp       0x0000`0000`063B`862B
063b862b jmp       0x0000`0000`063B`863E
063b862d ud2
063b862f mov       4(%rsp),%eax
063b8633 movb      $0,0x17(%rsp)
063b8638 mov       %eax,0x10(%rsp)
063b863c jmp       0x0000`0000`063B`864A
063b863e mov       0xC(%rsp),%eax
063b8642 mov       %eax,0x1C(%rsp)
063b8646 mov       %eax,0x10(%rsp)
063b864a testb     $1,0x17(%rsp)
063b864f jne       0x0000`0000`063B`865A
063b8651 mov       0x10(%rsp),%eax
063b8655 add       $0x20,%rsp
063b8659 ret
063b865a jmp       0x0000`0000`063B`8651

enum$<core::option::Option<ref_mut$<core::fmt::builders::PadAdapter> >, 1, 18446744073709551615, Some>::unwrap_unchecked<ref_mut$<core::fmt::builders::PadAdapter> >:
063b8660 sub       $0x48,%rsp
063b8664 mov       %rdx,0x28(%rsp)
063b8669 mov       %rcx,0x38(%rsp)
063b866e lea       0x38(%rsp),%rcx
063b8673 call      0x0000`0000`063B`8380
063b8678 mov       %al,0x37(%rsp)
063b867c mov       0x37(%rsp),%al
063b8680 xor       $0xFF,%al
063b8682 test      $1,%al
063b8684 jne       0x0000`0000`063B`869A
063b8686 mov       0x38(%rsp),%rax
063b868b test      %rax,%rax
063b868e setne     %al
063b8691 movzbl    %al,%eax
063b8694 je        0x0000`0000`063B`86B4
063b8696 jmp       0x0000`0000`063B`8698
063b8698 jmp       0x0000`0000`063B`86BB
063b869a mov       0x28(%rsp),%r8
063b869f lea       0x63C`ECCB,%rcx
063b86a6 mov       $0x20,%edx
063b86ab call      0x0000`0000`063B`8E30
063b86b0 ud2
063b86b2 ud2
063b86b4 call      0x0000`0000`063B`46B0
063b86b9 ud2
063b86bb mov       0x38(%rsp),%rax
063b86c0 mov       %rax,0x40(%rsp)
063b86c5 add       $0x48,%rsp
063b86c9 ret

enum$<core::option::Option<ref$<u8> >, 1, 18446744073709551615, Some>::unwrap_unchecked<ref$<u8> >:
063b86d0 sub       $0x48,%rsp
063b86d4 mov       %rdx,0x28(%rsp)
063b86d9 mov       %rcx,0x38(%rsp)
063b86de lea       0x38(%rsp),%rcx
063b86e3 call      0x0000`0000`063B`8340
063b86e8 mov       %al,0x37(%rsp)
063b86ec mov       0x37(%rsp),%al
063b86f0 xor       $0xFF,%al
063b86f2 test      $1,%al
063b86f4 jne       0x0000`0000`063B`870A
063b86f6 mov       0x38(%rsp),%rax
063b86fb test      %rax,%rax
063b86fe setne     %al
063b8701 movzbl    %al,%eax
063b8704 je        0x0000`0000`063B`8724
063b8706 jmp       0x0000`0000`063B`8708
063b8708 jmp       0x0000`0000`063B`872B
063b870a mov       0x28(%rsp),%r8
063b870f lea       0x63C`ECCB,%rcx
063b8716 mov       $0x20,%edx
063b871b call      0x0000`0000`063B`8E30
063b8720 ud2
063b8722 ud2
063b8724 call      0x0000`0000`063B`46B0
063b8729 ud2
063b872b mov       0x38(%rsp),%rax
063b8730 mov       %rax,0x40(%rsp)
063b8735 add       $0x48,%rsp
063b8739 ret

enum$<core::option::Option<usize> >::unwrap_unchecked<usize>:
063b8740 sub       $0x48,%rsp
063b8744 mov       %r8,0x20(%rsp)
063b8749 mov       %rcx,0x30(%rsp)
063b874e mov       %rdx,0x38(%rsp)
063b8753 lea       0x30(%rsp),%rcx
063b8758 call      0x0000`0000`063B`83C0
063b875d mov       %al,0x2F(%rsp)
063b8761 mov       0x2F(%rsp),%al
063b8765 xor       $0xFF,%al
063b8767 test      $1,%al
063b8769 jne       0x0000`0000`063B`8779
063b876b mov       0x30(%rsp),%rax
063b8770 test      %rax,%rax
063b8773 je        0x0000`0000`063B`8793
063b8775 jmp       0x0000`0000`063B`8777
063b8777 jmp       0x0000`0000`063B`879A
063b8779 mov       0x20(%rsp),%r8
063b877e lea       0x63C`ECCB,%rcx
063b8785 mov       $0x20,%edx
063b878a call      0x0000`0000`063B`8E30
063b878f ud2
063b8791 ud2
063b8793 call      0x0000`0000`063B`46B0
063b8798 ud2
063b879a mov       0x38(%rsp),%rax
063b879f mov       %rax,0x40(%rsp)
063b87a4 add       $0x48,%rsp
063b87a8 ret

enum$<core::option::Option<tuple$<usize,usize> > >::map<tuple$<usize,usize>,usize,core::str::impl$0::find::closure_env$0<char> >:
063b87b0 sub       $0x78,%rsp
063b87b4 mov       %rcx,0x30(%rsp)
063b87b9 movb      $0,0x5F(%rsp)
063b87be movb      $1,0x5F(%rsp)
063b87c3 mov       (%rcx),%rax
063b87c6 test      %rax,%rax
063b87c9 je        0x0000`0000`063B`87D1
063b87cb jmp       0x0000`0000`063B`87CD
063b87cd jmp       0x0000`0000`063B`87DC
063b87cf ud2
063b87d1 movq      $0,0x38(%rsp)
063b87da jmp       0x0000`0000`063B`8829
063b87dc mov       0x30(%rsp),%rax
063b87e1 mov       8(%rax),%rcx
063b87e5 mov       0x10(%rax),%rax
063b87e9 mov       %rcx,0x68(%rsp)
063b87ee mov       %rax,0x70(%rsp)
063b87f3 movb      $0,0x5F(%rsp)
063b87f8 mov       %rcx,0x48(%rsp)
063b87fd mov       %rax,0x50(%rsp)
063b8802 mov       0x48(%rsp),%rcx
063b8807 mov       0x50(%rsp),%rdx
063b880c call      0x0000`0000`063C`69B0
063b8811 mov       %rax,0x28(%rsp)
063b8816 mov       0x28(%rsp),%rax
063b881b mov       %rax,0x40(%rsp)
063b8820 movq      $1,0x38(%rsp)
063b8829 testb     $1,0x5F(%rsp)
063b882e jne       0x0000`0000`063B`883F
063b8830 mov       0x38(%rsp),%rax
063b8835 mov       0x40(%rsp),%rdx
063b883a add       $0x78,%rsp
063b883e ret
063b883f jmp       0x0000`0000`063B`8830

enum$<core::option::Option<usize> >::map<usize,usize,core::slice::memchr::memchr_general_case::closure_env$2>:
063b8850 sub       $0x78,%rsp
063b8854 mov       %r8,0x30(%rsp)
063b8859 mov       %rcx,0x38(%rsp)
063b885e mov       %rdx,0x40(%rsp)
063b8863 mov       %r8,0x68(%rsp)
063b8868 movb      $0,0x67(%rsp)
063b886d movb      $1,0x67(%rsp)
063b8872 mov       0x38(%rsp),%rax
063b8877 test      %rax,%rax
063b887a je        0x0000`0000`063B`8882
063b887c jmp       0x0000`0000`063B`887E
063b887e jmp       0x0000`0000`063B`888D
063b8880 ud2
063b8882 movq      $0,0x48(%rsp)
063b888b jmp       0x0000`0000`063B`88C8
063b888d mov       0x30(%rsp),%rcx
063b8892 mov       0x40(%rsp),%rax
063b8897 mov       %rax,0x70(%rsp)
063b889c movb      $0,0x67(%rsp)
063b88a1 mov       %rax,0x58(%rsp)
063b88a6 mov       0x58(%rsp),%rdx
063b88ab call      0x0000`0000`063C`0610
063b88b0 mov       %rax,0x28(%rsp)
063b88b5 mov       0x28(%rsp),%rax
063b88ba mov       %rax,0x50(%rsp)
063b88bf movq      $1,0x48(%rsp)
063b88c8 testb     $1,0x67(%rsp)
063b88cd jne       0x0000`0000`063B`88DE
063b88cf mov       0x48(%rsp),%rax
063b88d4 mov       0x50(%rsp),%rdx
063b88d9 add       $0x78,%rsp
063b88dd ret
063b88de jmp       0x0000`0000`063B`88CF

enum$<core::option::Option<u32> >::map<u32,char,core::str::iter::impl$0::next::closure_env$0>:
063b88e0 sub       $0x48,%rsp
063b88e4 mov       %ecx,0x28(%rsp)
063b88e8 mov       %edx,0x2C(%rsp)
063b88ec movb      $0,0x3F(%rsp)
063b88f1 movb      $1,0x3F(%rsp)
063b88f6 mov       0x28(%rsp),%eax
063b88fa test      %rax,%rax
063b88fd je        0x0000`0000`063B`8905
063b88ff jmp       0x0000`0000`063B`8901
063b8901 jmp       0x0000`0000`063B`890F
063b8903 ud2
063b8905 movl      $0x11`0000,0x34(%rsp)
063b890d jmp       0x0000`0000`063B`8935
063b890f mov       0x2C(%rsp),%eax
063b8913 mov       %eax,0x44(%rsp)
063b8917 movb      $0,0x3F(%rsp)
063b891c mov       %eax,0x38(%rsp)
063b8920 mov       0x38(%rsp),%ecx
063b8924 call      0x0000`0000`063C`4910
063b8929 mov       %eax,0x24(%rsp)
063b892d mov       0x24(%rsp),%eax
063b8931 mov       %eax,0x34(%rsp)
063b8935 testb     $1,0x3F(%rsp)
063b893a jne       0x0000`0000`063B`8945
063b893c mov       0x34(%rsp),%eax
063b8940 add       $0x48,%rsp
063b8944 ret
063b8945 jmp       0x0000`0000`063B`893C

enum$<core::option::Option<usize> >::map<usize,u32,core::unicode::unicode_data::skip_search::closure_env$1<32,707> >:
063b8950 sub       $0x68,%rsp
063b8954 mov       %r8,0x28(%rsp)
063b8959 mov       %rcx,0x30(%rsp)
063b895e mov       %rdx,0x38(%rsp)
063b8963 mov       %r8,0x58(%rsp)
063b8968 movb      $0,0x57(%rsp)
063b896d movb      $1,0x57(%rsp)
063b8972 mov       0x30(%rsp),%rax
063b8977 test      %rax,%rax
063b897a je        0x0000`0000`063B`8982
063b897c jmp       0x0000`0000`063B`897E
063b897e jmp       0x0000`0000`063B`898C
063b8980 ud2
063b8982 movl      $0,0x40(%rsp)
063b898a jmp       0x0000`0000`063B`89C3
063b898c mov       0x28(%rsp),%rcx
063b8991 mov       0x38(%rsp),%rax
063b8996 mov       %rax,0x60(%rsp)
063b899b movb      $0,0x57(%rsp)
063b89a0 mov       %rax,0x48(%rsp)
063b89a5 mov       0x48(%rsp),%rdx
063b89aa call      0x0000`0000`063C`7130
063b89af mov       %eax,0x24(%rsp)
063b89b3 mov       0x24(%rsp),%eax
063b89b7 mov       %eax,0x44(%rsp)
063b89bb movl      $1,0x40(%rsp)
063b89c3 testb     $1,0x57(%rsp)
063b89c8 jne       0x0000`0000`063B`89D7
063b89ca mov       0x40(%rsp),%eax
063b89ce mov       0x44(%rsp),%edx
063b89d2 add       $0x68,%rsp
063b89d6 ret
063b89d7 jmp       0x0000`0000`063B`89CA

enum$<core::option::Option<tuple$<usize,char> >, 0, 1114111, Some>::ok_or<tuple$<usize,char>,usize>:
063b89e0 sub       $0x48,%rsp
063b89e4 mov       %r9,(%rsp)
063b89e8 mov       %rcx,8(%rsp)
063b89ed mov       %rcx,0x10(%rsp)
063b89f2 mov       %rdx,0x18(%rsp)
063b89f7 mov       %r8d,0x20(%rsp)
063b89fc mov       %r9,0x30(%rsp)
063b8a01 movb      $0,0x2F(%rsp)
063b8a06 movb      $1,0x2F(%rsp)
063b8a0b mov       0x20(%rsp),%eax
063b8a0f add       $0xFFEF`0000,%eax
063b8a14 setne     %al
063b8a17 movzbl    %al,%eax
063b8a1a je        0x0000`0000`063B`8A22
063b8a1c jmp       0x0000`0000`063B`8A1E
063b8a1e jmp       0x0000`0000`063B`8A3D
063b8a20 ud2
063b8a22 mov       8(%rsp),%rax
063b8a27 mov       (%rsp),%rcx
063b8a2b movb      $0,0x2F(%rsp)
063b8a30 mov       %rcx,8(%rax)
063b8a34 movq      $1,(%rax)
063b8a3b jmp       0x0000`0000`063B`8A62
063b8a3d mov       8(%rsp),%rax
063b8a42 mov       0x18(%rsp),%rdx
063b8a47 mov       0x20(%rsp),%ecx
063b8a4b mov       %rdx,0x38(%rsp)
063b8a50 mov       %ecx,0x40(%rsp)
063b8a54 mov       %rdx,8(%rax)
063b8a58 mov       %ecx,0x10(%rax)
063b8a5b movq      $0,(%rax)
063b8a62 testb     $1,0x2F(%rsp)
063b8a67 jne       0x0000`0000`063B`8A73
063b8a69 mov       0x10(%rsp),%rax
063b8a6e add       $0x48,%rsp
063b8a72 ret
063b8a73 jmp       0x0000`0000`063B`8A69

enum$<core::option::Option<core::fmt::builders::PadAdapter>, 1, 18446744073709551615, Some>::insert<core::fmt::builders::PadAdapter>:
063b8a80 sub       $0x78,%rsp
063b8a84 mov       %rcx,0x38(%rsp)
063b8a89 mov       %rcx,0x70(%rsp)
063b8a8e mov       (%rdx),%rax
063b8a91 mov       %rax,0x58(%rsp)
063b8a96 mov       8(%rdx),%rax
063b8a9a mov       %rax,0x60(%rsp)
063b8a9f mov       0x10(%rdx),%rax
063b8aa3 mov       %rax,0x68(%rsp)
063b8aa8 mov       0x58(%rsp),%rax
063b8aad mov       %rax,0x40(%rsp)
063b8ab2 mov       0x60(%rsp),%rax
063b8ab7 mov       %rax,0x48(%rsp)
063b8abc mov       0x68(%rsp),%rax
063b8ac1 mov       %rax,0x50(%rsp)
063b8ac6 mov       0x38(%rsp),%rcx
063b8acb mov       0x40(%rsp),%rax
063b8ad0 mov       %rax,(%rcx)
063b8ad3 mov       0x48(%rsp),%rax
063b8ad8 mov       %rax,8(%rcx)
063b8adc mov       0x50(%rsp),%rax
063b8ae1 mov       %rax,0x10(%rcx)
063b8ae5 call      0x0000`0000`063B`8420
063b8aea mov       %rax,0x30(%rsp)
063b8aef mov       0x30(%rsp),%rcx
063b8af4 lea       0x63C`ED60,%rdx
063b8afb call      0x0000`0000`063B`8660
063b8b00 mov       %rax,0x28(%rsp)
063b8b05 mov       0x28(%rsp),%rax
063b8b0a add       $0x78,%rsp
063b8b0e ret

enum$<core::option::Option<ref$<u8> >, 1, 18446744073709551615, Some>::cloned<u8>:
063b8b10 sub       $0x48,%rsp
063b8b14 mov       %rcx,0x30(%rsp)
063b8b19 mov       0x30(%rsp),%rax
063b8b1e test      %rax,%rax
063b8b21 setne     %al
063b8b24 movzbl    %al,%eax
063b8b27 je        0x0000`0000`063B`8B2F
063b8b29 jmp       0x0000`0000`063B`8B2B
063b8b2b jmp       0x0000`0000`063B`8B36
063b8b2d ud2
063b8b2f movb      $0,0x38(%rsp)
063b8b34 jmp       0x0000`0000`063B`8B56
063b8b36 mov       0x30(%rsp),%rcx
063b8b3b mov       %rcx,0x40(%rsp)
063b8b40 call      0x0000`0000`063C`7380
063b8b45 mov       %al,0x2F(%rsp)
063b8b49 mov       0x2F(%rsp),%al
063b8b4d mov       %al,0x39(%rsp)
063b8b51 movb      $1,0x38(%rsp)
063b8b56 mov       0x38(%rsp),%al
063b8b5a mov       0x39(%rsp),%dl
063b8b5e add       $0x48,%rsp
063b8b62 ret

core::option::impl$35::branch<ref$<core::fmt::ArgumentV1> >:
063b8b70 sub       $0x18,%rsp
063b8b74 mov       %rcx,(%rsp)
063b8b78 mov       (%rsp),%rax
063b8b7c test      %rax,%rax
063b8b7f setne     %al
063b8b82 movzbl    %al,%eax
063b8b85 je        0x0000`0000`063B`8B8D
063b8b87 jmp       0x0000`0000`063B`8B89
063b8b89 jmp       0x0000`0000`063B`8B98
063b8b8b ud2
063b8b8d movq      $0,8(%rsp)
063b8b96 jmp       0x0000`0000`063B`8BA6
063b8b98 mov       (%rsp),%rax
063b8b9c mov       %rax,0x10(%rsp)
063b8ba1 mov       %rax,8(%rsp)
063b8ba6 mov       8(%rsp),%rax
063b8bab add       $0x18,%rsp
063b8baf ret

core::option::impl$35::branch<tuple$<> >:
063b8bb0 sub       $0x10,%rsp
063b8bb4 and       $1,%cl
063b8bb7 mov       %cl,6(%rsp)
063b8bbb movzbl    6(%rsp),%eax
063b8bc0 test      $1,%al
063b8bc2 je        0x0000`0000`063B`8BCA
063b8bc4 jmp       0x0000`0000`063B`8BC6
063b8bc6 jmp       0x0000`0000`063B`8BD1
063b8bc8 ud2
063b8bca movb      $1,7(%rsp)
063b8bcf jmp       0x0000`0000`063B`8BD6
063b8bd1 movb      $0,7(%rsp)
063b8bd6 mov       7(%rsp),%al
063b8bda and       $1,%al
063b8bdc movzbl    %al,%eax
063b8bdf add       $0x10,%rsp
063b8be3 ret

core::option::impl$35::branch<slice$<u8> >:
063b8bf0 sub       $0x30,%rsp
063b8bf4 mov       %rcx,(%rsp)
063b8bf8 mov       %rdx,8(%rsp)
063b8bfd mov       (%rsp),%rax
063b8c01 test      %rax,%rax
063b8c04 setne     %al
063b8c07 movzbl    %al,%eax
063b8c0a je        0x0000`0000`063B`8C12
063b8c0c jmp       0x0000`0000`063B`8C0E
063b8c0e jmp       0x0000`0000`063B`8C1D
063b8c10 ud2
063b8c12 movq      $0,0x10(%rsp)
063b8c1b jmp       0x0000`0000`063B`8C3A
063b8c1d mov       (%rsp),%rcx
063b8c21 mov       8(%rsp),%rax
063b8c26 mov       %rcx,0x20(%rsp)
063b8c2b mov       %rax,0x28(%rsp)
063b8c30 mov       %rcx,0x10(%rsp)
063b8c35 mov       %rax,0x18(%rsp)
063b8c3a mov       0x10(%rsp),%rax
063b8c3f mov       0x18(%rsp),%rdx
063b8c44 add       $0x30,%rsp
063b8c48 ret

core::option::impl$35::branch<ref$<u8> >:
063b8c50 sub       $0x18,%rsp
063b8c54 mov       %rcx,(%rsp)
063b8c58 mov       (%rsp),%rax
063b8c5c test      %rax,%rax
063b8c5f setne     %al
063b8c62 movzbl    %al,%eax
063b8c65 je        0x0000`0000`063B`8C6D
063b8c67 jmp       0x0000`0000`063B`8C69
063b8c69 jmp       0x0000`0000`063B`8C78
063b8c6b ud2
063b8c6d movq      $0,8(%rsp)
063b8c76 jmp       0x0000`0000`063B`8C86
063b8c78 mov       (%rsp),%rax
063b8c7c mov       %rax,0x10(%rsp)
063b8c81 mov       %rax,8(%rsp)
063b8c86 mov       8(%rsp),%rax
063b8c8b add       $0x18,%rsp
063b8c8f ret

core::option::impl$35::branch<ref$<core::fmt::rt::v1::Argument> >:
063b8c90 sub       $0x18,%rsp
063b8c94 mov       %rcx,(%rsp)
063b8c98 mov       (%rsp),%rax
063b8c9c test      %rax,%rax
063b8c9f setne     %al
063b8ca2 movzbl    %al,%eax
063b8ca5 je        0x0000`0000`063B`8CAD
063b8ca7 jmp       0x0000`0000`063B`8CA9
063b8ca9 jmp       0x0000`0000`063B`8CB8
063b8cab ud2
063b8cad movq      $0,8(%rsp)
063b8cb6 jmp       0x0000`0000`063B`8CC6
063b8cb8 mov       (%rsp),%rax
063b8cbc mov       %rax,0x10(%rsp)
063b8cc1 mov       %rax,8(%rsp)
063b8cc6 mov       8(%rsp),%rax
063b8ccb add       $0x18,%rsp
063b8ccf ret

core::option::impl$36::from_residual<tuple$<usize,usize> >:
063b8cd0 push      %rax
063b8cd1 mov       %rcx,%rax
063b8cd4 movq      $0,(%rcx)
063b8cdb pop       %rcx
063b8cdc ret

core::option::impl$36::from_residual<tuple$<usize,ref$<core::fmt::rt::v1::Argument> > >:
063b8ce0 sub       $0x18,%rsp
063b8ce4 movq      $0,8(%rsp)
063b8ced mov       (%rsp),%rax
063b8cf1 mov       8(%rsp),%rdx
063b8cf6 add       $0x18,%rsp
063b8cfa ret

core::option::impl$36::from_residual<tuple$<usize,ref$<core::fmt::ArgumentV1> > >:
063b8d00 sub       $0x18,%rsp
063b8d04 movq      $0,8(%rsp)
063b8d0d mov       (%rsp),%rax
063b8d11 mov       8(%rsp),%rdx
063b8d16 add       $0x18,%rsp
063b8d1a ret

core::option::impl$36::from_residual<tuple$<usize,char> >:
063b8d20 sub       $0x18,%rsp
063b8d24 movl      $0x11`0000,8(%rsp)
063b8d2c mov       (%rsp),%rax
063b8d30 mov       8(%rsp),%edx
063b8d34 add       $0x18,%rsp
063b8d38 ret

core::option::impl$36::from_residual<u32>:
063b8d40 sub       $0x10,%rsp
063b8d44 movl      $0,(%rsp)
063b8d4b mov       (%rsp),%eax
063b8d4e mov       4(%rsp),%edx
063b8d52 add       $0x10,%rsp
063b8d56 ret

core::panic::location::Location::caller:
063b8d60 sub       $0x10,%rsp
063b8d64 mov       %rcx,8(%rsp)
063b8d69 mov       8(%rsp),%rax
063b8d6e mov       %rax,(%rsp)
063b8d72 mov       (%rsp),%rax
063b8d76 add       $0x10,%rsp
063b8d7a ret

core::panic::location::Location::file:
063b8d80 push      %rax
063b8d81 mov       %rcx,(%rsp)
063b8d85 mov       (%rcx),%rax
063b8d88 mov       8(%rcx),%rdx
063b8d8c pop       %rcx
063b8d8d ret

core::panic::location::Location::line:
063b8d90 push      %rax
063b8d91 mov       %rcx,(%rsp)
063b8d95 mov       0x10(%rcx),%eax
063b8d98 pop       %rcx
063b8d99 ret

core::panic::location::Location::column:
063b8da0 push      %rax
063b8da1 mov       %rcx,(%rsp)
063b8da5 mov       0x14(%rcx),%eax
063b8da8 pop       %rcx
063b8da9 ret

core::panic::panic_info::PanicInfo::internal_constructor:
063b8db0 sub       $0x18,%rsp
063b8db4 mov       %rcx,%rax
063b8db7 mov       %rdx,(%rsp)
063b8dbb mov       %r8,8(%rsp)
063b8dc0 mov       %r9b,%r10b
063b8dc3 and       $1,%r10b
063b8dc7 mov       %r10b,0x17(%rsp)
063b8dcc lea       0x63C`E370,%r10
063b8dd3 mov       %r10,(%rcx)
063b8dd6 lea       0x63C`ED78,%r10
063b8ddd mov       %r10,8(%rcx)
063b8de1 mov       %rdx,0x10(%rcx)
063b8de5 mov       %r8,0x18(%rcx)
063b8de9 and       $1,%r9b
063b8ded mov       %r9b,0x20(%rcx)
063b8df1 add       $0x18,%rsp
063b8df5 ret

core::panic::panic_info::PanicInfo::message:
063b8e00 push      %rax
063b8e01 mov       %rcx,(%rsp)
063b8e05 mov       0x10(%rcx),%rax
063b8e09 pop       %rcx
063b8e0a ret

core::panic::panic_info::PanicInfo::location:
063b8e10 sub       $0x10,%rsp
063b8e14 mov       %rcx,8(%rsp)
063b8e19 mov       0x18(%rcx),%rax
063b8e1d mov       %rax,(%rsp)
063b8e21 mov       (%rsp),%rax
063b8e25 add       $0x10,%rsp
063b8e29 ret

core::panicking::panic:
063b8e30 sub       $0x88,%rsp
063b8e37 mov       %r8,0x30(%rsp)
063b8e3c mov       %rcx,0x78(%rsp)
063b8e41 mov       %rdx,0x80(%rsp)
063b8e49 mov       %rcx,0x68(%rsp)
063b8e4e mov       %rdx,0x70(%rsp)
063b8e53 lea       0x68(%rsp),%rdx
063b8e58 lea       0x38(%rsp),%rcx
063b8e5d mov       $1,%r8d
063b8e63 lea       0x63C`E370,%r9
063b8e6a xor       %eax,%eax
063b8e6c movq      $0,0x20(%rsp)
063b8e75 call      0x0000`0000`063B`DE30
063b8e7a mov       0x30(%rsp),%rdx
063b8e7f lea       0x38(%rsp),%rcx
063b8e84 call      0x0000`0000`063B`8F40
063b8e89 ud2

core::panicking::panic_bounds_check:
063b8e90 sub       $0xB8,%rsp
063b8e97 mov       %r8,0x40(%rsp)
063b8e9c mov       %rcx,0x58(%rsp)
063b8ea1 mov       %rdx,0x60(%rsp)
063b8ea6 lea       0x60(%rsp),%rcx
063b8eab call      0x0000`0000`063C`87D0
063b8eb0 mov       %rax,0x48(%rsp)
063b8eb5 mov       %rdx,0x50(%rsp)
063b8eba lea       0x58(%rsp),%rcx
063b8ebf call      0x0000`0000`063C`87D0
063b8ec4 mov       %rax,0x30(%rsp)
063b8ec9 mov       %rdx,0x38(%rsp)
063b8ece mov       0x38(%rsp),%rax
063b8ed3 mov       0x30(%rsp),%rcx
063b8ed8 mov       0x50(%rsp),%rdx
063b8edd mov       0x48(%rsp),%r8
063b8ee2 mov       %r8,0x98(%rsp)
063b8eea mov       %rdx,0xA0(%rsp)
063b8ef2 mov       %rcx,0xA8(%rsp)
063b8efa mov       %rax,0xB0(%rsp)
063b8f02 lea       0x98(%rsp),%r9
063b8f0a lea       0x68(%rsp),%rcx
063b8f0f lea       0x63C`EDD0,%rdx
063b8f16 mov       $2,%r8d
063b8f1c movq      $2,0x20(%rsp)
063b8f25 call      0x0000`0000`063B`DE30
063b8f2a mov       0x40(%rsp),%rdx
063b8f2f lea       0x68(%rsp),%rcx
063b8f34 call      0x0000`0000`063B`8F40
063b8f39 ud2

core::panicking::panic_fmt:
063b8f40 sub       $0x68,%rsp
063b8f44 mov       %rdx,0x28(%rsp)
063b8f49 mov       %rcx,%rax
063b8f4c mov       0x28(%rsp),%rcx
063b8f51 mov       %rax,0x60(%rsp)
063b8f56 call      0x0000`0000`063B`8D60
063b8f5b mov       %rax,0x30(%rsp)
063b8f60 mov       0x30(%rsp),%r8
063b8f65 mov       0x60(%rsp),%rdx
063b8f6a lea       0x38(%rsp),%rcx
063b8f6f mov       $1,%r9d
063b8f75 call      0x0000`0000`063B`8DB0
063b8f7a lea       0x38(%rsp),%rcx
063b8f7f call      0x0000`0000`063A`C5F0
063b8f84 ud2

core::panicking::assert_failed<usize,usize>:
063b8f90 sub       $0x88,%rsp
063b8f97 mov       %rdx,%rax
063b8f9a mov       0xB0(%rsp),%rdx
063b8fa2 mov       %rax,0x40(%rsp)
063b8fa7 mov       %r8,0x48(%rsp)
063b8fac mov       %cl,0x87(%rsp)
063b8fb3 mov       0x28(%r9),%rax
063b8fb7 mov       %rax,0x78(%rsp)
063b8fbc mov       0x20(%r9),%rax
063b8fc0 mov       %rax,0x70(%rsp)
063b8fc5 mov       0x18(%r9),%rax
063b8fc9 mov       %rax,0x68(%rsp)
063b8fce mov       0x10(%r9),%rax
063b8fd2 mov       %rax,0x60(%rsp)
063b8fd7 mov       (%r9),%rax
063b8fda mov       8(%r9),%r8
063b8fde mov       %r8,0x58(%rsp)
063b8fe3 mov       %rax,0x50(%rsp)
063b8fe8 mov       %rsp,%rax
063b8feb mov       %rdx,0x30(%rax)
063b8fef lea       0x50(%rsp),%rdx
063b8ff4 mov       %rdx,0x28(%rax)
063b8ff8 lea       0x63C`EDF0,%r8
063b8fff mov       %r8,0x20(%rax)
063b9003 lea       0x40(%rsp),%rdx
063b9008 lea       0x48(%rsp),%r9
063b900d call      0x0000`0000`063B`9020
063b9012 ud2

core::panicking::assert_failed_inner:
063b9020 push      %rsi
063b9021 sub       $0x1F0,%rsp
063b9028 mov       0x230(%rsp),%rax
063b9030 mov       %rax,0xA0(%rsp)
063b9038 mov       0x228(%rsp),%rax
063b9040 mov       %rax,0xA8(%rsp)
063b9048 mov       0x220(%rsp),%rax
063b9050 mov       %cl,0xBF(%rsp)
063b9057 mov       %rdx,0xC0(%rsp)
063b905f mov       %r8,0xC8(%rsp)
063b9067 mov       %r9,0xD0(%rsp)
063b906f mov       %rax,0xD8(%rsp)
063b9077 movzbl    0xBF(%rsp),%eax
063b907f mov       %rax,0xB0(%rsp)
063b9087 test      %rax,%rax
063b908a je        0x0000`0000`063B`90A2
063b908c jmp       0x0000`0000`063B`908E
063b908e mov       0xB0(%rsp),%rax
063b9096 sub       $1,%rax
063b909a je        0x0000`0000`063B`90BF
063b909c jmp       0x0000`0000`063B`909E
063b909e jmp       0x0000`0000`063B`90DC
063b90a0 ud2
063b90a2 lea       0x63C`EE19,%rax
063b90a9 mov       %rax,0xE0(%rsp)
063b90b1 movq      $2,0xE8(%rsp)
063b90bd jmp       0x0000`0000`063B`90F7
063b90bf lea       0x63C`EE17,%rax
063b90c6 mov       %rax,0xE0(%rsp)
063b90ce movq      $2,0xE8(%rsp)
063b90da jmp       0x0000`0000`063B`90F7
063b90dc lea       0x63C`EE10,%rax
063b90e3 mov       %rax,0xE0(%rsp)
063b90eb movq      $7,0xE8(%rsp)
063b90f7 mov       0xA8(%rsp),%rax
063b90ff mov       (%rax),%rax
063b9102 test      %rax,%rax
063b9105 setne     %al
063b9108 movzbl    %al,%eax
063b910b je        0x0000`0000`063B`9113
063b910d jmp       0x0000`0000`063B`910F
063b910f jmp       0x0000`0000`063B`9135
063b9111 ud2
063b9113 lea       0xE0(%rsp),%rcx
063b911b call      0x0000`0000`063C`88C0
063b9120 mov       %rax,0x90(%rsp)
063b9128 mov       %rdx,0x98(%rsp)
063b9130 jmp       0x0000`0000`063B`9262
063b9135 mov       0xA8(%rsp),%rdx
063b913d lea       0xF0(%rsp),%rcx
063b9145 mov       $0x30,%r8d
063b914b call      0x0000`0000`063C`AB90
063b9150 lea       0xE0(%rsp),%rcx
063b9158 call      0x0000`0000`063C`88C0
063b915d mov       %rax,0x80(%rsp)
063b9165 mov       %rdx,0x88(%rsp)
063b916d lea       0xC0(%rsp),%rcx
063b9175 call      0x0000`0000`063C`8950
063b917a mov       %rax,0x70(%rsp)
063b917f mov       %rdx,0x78(%rsp)
063b9184 lea       0xD0(%rsp),%rcx
063b918c call      0x0000`0000`063C`8950
063b9191 mov       %rax,0x60(%rsp)
063b9196 mov       %rdx,0x68(%rsp)
063b919b lea       0xF0(%rsp),%rcx
063b91a3 call      0x0000`0000`063C`8890
063b91a8 mov       %rax,0x50(%rsp)
063b91ad mov       %rdx,0x58(%rsp)
063b91b2 mov       0x58(%rsp),%rax
063b91b7 mov       0x50(%rsp),%rcx
063b91bc mov       0x68(%rsp),%rdx
063b91c1 mov       0x60(%rsp),%r8
063b91c6 mov       0x78(%rsp),%r9
063b91cb mov       0x70(%rsp),%r10
063b91d0 mov       0x88(%rsp),%r11
063b91d8 mov       0x80(%rsp),%rsi
063b91e0 mov       %rsi,0x150(%rsp)
063b91e8 mov       %r11,0x158(%rsp)
063b91f0 mov       %r10,0x160(%rsp)
063b91f8 mov       %r9,0x168(%rsp)
063b9200 mov       %r8,0x170(%rsp)
063b9208 mov       %rdx,0x178(%rsp)
063b9210 mov       %rcx,0x180(%rsp)
063b9218 mov       %rax,0x188(%rsp)
063b9220 lea       0x150(%rsp),%r9
063b9228 lea       0x120(%rsp),%rcx
063b9230 lea       0x63C`EE58,%rdx
063b9237 mov       $4,%r8d
063b923d movq      $4,0x20(%rsp)
063b9246 call      0x0000`0000`063B`DE30
063b924b mov       0xA0(%rsp),%rdx
063b9253 lea       0x120(%rsp),%rcx
063b925b call      0x0000`0000`063B`8F40
063b9260 ud2
063b9262 lea       0xC0(%rsp),%rcx
063b926a call      0x0000`0000`063C`8950
063b926f mov       %rax,0x40(%rsp)
063b9274 mov       %rdx,0x48(%rsp)
063b9279 lea       0xD0(%rsp),%rcx
063b9281 call      0x0000`0000`063C`8950
063b9286 mov       %rax,0x30(%rsp)
063b928b mov       %rdx,0x38(%rsp)
063b9290 mov       0x38(%rsp),%rax
063b9295 mov       0x30(%rsp),%rcx
063b929a mov       0x48(%rsp),%rdx
063b929f mov       0x40(%rsp),%r8
063b92a4 mov       0x98(%rsp),%r9
063b92ac mov       0x90(%rsp),%r10
063b92b4 mov       %r10,0x1C0(%rsp)
063b92bc mov       %r9,0x1C8(%rsp)
063b92c4 mov       %r8,0x1D0(%rsp)
063b92cc mov       %rdx,0x1D8(%rsp)
063b92d4 mov       %rcx,0x1E0(%rsp)
063b92dc mov       %rax,0x1E8(%rsp)
063b92e4 lea       0x1C0(%rsp),%r9
063b92ec lea       0x190(%rsp),%rcx
063b92f4 lea       0x63C`EEA0,%rdx
063b92fb mov       $4,%r8d
063b9301 movq      $3,0x20(%rsp)
063b930a call      0x0000`0000`063B`DE30
063b930f mov       0xA0(%rsp),%rdx
063b9317 lea       0x190(%rsp),%rcx
063b931f call      0x0000`0000`063B`8F40
063b9324 ud2

enum$<core::result::Result<tuple$<>,usize> >::ok<tuple$<>,usize>:
063b9330 sub       $0x28,%rsp
063b9334 mov       %rcx,(%rsp)
063b9338 mov       %rdx,8(%rsp)
063b933d mov       (%rsp),%rax
063b9341 test      %rax,%rax
063b9344 je        0x0000`0000`063B`934C
063b9346 jmp       0x0000`0000`063B`9348
063b9348 jmp       0x0000`0000`063B`9353
063b934a ud2
063b934c movb      $1,0x17(%rsp)
063b9351 jmp       0x0000`0000`063B`9362
063b9353 mov       8(%rsp),%rax
063b9358 mov       %rax,0x20(%rsp)
063b935d movb      $0,0x17(%rsp)
063b9362 mov       0x17(%rsp),%al
063b9366 and       $1,%al
063b9368 movzbl    %al,%eax
063b936b add       $0x28,%rsp
063b936f ret

core::result::Result::and_then<tuple$<>,core::fmt::Error,tuple$<>,core::fmt::builders::impl$3::finish::closure_env$0>:
063b9370 sub       $0x58,%rsp
063b9374 mov       %rdx,0x28(%rsp)
063b9379 and       $1,%cl
063b937c mov       %cl,0x36(%rsp)
063b9380 mov       %rdx,0x40(%rsp)
063b9385 movb      $0,0x3F(%rsp)
063b938a movb      $1,0x3F(%rsp)
063b938f movzbl    0x36(%rsp),%eax
063b9394 test      $1,%al
063b9396 je        0x0000`0000`063B`939E
063b9398 jmp       0x0000`0000`063B`939A
063b939a jmp       0x0000`0000`063B`93B5
063b939c ud2
063b939e mov       0x28(%rsp),%rcx
063b93a3 movb      $0,0x3F(%rsp)
063b93a8 call      0x0000`0000`063B`A110
063b93ad and       $1,%al
063b93af mov       %al,0x37(%rsp)
063b93b3 jmp       0x0000`0000`063B`93BA
063b93b5 movb      $1,0x37(%rsp)
063b93ba testb     $1,0x3F(%rsp)
063b93bf jne       0x0000`0000`063B`93CF
063b93c1 mov       0x37(%rsp),%al
063b93c5 and       $1,%al
063b93c7 movzbl    %al,%eax
063b93ca add       $0x58,%rsp
063b93ce ret
063b93cf jmp       0x0000`0000`063B`93C1

core::result::Result::and_then<tuple$<>,core::fmt::Error,tuple$<>,core::fmt::builders::impl$3::field::closure_env$0>:
063b93e0 sub       $0x78,%rsp
063b93e4 mov       %rdx,0x28(%rsp)
063b93e9 and       $1,%cl
063b93ec mov       %cl,0x36(%rsp)
063b93f0 movb      $0,0x67(%rsp)
063b93f5 movb      $1,0x67(%rsp)
063b93fa movzbl    0x36(%rsp),%eax
063b93ff test      $1,%al
063b9401 je        0x0000`0000`063B`9409
063b9403 jmp       0x0000`0000`063B`9405
063b9405 jmp       0x0000`0000`063B`9435
063b9407 ud2
063b9409 mov       0x28(%rsp),%rdx
063b940e movb      $0,0x67(%rsp)
063b9413 lea       0x38(%rsp),%rcx
063b9418 mov       $0x28,%r8d
063b941e call      0x0000`0000`063C`AB90
063b9423 lea       0x38(%rsp),%rcx
063b9428 call      0x0000`0000`063B`9D00
063b942d and       $1,%al
063b942f mov       %al,0x37(%rsp)
063b9433 jmp       0x0000`0000`063B`943A
063b9435 movb      $1,0x37(%rsp)
063b943a testb     $1,0x67(%rsp)
063b943f jne       0x0000`0000`063B`944F
063b9441 mov       0x37(%rsp),%al
063b9445 and       $1,%al
063b9447 movzbl    %al,%eax
063b944a add       $0x78,%rsp
063b944e ret
063b944f jmp       0x0000`0000`063B`9441

core::result::Result::and_then<tuple$<>,core::fmt::Error,tuple$<>,core::fmt::builders::impl$4::field::closure_env$0>:
063b9460 sub       $0x68,%rsp
063b9464 mov       %rdx,0x28(%rsp)
063b9469 and       $1,%cl
063b946c mov       %cl,0x36(%rsp)
063b9470 movb      $0,0x57(%rsp)
063b9475 movb      $1,0x57(%rsp)
063b947a movzbl    0x36(%rsp),%eax
063b947f test      $1,%al
063b9481 je        0x0000`0000`063B`9489
063b9483 jmp       0x0000`0000`063B`9485
063b9485 jmp       0x0000`0000`063B`94BF
063b9487 ud2
063b9489 mov       0x28(%rsp),%rax
063b948e movb      $0,0x57(%rsp)
063b9493 mov       (%rax),%rcx
063b9496 mov       %rcx,0x38(%rsp)
063b949b mov       8(%rax),%rcx
063b949f mov       %rcx,0x40(%rsp)
063b94a4 mov       0x10(%rax),%rax
063b94a8 mov       %rax,0x48(%rsp)
063b94ad lea       0x38(%rsp),%rcx
063b94b2 call      0x0000`0000`063B`A2F0
063b94b7 and       $1,%al
063b94b9 mov       %al,0x37(%rsp)
063b94bd jmp       0x0000`0000`063B`94C4
063b94bf movb      $1,0x37(%rsp)
063b94c4 testb     $1,0x57(%rsp)
063b94c9 jne       0x0000`0000`063B`94D9
063b94cb mov       0x37(%rsp),%al
063b94cf and       $1,%al
063b94d1 movzbl    %al,%eax
063b94d4 add       $0x68,%rsp
063b94d8 ret
063b94d9 jmp       0x0000`0000`063B`94CB

core::result::Result::and_then<tuple$<>,core::fmt::Error,tuple$<>,core::fmt::builders::impl$4::finish::closure_env$0>:
063b94e0 sub       $0x58,%rsp
063b94e4 mov       %rdx,0x28(%rsp)
063b94e9 and       $1,%cl
063b94ec mov       %cl,0x36(%rsp)
063b94f0 mov       %rdx,0x40(%rsp)
063b94f5 movb      $0,0x3F(%rsp)
063b94fa movb      $1,0x3F(%rsp)
063b94ff movzbl    0x36(%rsp),%eax
063b9504 test      $1,%al
063b9506 je        0x0000`0000`063B`950E
063b9508 jmp       0x0000`0000`063B`950A
063b950a jmp       0x0000`0000`063B`9525
063b950c ud2
063b950e mov       0x28(%rsp),%rcx
063b9513 movb      $0,0x3F(%rsp)
063b9518 call      0x0000`0000`063B`A580
063b951d and       $1,%al
063b951f mov       %al,0x37(%rsp)
063b9523 jmp       0x0000`0000`063B`952A
063b9525 movb      $1,0x37(%rsp)
063b952a testb     $1,0x3F(%rsp)
063b952f jne       0x0000`0000`063B`953F
063b9531 mov       0x37(%rsp),%al
063b9535 and       $1,%al
063b9537 movzbl    %al,%eax
063b953a add       $0x58,%rsp
063b953e ret
063b953f jmp       0x0000`0000`063B`9531

core::result::unwrap_failed:
063b9550 sub       $0xC8,%rsp
063b9557 mov       0xF0(%rsp),%rax
063b955f mov       %rax,0x40(%rsp)
063b9564 mov       %rcx,0x58(%rsp)
063b9569 mov       %rdx,0x60(%rsp)
063b956e mov       %r8,0x68(%rsp)
063b9573 mov       %r9,0x70(%rsp)
063b9578 lea       0x58(%rsp),%rcx
063b957d call      0x0000`0000`063C`88C0
063b9582 mov       %rax,0x48(%rsp)
063b9587 mov       %rdx,0x50(%rsp)
063b958c lea       0x68(%rsp),%rcx
063b9591 call      0x0000`0000`063C`8950
063b9596 mov       %rax,0x30(%rsp)
063b959b mov       %rdx,0x38(%rsp)
063b95a0 mov       0x38(%rsp),%rax
063b95a5 mov       0x30(%rsp),%rcx
063b95aa mov       0x50(%rsp),%rdx
063b95af mov       0x48(%rsp),%r8
063b95b4 mov       %r8,0xA8(%rsp)
063b95bc mov       %rdx,0xB0(%rsp)
063b95c4 mov       %rcx,0xB8(%rsp)
063b95cc mov       %rax,0xC0(%rsp)
063b95d4 lea       0xA8(%rsp),%r9
063b95dc lea       0x78(%rsp),%rcx
063b95e1 lea       0x63C`EEE8,%rdx
063b95e8 mov       $2,%r8d
063b95ee movq      $2,0x20(%rsp)
063b95f7 call      0x0000`0000`063B`DE30
063b95fc mov       0x40(%rsp),%rdx
063b9601 lea       0x78(%rsp),%rcx
063b9606 call      0x0000`0000`063B`8F40
063b960b ud2

core::result::impl$27::branch<core::fmt::PostPadding,core::fmt::Error>:
063b9610 sub       $0x40,%rsp
063b9614 mov       %rcx,(%rsp)
063b9618 mov       %edx,8(%rsp)
063b961c mov       8(%rsp),%eax
063b9620 add       $0xFFEF`0000,%eax
063b9625 sete      %al
063b9628 movzbl    %al,%eax
063b962b jne       0x0000`0000`063B`9633
063b962d jmp       0x0000`0000`063B`962F
063b962f jmp       0x0000`0000`063B`964F
063b9631 ud2
063b9633 mov       (%rsp),%rcx
063b9637 mov       8(%rsp),%eax
063b963b mov       %rcx,0x30(%rsp)
063b9640 mov       %eax,0x38(%rsp)
063b9644 mov       %rcx,0x10(%rsp)
063b9649 mov       %eax,0x18(%rsp)
063b964d jmp       0x0000`0000`063B`9657
063b964f movl      $0x11`0000,0x18(%rsp)
063b9657 mov       0x10(%rsp),%rax
063b965c mov       0x18(%rsp),%edx
063b9660 add       $0x40,%rsp
063b9664 ret

core::result::impl$27::branch<tuple$<usize,char>,usize>:
063b9670 sub       $0x38,%rsp
063b9674 mov       %rdx,(%rsp)
063b9678 mov       %rcx,8(%rsp)
063b967d mov       %rcx,0x10(%rsp)
063b9682 mov       (%rdx),%rax
063b9685 test      %rax,%rax
063b9688 je        0x0000`0000`063B`9690
063b968a jmp       0x0000`0000`063B`968C
063b968c jmp       0x0000`0000`063B`96B9
063b968e ud2
063b9690 mov       8(%rsp),%rax
063b9695 mov       (%rsp),%rcx
063b9699 mov       8(%rcx),%rdx
063b969d mov       0x10(%rcx),%ecx
063b96a0 mov       %rdx,0x28(%rsp)
063b96a5 mov       %ecx,0x30(%rsp)
063b96a9 mov       %rdx,8(%rax)
063b96ad mov       %ecx,0x10(%rax)
063b96b0 movq      $0,(%rax)
063b96b7 jmp       0x0000`0000`063B`96E0
063b96b9 mov       8(%rsp),%rax
063b96be mov       (%rsp),%rcx
063b96c2 mov       8(%rcx),%rcx
063b96c6 mov       %rcx,0x20(%rsp)
063b96cb mov       %rcx,0x18(%rsp)
063b96d0 mov       0x18(%rsp),%rcx
063b96d5 mov       %rcx,8(%rax)
063b96d9 movq      $1,(%rax)
063b96e0 mov       0x10(%rsp),%rax
063b96e5 add       $0x38,%rsp
063b96e9 ret

core::result::impl$27::branch<tuple$<>,core::fmt::Error>:
063b96f0 sub       $0x20,%rsp
063b96f4 and       $1,%cl
063b96f7 mov       %cl,6(%rsp)
063b96fb movzbl    6(%rsp),%eax
063b9700 test      $1,%al
063b9702 je        0x0000`0000`063B`970A
063b9704 jmp       0x0000`0000`063B`9706
063b9706 jmp       0x0000`0000`063B`9711
063b9708 ud2
063b970a movb      $0,7(%rsp)
063b970f jmp       0x0000`0000`063B`9716
063b9711 movb      $1,7(%rsp)
063b9716 mov       7(%rsp),%al
063b971a and       $1,%al
063b971c movzbl    %al,%eax
063b971f add       $0x20,%rsp
063b9723 ret

core::result::impl$28::from_residual<tuple$<>,usize,usize>:
063b9730 sub       $0x48,%rsp
063b9734 mov       %rcx,0x28(%rsp)
063b9739 mov       0x28(%rsp),%rcx
063b973e mov       %rcx,0x40(%rsp)
063b9743 call      0x0000`0000`063B`67E0
063b9748 mov       %rax,0x20(%rsp)
063b974d mov       0x20(%rsp),%rax
063b9752 mov       %rax,0x38(%rsp)
063b9757 movq      $1,0x30(%rsp)
063b9760 mov       0x30(%rsp),%rax
063b9765 mov       0x38(%rsp),%rdx
063b976a add       $0x48,%rsp
063b976e ret

core::result::impl$28::from_residual<tuple$<>,core::fmt::Error,core::fmt::Error>:
063b9770 sub       $0x38,%rsp
063b9774 call      0x0000`0000`063B`67D0
063b9779 movb      $1,0x27(%rsp)
063b977e mov       0x27(%rsp),%al
063b9782 and       $1,%al
063b9784 movzbl    %al,%eax
063b9787 add       $0x38,%rsp
063b978b ret

core::result::impl$28::from_residual<core::fmt::PostPadding,core::fmt::Error,core::fmt::Error>:
063b9790 sub       $0x48,%rsp
063b9794 call      0x0000`0000`063B`67D0
063b9799 movl      $0x11`0000,0x30(%rsp)
063b97a1 mov       0x28(%rsp),%rax
063b97a6 mov       0x30(%rsp),%edx
063b97aa add       $0x48,%rsp
063b97ae ret

core::sync::atomic::atomic_load<usize>:
063b97b0 sub       $0xB8,%rsp
063b97b7 mov       %rcx,0x30(%rsp)
063b97bc mov       %dl,0x47(%rsp)
063b97c0 mov       %rcx,0xB0(%rsp)
063b97c8 movzbl    0x47(%rsp),%eax
063b97cd mov       %rax,0x38(%rsp)
063b97d2 mov       0x38(%rsp),%rax
063b97d7 lea       0x63B`98A4,%rcx
063b97de movslq    (%rcx,%rax,4),%rax
063b97e2 add       %rcx,%rax
063b97e5 jmp       *%rax
063b97e7 ud2
063b97e9 mov       0x30(%rsp),%rax
063b97ee mov       (%rax),%rax
063b97f1 mov       %rax,0x48(%rsp)
063b97f6 jmp       0x0000`0000`063B`986D
063b97f8 lea       0x50(%rsp),%rcx
063b97fd lea       0x63C`F010,%rdx
063b9804 mov       $1,%r8d
063b980a lea       0x63C`E370,%r9
063b9811 xor       %eax,%eax
063b9813 movq      $0,0x20(%rsp)
063b981c call      0x0000`0000`063B`DE30
063b9821 jmp       0x0000`0000`063B`9890
063b9823 mov       0x30(%rsp),%rax
063b9828 mov       (%rax),%rax
063b982b mov       %rax,0x48(%rsp)
063b9830 jmp       0x0000`0000`063B`986D
063b9832 lea       0x80(%rsp),%rcx
063b983a lea       0x63C`EF40,%rdx
063b9841 mov       $1,%r8d
063b9847 lea       0x63C`E370,%r9
063b984e xor       %eax,%eax
063b9850 movq      $0,0x20(%rsp)
063b9859 call      0x0000`0000`063B`DE30
063b985e jmp       0x0000`0000`063B`987A
063b9860 mov       0x30(%rsp),%rax
063b9865 mov       (%rax),%rax
063b9868 mov       %rax,0x48(%rsp)
063b986d mov       0x48(%rsp),%rax
063b9872 add       $0xB8,%rsp
063b9879 ret
063b987a lea       0x63C`EFD0,%rdx
063b9881 lea       0x80(%rsp),%rcx
063b9889 call      0x0000`0000`063B`8F40
063b988e ud2
063b9890 lea       0x63C`F020,%rdx
063b9897 lea       0x50(%rsp),%rcx
063b989c call      0x0000`0000`063B`8F40
063b98a1 ud2

core::fmt::builders::impl$0::default:
063b98c0 push      %rax
063b98c1 movb      $1,7(%rsp)
063b98c6 mov       7(%rsp),%al
063b98ca and       $1,%al
063b98cc movzbl    %al,%eax
063b98cf pop       %rcx
063b98d0 ret

core::fmt::builders::PadAdapter::wrap:
063b98e0 sub       $0x58,%rsp
063b98e4 mov       %rcx,%rax
063b98e7 mov       %rax,0x28(%rsp)
063b98ec mov       %rdx,0x40(%rsp)
063b98f1 mov       %r8,0x48(%rsp)
063b98f6 mov       %r9,0x50(%rsp)
063b98fb mov       %r8,0x30(%rsp)
063b9900 mov       %r9,0x38(%rsp)
063b9905 mov       0x30(%rsp),%r8
063b990a mov       0x38(%rsp),%r9
063b990f call      0x0000`0000`063B`E8F0
063b9914 mov       0x28(%rsp),%rax
063b9919 add       $0x58,%rsp
063b991d ret

core::fmt::builders::impl$1::wrap::closure$0:
063b9920 sub       $0x68,%rsp
063b9924 mov       %rcx,0x40(%rsp)
063b9929 mov       %rdx,0x48(%rsp)
063b992e lea       0x40(%rsp),%rax
063b9933 add       $8,%rax
063b9937 mov       %rax,0x50(%rsp)
063b993c mov       %r8,0x58(%rsp)
063b9941 mov       %r9,0x60(%rsp)
063b9946 mov       %r8,0x28(%rsp)
063b994b mov       %r9,0x30(%rsp)
063b9950 mov       %rdx,0x38(%rsp)
063b9955 lea       0x28(%rsp),%rdx
063b995a call      0x0000`0000`063B`8A80
063b995f mov       %rax,0x20(%rsp)
063b9964 mov       0x20(%rsp),%rax
063b9969 lea       0x63C`F038,%rdx
063b9970 add       $0x68,%rsp
063b9974 ret

core::fmt::builders::impl$2::write_str:
063b9980 sub       $0xE8,%rsp
063b9987 mov       %rcx,0x68(%rsp)
063b998c mov       %rdx,0x70(%rsp)
063b9991 mov       %r8,0x78(%rsp)
063b9996 mov       %rcx,0xB8(%rsp)
063b999e mov       0x70(%rsp),%rcx
063b99a3 mov       0x78(%rsp),%rdx
063b99a8 call      0x0000`0000`063C`64B0
063b99ad mov       %al,0x67(%rsp)
063b99b1 mov       0x67(%rsp),%al
063b99b5 xor       $0xFF,%al
063b99b7 test      $1,%al
063b99b9 jne       0x0000`0000`063B`99C8
063b99bb movb      $0,0x86(%rsp)
063b99c3 jmp       0x0000`0000`063B`9A59
063b99c8 mov       0x68(%rsp),%rax
063b99cd mov       0x10(%rax),%rax
063b99d1 testb     $1,(%rax)
063b99d4 jne       0x0000`0000`063B`99FD
063b99d6 mov       0x70(%rsp),%rcx
063b99db mov       0x78(%rsp),%rdx
063b99e0 mov       $0xA,%r8d
063b99e6 call      0x0000`0000`063C`6940
063b99eb mov       %rdx,0x98(%rsp)
063b99f3 mov       %rax,0x90(%rsp)
063b99fb jmp       0x0000`0000`063B`9A6D
063b99fd mov       0x68(%rsp),%rax
063b9a02 mov       (%rax),%rcx
063b9a05 mov       8(%rax),%rax
063b9a09 lea       0x63C`F068,%rdx
063b9a10 mov       $4,%r8d
063b9a16 callq     *0x18(%rax)
063b9a19 mov       %al,0x66(%rsp)
063b9a1d mov       0x66(%rsp),%cl
063b9a21 and       $1,%cl
063b9a24 call      0x0000`0000`063B`96F0
063b9a29 and       $1,%al
063b9a2b mov       %al,0x87(%rsp)
063b9a32 movzbl    0x87(%rsp),%eax
063b9a3a test      $1,%al
063b9a3c je        0x0000`0000`063B`99D6
063b9a3e jmp       0x0000`0000`063B`9A40
063b9a40 jmp       0x0000`0000`063B`9A44
063b9a42 ud2
063b9a44 lea       0x63C`F0E8,%rcx
063b9a4b call      0x0000`0000`063B`9770
063b9a50 and       $1,%al
063b9a52 mov       %al,0x86(%rsp)
063b9a59 mov       0x86(%rsp),%al
063b9a60 and       $1,%al
063b9a62 movzbl    %al,%eax
063b9a65 add       $0xE8,%rsp
063b9a6c ret
063b9a6d mov       0x90(%rsp),%rax
063b9a75 test      %rax,%rax
063b9a78 je        0x0000`0000`063B`9A80
063b9a7a jmp       0x0000`0000`063B`9A7C
063b9a7c jmp       0x0000`0000`063B`9AA5
063b9a7e ud2
063b9a80 mov       0x68(%rsp),%rax
063b9a85 mov       0x10(%rax),%rax
063b9a89 movb      $0,(%rax)
063b9a8c mov       0x70(%rsp),%rcx
063b9a91 mov       0x78(%rsp),%rdx
063b9a96 call      0x0000`0000`063C`6470
063b9a9b mov       %rax,0x88(%rsp)
063b9aa3 jmp       0x0000`0000`063B`9AFA
063b9aa5 mov       0x68(%rsp),%rcx
063b9aaa mov       0x98(%rsp),%rax
063b9ab2 mov       %rax,0xE0(%rsp)
063b9aba mov       0x10(%rcx),%rcx
063b9abe movb      $1,(%rcx)
063b9ac1 add       $1,%rax
063b9ac5 mov       %rax,0x58(%rsp)
063b9aca setb      %al
063b9acd test      $1,%al
063b9acf jne       0x0000`0000`063B`9AE0
063b9ad1 mov       0x58(%rsp),%rax
063b9ad6 mov       %rax,0x88(%rsp)
063b9ade jmp       0x0000`0000`063B`9AFA
063b9ae0 lea       0x63C`E220,%rcx
063b9ae7 lea       0x63C`F100,%r8
063b9aee mov       $0x1C,%edx
063b9af3 call      0x0000`0000`063B`8E30
063b9af8 ud2
063b9afa mov       0x68(%rsp),%rax
063b9aff mov       (%rax),%rcx
063b9b02 mov       %rcx,0x38(%rsp)
063b9b07 mov       8(%rax),%rax
063b9b0b mov       %rax,0x40(%rsp)
063b9b10 mov       0x70(%rsp),%rcx
063b9b15 mov       0x78(%rsp),%rdx
063b9b1a mov       0x88(%rsp),%rax
063b9b22 mov       %rax,0xA8(%rsp)
063b9b2a mov       0xA8(%rsp),%r8
063b9b32 lea       0x63C`F118,%r9
063b9b39 call      0x0000`0000`063C`4CC0
063b9b3e mov       %rax,0x48(%rsp)
063b9b43 mov       %rdx,0x50(%rsp)
063b9b48 mov       0x40(%rsp),%rax
063b9b4d mov       0x50(%rsp),%r8
063b9b52 mov       0x48(%rsp),%rdx
063b9b57 mov       0x38(%rsp),%rcx
063b9b5c callq     *0x18(%rax)
063b9b5f mov       %al,0x37(%rsp)
063b9b63 mov       0x37(%rsp),%cl
063b9b67 and       $1,%cl
063b9b6a call      0x0000`0000`063B`96F0
063b9b6f and       $1,%al
063b9b71 mov       %al,0xA7(%rsp)
063b9b78 movzbl    0xA7(%rsp),%eax
063b9b80 test      $1,%al
063b9b82 je        0x0000`0000`063B`9B8A
063b9b84 jmp       0x0000`0000`063B`9B86
063b9b86 jmp       0x0000`0000`063B`9BC4
063b9b88 ud2
063b9b8a mov       0x70(%rsp),%rcx
063b9b8f mov       0x78(%rsp),%rdx
063b9b94 mov       0x88(%rsp),%rax
063b9b9c mov       %rax,0xB0(%rsp)
063b9ba4 mov       0xB0(%rsp),%r8
063b9bac lea       0x63C`F148,%r9
063b9bb3 call      0x0000`0000`063C`4C10
063b9bb8 mov       %rax,0x20(%rsp)
063b9bbd mov       %rdx,0x28(%rsp)
063b9bc2 jmp       0x0000`0000`063B`9BDE
063b9bc4 lea       0x63C`F130,%rcx
063b9bcb call      0x0000`0000`063B`9770
063b9bd0 and       $1,%al
063b9bd2 mov       %al,0x86(%rsp)
063b9bd9 jmp       0x0000`0000`063B`9A59
063b9bde mov       0x28(%rsp),%rax
063b9be3 mov       0x20(%rsp),%rcx
063b9be8 mov       %rcx,0x70(%rsp)
063b9bed mov       %rax,0x78(%rsp)
063b9bf2 jmp       0x0000`0000`063B`999E

core::fmt::builders::debug_struct_new:
063b9c00 sub       $0x78,%rsp
063b9c04 mov       %r9,0x28(%rsp)
063b9c09 mov       %r8,%rax
063b9c0c mov       0x28(%rsp),%r8
063b9c11 mov       %rax,0x30(%rsp)
063b9c16 mov       %rdx,%rax
063b9c19 mov       0x30(%rsp),%rdx
063b9c1e mov       %rax,0x38(%rsp)
063b9c23 mov       %rcx,%rax
063b9c26 mov       0x38(%rsp),%rcx
063b9c2b mov       %rax,0x40(%rsp)
063b9c30 mov       %rax,0x48(%rsp)
063b9c35 mov       %rcx,0x58(%rsp)
063b9c3a mov       %rdx,0x60(%rsp)
063b9c3f mov       %r8,0x68(%rsp)
063b9c44 call      0x0000`0000`063B`FA50
063b9c49 mov       %al,0x57(%rsp)
063b9c4d and       $1,%al
063b9c4f mov       %al,0x77(%rsp)
063b9c53 mov       0x48(%rsp),%rax
063b9c58 mov       0x40(%rsp),%rcx
063b9c5d mov       0x57(%rsp),%dl
063b9c61 mov       0x38(%rsp),%r8
063b9c66 mov       %r8,(%rcx)
063b9c69 and       $1,%dl
063b9c6c mov       %dl,8(%rcx)
063b9c6f movb      $0,9(%rcx)
063b9c73 add       $0x78,%rsp
063b9c77 ret

core::fmt::builders::DebugStruct::field:
063b9c80 sub       $0x88,%rsp
063b9c87 mov       %rcx,%r10
063b9c8a mov       %r10,0x28(%rsp)
063b9c8f mov       0xB0(%rsp),%rax
063b9c97 mov       %r10,0x60(%rsp)
063b9c9c mov       %rdx,0x68(%rsp)
063b9ca1 mov       %r8,0x70(%rsp)
063b9ca6 mov       %r9,0x78(%rsp)
063b9cab mov       %rax,0x80(%rsp)
063b9cb3 mov       8(%r10),%cl
063b9cb7 mov       %r10,0x38(%rsp)
063b9cbc mov       %rdx,0x40(%rsp)
063b9cc1 mov       %r8,0x48(%rsp)
063b9cc6 mov       %r9,0x50(%rsp)
063b9ccb mov       %rax,0x58(%rsp)
063b9cd0 lea       0x38(%rsp),%rdx
063b9cd5 and       $1,%cl
063b9cd8 call      0x0000`0000`063B`93E0
063b9cdd mov       %al,0x37(%rsp)
063b9ce1 mov       0x28(%rsp),%rax
063b9ce6 mov       0x37(%rsp),%cl
063b9cea and       $1,%cl
063b9ced mov       %cl,8(%rax)
063b9cf0 movb      $1,9(%rax)
063b9cf4 add       $0x88,%rsp
063b9cfb ret

core::fmt::builders::impl$3::field::closure$0:
063b9d00 sub       $0x158,%rsp
063b9d07 mov       %rcx,0x30(%rsp)
063b9d0c mov       8(%rcx),%rax
063b9d10 mov       %rax,0xC0(%rsp)
063b9d18 mov       0x18(%rcx),%rax
063b9d1c mov       %rax,0xD0(%rsp)
063b9d24 mov       (%rcx),%rcx
063b9d27 call      0x0000`0000`063B`A190
063b9d2c mov       %al,0x3D(%rsp)
063b9d30 mov       0x3D(%rsp),%al
063b9d34 test      $1,%al
063b9d36 jne       0x0000`0000`063B`9D51
063b9d38 jmp       0x0000`0000`063B`9D3A
063b9d3a mov       0x30(%rsp),%rax
063b9d3f mov       (%rax),%rax
063b9d42 testb     $1,9(%rax)
063b9d46 jne       0x0000`0000`063B`9F48
063b9d4c jmp       0x0000`0000`063B`9F2B
063b9d51 mov       0x30(%rsp),%rax
063b9d56 mov       (%rax),%rax
063b9d59 mov       9(%rax),%al
063b9d5c xor       $0xFF,%al
063b9d5e test      $1,%al
063b9d60 jne       0x0000`0000`063B`9D78
063b9d62 movq      $0,0x40(%rsp)
063b9d6b call      0x0000`0000`063B`98C0
063b9d70 and       $1,%al
063b9d72 mov       %al,0x5F(%rsp)
063b9d76 jmp       0x0000`0000`063B`9DDD
063b9d78 mov       0x30(%rsp),%rax
063b9d7d mov       (%rax),%rax
063b9d80 mov       (%rax),%rcx
063b9d83 lea       0x63C`F160,%rdx
063b9d8a mov       $3,%r8d
063b9d90 call      0x0000`0000`063B`FA50
063b9d95 mov       %al,0x2F(%rsp)
063b9d99 mov       0x2F(%rsp),%cl
063b9d9d and       $1,%cl
063b9da0 call      0x0000`0000`063B`96F0
063b9da5 and       $1,%al
063b9da7 mov       %al,0x3F(%rsp)
063b9dab movzbl    0x3F(%rsp),%eax
063b9db0 test      $1,%al
063b9db2 je        0x0000`0000`063B`9D62
063b9db4 jmp       0x0000`0000`063B`9DB6
063b9db6 jmp       0x0000`0000`063B`9DBA
063b9db8 ud2
063b9dba lea       0x63C`F168,%rcx
063b9dc1 call      0x0000`0000`063B`9770
063b9dc6 and       $1,%al
063b9dc8 mov       %al,0x3E(%rsp)
063b9dcc mov       0x3E(%rsp),%al
063b9dd0 and       $1,%al
063b9dd2 movzbl    %al,%eax
063b9dd5 add       $0x158,%rsp
063b9ddc ret
063b9ddd mov       0x30(%rsp),%rax
063b9de2 mov       (%rax),%rax
063b9de5 mov       (%rax),%rdx
063b9de8 lea       0x60(%rsp),%rcx
063b9ded lea       0x40(%rsp),%r8
063b9df2 lea       0x5F(%rsp),%r9
063b9df7 call      0x0000`0000`063B`98E0
063b9dfc mov       0x30(%rsp),%rax
063b9e01 mov       8(%rax),%rdx
063b9e05 mov       0x10(%rax),%r8
063b9e09 lea       0x60(%rsp),%rcx
063b9e0e call      0x0000`0000`063B`FA50
063b9e13 mov       %al,0x2E(%rsp)
063b9e17 mov       0x2E(%rsp),%cl
063b9e1b and       $1,%cl
063b9e1e call      0x0000`0000`063B`96F0
063b9e23 and       $1,%al
063b9e25 mov       %al,0xA5(%rsp)
063b9e2c movzbl    0xA5(%rsp),%eax
063b9e34 test      $1,%al
063b9e36 je        0x0000`0000`063B`9E3E
063b9e38 jmp       0x0000`0000`063B`9E3A
063b9e3a jmp       0x0000`0000`063B`9E5B
063b9e3c ud2
063b9e3e lea       0x60(%rsp),%rcx
063b9e43 lea       0x63C`EEE0,%rdx
063b9e4a mov       $2,%r8d
063b9e50 call      0x0000`0000`063B`FA50
063b9e55 mov       %al,0x2D(%rsp)
063b9e59 jmp       0x0000`0000`063B`9E72
063b9e5b lea       0x63C`F180,%rcx
063b9e62 call      0x0000`0000`063B`9770
063b9e67 and       $1,%al
063b9e69 mov       %al,0x3E(%rsp)
063b9e6d jmp       0x0000`0000`063B`9DCC
063b9e72 mov       0x2D(%rsp),%cl
063b9e76 and       $1,%cl
063b9e79 call      0x0000`0000`063B`96F0
063b9e7e and       $1,%al
063b9e80 mov       %al,0xA6(%rsp)
063b9e87 movzbl    0xA6(%rsp),%eax
063b9e8f test      $1,%al
063b9e91 je        0x0000`0000`063B`9E99
063b9e93 jmp       0x0000`0000`063B`9E95
063b9e95 jmp       0x0000`0000`063B`9EB4
063b9e97 ud2
063b9e99 mov       0x30(%rsp),%rax
063b9e9e mov       0x18(%rax),%rcx
063b9ea2 mov       0x20(%rax),%rax
063b9ea6 lea       0x60(%rsp),%rdx
063b9eab callq     *0x18(%rax)
063b9eae mov       %al,0x2C(%rsp)
063b9eb2 jmp       0x0000`0000`063B`9ECB
063b9eb4 lea       0x63C`F198,%rcx
063b9ebb call      0x0000`0000`063B`9770
063b9ec0 and       $1,%al
063b9ec2 mov       %al,0x3E(%rsp)
063b9ec6 jmp       0x0000`0000`063B`9DCC
063b9ecb mov       0x2C(%rsp),%cl
063b9ecf and       $1,%cl
063b9ed2 call      0x0000`0000`063B`96F0
063b9ed7 and       $1,%al
063b9ed9 mov       %al,0xA7(%rsp)
063b9ee0 movzbl    0xA7(%rsp),%eax
063b9ee8 test      $1,%al
063b9eea je        0x0000`0000`063B`9EF2
063b9eec jmp       0x0000`0000`063B`9EEE
063b9eee jmp       0x0000`0000`063B`9F14
063b9ef0 ud2
063b9ef2 lea       0x60(%rsp),%rcx
063b9ef7 lea       0x63C`F1C8,%rdx
063b9efe mov       $2,%r8d
063b9f04 call      0x0000`0000`063B`FA50
063b9f09 and       $1,%al
063b9f0b mov       %al,0x3E(%rsp)
063b9f0f jmp       0x0000`0000`063B`9DCC
063b9f14 lea       0x63C`F1B0,%rcx
063b9f1b call      0x0000`0000`063B`9770
063b9f20 and       $1,%al
063b9f22 mov       %al,0x3E(%rsp)
063b9f26 jmp       0x0000`0000`063B`9DCC
063b9f2b lea       0x63C`F1CC,%rax
063b9f32 mov       %rax,0xA8(%rsp)
063b9f3a movq      $3,0xB0(%rsp)
063b9f46 jmp       0x0000`0000`063B`9F63
063b9f48 lea       0x63C`F1CA,%rax
063b9f4f mov       %rax,0xA8(%rsp)
063b9f57 movq      $2,0xB0(%rsp)
063b9f63 mov       0x30(%rsp),%rax
063b9f68 mov       (%rax),%rax
063b9f6b mov       (%rax),%rcx
063b9f6e mov       0xA8(%rsp),%rdx
063b9f76 mov       0xB0(%rsp),%r8
063b9f7e call      0x0000`0000`063B`FA50
063b9f83 mov       %al,0x2B(%rsp)
063b9f87 mov       0x2B(%rsp),%cl
063b9f8b and       $1,%cl
063b9f8e call      0x0000`0000`063B`96F0
063b9f93 and       $1,%al
063b9f95 mov       %al,0xBD(%rsp)
063b9f9c movzbl    0xBD(%rsp),%eax
063b9fa4 test      $1,%al
063b9fa6 je        0x0000`0000`063B`9FAE
063b9fa8 jmp       0x0000`0000`063B`9FAA
063b9faa jmp       0x0000`0000`063B`9FCC
063b9fac ud2
063b9fae mov       0x30(%rsp),%rax
063b9fb3 mov       (%rax),%rcx
063b9fb6 mov       (%rcx),%rcx
063b9fb9 mov       8(%rax),%rdx
063b9fbd mov       0x10(%rax),%r8
063b9fc1 call      0x0000`0000`063B`FA50
063b9fc6 mov       %al,0x2A(%rsp)
063b9fca jmp       0x0000`0000`063B`9FE3
063b9fcc lea       0x63C`F1D0,%rcx
063b9fd3 call      0x0000`0000`063B`9770
063b9fd8 and       $1,%al
063b9fda mov       %al,0x3E(%rsp)
063b9fde jmp       0x0000`0000`063B`9DCC
063b9fe3 mov       0x2A(%rsp),%cl
063b9fe7 and       $1,%cl
063b9fea call      0x0000`0000`063B`96F0
063b9fef and       $1,%al
063b9ff1 mov       %al,0xBE(%rsp)
063b9ff8 movzbl    0xBE(%rsp),%eax
063ba000 test      $1,%al
063ba002 je        0x0000`0000`063B`A00A
063ba004 jmp       0x0000`0000`063B`A006
063ba006 jmp       0x0000`0000`063B`A02D
063ba008 ud2
063ba00a mov       0x30(%rsp),%rax
063ba00f mov       (%rax),%rax
063ba012 mov       (%rax),%rcx
063ba015 lea       0x63C`EEE0,%rdx
063ba01c mov       $2,%r8d
063ba022 call      0x0000`0000`063B`FA50
063ba027 mov       %al,0x29(%rsp)
063ba02b jmp       0x0000`0000`063B`A044
063ba02d lea       0x63C`F1E8,%rcx
063ba034 call      0x0000`0000`063B`9770
063ba039 and       $1,%al
063ba03b mov       %al,0x3E(%rsp)
063ba03f jmp       0x0000`0000`063B`9DCC
063ba044 mov       0x29(%rsp),%cl
063ba048 and       $1,%cl
063ba04b call      0x0000`0000`063B`96F0
063ba050 and       $1,%al
063ba052 mov       %al,0xBF(%rsp)
063ba059 movzbl    0xBF(%rsp),%eax
063ba061 test      $1,%al
063ba063 je        0x0000`0000`063B`A06B
063ba065 jmp       0x0000`0000`063B`A067
063ba067 jmp       0x0000`0000`063B`A08C
063ba069 ud2
063ba06b mov       0x30(%rsp),%rdx
063ba070 mov       0x18(%rdx),%rcx
063ba074 mov       0x20(%rdx),%rax
063ba078 mov       (%rdx),%rdx
063ba07b mov       (%rdx),%rdx
063ba07e callq     *0x18(%rax)
063ba081 and       $1,%al
063ba083 mov       %al,0x3E(%rsp)
063ba087 jmp       0x0000`0000`063B`9DCC
063ba08c lea       0x63C`F200,%rcx
063ba093 call      0x0000`0000`063B`9770
063ba098 and       $1,%al
063ba09a mov       %al,0x3E(%rsp)
063ba09e jmp       0x0000`0000`063B`9DCC

core::fmt::builders::DebugStruct::finish:
063ba0b0 sub       $0x48,%rsp
063ba0b4 mov       %rcx,0x30(%rsp)
063ba0b9 mov       %rcx,0x40(%rsp)
063ba0be testb     $1,9(%rcx)
063ba0c2 jne       0x0000`0000`063B`A0D6
063ba0c4 mov       0x30(%rsp),%rax
063ba0c9 mov       8(%rax),%al
063ba0cc and       $1,%al
063ba0ce movzbl    %al,%eax
063ba0d1 add       $0x48,%rsp
063ba0d5 ret
063ba0d6 mov       0x30(%rsp),%rax
063ba0db mov       8(%rax),%cl
063ba0de mov       %rax,0x38(%rsp)
063ba0e3 mov       0x38(%rsp),%rdx
063ba0e8 and       $1,%cl
063ba0eb call      0x0000`0000`063B`9370
063ba0f0 mov       %al,0x2F(%rsp)
063ba0f4 mov       0x30(%rsp),%rax
063ba0f9 mov       0x2F(%rsp),%cl
063ba0fd and       $1,%cl
063ba100 mov       %cl,8(%rax)
063ba103 jmp       0x0000`0000`063B`A0C4

core::fmt::builders::impl$3::finish::closure$0:
063ba110 sub       $0x48,%rsp
063ba114 mov       %rcx,0x28(%rsp)
063ba119 mov       %rcx,0x38(%rsp)
063ba11e call      0x0000`0000`063B`A190
063ba123 mov       %al,0x36(%rsp)
063ba127 mov       0x36(%rsp),%al
063ba12b test      $1,%al
063ba12d jne       0x0000`0000`063B`A153
063ba12f jmp       0x0000`0000`063B`A131
063ba131 mov       0x28(%rsp),%rax
063ba136 mov       (%rax),%rcx
063ba139 lea       0x63C`F219,%rdx
063ba140 mov       $2,%r8d
063ba146 call      0x0000`0000`063B`FA50
063ba14b and       $1,%al
063ba14d mov       %al,0x37(%rsp)
063ba151 jmp       0x0000`0000`063B`A173
063ba153 mov       0x28(%rsp),%rax
063ba158 mov       (%rax),%rcx
063ba15b lea       0x63C`F218,%rdx
063ba162 mov       $1,%r8d
063ba168 call      0x0000`0000`063B`FA50
063ba16d and       $1,%al
063ba16f mov       %al,0x37(%rsp)
063ba173 mov       0x37(%rsp),%al
063ba177 and       $1,%al
063ba179 movzbl    %al,%eax
063ba17c add       $0x48,%rsp
063ba180 ret

core::fmt::builders::DebugStruct::is_pretty:
063ba190 sub       $0x38,%rsp
063ba194 mov       %rcx,0x30(%rsp)
063ba199 mov       (%rcx),%rcx
063ba19c call      0x0000`0000`063B`FB10
063ba1a1 mov       %al,0x2F(%rsp)
063ba1a5 mov       0x2F(%rsp),%al
063ba1a9 and       $1,%al
063ba1ab movzbl    %al,%eax
063ba1ae add       $0x38,%rsp
063ba1b2 ret

core::fmt::builders::debug_tuple_new:
063ba1c0 sub       $0x78,%rsp
063ba1c4 mov       %r9,0x28(%rsp)
063ba1c9 mov       %r8,%rax
063ba1cc mov       0x28(%rsp),%r8
063ba1d1 mov       %rax,0x30(%rsp)
063ba1d6 mov       %rdx,%rax
063ba1d9 mov       0x30(%rsp),%rdx
063ba1de mov       %rax,0x38(%rsp)
063ba1e3 mov       %rcx,%rax
063ba1e6 mov       0x38(%rsp),%rcx
063ba1eb mov       %rax,0x40(%rsp)
063ba1f0 mov       %rax,0x48(%rsp)
063ba1f5 mov       %rcx,0x58(%rsp)
063ba1fa mov       %rdx,0x60(%rsp)
063ba1ff mov       %r8,0x68(%rsp)
063ba204 call      0x0000`0000`063B`FA50
063ba209 mov       %al,0x57(%rsp)
063ba20d and       $1,%al
063ba20f mov       %al,0x77(%rsp)
063ba213 mov       0x28(%rsp),%rdx
063ba218 mov       0x30(%rsp),%rcx
063ba21d call      0x0000`0000`063C`64B0
063ba222 mov       %al,0x27(%rsp)
063ba226 mov       0x48(%rsp),%rax
063ba22b mov       0x40(%rsp),%rcx
063ba230 mov       0x27(%rsp),%dl
063ba234 mov       0x57(%rsp),%r8b
063ba239 mov       0x38(%rsp),%r9
063ba23e mov       %r9,(%rcx)
063ba241 and       $1,%r8b
063ba245 mov       %r8b,0x10(%rcx)
063ba249 movq      $0,8(%rcx)
063ba251 and       $1,%dl
063ba254 mov       %dl,0x11(%rcx)
063ba257 add       $0x78,%rsp
063ba25b ret

core::fmt::builders::DebugTuple::field:
063ba260 sub       $0x68,%rsp
063ba264 mov       %rcx,%rax
063ba267 mov       %rax,0x28(%rsp)
063ba26c mov       %rax,0x50(%rsp)
063ba271 mov       %rdx,0x58(%rsp)
063ba276 mov       %r8,0x60(%rsp)
063ba27b mov       0x10(%rax),%cl
063ba27e mov       %rax,0x38(%rsp)
063ba283 mov       %rdx,0x40(%rsp)
063ba288 mov       %r8,0x48(%rsp)
063ba28d lea       0x38(%rsp),%rdx
063ba292 and       $1,%cl
063ba295 call      0x0000`0000`063B`9460
063ba29a mov       %al,0x37(%rsp)
063ba29e mov       0x28(%rsp),%rax
063ba2a3 mov       0x37(%rsp),%cl
063ba2a7 and       $1,%cl
063ba2aa mov       %cl,0x10(%rax)
063ba2ad mov       8(%rax),%rax
063ba2b1 add       $1,%rax
063ba2b5 mov       %rax,0x20(%rsp)
063ba2ba setb      %al
063ba2bd test      $1,%al
063ba2bf jne       0x0000`0000`063B`A2D4
063ba2c1 mov       0x28(%rsp),%rax
063ba2c6 mov       0x20(%rsp),%rcx
063ba2cb mov       %rcx,8(%rax)
063ba2cf add       $0x68,%rsp
063ba2d3 ret
063ba2d4 lea       0x63C`E220,%rcx
063ba2db lea       0x63C`F220,%r8
063ba2e2 mov       $0x1C,%edx
063ba2e7 call      0x0000`0000`063B`8E30
063ba2ec ud2

core::fmt::builders::impl$4::field::closure$0:
063ba2f0 sub       $0x108,%rsp
063ba2f7 mov       %rcx,0x30(%rsp)
063ba2fc mov       8(%rcx),%rax
063ba300 mov       %rax,0xC0(%rsp)
063ba308 mov       (%rcx),%rcx
063ba30b call      0x0000`0000`063B`A660
063ba310 mov       %al,0x3D(%rsp)
063ba314 mov       0x3D(%rsp),%al
063ba318 test      $1,%al
063ba31a jne       0x0000`0000`063B`A336
063ba31c jmp       0x0000`0000`063B`A31E
063ba31e mov       0x30(%rsp),%rax
063ba323 mov       (%rax),%rax
063ba326 cmpq      $0,8(%rax)
063ba32b je        0x0000`0000`063B`A45A
063ba331 jmp       0x0000`0000`063B`A477
063ba336 mov       0x30(%rsp),%rax
063ba33b mov       (%rax),%rax
063ba33e cmpq      $0,8(%rax)
063ba343 jne       0x0000`0000`063B`A368
063ba345 mov       0x30(%rsp),%rax
063ba34a mov       (%rax),%rax
063ba34d mov       (%rax),%rcx
063ba350 lea       0x63C`F238,%rdx
063ba357 mov       $2,%r8d
063ba35d call      0x0000`0000`063B`FA50
063ba362 mov       %al,0x2F(%rsp)
063ba366 jmp       0x0000`0000`063B`A37E
063ba368 movq      $0,0x40(%rsp)
063ba371 call      0x0000`0000`063B`98C0
063ba376 and       $1,%al
063ba378 mov       %al,0x5F(%rsp)
063ba37c jmp       0x0000`0000`063B`A3C2
063ba37e mov       0x2F(%rsp),%cl
063ba382 and       $1,%cl
063ba385 call      0x0000`0000`063B`96F0
063ba38a and       $1,%al
063ba38c mov       %al,0x3F(%rsp)
063ba390 movzbl    0x3F(%rsp),%eax
063ba395 test      $1,%al
063ba397 je        0x0000`0000`063B`A368
063ba399 jmp       0x0000`0000`063B`A39B
063ba39b jmp       0x0000`0000`063B`A39F
063ba39d ud2
063ba39f lea       0x63C`F240,%rcx
063ba3a6 call      0x0000`0000`063B`9770
063ba3ab and       $1,%al
063ba3ad mov       %al,0x3E(%rsp)
063ba3b1 mov       0x3E(%rsp),%al
063ba3b5 and       $1,%al
063ba3b7 movzbl    %al,%eax
063ba3ba add       $0x108,%rsp
063ba3c1 ret
063ba3c2 mov       0x30(%rsp),%rax
063ba3c7 mov       (%rax),%rax
063ba3ca mov       (%rax),%rdx
063ba3cd lea       0x60(%rsp),%rcx
063ba3d2 lea       0x40(%rsp),%r8
063ba3d7 lea       0x5F(%rsp),%r9
063ba3dc call      0x0000`0000`063B`98E0
063ba3e1 mov       0x30(%rsp),%rax
063ba3e6 mov       8(%rax),%rcx
063ba3ea mov       0x10(%rax),%rax
063ba3ee lea       0x60(%rsp),%rdx
063ba3f3 callq     *0x18(%rax)
063ba3f6 mov       %al,0x2E(%rsp)
063ba3fa mov       0x2E(%rsp),%cl
063ba3fe and       $1,%cl
063ba401 call      0x0000`0000`063B`96F0
063ba406 and       $1,%al
063ba408 mov       %al,0xA7(%rsp)
063ba40f movzbl    0xA7(%rsp),%eax
063ba417 test      $1,%al
063ba419 je        0x0000`0000`063B`A421
063ba41b jmp       0x0000`0000`063B`A41D
063ba41d jmp       0x0000`0000`063B`A443
063ba41f ud2
063ba421 lea       0x60(%rsp),%rcx
063ba426 lea       0x63C`F1C8,%rdx
063ba42d mov       $2,%r8d
063ba433 call      0x0000`0000`063B`FA50
063ba438 and       $1,%al
063ba43a mov       %al,0x3E(%rsp)
063ba43e jmp       0x0000`0000`063B`A3B1
063ba443 lea       0x63C`F258,%rcx
063ba44a call      0x0000`0000`063B`9770
063ba44f and       $1,%al
063ba451 mov       %al,0x3E(%rsp)
063ba455 jmp       0x0000`0000`063B`A3B1
063ba45a lea       0x63C`F270,%rax
063ba461 mov       %rax,0xA8(%rsp)
063ba469 movq      $1,0xB0(%rsp)
063ba475 jmp       0x0000`0000`063B`A492
063ba477 lea       0x63C`F1CA,%rax
063ba47e mov       %rax,0xA8(%rsp)
063ba486 movq      $2,0xB0(%rsp)
063ba492 mov       0x30(%rsp),%rax
063ba497 mov       (%rax),%rax
063ba49a mov       (%rax),%rcx
063ba49d mov       0xA8(%rsp),%rdx
063ba4a5 mov       0xB0(%rsp),%r8
063ba4ad call      0x0000`0000`063B`FA50
063ba4b2 mov       %al,0x2D(%rsp)
063ba4b6 mov       0x2D(%rsp),%cl
063ba4ba and       $1,%cl
063ba4bd call      0x0000`0000`063B`96F0
063ba4c2 and       $1,%al
063ba4c4 mov       %al,0xBF(%rsp)
063ba4cb movzbl    0xBF(%rsp),%eax
063ba4d3 test      $1,%al
063ba4d5 je        0x0000`0000`063B`A4DD
063ba4d7 jmp       0x0000`0000`063B`A4D9
063ba4d9 jmp       0x0000`0000`063B`A4FE
063ba4db ud2
063ba4dd mov       0x30(%rsp),%rdx
063ba4e2 mov       8(%rdx),%rcx
063ba4e6 mov       0x10(%rdx),%rax
063ba4ea mov       (%rdx),%rdx
063ba4ed mov       (%rdx),%rdx
063ba4f0 callq     *0x18(%rax)
063ba4f3 and       $1,%al
063ba4f5 mov       %al,0x3E(%rsp)
063ba4f9 jmp       0x0000`0000`063B`A3B1
063ba4fe lea       0x63C`F278,%rcx
063ba505 call      0x0000`0000`063B`9770
063ba50a and       $1,%al
063ba50c mov       %al,0x3E(%rsp)
063ba510 jmp       0x0000`0000`063B`A3B1

core::fmt::builders::DebugTuple::finish:
063ba520 sub       $0x48,%rsp
063ba524 mov       %rcx,0x30(%rsp)
063ba529 mov       %rcx,0x40(%rsp)
063ba52e cmpq      $0,8(%rcx)
063ba533 ja        0x0000`0000`063B`A547
063ba535 mov       0x30(%rsp),%rax
063ba53a mov       0x10(%rax),%al
063ba53d and       $1,%al
063ba53f movzbl    %al,%eax
063ba542 add       $0x48,%rsp
063ba546 ret
063ba547 mov       0x30(%rsp),%rax
063ba54c mov       0x10(%rax),%cl
063ba54f mov       %rax,0x38(%rsp)
063ba554 mov       0x38(%rsp),%rdx
063ba559 and       $1,%cl
063ba55c call      0x0000`0000`063B`94E0
063ba561 mov       %al,0x2F(%rsp)
063ba565 mov       0x30(%rsp),%rax
063ba56a mov       0x2F(%rsp),%cl
063ba56e and       $1,%cl
063ba571 mov       %cl,0x10(%rax)
063ba574 jmp       0x0000`0000`063B`A535

core::fmt::builders::impl$4::finish::closure$0:
063ba580 sub       $0x58,%rsp
063ba584 mov       %rcx,0x28(%rsp)
063ba589 mov       %rcx,0x38(%rsp)
063ba58e cmpq      $1,8(%rcx)
063ba593 jne       0x0000`0000`063B`A5A5
063ba595 mov       0x28(%rsp),%rax
063ba59a mov       0x11(%rax),%al
063ba59d and       $1,%al
063ba59f mov       %al,0x36(%rsp)
063ba5a3 jmp       0x0000`0000`063B`A5AA
063ba5a5 movb      $0,0x36(%rsp)
063ba5aa testb     $1,0x36(%rsp)
063ba5af jne       0x0000`0000`063B`A5B8
063ba5b1 movb      $0,0x35(%rsp)
063ba5b6 jmp       0x0000`0000`063B`A5D2
063ba5b8 mov       0x28(%rsp),%rcx
063ba5bd call      0x0000`0000`063B`A660
063ba5c2 mov       %al,0x27(%rsp)
063ba5c6 mov       0x27(%rsp),%al
063ba5ca xor       $0xFF,%al
063ba5cc and       $1,%al
063ba5ce mov       %al,0x35(%rsp)
063ba5d2 testb     $1,0x35(%rsp)
063ba5d7 jne       0x0000`0000`063B`A5FB
063ba5d9 mov       0x28(%rsp),%rax
063ba5de mov       (%rax),%rcx
063ba5e1 lea       0x63C`F2B0,%rdx
063ba5e8 mov       $1,%r8d
063ba5ee call      0x0000`0000`063B`FA50
063ba5f3 and       $1,%al
063ba5f5 mov       %al,0x34(%rsp)
063ba5f9 jmp       0x0000`0000`063B`A64C
063ba5fb mov       0x28(%rsp),%rax
063ba600 mov       (%rax),%rcx
063ba603 lea       0x63C`F290,%rdx
063ba60a mov       $1,%r8d
063ba610 call      0x0000`0000`063B`FA50
063ba615 mov       %al,0x26(%rsp)
063ba619 mov       0x26(%rsp),%cl
063ba61d and       $1,%cl
063ba620 call      0x0000`0000`063B`96F0
063ba625 and       $1,%al
063ba627 mov       %al,0x37(%rsp)
063ba62b movzbl    0x37(%rsp),%eax
063ba630 test      $1,%al
063ba632 je        0x0000`0000`063B`A5D9
063ba634 jmp       0x0000`0000`063B`A636
063ba636 jmp       0x0000`0000`063B`A63A
063ba638 ud2
063ba63a lea       0x63C`F298,%rcx
063ba641 call      0x0000`0000`063B`9770
063ba646 and       $1,%al
063ba648 mov       %al,0x34(%rsp)
063ba64c mov       0x34(%rsp),%al
063ba650 and       $1,%al
063ba652 movzbl    %al,%eax
063ba655 add       $0x58,%rsp
063ba659 ret

core::fmt::builders::DebugTuple::is_pretty:
063ba660 sub       $0x38,%rsp
063ba664 mov       %rcx,0x30(%rsp)
063ba669 mov       (%rcx),%rcx
063ba66c call      0x0000`0000`063B`FB10
063ba671 mov       %al,0x2F(%rsp)
063ba675 mov       0x2F(%rsp),%al
063ba679 and       $1,%al
063ba67b movzbl    %al,%eax
063ba67e add       $0x38,%rsp
063ba682 ret

core::fmt::num::GenericRadix::fmt_int<core::fmt::num::UpperHex,u32>:
063ba690 sub       $0x2A8,%rsp
063ba697 mov       %r8,0x128(%rsp)
063ba69f mov       %edx,0x130(%rsp)
063ba6a6 mov       %rcx,0x208(%rsp)
063ba6ae mov       %r8,0x210(%rsp)
063ba6b6 call      0x0000`0000`063C`7860
063ba6bb mov       %eax,0x134(%rsp)
063ba6c2 lea       0x130(%rsp),%rcx
063ba6ca lea       0x134(%rsp),%rdx
063ba6d2 call      0x0000`0000`063C`74A0
063ba6d7 mov       %al,0x127(%rsp)
063ba6de and       $1,%al
063ba6e0 mov       %al,0x21B(%rsp)
063ba6e7 mov       0x257(%rsp),%al
063ba6ee mov       %al,0x126(%rsp)
063ba6f5 mov       0x126(%rsp),%dl
063ba6fc lea       0x138(%rsp),%rcx
063ba704 mov       $0x80,%r8d
063ba70a call      0x0000`0000`063C`AB00
063ba70f movq      $0x80,0x1B8(%rsp)
063ba71b mov       $0x10,%ecx
063ba720 call      0x0000`0000`063C`7870
063ba725 mov       %eax,0x120(%rsp)
063ba72c mov       %eax,0x21C(%rsp)
063ba733 mov       0x127(%rsp),%al
063ba73a test      $1,%al
063ba73c jne       0x0000`0000`063B`A767
063ba73e jmp       0x0000`0000`063B`A740
063ba740 lea       0x138(%rsp),%rcx
063ba748 mov       $0x80,%edx
063ba74d call      0x0000`0000`063C`2DC0
063ba752 mov       %rax,0x110(%rsp)
063ba75a mov       %rdx,0x118(%rsp)
063ba762 jmp       0x0000`0000`063B`A9B4
063ba767 lea       0x138(%rsp),%rcx
063ba76f mov       $0x80,%edx
063ba774 call      0x0000`0000`063C`2DC0
063ba779 mov       %rax,0x100(%rsp)
063ba781 mov       %rdx,0x108(%rsp)
063ba789 mov       0x108(%rsp),%rdx
063ba791 mov       0x100(%rsp),%rcx
063ba799 call      0x0000`0000`063B`82B0
063ba79e mov       %rax,0xF0(%rsp)
063ba7a6 mov       %rdx,0xF8(%rsp)
063ba7ae mov       0xF8(%rsp),%rdx
063ba7b6 mov       0xF0(%rsp),%rcx
063ba7be call      0x0000`0000`063B`7F10
063ba7c3 mov       %rax,0xE0(%rsp)
063ba7cb mov       %rdx,0xE8(%rsp)
063ba7d3 mov       0xE8(%rsp),%rax
063ba7db mov       0xE0(%rsp),%rcx
063ba7e3 mov       %rcx,0x1C0(%rsp)
063ba7eb mov       %rax,0x1C8(%rsp)
063ba7f3 lea       0x1C0(%rsp),%rcx
063ba7fb call      0x0000`0000`063B`7DC0
063ba800 mov       %rax,0x1D0(%rsp)
063ba808 mov       0x1D0(%rsp),%rax
063ba810 test      %rax,%rax
063ba813 setne     %al
063ba816 movzbl    %al,%eax
063ba819 je        0x0000`0000`063B`A821
063ba81b jmp       0x0000`0000`063B`A81D
063ba81d jmp       0x0000`0000`063B`A862
063ba81f ud2
063ba821 mov       0x1B8(%rsp),%rax
063ba829 mov       %rax,0x200(%rsp)
063ba831 mov       0x200(%rsp),%rdx
063ba839 lea       0x138(%rsp),%rcx
063ba841 lea       0x63C`F358,%r8
063ba848 call      0x0000`0000`063B`6AD0
063ba84d mov       %rax,0xD0(%rsp)
063ba855 mov       %rdx,0xD8(%rsp)
063ba85d jmp       0x0000`0000`063B`ABAC
063ba862 mov       0x120(%rsp),%edx
063ba869 mov       0x1D0(%rsp),%rax
063ba871 mov       %rax,0xC8(%rsp)
063ba879 mov       %rax,0x220(%rsp)
063ba881 mov       0x130(%rsp),%ecx
063ba888 call      0x0000`0000`063C`76B0
063ba88d mov       %eax,0x1DC(%rsp)
063ba894 mov       0x120(%rsp),%edx
063ba89b mov       0x130(%rsp),%ecx
063ba8a2 call      0x0000`0000`063C`7600
063ba8a7 mov       %eax,0xC4(%rsp)
063ba8ae mov       0xC4(%rsp),%eax
063ba8b5 mov       %eax,0x130(%rsp)
063ba8bc lea       0x1DC(%rsp),%rcx
063ba8c4 call      0x0000`0000`063C`7880
063ba8c9 mov       %al,0xC3(%rsp)
063ba8d0 mov       0xC3(%rsp),%cl
063ba8d7 call      0x0000`0000`063C`7A70
063ba8dc mov       %al,0xC2(%rsp)
063ba8e3 mov       0xC8(%rsp),%rax
063ba8eb mov       0xC2(%rsp),%cl
063ba8f2 mov       %rax,0x268(%rsp)
063ba8fa mov       %cl,0x273(%rsp)
063ba901 mov       %cl,0x275(%rsp)
063ba908 mov       %cl,0x277(%rsp)
063ba90f mov       %cl,0x276(%rsp)
063ba916 mov       0x276(%rsp),%cl
063ba91d mov       %cl,0x274(%rsp)
063ba924 mov       0x274(%rsp),%cl
063ba92b mov       %cl,(%rax)
063ba92d mov       %rax,0x278(%rsp)
063ba935 mov       %rax,0x280(%rsp)
063ba93d mov       0x1B8(%rsp),%rax
063ba945 sub       $1,%rax
063ba949 mov       %rax,0xB8(%rsp)
063ba951 setb      %al
063ba954 test      $1,%al
063ba956 jne       0x0000`0000`063B`A986
063ba958 mov       0xB8(%rsp),%rax
063ba960 mov       %rax,0x1B8(%rsp)
063ba968 lea       0x130(%rsp),%rcx
063ba970 lea       0x134(%rsp),%rdx
063ba978 call      0x0000`0000`063C`73F0
063ba97d mov       %al,0xB7(%rsp)
063ba984 jmp       0x0000`0000`063B`A9A0
063ba986 lea       0x63C`E1F0,%rcx
063ba98d lea       0x63C`F328,%r8
063ba994 mov       $0x21,%edx
063ba999 call      0x0000`0000`063B`8E30
063ba99e ud2
063ba9a0 mov       0xB7(%rsp),%al
063ba9a7 test      $1,%al
063ba9a9 jne       0x0000`0000`063B`A821
063ba9af jmp       0x0000`0000`063B`A7F3
063ba9b4 mov       0x118(%rsp),%rdx
063ba9bc mov       0x110(%rsp),%rcx
063ba9c4 call      0x0000`0000`063B`82B0
063ba9c9 mov       %rax,0xA0(%rsp)
063ba9d1 mov       %rdx,0xA8(%rsp)
063ba9d9 mov       0xA8(%rsp),%rdx
063ba9e1 mov       0xA0(%rsp),%rcx
063ba9e9 call      0x0000`0000`063B`7F10
063ba9ee mov       %rax,0x90(%rsp)
063ba9f6 mov       %rdx,0x98(%rsp)
063ba9fe mov       0x98(%rsp),%rax
063baa06 mov       0x90(%rsp),%rcx
063baa0e mov       %rcx,0x1E0(%rsp)
063baa16 mov       %rax,0x1E8(%rsp)
063baa1e lea       0x1E0(%rsp),%rcx
063baa26 call      0x0000`0000`063B`7DC0
063baa2b mov       %rax,0x1F0(%rsp)
063baa33 mov       0x1F0(%rsp),%rax
063baa3b test      %rax,%rax
063baa3e setne     %al
063baa41 movzbl    %al,%eax
063baa44 je        0x0000`0000`063B`A821
063baa4a jmp       0x0000`0000`063B`AA4C
063baa4c jmp       0x0000`0000`063B`AA50
063baa4e ud2
063baa50 mov       0x120(%rsp),%edx
063baa57 mov       0x1F0(%rsp),%rax
063baa5f mov       %rax,0x80(%rsp)
063baa67 mov       %rax,0x228(%rsp)
063baa6f mov       0x134(%rsp),%eax
063baa76 mov       %eax,0x88(%rsp)
063baa7d mov       0x130(%rsp),%ecx
063baa84 call      0x0000`0000`063C`76B0
063baa89 mov       %eax,0x8C(%rsp)
063baa90 mov       0x8C(%rsp),%edx
063baa97 mov       0x88(%rsp),%ecx
063baa9e call      0x0000`0000`063C`7560
063baaa3 mov       %eax,0x1FC(%rsp)
063baaaa mov       0x120(%rsp),%edx
063baab1 mov       0x130(%rsp),%ecx
063baab8 call      0x0000`0000`063C`7600
063baabd mov       %eax,0x7C(%rsp)
063baac1 mov       0x7C(%rsp),%eax
063baac5 mov       %eax,0x130(%rsp)
063baacc lea       0x1FC(%rsp),%rcx
063baad4 call      0x0000`0000`063C`7880
063baad9 mov       %al,0x7B(%rsp)
063baadd mov       0x7B(%rsp),%cl
063baae1 call      0x0000`0000`063C`7A70
063baae6 mov       %al,0x7A(%rsp)
063baaea mov       0x80(%rsp),%rax
063baaf2 mov       0x7A(%rsp),%cl
063baaf6 mov       %rax,0x258(%rsp)
063baafe mov       %cl,0x263(%rsp)
063bab05 mov       %cl,0x265(%rsp)
063bab0c mov       %cl,0x267(%rsp)
063bab13 mov       %cl,0x266(%rsp)
063bab1a mov       0x266(%rsp),%cl
063bab21 mov       %cl,0x264(%rsp)
063bab28 mov       0x264(%rsp),%cl
063bab2f mov       %cl,(%rax)
063bab31 mov       %rax,0x288(%rsp)
063bab39 mov       %rax,0x290(%rsp)
063bab41 mov       0x1B8(%rsp),%rax
063bab49 sub       $1,%rax
063bab4d mov       %rax,0x70(%rsp)
063bab52 setb      %al
063bab55 test      $1,%al
063bab57 jne       0x0000`0000`063B`AB81
063bab59 mov       0x70(%rsp),%rax
063bab5e mov       %rax,0x1B8(%rsp)
063bab66 lea       0x130(%rsp),%rcx
063bab6e lea       0x134(%rsp),%rdx
063bab76 call      0x0000`0000`063C`73F0
063bab7b mov       %al,0x6F(%rsp)
063bab7f jmp       0x0000`0000`063B`AB9B
063bab81 lea       0x63C`E1F0,%rcx
063bab88 lea       0x63C`F340,%r8
063bab8f mov       $0x21,%edx
063bab94 call      0x0000`0000`063B`8E30
063bab99 ud2
063bab9b mov       0x6F(%rsp),%al
063bab9f test      $1,%al
063baba1 jne       0x0000`0000`063B`A821
063baba7 jmp       0x0000`0000`063B`AA1E
063babac mov       0xD8(%rsp),%rdx
063babb4 mov       0xD0(%rsp),%rcx
063babbc mov       %rcx,0x230(%rsp)
063babc4 mov       %rdx,0x238(%rsp)
063babcc mov       %rcx,0x298(%rsp)
063babd4 mov       %rdx,0x2A0(%rsp)
063babdc call      0x0000`0000`063C`2C00
063babe1 mov       %rax,0x60(%rsp)
063babe6 mov       0xD8(%rsp),%rdx
063babee mov       0x60(%rsp),%rcx
063babf3 call      0x0000`0000`063C`24E0
063babf8 mov       %rax,0x50(%rsp)
063babfd mov       %rdx,0x58(%rsp)
063bac02 mov       0x58(%rsp),%rdx
063bac07 mov       0x50(%rsp),%rcx
063bac0c call      0x0000`0000`063C`3F70
063bac11 mov       %rax,0x40(%rsp)
063bac16 mov       %rdx,0x48(%rsp)
063bac1b mov       %rax,0x240(%rsp)
063bac23 mov       %rdx,0x248(%rsp)
063bac2b mov       0x128(%rsp),%rcx
063bac33 mov       0x127(%rsp),%dl
063bac3a mov       0x40(%rsp),%r8
063bac3f mov       0x48(%rsp),%r9
063bac44 mov       %rsp,%rax
063bac47 mov       %r9,0x28(%rax)
063bac4b mov       %r8,0x20(%rax)
063bac4f and       $1,%dl
063bac52 lea       0x63C`F370,%r8
063bac59 mov       $2,%r9d
063bac5f call      0x0000`0000`063B`E9D0
063bac64 mov       %al,0x3F(%rsp)
063bac68 mov       0x3F(%rsp),%al
063bac6c and       $1,%al
063bac6e movzbl    %al,%eax
063bac71 add       $0x2A8,%rsp
063bac78 ret

core::fmt::num::GenericRadix::fmt_int<core::fmt::num::UpperHex,usize>:
063bac80 sub       $0x2D8,%rsp
063bac87 mov       %r8,0x148(%rsp)
063bac8f mov       %rdx,0x150(%rsp)
063bac97 mov       %rcx,0x230(%rsp)
063bac9f mov       %r8,0x238(%rsp)
063baca7 call      0x0000`0000`063C`78A0
063bacac mov       %rax,0x158(%rsp)
063bacb4 lea       0x150(%rsp),%rcx
063bacbc lea       0x158(%rsp),%rdx
063bacc4 call      0x0000`0000`063C`7430
063bacc9 mov       %al,0x147(%rsp)
063bacd0 and       $1,%al
063bacd2 mov       %al,0x247(%rsp)
063bacd9 mov       0x287(%rsp),%al
063bace0 mov       %al,0x146(%rsp)
063bace7 mov       0x146(%rsp),%dl
063bacee lea       0x160(%rsp),%rcx
063bacf6 mov       $0x80,%r8d
063bacfc call      0x0000`0000`063C`AB00
063bad01 movq      $0x80,0x1E0(%rsp)
063bad0d mov       $0x10,%ecx
063bad12 call      0x0000`0000`063C`78B0
063bad17 mov       %rax,0x138(%rsp)
063bad1f mov       %rax,0x248(%rsp)
063bad27 mov       0x147(%rsp),%al
063bad2e test      $1,%al
063bad30 jne       0x0000`0000`063B`AD5B
063bad32 jmp       0x0000`0000`063B`AD34
063bad34 lea       0x160(%rsp),%rcx
063bad3c mov       $0x80,%edx
063bad41 call      0x0000`0000`063C`2DC0
063bad46 mov       %rax,0x128(%rsp)
063bad4e mov       %rdx,0x130(%rsp)
063bad56 jmp       0x0000`0000`063B`AFB0
063bad5b lea       0x160(%rsp),%rcx
063bad63 mov       $0x80,%edx
063bad68 call      0x0000`0000`063C`2DC0
063bad6d mov       %rax,0x118(%rsp)
063bad75 mov       %rdx,0x120(%rsp)
063bad7d mov       0x120(%rsp),%rdx
063bad85 mov       0x118(%rsp),%rcx
063bad8d call      0x0000`0000`063B`82B0
063bad92 mov       %rax,0x108(%rsp)
063bad9a mov       %rdx,0x110(%rsp)
063bada2 mov       0x110(%rsp),%rdx
063badaa mov       0x108(%rsp),%rcx
063badb2 call      0x0000`0000`063B`7F10
063badb7 mov       %rax,0xF8(%rsp)
063badbf mov       %rdx,0x100(%rsp)
063badc7 mov       0x100(%rsp),%rax
063badcf mov       0xF8(%rsp),%rcx
063badd7 mov       %rcx,0x1E8(%rsp)
063baddf mov       %rax,0x1F0(%rsp)
063bade7 lea       0x1E8(%rsp),%rcx
063badef call      0x0000`0000`063B`7DC0
063badf4 mov       %rax,0x1F8(%rsp)
063badfc mov       0x1F8(%rsp),%rax
063bae04 test      %rax,%rax
063bae07 setne     %al
063bae0a movzbl    %al,%eax
063bae0d je        0x0000`0000`063B`AE15
063bae0f jmp       0x0000`0000`063B`AE11
063bae11 jmp       0x0000`0000`063B`AE56
063bae13 ud2
063bae15 mov       0x1E0(%rsp),%rax
063bae1d mov       %rax,0x228(%rsp)
063bae25 mov       0x228(%rsp),%rdx
063bae2d lea       0x160(%rsp),%rcx
063bae35 lea       0x63C`F358,%r8
063bae3c call      0x0000`0000`063B`6AD0
063bae41 mov       %rax,0xE8(%rsp)
063bae49 mov       %rdx,0xF0(%rsp)
063bae51 jmp       0x0000`0000`063B`B1BB
063bae56 mov       0x138(%rsp),%rdx
063bae5e mov       0x1F8(%rsp),%rax
063bae66 mov       %rax,0xE0(%rsp)
063bae6e mov       %rax,0x250(%rsp)
063bae76 mov       0x150(%rsp),%rcx
063bae7e call      0x0000`0000`063C`7650
063bae83 mov       %rax,0x200(%rsp)
063bae8b mov       0x138(%rsp),%rdx
063bae93 mov       0x150(%rsp),%rcx
063bae9b call      0x0000`0000`063C`75A0
063baea0 mov       %rax,0xD8(%rsp)
063baea8 mov       0xD8(%rsp),%rax
063baeb0 mov       %rax,0x150(%rsp)
063baeb8 lea       0x200(%rsp),%rcx
063baec0 call      0x0000`0000`063C`78C0
063baec5 mov       %al,0xD7(%rsp)
063baecc mov       0xD7(%rsp),%cl
063baed3 call      0x0000`0000`063C`7A70
063baed8 mov       %al,0xD6(%rsp)
063baedf mov       0xE0(%rsp),%rax
063baee7 mov       0xD6(%rsp),%cl
063baeee mov       %rax,0x298(%rsp)
063baef6 mov       %cl,0x2A3(%rsp)
063baefd mov       %cl,0x2A5(%rsp)
063baf04 mov       %cl,0x2A7(%rsp)
063baf0b mov       %cl,0x2A6(%rsp)
063baf12 mov       0x2A6(%rsp),%cl
063baf19 mov       %cl,0x2A4(%rsp)
063baf20 mov       0x2A4(%rsp),%cl
063baf27 mov       %cl,(%rax)
063baf29 mov       %rax,0x2A8(%rsp)
063baf31 mov       %rax,0x2B0(%rsp)
063baf39 mov       0x1E0(%rsp),%rax
063baf41 sub       $1,%rax
063baf45 mov       %rax,0xC8(%rsp)
063baf4d setb      %al
063baf50 test      $1,%al
063baf52 jne       0x0000`0000`063B`AF82
063baf54 mov       0xC8(%rsp),%rax
063baf5c mov       %rax,0x1E0(%rsp)
063baf64 lea       0x150(%rsp),%rcx
063baf6c lea       0x158(%rsp),%rdx
063baf74 call      0x0000`0000`063C`73D0
063baf79 mov       %al,0xC7(%rsp)
063baf80 jmp       0x0000`0000`063B`AF9C
063baf82 lea       0x63C`E1F0,%rcx
063baf89 lea       0x63C`F328,%r8
063baf90 mov       $0x21,%edx
063baf95 call      0x0000`0000`063B`8E30
063baf9a ud2
063baf9c mov       0xC7(%rsp),%al
063bafa3 test      $1,%al
063bafa5 jne       0x0000`0000`063B`AE15
063bafab jmp       0x0000`0000`063B`ADE7
063bafb0 mov       0x130(%rsp),%rdx
063bafb8 mov       0x128(%rsp),%rcx
063bafc0 call      0x0000`0000`063B`82B0
063bafc5 mov       %rax,0xB0(%rsp)
063bafcd mov       %rdx,0xB8(%rsp)
063bafd5 mov       0xB8(%rsp),%rdx
063bafdd mov       0xB0(%rsp),%rcx
063bafe5 call      0x0000`0000`063B`7F10
063bafea mov       %rax,0xA0(%rsp)
063baff2 mov       %rdx,0xA8(%rsp)
063baffa mov       0xA8(%rsp),%rax
063bb002 mov       0xA0(%rsp),%rcx
063bb00a mov       %rcx,0x208(%rsp)
063bb012 mov       %rax,0x210(%rsp)
063bb01a lea       0x208(%rsp),%rcx
063bb022 call      0x0000`0000`063B`7DC0
063bb027 mov       %rax,0x218(%rsp)
063bb02f mov       0x218(%rsp),%rax
063bb037 test      %rax,%rax
063bb03a setne     %al
063bb03d movzbl    %al,%eax
063bb040 je        0x0000`0000`063B`AE15
063bb046 jmp       0x0000`0000`063B`B048
063bb048 jmp       0x0000`0000`063B`B04C
063bb04a ud2
063bb04c mov       0x138(%rsp),%rdx
063bb054 mov       0x218(%rsp),%rax
063bb05c mov       %rax,0x88(%rsp)
063bb064 mov       %rax,0x258(%rsp)
063bb06c mov       0x158(%rsp),%rax
063bb074 mov       %rax,0x90(%rsp)
063bb07c mov       0x150(%rsp),%rcx
063bb084 call      0x0000`0000`063C`7650
063bb089 mov       %rax,0x98(%rsp)
063bb091 mov       0x98(%rsp),%rdx
063bb099 mov       0x90(%rsp),%rcx
063bb0a1 call      0x0000`0000`063C`7510
063bb0a6 mov       %rax,0x220(%rsp)
063bb0ae mov       0x138(%rsp),%rdx
063bb0b6 mov       0x150(%rsp),%rcx
063bb0be call      0x0000`0000`063C`75A0
063bb0c3 mov       %rax,0x80(%rsp)
063bb0cb mov       0x80(%rsp),%rax
063bb0d3 mov       %rax,0x150(%rsp)
063bb0db lea       0x220(%rsp),%rcx
063bb0e3 call      0x0000`0000`063C`78C0
063bb0e8 mov       %al,0x7F(%rsp)
063bb0ec mov       0x7F(%rsp),%cl
063bb0f0 call      0x0000`0000`063C`7A70
063bb0f5 mov       %al,0x7E(%rsp)
063bb0f9 mov       0x88(%rsp),%rax
063bb101 mov       0x7E(%rsp),%cl
063bb105 mov       %rax,0x288(%rsp)
063bb10d mov       %cl,0x293(%rsp)
063bb114 mov       %cl,0x295(%rsp)
063bb11b mov       %cl,0x297(%rsp)
063bb122 mov       %cl,0x296(%rsp)
063bb129 mov       0x296(%rsp),%cl
063bb130 mov       %cl,0x294(%rsp)
063bb137 mov       0x294(%rsp),%cl
063bb13e mov       %cl,(%rax)
063bb140 mov       %rax,0x2B8(%rsp)
063bb148 mov       %rax,0x2C0(%rsp)
063bb150 mov       0x1E0(%rsp),%rax
063bb158 sub       $1,%rax
063bb15c mov       %rax,0x70(%rsp)
063bb161 setb      %al
063bb164 test      $1,%al
063bb166 jne       0x0000`0000`063B`B190
063bb168 mov       0x70(%rsp),%rax
063bb16d mov       %rax,0x1E0(%rsp)
063bb175 lea       0x150(%rsp),%rcx
063bb17d lea       0x158(%rsp),%rdx
063bb185 call      0x0000`0000`063C`73D0
063bb18a mov       %al,0x6F(%rsp)
063bb18e jmp       0x0000`0000`063B`B1AA
063bb190 lea       0x63C`E1F0,%rcx
063bb197 lea       0x63C`F340,%r8
063bb19e mov       $0x21,%edx
063bb1a3 call      0x0000`0000`063B`8E30
063bb1a8 ud2
063bb1aa mov       0x6F(%rsp),%al
063bb1ae test      $1,%al
063bb1b0 jne       0x0000`0000`063B`AE15
063bb1b6 jmp       0x0000`0000`063B`B01A
063bb1bb mov       0xF0(%rsp),%rdx
063bb1c3 mov       0xE8(%rsp),%rcx
063bb1cb mov       %rcx,0x260(%rsp)
063bb1d3 mov       %rdx,0x268(%rsp)
063bb1db mov       %rcx,0x2C8(%rsp)
063bb1e3 mov       %rdx,0x2D0(%rsp)
063bb1eb call      0x0000`0000`063C`2C00
063bb1f0 mov       %rax,0x60(%rsp)
063bb1f5 mov       0xF0(%rsp),%rdx
063bb1fd mov       0x60(%rsp),%rcx
063bb202 call      0x0000`0000`063C`24E0
063bb207 mov       %rax,0x50(%rsp)
063bb20c mov       %rdx,0x58(%rsp)
063bb211 mov       0x58(%rsp),%rdx
063bb216 mov       0x50(%rsp),%rcx
063bb21b call      0x0000`0000`063C`3F70
063bb220 mov       %rax,0x40(%rsp)
063bb225 mov       %rdx,0x48(%rsp)
063bb22a mov       %rax,0x270(%rsp)
063bb232 mov       %rdx,0x278(%rsp)
063bb23a mov       0x148(%rsp),%rcx
063bb242 mov       0x147(%rsp),%dl
063bb249 mov       0x40(%rsp),%r8
063bb24e mov       0x48(%rsp),%r9
063bb253 mov       %rsp,%rax
063bb256 mov       %r9,0x28(%rax)
063bb25a mov       %r8,0x20(%rax)
063bb25e and       $1,%dl
063bb261 lea       0x63C`F370,%r8
063bb268 mov       $2,%r9d
063bb26e call      0x0000`0000`063B`E9D0
063bb273 mov       %al,0x3F(%rsp)
063bb277 mov       0x3F(%rsp),%al
063bb27b and       $1,%al
063bb27d movzbl    %al,%eax
063bb280 add       $0x2D8,%rsp
063bb287 ret

core::fmt::num::GenericRadix::fmt_int<core::fmt::num::LowerHex,usize>:
063bb290 sub       $0x2D8,%rsp
063bb297 mov       %r8,0x148(%rsp)
063bb29f mov       %rdx,0x150(%rsp)
063bb2a7 mov       %rcx,0x230(%rsp)
063bb2af mov       %r8,0x238(%rsp)
063bb2b7 call      0x0000`0000`063C`78A0
063bb2bc mov       %rax,0x158(%rsp)
063bb2c4 lea       0x150(%rsp),%rcx
063bb2cc lea       0x158(%rsp),%rdx
063bb2d4 call      0x0000`0000`063C`7430
063bb2d9 mov       %al,0x147(%rsp)
063bb2e0 and       $1,%al
063bb2e2 mov       %al,0x247(%rsp)
063bb2e9 mov       0x287(%rsp),%al
063bb2f0 mov       %al,0x146(%rsp)
063bb2f7 mov       0x146(%rsp),%dl
063bb2fe lea       0x160(%rsp),%rcx
063bb306 mov       $0x80,%r8d
063bb30c call      0x0000`0000`063C`AB00
063bb311 movq      $0x80,0x1E0(%rsp)
063bb31d mov       $0x10,%ecx
063bb322 call      0x0000`0000`063C`78B0
063bb327 mov       %rax,0x138(%rsp)
063bb32f mov       %rax,0x248(%rsp)
063bb337 mov       0x147(%rsp),%al
063bb33e test      $1,%al
063bb340 jne       0x0000`0000`063B`B36B
063bb342 jmp       0x0000`0000`063B`B344
063bb344 lea       0x160(%rsp),%rcx
063bb34c mov       $0x80,%edx
063bb351 call      0x0000`0000`063C`2DC0
063bb356 mov       %rax,0x128(%rsp)
063bb35e mov       %rdx,0x130(%rsp)
063bb366 jmp       0x0000`0000`063B`B5C0
063bb36b lea       0x160(%rsp),%rcx
063bb373 mov       $0x80,%edx
063bb378 call      0x0000`0000`063C`2DC0
063bb37d mov       %rax,0x118(%rsp)
063bb385 mov       %rdx,0x120(%rsp)
063bb38d mov       0x120(%rsp),%rdx
063bb395 mov       0x118(%rsp),%rcx
063bb39d call      0x0000`0000`063B`82B0
063bb3a2 mov       %rax,0x108(%rsp)
063bb3aa mov       %rdx,0x110(%rsp)
063bb3b2 mov       0x110(%rsp),%rdx
063bb3ba mov       0x108(%rsp),%rcx
063bb3c2 call      0x0000`0000`063B`7F10
063bb3c7 mov       %rax,0xF8(%rsp)
063bb3cf mov       %rdx,0x100(%rsp)
063bb3d7 mov       0x100(%rsp),%rax
063bb3df mov       0xF8(%rsp),%rcx
063bb3e7 mov       %rcx,0x1E8(%rsp)
063bb3ef mov       %rax,0x1F0(%rsp)
063bb3f7 lea       0x1E8(%rsp),%rcx
063bb3ff call      0x0000`0000`063B`7DC0
063bb404 mov       %rax,0x1F8(%rsp)
063bb40c mov       0x1F8(%rsp),%rax
063bb414 test      %rax,%rax
063bb417 setne     %al
063bb41a movzbl    %al,%eax
063bb41d je        0x0000`0000`063B`B425
063bb41f jmp       0x0000`0000`063B`B421
063bb421 jmp       0x0000`0000`063B`B466
063bb423 ud2
063bb425 mov       0x1E0(%rsp),%rax
063bb42d mov       %rax,0x228(%rsp)
063bb435 mov       0x228(%rsp),%rdx
063bb43d lea       0x160(%rsp),%rcx
063bb445 lea       0x63C`F358,%r8
063bb44c call      0x0000`0000`063B`6AD0
063bb451 mov       %rax,0xE8(%rsp)
063bb459 mov       %rdx,0xF0(%rsp)
063bb461 jmp       0x0000`0000`063B`B7CB
063bb466 mov       0x138(%rsp),%rdx
063bb46e mov       0x1F8(%rsp),%rax
063bb476 mov       %rax,0xE0(%rsp)
063bb47e mov       %rax,0x250(%rsp)
063bb486 mov       0x150(%rsp),%rcx
063bb48e call      0x0000`0000`063C`7650
063bb493 mov       %rax,0x200(%rsp)
063bb49b mov       0x138(%rsp),%rdx
063bb4a3 mov       0x150(%rsp),%rcx
063bb4ab call      0x0000`0000`063C`75A0
063bb4b0 mov       %rax,0xD8(%rsp)
063bb4b8 mov       0xD8(%rsp),%rax
063bb4c0 mov       %rax,0x150(%rsp)
063bb4c8 lea       0x200(%rsp),%rcx
063bb4d0 call      0x0000`0000`063C`78C0
063bb4d5 mov       %al,0xD7(%rsp)
063bb4dc mov       0xD7(%rsp),%cl
063bb4e3 call      0x0000`0000`063C`78E0
063bb4e8 mov       %al,0xD6(%rsp)
063bb4ef mov       0xE0(%rsp),%rax
063bb4f7 mov       0xD6(%rsp),%cl
063bb4fe mov       %rax,0x298(%rsp)
063bb506 mov       %cl,0x2A3(%rsp)
063bb50d mov       %cl,0x2A5(%rsp)
063bb514 mov       %cl,0x2A7(%rsp)
063bb51b mov       %cl,0x2A6(%rsp)
063bb522 mov       0x2A6(%rsp),%cl
063bb529 mov       %cl,0x2A4(%rsp)
063bb530 mov       0x2A4(%rsp),%cl
063bb537 mov       %cl,(%rax)
063bb539 mov       %rax,0x2A8(%rsp)
063bb541 mov       %rax,0x2B0(%rsp)
063bb549 mov       0x1E0(%rsp),%rax
063bb551 sub       $1,%rax
063bb555 mov       %rax,0xC8(%rsp)
063bb55d setb      %al
063bb560 test      $1,%al
063bb562 jne       0x0000`0000`063B`B592
063bb564 mov       0xC8(%rsp),%rax
063bb56c mov       %rax,0x1E0(%rsp)
063bb574 lea       0x150(%rsp),%rcx
063bb57c lea       0x158(%rsp),%rdx
063bb584 call      0x0000`0000`063C`73D0
063bb589 mov       %al,0xC7(%rsp)
063bb590 jmp       0x0000`0000`063B`B5AC
063bb592 lea       0x63C`E1F0,%rcx
063bb599 lea       0x63C`F328,%r8
063bb5a0 mov       $0x21,%edx
063bb5a5 call      0x0000`0000`063B`8E30
063bb5aa ud2
063bb5ac mov       0xC7(%rsp),%al
063bb5b3 test      $1,%al
063bb5b5 jne       0x0000`0000`063B`B425
063bb5bb jmp       0x0000`0000`063B`B3F7
063bb5c0 mov       0x130(%rsp),%rdx
063bb5c8 mov       0x128(%rsp),%rcx
063bb5d0 call      0x0000`0000`063B`82B0
063bb5d5 mov       %rax,0xB0(%rsp)
063bb5dd mov       %rdx,0xB8(%rsp)
063bb5e5 mov       0xB8(%rsp),%rdx
063bb5ed mov       0xB0(%rsp),%rcx
063bb5f5 call      0x0000`0000`063B`7F10
063bb5fa mov       %rax,0xA0(%rsp)
063bb602 mov       %rdx,0xA8(%rsp)
063bb60a mov       0xA8(%rsp),%rax
063bb612 mov       0xA0(%rsp),%rcx
063bb61a mov       %rcx,0x208(%rsp)
063bb622 mov       %rax,0x210(%rsp)
063bb62a lea       0x208(%rsp),%rcx
063bb632 call      0x0000`0000`063B`7DC0
063bb637 mov       %rax,0x218(%rsp)
063bb63f mov       0x218(%rsp),%rax
063bb647 test      %rax,%rax
063bb64a setne     %al
063bb64d movzbl    %al,%eax
063bb650 je        0x0000`0000`063B`B425
063bb656 jmp       0x0000`0000`063B`B658
063bb658 jmp       0x0000`0000`063B`B65C
063bb65a ud2
063bb65c mov       0x138(%rsp),%rdx
063bb664 mov       0x218(%rsp),%rax
063bb66c mov       %rax,0x88(%rsp)
063bb674 mov       %rax,0x258(%rsp)
063bb67c mov       0x158(%rsp),%rax
063bb684 mov       %rax,0x90(%rsp)
063bb68c mov       0x150(%rsp),%rcx
063bb694 call      0x0000`0000`063C`7650
063bb699 mov       %rax,0x98(%rsp)
063bb6a1 mov       0x98(%rsp),%rdx
063bb6a9 mov       0x90(%rsp),%rcx
063bb6b1 call      0x0000`0000`063C`7510
063bb6b6 mov       %rax,0x220(%rsp)
063bb6be mov       0x138(%rsp),%rdx
063bb6c6 mov       0x150(%rsp),%rcx
063bb6ce call      0x0000`0000`063C`75A0
063bb6d3 mov       %rax,0x80(%rsp)
063bb6db mov       0x80(%rsp),%rax
063bb6e3 mov       %rax,0x150(%rsp)
063bb6eb lea       0x220(%rsp),%rcx
063bb6f3 call      0x0000`0000`063C`78C0
063bb6f8 mov       %al,0x7F(%rsp)
063bb6fc mov       0x7F(%rsp),%cl
063bb700 call      0x0000`0000`063C`78E0
063bb705 mov       %al,0x7E(%rsp)
063bb709 mov       0x88(%rsp),%rax
063bb711 mov       0x7E(%rsp),%cl
063bb715 mov       %rax,0x288(%rsp)
063bb71d mov       %cl,0x293(%rsp)
063bb724 mov       %cl,0x295(%rsp)
063bb72b mov       %cl,0x297(%rsp)
063bb732 mov       %cl,0x296(%rsp)
063bb739 mov       0x296(%rsp),%cl
063bb740 mov       %cl,0x294(%rsp)
063bb747 mov       0x294(%rsp),%cl
063bb74e mov       %cl,(%rax)
063bb750 mov       %rax,0x2B8(%rsp)
063bb758 mov       %rax,0x2C0(%rsp)
063bb760 mov       0x1E0(%rsp),%rax
063bb768 sub       $1,%rax
063bb76c mov       %rax,0x70(%rsp)
063bb771 setb      %al
063bb774 test      $1,%al
063bb776 jne       0x0000`0000`063B`B7A0
063bb778 mov       0x70(%rsp),%rax
063bb77d mov       %rax,0x1E0(%rsp)
063bb785 lea       0x150(%rsp),%rcx
063bb78d lea       0x158(%rsp),%rdx
063bb795 call      0x0000`0000`063C`73D0
063bb79a mov       %al,0x6F(%rsp)
063bb79e jmp       0x0000`0000`063B`B7BA
063bb7a0 lea       0x63C`E1F0,%rcx
063bb7a7 lea       0x63C`F340,%r8
063bb7ae mov       $0x21,%edx
063bb7b3 call      0x0000`0000`063B`8E30
063bb7b8 ud2
063bb7ba mov       0x6F(%rsp),%al
063bb7be test      $1,%al
063bb7c0 jne       0x0000`0000`063B`B425
063bb7c6 jmp       0x0000`0000`063B`B62A
063bb7cb mov       0xF0(%rsp),%rdx
063bb7d3 mov       0xE8(%rsp),%rcx
063bb7db mov       %rcx,0x260(%rsp)
063bb7e3 mov       %rdx,0x268(%rsp)
063bb7eb mov       %rcx,0x2C8(%rsp)
063bb7f3 mov       %rdx,0x2D0(%rsp)
063bb7fb call      0x0000`0000`063C`2C00
063bb800 mov       %rax,0x60(%rsp)
063bb805 mov       0xF0(%rsp),%rdx
063bb80d mov       0x60(%rsp),%rcx
063bb812 call      0x0000`0000`063C`24E0
063bb817 mov       %rax,0x50(%rsp)
063bb81c mov       %rdx,0x58(%rsp)
063bb821 mov       0x58(%rsp),%rdx
063bb826 mov       0x50(%rsp),%rcx
063bb82b call      0x0000`0000`063C`3F70
063bb830 mov       %rax,0x40(%rsp)
063bb835 mov       %rdx,0x48(%rsp)
063bb83a mov       %rax,0x270(%rsp)
063bb842 mov       %rdx,0x278(%rsp)
063bb84a mov       0x148(%rsp),%rcx
063bb852 mov       0x147(%rsp),%dl
063bb859 mov       0x40(%rsp),%r8
063bb85e mov       0x48(%rsp),%r9
063bb863 mov       %rsp,%rax
063bb866 mov       %r9,0x28(%rax)
063bb86a mov       %r8,0x20(%rax)
063bb86e and       $1,%dl
063bb871 lea       0x63C`F370,%r8
063bb878 mov       $2,%r9d
063bb87e call      0x0000`0000`063B`E9D0
063bb883 mov       %al,0x3F(%rsp)
063bb887 mov       0x3F(%rsp),%al
063bb88b and       $1,%al
063bb88d movzbl    %al,%eax
063bb890 add       $0x2D8,%rsp
063bb897 ret

core::fmt::num::parse_u64_into<39>:
063bb8a0 sub       $0x658,%rsp
063bb8a7 mov       %r8,0x268(%rsp)
063bb8af mov       %rdx,0x270(%rsp)
063bb8b7 mov       %rcx,%rax
063bb8ba mov       0x270(%rsp),%rcx
063bb8c2 mov       %rax,0x280(%rsp)
063bb8ca mov       %rcx,0x290(%rsp)
063bb8d2 mov       %r8,0x298(%rsp)
063bb8da mov       %rcx,0x330(%rsp)
063bb8e2 movq      $0x27,0x338(%rsp)
063bb8ee mov       $0x27,%edx
063bb8f3 call      0x0000`0000`063C`2C80
063bb8f8 mov       %rax,0x278(%rsp)
063bb900 mov       %rax,0x2A0(%rsp)
063bb908 mov       0x63C`F440,%rcx
063bb90f mov       $0xC8,%edx
063bb914 call      0x0000`0000`063C`2BE0
063bb919 mov       %rax,0x260(%rsp)
063bb921 mov       %rax,0x2A8(%rsp)
063bb929 mov       0x268(%rsp),%rax
063bb931 cmpq      $0x13,(%rax)
063bb935 setg      %al
063bb938 xor       $0xFF,%al
063bb93a test      $1,%al
063bb93c jne       0x0000`0000`063B`B954
063bb93e movabs    $0x23`86F2`6FC1`0000,%rax
063bb948 cmp       %rax,0x280(%rsp)
063bb950 jae       0x0000`0000`063B`B985
063bb952 jmp       0x0000`0000`063B`B96E
063bb954 lea       0x63C`F448,%rcx
063bb95b lea       0x63C`F468,%r8
063bb962 mov       $0x1C,%edx
063bb967 call      0x0000`0000`063B`8E30
063bb96c ud2
063bb96e cmpq      $0x5F5`E100,0x280(%rsp)
063bb97a jae       0x0000`0000`063B`C266
063bb980 jmp       0x0000`0000`063B`C241
063bb985 mov       0x280(%rsp),%rax
063bb98d movabs    $0x23`86F2`6FC1`0000,%rcx
063bb997 xor       %edx,%edx
063bb999 div       %rcx
063bb99c mov       %rdx,0x250(%rsp)
063bb9a4 mov       %rdx,0x2B0(%rsp)
063bb9ac mov       0x280(%rsp),%rax
063bb9b4 movabs    $0x23`86F2`6FC1`0000,%rcx
063bb9be xor       %edx,%edx
063bb9c0 div       %rcx
063bb9c3 mov       %rax,%rcx
063bb9c6 mov       0x250(%rsp),%rax
063bb9ce mov       %rcx,0x280(%rsp)
063bb9d6 movabs    $0x5AF3`107A`4000,%rcx
063bb9e0 xor       %edx,%edx
063bb9e2 div       %rcx
063bb9e5 mov       $0x64,%ecx
063bb9ea xor       %edx,%edx
063bb9ec div       %rcx
063bb9ef shl       $1,%rdx
063bb9f3 mov       %rdx,0x258(%rsp)
063bb9fb mov       0x250(%rsp),%rax
063bba03 mov       0x258(%rsp),%rcx
063bba0b mov       %rcx,0x2B8(%rsp)
063bba13 movabs    $0xE8`D4A5`1000,%rcx
063bba1d xor       %edx,%edx
063bba1f div       %rcx
063bba22 mov       $0x64,%ecx
063bba27 xor       %edx,%edx
063bba29 div       %rcx
063bba2c shl       $1,%rdx
063bba30 mov       %rdx,0x248(%rsp)
063bba38 mov       0x250(%rsp),%rax
063bba40 mov       0x248(%rsp),%rcx
063bba48 mov       %rcx,0x2C0(%rsp)
063bba50 movabs    $0x2`540B`E400,%rcx
063bba5a xor       %edx,%edx
063bba5c div       %rcx
063bba5f mov       $0x64,%ecx
063bba64 xor       %edx,%edx
063bba66 div       %rcx
063bba69 shl       $1,%rdx
063bba6d mov       %rdx,0x240(%rsp)
063bba75 mov       0x250(%rsp),%rax
063bba7d mov       0x240(%rsp),%rcx
063bba85 mov       %rcx,0x2C8(%rsp)
063bba8d mov       $0x5F5`E100,%ecx
063bba92 xor       %edx,%edx
063bba94 div       %rcx
063bba97 mov       $0x64,%ecx
063bba9c xor       %edx,%edx
063bba9e div       %rcx
063bbaa1 shl       $1,%rdx
063bbaa5 mov       %rdx,0x238(%rsp)
063bbaad mov       0x250(%rsp),%rax
063bbab5 mov       0x238(%rsp),%rcx
063bbabd mov       %rcx,0x2D0(%rsp)
063bbac5 mov       $0xF`4240,%ecx
063bbaca xor       %edx,%edx
063bbacc div       %rcx
063bbacf mov       $0x64,%ecx
063bbad4 xor       %edx,%edx
063bbad6 div       %rcx
063bbad9 shl       $1,%rdx
063bbadd mov       %rdx,0x230(%rsp)
063bbae5 mov       0x250(%rsp),%rax
063bbaed mov       0x230(%rsp),%rcx
063bbaf5 mov       %rcx,0x2D8(%rsp)
063bbafd mov       $0x2710,%ecx
063bbb02 xor       %edx,%edx
063bbb04 div       %rcx
063bbb07 mov       $0x64,%ecx
063bbb0c xor       %edx,%edx
063bbb0e div       %rcx
063bbb11 shl       $1,%rdx
063bbb15 mov       %rdx,0x228(%rsp)
063bbb1d mov       0x250(%rsp),%rax
063bbb25 mov       0x228(%rsp),%rcx
063bbb2d mov       %rcx,0x2E0(%rsp)
063bbb35 mov       $0x64,%ecx
063bbb3a xor       %edx,%edx
063bbb3c div       %rcx
063bbb3f mov       $0x64,%ecx
063bbb44 xor       %edx,%edx
063bbb46 div       %rcx
063bbb49 shl       $1,%rdx
063bbb4d mov       %rdx,0x220(%rsp)
063bbb55 mov       0x250(%rsp),%rax
063bbb5d mov       0x220(%rsp),%rcx
063bbb65 mov       %rcx,0x2E8(%rsp)
063bbb6d shr       $0,%rax
063bbb71 mov       $0x64,%ecx
063bbb76 xor       %edx,%edx
063bbb78 div       %rcx
063bbb7b shl       $1,%rdx
063bbb7f mov       %rdx,0x218(%rsp)
063bbb87 mov       0x268(%rsp),%rax
063bbb8f mov       0x218(%rsp),%rcx
063bbb97 mov       %rcx,0x2F0(%rsp)
063bbb9f mov       (%rax),%rax
063bbba2 sub       $0x10,%rax
063bbba6 mov       %rax,0x210(%rsp)
063bbbae seto      %al
063bbbb1 test      $1,%al
063bbbb3 jne       0x0000`0000`063B`BC05
063bbbb5 mov       0x258(%rsp),%rcx
063bbbbd mov       0x260(%rsp),%rax
063bbbc5 mov       0x268(%rsp),%rdx
063bbbcd mov       0x210(%rsp),%r8
063bbbd5 mov       %r8,(%rdx)
063bbbd8 mov       %rax,0x4A8(%rsp)
063bbbe0 mov       %rcx,0x4B0(%rsp)
063bbbe8 add       %rcx,%rax
063bbbeb mov       %rax,0x4B8(%rsp)
063bbbf3 mov       0x4B8(%rsp),%rax
063bbbfb mov       %rax,0x208(%rsp)
063bbc03 jmp       0x0000`0000`063B`BC1F
063bbc05 lea       0x63C`E1F0,%rcx
063bbc0c lea       0x63C`F480,%r8
063bbc13 mov       $0x21,%edx
063bbc18 call      0x0000`0000`063B`8E30
063bbc1d ud2
063bbc1f mov       0x268(%rsp),%rax
063bbc27 mov       (%rax),%rax
063bbc2a add       $0,%rax
063bbc2e mov       %rax,0x200(%rsp)
063bbc36 seto      %al
063bbc39 test      $1,%al
063bbc3b jne       0x0000`0000`063B`BC7A
063bbc3d mov       0x200(%rsp),%rcx
063bbc45 mov       0x278(%rsp),%rax
063bbc4d mov       %rax,0x640(%rsp)
063bbc55 mov       %rcx,0x648(%rsp)
063bbc5d add       %rcx,%rax
063bbc60 mov       %rax,0x650(%rsp)
063bbc68 mov       0x650(%rsp),%rax
063bbc70 mov       %rax,0x1F8(%rsp)
063bbc78 jmp       0x0000`0000`063B`BC94
063bbc7a lea       0x63C`E220,%rcx
063bbc81 lea       0x63C`F498,%r8
063bbc88 mov       $0x1C,%edx
063bbc8d call      0x0000`0000`063B`8E30
063bbc92 ud2
063bbc94 mov       0x1F8(%rsp),%rdx
063bbc9c mov       0x208(%rsp),%rcx
063bbca4 mov       $2,%r8d
063bbcaa call      0x0000`0000`063B`4960
063bbcaf mov       0x248(%rsp),%rcx
063bbcb7 mov       0x260(%rsp),%rax
063bbcbf mov       %rax,0x490(%rsp)
063bbcc7 mov       %rcx,0x498(%rsp)
063bbccf add       %rcx,%rax
063bbcd2 mov       %rax,0x4A0(%rsp)
063bbcda mov       0x4A0(%rsp),%rax
063bbce2 mov       %rax,0x1F0(%rsp)
063bbcea mov       0x268(%rsp),%rax
063bbcf2 mov       (%rax),%rax
063bbcf5 add       $2,%rax
063bbcf9 mov       %rax,0x1E8(%rsp)
063bbd01 seto      %al
063bbd04 test      $1,%al
063bbd06 jne       0x0000`0000`063B`BD45
063bbd08 mov       0x1E8(%rsp),%rcx
063bbd10 mov       0x278(%rsp),%rax
063bbd18 mov       %rax,0x628(%rsp)
063bbd20 mov       %rcx,0x630(%rsp)
063bbd28 add       %rcx,%rax
063bbd2b mov       %rax,0x638(%rsp)
063bbd33 mov       0x638(%rsp),%rax
063bbd3b mov       %rax,0x1E0(%rsp)
063bbd43 jmp       0x0000`0000`063B`BD5F
063bbd45 lea       0x63C`E220,%rcx
063bbd4c lea       0x63C`F4B0,%r8
063bbd53 mov       $0x1C,%edx
063bbd58 call      0x0000`0000`063B`8E30
063bbd5d ud2
063bbd5f mov       0x1E0(%rsp),%rdx
063bbd67 mov       0x1F0(%rsp),%rcx
063bbd6f mov       $2,%r8d
063bbd75 call      0x0000`0000`063B`4960
063bbd7a mov       0x240(%rsp),%rcx
063bbd82 mov       0x260(%rsp),%rax
063bbd8a mov       %rax,0x478(%rsp)
063bbd92 mov       %rcx,0x480(%rsp)
063bbd9a add       %rcx,%rax
063bbd9d mov       %rax,0x488(%rsp)
063bbda5 mov       0x488(%rsp),%rax
063bbdad mov       %rax,0x1D8(%rsp)
063bbdb5 mov       0x268(%rsp),%rax
063bbdbd mov       (%rax),%rax
063bbdc0 add       $4,%rax
063bbdc4 mov       %rax,0x1D0(%rsp)
063bbdcc seto      %al
063bbdcf test      $1,%al
063bbdd1 jne       0x0000`0000`063B`BE10
063bbdd3 mov       0x1D0(%rsp),%rcx
063bbddb mov       0x278(%rsp),%rax
063bbde3 mov       %rax,0x610(%rsp)
063bbdeb mov       %rcx,0x618(%rsp)
063bbdf3 add       %rcx,%rax
063bbdf6 mov       %rax,0x620(%rsp)
063bbdfe mov       0x620(%rsp),%rax
063bbe06 mov       %rax,0x1C8(%rsp)
063bbe0e jmp       0x0000`0000`063B`BE2A
063bbe10 lea       0x63C`E220,%rcx
063bbe17 lea       0x63C`F4C8,%r8
063bbe1e mov       $0x1C,%edx
063bbe23 call      0x0000`0000`063B`8E30
063bbe28 ud2
063bbe2a mov       0x1C8(%rsp),%rdx
063bbe32 mov       0x1D8(%rsp),%rcx
063bbe3a mov       $2,%r8d
063bbe40 call      0x0000`0000`063B`4960
063bbe45 mov       0x238(%rsp),%rcx
063bbe4d mov       0x260(%rsp),%rax
063bbe55 mov       %rax,0x460(%rsp)
063bbe5d mov       %rcx,0x468(%rsp)
063bbe65 add       %rcx,%rax
063bbe68 mov       %rax,0x470(%rsp)
063bbe70 mov       0x470(%rsp),%rax
063bbe78 mov       %rax,0x1C0(%rsp)
063bbe80 mov       0x268(%rsp),%rax
063bbe88 mov       (%rax),%rax
063bbe8b add       $6,%rax
063bbe8f mov       %rax,0x1B8(%rsp)
063bbe97 seto      %al
063bbe9a test      $1,%al
063bbe9c jne       0x0000`0000`063B`BEDB
063bbe9e mov       0x1B8(%rsp),%rcx
063bbea6 mov       0x278(%rsp),%rax
063bbeae mov       %rax,0x5F8(%rsp)
063bbeb6 mov       %rcx,0x600(%rsp)
063bbebe add       %rcx,%rax
063bbec1 mov       %rax,0x608(%rsp)
063bbec9 mov       0x608(%rsp),%rax
063bbed1 mov       %rax,0x1B0(%rsp)
063bbed9 jmp       0x0000`0000`063B`BEF5
063bbedb lea       0x63C`E220,%rcx
063bbee2 lea       0x63C`F4E0,%r8
063bbee9 mov       $0x1C,%edx
063bbeee call      0x0000`0000`063B`8E30
063bbef3 ud2
063bbef5 mov       0x1B0(%rsp),%rdx
063bbefd mov       0x1C0(%rsp),%rcx
063bbf05 mov       $2,%r8d
063bbf0b call      0x0000`0000`063B`4960
063bbf10 mov       0x230(%rsp),%rcx
063bbf18 mov       0x260(%rsp),%rax
063bbf20 mov       %rax,0x448(%rsp)
063bbf28 mov       %rcx,0x450(%rsp)
063bbf30 add       %rcx,%rax
063bbf33 mov       %rax,0x458(%rsp)
063bbf3b mov       0x458(%rsp),%rax
063bbf43 mov       %rax,0x1A8(%rsp)
063bbf4b mov       0x268(%rsp),%rax
063bbf53 mov       (%rax),%rax
063bbf56 add       $8,%rax
063bbf5a mov       %rax,0x1A0(%rsp)
063bbf62 seto      %al
063bbf65 test      $1,%al
063bbf67 jne       0x0000`0000`063B`BFA6
063bbf69 mov       0x1A0(%rsp),%rcx
063bbf71 mov       0x278(%rsp),%rax
063bbf79 mov       %rax,0x5E0(%rsp)
063bbf81 mov       %rcx,0x5E8(%rsp)
063bbf89 add       %rcx,%rax
063bbf8c mov       %rax,0x5F0(%rsp)
063bbf94 mov       0x5F0(%rsp),%rax
063bbf9c mov       %rax,0x198(%rsp)
063bbfa4 jmp       0x0000`0000`063B`BFC0
063bbfa6 lea       0x63C`E220,%rcx
063bbfad lea       0x63C`F4F8,%r8
063bbfb4 mov       $0x1C,%edx
063bbfb9 call      0x0000`0000`063B`8E30
063bbfbe ud2
063bbfc0 mov       0x198(%rsp),%rdx
063bbfc8 mov       0x1A8(%rsp),%rcx
063bbfd0 mov       $2,%r8d
063bbfd6 call      0x0000`0000`063B`4960
063bbfdb mov       0x228(%rsp),%rcx
063bbfe3 mov       0x260(%rsp),%rax
063bbfeb mov       %rax,0x430(%rsp)
063bbff3 mov       %rcx,0x438(%rsp)
063bbffb add       %rcx,%rax
063bbffe mov       %rax,0x440(%rsp)
063bc006 mov       0x440(%rsp),%rax
063bc00e mov       %rax,0x190(%rsp)
063bc016 mov       0x268(%rsp),%rax
063bc01e mov       (%rax),%rax
063bc021 add       $0xA,%rax
063bc025 mov       %rax,0x188(%rsp)
063bc02d seto      %al
063bc030 test      $1,%al
063bc032 jne       0x0000`0000`063B`C071
063bc034 mov       0x188(%rsp),%rcx
063bc03c mov       0x278(%rsp),%rax
063bc044 mov       %rax,0x5C8(%rsp)
063bc04c mov       %rcx,0x5D0(%rsp)
063bc054 add       %rcx,%rax
063bc057 mov       %rax,0x5D8(%rsp)
063bc05f mov       0x5D8(%rsp),%rax
063bc067 mov       %rax,0x180(%rsp)
063bc06f jmp       0x0000`0000`063B`C08B
063bc071 lea       0x63C`E220,%rcx
063bc078 lea       0x63C`F510,%r8
063bc07f mov       $0x1C,%edx
063bc084 call      0x0000`0000`063B`8E30
063bc089 ud2
063bc08b mov       0x180(%rsp),%rdx
063bc093 mov       0x190(%rsp),%rcx
063bc09b mov       $2,%r8d
063bc0a1 call      0x0000`0000`063B`4960
063bc0a6 mov       0x220(%rsp),%rcx
063bc0ae mov       0x260(%rsp),%rax
063bc0b6 mov       %rax,0x418(%rsp)
063bc0be mov       %rcx,0x420(%rsp)
063bc0c6 add       %rcx,%rax
063bc0c9 mov       %rax,0x428(%rsp)
063bc0d1 mov       0x428(%rsp),%rax
063bc0d9 mov       %rax,0x178(%rsp)
063bc0e1 mov       0x268(%rsp),%rax
063bc0e9 mov       (%rax),%rax
063bc0ec add       $0xC,%rax
063bc0f0 mov       %rax,0x170(%rsp)
063bc0f8 seto      %al
063bc0fb test      $1,%al
063bc0fd jne       0x0000`0000`063B`C13C
063bc0ff mov       0x170(%rsp),%rcx
063bc107 mov       0x278(%rsp),%rax
063bc10f mov       %rax,0x5B0(%rsp)
063bc117 mov       %rcx,0x5B8(%rsp)
063bc11f add       %rcx,%rax
063bc122 mov       %rax,0x5C0(%rsp)
063bc12a mov       0x5C0(%rsp),%rax
063bc132 mov       %rax,0x168(%rsp)
063bc13a jmp       0x0000`0000`063B`C156
063bc13c lea       0x63C`E220,%rcx
063bc143 lea       0x63C`F528,%r8
063bc14a mov       $0x1C,%edx
063bc14f call      0x0000`0000`063B`8E30
063bc154 ud2
063bc156 mov       0x168(%rsp),%rdx
063bc15e mov       0x178(%rsp),%rcx
063bc166 mov       $2,%r8d
063bc16c call      0x0000`0000`063B`4960
063bc171 mov       0x218(%rsp),%rcx
063bc179 mov       0x260(%rsp),%rax
063bc181 mov       %rax,0x400(%rsp)
063bc189 mov       %rcx,0x408(%rsp)
063bc191 add       %rcx,%rax
063bc194 mov       %rax,0x410(%rsp)
063bc19c mov       0x410(%rsp),%rax
063bc1a4 mov       %rax,0x160(%rsp)
063bc1ac mov       0x268(%rsp),%rax
063bc1b4 mov       (%rax),%rax
063bc1b7 add       $0xE,%rax
063bc1bb mov       %rax,0x158(%rsp)
063bc1c3 seto      %al
063bc1c6 test      $1,%al
063bc1c8 jne       0x0000`0000`063B`C207
063bc1ca mov       0x158(%rsp),%rcx
063bc1d2 mov       0x278(%rsp),%rax
063bc1da mov       %rax,0x598(%rsp)
063bc1e2 mov       %rcx,0x5A0(%rsp)
063bc1ea add       %rcx,%rax
063bc1ed mov       %rax,0x5A8(%rsp)
063bc1f5 mov       0x5A8(%rsp),%rax
063bc1fd mov       %rax,0x150(%rsp)
063bc205 jmp       0x0000`0000`063B`C221
063bc207 lea       0x63C`E220,%rcx
063bc20e lea       0x63C`F540,%r8
063bc215 mov       $0x1C,%edx
063bc21a call      0x0000`0000`063B`8E30
063bc21f ud2
063bc221 mov       0x150(%rsp),%rdx
063bc229 mov       0x160(%rsp),%rcx
063bc231 mov       $2,%r8d
063bc237 call      0x0000`0000`063B`4960
063bc23c jmp       0x0000`0000`063B`B96E
063bc241 mov       0x280(%rsp),%rax
063bc249 mov       %eax,0x288(%rsp)
063bc250 cmpl      $0x2710,0x288(%rsp)
063bc25b jae       0x0000`0000`063B`C720
063bc261 jmp       0x0000`0000`063B`C6FD
063bc266 mov       0x280(%rsp),%rax
063bc26e mov       $0x5F5`E100,%ecx
063bc273 xor       %edx,%edx
063bc275 div       %rcx
063bc278 mov       %rdx,0x140(%rsp)
063bc280 mov       %rdx,0x2F8(%rsp)
063bc288 mov       0x280(%rsp),%rax
063bc290 mov       $0x5F5`E100,%ecx
063bc295 xor       %edx,%edx
063bc297 div       %rcx
063bc29a mov       %rax,%rcx
063bc29d mov       0x140(%rsp),%rax
063bc2a5 mov       %rcx,0x280(%rsp)
063bc2ad mov       $0xF`4240,%ecx
063bc2b2 xor       %edx,%edx
063bc2b4 div       %rcx
063bc2b7 mov       $0x64,%ecx
063bc2bc xor       %edx,%edx
063bc2be div       %rcx
063bc2c1 shl       $1,%rdx
063bc2c5 mov       %rdx,0x148(%rsp)
063bc2cd mov       0x140(%rsp),%rax
063bc2d5 mov       0x148(%rsp),%rcx
063bc2dd mov       %rcx,0x300(%rsp)
063bc2e5 mov       $0x2710,%ecx
063bc2ea xor       %edx,%edx
063bc2ec div       %rcx
063bc2ef mov       $0x64,%ecx
063bc2f4 xor       %edx,%edx
063bc2f6 div       %rcx
063bc2f9 shl       $1,%rdx
063bc2fd mov       %rdx,0x138(%rsp)
063bc305 mov       0x140(%rsp),%rax
063bc30d mov       0x138(%rsp),%rcx
063bc315 mov       %rcx,0x308(%rsp)
063bc31d mov       $0x64,%ecx
063bc322 xor       %edx,%edx
063bc324 div       %rcx
063bc327 mov       $0x64,%ecx
063bc32c xor       %edx,%edx
063bc32e div       %rcx
063bc331 shl       $1,%rdx
063bc335 mov       %rdx,0x130(%rsp)
063bc33d mov       0x140(%rsp),%rax
063bc345 mov       0x130(%rsp),%rcx
063bc34d mov       %rcx,0x310(%rsp)
063bc355 shr       $0,%rax
063bc359 mov       $0x64,%ecx
063bc35e xor       %edx,%edx
063bc360 div       %rcx
063bc363 shl       $1,%rdx
063bc367 mov       %rdx,0x128(%rsp)
063bc36f mov       0x268(%rsp),%rax
063bc377 mov       0x128(%rsp),%rcx
063bc37f mov       %rcx,0x318(%rsp)
063bc387 mov       (%rax),%rax
063bc38a sub       $8,%rax
063bc38e mov       %rax,0x120(%rsp)
063bc396 seto      %al
063bc399 test      $1,%al
063bc39b jne       0x0000`0000`063B`C3ED
063bc39d mov       0x148(%rsp),%rcx
063bc3a5 mov       0x260(%rsp),%rax
063bc3ad mov       0x268(%rsp),%rdx
063bc3b5 mov       0x120(%rsp),%r8
063bc3bd mov       %r8,(%rdx)
063bc3c0 mov       %rax,0x3E8(%rsp)
063bc3c8 mov       %rcx,0x3F0(%rsp)
063bc3d0 add       %rcx,%rax
063bc3d3 mov       %rax,0x3F8(%rsp)
063bc3db mov       0x3F8(%rsp),%rax
063bc3e3 mov       %rax,0x118(%rsp)
063bc3eb jmp       0x0000`0000`063B`C407
063bc3ed lea       0x63C`E1F0,%rcx
063bc3f4 lea       0x63C`F558,%r8
063bc3fb mov       $0x21,%edx
063bc400 call      0x0000`0000`063B`8E30
063bc405 ud2
063bc407 mov       0x268(%rsp),%rax
063bc40f mov       (%rax),%rax
063bc412 add       $0,%rax
063bc416 mov       %rax,0x110(%rsp)
063bc41e seto      %al
063bc421 test      $1,%al
063bc423 jne       0x0000`0000`063B`C462
063bc425 mov       0x110(%rsp),%rcx
063bc42d mov       0x278(%rsp),%rax
063bc435 mov       %rax,0x580(%rsp)
063bc43d mov       %rcx,0x588(%rsp)
063bc445 add       %rcx,%rax
063bc448 mov       %rax,0x590(%rsp)
063bc450 mov       0x590(%rsp),%rax
063bc458 mov       %rax,0x108(%rsp)
063bc460 jmp       0x0000`0000`063B`C47C
063bc462 lea       0x63C`E220,%rcx
063bc469 lea       0x63C`F570,%r8
063bc470 mov       $0x1C,%edx
063bc475 call      0x0000`0000`063B`8E30
063bc47a ud2
063bc47c mov       0x108(%rsp),%rdx
063bc484 mov       0x118(%rsp),%rcx
063bc48c mov       $2,%r8d
063bc492 call      0x0000`0000`063B`4960
063bc497 mov       0x138(%rsp),%rcx
063bc49f mov       0x260(%rsp),%rax
063bc4a7 mov       %rax,0x3D0(%rsp)
063bc4af mov       %rcx,0x3D8(%rsp)
063bc4b7 add       %rcx,%rax
063bc4ba mov       %rax,0x3E0(%rsp)
063bc4c2 mov       0x3E0(%rsp),%rax
063bc4ca mov       %rax,0x100(%rsp)
063bc4d2 mov       0x268(%rsp),%rax
063bc4da mov       (%rax),%rax
063bc4dd add       $2,%rax
063bc4e1 mov       %rax,0xF8(%rsp)
063bc4e9 seto      %al
063bc4ec test      $1,%al
063bc4ee jne       0x0000`0000`063B`C52D
063bc4f0 mov       0xF8(%rsp),%rcx
063bc4f8 mov       0x278(%rsp),%rax
063bc500 mov       %rax,0x568(%rsp)
063bc508 mov       %rcx,0x570(%rsp)
063bc510 add       %rcx,%rax
063bc513 mov       %rax,0x578(%rsp)
063bc51b mov       0x578(%rsp),%rax
063bc523 mov       %rax,0xF0(%rsp)
063bc52b jmp       0x0000`0000`063B`C547
063bc52d lea       0x63C`E220,%rcx
063bc534 lea       0x63C`F588,%r8
063bc53b mov       $0x1C,%edx
063bc540 call      0x0000`0000`063B`8E30
063bc545 ud2
063bc547 mov       0xF0(%rsp),%rdx
063bc54f mov       0x100(%rsp),%rcx
063bc557 mov       $2,%r8d
063bc55d call      0x0000`0000`063B`4960
063bc562 mov       0x130(%rsp),%rcx
063bc56a mov       0x260(%rsp),%rax
063bc572 mov       %rax,0x3B8(%rsp)
063bc57a mov       %rcx,0x3C0(%rsp)
063bc582 add       %rcx,%rax
063bc585 mov       %rax,0x3C8(%rsp)
063bc58d mov       0x3C8(%rsp),%rax
063bc595 mov       %rax,0xE8(%rsp)
063bc59d mov       0x268(%rsp),%rax
063bc5a5 mov       (%rax),%rax
063bc5a8 add       $4,%rax
063bc5ac mov       %rax,0xE0(%rsp)
063bc5b4 seto      %al
063bc5b7 test      $1,%al
063bc5b9 jne       0x0000`0000`063B`C5F8
063bc5bb mov       0xE0(%rsp),%rcx
063bc5c3 mov       0x278(%rsp),%rax
063bc5cb mov       %rax,0x550(%rsp)
063bc5d3 mov       %rcx,0x558(%rsp)
063bc5db add       %rcx,%rax
063bc5de mov       %rax,0x560(%rsp)
063bc5e6 mov       0x560(%rsp),%rax
063bc5ee mov       %rax,0xD8(%rsp)
063bc5f6 jmp       0x0000`0000`063B`C612
063bc5f8 lea       0x63C`E220,%rcx
063bc5ff lea       0x63C`F5A0,%r8
063bc606 mov       $0x1C,%edx
063bc60b call      0x0000`0000`063B`8E30
063bc610 ud2
063bc612 mov       0xD8(%rsp),%rdx
063bc61a mov       0xE8(%rsp),%rcx
063bc622 mov       $2,%r8d
063bc628 call      0x0000`0000`063B`4960
063bc62d mov       0x128(%rsp),%rcx
063bc635 mov       0x260(%rsp),%rax
063bc63d mov       %rax,0x3A0(%rsp)
063bc645 mov       %rcx,0x3A8(%rsp)
063bc64d add       %rcx,%rax
063bc650 mov       %rax,0x3B0(%rsp)
063bc658 mov       0x3B0(%rsp),%rax
063bc660 mov       %rax,0xD0(%rsp)
063bc668 mov       0x268(%rsp),%rax
063bc670 mov       (%rax),%rax
063bc673 add       $6,%rax
063bc677 mov       %rax,0xC8(%rsp)
063bc67f seto      %al
063bc682 test      $1,%al
063bc684 jne       0x0000`0000`063B`C6C3
063bc686 mov       0xC8(%rsp),%rcx
063bc68e mov       0x278(%rsp),%rax
063bc696 mov       %rax,0x538(%rsp)
063bc69e mov       %rcx,0x540(%rsp)
063bc6a6 add       %rcx,%rax
063bc6a9 mov       %rax,0x548(%rsp)
063bc6b1 mov       0x548(%rsp),%rax
063bc6b9 mov       %rax,0xC0(%rsp)
063bc6c1 jmp       0x0000`0000`063B`C6DD
063bc6c3 lea       0x63C`E220,%rcx
063bc6ca lea       0x63C`F5B8,%r8
063bc6d1 mov       $0x1C,%edx
063bc6d6 call      0x0000`0000`063B`8E30
063bc6db ud2
063bc6dd mov       0xC0(%rsp),%rdx
063bc6e5 mov       0xD0(%rsp),%rcx
063bc6ed mov       $2,%r8d
063bc6f3 call      0x0000`0000`063B`4960
063bc6f8 jmp       0x0000`0000`063B`C241
063bc6fd mov       0x288(%rsp),%eax
063bc704 mov       %ax,0x28E(%rsp)
063bc70c cmpw      $0x64,0x28E(%rsp)
063bc715 jae       0x0000`0000`063B`C99F
063bc71b jmp       0x0000`0000`063B`C98B
063bc720 mov       0x288(%rsp),%eax
063bc727 mov       $0x2710,%ecx
063bc72c xor       %edx,%edx
063bc72e div       %ecx
063bc730 mov       %edx,0xB8(%rsp)
063bc737 mov       %edx,0x320(%rsp)
063bc73e mov       0x288(%rsp),%eax
063bc745 mov       $0x2710,%ecx
063bc74a xor       %edx,%edx
063bc74c div       %ecx
063bc74e mov       %eax,%ecx
063bc750 mov       0xB8(%rsp),%eax
063bc757 mov       %ecx,0x288(%rsp)
063bc75e mov       $0x64,%ecx
063bc763 xor       %edx,%edx
063bc765 div       %ecx
063bc767 shl       $1,%eax
063bc76a mov       %eax,0xBC(%rsp)
063bc771 mov       0xB8(%rsp),%eax
063bc778 mov       0xBC(%rsp),%ecx
063bc77f mov       %ecx,0x324(%rsp)
063bc786 mov       $0x64,%ecx
063bc78b xor       %edx,%edx
063bc78d div       %ecx
063bc78f shl       $1,%edx
063bc792 mov       %edx,0xB4(%rsp)
063bc799 mov       0x268(%rsp),%rax
063bc7a1 mov       0xB4(%rsp),%ecx
063bc7a8 mov       %ecx,0x328(%rsp)
063bc7af mov       (%rax),%rax
063bc7b2 sub       $4,%rax
063bc7b6 mov       %rax,0xA8(%rsp)
063bc7be seto      %al
063bc7c1 test      $1,%al
063bc7c3 jne       0x0000`0000`063B`C816
063bc7c5 mov       0x260(%rsp),%rax
063bc7cd mov       0xBC(%rsp),%ecx
063bc7d4 mov       0x268(%rsp),%rdx
063bc7dc mov       0xA8(%rsp),%r8
063bc7e4 mov       %r8,(%rdx)
063bc7e7 mov       %ecx,%ecx
063bc7e9 mov       %rax,0x388(%rsp)
063bc7f1 mov       %rcx,0x390(%rsp)
063bc7f9 add       %rcx,%rax
063bc7fc mov       %rax,0x398(%rsp)
063bc804 mov       0x398(%rsp),%rax
063bc80c mov       %rax,0xA0(%rsp)
063bc814 jmp       0x0000`0000`063B`C830
063bc816 lea       0x63C`E1F0,%rcx
063bc81d lea       0x63C`F5D0,%r8
063bc824 mov       $0x21,%edx
063bc829 call      0x0000`0000`063B`8E30
063bc82e ud2
063bc830 mov       0x268(%rsp),%rax
063bc838 mov       (%rax),%rax
063bc83b add       $0,%rax
063bc83f mov       %rax,0x98(%rsp)
063bc847 seto      %al
063bc84a test      $1,%al
063bc84c jne       0x0000`0000`063B`C88B
063bc84e mov       0x98(%rsp),%rcx
063bc856 mov       0x278(%rsp),%rax
063bc85e mov       %rax,0x520(%rsp)
063bc866 mov       %rcx,0x528(%rsp)
063bc86e add       %rcx,%rax
063bc871 mov       %rax,0x530(%rsp)
063bc879 mov       0x530(%rsp),%rax
063bc881 mov       %rax,0x90(%rsp)
063bc889 jmp       0x0000`0000`063B`C8A5
063bc88b lea       0x63C`E220,%rcx
063bc892 lea       0x63C`F5E8,%r8
063bc899 mov       $0x1C,%edx
063bc89e call      0x0000`0000`063B`8E30
063bc8a3 ud2
063bc8a5 mov       0x90(%rsp),%rdx
063bc8ad mov       0xA0(%rsp),%rcx
063bc8b5 mov       $2,%r8d
063bc8bb call      0x0000`0000`063B`4960
063bc8c0 mov       0x260(%rsp),%rax
063bc8c8 mov       0xB4(%rsp),%ecx
063bc8cf mov       %ecx,%ecx
063bc8d1 mov       %rax,0x370(%rsp)
063bc8d9 mov       %rcx,0x378(%rsp)
063bc8e1 add       %rcx,%rax
063bc8e4 mov       %rax,0x380(%rsp)
063bc8ec mov       0x380(%rsp),%rax
063bc8f4 mov       %rax,0x88(%rsp)
063bc8fc mov       0x268(%rsp),%rax
063bc904 mov       (%rax),%rax
063bc907 add       $2,%rax
063bc90b mov       %rax,0x80(%rsp)
063bc913 seto      %al
063bc916 test      $1,%al
063bc918 jne       0x0000`0000`063B`C954
063bc91a mov       0x80(%rsp),%rcx
063bc922 mov       0x278(%rsp),%rax
063bc92a mov       %rax,0x508(%rsp)
063bc932 mov       %rcx,0x510(%rsp)
063bc93a add       %rcx,%rax
063bc93d mov       %rax,0x518(%rsp)
063bc945 mov       0x518(%rsp),%rax
063bc94d mov       %rax,0x78(%rsp)
063bc952 jmp       0x0000`0000`063B`C96E
063bc954 lea       0x63C`E220,%rcx
063bc95b lea       0x63C`F600,%r8
063bc962 mov       $0x1C,%edx
063bc967 call      0x0000`0000`063B`8E30
063bc96c ud2
063bc96e mov       0x78(%rsp),%rdx
063bc973 mov       0x88(%rsp),%rcx
063bc97b mov       $2,%r8d
063bc981 call      0x0000`0000`063B`4960
063bc986 jmp       0x0000`0000`063B`C6FD
063bc98b cmpw      $0xA,0x28E(%rsp)
063bc994 jb        0x0000`0000`063B`CACC
063bc99a jmp       0x0000`0000`063B`CAB6
063bc99f mov       0x28E(%rsp),%ax
063bc9a7 mov       $0x64,%cx
063bc9ab xor       %edx,%edx
063bc9ad div       %cx
063bc9b0 shl       $1,%dx
063bc9b4 mov       %dx,0x76(%rsp)
063bc9b9 mov       0x76(%rsp),%ax
063bc9be mov       %ax,0x32C(%rsp)
063bc9c6 mov       0x28E(%rsp),%ax
063bc9ce mov       $0x64,%cx
063bc9d2 xor       %edx,%edx
063bc9d4 div       %cx
063bc9d7 mov       %ax,%cx
063bc9da mov       0x268(%rsp),%rax
063bc9e2 mov       %cx,0x28E(%rsp)
063bc9ea mov       (%rax),%rax
063bc9ed sub       $2,%rax
063bc9f1 mov       %rax,0x68(%rsp)
063bc9f6 seto      %al
063bc9f9 test      $1,%al
063bc9fb jne       0x0000`0000`063B`CA47
063bc9fd mov       0x260(%rsp),%rax
063bca05 mov       0x76(%rsp),%cx
063bca0a mov       0x268(%rsp),%rdx
063bca12 mov       0x68(%rsp),%r8
063bca17 mov       %r8,(%rdx)
063bca1a movzwl    %cx,%ecx
063bca1d mov       %rax,0x358(%rsp)
063bca25 mov       %rcx,0x360(%rsp)
063bca2d add       %rcx,%rax
063bca30 mov       %rax,0x368(%rsp)
063bca38 mov       0x368(%rsp),%rax
063bca40 mov       %rax,0x60(%rsp)
063bca45 jmp       0x0000`0000`063B`CA61
063bca47 lea       0x63C`E1F0,%rcx
063bca4e lea       0x63C`F618,%r8
063bca55 mov       $0x21,%edx
063bca5a call      0x0000`0000`063B`8E30
063bca5f ud2
063bca61 mov       0x278(%rsp),%rax
063bca69 mov       0x268(%rsp),%rcx
063bca71 mov       (%rcx),%rcx
063bca74 mov       %rax,0x4F0(%rsp)
063bca7c mov       %rcx,0x4F8(%rsp)
063bca84 add       %rcx,%rax
063bca87 mov       %rax,0x500(%rsp)
063bca8f mov       0x500(%rsp),%rax
063bca97 mov       %rax,0x58(%rsp)
063bca9c mov       0x58(%rsp),%rdx
063bcaa1 mov       0x60(%rsp),%rcx
063bcaa6 mov       $2,%r8d
063bcaac call      0x0000`0000`063B`4960
063bcab1 jmp       0x0000`0000`063B`C98B
063bcab6 mov       0x28E(%rsp),%ax
063bcabe shl       $1,%ax
063bcac2 mov       %ax,0x56(%rsp)
063bcac7 jmp       0x0000`0000`063B`CB91
063bcacc mov       0x268(%rsp),%rax
063bcad4 mov       (%rax),%rax
063bcad7 dec       %rax
063bcada mov       %rax,0x48(%rsp)
063bcadf seto      %al
063bcae2 test      $1,%al
063bcae4 jne       0x0000`0000`063B`CB0D
063bcae6 mov       0x268(%rsp),%rax
063bcaee mov       0x48(%rsp),%rcx
063bcaf3 mov       %rcx,(%rax)
063bcaf6 mov       0x28E(%rsp),%ax
063bcafe add       $0x30,%al
063bcb00 mov       %al,0x47(%rsp)
063bcb04 setb      %al
063bcb07 test      $1,%al
063bcb09 jne       0x0000`0000`063B`CB64
063bcb0b jmp       0x0000`0000`063B`CB27
063bcb0d lea       0x63C`E1F0,%rcx
063bcb14 lea       0x63C`F630,%r8
063bcb1b mov       $0x21,%edx
063bcb20 call      0x0000`0000`063B`8E30
063bcb25 ud2
063bcb27 mov       0x278(%rsp),%rax
063bcb2f mov       0x268(%rsp),%rcx
063bcb37 mov       (%rcx),%rcx
063bcb3a mov       %rax,0x4D8(%rsp)
063bcb42 mov       %rcx,0x4E0(%rsp)
063bcb4a add       %rcx,%rax
063bcb4d mov       %rax,0x4E8(%rsp)
063bcb55 mov       0x4E8(%rsp),%rax
063bcb5d mov       %rax,0x38(%rsp)
063bcb62 jmp       0x0000`0000`063B`CB7E
063bcb64 lea       0x63C`E220,%rcx
063bcb6b lea       0x63C`F648,%r8
063bcb72 mov       $0x1C,%edx
063bcb77 call      0x0000`0000`063B`8E30
063bcb7c ud2
063bcb7e mov       0x38(%rsp),%rax
063bcb83 mov       0x47(%rsp),%cl
063bcb87 mov       %cl,(%rax)
063bcb89 add       $0x658,%rsp
063bcb90 ret
063bcb91 mov       0x268(%rsp),%rax
063bcb99 mov       0x56(%rsp),%cx
063bcb9e mov       %cx,0x32E(%rsp)
063bcba6 mov       (%rax),%rax
063bcba9 sub       $2,%rax
063bcbad mov       %rax,0x30(%rsp)
063bcbb2 seto      %al
063bcbb5 test      $1,%al
063bcbb7 jne       0x0000`0000`063B`CC03
063bcbb9 mov       0x260(%rsp),%rax
063bcbc1 mov       0x56(%rsp),%cx
063bcbc6 mov       0x268(%rsp),%rdx
063bcbce mov       0x30(%rsp),%r8
063bcbd3 mov       %r8,(%rdx)
063bcbd6 movzwl    %cx,%ecx
063bcbd9 mov       %rax,0x340(%rsp)
063bcbe1 mov       %rcx,0x348(%rsp)
063bcbe9 add       %rcx,%rax
063bcbec mov       %rax,0x350(%rsp)
063bcbf4 mov       0x350(%rsp),%rax
063bcbfc mov       %rax,0x28(%rsp)
063bcc01 jmp       0x0000`0000`063B`CC1D
063bcc03 lea       0x63C`E1F0,%rcx
063bcc0a lea       0x63C`F660,%r8
063bcc11 mov       $0x21,%edx
063bcc16 call      0x0000`0000`063B`8E30
063bcc1b ud2
063bcc1d mov       0x278(%rsp),%rax
063bcc25 mov       0x268(%rsp),%rcx
063bcc2d mov       (%rcx),%rcx
063bcc30 mov       %rax,0x4C0(%rsp)
063bcc38 mov       %rcx,0x4C8(%rsp)
063bcc40 add       %rcx,%rax
063bcc43 mov       %rax,0x4D0(%rsp)
063bcc4b mov       0x4D0(%rsp),%rax
063bcc53 mov       %rax,0x20(%rsp)
063bcc58 mov       0x20(%rsp),%rdx
063bcc5d mov       0x28(%rsp),%rcx
063bcc62 mov       $2,%r8d
063bcc68 call      0x0000`0000`063B`4960
063bcc6d jmp       0x0000`0000`063B`CB89

core::fmt::num::impl$0::fmt:
063bcc80 sub       $0x38,%rsp
063bcc84 mov       %rdx,%r9
063bcc87 mov       %rcx,%rax
063bcc8a mov       %rax,0x28(%rsp)
063bcc8f mov       %r9,0x30(%rsp)
063bcc94 mov       (%rax),%rcx
063bcc97 mov       8(%rax),%rdx
063bcc9b mov       $1,%r8b
063bcc9e call      0x0000`0000`063B`CCC0
063bcca3 mov       %al,0x27(%rsp)
063bcca7 mov       0x27(%rsp),%al
063bccab and       $1,%al
063bccad movzbl    %al,%eax
063bccb0 add       $0x38,%rsp
063bccb4 ret

core::fmt::num::fmt_u128:
063bccc0 sub       $0x258,%rsp
063bccc7 mov       %r9,0xF8(%rsp)
063bcccf mov       %rdx,0x100(%rsp)
063bccd7 mov       %rcx,0x108(%rsp)
063bccdf mov       %r8b,0x116(%rsp)
063bcce7 mov       %rcx,0x148(%rsp)
063bccef mov       %rdx,0x150(%rsp)
063bccf7 and       $1,%r8b
063bccfb mov       %r8b,0x15F(%rsp)
063bcd03 mov       %r9,0x160(%rsp)
063bcd0b mov       0x1C7(%rsp),%al
063bcd12 mov       %al,0x117(%rsp)
063bcd19 mov       0x100(%rsp),%rdx
063bcd21 mov       0x108(%rsp),%rcx
063bcd29 mov       0x117(%rsp),%al
063bcd30 movzbl    %al,%eax
063bcd33 movabs    $0x101`0101`0101`0101,%r8
063bcd3d imul      %r8,%rax
063bcd41 mov       %rax,0x137(%rsp)
063bcd49 mov       %rax,0x130(%rsp)
063bcd51 mov       %rax,0x128(%rsp)
063bcd59 mov       %rax,0x120(%rsp)
063bcd61 mov       %rax,0x118(%rsp)
063bcd69 movq      $0x27,0x140(%rsp)
063bcd75 call      0x0000`0000`063B`D290
063bcd7a mov       %rcx,0xE0(%rsp)
063bcd82 mov       %rdx,0xE8(%rsp)
063bcd8a mov       %rax,0xF0(%rsp)
063bcd92 mov       0xE0(%rsp),%rcx
063bcd9a mov       0xE8(%rsp),%rax
063bcda2 mov       0xF0(%rsp),%rdx
063bcdaa mov       %rdx,0x168(%rsp)
063bcdb2 mov       %rax,0x170(%rsp)
063bcdba mov       %rcx,0x178(%rsp)
063bcdc2 lea       0x118(%rsp),%rdx
063bcdca lea       0x140(%rsp),%r8
063bcdd2 call      0x0000`0000`063B`B8A0
063bcdd7 mov       0xE8(%rsp),%rcx
063bcddf mov       0xF0(%rsp),%rax
063bcde7 or        %rcx,%rax
063bcdea jne       0x0000`0000`063B`CE21
063bcdec jmp       0x0000`0000`063B`CDEE
063bcdee lea       0x118(%rsp),%rcx
063bcdf6 mov       %rcx,0x1C8(%rsp)
063bcdfe movq      $0x27,0x1D0(%rsp)
063bce0a mov       $0x27,%edx
063bce0f call      0x0000`0000`063C`2C80
063bce14 mov       %rax,0xD8(%rsp)
063bce1c jmp       0x0000`0000`063B`D189
063bce21 mov       $0x27,%eax
063bce26 sub       $0x13,%rax
063bce2a mov       %rax,0xD0(%rsp)
063bce32 setb      %al
063bce35 test      $1,%al
063bce37 jne       0x0000`0000`063B`CE79
063bce39 mov       0xD0(%rsp),%rax
063bce41 mov       %rax,0x180(%rsp)
063bce49 lea       0x118(%rsp),%rcx
063bce51 mov       %rcx,0x1E8(%rsp)
063bce59 movq      $0x27,0x1F0(%rsp)
063bce65 mov       $0x27,%edx
063bce6a call      0x0000`0000`063C`2C80
063bce6f mov       %rax,0xC8(%rsp)
063bce77 jmp       0x0000`0000`063B`CE93
063bce79 lea       0x63C`E1F0,%rcx
063bce80 lea       0x63C`F678,%r8
063bce87 mov       $0x21,%edx
063bce8c call      0x0000`0000`063B`8E30
063bce91 ud2
063bce93 mov       0xD0(%rsp),%rcx
063bce9b mov       0xC8(%rsp),%rax
063bcea3 mov       %rax,0x240(%rsp)
063bceab mov       %rcx,0x248(%rsp)
063bceb3 add       %rcx,%rax
063bceb6 mov       %rax,0x250(%rsp)
063bcebe mov       0x250(%rsp),%rax
063bcec6 mov       %rax,0xC0(%rsp)
063bcece mov       0xD0(%rsp),%rcx
063bced6 mov       0x140(%rsp),%rax
063bcede sub       %rcx,%rax
063bcee1 mov       %rax,0xB8(%rsp)
063bcee9 seto      %al
063bceec test      $1,%al
063bceee jne       0x0000`0000`063B`CF0C
063bcef0 mov       0xB8(%rsp),%r8
063bcef8 mov       0xC0(%rsp),%rcx
063bcf00 mov       $0x30,%edx
063bcf05 call      0x0000`0000`063B`4A60
063bcf0a jmp       0x0000`0000`063B`CF26
063bcf0c lea       0x63C`E1F0,%rcx
063bcf13 lea       0x63C`F690,%r8
063bcf1a mov       $0x21,%edx
063bcf1f call      0x0000`0000`063B`8E30
063bcf24 ud2
063bcf26 mov       0xE8(%rsp),%rdx
063bcf2e mov       0xF0(%rsp),%rcx
063bcf36 mov       0xD0(%rsp),%rax
063bcf3e mov       %rax,0x140(%rsp)
063bcf46 call      0x0000`0000`063B`D290
063bcf4b mov       %rcx,0xA0(%rsp)
063bcf53 mov       %rdx,0xA8(%rsp)
063bcf5b mov       %rax,0xB0(%rsp)
063bcf63 mov       0xA0(%rsp),%rcx
063bcf6b mov       0xA8(%rsp),%rax
063bcf73 mov       0xB0(%rsp),%rdx
063bcf7b mov       %rdx,0x188(%rsp)
063bcf83 mov       %rax,0x190(%rsp)
063bcf8b mov       %rcx,0x198(%rsp)
063bcf93 lea       0x118(%rsp),%rdx
063bcf9b lea       0x140(%rsp),%r8
063bcfa3 call      0x0000`0000`063B`B8A0
063bcfa8 mov       0xA8(%rsp),%rcx
063bcfb0 mov       0xB0(%rsp),%rax
063bcfb8 or        %rcx,%rax
063bcfbb je        0x0000`0000`063B`CDEE
063bcfc1 jmp       0x0000`0000`063B`CFC3
063bcfc3 mov       $0x27,%eax
063bcfc8 sub       $0x26,%rax
063bcfcc mov       %rax,0x98(%rsp)
063bcfd4 setb      %al
063bcfd7 test      $1,%al
063bcfd9 jne       0x0000`0000`063B`D023
063bcfdb mov       0x98(%rsp),%rax
063bcfe3 mov       %rax,0x1A0(%rsp)
063bcfeb lea       0x118(%rsp),%rcx
063bcff3 mov       %rcx,0x1D8(%rsp)
063bcffb movq      $0x27,0x1E0(%rsp)
063bd007 mov       $0x27,%edx
063bd00c call      0x0000`0000`063C`2C80
063bd011 mov       %rax,0x90(%rsp)
063bd019 mov       %rax,0x1A8(%rsp)
063bd021 jmp       0x0000`0000`063B`D03D
063bd023 lea       0x63C`E1F0,%rcx
063bd02a lea       0x63C`F6A8,%r8
063bd031 mov       $0x21,%edx
063bd036 call      0x0000`0000`063B`8E30
063bd03b ud2
063bd03d mov       0x98(%rsp),%rcx
063bd045 mov       0x90(%rsp),%rax
063bd04d mov       %rax,0x228(%rsp)
063bd055 mov       %rcx,0x230(%rsp)
063bd05d add       %rcx,%rax
063bd060 mov       %rax,0x238(%rsp)
063bd068 mov       0x238(%rsp),%rax
063bd070 mov       %rax,0x88(%rsp)
063bd078 mov       0x98(%rsp),%rcx
063bd080 mov       0x140(%rsp),%rax
063bd088 sub       %rcx,%rax
063bd08b mov       %rax,0x80(%rsp)
063bd093 seto      %al
063bd096 test      $1,%al
063bd098 jne       0x0000`0000`063B`D0B6
063bd09a mov       0x80(%rsp),%r8
063bd0a2 mov       0x88(%rsp),%rcx
063bd0aa mov       $0x30,%edx
063bd0af call      0x0000`0000`063B`4A60
063bd0b4 jmp       0x0000`0000`063B`D0D0
063bd0b6 lea       0x63C`E1F0,%rcx
063bd0bd lea       0x63C`F6C0,%r8
063bd0c4 mov       $0x21,%edx
063bd0c9 call      0x0000`0000`063B`8E30
063bd0ce ud2
063bd0d0 mov       0x98(%rsp),%rax
063bd0d8 dec       %rax
063bd0db mov       %rax,0x78(%rsp)
063bd0e0 seto      %al
063bd0e3 test      $1,%al
063bd0e5 jne       0x0000`0000`063B`D10B
063bd0e7 mov       0xB0(%rsp),%rax
063bd0ef mov       0x78(%rsp),%rcx
063bd0f4 mov       %rcx,0x140(%rsp)
063bd0fc add       $0x30,%al
063bd0fe mov       %al,0x77(%rsp)
063bd102 setb      %al
063bd105 test      $1,%al
063bd107 jne       0x0000`0000`063B`D15F
063bd109 jmp       0x0000`0000`063B`D125
063bd10b lea       0x63C`E1F0,%rcx
063bd112 lea       0x63C`F6D8,%r8
063bd119 mov       $0x21,%edx
063bd11e call      0x0000`0000`063B`8E30
063bd123 ud2
063bd125 mov       0x90(%rsp),%rax
063bd12d mov       0x140(%rsp),%rcx
063bd135 mov       %rax,0x210(%rsp)
063bd13d mov       %rcx,0x218(%rsp)
063bd145 add       %rcx,%rax
063bd148 mov       %rax,0x220(%rsp)
063bd150 mov       0x220(%rsp),%rax
063bd158 mov       %rax,0x68(%rsp)
063bd15d jmp       0x0000`0000`063B`D179
063bd15f lea       0x63C`E220,%rcx
063bd166 lea       0x63C`F6F0,%r8
063bd16d mov       $0x1C,%edx
063bd172 call      0x0000`0000`063B`8E30
063bd177 ud2
063bd179 mov       0x68(%rsp),%rax
063bd17e mov       0x77(%rsp),%cl
063bd182 mov       %cl,(%rax)
063bd184 jmp       0x0000`0000`063B`CDEE
063bd189 mov       0xD8(%rsp),%rax
063bd191 mov       0x140(%rsp),%rcx
063bd199 mov       %rax,0x1F8(%rsp)
063bd1a1 mov       %rcx,0x200(%rsp)
063bd1a9 add       %rcx,%rax
063bd1ac mov       %rax,0x208(%rsp)
063bd1b4 mov       0x208(%rsp),%rax
063bd1bc mov       %rax,0x60(%rsp)
063bd1c1 mov       $0x27,%eax
063bd1c6 sub       0x140(%rsp),%rax
063bd1ce mov       %rax,0x58(%rsp)
063bd1d3 setb      %al
063bd1d6 test      $1,%al
063bd1d8 jne       0x0000`0000`063B`D1F5
063bd1da mov       0x58(%rsp),%rdx
063bd1df mov       0x60(%rsp),%rcx
063bd1e4 call      0x0000`0000`063C`24E0
063bd1e9 mov       %rax,0x48(%rsp)
063bd1ee mov       %rdx,0x50(%rsp)
063bd1f3 jmp       0x0000`0000`063B`D20F
063bd1f5 lea       0x63C`E1F0,%rcx
063bd1fc lea       0x63C`F708,%r8
063bd203 mov       $0x21,%edx
063bd208 call      0x0000`0000`063B`8E30
063bd20d ud2
063bd20f mov       0x50(%rsp),%rdx
063bd214 mov       0x48(%rsp),%rcx
063bd219 call      0x0000`0000`063C`3F70
063bd21e mov       %rax,0x38(%rsp)
063bd223 mov       %rdx,0x40(%rsp)
063bd228 mov       %rax,0x1B0(%rsp)
063bd230 mov       %rdx,0x1B8(%rsp)
063bd238 mov       0xF8(%rsp),%rcx
063bd240 mov       0x116(%rsp),%dl
063bd247 mov       0x38(%rsp),%r8
063bd24c mov       0x40(%rsp),%r9
063bd251 mov       %rsp,%rax
063bd254 mov       %r9,0x28(%rax)
063bd258 mov       %r8,0x20(%rax)
063bd25c and       $1,%dl
063bd25f lea       0x63C`E370,%r8
063bd266 xor       %eax,%eax
063bd268 mov       %eax,%r9d
063bd26b call      0x0000`0000`063B`E9D0
063bd270 mov       %al,0x37(%rsp)
063bd274 mov       0x37(%rsp),%al
063bd278 and       $1,%al
063bd27a movzbl    %al,%eax
063bd27d add       $0x258,%rsp
063bd284 ret

core::fmt::num::udiv_1e19:
063bd290 sub       $0xC8,%rsp
063bd297 mov       %rdx,0x78(%rsp)
063bd29c mov       %rcx,0x80(%rsp)
063bd2a4 mov       %rcx,0xB0(%rsp)
063bd2ac mov       %rdx,0xB8(%rsp)
063bd2b4 sub       $0x8`0000,%rdx
063bd2bb jb        0x0000`0000`063B`D2F4
063bd2bd jmp       0x0000`0000`063B`D2BF
063bd2bf mov       0x78(%rsp),%rdx
063bd2c4 mov       0x80(%rsp),%rcx
063bd2cc movabs    $0x9598`F4F1`E836`1973,%r8
063bd2d6 movabs    $0x760F`253E`DB4A`B0D2,%r9
063bd2e0 call      0x0000`0000`063B`D490
063bd2e5 mov       %rdx,0x68(%rsp)
063bd2ea mov       %rax,0x70(%rsp)
063bd2ef jmp       0x0000`0000`063B`D391
063bd2f4 mov       0x78(%rsp),%rax
063bd2f9 mov       0x80(%rsp),%rdx
063bd301 mov       %rax,%rcx
063bd304 shld      $0x2D,%rdx,%rcx
063bd309 mov       %rcx,0x60(%rsp)
063bd30e shr       $0x13,%rax
063bd312 mov       0x60(%rsp),%rax
063bd317 movabs    $0x760F`253E`DB4A`B0D3,%rcx
063bd321 mul       %rcx
063bd324 shr       $0x2B,%rdx
063bd328 mov       %rdx,0xA0(%rsp)
063bd330 movq      $0,0xA8(%rsp)
063bd33c mov       0xA0(%rsp),%rax
063bd344 mov       %rax,0x40(%rsp)
063bd349 mov       0xA8(%rsp),%rax
063bd351 movabs    $0x8AC7`2304`89E8`0000,%rcx
063bd35b mul       %rcx
063bd35e mov       %rax,%r8
063bd361 mov       0x40(%rsp),%rax
063bd366 seto      %dl
063bd369 mov       %dl,0x4F(%rsp)
063bd36d mul       %rcx
063bd370 mov       %rax,%rcx
063bd373 mov       0x4F(%rsp),%al
063bd377 add       %r8,%rdx
063bd37a mov       %rdx,0x50(%rsp)
063bd37f setb      %r8b
063bd383 or        %r8b,%al
063bd386 mov       %rcx,0x58(%rsp)
063bd38b test      $1,%al
063bd38d jne       0x0000`0000`063B`D3FB
063bd38f jmp       0x0000`0000`063B`D3D0
063bd391 mov       0x68(%rsp),%rax
063bd396 mov       0x70(%rsp),%rdx
063bd39b mov       %rax,%rcx
063bd39e shld      $2,%rdx,%rcx
063bd3a3 mov       %rcx,0x30(%rsp)
063bd3a8 shr       $0x3E,%rax
063bd3ac mov       %rax,0x38(%rsp)
063bd3b1 mov       0x38(%rsp),%rax
063bd3b6 mov       0x30(%rsp),%rcx
063bd3bb mov       %rcx,0xA0(%rsp)
063bd3c3 mov       %rax,0xA8(%rsp)
063bd3cb jmp       0x0000`0000`063B`D33C
063bd3d0 mov       0x50(%rsp),%rax
063bd3d5 mov       0x78(%rsp),%rcx
063bd3da mov       0x58(%rsp),%r8
063bd3df mov       0x80(%rsp),%rdx
063bd3e7 sub       %r8,%rdx
063bd3ea mov       %rdx,0x28(%rsp)
063bd3ef sbb       %rax,%rcx
063bd3f2 setb      %al
063bd3f5 test      $1,%al
063bd3f7 jne       0x0000`0000`063B`D46A
063bd3f9 jmp       0x0000`0000`063B`D415
063bd3fb lea       0x63C`E240,%rcx
063bd402 lea       0x63C`F720,%r8
063bd409 mov       $0x21,%edx
063bd40e call      0x0000`0000`063B`8E30
063bd413 ud2
063bd415 mov       0x28(%rsp),%rax
063bd41a mov       %rax,0xC0(%rsp)
063bd422 mov       0xA0(%rsp),%rcx
063bd42a mov       0xA8(%rsp),%rdx
063bd432 mov       %rdx,0x90(%rsp)
063bd43a mov       %rcx,0x88(%rsp)
063bd442 mov       %rax,0x98(%rsp)
063bd44a mov       0x88(%rsp),%rax
063bd452 mov       0x90(%rsp),%rdx
063bd45a mov       0x98(%rsp),%rcx
063bd462 add       $0xC8,%rsp
063bd469 ret
063bd46a lea       0x63C`E1F0,%rcx
063bd471 lea       0x63C`F738,%r8
063bd478 mov       $0x21,%edx
063bd47d call      0x0000`0000`063B`8E30
063bd482 ud2

core::fmt::num::u128_mulhi:
063bd490 sub       $0x198,%rsp
063bd497 mov       %r9,0xF0(%rsp)
063bd49f mov       %r8,0xF8(%rsp)
063bd4a7 mov       %rcx,0x110(%rsp)
063bd4af mov       %rdx,0x118(%rsp)
063bd4b7 mov       %r9,0x128(%rsp)
063bd4bf mov       %r8,0x120(%rsp)
063bd4c7 mov       %rcx,%rax
063bd4ca mov       %rax,0x100(%rsp)
063bd4d2 mov       %rcx,0x130(%rsp)
063bd4da xor       %eax,%eax
063bd4dc mov       %rdx,0x108(%rsp)
063bd4e4 mov       0xF0(%rsp),%rax
063bd4ec mov       0xF8(%rsp),%rcx
063bd4f4 mov       0x108(%rsp),%rdx
063bd4fc mov       %rdx,%r8
063bd4ff mov       %r8,0xD8(%rsp)
063bd507 mov       %rdx,0x138(%rsp)
063bd50f mov       %rcx,%rdx
063bd512 mov       %rdx,0xE0(%rsp)
063bd51a mov       %rcx,0x140(%rsp)
063bd522 xor       %ecx,%ecx
063bd524 mov       %rax,0xE8(%rsp)
063bd52c mov       0xE0(%rsp),%rcx
063bd534 mov       0x100(%rsp),%rax
063bd53c mov       0xE8(%rsp),%rdx
063bd544 mov       %rdx,%r8
063bd547 mov       %r8,0xC8(%rsp)
063bd54f mov       %rdx,0x148(%rsp)
063bd557 mul       %rcx
063bd55a mov       %rax,%rcx
063bd55d xor       %eax,%eax
063bd55f mov       %rdx,0xD0(%rsp)
063bd567 test      $1,%al
063bd569 jne       0x0000`0000`063B`D587
063bd56b mov       0xD0(%rsp),%rax
063bd573 xor       %ecx,%ecx
063bd575 mov       %rcx,0xB8(%rsp)
063bd57d mov       %rax,0xC0(%rsp)
063bd585 jmp       0x0000`0000`063B`D5A1
063bd587 lea       0x63C`E240,%rcx
063bd58e lea       0x63C`F750,%r8
063bd595 mov       $0x21,%edx
063bd59a call      0x0000`0000`063B`8E30
063bd59f ud2
063bd5a1 mov       0xC8(%rsp),%rcx
063bd5a9 mov       0x100(%rsp),%rax
063bd5b1 mov       0xB8(%rsp),%rdx
063bd5b9 mov       0xC0(%rsp),%r8
063bd5c1 mov       %r8,0x150(%rsp)
063bd5c9 mov       %rdx,0x158(%rsp)
063bd5d1 mul       %rcx
063bd5d4 mov       %rax,%rcx
063bd5d7 xor       %eax,%eax
063bd5d9 mov       %rdx,0xA8(%rsp)
063bd5e1 mov       %rcx,0xB0(%rsp)
063bd5e9 test      $1,%al
063bd5eb jne       0x0000`0000`063B`D62C
063bd5ed mov       0xB8(%rsp),%rax
063bd5f5 mov       0xA8(%rsp),%rcx
063bd5fd mov       0xC0(%rsp),%r8
063bd605 mov       0xB0(%rsp),%rdx
063bd60d add       %r8,%rdx
063bd610 mov       %rdx,0x98(%rsp)
063bd618 adc       %rax,%rcx
063bd61b setb      %al
063bd61e mov       %rcx,0xA0(%rsp)
063bd626 test      $1,%al
063bd628 jne       0x0000`0000`063B`D67A
063bd62a jmp       0x0000`0000`063B`D646
063bd62c lea       0x63C`E240,%rcx
063bd633 lea       0x63C`F768,%r8
063bd63a mov       $0x21,%edx
063bd63f call      0x0000`0000`063B`8E30
063bd644 ud2
063bd646 mov       0xA0(%rsp),%rax
063bd64e mov       0x98(%rsp),%rcx
063bd656 mov       %rcx,0x160(%rsp)
063bd65e mov       %rax,0x168(%rsp)
063bd666 xor       %ecx,%ecx
063bd668 mov       %rcx,0x88(%rsp)
063bd670 mov       %rax,0x90(%rsp)
063bd678 jmp       0x0000`0000`063B`D694
063bd67a lea       0x63C`E220,%rcx
063bd681 lea       0x63C`F768,%r8
063bd688 mov       $0x1C,%edx
063bd68d call      0x0000`0000`063B`8E30
063bd692 ud2
063bd694 mov       0xE0(%rsp),%rcx
063bd69c mov       0xD8(%rsp),%rax
063bd6a4 mov       0x98(%rsp),%rdx
063bd6ac mov       0x88(%rsp),%r8
063bd6b4 mov       0x90(%rsp),%r9
063bd6bc mov       %r9,0x170(%rsp)
063bd6c4 mov       %r8,0x178(%rsp)
063bd6cc mov       %rdx,%r8
063bd6cf mov       %r8,0x70(%rsp)
063bd6d4 mov       %rdx,0x180(%rsp)
063bd6dc mul       %rcx
063bd6df mov       %rax,%rcx
063bd6e2 xor       %eax,%eax
063bd6e4 mov       %rdx,0x78(%rsp)
063bd6e9 mov       %rcx,0x80(%rsp)
063bd6f1 test      $1,%al
063bd6f3 jne       0x0000`0000`063B`D71C
063bd6f5 mov       0x78(%rsp),%rcx
063bd6fa mov       0x70(%rsp),%rax
063bd6ff mov       0x80(%rsp),%rdx
063bd707 add       %rax,%rdx
063bd70a adc       $0,%rcx
063bd70e setb      %al
063bd711 mov       %rcx,0x68(%rsp)
063bd716 test      $1,%al
063bd718 jne       0x0000`0000`063B`D749
063bd71a jmp       0x0000`0000`063B`D736
063bd71c lea       0x63C`E240,%rcx
063bd723 lea       0x63C`F780,%r8
063bd72a mov       $0x21,%edx
063bd72f call      0x0000`0000`063B`8E30
063bd734 ud2
063bd736 mov       0x68(%rsp),%rax
063bd73b xor       %ecx,%ecx
063bd73d mov       %rcx,0x58(%rsp)
063bd742 mov       %rax,0x60(%rsp)
063bd747 jmp       0x0000`0000`063B`D763
063bd749 lea       0x63C`E220,%rcx
063bd750 lea       0x63C`F798,%r8
063bd757 mov       $0x1C,%edx
063bd75c call      0x0000`0000`063B`8E30
063bd761 ud2
063bd763 mov       0xC8(%rsp),%rcx
063bd76b mov       0xD8(%rsp),%rax
063bd773 mov       0x58(%rsp),%rdx
063bd778 mov       0x60(%rsp),%r8
063bd77d mov       %r8,0x188(%rsp)
063bd785 mov       %rdx,0x190(%rsp)
063bd78d mul       %rcx
063bd790 mov       %rax,%rcx
063bd793 xor       %eax,%eax
063bd795 mov       %rdx,0x48(%rsp)
063bd79a mov       %rcx,0x50(%rsp)
063bd79f test      $1,%al
063bd7a1 jne       0x0000`0000`063B`D7D6
063bd7a3 mov       0x88(%rsp),%rax
063bd7ab mov       0x48(%rsp),%rcx
063bd7b0 mov       0x90(%rsp),%r8
063bd7b8 mov       0x50(%rsp),%rdx
063bd7bd add       %r8,%rdx
063bd7c0 mov       %rdx,0x38(%rsp)
063bd7c5 adc       %rax,%rcx
063bd7c8 setb      %al
063bd7cb mov       %rcx,0x40(%rsp)
063bd7d0 test      $1,%al
063bd7d2 jne       0x0000`0000`063B`D81D
063bd7d4 jmp       0x0000`0000`063B`D7F0
063bd7d6 lea       0x63C`E240,%rcx
063bd7dd lea       0x63C`F7B0,%r8
063bd7e4 mov       $0x21,%edx
063bd7e9 call      0x0000`0000`063B`8E30
063bd7ee ud2
063bd7f0 mov       0x58(%rsp),%rax
063bd7f5 mov       0x40(%rsp),%rcx
063bd7fa mov       0x60(%rsp),%r8
063bd7ff mov       0x38(%rsp),%rdx
063bd804 add       %r8,%rdx
063bd807 mov       %rdx,0x28(%rsp)
063bd80c adc       %rax,%rcx
063bd80f setb      %al
063bd812 mov       %rcx,0x30(%rsp)
063bd817 test      $1,%al
063bd819 jne       0x0000`0000`063B`D849
063bd81b jmp       0x0000`0000`063B`D837
063bd81d lea       0x63C`E220,%rcx
063bd824 lea       0x63C`F7B0,%r8
063bd82b mov       $0x1C,%edx
063bd830 call      0x0000`0000`063B`8E30
063bd835 ud2
063bd837 mov       0x30(%rsp),%rdx
063bd83c mov       0x28(%rsp),%rax
063bd841 add       $0x198,%rsp
063bd848 ret
063bd849 lea       0x63C`E220,%rcx
063bd850 lea       0x63C`F7B0,%r8
063bd857 mov       $0x1C,%edx
063bd85c call      0x0000`0000`063B`8E30
063bd861 ud2

core::fmt::Write::write_char<core::fmt::builders::PadAdapter>:
063bd870 sub       $0x68,%rsp
063bd874 mov       %edx,0x3C(%rsp)
063bd878 mov       %rcx,0x30(%rsp)
063bd87d mov       %rcx,0x58(%rsp)
063bd882 mov       %edx,0x64(%rsp)
063bd886 lea       0x54(%rsp),%rcx
063bd88b xor       %edx,%edx
063bd88d mov       $4,%r8d
063bd893 call      0x0000`0000`063C`AB00
063bd898 mov       0x3C(%rsp),%ecx
063bd89c lea       0x54(%rsp),%rdx
063bd8a1 mov       $4,%r8d
063bd8a7 call      0x0000`0000`063B`7050
063bd8ac mov       %rax,0x40(%rsp)
063bd8b1 mov       %rdx,0x48(%rsp)
063bd8b6 mov       0x48(%rsp),%r8
063bd8bb mov       0x40(%rsp),%rdx
063bd8c0 mov       0x30(%rsp),%rcx
063bd8c5 call      0x0000`0000`063B`9980
063bd8ca mov       %al,0x2F(%rsp)
063bd8ce mov       0x2F(%rsp),%al
063bd8d2 and       $1,%al
063bd8d4 movzbl    %al,%eax
063bd8d7 add       $0x68,%rsp
063bd8db ret

core::fmt::Write::write_fmt<core::fmt::builders::PadAdapter>:
063bd8e0 sub       $0x68,%rsp
063bd8e4 mov       %rcx,0x30(%rsp)
063bd8e9 lea       0x30(%rsp),%rax
063bd8ee mov       %rax,0x20(%rsp)
063bd8f3 lea       0x38(%rsp),%rcx
063bd8f8 mov       $0x30,%r8d
063bd8fe call      0x0000`0000`063C`AB90
063bd903 mov       0x20(%rsp),%rcx
063bd908 lea       0x63C`F7C8,%rdx
063bd90f lea       0x38(%rsp),%r8
063bd914 call      0x0000`0000`063B`DFE0
063bd919 mov       %al,0x2F(%rsp)
063bd91d mov       0x2F(%rsp),%al
063bd921 and       $1,%al
063bd923 movzbl    %al,%eax
063bd926 add       $0x68,%rsp
063bd92a ret

core::fmt::impl$0::write_str<core::fmt::builders::PadAdapter>:
063bd930 sub       $0x48,%rsp
063bd934 mov       %rcx,0x30(%rsp)
063bd939 mov       %rdx,0x38(%rsp)
063bd93e mov       %r8,0x40(%rsp)
063bd943 mov       (%rcx),%rcx
063bd946 call      0x0000`0000`063B`9980
063bd94b mov       %al,0x2F(%rsp)
063bd94f mov       0x2F(%rsp),%al
063bd953 and       $1,%al
063bd955 movzbl    %al,%eax
063bd958 add       $0x48,%rsp
063bd95c ret

core::fmt::impl$0::write_char<core::fmt::builders::PadAdapter>:
063bd960 sub       $0x38,%rsp
063bd964 mov       %rcx,0x28(%rsp)
063bd969 mov       %edx,0x34(%rsp)
063bd96d mov       (%rcx),%rcx
063bd970 call      0x0000`0000`063B`D870
063bd975 mov       %al,0x27(%rsp)
063bd979 mov       0x27(%rsp),%al
063bd97d and       $1,%al
063bd97f movzbl    %al,%eax
063bd982 add       $0x38,%rsp
063bd986 ret

core::fmt::impl$0::write_fmt<core::fmt::builders::PadAdapter>:
063bd990 sub       $0x68,%rsp
063bd994 mov       %rcx,0x60(%rsp)
063bd999 mov       (%rcx),%rax
063bd99c mov       %rax,0x20(%rsp)
063bd9a1 lea       0x30(%rsp),%rcx
063bd9a6 mov       $0x30,%r8d
063bd9ac call      0x0000`0000`063C`AB90
063bd9b1 mov       0x20(%rsp),%rcx
063bd9b6 lea       0x30(%rsp),%rdx
063bd9bb call      0x0000`0000`063B`D8E0
063bd9c0 mov       %al,0x2F(%rsp)
063bd9c4 mov       0x2F(%rsp),%al
063bd9c8 and       $1,%al
063bd9ca movzbl    %al,%eax
063bd9cd add       $0x68,%rsp
063bd9d1 ret

core::fmt::Formatter::new:
063bd9e0 sub       $0x30,%rsp
063bd9e4 mov       %rcx,%rax
063bd9e7 mov       %rdx,0x20(%rsp)
063bd9ec mov       %r8,0x28(%rsp)
063bd9f1 movq      $0,(%rsp)
063bd9f9 movq      $0,0x10(%rsp)
063bda02 movl      $0,0x30(%rcx)
063bda09 movl      $0x20,0x34(%rcx)
063bda10 movb      $3,0x38(%rcx)
063bda14 mov       (%rsp),%r10
063bda18 mov       8(%rsp),%r9
063bda1d mov       %r10,(%rcx)
063bda20 mov       %r9,8(%rcx)
063bda24 mov       0x10(%rsp),%r10
063bda29 mov       0x18(%rsp),%r9
063bda2e mov       %r10,0x10(%rcx)
063bda32 mov       %r9,0x18(%rcx)
063bda36 mov       %rdx,0x20(%rcx)
063bda3a mov       %r8,0x28(%rcx)
063bda3e add       $0x30,%rsp
063bda42 ret

core::fmt::USIZE_MARKER::closure$0:
063bda50 sub       $0x48,%rsp
063bda54 mov       %rdx,0x20(%rsp)
063bda59 mov       %rcx,%rax
063bda5c mov       0x20(%rsp),%rcx
063bda61 mov       %rax,0x28(%rsp)
063bda66 mov       %rcx,0x30(%rsp)
063bda6b mov       %r8,0x38(%rsp)
063bda70 call      0x0000`0000`063B`6220
063bda75 mov       %rax,0x40(%rsp)
063bda7a jmp       0x0000`0000`063B`DA7A

core::fmt::ArgumentV1::new<char>:
063bda80 sub       $0x48,%rsp
063bda84 mov       %rcx,8(%rsp)
063bda89 mov       %rcx,0x28(%rsp)
063bda8e mov       %rdx,0x30(%rsp)
063bda93 mov       %rdx,0x38(%rsp)
063bda98 mov       0x38(%rsp),%rax
063bda9d mov       %rax,0x10(%rsp)
063bdaa2 mov       8(%rsp),%rax
063bdaa7 mov       %rax,0x40(%rsp)
063bdaac mov       0x40(%rsp),%rax
063bdab1 mov       %rax,(%rsp)
063bdab5 mov       0x10(%rsp),%rax
063bdaba mov       (%rsp),%rcx
063bdabe mov       %rcx,0x18(%rsp)
063bdac3 mov       %rax,0x20(%rsp)
063bdac8 mov       0x18(%rsp),%rax
063bdacd mov       0x20(%rsp),%rdx
063bdad2 add       $0x48,%rsp
063bdad6 ret

core::fmt::ArgumentV1::new<str>:
063bdae0 sub       $0x48,%rsp
063bdae4 mov       %rcx,8(%rsp)
063bdae9 mov       %rcx,0x28(%rsp)
063bdaee mov       %rdx,0x30(%rsp)
063bdaf3 mov       %rdx,0x38(%rsp)
063bdaf8 mov       0x38(%rsp),%rax
063bdafd mov       %rax,0x10(%rsp)
063bdb02 mov       8(%rsp),%rax
063bdb07 mov       %rax,0x40(%rsp)
063bdb0c mov       0x40(%rsp),%rax
063bdb11 mov       %rax,(%rsp)
063bdb15 mov       0x10(%rsp),%rax
063bdb1a mov       (%rsp),%rcx
063bdb1e mov       %rcx,0x18(%rsp)
063bdb23 mov       %rax,0x20(%rsp)
063bdb28 mov       0x18(%rsp),%rax
063bdb2d mov       0x20(%rsp),%rdx
063bdb32 add       $0x48,%rsp
063bdb36 ret

core::fmt::ArgumentV1::new<usize>:
063bdb40 sub       $0x48,%rsp
063bdb44 mov       %rcx,8(%rsp)
063bdb49 mov       %rcx,0x28(%rsp)
063bdb4e mov       %rdx,0x30(%rsp)
063bdb53 mov       %rdx,0x38(%rsp)
063bdb58 mov       0x38(%rsp),%rax
063bdb5d mov       %rax,0x10(%rsp)
063bdb62 mov       8(%rsp),%rax
063bdb67 mov       %rax,0x40(%rsp)
063bdb6c mov       0x40(%rsp),%rax
063bdb71 mov       %rax,(%rsp)
063bdb75 mov       0x10(%rsp),%rax
063bdb7a mov       (%rsp),%rcx
063bdb7e mov       %rcx,0x18(%rsp)
063bdb83 mov       %rax,0x20(%rsp)
063bdb88 mov       0x18(%rsp),%rax
063bdb8d mov       0x20(%rsp),%rdx
063bdb92 add       $0x48,%rsp
063bdb96 ret

core::fmt::ArgumentV1::new<core::ops::range::Range<usize> >:
063bdba0 sub       $0x48,%rsp
063bdba4 mov       %rcx,8(%rsp)
063bdba9 mov       %rcx,0x28(%rsp)
063bdbae mov       %rdx,0x30(%rsp)
063bdbb3 mov       %rdx,0x38(%rsp)
063bdbb8 mov       0x38(%rsp),%rax
063bdbbd mov       %rax,0x10(%rsp)
063bdbc2 mov       8(%rsp),%rax
063bdbc7 mov       %rax,0x40(%rsp)
063bdbcc mov       0x40(%rsp),%rax
063bdbd1 mov       %rax,(%rsp)
063bdbd5 mov       0x10(%rsp),%rax
063bdbda mov       (%rsp),%rcx
063bdbde mov       %rcx,0x18(%rsp)
063bdbe3 mov       %rax,0x20(%rsp)
063bdbe8 mov       0x18(%rsp),%rax
063bdbed mov       0x20(%rsp),%rdx
063bdbf2 add       $0x48,%rsp
063bdbf6 ret

core::fmt::ArgumentV1::new<core::fmt::Arguments>:
063bdc00 sub       $0x48,%rsp
063bdc04 mov       %rcx,8(%rsp)
063bdc09 mov       %rcx,0x28(%rsp)
063bdc0e mov       %rdx,0x30(%rsp)
063bdc13 mov       %rdx,0x38(%rsp)
063bdc18 mov       0x38(%rsp),%rax
063bdc1d mov       %rax,0x10(%rsp)
063bdc22 mov       8(%rsp),%rax
063bdc27 mov       %rax,0x40(%rsp)
063bdc2c mov       0x40(%rsp),%rax
063bdc31 mov       %rax,(%rsp)
063bdc35 mov       0x10(%rsp),%rax
063bdc3a mov       (%rsp),%rcx
063bdc3e mov       %rcx,0x18(%rsp)
063bdc43 mov       %rax,0x20(%rsp)
063bdc48 mov       0x18(%rsp),%rax
063bdc4d mov       0x20(%rsp),%rdx
063bdc52 add       $0x48,%rsp
063bdc56 ret

core::fmt::ArgumentV1::new<ref$<core::fmt::Arguments> >:
063bdc60 sub       $0x48,%rsp
063bdc64 mov       %rcx,8(%rsp)
063bdc69 mov       %rcx,0x28(%rsp)
063bdc6e mov       %rdx,0x30(%rsp)
063bdc73 mov       %rdx,0x38(%rsp)
063bdc78 mov       0x38(%rsp),%rax
063bdc7d mov       %rax,0x10(%rsp)
063bdc82 mov       8(%rsp),%rax
063bdc87 mov       %rax,0x40(%rsp)
063bdc8c mov       0x40(%rsp),%rax
063bdc91 mov       %rax,(%rsp)
063bdc95 mov       0x10(%rsp),%rax
063bdc9a mov       (%rsp),%rcx
063bdc9e mov       %rcx,0x18(%rsp)
063bdca3 mov       %rax,0x20(%rsp)
063bdca8 mov       0x18(%rsp),%rax
063bdcad mov       0x20(%rsp),%rdx
063bdcb2 add       $0x48,%rsp
063bdcb6 ret

core::fmt::ArgumentV1::new<ref$<dyn$<core::fmt::Debug> > >:
063bdcc0 sub       $0x48,%rsp
063bdcc4 mov       %rcx,8(%rsp)
063bdcc9 mov       %rcx,0x28(%rsp)
063bdcce mov       %rdx,0x30(%rsp)
063bdcd3 mov       %rdx,0x38(%rsp)
063bdcd8 mov       0x38(%rsp),%rax
063bdcdd mov       %rax,0x10(%rsp)
063bdce2 mov       8(%rsp),%rax
063bdce7 mov       %rax,0x40(%rsp)
063bdcec mov       0x40(%rsp),%rax
063bdcf1 mov       %rax,(%rsp)
063bdcf5 mov       0x10(%rsp),%rax
063bdcfa mov       (%rsp),%rcx
063bdcfe mov       %rcx,0x18(%rsp)
063bdd03 mov       %rax,0x20(%rsp)
063bdd08 mov       0x18(%rsp),%rax
063bdd0d mov       0x20(%rsp),%rdx
063bdd12 add       $0x48,%rsp
063bdd16 ret

core::fmt::ArgumentV1::new<u8>:
063bdd20 sub       $0x48,%rsp
063bdd24 mov       %rcx,8(%rsp)
063bdd29 mov       %rcx,0x28(%rsp)
063bdd2e mov       %rdx,0x30(%rsp)
063bdd33 mov       %rdx,0x38(%rsp)
063bdd38 mov       0x38(%rsp),%rax
063bdd3d mov       %rax,0x10(%rsp)
063bdd42 mov       8(%rsp),%rax
063bdd47 mov       %rax,0x40(%rsp)
063bdd4c mov       0x40(%rsp),%rax
063bdd51 mov       %rax,(%rsp)
063bdd55 mov       0x10(%rsp),%rax
063bdd5a mov       (%rsp),%rcx
063bdd5e mov       %rcx,0x18(%rsp)
063bdd63 mov       %rax,0x20(%rsp)
063bdd68 mov       0x18(%rsp),%rax
063bdd6d mov       0x20(%rsp),%rdx
063bdd72 add       $0x48,%rsp
063bdd76 ret

core::fmt::ArgumentV1::new<u32>:
063bdd80 sub       $0x48,%rsp
063bdd84 mov       %rcx,8(%rsp)
063bdd89 mov       %rcx,0x28(%rsp)
063bdd8e mov       %rdx,0x30(%rsp)
063bdd93 mov       %rdx,0x38(%rsp)
063bdd98 mov       0x38(%rsp),%rax
063bdd9d mov       %rax,0x10(%rsp)
063bdda2 mov       8(%rsp),%rax
063bdda7 mov       %rax,0x40(%rsp)
063bddac mov       0x40(%rsp),%rax
063bddb1 mov       %rax,(%rsp)
063bddb5 mov       0x10(%rsp),%rax
063bddba mov       (%rsp),%rcx
063bddbe mov       %rcx,0x18(%rsp)
063bddc3 mov       %rax,0x20(%rsp)
063bddc8 mov       0x18(%rsp),%rax
063bddcd mov       0x20(%rsp),%rdx
063bddd2 add       $0x48,%rsp
063bddd6 ret

core::fmt::ArgumentV1::as_usize:
063bdde0 sub       $0x20,%rsp
063bdde4 mov       %rcx,(%rsp)
063bdde8 mov       %rcx,0x18(%rsp)
063bdded mov       8(%rcx),%rax
063bddf1 mov       0x63C`F7F8,%rcx
063bddf8 cmp       %rcx,%rax
063bddfb je        0x0000`0000`063B`DE08
063bddfd movq      $0,8(%rsp)
063bde06 jmp       0x0000`0000`063B`DE20
063bde08 mov       (%rsp),%rax
063bde0c mov       (%rax),%rax
063bde0f mov       (%rax),%rax
063bde12 mov       %rax,0x10(%rsp)
063bde17 movq      $1,8(%rsp)
063bde20 mov       8(%rsp),%rax
063bde25 mov       0x10(%rsp),%rdx
063bde2a add       $0x20,%rsp
063bde2e ret

core::fmt::Arguments::new_v1:
063bde30 sub       $0xC8,%rsp
063bde37 mov       %r9,0x30(%rsp)
063bde3c mov       %r8,0x38(%rsp)
063bde41 mov       %rdx,0x40(%rsp)
063bde46 mov       %rcx,0x48(%rsp)
063bde4b mov       %rcx,0x50(%rsp)
063bde50 mov       0xF0(%rsp),%rax
063bde58 mov       %rax,0x58(%rsp)
063bde5d mov       %rdx,0xA8(%rsp)
063bde65 mov       %r8,0xB0(%rsp)
063bde6d mov       %r9,0xB8(%rsp)
063bde75 mov       %rax,0xC0(%rsp)
063bde7d cmp       %rax,%r8
063bde80 jb        0x0000`0000`063B`DE99
063bde82 mov       0x58(%rsp),%rax
063bde87 add       $1,%rax
063bde8b mov       %rax,0x28(%rsp)
063bde90 setb      %al
063bde93 test      $1,%al
063bde95 jne       0x0000`0000`063B`DEC3
063bde97 jmp       0x0000`0000`063B`DEAB
063bde99 movb      $1,0x67(%rsp)
063bde9e testb     $1,0x67(%rsp)
063bdea3 jne       0x0000`0000`063B`DF36
063bdea9 jmp       0x0000`0000`063B`DEDD
063bdeab mov       0x38(%rsp),%rax
063bdeb0 mov       0x28(%rsp),%rcx
063bdeb5 cmp       %rcx,%rax
063bdeb8 seta      %al
063bdebb and       $1,%al
063bdebd mov       %al,0x67(%rsp)
063bdec1 jmp       0x0000`0000`063B`DE9E
063bdec3 lea       0x63C`E220,%rcx
063bdeca lea       0x63C`F878,%r8
063bded1 mov       $0x1C,%edx
063bded6 call      0x0000`0000`063B`8E30
063bdedb ud2
063bdedd mov       0x50(%rsp),%rax
063bdee2 mov       0x48(%rsp),%rcx
063bdee7 mov       0x58(%rsp),%rdx
063bdeec mov       0x30(%rsp),%r8
063bdef1 mov       0x38(%rsp),%r9
063bdef6 mov       0x40(%rsp),%r10
063bdefb movq      $0,0x98(%rsp)
063bdf07 mov       %r10,(%rcx)
063bdf0a mov       %r9,8(%rcx)
063bdf0e mov       0x98(%rsp),%r10
063bdf16 mov       0xA0(%rsp),%r9
063bdf1e mov       %r10,0x10(%rcx)
063bdf22 mov       %r9,0x18(%rcx)
063bdf26 mov       %r8,0x20(%rcx)
063bdf2a mov       %rdx,0x28(%rcx)
063bdf2e add       $0xC8,%rsp
063bdf35 ret
063bdf36 lea       0x68(%rsp),%rcx
063bdf3b lea       0x63C`F8A0,%rdx
063bdf42 mov       $1,%r8d
063bdf48 lea       0x63C`E370,%r9
063bdf4f xor       %eax,%eax
063bdf51 movq      $0,0x20(%rsp)
063bdf5a call      0x0000`0000`063B`DE30
063bdf5f lea       0x63C`F8B0,%rdx
063bdf66 lea       0x68(%rsp),%rcx
063bdf6b call      0x0000`0000`063B`8F40
063bdf70 ud2

core::fmt::impl$7::fmt:
063bdf80 sub       $0x78,%rsp
063bdf84 mov       %rdx,%rax
063bdf87 mov       %rcx,%rdx
063bdf8a mov       %rdx,0x68(%rsp)
063bdf8f mov       %rax,0x70(%rsp)
063bdf94 mov       0x20(%rax),%rcx
063bdf98 mov       %rcx,0x20(%rsp)
063bdf9d mov       0x28(%rax),%rax
063bdfa1 mov       %rax,0x28(%rsp)
063bdfa6 lea       0x38(%rsp),%rcx
063bdfab mov       $0x30,%r8d
063bdfb1 call      0x0000`0000`063C`AB90
063bdfb6 mov       0x20(%rsp),%rcx
063bdfbb mov       0x28(%rsp),%rdx
063bdfc0 lea       0x38(%rsp),%r8
063bdfc5 call      0x0000`0000`063B`DFE0
063bdfca mov       %al,0x37(%rsp)
063bdfce mov       0x37(%rsp),%al
063bdfd2 and       $1,%al
063bdfd4 movzbl    %al,%eax
063bdfd7 add       $0x78,%rsp
063bdfdb ret

core::fmt::write:
063bdfe0 sub       $0x258,%rsp
063bdfe7 mov       %r8,0x88(%rsp)
063bdfef mov       %rdx,%r8
063bdff2 mov       %rcx,%rdx
063bdff5 mov       %rdx,0x1B0(%rsp)
063bdffd mov       %r8,0x1B8(%rsp)
063be005 lea       0x98(%rsp),%rcx
063be00d call      0x0000`0000`063B`D9E0
063be012 mov       0x88(%rsp),%rax
063be01a movq      $0,0xD8(%rsp)
063be026 mov       0x10(%rax),%rax
063be02a test      %rax,%rax
063be02d setne     %al
063be030 movzbl    %al,%eax
063be033 je        0x0000`0000`063B`E03B
063be035 jmp       0x0000`0000`063B`E037
063be037 jmp       0x0000`0000`063B`E062
063be039 ud2
063be03b mov       0x88(%rsp),%rax
063be043 mov       0x20(%rax),%rcx
063be047 mov       0x28(%rax),%rdx
063be04b call      0x0000`0000`063C`2CA0
063be050 mov       %rax,0x78(%rsp)
063be055 mov       %rdx,0x80(%rsp)
063be05d jmp       0x0000`0000`063B`E2D0
063be062 mov       0x88(%rsp),%rax
063be06a mov       0x10(%rax),%rcx
063be06e mov       0x18(%rax),%rdx
063be072 mov       %rcx,0x210(%rsp)
063be07a mov       %rdx,0x218(%rsp)
063be082 call      0x0000`0000`063C`2D60
063be087 mov       %rax,0x68(%rsp)
063be08c mov       %rdx,0x70(%rsp)
063be091 mov       0x70(%rsp),%r8
063be096 mov       0x68(%rsp),%rdx
063be09b lea       0x158(%rsp),%rcx
063be0a3 call      0x0000`0000`063B`81C0
063be0a8 lea       0x140(%rsp),%rcx
063be0b0 lea       0x158(%rsp),%rdx
063be0b8 call      0x0000`0000`063B`7ED0
063be0bd mov       0x140(%rsp),%rax
063be0c5 mov       %rax,0x170(%rsp)
063be0cd mov       0x148(%rsp),%rax
063be0d5 mov       %rax,0x178(%rsp)
063be0dd mov       0x150(%rsp),%rax
063be0e5 mov       %rax,0x180(%rsp)
063be0ed lea       0x170(%rsp),%rcx
063be0f5 call      0x0000`0000`063B`7AB0
063be0fa mov       %rdx,0x190(%rsp)
063be102 mov       %rax,0x188(%rsp)
063be10a mov       0x190(%rsp),%rax
063be112 test      %rax,%rax
063be115 setne     %al
063be118 movzbl    %al,%eax
063be11b je        0x0000`0000`063B`E123
063be11d jmp       0x0000`0000`063B`E11F
063be11f jmp       0x0000`0000`063B`E14C
063be121 ud2
063be123 mov       0x88(%rsp),%rax
063be12b mov       (%rax),%rcx
063be12e mov       8(%rax),%rdx
063be132 mov       0xD8(%rsp),%r8
063be13a call      0x0000`0000`063C`28D0
063be13f mov       %rax,0x1A0(%rsp)
063be147 jmp       0x0000`0000`063B`E4D5
063be14c mov       0x88(%rsp),%rax
063be154 mov       0x188(%rsp),%r8
063be15c mov       %r8,0x220(%rsp)
063be164 mov       0x190(%rsp),%rcx
063be16c mov       %rcx,0x58(%rsp)
063be171 mov       %rcx,0x228(%rsp)
063be179 mov       (%rax),%rcx
063be17c mov       8(%rax),%rdx
063be180 call      0x0000`0000`063C`29F0
063be185 mov       %rax,0x60(%rsp)
063be18a mov       %rax,0x230(%rsp)
063be192 mov       0x60(%rsp),%rax
063be197 mov       (%rax),%rcx
063be19a mov       8(%rax),%rdx
063be19e call      0x0000`0000`063C`64B0
063be1a3 mov       %al,0x57(%rsp)
063be1a7 mov       0x57(%rsp),%al
063be1ab xor       $0xFF,%al
063be1ad test      $1,%al
063be1af jne       0x0000`0000`063B`E1D9
063be1b1 mov       0x58(%rsp),%rdx
063be1b6 mov       0x88(%rsp),%rax
063be1be mov       0x20(%rax),%r8
063be1c2 mov       0x28(%rax),%r9
063be1c6 lea       0x98(%rsp),%rcx
063be1ce call      0x0000`0000`063B`E570
063be1d3 mov       %al,0x56(%rsp)
063be1d7 jmp       0x0000`0000`063B`E24C
063be1d9 mov       0x60(%rsp),%r8
063be1de mov       0xB8(%rsp),%rcx
063be1e6 mov       0xC0(%rsp),%rax
063be1ee mov       (%r8),%rdx
063be1f1 mov       8(%r8),%r8
063be1f5 callq     *0x18(%rax)
063be1f8 mov       %al,0x55(%rsp)
063be1fc mov       0x55(%rsp),%cl
063be200 and       $1,%cl
063be203 call      0x0000`0000`063B`96F0
063be208 and       $1,%al
063be20a mov       %al,0x19E(%rsp)
063be211 movzbl    0x19E(%rsp),%eax
063be219 test      $1,%al
063be21b je        0x0000`0000`063B`E1B1
063be21d jmp       0x0000`0000`063B`E21F
063be21f jmp       0x0000`0000`063B`E223
063be221 ud2
063be223 lea       0x63C`F8C8,%rcx
063be22a call      0x0000`0000`063B`9770
063be22f and       $1,%al
063be231 mov       %al,0x97(%rsp)
063be238 mov       0x97(%rsp),%al
063be23f and       $1,%al
063be241 movzbl    %al,%eax
063be244 add       $0x258,%rsp
063be24b ret
063be24c mov       0x56(%rsp),%cl
063be250 and       $1,%cl
063be253 call      0x0000`0000`063B`96F0
063be258 and       $1,%al
063be25a mov       %al,0x19F(%rsp)
063be261 movzbl    0x19F(%rsp),%eax
063be269 test      $1,%al
063be26b je        0x0000`0000`063B`E273
063be26d jmp       0x0000`0000`063B`E26F
063be26f jmp       0x0000`0000`063B`E28D
063be271 ud2
063be273 mov       0xD8(%rsp),%rax
063be27b add       $1,%rax
063be27f mov       %rax,0x48(%rsp)
063be284 setb      %al
063be287 test      $1,%al
063be289 jne       0x0000`0000`063B`E2B6
063be28b jmp       0x0000`0000`063B`E2A4
063be28d lea       0x63C`F8E0,%rcx
063be294 call      0x0000`0000`063B`9770
063be299 and       $1,%al
063be29b mov       %al,0x97(%rsp)
063be2a2 jmp       0x0000`0000`063B`E238
063be2a4 mov       0x48(%rsp),%rax
063be2a9 mov       %rax,0xD8(%rsp)
063be2b1 jmp       0x0000`0000`063B`E0ED
063be2b6 lea       0x63C`E220,%rcx
063be2bd lea       0x63C`F8F8,%r8
063be2c4 mov       $0x1C,%edx
063be2c9 call      0x0000`0000`063B`8E30
063be2ce ud2
063be2d0 mov       0x80(%rsp),%r8
063be2d8 mov       0x78(%rsp),%rdx
063be2dd lea       0xF8(%rsp),%rcx
063be2e5 call      0x0000`0000`063B`81F0
063be2ea lea       0xE0(%rsp),%rcx
063be2f2 lea       0xF8(%rsp),%rdx
063be2fa call      0x0000`0000`063B`7EB0
063be2ff mov       0xE0(%rsp),%rax
063be307 mov       %rax,0x110(%rsp)
063be30f mov       0xE8(%rsp),%rax
063be317 mov       %rax,0x118(%rsp)
063be31f mov       0xF0(%rsp),%rax
063be327 mov       %rax,0x120(%rsp)
063be32f lea       0x110(%rsp),%rcx
063be337 call      0x0000`0000`063B`79B0
063be33c mov       %rdx,0x130(%rsp)
063be344 mov       %rax,0x128(%rsp)
063be34c mov       0x130(%rsp),%rax
063be354 test      %rax,%rax
063be357 setne     %al
063be35a movzbl    %al,%eax
063be35d je        0x0000`0000`063B`E123
063be363 jmp       0x0000`0000`063B`E365
063be365 jmp       0x0000`0000`063B`E369
063be367 ud2
063be369 mov       0x88(%rsp),%rax
063be371 mov       0x128(%rsp),%r8
063be379 mov       %r8,0x238(%rsp)
063be381 mov       0x130(%rsp),%rcx
063be389 mov       %rcx,0x38(%rsp)
063be38e mov       %rcx,0x240(%rsp)
063be396 mov       (%rax),%rcx
063be399 mov       8(%rax),%rdx
063be39d call      0x0000`0000`063C`29F0
063be3a2 mov       %rax,0x40(%rsp)
063be3a7 mov       %rax,0x248(%rsp)
063be3af mov       0x40(%rsp),%rax
063be3b4 mov       (%rax),%rcx
063be3b7 mov       8(%rax),%rdx
063be3bb call      0x0000`0000`063C`64B0
063be3c0 mov       %al,0x37(%rsp)
063be3c4 mov       0x37(%rsp),%al
063be3c8 xor       $0xFF,%al
063be3ca test      $1,%al
063be3cc jne       0x0000`0000`063B`E3EA
063be3ce mov       0x38(%rsp),%rcx
063be3d3 mov       8(%rcx),%rax
063be3d7 mov       (%rcx),%rcx
063be3da lea       0x98(%rsp),%rdx
063be3e2 call      *%rax
063be3e4 mov       %al,0x36(%rsp)
063be3e8 jmp       0x0000`0000`063B`E44E
063be3ea mov       0x40(%rsp),%r8
063be3ef mov       0xB8(%rsp),%rcx
063be3f7 mov       0xC0(%rsp),%rax
063be3ff mov       (%r8),%rdx
063be402 mov       8(%r8),%r8
063be406 callq     *0x18(%rax)
063be409 mov       %al,0x35(%rsp)
063be40d mov       0x35(%rsp),%cl
063be411 and       $1,%cl
063be414 call      0x0000`0000`063B`96F0
063be419 and       $1,%al
063be41b mov       %al,0x13E(%rsp)
063be422 movzbl    0x13E(%rsp),%eax
063be42a test      $1,%al
063be42c je        0x0000`0000`063B`E3CE
063be42e jmp       0x0000`0000`063B`E430
063be430 jmp       0x0000`0000`063B`E434
063be432 ud2
063be434 lea       0x63C`F910,%rcx
063be43b call      0x0000`0000`063B`9770
063be440 and       $1,%al
063be442 mov       %al,0x97(%rsp)
063be449 jmp       0x0000`0000`063B`E238
063be44e mov       0x36(%rsp),%cl
063be452 and       $1,%cl
063be455 call      0x0000`0000`063B`96F0
063be45a and       $1,%al
063be45c mov       %al,0x13F(%rsp)
063be463 movzbl    0x13F(%rsp),%eax
063be46b test      $1,%al
063be46d je        0x0000`0000`063B`E475
063be46f jmp       0x0000`0000`063B`E471
063be471 jmp       0x0000`0000`063B`E48F
063be473 ud2
063be475 mov       0xD8(%rsp),%rax
063be47d add       $1,%rax
063be481 mov       %rax,0x28(%rsp)
063be486 setb      %al
063be489 test      $1,%al
063be48b jne       0x0000`0000`063B`E4BB
063be48d jmp       0x0000`0000`063B`E4A9
063be48f lea       0x63C`F928,%rcx
063be496 call      0x0000`0000`063B`9770
063be49b and       $1,%al
063be49d mov       %al,0x97(%rsp)
063be4a4 jmp       0x0000`0000`063B`E238
063be4a9 mov       0x28(%rsp),%rax
063be4ae mov       %rax,0xD8(%rsp)
063be4b6 jmp       0x0000`0000`063B`E32F
063be4bb lea       0x63C`E220,%rcx
063be4c2 lea       0x63C`F940,%r8
063be4c9 mov       $0x1C,%edx
063be4ce call      0x0000`0000`063B`8E30
063be4d3 ud2
063be4d5 mov       $1,%eax
063be4da xor       %ecx,%ecx
063be4dc cmpq      $0,0x1A0(%rsp)
063be4e5 cmove     %rcx,%rax
063be4e9 cmp       $1,%rax
063be4ed jne       0x0000`0000`063B`E51F
063be4ef mov       0x1A0(%rsp),%r8
063be4f7 mov       %r8,0x250(%rsp)
063be4ff mov       0xB8(%rsp),%rcx
063be507 mov       0xC0(%rsp),%rax
063be50f mov       (%r8),%rdx
063be512 mov       8(%r8),%r8
063be516 callq     *0x18(%rax)
063be519 mov       %al,0x27(%rsp)
063be51d jmp       0x0000`0000`063B`E52C
063be51f movb      $0,0x97(%rsp)
063be527 jmp       0x0000`0000`063B`E238
063be52c mov       0x27(%rsp),%cl
063be530 and       $1,%cl
063be533 call      0x0000`0000`063B`96F0
063be538 and       $1,%al
063be53a mov       %al,0x1AF(%rsp)
063be541 movzbl    0x1AF(%rsp),%eax
063be549 test      $1,%al
063be54b je        0x0000`0000`063B`E51F
063be54d jmp       0x0000`0000`063B`E54F
063be54f jmp       0x0000`0000`063B`E553
063be551 ud2
063be553 lea       0x63C`F958,%rcx
063be55a call      0x0000`0000`063B`9770
063be55f and       $1,%al
063be561 mov       %al,0x97(%rsp)
063be568 jmp       0x0000`0000`063B`E238

core::fmt::run:
063be570 sub       $0x98,%rsp
063be577 mov       %r9,0x40(%rsp)
063be57c mov       %r8,0x50(%rsp)
063be581 mov       %rdx,%r8
063be584 mov       0x40(%rsp),%rdx
063be589 mov       %r8,0x48(%rsp)
063be58e mov       %rcx,%rax
063be591 mov       0x50(%rsp),%rcx
063be596 mov       %rax,0x58(%rsp)
063be59b mov       %rax,0x70(%rsp)
063be5a0 mov       %r8,0x78(%rsp)
063be5a5 mov       %rcx,0x80(%rsp)
063be5ad mov       %rdx,0x88(%rsp)
063be5b5 mov       0x28(%r8),%r9d
063be5b9 mov       %r9d,0x34(%rax)
063be5bd mov       0x30(%r8),%r9b
063be5c1 mov       %r9b,0x38(%rax)
063be5c5 mov       0x2C(%r8),%r9d
063be5c9 mov       %r9d,0x30(%rax)
063be5cd add       $8,%r8
063be5d1 add       $0x10,%r8
063be5d5 call      0x0000`0000`063B`E6C0
063be5da mov       %rax,0x60(%rsp)
063be5df mov       %rdx,0x68(%rsp)
063be5e4 mov       0x40(%rsp),%rdx
063be5e9 mov       0x50(%rsp),%rcx
063be5ee mov       0x48(%rsp),%r8
063be5f3 mov       0x58(%rsp),%rax
063be5f8 mov       0x68(%rsp),%r9
063be5fd mov       0x60(%rsp),%r10
063be602 mov       %r10,(%rax)
063be605 mov       %r9,8(%rax)
063be609 add       $8,%r8
063be60d call      0x0000`0000`063B`E6C0
063be612 mov       %rax,0x30(%rsp)
063be617 mov       %rdx,0x38(%rsp)
063be61c mov       0x48(%rsp),%rax
063be621 mov       0x40(%rsp),%rcx
063be626 mov       0x58(%rsp),%rdx
063be62b mov       0x38(%rsp),%r8
063be630 mov       0x30(%rsp),%r9
063be635 mov       %r9,0x10(%rdx)
063be639 mov       %r8,0x18(%rdx)
063be63d cmp       %rcx,(%rax)
063be640 setb      %al
063be643 xor       $0xFF,%al
063be645 test      $1,%al
063be647 jne       0x0000`0000`063B`E66F
063be649 mov       0x40(%rsp),%rdx
063be64e mov       0x50(%rsp),%rcx
063be653 mov       0x48(%rsp),%rax
063be658 mov       (%rax),%r8
063be65b call      0x0000`0000`063C`2960
063be660 mov       %rax,0x28(%rsp)
063be665 mov       %rax,0x90(%rsp)
063be66d jmp       0x0000`0000`063B`E689
063be66f lea       0x63C`F970,%rcx
063be676 lea       0x63C`F9A0,%r8
063be67d mov       $0x2B,%edx
063be682 call      0x0000`0000`063B`8E30
063be687 ud2
063be689 mov       0x58(%rsp),%rdx
063be68e mov       0x28(%rsp),%rcx
063be693 mov       8(%rcx),%rax
063be697 mov       (%rcx),%rcx
063be69a call      *%rax
063be69c mov       %al,0x27(%rsp)
063be6a0 mov       0x27(%rsp),%al
063be6a4 and       $1,%al
063be6a6 movzbl    %al,%eax
063be6a9 add       $0x98,%rsp
063be6b0 ret

core::fmt::getcount:
063be6c0 sub       $0x88,%rsp
063be6c7 mov       %r8,0x30(%rsp)
063be6cc mov       %rdx,0x38(%rsp)
063be6d1 mov       %rcx,0x40(%rsp)
063be6d6 mov       %rcx,0x60(%rsp)
063be6db mov       %rdx,0x68(%rsp)
063be6e0 mov       %r8,0x70(%rsp)
063be6e5 mov       (%r8),%rax
063be6e8 mov       %rax,0x48(%rsp)
063be6ed test      %rax,%rax
063be6f0 je        0x0000`0000`063B`E705
063be6f2 jmp       0x0000`0000`063B`E6F4
063be6f4 mov       0x48(%rsp),%rax
063be6f9 sub       $1,%rax
063be6fd je        0x0000`0000`063B`E726
063be6ff jmp       0x0000`0000`063B`E701
063be701 jmp       0x0000`0000`063B`E74C
063be703 ud2
063be705 mov       0x30(%rsp),%rax
063be70a mov       8(%rax),%rax
063be70e mov       %rax,0x80(%rsp)
063be716 mov       %rax,0x58(%rsp)
063be71b movq      $1,0x50(%rsp)
063be724 jmp       0x0000`0000`063B`E755
063be726 mov       0x38(%rsp),%rcx
063be72b mov       0x30(%rsp),%rax
063be730 mov       8(%rax),%rax
063be734 mov       %rax,0x28(%rsp)
063be739 mov       %rax,0x78(%rsp)
063be73e cmp       %rcx,%rax
063be741 setb      %al
063be744 xor       $0xFF,%al
063be746 test      $1,%al
063be748 jne       0x0000`0000`063B`E782
063be74a jmp       0x0000`0000`063B`E767
063be74c movq      $0,0x50(%rsp)
063be755 mov       0x50(%rsp),%rax
063be75a mov       0x58(%rsp),%rdx
063be75f add       $0x88,%rsp
063be766 ret
063be767 mov       0x28(%rsp),%r8
063be76c mov       0x38(%rsp),%rdx
063be771 mov       0x40(%rsp),%rcx
063be776 call      0x0000`0000`063C`2960
063be77b mov       %rax,0x20(%rsp)
063be780 jmp       0x0000`0000`063B`E79C
063be782 lea       0x63C`F9B8,%rcx
063be789 lea       0x63C`F9D8,%r8
063be790 mov       $0x20,%edx
063be795 call      0x0000`0000`063B`8E30
063be79a ud2
063be79c mov       0x20(%rsp),%rcx
063be7a1 call      0x0000`0000`063B`DDE0
063be7a6 mov       %rdx,0x58(%rsp)
063be7ab mov       %rax,0x50(%rsp)
063be7b0 jmp       0x0000`0000`063B`E755

core::fmt::PostPadding::new:
063be7c0 sub       $0x20,%rsp
063be7c4 mov       %ecx,0x14(%rsp)
063be7c8 mov       %rdx,0x18(%rsp)
063be7cd mov       %ecx,8(%rsp)
063be7d1 mov       %rdx,(%rsp)
063be7d5 mov       (%rsp),%rax
063be7d9 mov       8(%rsp),%edx
063be7dd add       $0x20,%rsp
063be7e1 ret

core::fmt::PostPadding::write:
063be7f0 sub       $0xB8,%rsp
063be7f7 mov       %r8,0x30(%rsp)
063be7fc mov       %edx,0x3C(%rsp)
063be800 mov       %rcx,0x90(%rsp)
063be808 mov       %edx,0x98(%rsp)
063be80f mov       %r8,0xA0(%rsp)
063be817 movq      $0,0x58(%rsp)
063be820 mov       %rcx,0x60(%rsp)
063be825 mov       0x58(%rsp),%rcx
063be82a mov       0x60(%rsp),%rdx
063be82f call      0x0000`0000`063B`7F30
063be834 mov       %rax,0x40(%rsp)
063be839 mov       %rdx,0x48(%rsp)
063be83e mov       0x48(%rsp),%rax
063be843 mov       0x40(%rsp),%rcx
063be848 mov       %rcx,0x68(%rsp)
063be84d mov       %rax,0x70(%rsp)
063be852 lea       0x68(%rsp),%rcx
063be857 call      0x0000`0000`063B`7E80
063be85c mov       %rdx,0x80(%rsp)
063be864 mov       %rax,0x78(%rsp)
063be869 mov       0x78(%rsp),%rax
063be86e test      %rax,%rax
063be871 je        0x0000`0000`063B`E879
063be873 jmp       0x0000`0000`063B`E875
063be875 jmp       0x0000`0000`063B`E880
063be877 ud2
063be879 movb      $0,0x57(%rsp)
063be87e jmp       0x0000`0000`063B`E8D1
063be880 mov       0x3C(%rsp),%edx
063be884 mov       0x30(%rsp),%rax
063be889 mov       0x20(%rax),%rcx
063be88d mov       0x28(%rax),%rax
063be891 callq     *0x20(%rax)
063be894 mov       %al,0x2F(%rsp)
063be898 mov       0x2F(%rsp),%cl
063be89c and       $1,%cl
063be89f call      0x0000`0000`063B`96F0
063be8a4 and       $1,%al
063be8a6 mov       %al,0x8F(%rsp)
063be8ad movzbl    0x8F(%rsp),%eax
063be8b5 test      $1,%al
063be8b7 je        0x0000`0000`063B`E852
063be8b9 jmp       0x0000`0000`063B`E8BB
063be8bb jmp       0x0000`0000`063B`E8BF
063be8bd ud2
063be8bf lea       0x63C`F9F0,%rcx
063be8c6 call      0x0000`0000`063B`9770
063be8cb and       $1,%al
063be8cd mov       %al,0x57(%rsp)
063be8d1 mov       0x57(%rsp),%al
063be8d5 and       $1,%al
063be8d7 movzbl    %al,%eax
063be8da add       $0xB8,%rsp
063be8e1 ret

core::fmt::Formatter::wrap_buf<core::fmt::builders::impl$1::wrap::closure_env$0>:
063be8f0 push      %rsi
063be8f1 push      %rdi
063be8f2 push      %rbp
063be8f3 push      %rbx
063be8f4 sub       $0x88,%rsp
063be8fb mov       %r9,0x28(%rsp)
063be900 mov       %r8,0x38(%rsp)
063be905 mov       %rdx,%rax
063be908 mov       0x28(%rsp),%rdx
063be90d mov       %rax,0x30(%rsp)
063be912 mov       %rcx,%r8
063be915 mov       0x38(%rsp),%rcx
063be91a mov       %r8,0x40(%rsp)
063be91f mov       %r8,0x48(%rsp)
063be924 mov       %rax,0x70(%rsp)
063be929 mov       %rcx,0x78(%rsp)
063be92e mov       %rdx,0x80(%rsp)
063be936 mov       0x20(%rax),%r8
063be93a mov       0x28(%rax),%rax
063be93e mov       %r8,0x60(%rsp)
063be943 mov       %rax,0x68(%rsp)
063be948 mov       0x60(%rsp),%r8
063be94d mov       0x68(%rsp),%r9
063be952 call      0x0000`0000`063B`9920
063be957 mov       %rax,0x50(%rsp)
063be95c mov       %rdx,0x58(%rsp)
063be961 mov       0x48(%rsp),%rax
063be966 mov       0x40(%rsp),%rcx
063be96b mov       0x58(%rsp),%rdx
063be970 mov       0x50(%rsp),%r8
063be975 mov       0x30(%rsp),%r9
063be97a mov       0x30(%r9),%ebp
063be97e mov       0x34(%r9),%edi
063be982 mov       0x38(%r9),%bl
063be986 mov       (%r9),%rsi
063be989 mov       8(%r9),%r11
063be98d mov       0x10(%r9),%r10
063be991 mov       0x18(%r9),%r9
063be995 mov       %ebp,0x30(%rcx)
063be998 mov       %edi,0x34(%rcx)
063be99b mov       %bl,0x38(%rcx)
063be99e mov       %rsi,(%rcx)
063be9a1 mov       %r11,8(%rcx)
063be9a5 mov       %r10,0x10(%rcx)
063be9a9 mov       %r9,0x18(%rcx)
063be9ad mov       %r8,0x20(%rcx)
063be9b1 mov       %rdx,0x28(%rcx)
063be9b5 add       $0x88,%rsp
063be9bc pop       %rbx
063be9bd pop       %rbp
063be9be pop       %rdi
063be9bf pop       %rsi
063be9c0 ret

core::fmt::Formatter::pad_integral:
063be9d0 sub       $0x288,%rsp
063be9d7 mov       %r9,0xE0(%rsp)
063be9df mov       %r8,0xE8(%rsp)
063be9e7 mov       %dl,%al
063be9e9 mov       %rcx,%r10
063be9ec mov       %r10,0xF0(%rsp)
063be9f4 mov       0x2B8(%rsp),%rdx
063be9fc mov       %rdx,0xF8(%rsp)
063bea04 mov       0x2B0(%rsp),%rcx
063bea0c mov       %rcx,0x100(%rsp)
063bea14 mov       %al,0x10E(%rsp)
063bea1b mov       %r10,0x168(%rsp)
063bea23 and       $1,%al
063bea25 mov       %al,0x177(%rsp)
063bea2c mov       %r8,0x178(%rsp)
063bea34 mov       %r9,0x180(%rsp)
063bea3c mov       %rcx,0x188(%rsp)
063bea44 mov       %rdx,0x190(%rsp)
063bea4c call      0x0000`0000`063C`6470
063bea51 mov       %rax,0x110(%rsp)
063bea59 mov       0x10E(%rsp),%al
063bea60 movl      $0x11`0000,0x11C(%rsp)
063bea6b xor       $0xFF,%al
063bea6d test      $1,%al
063bea6f jne       0x0000`0000`063B`EA87
063bea71 mov       0xF0(%rsp),%rcx
063bea79 call      0x0000`0000`063B`FAF0
063bea7e mov       %al,0xDF(%rsp)
063bea85 jmp       0x0000`0000`063B`EAEF
063bea87 movl      $0x2D,0x11C(%rsp)
063bea92 mov       0x110(%rsp),%rax
063bea9a add       $1,%rax
063bea9e mov       %rax,0xD0(%rsp)
063beaa6 setb      %al
063beaa9 test      $1,%al
063beaab jne       0x0000`0000`063B`EABF
063beaad mov       0xD0(%rsp),%rax
063beab5 mov       %rax,0x110(%rsp)
063beabd jmp       0x0000`0000`063B`EAD9
063beabf lea       0x63C`E220,%rcx
063beac6 lea       0x63C`FA08,%r8
063beacd mov       $0x1C,%edx
063bead2 call      0x0000`0000`063B`8E30
063bead7 ud2
063bead9 mov       0xF0(%rsp),%rcx
063beae1 call      0x0000`0000`063B`FB10
063beae6 mov       %al,0xCF(%rsp)
063beaed jmp       0x0000`0000`063B`EB4E
063beaef mov       0xDF(%rsp),%al
063beaf6 test      $1,%al
063beaf8 jne       0x0000`0000`063B`EAFC
063beafa jmp       0x0000`0000`063B`EAD9
063beafc movl      $0x2B,0x11C(%rsp)
063beb07 mov       0x110(%rsp),%rax
063beb0f add       $1,%rax
063beb13 mov       %rax,0xC0(%rsp)
063beb1b setb      %al
063beb1e test      $1,%al
063beb20 jne       0x0000`0000`063B`EB34
063beb22 mov       0xC0(%rsp),%rax
063beb2a mov       %rax,0x110(%rsp)
063beb32 jmp       0x0000`0000`063B`EAD9
063beb34 lea       0x63C`E220,%rcx
063beb3b lea       0x63C`FA20,%r8
063beb42 mov       $0x1C,%edx
063beb47 call      0x0000`0000`063B`8E30
063beb4c ud2
063beb4e mov       0xCF(%rsp),%al
063beb55 test      $1,%al
063beb57 jne       0x0000`0000`063B`EB6C
063beb59 jmp       0x0000`0000`063B`EB5B
063beb5b movq      $0,0x120(%rsp)
063beb67 jmp       0x0000`0000`063B`EC19
063beb6c mov       0xE0(%rsp),%rdx
063beb74 mov       0xE8(%rsp),%rcx
063beb7c call      0x0000`0000`063C`6850
063beb81 mov       %rax,0xB0(%rsp)
063beb89 mov       %rdx,0xB8(%rsp)
063beb91 mov       0xB8(%rsp),%rdx
063beb99 mov       0xB0(%rsp),%rcx
063beba1 call      0x0000`0000`063C`4930
063beba6 mov       %rax,0xA8(%rsp)
063bebae mov       0xA8(%rsp),%rax
063bebb6 add       0x110(%rsp),%rax
063bebbe mov       %rax,0xA0(%rsp)
063bebc6 setb      %al
063bebc9 test      $1,%al
063bebcb jne       0x0000`0000`063B`EBFF
063bebcd mov       0xE0(%rsp),%rax
063bebd5 mov       0xE8(%rsp),%rcx
063bebdd mov       0xA0(%rsp),%rdx
063bebe5 mov       %rdx,0x110(%rsp)
063bebed mov       %rcx,0x120(%rsp)
063bebf5 mov       %rax,0x128(%rsp)
063bebfd jmp       0x0000`0000`063B`EC19
063bebff lea       0x63C`E220,%rcx
063bec06 lea       0x63C`FA38,%r8
063bec0d mov       $0x1C,%edx
063bec12 call      0x0000`0000`063B`8E30
063bec17 ud2
063bec19 mov       0xF0(%rsp),%rax
063bec21 mov       (%rax),%rax
063bec24 test      %rax,%rax
063bec27 je        0x0000`0000`063B`EC2F
063bec29 jmp       0x0000`0000`063B`EC2B
063bec2b jmp       0x0000`0000`063B`EC5F
063bec2d ud2
063bec2f mov       0xF0(%rsp),%rcx
063bec37 mov       0x11C(%rsp),%edx
063bec3e mov       0x120(%rsp),%r8
063bec46 mov       0x128(%rsp),%r9
063bec4e call      0x0000`0000`063B`F290
063bec53 mov       %al,0x9F(%rsp)
063bec5a jmp       0x0000`0000`063B`F214
063bec5f mov       0xF0(%rsp),%rcx
063bec67 mov       %rcx,%rax
063bec6a add       $8,%rax
063bec6e mov       %rax,0x218(%rsp)
063bec76 mov       0x110(%rsp),%rax
063bec7e cmp       8(%rcx),%rax
063bec82 jae       0x0000`0000`063B`ECAC
063bec84 mov       0xF0(%rsp),%rcx
063bec8c mov       %rcx,%rax
063bec8f add       $8,%rax
063bec93 mov       %rax,0x228(%rsp)
063bec9b call      0x0000`0000`063B`FB30
063beca0 mov       %al,0x9E(%rsp)
063beca7 jmp       0x0000`0000`063B`ED64
063becac mov       0xF0(%rsp),%rcx
063becb4 mov       8(%rcx),%rax
063becb8 mov       %rax,0x220(%rsp)
063becc0 mov       0x11C(%rsp),%edx
063becc7 mov       0x120(%rsp),%r8
063beccf mov       0x128(%rsp),%r9
063becd7 call      0x0000`0000`063B`F290
063becdc mov       %al,0x9D(%rsp)
063bece3 mov       0x9D(%rsp),%cl
063becea and       $1,%cl
063beced call      0x0000`0000`063B`96F0
063becf2 and       $1,%al
063becf4 mov       %al,0x135(%rsp)
063becfb movzbl    0x135(%rsp),%eax
063bed03 test      $1,%al
063bed05 je        0x0000`0000`063B`ED0D
063bed07 jmp       0x0000`0000`063B`ED09
063bed09 jmp       0x0000`0000`063B`ED3B
063bed0b ud2
063bed0d mov       0xF8(%rsp),%r8
063bed15 mov       0x100(%rsp),%rdx
063bed1d mov       0xF0(%rsp),%rax
063bed25 mov       0x20(%rax),%rcx
063bed29 mov       0x28(%rax),%rax
063bed2d callq     *0x18(%rax)
063bed30 and       $1,%al
063bed32 mov       %al,0x10F(%rsp)
063bed39 jmp       0x0000`0000`063B`ED50
063bed3b lea       0x63C`FA50,%rcx
063bed42 call      0x0000`0000`063B`9770
063bed47 and       $1,%al
063bed49 mov       %al,0x10F(%rsp)
063bed50 mov       0x10F(%rsp),%al
063bed57 and       $1,%al
063bed59 movzbl    %al,%eax
063bed5c add       $0x288,%rsp
063bed63 ret
063bed64 mov       0x9E(%rsp),%al
063bed6b test      $1,%al
063bed6d jne       0x0000`0000`063B`EDA5
063bed6f jmp       0x0000`0000`063B`ED71
063bed71 mov       0xF0(%rsp),%rax
063bed79 mov       8(%rax),%rax
063bed7d mov       %rax,0x260(%rsp)
063bed85 sub       0x110(%rsp),%rax
063bed8d mov       %rax,0x90(%rsp)
063bed95 setb      %al
063bed98 test      $1,%al
063bed9a jne       0x0000`0000`063B`F07A
063beda0 jmp       0x0000`0000`063B`F04A
063beda5 mov       0xF0(%rsp),%rcx
063bedad mov       8(%rcx),%rax
063bedb1 mov       %rax,0x80(%rsp)
063bedb9 mov       %rax,0x230(%rsp)
063bedc1 add       $0x34,%rcx
063bedc5 mov       $0x30,%edx
063bedca call      0x0000`0000`063B`4E10
063bedcf mov       %eax,0x8C(%rsp)
063bedd6 mov       %eax,0x238(%rsp)
063beddd mov       0xF0(%rsp),%rcx
063bede5 add       $0x38,%rcx
063bede9 movb      $1,0x136(%rsp)
063bedf1 mov       0x136(%rsp),%dl
063bedf8 call      0x0000`0000`063B`4DD0
063bedfd mov       %al,0x7F(%rsp)
063bee01 mov       %al,0x23F(%rsp)
063bee08 mov       0xF0(%rsp),%rcx
063bee10 mov       0x11C(%rsp),%edx
063bee17 mov       0x120(%rsp),%r8
063bee1f mov       0x128(%rsp),%r9
063bee27 call      0x0000`0000`063B`F290
063bee2c mov       %al,0x7E(%rsp)
063bee30 mov       0x7E(%rsp),%cl
063bee34 and       $1,%cl
063bee37 call      0x0000`0000`063B`96F0
063bee3c and       $1,%al
063bee3e mov       %al,0x137(%rsp)
063bee45 movzbl    0x137(%rsp),%eax
063bee4d test      $1,%al
063bee4f je        0x0000`0000`063B`EE57
063bee51 jmp       0x0000`0000`063B`EE53
063bee53 jmp       0x0000`0000`063B`EE75
063bee55 ud2
063bee57 mov       0x80(%rsp),%rax
063bee5f sub       0x110(%rsp),%rax
063bee67 mov       %rax,0x70(%rsp)
063bee6c setb      %al
063bee6f test      $1,%al
063bee71 jne       0x0000`0000`063B`EEBC
063bee73 jmp       0x0000`0000`063B`EE8F
063bee75 lea       0x63C`FA68,%rcx
063bee7c call      0x0000`0000`063B`9770
063bee81 and       $1,%al
063bee83 mov       %al,0x10F(%rsp)
063bee8a jmp       0x0000`0000`063B`ED50
063bee8f mov       0x70(%rsp),%rdx
063bee94 mov       0xF0(%rsp),%rcx
063bee9c movb      $1,0x14D(%rsp)
063beea4 mov       0x14D(%rsp),%r8b
063beeac call      0x0000`0000`063B`F7E0
063beeb1 mov       %rax,0x60(%rsp)
063beeb6 mov       %edx,0x6C(%rsp)
063beeba jmp       0x0000`0000`063B`EED6
063beebc lea       0x63C`E1F0,%rcx
063beec3 lea       0x63C`FA80,%r8
063beeca mov       $0x21,%edx
063beecf call      0x0000`0000`063B`8E30
063beed4 ud2
063beed6 mov       0x6C(%rsp),%edx
063beeda mov       0x60(%rsp),%rcx
063beedf call      0x0000`0000`063B`9610
063beee4 mov       %edx,0x140(%rsp)
063beeeb mov       %rax,0x138(%rsp)
063beef3 mov       0x140(%rsp),%eax
063beefa add       $0xFFEF`0000,%eax
063beeff sete      %al
063bef02 movzbl    %al,%eax
063bef05 jne       0x0000`0000`063B`EF0D
063bef07 jmp       0x0000`0000`063B`EF09
063bef09 jmp       0x0000`0000`063B`EF6C
063bef0b ud2
063bef0d mov       0xF8(%rsp),%r8
063bef15 mov       0x100(%rsp),%rdx
063bef1d mov       0xF0(%rsp),%rax
063bef25 mov       0x138(%rsp),%r9
063bef2d mov       %r9,0x50(%rsp)
063bef32 mov       0x140(%rsp),%ecx
063bef39 mov       %ecx,0x58(%rsp)
063bef3d mov       %r9,0x240(%rsp)
063bef45 mov       %ecx,0x248(%rsp)
063bef4c mov       %r9,0x250(%rsp)
063bef54 mov       %ecx,0x258(%rsp)
063bef5b mov       0x20(%rax),%rcx
063bef5f mov       0x28(%rax),%rax
063bef63 callq     *0x18(%rax)
063bef66 mov       %al,0x5F(%rsp)
063bef6a jmp       0x0000`0000`063B`EF86
063bef6c lea       0x63C`FA98,%rcx
063bef73 call      0x0000`0000`063B`9770
063bef78 and       $1,%al
063bef7a mov       %al,0x10F(%rsp)
063bef81 jmp       0x0000`0000`063B`ED50
063bef86 mov       0x5F(%rsp),%cl
063bef8a and       $1,%cl
063bef8d call      0x0000`0000`063B`96F0
063bef92 and       $1,%al
063bef94 mov       %al,0x14E(%rsp)
063bef9b movzbl    0x14E(%rsp),%eax
063befa3 test      $1,%al
063befa5 je        0x0000`0000`063B`EFAD
063befa7 jmp       0x0000`0000`063B`EFA9
063befa9 jmp       0x0000`0000`063B`EFC9
063befab ud2
063befad mov       0xF0(%rsp),%r8
063befb5 mov       0x58(%rsp),%edx
063befb9 mov       0x50(%rsp),%rcx
063befbe call      0x0000`0000`063B`E7F0
063befc3 mov       %al,0x4F(%rsp)
063befc7 jmp       0x0000`0000`063B`EFE3
063befc9 lea       0x63C`FAB0,%rcx
063befd0 call      0x0000`0000`063B`9770
063befd5 and       $1,%al
063befd7 mov       %al,0x10F(%rsp)
063befde jmp       0x0000`0000`063B`ED50
063befe3 mov       0x4F(%rsp),%cl
063befe7 and       $1,%cl
063befea call      0x0000`0000`063B`96F0
063befef and       $1,%al
063beff1 mov       %al,0x14F(%rsp)
063beff8 movzbl    0x14F(%rsp),%eax
063bf000 test      $1,%al
063bf002 je        0x0000`0000`063B`F00A
063bf004 jmp       0x0000`0000`063B`F006
063bf006 jmp       0x0000`0000`063B`F030
063bf008 ud2
063bf00a mov       0xF0(%rsp),%rax
063bf012 mov       0x7F(%rsp),%cl
063bf016 mov       0x8C(%rsp),%edx
063bf01d mov       %edx,0x34(%rax)
063bf020 mov       %cl,0x38(%rax)
063bf023 movb      $0,0x10F(%rsp)
063bf02b jmp       0x0000`0000`063B`ED50
063bf030 lea       0x63C`FAC8,%rcx
063bf037 call      0x0000`0000`063B`9770
063bf03c and       $1,%al
063bf03e mov       %al,0x10F(%rsp)
063bf045 jmp       0x0000`0000`063B`ED50
063bf04a mov       0x90(%rsp),%rdx
063bf052 mov       0xF0(%rsp),%rcx
063bf05a movb      $1,0x165(%rsp)
063bf062 mov       0x165(%rsp),%r8b
063bf06a call      0x0000`0000`063B`F7E0
063bf06f mov       %rax,0x40(%rsp)
063bf074 mov       %edx,0x48(%rsp)
063bf078 jmp       0x0000`0000`063B`F094
063bf07a lea       0x63C`E1F0,%rcx
063bf081 lea       0x63C`FAE0,%r8
063bf088 mov       $0x21,%edx
063bf08d call      0x0000`0000`063B`8E30
063bf092 ud2
063bf094 mov       0x48(%rsp),%edx
063bf098 mov       0x40(%rsp),%rcx
063bf09d call      0x0000`0000`063B`9610
063bf0a2 mov       %edx,0x158(%rsp)
063bf0a9 mov       %rax,0x150(%rsp)
063bf0b1 mov       0x158(%rsp),%eax
063bf0b8 add       $0xFFEF`0000,%eax
063bf0bd sete      %al
063bf0c0 movzbl    %al,%eax
063bf0c3 jne       0x0000`0000`063B`F0CB
063bf0c5 jmp       0x0000`0000`063B`F0C7
063bf0c7 jmp       0x0000`0000`063B`F12B
063bf0c9 ud2
063bf0cb mov       0xF0(%rsp),%rcx
063bf0d3 mov       0x150(%rsp),%rdx
063bf0db mov       %rdx,0x30(%rsp)
063bf0e0 mov       0x158(%rsp),%eax
063bf0e7 mov       %eax,0x38(%rsp)
063bf0eb mov       %rdx,0x268(%rsp)
063bf0f3 mov       %eax,0x270(%rsp)
063bf0fa mov       %rdx,0x278(%rsp)
063bf102 mov       %eax,0x280(%rsp)
063bf109 mov       0x11C(%rsp),%edx
063bf110 mov       0x120(%rsp),%r8
063bf118 mov       0x128(%rsp),%r9
063bf120 call      0x0000`0000`063B`F290
063bf125 mov       %al,0x3F(%rsp)
063bf129 jmp       0x0000`0000`063B`F145
063bf12b lea       0x63C`FAF8,%rcx
063bf132 call      0x0000`0000`063B`9770
063bf137 and       $1,%al
063bf139 mov       %al,0x10F(%rsp)
063bf140 jmp       0x0000`0000`063B`ED50
063bf145 mov       0x3F(%rsp),%cl
063bf149 and       $1,%cl
063bf14c call      0x0000`0000`063B`96F0
063bf151 and       $1,%al
063bf153 mov       %al,0x166(%rsp)
063bf15a movzbl    0x166(%rsp),%eax
063bf162 test      $1,%al
063bf164 je        0x0000`0000`063B`F16C
063bf166 jmp       0x0000`0000`063B`F168
063bf168 jmp       0x0000`0000`063B`F195
063bf16a ud2
063bf16c mov       0xF8(%rsp),%r8
063bf174 mov       0x100(%rsp),%rdx
063bf17c mov       0xF0(%rsp),%rax
063bf184 mov       0x20(%rax),%rcx
063bf188 mov       0x28(%rax),%rax
063bf18c callq     *0x18(%rax)
063bf18f mov       %al,0x2F(%rsp)
063bf193 jmp       0x0000`0000`063B`F1AF
063bf195 lea       0x63C`FB10,%rcx
063bf19c call      0x0000`0000`063B`9770
063bf1a1 and       $1,%al
063bf1a3 mov       %al,0x10F(%rsp)
063bf1aa jmp       0x0000`0000`063B`ED50
063bf1af mov       0x2F(%rsp),%cl
063bf1b3 and       $1,%cl
063bf1b6 call      0x0000`0000`063B`96F0
063bf1bb and       $1,%al
063bf1bd mov       %al,0x167(%rsp)
063bf1c4 movzbl    0x167(%rsp),%eax
063bf1cc test      $1,%al
063bf1ce je        0x0000`0000`063B`F1D6
063bf1d0 jmp       0x0000`0000`063B`F1D2
063bf1d2 jmp       0x0000`0000`063B`F1FA
063bf1d4 ud2
063bf1d6 mov       0xF0(%rsp),%r8
063bf1de mov       0x38(%rsp),%edx
063bf1e2 mov       0x30(%rsp),%rcx
063bf1e7 call      0x0000`0000`063B`E7F0
063bf1ec and       $1,%al
063bf1ee mov       %al,0x10F(%rsp)
063bf1f5 jmp       0x0000`0000`063B`ED50
063bf1fa lea       0x63C`FB28,%rcx
063bf201 call      0x0000`0000`063B`9770
063bf206 and       $1,%al
063bf208 mov       %al,0x10F(%rsp)
063bf20f jmp       0x0000`0000`063B`ED50
063bf214 mov       0x9F(%rsp),%cl
063bf21b and       $1,%cl
063bf21e call      0x0000`0000`063B`96F0
063bf223 and       $1,%al
063bf225 mov       %al,0x134(%rsp)
063bf22c movzbl    0x134(%rsp),%eax
063bf234 test      $1,%al
063bf236 je        0x0000`0000`063B`F23E
063bf238 jmp       0x0000`0000`063B`F23A
063bf23a jmp       0x0000`0000`063B`F26F
063bf23c ud2
063bf23e mov       0xF8(%rsp),%r8
063bf246 mov       0x100(%rsp),%rdx
063bf24e mov       0xF0(%rsp),%rax
063bf256 mov       0x20(%rax),%rcx
063bf25a mov       0x28(%rax),%rax
063bf25e callq     *0x18(%rax)
063bf261 and       $1,%al
063bf263 mov       %al,0x10F(%rsp)
063bf26a jmp       0x0000`0000`063B`ED50
063bf26f lea       0x63C`FB40,%rcx
063bf276 call      0x0000`0000`063B`9770
063bf27b and       $1,%al
063bf27d mov       %al,0x10F(%rsp)
063bf284 jmp       0x0000`0000`063B`ED50

core::fmt::impl$9::pad_integral::write_prefix:
063bf290 sub       $0x78,%rsp
063bf294 mov       %rcx,0x28(%rsp)
063bf299 mov       %edx,0x34(%rsp)
063bf29d mov       %r8,0x38(%rsp)
063bf2a2 mov       %r9,0x40(%rsp)
063bf2a7 mov       %rcx,0x50(%rsp)
063bf2ac mov       0x34(%rsp),%edx
063bf2b0 sub       $0x11`0000,%edx
063bf2b6 mov       $1,%eax
063bf2bb xor       %ecx,%ecx
063bf2bd cmp       $0,%edx
063bf2c0 cmove     %rcx,%rax
063bf2c4 cmp       $1,%rax
063bf2c8 jne       0x0000`0000`063B`F2E8
063bf2ca mov       0x28(%rsp),%rax
063bf2cf mov       0x34(%rsp),%edx
063bf2d3 mov       %edx,0x64(%rsp)
063bf2d7 mov       0x20(%rax),%rcx
063bf2db mov       0x28(%rax),%rax
063bf2df callq     *0x20(%rax)
063bf2e2 mov       %al,0x27(%rsp)
063bf2e6 jmp       0x0000`0000`063B`F301
063bf2e8 mov       $1,%eax
063bf2ed xor       %ecx,%ecx
063bf2ef cmpq      $0,0x38(%rsp)
063bf2f5 cmove     %rcx,%rax
063bf2f9 cmp       $1,%rax
063bf2fd je        0x0000`0000`063B`F342
063bf2ff jmp       0x0000`0000`063B`F36E
063bf301 mov       0x27(%rsp),%cl
063bf305 and       $1,%cl
063bf308 call      0x0000`0000`063B`96F0
063bf30d and       $1,%al
063bf30f mov       %al,0x4F(%rsp)
063bf313 movzbl    0x4F(%rsp),%eax
063bf318 test      $1,%al
063bf31a je        0x0000`0000`063B`F2E8
063bf31c jmp       0x0000`0000`063B`F31E
063bf31e jmp       0x0000`0000`063B`F322
063bf320 ud2
063bf322 lea       0x63C`FB58,%rcx
063bf329 call      0x0000`0000`063B`9770
063bf32e and       $1,%al
063bf330 mov       %al,0x4E(%rsp)
063bf334 mov       0x4E(%rsp),%al
063bf338 and       $1,%al
063bf33a movzbl    %al,%eax
063bf33d add       $0x78,%rsp
063bf341 ret
063bf342 mov       0x28(%rsp),%rax
063bf347 mov       0x38(%rsp),%rdx
063bf34c mov       0x40(%rsp),%r8
063bf351 mov       %rdx,0x68(%rsp)
063bf356 mov       %r8,0x70(%rsp)
063bf35b mov       0x20(%rax),%rcx
063bf35f mov       0x28(%rax),%rax
063bf363 callq     *0x18(%rax)
063bf366 and       $1,%al
063bf368 mov       %al,0x4E(%rsp)
063bf36c jmp       0x0000`0000`063B`F334
063bf36e movb      $0,0x4E(%rsp)
063bf373 jmp       0x0000`0000`063B`F334

core::fmt::Formatter::pad:
063bf380 sub       $0x178,%rsp
063bf387 mov       %rcx,0x90(%rsp)
063bf38f mov       %rdx,0xA0(%rsp)
063bf397 mov       %r8,0xA8(%rsp)
063bf39f mov       %rcx,0x118(%rsp)
063bf3a7 call      0x0000`0000`063B`83F0
063bf3ac mov       %al,0x9F(%rsp)
063bf3b3 mov       0x9F(%rsp),%al
063bf3ba test      $1,%al
063bf3bc jne       0x0000`0000`063B`F3CA
063bf3be jmp       0x0000`0000`063B`F3C0
063bf3c0 movb      $0,0xB7(%rsp)
063bf3c8 jmp       0x0000`0000`063B`F3F2
063bf3ca mov       0x90(%rsp),%rcx
063bf3d2 add       $0x10,%rcx
063bf3d6 call      0x0000`0000`063B`83F0
063bf3db mov       %al,0x8F(%rsp)
063bf3e2 mov       0x8F(%rsp),%al
063bf3e9 and       $1,%al
063bf3eb mov       %al,0xB7(%rsp)
063bf3f2 testb     $1,0xB7(%rsp)
063bf3fa jne       0x0000`0000`063B`F40D
063bf3fc mov       0x90(%rsp),%rax
063bf404 cmpq      $1,0x10(%rax)
063bf409 je        0x0000`0000`063B`F44D
063bf40b jmp       0x0000`0000`063B`F488
063bf40d mov       0x90(%rsp),%rax
063bf415 mov       0x20(%rax),%rcx
063bf419 mov       0x28(%rax),%rax
063bf41d mov       0xA0(%rsp),%rdx
063bf425 mov       0xA8(%rsp),%r8
063bf42d callq     *0x18(%rax)
063bf430 and       $1,%al
063bf432 mov       %al,0xB6(%rsp)
063bf439 mov       0xB6(%rsp),%al
063bf440 and       $1,%al
063bf442 movzbl    %al,%eax
063bf445 add       $0x178,%rsp
063bf44c ret
063bf44d mov       0x90(%rsp),%rax
063bf455 mov       0x18(%rax),%rax
063bf459 mov       %rax,0x80(%rsp)
063bf461 mov       %rax,0x138(%rsp)
063bf469 mov       0xA0(%rsp),%rdx
063bf471 mov       0xA8(%rsp),%r8
063bf479 lea       0xD8(%rsp),%rcx
063bf481 call      0x0000`0000`063C`68D0
063bf486 jmp       0x0000`0000`063B`F4C3
063bf488 mov       0xA0(%rsp),%rcx
063bf490 mov       0xA8(%rsp),%rax
063bf498 mov       %rcx,0xB8(%rsp)
063bf4a0 mov       %rax,0xC0(%rsp)
063bf4a8 mov       0x90(%rsp),%rax
063bf4b0 mov       (%rax),%rax
063bf4b3 test      %rax,%rax
063bf4b6 je        0x0000`0000`063B`F5A4
063bf4bc jmp       0x0000`0000`063B`F4BE
063bf4be jmp       0x0000`0000`063B`F5D5
063bf4c3 mov       0x80(%rsp),%rdx
063bf4cb lea       0xD8(%rsp),%rcx
063bf4d3 call      0x0000`0000`063B`80D0
063bf4d8 mov       %edx,0xD0(%rsp)
063bf4df mov       %rax,0xC8(%rsp)
063bf4e7 mov       0xD0(%rsp),%edx
063bf4ee sub       $0x11`0000,%edx
063bf4f4 mov       $1,%eax
063bf4f9 xor       %ecx,%ecx
063bf4fb cmp       $0,%edx
063bf4fe cmove     %rcx,%rax
063bf502 cmp       $1,%rax
063bf506 jne       0x0000`0000`063B`F549
063bf508 mov       0xC8(%rsp),%rax
063bf510 mov       %rax,0x140(%rsp)
063bf518 mov       0xA0(%rsp),%rcx
063bf520 mov       0xA8(%rsp),%rdx
063bf528 mov       %rax,0xF0(%rsp)
063bf530 mov       0xF0(%rsp),%r8
063bf538 call      0x0000`0000`063C`6800
063bf53d mov       %rax,0x70(%rsp)
063bf542 mov       %rdx,0x78(%rsp)
063bf547 jmp       0x0000`0000`063B`F56E
063bf549 mov       0xA0(%rsp),%rcx
063bf551 mov       0xA8(%rsp),%rax
063bf559 mov       %rcx,0xB8(%rsp)
063bf561 mov       %rax,0xC0(%rsp)
063bf569 jmp       0x0000`0000`063B`F4A8
063bf56e mov       0x78(%rsp),%rdx
063bf573 mov       0x70(%rsp),%rcx
063bf578 mov       0xA0(%rsp),%r8
063bf580 mov       0xA8(%rsp),%r9
063bf588 call      0x0000`0000`063B`8560
063bf58d mov       %rdx,0xC0(%rsp)
063bf595 mov       %rax,0xB8(%rsp)
063bf59d jmp       0x0000`0000`063B`F4A8
063bf5a2 ud2
063bf5a4 mov       0x90(%rsp),%rax
063bf5ac mov       0x20(%rax),%rcx
063bf5b0 mov       0x28(%rax),%rax
063bf5b4 mov       0xB8(%rsp),%rdx
063bf5bc mov       0xC0(%rsp),%r8
063bf5c4 callq     *0x18(%rax)
063bf5c7 and       $1,%al
063bf5c9 mov       %al,0xB6(%rsp)
063bf5d0 jmp       0x0000`0000`063B`F439
063bf5d5 mov       0x90(%rsp),%rax
063bf5dd mov       8(%rax),%rax
063bf5e1 mov       %rax,0x58(%rsp)
063bf5e6 mov       %rax,0x148(%rsp)
063bf5ee mov       0xB8(%rsp),%rcx
063bf5f6 mov       0xC0(%rsp),%rdx
063bf5fe call      0x0000`0000`063C`6850
063bf603 mov       %rax,0x60(%rsp)
063bf608 mov       %rdx,0x68(%rsp)
063bf60d mov       0x68(%rsp),%rdx
063bf612 mov       0x60(%rsp),%rcx
063bf617 call      0x0000`0000`063C`4930
063bf61c mov       %rax,0x50(%rsp)
063bf621 mov       %rax,0x150(%rsp)
063bf629 mov       0x50(%rsp),%rax
063bf62e mov       0x58(%rsp),%rcx
063bf633 cmp       %rcx,%rax
063bf636 jae       0x0000`0000`063B`F65B
063bf638 mov       0x50(%rsp),%rcx
063bf63d mov       0x58(%rsp),%rax
063bf642 movb      $0,0xFF(%rsp)
063bf64a sub       %rcx,%rax
063bf64d mov       %rax,0x48(%rsp)
063bf652 setb      %al
063bf655 test      $1,%al
063bf657 jne       0x0000`0000`063B`F6B1
063bf659 jmp       0x0000`0000`063B`F68C
063bf65b mov       0x90(%rsp),%rax
063bf663 mov       0x20(%rax),%rcx
063bf667 mov       0x28(%rax),%rax
063bf66b mov       0xB8(%rsp),%rdx
063bf673 mov       0xC0(%rsp),%r8
063bf67b callq     *0x18(%rax)
063bf67e and       $1,%al
063bf680 mov       %al,0xB6(%rsp)
063bf687 jmp       0x0000`0000`063B`F439
063bf68c mov       0x48(%rsp),%rdx
063bf691 mov       0x90(%rsp),%rcx
063bf699 mov       0xFF(%rsp),%r8b
063bf6a1 call      0x0000`0000`063B`F7E0
063bf6a6 mov       %rax,0x38(%rsp)
063bf6ab mov       %edx,0x44(%rsp)
063bf6af jmp       0x0000`0000`063B`F6CB
063bf6b1 lea       0x63C`E1F0,%rcx
063bf6b8 lea       0x63C`FB70,%r8
063bf6bf mov       $0x21,%edx
063bf6c4 call      0x0000`0000`063B`8E30
063bf6c9 ud2
063bf6cb mov       0x44(%rsp),%edx
063bf6cf mov       0x38(%rsp),%rcx
063bf6d4 call      0x0000`0000`063B`9610
063bf6d9 mov       %edx,0x108(%rsp)
063bf6e0 mov       %rax,0x100(%rsp)
063bf6e8 mov       0x108(%rsp),%eax
063bf6ef add       $0xFFEF`0000,%eax
063bf6f4 sete      %al
063bf6f7 movzbl    %al,%eax
063bf6fa jne       0x0000`0000`063B`F702
063bf6fc jmp       0x0000`0000`063B`F6FE
063bf6fe jmp       0x0000`0000`063B`F761
063bf700 ud2
063bf702 mov       0x90(%rsp),%rax
063bf70a mov       0x100(%rsp),%rdx
063bf712 mov       %rdx,0x28(%rsp)
063bf717 mov       0x108(%rsp),%ecx
063bf71e mov       %ecx,0x30(%rsp)
063bf722 mov       %rdx,0x158(%rsp)
063bf72a mov       %ecx,0x160(%rsp)
063bf731 mov       %rdx,0x168(%rsp)
063bf739 mov       %ecx,0x170(%rsp)
063bf740 mov       0x20(%rax),%rcx
063bf744 mov       0x28(%rax),%rax
063bf748 mov       0xB8(%rsp),%rdx
063bf750 mov       0xC0(%rsp),%r8
063bf758 callq     *0x18(%rax)
063bf75b mov       %al,0x37(%rsp)
063bf75f jmp       0x0000`0000`063B`F77B
063bf761 lea       0x63C`FB88,%rcx
063bf768 call      0x0000`0000`063B`9770
063bf76d and       $1,%al
063bf76f mov       %al,0xB6(%rsp)
063bf776 jmp       0x0000`0000`063B`F439
063bf77b mov       0x37(%rsp),%cl
063bf77f and       $1,%cl
063bf782 call      0x0000`0000`063B`96F0
063bf787 and       $1,%al
063bf789 mov       %al,0x117(%rsp)
063bf790 movzbl    0x117(%rsp),%eax
063bf798 test      $1,%al
063bf79a je        0x0000`0000`063B`F7A2
063bf79c jmp       0x0000`0000`063B`F79E
063bf79e jmp       0x0000`0000`063B`F7C6
063bf7a0 ud2
063bf7a2 mov       0x90(%rsp),%r8
063bf7aa mov       0x30(%rsp),%edx
063bf7ae mov       0x28(%rsp),%rcx
063bf7b3 call      0x0000`0000`063B`E7F0
063bf7b8 and       $1,%al
063bf7ba mov       %al,0xB6(%rsp)
063bf7c1 jmp       0x0000`0000`063B`F439
063bf7c6 lea       0x63C`FBA0,%rcx
063bf7cd call      0x0000`0000`063B`9770
063bf7d2 and       $1,%al
063bf7d4 mov       %al,0xB6(%rsp)
063bf7db jmp       0x0000`0000`063B`F439

core::fmt::Formatter::padding:
063bf7e0 sub       $0x118,%rsp
063bf7e7 mov       %r8b,0x6F(%rsp)
063bf7ec mov       %rdx,0x70(%rsp)
063bf7f1 mov       %rcx,0x78(%rsp)
063bf7f6 mov       %rcx,0xE0(%rsp)
063bf7fe mov       %rdx,0xE8(%rsp)
063bf806 mov       %r8b,0xF7(%rsp)
063bf80e movzbl    0x38(%rcx),%eax
063bf812 cmp       $3,%rax
063bf816 jne       0x0000`0000`063B`F825
063bf818 mov       0x6F(%rsp),%al
063bf81c mov       %al,0x97(%rsp)
063bf823 jmp       0x0000`0000`063B`F834
063bf825 mov       0x78(%rsp),%rax
063bf82a mov       0x38(%rax),%al
063bf82d mov       %al,0x97(%rsp)
063bf834 movzbl    0x97(%rsp),%eax
063bf83c mov       %rax,0x60(%rsp)
063bf841 mov       0x60(%rsp),%rax
063bf846 lea       0x63B`FA38,%rcx
063bf84d movslq    (%rcx,%rax,4),%rax
063bf851 add       %rcx,%rax
063bf854 jmp       *%rax
063bf856 ud2
063bf858 mov       0x70(%rsp),%rax
063bf85d movq      $0,0x98(%rsp)
063bf869 mov       %rax,0xA0(%rsp)
063bf871 jmp       0x0000`0000`063B`F8E9
063bf873 mov       0x70(%rsp),%rax
063bf878 mov       %rax,0x98(%rsp)
063bf880 movq      $0,0xA0(%rsp)
063bf88c jmp       0x0000`0000`063B`F8E9
063bf88e mov       0x70(%rsp),%rax
063bf893 mov       %rax,%rcx
063bf896 shr       $1,%rcx
063bf89a mov       %rcx,0x50(%rsp)
063bf89f add       $1,%rax
063bf8a3 mov       %rax,0x58(%rsp)
063bf8a8 setb      %al
063bf8ab test      $1,%al
063bf8ad jne       0x0000`0000`063B`F8CF
063bf8af mov       0x50(%rsp),%rcx
063bf8b4 mov       0x58(%rsp),%rax
063bf8b9 shr       $1,%rax
063bf8bd mov       %rcx,0x98(%rsp)
063bf8c5 mov       %rax,0xA0(%rsp)
063bf8cd jmp       0x0000`0000`063B`F8E9
063bf8cf lea       0x63C`E220,%rcx
063bf8d6 lea       0x63C`FBB8,%r8
063bf8dd mov       $0x1C,%edx
063bf8e2 call      0x0000`0000`063B`8E30
063bf8e7 ud2
063bf8e9 mov       0x98(%rsp),%rax
063bf8f1 mov       %rax,0x108(%rsp)
063bf8f9 mov       0xA0(%rsp),%rcx
063bf901 mov       %rcx,0x38(%rsp)
063bf906 mov       %rcx,0x110(%rsp)
063bf90e movq      $0,0xA8(%rsp)
063bf91a mov       %rax,0xB0(%rsp)
063bf922 mov       0xA8(%rsp),%rcx
063bf92a mov       0xB0(%rsp),%rdx
063bf932 call      0x0000`0000`063B`7F30
063bf937 mov       %rax,0x40(%rsp)
063bf93c mov       %rdx,0x48(%rsp)
063bf941 mov       0x48(%rsp),%rax
063bf946 mov       0x40(%rsp),%rcx
063bf94b mov       %rcx,0xB8(%rsp)
063bf953 mov       %rax,0xC0(%rsp)
063bf95b lea       0xB8(%rsp),%rcx
063bf963 call      0x0000`0000`063B`7E80
063bf968 mov       %rdx,0xD0(%rsp)
063bf970 mov       %rax,0xC8(%rsp)
063bf978 mov       0xC8(%rsp),%rax
063bf980 test      %rax,%rax
063bf983 je        0x0000`0000`063B`F98B
063bf985 jmp       0x0000`0000`063B`F987
063bf987 jmp       0x0000`0000`063B`F9A8
063bf989 ud2
063bf98b mov       0x38(%rsp),%rdx
063bf990 mov       0x78(%rsp),%rax
063bf995 mov       0x34(%rax),%ecx
063bf998 call      0x0000`0000`063B`E7C0
063bf99d mov       %rax,0x28(%rsp)
063bf9a2 mov       %edx,0x34(%rsp)
063bf9a6 jmp       0x0000`0000`063B`FA1C
063bf9a8 mov       0x78(%rsp),%rdx
063bf9ad mov       0x20(%rdx),%rcx
063bf9b1 mov       0x28(%rdx),%rax
063bf9b5 mov       0x34(%rdx),%edx
063bf9b8 callq     *0x20(%rax)
063bf9bb mov       %al,0x27(%rsp)
063bf9bf mov       0x27(%rsp),%cl
063bf9c3 and       $1,%cl
063bf9c6 call      0x0000`0000`063B`96F0
063bf9cb and       $1,%al
063bf9cd mov       %al,0xDF(%rsp)
063bf9d4 movzbl    0xDF(%rsp),%eax
063bf9dc test      $1,%al
063bf9de je        0x0000`0000`063B`F95B
063bf9e4 jmp       0x0000`0000`063B`F9E6
063bf9e6 jmp       0x0000`0000`063B`F9EA
063bf9e8 ud2
063bf9ea lea       0x63C`FBD0,%rcx
063bf9f1 call      0x0000`0000`063B`9790
063bf9f6 mov       %edx,0x88(%rsp)
063bf9fd mov       %rax,0x80(%rsp)
063bfa05 mov       0x80(%rsp),%rax
063bfa0d mov       0x88(%rsp),%edx
063bfa14 add       $0x118,%rsp
063bfa1b ret
063bfa1c mov       0x34(%rsp),%eax
063bfa20 mov       0x28(%rsp),%rcx
063bfa25 mov       %rcx,0x80(%rsp)
063bfa2d mov       %eax,0x88(%rsp)
063bfa34 jmp       0x0000`0000`063B`FA05

core::fmt::Formatter::write_str:
063bfa50 sub       $0x48,%rsp
063bfa54 mov       %rcx,%rax
063bfa57 mov       %rax,0x30(%rsp)
063bfa5c mov       %rdx,0x38(%rsp)
063bfa61 mov       %r8,0x40(%rsp)
063bfa66 mov       0x20(%rax),%rcx
063bfa6a mov       0x28(%rax),%rax
063bfa6e callq     *0x18(%rax)
063bfa71 mov       %al,0x2F(%rsp)
063bfa75 mov       0x2F(%rsp),%al
063bfa79 and       $1,%al
063bfa7b movzbl    %al,%eax
063bfa7e add       $0x48,%rsp
063bfa82 ret

core::fmt::Formatter::write_fmt:
063bfa90 sub       $0x78,%rsp
063bfa94 mov       %rcx,0x70(%rsp)
063bfa99 mov       0x20(%rcx),%rax
063bfa9d mov       %rax,0x28(%rsp)
063bfaa2 mov       0x28(%rcx),%rax
063bfaa6 mov       %rax,0x30(%rsp)
063bfaab lea       0x40(%rsp),%rcx
063bfab0 mov       $0x30,%r8d
063bfab6 call      0x0000`0000`063C`AB90
063bfabb mov       0x28(%rsp),%rcx
063bfac0 mov       0x30(%rsp),%rdx
063bfac5 lea       0x40(%rsp),%r8
063bfaca call      0x0000`0000`063B`DFE0
063bfacf mov       %al,0x3F(%rsp)
063bfad3 mov       0x3F(%rsp),%al
063bfad7 and       $1,%al
063bfad9 movzbl    %al,%eax
063bfadc add       $0x78,%rsp
063bfae0 ret

core::fmt::Formatter::sign_plus:
063bfaf0 push      %rax
063bfaf1 mov       %rcx,(%rsp)
063bfaf5 mov       0x30(%rcx),%eax
063bfaf8 and       $1,%eax
063bfafb cmp       $0,%eax
063bfafe setne     %al
063bfb01 and       $1,%al
063bfb03 movzbl    %al,%eax
063bfb06 pop       %rcx
063bfb07 ret

core::fmt::Formatter::alternate:
063bfb10 push      %rax
063bfb11 mov       %rcx,(%rsp)
063bfb15 mov       0x30(%rcx),%eax
063bfb18 and       $4,%eax
063bfb1b cmp       $0,%eax
063bfb1e setne     %al
063bfb21 and       $1,%al
063bfb23 movzbl    %al,%eax
063bfb26 pop       %rcx
063bfb27 ret

core::fmt::Formatter::sign_aware_zero_pad:
063bfb30 push      %rax
063bfb31 mov       %rcx,(%rsp)
063bfb35 mov       0x30(%rcx),%eax
063bfb38 and       $8,%eax
063bfb3b cmp       $0,%eax
063bfb3e setne     %al
063bfb41 and       $1,%al
063bfb43 movzbl    %al,%eax
063bfb46 pop       %rcx
063bfb47 ret

core::fmt::Formatter::debug_lower_hex:
063bfb50 push      %rax
063bfb51 mov       %rcx,(%rsp)
063bfb55 mov       0x30(%rcx),%eax
063bfb58 and       $0x10,%eax
063bfb5b cmp       $0,%eax
063bfb5e setne     %al
063bfb61 and       $1,%al
063bfb63 movzbl    %al,%eax
063bfb66 pop       %rcx
063bfb67 ret

core::fmt::Formatter::debug_upper_hex:
063bfb70 push      %rax
063bfb71 mov       %rcx,(%rsp)
063bfb75 mov       0x30(%rcx),%eax
063bfb78 and       $0x20,%eax
063bfb7b cmp       $0,%eax
063bfb7e setne     %al
063bfb81 and       $1,%al
063bfb83 movzbl    %al,%eax
063bfb86 pop       %rcx
063bfb87 ret

core::fmt::Formatter::debug_struct:
063bfb90 sub       $0x48,%rsp
063bfb94 mov       %rcx,%rax
063bfb97 mov       %rax,0x28(%rsp)
063bfb9c mov       %rdx,0x30(%rsp)
063bfba1 mov       %r8,0x38(%rsp)
063bfba6 mov       %r9,0x40(%rsp)
063bfbab call      0x0000`0000`063B`9C00
063bfbb0 mov       0x28(%rsp),%rax
063bfbb5 add       $0x48,%rsp
063bfbb9 ret

core::fmt::Formatter::debug_tuple:
063bfbc0 sub       $0x48,%rsp
063bfbc4 mov       %rcx,%rax
063bfbc7 mov       %rax,0x28(%rsp)
063bfbcc mov       %rdx,0x30(%rsp)
063bfbd1 mov       %r8,0x38(%rsp)
063bfbd6 mov       %r9,0x40(%rsp)
063bfbdb call      0x0000`0000`063B`A1C0
063bfbe0 mov       0x28(%rsp),%rax
063bfbe5 add       $0x48,%rsp
063bfbe9 ret

core::fmt::impl$10::write_char:
063bfbf0 sub       $0x38,%rsp
063bfbf4 mov       %rcx,%rax
063bfbf7 mov       %rax,0x28(%rsp)
063bfbfc mov       %edx,0x34(%rsp)
063bfc00 mov       0x20(%rax),%rcx
063bfc04 mov       0x28(%rax),%rax
063bfc08 callq     *0x20(%rax)
063bfc0b mov       %al,0x27(%rsp)
063bfc0f mov       0x27(%rsp),%al
063bfc13 and       $1,%al
063bfc15 movzbl    %al,%eax
063bfc18 add       $0x38,%rsp
063bfc1c ret

core::fmt::impl$17::fmt:
063bfc20 sub       $0x48,%rsp
063bfc24 mov       %r8,0x20(%rsp)
063bfc29 mov       %rdx,%r8
063bfc2c mov       %rcx,%rdx
063bfc2f mov       0x20(%rsp),%rcx
063bfc34 mov       %rdx,0x30(%rsp)
063bfc39 mov       %r8,0x38(%rsp)
063bfc3e mov       %rcx,0x40(%rsp)
063bfc43 call      0x0000`0000`063B`F380
063bfc48 mov       %al,0x2F(%rsp)
063bfc4c mov       0x2F(%rsp),%al
063bfc50 and       $1,%al
063bfc52 movzbl    %al,%eax
063bfc55 add       $0x48,%rsp
063bfc59 ret

core::fmt::impl$18::fmt:
063bfc60 sub       $0xC8,%rsp
063bfc67 mov       %rdx,0x28(%rsp)
063bfc6c mov       %rcx,%rax
063bfc6f mov       0x28(%rsp),%rcx
063bfc74 mov       %rax,0x30(%rsp)
063bfc79 mov       %rax,0x98(%rsp)
063bfc81 mov       %rcx,0xA0(%rsp)
063bfc89 mov       $0x27,%edx
063bfc8e call      0x0000`0000`063B`FBF0
063bfc93 mov       %al,0x3D(%rsp)
063bfc97 mov       0x3D(%rsp),%cl
063bfc9b and       $1,%cl
063bfc9e call      0x0000`0000`063B`96F0
063bfca3 and       $1,%al
063bfca5 mov       %al,0x3F(%rsp)
063bfca9 movzbl    0x3F(%rsp),%eax
063bfcae test      $1,%al
063bfcb0 je        0x0000`0000`063B`FCB8
063bfcb2 jmp       0x0000`0000`063B`FCB4
063bfcb4 jmp       0x0000`0000`063B`FCEB
063bfcb6 ud2
063bfcb8 mov       0x30(%rsp),%rax
063bfcbd mov       (%rax),%edx
063bfcbf movb      $1,0x70(%rsp)
063bfcc4 movb      $1,0x71(%rsp)
063bfcc9 movb      $0,0x72(%rsp)
063bfcce movzbl    0x72(%rsp),%eax
063bfcd3 shl       $0x10,%eax
063bfcd6 movzwl    0x70(%rsp),%r8d
063bfcdc or        %eax,%r8d
063bfcdf lea       0x58(%rsp),%rcx
063bfce4 call      0x0000`0000`063B`6DE0
063bfce9 jmp       0x0000`0000`063B`FD0E
063bfceb lea       0x63C`FBE8,%rcx
063bfcf2 call      0x0000`0000`063B`9770
063bfcf7 and       $1,%al
063bfcf9 mov       %al,0x3E(%rsp)
063bfcfd mov       0x3E(%rsp),%al
063bfd01 and       $1,%al
063bfd03 movzbl    %al,%eax
063bfd06 add       $0xC8,%rsp
063bfd0d ret
063bfd0e lea       0x40(%rsp),%rcx
063bfd13 lea       0x58(%rsp),%rdx
063bfd18 call      0x0000`0000`063B`7F50
063bfd1d mov       0x40(%rsp),%rax
063bfd22 mov       %rax,0x78(%rsp)
063bfd27 mov       0x48(%rsp),%rax
063bfd2c mov       %rax,0x80(%rsp)
063bfd34 mov       0x50(%rsp),%rax
063bfd39 mov       %rax,0x88(%rsp)
063bfd41 lea       0x78(%rsp),%rcx
063bfd46 call      0x0000`0000`063B`78C0
063bfd4b mov       %eax,0x90(%rsp)
063bfd52 mov       0x90(%rsp),%eax
063bfd59 add       $0xFFEF`0000,%eax
063bfd5e setne     %al
063bfd61 movzbl    %al,%eax
063bfd64 je        0x0000`0000`063B`FD6C
063bfd66 jmp       0x0000`0000`063B`FD68
063bfd68 jmp       0x0000`0000`063B`FD86
063bfd6a ud2
063bfd6c mov       0x28(%rsp),%rcx
063bfd71 mov       $0x27,%edx
063bfd76 call      0x0000`0000`063B`FBF0
063bfd7b and       $1,%al
063bfd7d mov       %al,0x3E(%rsp)
063bfd81 jmp       0x0000`0000`063B`FCFD
063bfd86 mov       0x28(%rsp),%rcx
063bfd8b mov       0x90(%rsp),%edx
063bfd92 mov       %edx,0xC4(%rsp)
063bfd99 call      0x0000`0000`063B`FBF0
063bfd9e mov       %al,0x27(%rsp)
063bfda2 mov       0x27(%rsp),%cl
063bfda6 and       $1,%cl
063bfda9 call      0x0000`0000`063B`96F0
063bfdae and       $1,%al
063bfdb0 mov       %al,0x97(%rsp)
063bfdb7 movzbl    0x97(%rsp),%eax
063bfdbf test      $1,%al
063bfdc1 je        0x0000`0000`063B`FD41
063bfdc7 jmp       0x0000`0000`063B`FDC9
063bfdc9 jmp       0x0000`0000`063B`FDCD
063bfdcb ud2
063bfdcd lea       0x63C`FC00,%rcx
063bfdd4 call      0x0000`0000`063B`9770
063bfdd9 and       $1,%al
063bfddb mov       %al,0x3E(%rsp)
063bfddf jmp       0x0000`0000`063B`FCFD

core::fmt::impl$20::fmt<tuple$<> >:
063bfdf0 sub       $0x38,%rsp
063bfdf4 mov       %rcx,0x28(%rsp)
063bfdf9 mov       %rdx,0x30(%rsp)
063bfdfe mov       (%rcx),%rcx
063bfe01 call      0x0000`0000`063B`FE20
063bfe06 mov       %al,0x27(%rsp)
063bfe0a mov       0x27(%rsp),%al
063bfe0e and       $1,%al
063bfe10 movzbl    %al,%eax
063bfe13 add       $0x38,%rsp
063bfe17 ret

core::fmt::impl$20::fmt::inner:
063bfe20 sub       $0x98,%rsp
063bfe27 mov       %rdx,0x30(%rsp)
063bfe2c mov       %rcx,%rax
063bfe2f mov       0x30(%rsp),%rcx
063bfe34 mov       %rax,0x38(%rsp)
063bfe39 mov       %rax,0x70(%rsp)
063bfe3e mov       %rcx,0x78(%rsp)
063bfe43 mov       (%rcx),%rdx
063bfe46 mov       %rdx,0x40(%rsp)
063bfe4b mov       8(%rcx),%rax
063bfe4f mov       %rax,0x48(%rsp)
063bfe54 mov       %rdx,0x80(%rsp)
063bfe5c mov       %rax,0x88(%rsp)
063bfe64 mov       0x30(%rcx),%eax
063bfe67 mov       %eax,0x50(%rsp)
063bfe6b mov       %eax,0x90(%rsp)
063bfe72 call      0x0000`0000`063B`FB10
063bfe77 mov       %al,0x57(%rsp)
063bfe7b mov       0x57(%rsp),%al
063bfe7f test      $1,%al
063bfe81 jne       0x0000`0000`063B`FEB6
063bfe83 jmp       0x0000`0000`063B`FE85
063bfe85 mov       0x30(%rsp),%rdx
063bfe8a mov       0x38(%rsp),%rax
063bfe8f mov       0x30(%rdx),%ecx
063bfe92 or        $4,%ecx
063bfe95 mov       %ecx,0x30(%rdx)
063bfe98 mov       %rax,0x68(%rsp)
063bfe9d lea       0x68(%rsp),%rcx
063bfea2 call      0x0000`0000`063C`7C00
063bfea7 mov       %al,0x2F(%rsp)
063bfeab and       $1,%al
063bfead mov       %al,0x97(%rsp)
063bfeb4 jmp       0x0000`0000`063B`FF01
063bfeb6 mov       0x30(%rsp),%rcx
063bfebb mov       0x30(%rcx),%eax
063bfebe or        $8,%eax
063bfec1 mov       %eax,0x30(%rcx)
063bfec4 call      0x0000`0000`063B`83F0
063bfec9 mov       %al,0x2E(%rsp)
063bfecd mov       0x2E(%rsp),%al
063bfed1 test      $1,%al
063bfed3 jne       0x0000`0000`063B`FED7
063bfed5 jmp       0x0000`0000`063B`FE85
063bfed7 mov       0x30(%rsp),%rax
063bfedc movq      $0x12,0x60(%rsp)
063bfee5 movq      $1,0x58(%rsp)
063bfeee mov       0x58(%rsp),%rdx
063bfef3 mov       0x60(%rsp),%rcx
063bfef8 mov       %rdx,(%rax)
063bfefb mov       %rcx,8(%rax)
063bfeff jmp       0x0000`0000`063B`FE85
063bff01 mov       0x2F(%rsp),%al
063bff05 mov       0x30(%rsp),%rcx
063bff0a mov       0x50(%rsp),%edx
063bff0e mov       0x48(%rsp),%r8
063bff13 mov       0x40(%rsp),%r9
063bff18 mov       %r9,(%rcx)
063bff1b mov       %r8,8(%rcx)
063bff1f mov       %edx,0x30(%rcx)
063bff22 and       $1,%al
063bff24 movzbl    %al,%eax
063bff27 add       $0x98,%rsp
063bff2e ret

core::fmt::impl$24::fmt<tuple$<> >:
063bff30 sub       $0x38,%rsp
063bff34 mov       %rcx,0x28(%rsp)
063bff39 mov       %rdx,0x30(%rsp)
063bff3e call      0x0000`0000`063B`FDF0
063bff43 mov       %al,0x27(%rsp)
063bff47 mov       0x27(%rsp),%al
063bff4b and       $1,%al
063bff4d movzbl    %al,%eax
063bff50 add       $0x38,%rsp
063bff54 ret

core::fmt::impl$27::fmt:
063bff60 sub       $0x48,%rsp
063bff64 mov       %rdx,0x28(%rsp)
063bff69 mov       %rcx,%rax
063bff6c mov       0x28(%rsp),%rcx
063bff71 mov       %rax,0x38(%rsp)
063bff76 mov       %rcx,0x40(%rsp)
063bff7b lea       0x63C`FC18,%rdx
063bff82 mov       $2,%r8d
063bff88 call      0x0000`0000`063B`F380
063bff8d mov       %al,0x37(%rsp)
063bff91 mov       0x37(%rsp),%al
063bff95 and       $1,%al
063bff97 movzbl    %al,%eax
063bff9a add       $0x48,%rsp
063bff9e ret

core::slice::memchr::contains_zero_byte:
063bffa0 sub       $0x28,%rsp
063bffa4 mov       %rcx,(%rsp)
063bffa8 mov       %rcx,0x10(%rsp)
063bffad mov       %rcx,0x18(%rsp)
063bffb2 movabs    $0x101`0101`0101`0101,%rax
063bffbc mov       %rax,0x20(%rsp)
063bffc1 movabs    $0x101`0101`0101`0101,%rax
063bffcb sub       %rax,%rcx
063bffce mov       %rcx,8(%rsp)
063bffd3 mov       8(%rsp),%rax
063bffd8 mov       (%rsp),%rcx
063bffdc xor       $0xFFFF`FFFF`FFFF`FFFF,%rcx
063bffe0 and       %rcx,%rax
063bffe3 movabs    $0x8080`8080`8080`8080,%rcx
063bffed and       %rcx,%rax
063bfff0 cmp       $0,%rax
063bfff4 setne     %al
063bfff7 and       $1,%al
063bfff9 movzbl    %al,%eax
063bfffc add       $0x28,%rsp
063c0000 ret

core::slice::memchr::repeat_byte:
063c0010 sub       $0x38,%rsp
063c0014 mov       %cl,0x37(%rsp)
063c0018 movzbl    %cl,%eax
063c001b movabs    $0x101`0101`0101`0101,%rcx
063c0025 mul       %rcx
063c0028 mov       %rax,0x28(%rsp)
063c002d seto      %al
063c0030 test      $1,%al
063c0032 jne       0x0000`0000`063C`003E
063c0034 mov       0x28(%rsp),%rax
063c0039 add       $0x38,%rsp
063c003d ret
063c003e lea       0x63C`E240,%rcx
063c0045 lea       0x63C`FC98,%r8
063c004c mov       $0x21,%edx
063c0051 call      0x0000`0000`063B`8E30
063c0056 ud2

core::slice::memchr::memchr:
063c0060 sub       $0x78,%rsp
063c0064 mov       %r8,0x28(%rsp)
063c0069 mov       %rdx,0x30(%rsp)
063c006e mov       %cl,0x3F(%rsp)
063c0072 mov       %rdx,0x68(%rsp)
063c0077 mov       %r8,0x70(%rsp)
063c007c cmp       $0x10,%r8
063c0080 jb        0x0000`0000`063C`00A1
063c0082 mov       0x28(%rsp),%r8
063c0087 mov       0x30(%rsp),%rdx
063c008c mov       0x3F(%rsp),%cl
063c0090 call      0x0000`0000`063C`0120
063c0095 mov       %rdx,0x48(%rsp)
063c009a mov       %rax,0x40(%rsp)
063c009f jmp       0x0000`0000`063C`00DD
063c00a1 mov       0x28(%rsp),%rdx
063c00a6 mov       0x30(%rsp),%rcx
063c00ab call      0x0000`0000`063C`2CD0
063c00b0 mov       %rdx,0x58(%rsp)
063c00b5 mov       %rax,0x50(%rsp)
063c00ba lea       0x3F(%rsp),%rax
063c00bf mov       %rax,0x60(%rsp)
063c00c4 mov       0x60(%rsp),%rdx
063c00c9 lea       0x50(%rsp),%rcx
063c00ce call      0x0000`0000`063C`9370
063c00d3 mov       %rdx,0x48(%rsp)
063c00d8 mov       %rax,0x40(%rsp)
063c00dd mov       0x40(%rsp),%rax
063c00e2 mov       0x48(%rsp),%rdx
063c00e7 add       $0x78,%rsp
063c00eb ret

core::slice::memchr::memchr::closure$0:
063c00f0 sub       $0x18,%rsp
063c00f4 mov       %rcx,(%rsp)
063c00f8 mov       (%rsp),%rax
063c00fc mov       (%rax),%rax
063c00ff mov       %rax,8(%rsp)
063c0104 mov       %rdx,0x10(%rsp)
063c0109 mov       (%rdx),%al
063c010b mov       (%rcx),%rcx
063c010e cmp       (%rcx),%al
063c0110 sete      %al
063c0113 and       $1,%al
063c0115 movzbl    %al,%eax
063c0118 add       $0x18,%rsp
063c011c ret

core::slice::memchr::memchr_general_case:
063c0120 sub       $0x1E8,%rsp
063c0127 mov       %r8,0xB8(%rsp)
063c012f mov       %rdx,%rax
063c0132 mov       0xB8(%rsp),%rdx
063c013a mov       %rax,0xC0(%rsp)
063c0142 mov       %cl,%al
063c0144 mov       0xC0(%rsp),%rcx
063c014c mov       %al,0xD7(%rsp)
063c0153 mov       %rcx,0x150(%rsp)
063c015b mov       %rdx,0x158(%rsp)
063c0163 mov       %rdx,0x160(%rsp)
063c016b call      0x0000`0000`063C`2BE0
063c0170 mov       %rax,0xC8(%rsp)
063c0178 mov       %rax,0x168(%rsp)
063c0180 mov       0xC8(%rsp),%rcx
063c0188 mov       $8,%edx
063c018d call      0x0000`0000`063B`5350
063c0192 mov       %rax,0xE8(%rsp)
063c019a cmpq      $0,0xE8(%rsp)
063c01a3 ja        0x0000`0000`063C`01C6
063c01a5 mov       0xD7(%rsp),%cl
063c01ac call      0x0000`0000`063C`0010
063c01b1 mov       %rax,0xB0(%rsp)
063c01b9 mov       %rax,0x178(%rsp)
063c01c1 jmp       0x0000`0000`063C`02DC
063c01c6 mov       0xB8(%rsp),%rdx
063c01ce mov       0xE8(%rsp),%rcx
063c01d6 call      0x0000`0000`063B`66C0
063c01db mov       %rax,0xA8(%rsp)
063c01e3 mov       0xB8(%rsp),%rdx
063c01eb mov       0xC0(%rsp),%rcx
063c01f3 mov       0xA8(%rsp),%rax
063c01fb mov       %rax,0xE8(%rsp)
063c0203 mov       0xE8(%rsp),%rax
063c020b mov       %rax,0x110(%rsp)
063c0213 mov       0x110(%rsp),%r8
063c021b lea       0x63C`FCB0,%r9
063c0222 call      0x0000`0000`063C`08B0
063c0227 mov       %rax,0x98(%rsp)
063c022f mov       %rdx,0xA0(%rsp)
063c0237 mov       0xA0(%rsp),%rdx
063c023f mov       0x98(%rsp),%rcx
063c0247 call      0x0000`0000`063C`2CD0
063c024c mov       %rdx,0x108(%rsp)
063c0254 mov       %rax,0x100(%rsp)
063c025c lea       0xD7(%rsp),%rax
063c0264 mov       %rax,0x118(%rsp)
063c026c mov       0x118(%rsp),%rdx
063c0274 lea       0x100(%rsp),%rcx
063c027c call      0x0000`0000`063C`9170
063c0281 mov       %rdx,0xF8(%rsp)
063c0289 mov       %rax,0xF0(%rsp)
063c0291 cmpq      $1,0xF0(%rsp)
063c029a jne       0x0000`0000`063C`01A5
063c02a0 mov       0xF8(%rsp),%rax
063c02a8 mov       %rax,0x170(%rsp)
063c02b0 mov       %rax,0xE0(%rsp)
063c02b8 movq      $1,0xD8(%rsp)
063c02c4 mov       0xD8(%rsp),%rax
063c02cc mov       0xE0(%rsp),%rdx
063c02d4 add       $0x1E8,%rsp
063c02db ret
063c02dc mov       0xB8(%rsp),%rax
063c02e4 mov       0xE8(%rsp),%rcx
063c02ec mov       %rcx,0x88(%rsp)
063c02f4 sub       $0x10,%rax
063c02f8 mov       %rax,0x90(%rsp)
063c0300 setb      %al
063c0303 test      $1,%al
063c0305 jne       0x0000`0000`063C`031E
063c0307 mov       0x88(%rsp),%rax
063c030f mov       0x90(%rsp),%rcx
063c0317 cmp       %rcx,%rax
063c031a jbe       0x0000`0000`063C`037E
063c031c jmp       0x0000`0000`063C`0338
063c031e lea       0x63C`E1F0,%rcx
063c0325 lea       0x63C`FCC8,%r8
063c032c mov       $0x21,%edx
063c0331 call      0x0000`0000`063B`8E30
063c0336 ud2
063c0338 mov       0xB8(%rsp),%rdx
063c0340 mov       0xC0(%rsp),%rcx
063c0348 mov       0xE8(%rsp),%rax
063c0350 mov       %rax,0x138(%rsp)
063c0358 mov       0x138(%rsp),%r8
063c0360 lea       0x63C`FD10,%r9
063c0367 call      0x0000`0000`063C`07B0
063c036c mov       %rax,0x78(%rsp)
063c0371 mov       %rdx,0x80(%rsp)
063c0379 jmp       0x0000`0000`063C`0520
063c037e mov       0xC8(%rsp),%rax
063c0386 mov       0xE8(%rsp),%rcx
063c038e mov       %rax,0x1C0(%rsp)
063c0396 mov       %rcx,0x1C8(%rsp)
063c039e mov       %rax,0x1D0(%rsp)
063c03a6 mov       %rcx,0x1D8(%rsp)
063c03ae add       %rcx,%rax
063c03b1 mov       %rax,0x1E0(%rsp)
063c03b9 mov       0x1E0(%rsp),%rax
063c03c1 mov       %rax,0x70(%rsp)
063c03c6 mov       0x70(%rsp),%rax
063c03cb mov       (%rax),%rax
063c03ce mov       %rax,0x60(%rsp)
063c03d3 mov       %rax,0x180(%rsp)
063c03db mov       0xE8(%rsp),%rax
063c03e3 add       $8,%rax
063c03e7 mov       %rax,0x68(%rsp)
063c03ec setb      %al
063c03ef test      $1,%al
063c03f1 jne       0x0000`0000`063C`043A
063c03f3 mov       0x68(%rsp),%rcx
063c03f8 mov       0xC8(%rsp),%rax
063c0400 mov       %rax,0x198(%rsp)
063c0408 mov       %rcx,0x1A0(%rsp)
063c0410 mov       %rax,0x1A8(%rsp)
063c0418 mov       %rcx,0x1B0(%rsp)
063c0420 add       %rcx,%rax
063c0423 mov       %rax,0x1B8(%rsp)
063c042b mov       0x1B8(%rsp),%rax
063c0433 mov       %rax,0x58(%rsp)
063c0438 jmp       0x0000`0000`063C`0454
063c043a lea       0x63C`E220,%rcx
063c0441 lea       0x63C`FCE0,%r8
063c0448 mov       $0x1C,%edx
063c044d call      0x0000`0000`063B`8E30
063c0452 ud2
063c0454 mov       0xB0(%rsp),%rax
063c045c mov       0x60(%rsp),%rcx
063c0461 mov       0x58(%rsp),%rdx
063c0466 mov       (%rdx),%rdx
063c0469 mov       %rdx,0x48(%rsp)
063c046e mov       %rdx,0x188(%rsp)
063c0476 xor       %rax,%rcx
063c0479 call      0x0000`0000`063B`FFA0
063c047e mov       %al,0x57(%rsp)
063c0482 and       $1,%al
063c0484 mov       %al,0x196(%rsp)
063c048b mov       0xB0(%rsp),%rax
063c0493 mov       0x48(%rsp),%rcx
063c0498 xor       %rax,%rcx
063c049b call      0x0000`0000`063B`FFA0
063c04a0 mov       %al,0x47(%rsp)
063c04a4 and       $1,%al
063c04a6 mov       %al,0x197(%rsp)
063c04ad mov       0x57(%rsp),%al
063c04b1 test      $1,%al
063c04b3 jne       0x0000`0000`063C`04C6
063c04b5 jmp       0x0000`0000`063C`04B7
063c04b7 mov       0x47(%rsp),%al
063c04bb and       $1,%al
063c04bd mov       %al,0x127(%rsp)
063c04c4 jmp       0x0000`0000`063C`04CE
063c04c6 movb      $1,0x127(%rsp)
063c04ce testb     $1,0x127(%rsp)
063c04d6 jne       0x0000`0000`063C`0338
063c04dc mov       0xE8(%rsp),%rax
063c04e4 add       $0x10,%rax
063c04e8 mov       %rax,0x38(%rsp)
063c04ed setb      %al
063c04f0 test      $1,%al
063c04f2 jne       0x0000`0000`063C`0506
063c04f4 mov       0x38(%rsp),%rax
063c04f9 mov       %rax,0xE8(%rsp)
063c0501 jmp       0x0000`0000`063C`02DC
063c0506 lea       0x63C`E220,%rcx
063c050d lea       0x63C`FCF8,%r8
063c0514 mov       $0x1C,%edx
063c0519 call      0x0000`0000`063B`8E30
063c051e ud2
063c0520 mov       0x80(%rsp),%rdx
063c0528 mov       0x78(%rsp),%rcx
063c052d call      0x0000`0000`063C`2CD0
063c0532 mov       %rdx,0x130(%rsp)
063c053a mov       %rax,0x128(%rsp)
063c0542 lea       0xD7(%rsp),%rax
063c054a mov       %rax,0x140(%rsp)
063c0552 mov       0x140(%rsp),%rdx
063c055a lea       0x128(%rsp),%rcx
063c0562 call      0x0000`0000`063C`9570
063c0567 mov       %rax,0x28(%rsp)
063c056c mov       %rdx,0x30(%rsp)
063c0571 mov       0x30(%rsp),%rdx
063c0576 mov       0x28(%rsp),%rcx
063c057b lea       0xE8(%rsp),%rax
063c0583 mov       %rax,0x148(%rsp)
063c058b mov       0x148(%rsp),%r8
063c0593 call      0x0000`0000`063B`8850
063c0598 mov       %rdx,0xE0(%rsp)
063c05a0 mov       %rax,0xD8(%rsp)
063c05a8 jmp       0x0000`0000`063C`02C4

core::slice::memchr::memchr_general_case::closure$0:
063c05b0 sub       $0x18,%rsp
063c05b4 mov       %rcx,(%rsp)
063c05b8 mov       (%rsp),%rax
063c05bc mov       (%rax),%rax
063c05bf mov       %rax,8(%rsp)
063c05c4 mov       %rdx,0x10(%rsp)
063c05c9 mov       (%rdx),%al
063c05cb mov       (%rcx),%rcx
063c05ce cmp       (%rcx),%al
063c05d0 sete      %al
063c05d3 and       $1,%al
063c05d5 movzbl    %al,%eax
063c05d8 add       $0x18,%rsp
063c05dc ret

core::slice::memchr::memchr_general_case::closure$1:
063c05e0 sub       $0x18,%rsp
063c05e4 mov       %rcx,(%rsp)
063c05e8 mov       (%rsp),%rax
063c05ec mov       (%rax),%rax
063c05ef mov       %rax,8(%rsp)
063c05f4 mov       %rdx,0x10(%rsp)
063c05f9 mov       (%rdx),%al
063c05fb mov       (%rcx),%rcx
063c05fe cmp       (%rcx),%al
063c0600 sete      %al
063c0603 and       $1,%al
063c0605 movzbl    %al,%eax
063c0608 add       $0x18,%rsp
063c060c ret

core::slice::memchr::memchr_general_case::closure$2:
063c0610 sub       $0x38,%rsp
063c0614 mov       %rcx,0x28(%rsp)
063c0619 mov       %rdx,0x30(%rsp)
063c061e add       (%rcx),%rdx
063c0621 mov       %rdx,0x20(%rsp)
063c0626 setb      %al
063c0629 test      $1,%al
063c062b jne       0x0000`0000`063C`0637
063c062d mov       0x20(%rsp),%rax
063c0632 add       $0x38,%rsp
063c0636 ret
063c0637 lea       0x63C`E220,%rcx
063c063e lea       0x63C`FD28,%r8
063c0645 mov       $0x1C,%edx
063c064a call      0x0000`0000`063B`8E30
063c064f ud2

core::slice::cmp::impl$0::eq<u8,u8>:
063c0660 sub       $0x48,%rsp
063c0664 mov       %rcx,0x28(%rsp)
063c0669 mov       %rdx,0x30(%rsp)
063c066e mov       %r8,0x38(%rsp)
063c0673 mov       %r9,0x40(%rsp)
063c0678 call      0x0000`0000`063C`0690
063c067d mov       %al,0x27(%rsp)
063c0681 mov       0x27(%rsp),%al
063c0685 and       $1,%al
063c0687 movzbl    %al,%eax
063c068a add       $0x48,%rsp
063c068e ret

core::slice::cmp::impl$5::equal<u8,u8>:
063c0690 sub       $0x98,%rsp
063c0697 mov       %r9,0x48(%rsp)
063c069c mov       %r8,0x50(%rsp)
063c06a1 mov       %rdx,0x58(%rsp)
063c06a6 mov       %rcx,0x60(%rsp)
063c06ab mov       %rcx,0x70(%rsp)
063c06b0 mov       %rdx,0x78(%rsp)
063c06b5 mov       %r8,0x80(%rsp)
063c06bd mov       %r9,0x88(%rsp)
063c06c5 cmp       %r9,%rdx
063c06c8 jne       0x0000`0000`063C`06E8
063c06ca mov       0x58(%rsp),%rdx
063c06cf mov       0x60(%rsp),%rcx
063c06d4 call      0x0000`0000`063B`4C00
063c06d9 mov       %rax,0x40(%rsp)
063c06de mov       %rax,0x90(%rsp)
063c06e6 jmp       0x0000`0000`063C`06FE
063c06e8 movb      $0,0x6F(%rsp)
063c06ed mov       0x6F(%rsp),%al
063c06f1 and       $1,%al
063c06f3 movzbl    %al,%eax
063c06f6 add       $0x98,%rsp
063c06fd ret
063c06fe mov       0x58(%rsp),%rdx
063c0703 mov       0x60(%rsp),%rcx
063c0708 call      0x0000`0000`063C`2BE0
063c070d mov       %rax,0x38(%rsp)
063c0712 mov       0x48(%rsp),%rdx
063c0717 mov       0x50(%rsp),%rcx
063c071c call      0x0000`0000`063C`2BE0
063c0721 mov       %rax,0x30(%rsp)
063c0726 mov       0x40(%rsp),%r8
063c072b mov       0x30(%rsp),%rdx
063c0730 mov       0x38(%rsp),%rcx
063c0735 call      0x0000`0000`063C`AE00
063c073a mov       %eax,0x2C(%rsp)
063c073e mov       0x2C(%rsp),%eax
063c0742 cmp       $0,%eax
063c0745 sete      %al
063c0748 and       $1,%al
063c074a mov       %al,0x6F(%rsp)
063c074e jmp       0x0000`0000`063C`06ED

core::slice::index::impl$0::index<u8,core::ops::range::Range<usize> >:
063c0750 sub       $0x68,%rsp
063c0754 mov       %r9,0x28(%rsp)
063c0759 mov       %r8,0x30(%rsp)
063c075e mov       %rdx,%r9
063c0761 mov       0x28(%rsp),%rdx
063c0766 mov       %rcx,%r8
063c0769 mov       0x30(%rsp),%rcx
063c076e mov       0x90(%rsp),%rax
063c0776 mov       %r8,0x48(%rsp)
063c077b mov       %r9,0x50(%rsp)
063c0780 mov       %rcx,0x58(%rsp)
063c0785 mov       %rdx,0x60(%rsp)
063c078a mov       %rax,0x20(%rsp)
063c078f call      0x0000`0000`063C`13E0
063c0794 mov       %rax,0x38(%rsp)
063c0799 mov       %rdx,0x40(%rsp)
063c079e mov       0x40(%rsp),%rdx
063c07a3 mov       0x38(%rsp),%rax
063c07a8 add       $0x68,%rsp
063c07ac ret

core::slice::index::impl$0::index<u8,core::ops::range::RangeFrom<usize> >:
063c07b0 sub       $0x58,%rsp
063c07b4 mov       %r8,0x28(%rsp)
063c07b9 mov       %rdx,%r8
063c07bc mov       %rcx,%rdx
063c07bf mov       0x28(%rsp),%rcx
063c07c4 mov       %rdx,0x40(%rsp)
063c07c9 mov       %r8,0x48(%rsp)
063c07ce mov       %rcx,0x50(%rsp)
063c07d3 call      0x0000`0000`063C`18D0
063c07d8 mov       %rax,0x30(%rsp)
063c07dd mov       %rdx,0x38(%rsp)
063c07e2 mov       0x38(%rsp),%rdx
063c07e7 mov       0x30(%rsp),%rax
063c07ec add       $0x58,%rsp
063c07f0 ret

core::slice::index::impl$0::index<core::mem::maybe_uninit::MaybeUninit<u8>,core::ops::range::RangeFrom<usize> >:
063c0800 sub       $0x58,%rsp
063c0804 mov       %r8,0x28(%rsp)
063c0809 mov       %rdx,%r8
063c080c mov       %rcx,%rdx
063c080f mov       0x28(%rsp),%rcx
063c0814 mov       %rdx,0x40(%rsp)
063c0819 mov       %r8,0x48(%rsp)
063c081e mov       %rcx,0x50(%rsp)
063c0823 call      0x0000`0000`063C`1850
063c0828 mov       %rax,0x30(%rsp)
063c082d mov       %rdx,0x38(%rsp)
063c0832 mov       0x38(%rsp),%rdx
063c0837 mov       0x30(%rsp),%rax
063c083c add       $0x58,%rsp
063c0840 ret

core::slice::index::impl$0::index<u8,core::ops::range::RangeInclusive<usize> >:
063c0850 sub       $0x58,%rsp
063c0854 mov       %r8,%rax
063c0857 mov       %rdx,%r8
063c085a mov       %rcx,%rdx
063c085d mov       %rdx,0x48(%rsp)
063c0862 mov       %r8,0x50(%rsp)
063c0867 mov       (%rax),%rcx
063c086a mov       %rcx,0x30(%rsp)
063c086f mov       8(%rax),%rcx
063c0873 mov       %rcx,0x38(%rsp)
063c0878 mov       0x10(%rax),%rax
063c087c mov       %rax,0x40(%rsp)
063c0881 lea       0x30(%rsp),%rcx
063c0886 call      0x0000`0000`063C`1970
063c088b mov       %rax,0x20(%rsp)
063c0890 mov       %rdx,0x28(%rsp)
063c0895 mov       0x28(%rsp),%rdx
063c089a mov       0x20(%rsp),%rax
063c089f add       $0x58,%rsp
063c08a3 ret

core::slice::index::impl$0::index<u8,core::ops::range::RangeTo<usize> >:
063c08b0 sub       $0x58,%rsp
063c08b4 mov       %r8,0x28(%rsp)
063c08b9 mov       %rdx,%r8
063c08bc mov       %rcx,%rdx
063c08bf mov       0x28(%rsp),%rcx
063c08c4 mov       %rdx,0x40(%rsp)
063c08c9 mov       %r8,0x48(%rsp)
063c08ce mov       %rcx,0x50(%rsp)
063c08d3 call      0x0000`0000`063C`15E0
063c08d8 mov       %rax,0x30(%rsp)
063c08dd mov       %rdx,0x38(%rsp)
063c08e2 mov       0x38(%rsp),%rdx
063c08e7 mov       0x30(%rsp),%rax
063c08ec add       $0x58,%rsp
063c08f0 ret

core::slice::index::impl$1::index_mut<u8,core::ops::range::RangeTo<usize> >:
063c0900 sub       $0x58,%rsp
063c0904 mov       %r8,0x28(%rsp)
063c0909 mov       %rdx,%r8
063c090c mov       %rcx,%rdx
063c090f mov       0x28(%rsp),%rcx
063c0914 mov       %rdx,0x40(%rsp)
063c0919 mov       %r8,0x48(%rsp)
063c091e mov       %rcx,0x50(%rsp)
063c0923 call      0x0000`0000`063C`1640
063c0928 mov       %rax,0x30(%rsp)
063c092d mov       %rdx,0x38(%rsp)
063c0932 mov       0x38(%rsp),%rdx
063c0937 mov       0x30(%rsp),%rax
063c093c add       $0x58,%rsp
063c0940 ret

core::slice::index::impl$1::index_mut<u8,core::ops::range::RangeFull>:
063c0950 sub       $0x48,%rsp
063c0954 mov       %rcx,0x30(%rsp)
063c0959 mov       %rdx,0x38(%rsp)
063c095e call      0x0000`0000`063C`1950
063c0963 mov       %rax,0x20(%rsp)
063c0968 mov       %rdx,0x28(%rsp)
063c096d mov       0x28(%rsp),%rdx
063c0972 mov       0x20(%rsp),%rax
063c0977 add       $0x48,%rsp
063c097b ret

core::slice::index::slice_start_index_len_fail:
063c0980 sub       $0xB8,%rsp
063c0987 mov       %r8,0x40(%rsp)
063c098c mov       %rcx,0x58(%rsp)
063c0991 mov       %rdx,0x60(%rsp)
063c0996 lea       0x58(%rsp),%rcx
063c099b call      0x0000`0000`063C`87D0
063c09a0 mov       %rax,0x48(%rsp)
063c09a5 mov       %rdx,0x50(%rsp)
063c09aa lea       0x60(%rsp),%rcx
063c09af call      0x0000`0000`063C`87D0
063c09b4 mov       %rax,0x30(%rsp)
063c09b9 mov       %rdx,0x38(%rsp)
063c09be mov       0x38(%rsp),%rax
063c09c3 mov       0x30(%rsp),%rcx
063c09c8 mov       0x50(%rsp),%rdx
063c09cd mov       0x48(%rsp),%r8
063c09d2 mov       %r8,0x98(%rsp)
063c09da mov       %rdx,0xA0(%rsp)
063c09e2 mov       %rcx,0xA8(%rsp)
063c09ea mov       %rax,0xB0(%rsp)
063c09f2 lea       0x98(%rsp),%r9
063c09fa lea       0x68(%rsp),%rcx
063c09ff lea       0x63C`FD78,%rdx
063c0a06 mov       $2,%r8d
063c0a0c movq      $2,0x20(%rsp)
063c0a15 call      0x0000`0000`063B`DE30
063c0a1a mov       0x40(%rsp),%rdx
063c0a1f lea       0x68(%rsp),%rcx
063c0a24 call      0x0000`0000`063B`8F40
063c0a29 ud2

core::slice::index::slice_end_index_len_fail:
063c0a30 sub       $0xB8,%rsp
063c0a37 mov       %r8,0x40(%rsp)
063c0a3c mov       %rcx,0x58(%rsp)
063c0a41 mov       %rdx,0x60(%rsp)
063c0a46 lea       0x58(%rsp),%rcx
063c0a4b call      0x0000`0000`063C`87D0
063c0a50 mov       %rax,0x48(%rsp)
063c0a55 mov       %rdx,0x50(%rsp)
063c0a5a lea       0x60(%rsp),%rcx
063c0a5f call      0x0000`0000`063C`87D0
063c0a64 mov       %rax,0x30(%rsp)
063c0a69 mov       %rdx,0x38(%rsp)
063c0a6e mov       0x38(%rsp),%rax
063c0a73 mov       0x30(%rsp),%rcx
063c0a78 mov       0x50(%rsp),%rdx
063c0a7d mov       0x48(%rsp),%r8
063c0a82 mov       %r8,0x98(%rsp)
063c0a8a mov       %rdx,0xA0(%rsp)
063c0a92 mov       %rcx,0xA8(%rsp)
063c0a9a mov       %rax,0xB0(%rsp)
063c0aa2 lea       0x98(%rsp),%r9
063c0aaa lea       0x68(%rsp),%rcx
063c0aaf lea       0x63C`FDA8,%rdx
063c0ab6 mov       $2,%r8d
063c0abc movq      $2,0x20(%rsp)
063c0ac5 call      0x0000`0000`063B`DE30
063c0aca mov       0x40(%rsp),%rdx
063c0acf lea       0x68(%rsp),%rcx
063c0ad4 call      0x0000`0000`063B`8F40
063c0ad9 ud2

core::slice::index::slice_index_order_fail:
063c0ae0 sub       $0xB8,%rsp
063c0ae7 mov       %r8,0x40(%rsp)
063c0aec mov       %rcx,0x58(%rsp)
063c0af1 mov       %rdx,0x60(%rsp)
063c0af6 lea       0x58(%rsp),%rcx
063c0afb call      0x0000`0000`063C`87D0
063c0b00 mov       %rax,0x48(%rsp)
063c0b05 mov       %rdx,0x50(%rsp)
063c0b0a lea       0x60(%rsp),%rcx
063c0b0f call      0x0000`0000`063C`87D0
063c0b14 mov       %rax,0x30(%rsp)
063c0b19 mov       %rdx,0x38(%rsp)
063c0b1e mov       0x38(%rsp),%rax
063c0b23 mov       0x30(%rsp),%rcx
063c0b28 mov       0x50(%rsp),%rdx
063c0b2d mov       0x48(%rsp),%r8
063c0b32 mov       %r8,0x98(%rsp)
063c0b3a mov       %rdx,0xA0(%rsp)
063c0b42 mov       %rcx,0xA8(%rsp)
063c0b4a mov       %rax,0xB0(%rsp)
063c0b52 lea       0x98(%rsp),%r9
063c0b5a lea       0x68(%rsp),%rcx
063c0b5f lea       0x63C`FDF0,%rdx
063c0b66 mov       $2,%r8d
063c0b6c movq      $2,0x20(%rsp)
063c0b75 call      0x0000`0000`063B`DE30
063c0b7a mov       0x40(%rsp),%rdx
063c0b7f lea       0x68(%rsp),%rcx
063c0b84 call      0x0000`0000`063B`8F40
063c0b89 ud2

core::slice::index::slice_end_index_overflow_fail:
063c0b90 sub       $0x68,%rsp
063c0b94 mov       %rcx,0x30(%rsp)
063c0b99 lea       0x38(%rsp),%rcx
063c0b9e lea       0x63C`FE40,%rdx
063c0ba5 mov       $1,%r8d
063c0bab lea       0x63C`E370,%r9
063c0bb2 xor       %eax,%eax
063c0bb4 movq      $0,0x20(%rsp)
063c0bbd call      0x0000`0000`063B`DE30
063c0bc2 mov       0x30(%rsp),%rdx
063c0bc7 lea       0x38(%rsp),%rcx
063c0bcc call      0x0000`0000`063B`8F40
063c0bd1 ud2

core::slice::index::impl$2::get<str>:
063c0be0 sub       $0x68,%rsp
063c0be4 mov       %r8,0x30(%rsp)
063c0be9 mov       %rdx,0x38(%rsp)
063c0bee mov       %rcx,0x40(%rsp)
063c0bf3 mov       %rcx,0x50(%rsp)
063c0bf8 mov       %rdx,0x58(%rsp)
063c0bfd mov       %r8,0x60(%rsp)
063c0c02 cmp       %r8,%rcx
063c0c05 jb        0x0000`0000`063C`0C12
063c0c07 movq      $0,0x48(%rsp)
063c0c10 jmp       0x0000`0000`063C`0C35
063c0c12 mov       0x30(%rsp),%r8
063c0c17 mov       0x38(%rsp),%rdx
063c0c1c mov       0x40(%rsp),%rcx
063c0c21 call      0x0000`0000`063C`0D90
063c0c26 mov       %rax,0x28(%rsp)
063c0c2b mov       0x28(%rsp),%rax
063c0c30 mov       %rax,0x48(%rsp)
063c0c35 mov       0x48(%rsp),%rax
063c0c3a add       $0x68,%rsp
063c0c3e ret

core::slice::index::impl$2::get<u8>:
063c0c40 sub       $0x68,%rsp
063c0c44 mov       %r8,0x30(%rsp)
063c0c49 mov       %rdx,0x38(%rsp)
063c0c4e mov       %rcx,0x40(%rsp)
063c0c53 mov       %rcx,0x50(%rsp)
063c0c58 mov       %rdx,0x58(%rsp)
063c0c5d mov       %r8,0x60(%rsp)
063c0c62 cmp       %r8,%rcx
063c0c65 jb        0x0000`0000`063C`0C72
063c0c67 movq      $0,0x48(%rsp)
063c0c70 jmp       0x0000`0000`063C`0C95
063c0c72 mov       0x30(%rsp),%r8
063c0c77 mov       0x38(%rsp),%rdx
063c0c7c mov       0x40(%rsp),%rcx
063c0c81 call      0x0000`0000`063C`0EB0
063c0c86 mov       %rax,0x28(%rsp)
063c0c8b mov       0x28(%rsp),%rax
063c0c90 mov       %rax,0x48(%rsp)
063c0c95 mov       0x48(%rsp),%rax
063c0c9a add       $0x68,%rsp
063c0c9e ret

core::slice::index::impl$2::get<u32>:
063c0ca0 sub       $0x68,%rsp
063c0ca4 mov       %r8,0x30(%rsp)
063c0ca9 mov       %rdx,0x38(%rsp)
063c0cae mov       %rcx,0x40(%rsp)
063c0cb3 mov       %rcx,0x50(%rsp)
063c0cb8 mov       %rdx,0x58(%rsp)
063c0cbd mov       %r8,0x60(%rsp)
063c0cc2 cmp       %r8,%rcx
063c0cc5 jb        0x0000`0000`063C`0CD2
063c0cc7 movq      $0,0x48(%rsp)
063c0cd0 jmp       0x0000`0000`063C`0CF5
063c0cd2 mov       0x30(%rsp),%r8
063c0cd7 mov       0x38(%rsp),%rdx
063c0cdc mov       0x40(%rsp),%rcx
063c0ce1 call      0x0000`0000`063C`0E20
063c0ce6 mov       %rax,0x28(%rsp)
063c0ceb mov       0x28(%rsp),%rax
063c0cf0 mov       %rax,0x48(%rsp)
063c0cf5 mov       0x48(%rsp),%rax
063c0cfa add       $0x68,%rsp
063c0cfe ret

core::slice::index::impl$2::get_unchecked<core::fmt::ArgumentV1>:
063c0d00 sub       $0x88,%rsp
063c0d07 mov       %r8,0x28(%rsp)
063c0d0c mov       %rdx,%rax
063c0d0f mov       0x28(%rsp),%rdx
063c0d14 mov       %rax,0x30(%rsp)
063c0d19 mov       %rcx,%rax
063c0d1c mov       0x30(%rsp),%rcx
063c0d21 mov       %rax,0x38(%rsp)
063c0d26 mov       %rax,0x48(%rsp)
063c0d2b mov       %rcx,0x50(%rsp)
063c0d30 mov       %rdx,0x58(%rsp)
063c0d35 call      0x0000`0000`063B`5550
063c0d3a mov       %rax,0x40(%rsp)
063c0d3f mov       0x40(%rsp),%rax
063c0d44 mov       0x38(%rsp),%rcx
063c0d49 mov       %rax,0x60(%rsp)
063c0d4e mov       %rcx,0x68(%rsp)
063c0d53 mov       %rax,0x70(%rsp)
063c0d58 mov       %rcx,0x78(%rsp)
063c0d5d shl       $4,%rcx
063c0d61 add       %rcx,%rax
063c0d64 mov       %rax,0x80(%rsp)
063c0d6c mov       0x80(%rsp),%rax
063c0d74 mov       %rax,0x20(%rsp)
063c0d79 mov       0x20(%rsp),%rax
063c0d7e add       $0x88,%rsp
063c0d85 ret

core::slice::index::impl$2::get_unchecked<str>:
063c0d90 sub       $0x88,%rsp
063c0d97 mov       %r8,0x28(%rsp)
063c0d9c mov       %rdx,%rax
063c0d9f mov       0x28(%rsp),%rdx
063c0da4 mov       %rax,0x30(%rsp)
063c0da9 mov       %rcx,%rax
063c0dac mov       0x30(%rsp),%rcx
063c0db1 mov       %rax,0x38(%rsp)
063c0db6 mov       %rax,0x48(%rsp)
063c0dbb mov       %rcx,0x50(%rsp)
063c0dc0 mov       %rdx,0x58(%rsp)
063c0dc5 call      0x0000`0000`063B`5570
063c0dca mov       %rax,0x40(%rsp)
063c0dcf mov       0x40(%rsp),%rax
063c0dd4 mov       0x38(%rsp),%rcx
063c0dd9 mov       %rax,0x60(%rsp)
063c0dde mov       %rcx,0x68(%rsp)
063c0de3 mov       %rax,0x70(%rsp)
063c0de8 mov       %rcx,0x78(%rsp)
063c0ded shl       $4,%rcx
063c0df1 add       %rcx,%rax
063c0df4 mov       %rax,0x80(%rsp)
063c0dfc mov       0x80(%rsp),%rax
063c0e04 mov       %rax,0x20(%rsp)
063c0e09 mov       0x20(%rsp),%rax
063c0e0e add       $0x88,%rsp
063c0e15 ret

core::slice::index::impl$2::get_unchecked<u32>:
063c0e20 sub       $0x88,%rsp
063c0e27 mov       %r8,0x28(%rsp)
063c0e2c mov       %rdx,%rax
063c0e2f mov       0x28(%rsp),%rdx
063c0e34 mov       %rax,0x30(%rsp)
063c0e39 mov       %rcx,%rax
063c0e3c mov       0x30(%rsp),%rcx
063c0e41 mov       %rax,0x38(%rsp)
063c0e46 mov       %rax,0x48(%rsp)
063c0e4b mov       %rcx,0x50(%rsp)
063c0e50 mov       %rdx,0x58(%rsp)
063c0e55 call      0x0000`0000`063B`5590
063c0e5a mov       %rax,0x40(%rsp)
063c0e5f mov       0x40(%rsp),%rax
063c0e64 mov       0x38(%rsp),%rcx
063c0e69 mov       %rax,0x60(%rsp)
063c0e6e mov       %rcx,0x68(%rsp)
063c0e73 mov       %rax,0x70(%rsp)
063c0e78 mov       %rcx,0x78(%rsp)
063c0e7d shl       $2,%rcx
063c0e81 add       %rcx,%rax
063c0e84 mov       %rax,0x80(%rsp)
063c0e8c mov       0x80(%rsp),%rax
063c0e94 mov       %rax,0x20(%rsp)
063c0e99 mov       0x20(%rsp),%rax
063c0e9e add       $0x88,%rsp
063c0ea5 ret

core::slice::index::impl$2::get_unchecked<u8>:
063c0eb0 sub       $0x88,%rsp
063c0eb7 mov       %r8,0x28(%rsp)
063c0ebc mov       %rdx,%rax
063c0ebf mov       0x28(%rsp),%rdx
063c0ec4 mov       %rax,0x30(%rsp)
063c0ec9 mov       %rcx,%rax
063c0ecc mov       0x30(%rsp),%rcx
063c0ed1 mov       %rax,0x38(%rsp)
063c0ed6 mov       %rax,0x48(%rsp)
063c0edb mov       %rcx,0x50(%rsp)
063c0ee0 mov       %rdx,0x58(%rsp)
063c0ee5 call      0x0000`0000`063B`55D0
063c0eea mov       %rax,0x40(%rsp)
063c0eef mov       0x38(%rsp),%rcx
063c0ef4 mov       0x40(%rsp),%rax
063c0ef9 mov       %rax,0x60(%rsp)
063c0efe mov       %rcx,0x68(%rsp)
063c0f03 mov       %rax,0x70(%rsp)
063c0f08 mov       %rcx,0x78(%rsp)
063c0f0d add       %rcx,%rax
063c0f10 mov       %rax,0x80(%rsp)
063c0f18 mov       0x80(%rsp),%rax
063c0f20 mov       %rax,0x20(%rsp)
063c0f25 mov       0x20(%rsp),%rax
063c0f2a add       $0x88,%rsp
063c0f31 ret

core::slice::index::impl$3::get<u8>:
063c0f40 sub       $0x88,%rsp
063c0f47 mov       %r9,0x30(%rsp)
063c0f4c mov       %r8,0x38(%rsp)
063c0f51 mov       %rdx,0x40(%rsp)
063c0f56 mov       %rcx,0x48(%rsp)
063c0f5b mov       %rcx,0x68(%rsp)
063c0f60 mov       %rdx,0x70(%rsp)
063c0f65 mov       %r8,0x78(%rsp)
063c0f6a mov       %r9,0x80(%rsp)
063c0f72 cmp       %rdx,%rcx
063c0f75 ja        0x0000`0000`063C`0F8F
063c0f77 mov       0x40(%rsp),%rax
063c0f7c mov       0x30(%rsp),%rcx
063c0f81 cmp       %rcx,%rax
063c0f84 seta      %al
063c0f87 and       $1,%al
063c0f89 mov       %al,0x67(%rsp)
063c0f8d jmp       0x0000`0000`063C`0F94
063c0f8f movb      $1,0x67(%rsp)
063c0f94 testb     $1,0x67(%rsp)
063c0f99 jne       0x0000`0000`063C`0FC0
063c0f9b mov       0x30(%rsp),%r9
063c0fa0 mov       0x38(%rsp),%r8
063c0fa5 mov       0x40(%rsp),%rdx
063c0faa mov       0x48(%rsp),%rcx
063c0faf call      0x0000`0000`063C`1200
063c0fb4 mov       %rax,0x20(%rsp)
063c0fb9 mov       %rdx,0x28(%rsp)
063c0fbe jmp       0x0000`0000`063C`0FDB
063c0fc0 movq      $0,0x50(%rsp)
063c0fc9 mov       0x50(%rsp),%rax
063c0fce mov       0x58(%rsp),%rdx
063c0fd3 add       $0x88,%rsp
063c0fda ret
063c0fdb mov       0x28(%rsp),%rax
063c0fe0 mov       0x20(%rsp),%rcx
063c0fe5 mov       %rcx,0x50(%rsp)
063c0fea mov       %rax,0x58(%rsp)
063c0fef jmp       0x0000`0000`063C`0FC9

core::slice::index::impl$3::get_unchecked<usize>:
063c1000 sub       $0xB8,%rsp
063c1007 mov       %r9,0x48(%rsp)
063c100c mov       %r8,0x58(%rsp)
063c1011 mov       %rdx,%rax
063c1014 mov       0x48(%rsp),%rdx
063c1019 mov       %rax,0x50(%rsp)
063c101e mov       %rcx,%r8
063c1021 mov       0x58(%rsp),%rcx
063c1026 mov       %r8,0x60(%rsp)
063c102b mov       %r8,0x70(%rsp)
063c1030 mov       %rax,0x78(%rsp)
063c1035 mov       %rcx,0x80(%rsp)
063c103d mov       %rdx,0x88(%rsp)
063c1045 call      0x0000`0000`063B`55F0
063c104a mov       %rax,0x68(%rsp)
063c104f mov       0x68(%rsp),%rax
063c1054 mov       0x60(%rsp),%rcx
063c1059 mov       %rax,0x90(%rsp)
063c1061 mov       %rcx,0x98(%rsp)
063c1069 mov       %rax,0xA0(%rsp)
063c1071 mov       %rcx,0xA8(%rsp)
063c1079 shl       $3,%rcx
063c107d add       %rcx,%rax
063c1080 mov       %rax,0xB0(%rsp)
063c1088 mov       0xB0(%rsp),%rax
063c1090 mov       %rax,0x40(%rsp)
063c1095 mov       0x60(%rsp),%rcx
063c109a mov       0x50(%rsp),%rax
063c109f sub       %rcx,%rax
063c10a2 mov       %rax,0x38(%rsp)
063c10a7 setb      %al
063c10aa test      $1,%al
063c10ac jne       0x0000`0000`063C`10C9
063c10ae mov       0x38(%rsp),%rdx
063c10b3 mov       0x40(%rsp),%rcx
063c10b8 call      0x0000`0000`063B`5830
063c10bd mov       %rax,0x28(%rsp)
063c10c2 mov       %rdx,0x30(%rsp)
063c10c7 jmp       0x0000`0000`063C`10E3
063c10c9 lea       0x63C`E1F0,%rcx
063c10d0 lea       0x63C`FED0,%r8
063c10d7 mov       $0x21,%edx
063c10dc call      0x0000`0000`063B`8E30
063c10e1 ud2
063c10e3 mov       0x30(%rsp),%rdx
063c10e8 mov       0x28(%rsp),%rax
063c10ed add       $0xB8,%rsp
063c10f4 ret

core::slice::index::impl$3::get_unchecked<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c1100 sub       $0xB8,%rsp
063c1107 mov       %r9,0x48(%rsp)
063c110c mov       %r8,0x58(%rsp)
063c1111 mov       %rdx,%rax
063c1114 mov       0x48(%rsp),%rdx
063c1119 mov       %rax,0x50(%rsp)
063c111e mov       %rcx,%r8
063c1121 mov       0x58(%rsp),%rcx
063c1126 mov       %r8,0x60(%rsp)
063c112b mov       %r8,0x70(%rsp)
063c1130 mov       %rax,0x78(%rsp)
063c1135 mov       %rcx,0x80(%rsp)
063c113d mov       %rdx,0x88(%rsp)
063c1145 call      0x0000`0000`063B`55B0
063c114a mov       %rax,0x68(%rsp)
063c114f mov       0x60(%rsp),%rcx
063c1154 mov       0x68(%rsp),%rax
063c1159 mov       %rax,0x90(%rsp)
063c1161 mov       %rcx,0x98(%rsp)
063c1169 mov       %rax,0xA0(%rsp)
063c1171 mov       %rcx,0xA8(%rsp)
063c1179 add       %rcx,%rax
063c117c mov       %rax,0xB0(%rsp)
063c1184 mov       0xB0(%rsp),%rax
063c118c mov       %rax,0x40(%rsp)
063c1191 mov       0x60(%rsp),%rcx
063c1196 mov       0x50(%rsp),%rax
063c119b sub       %rcx,%rax
063c119e mov       %rax,0x38(%rsp)
063c11a3 setb      %al
063c11a6 test      $1,%al
063c11a8 jne       0x0000`0000`063C`11C5
063c11aa mov       0x38(%rsp),%rdx
063c11af mov       0x40(%rsp),%rcx
063c11b4 call      0x0000`0000`063B`5880
063c11b9 mov       %rax,0x28(%rsp)
063c11be mov       %rdx,0x30(%rsp)
063c11c3 jmp       0x0000`0000`063C`11DF
063c11c5 lea       0x63C`E1F0,%rcx
063c11cc lea       0x63C`FED0,%r8
063c11d3 mov       $0x21,%edx
063c11d8 call      0x0000`0000`063B`8E30
063c11dd ud2
063c11df mov       0x30(%rsp),%rdx
063c11e4 mov       0x28(%rsp),%rax
063c11e9 add       $0xB8,%rsp
063c11f0 ret

core::slice::index::impl$3::get_unchecked<u8>:
063c1200 sub       $0xB8,%rsp
063c1207 mov       %r9,0x48(%rsp)
063c120c mov       %r8,0x58(%rsp)
063c1211 mov       %rdx,%rax
063c1214 mov       0x48(%rsp),%rdx
063c1219 mov       %rax,0x50(%rsp)
063c121e mov       %rcx,%r8
063c1221 mov       0x58(%rsp),%rcx
063c1226 mov       %r8,0x60(%rsp)
063c122b mov       %r8,0x70(%rsp)
063c1230 mov       %rax,0x78(%rsp)
063c1235 mov       %rcx,0x80(%rsp)
063c123d mov       %rdx,0x88(%rsp)
063c1245 call      0x0000`0000`063B`55D0
063c124a mov       %rax,0x68(%rsp)
063c124f mov       0x60(%rsp),%rcx
063c1254 mov       0x68(%rsp),%rax
063c1259 mov       %rax,0x90(%rsp)
063c1261 mov       %rcx,0x98(%rsp)
063c1269 mov       %rax,0xA0(%rsp)
063c1271 mov       %rcx,0xA8(%rsp)
063c1279 add       %rcx,%rax
063c127c mov       %rax,0xB0(%rsp)
063c1284 mov       0xB0(%rsp),%rax
063c128c mov       %rax,0x40(%rsp)
063c1291 mov       0x60(%rsp),%rcx
063c1296 mov       0x50(%rsp),%rax
063c129b sub       %rcx,%rax
063c129e mov       %rax,0x38(%rsp)
063c12a3 setb      %al
063c12a6 test      $1,%al
063c12a8 jne       0x0000`0000`063C`12C5
063c12aa mov       0x38(%rsp),%rdx
063c12af mov       0x40(%rsp),%rcx
063c12b4 call      0x0000`0000`063B`57E0
063c12b9 mov       %rax,0x28(%rsp)
063c12be mov       %rdx,0x30(%rsp)
063c12c3 jmp       0x0000`0000`063C`12DF
063c12c5 lea       0x63C`E1F0,%rcx
063c12cc lea       0x63C`FED0,%r8
063c12d3 mov       $0x21,%edx
063c12d8 call      0x0000`0000`063B`8E30
063c12dd ud2
063c12df mov       0x30(%rsp),%rdx
063c12e4 mov       0x28(%rsp),%rax
063c12e9 add       $0xB8,%rsp
063c12f0 ret

core::slice::index::impl$3::get_unchecked_mut<u8>:
063c1300 sub       $0xB8,%rsp
063c1307 mov       %rdx,0x48(%rsp)
063c130c mov       %rcx,0x50(%rsp)
063c1311 mov       %rcx,0x60(%rsp)
063c1316 mov       %rdx,0x68(%rsp)
063c131b mov       %r8,0x70(%rsp)
063c1320 mov       %r9,0x78(%rsp)
063c1325 mov       %r8,0xA8(%rsp)
063c132d mov       %r9,0xB0(%rsp)
063c1335 mov       %r8,0x58(%rsp)
063c133a mov       0x50(%rsp),%rcx
063c133f mov       0x58(%rsp),%rax
063c1344 mov       %rax,0x80(%rsp)
063c134c mov       %rcx,0x88(%rsp)
063c1354 mov       %rax,0x90(%rsp)
063c135c mov       %rcx,0x98(%rsp)
063c1364 add       %rcx,%rax
063c1367 mov       %rax,0xA0(%rsp)
063c136f mov       0xA0(%rsp),%rax
063c1377 mov       %rax,0x40(%rsp)
063c137c mov       0x50(%rsp),%rcx
063c1381 mov       0x48(%rsp),%rax
063c1386 sub       %rcx,%rax
063c1389 mov       %rax,0x38(%rsp)
063c138e setb      %al
063c1391 test      $1,%al
063c1393 jne       0x0000`0000`063C`13B0
063c1395 mov       0x38(%rsp),%rdx
063c139a mov       0x40(%rsp),%rcx
063c139f call      0x0000`0000`063B`58D0
063c13a4 mov       %rax,0x28(%rsp)
063c13a9 mov       %rdx,0x30(%rsp)
063c13ae jmp       0x0000`0000`063C`13CA
063c13b0 lea       0x63C`E1F0,%rcx
063c13b7 lea       0x63C`FEE8,%r8
063c13be mov       $0x21,%edx
063c13c3 call      0x0000`0000`063B`8E30
063c13c8 ud2
063c13ca mov       0x30(%rsp),%rdx
063c13cf mov       0x28(%rsp),%rax
063c13d4 add       $0xB8,%rsp
063c13db ret

core::slice::index::impl$3::index<u8>:
063c13e0 sub       $0x78,%rsp
063c13e4 mov       %r9,0x30(%rsp)
063c13e9 mov       %r8,0x38(%rsp)
063c13ee mov       %rdx,0x40(%rsp)
063c13f3 mov       %rcx,0x48(%rsp)
063c13f8 mov       0xA0(%rsp),%rax
063c1400 mov       %rax,0x50(%rsp)
063c1405 mov       %rcx,0x58(%rsp)
063c140a mov       %rdx,0x60(%rsp)
063c140f mov       %r8,0x68(%rsp)
063c1414 mov       %r9,0x70(%rsp)
063c1419 cmp       %rdx,%rcx
063c141c ja        0x0000`0000`063C`142F
063c141e mov       0x40(%rsp),%rax
063c1423 mov       0x30(%rsp),%rcx
063c1428 cmp       %rcx,%rax
063c142b ja        0x0000`0000`063C`146A
063c142d jmp       0x0000`0000`063C`1445
063c142f mov       0x50(%rsp),%r8
063c1434 mov       0x40(%rsp),%rdx
063c1439 mov       0x48(%rsp),%rcx
063c143e call      0x0000`0000`063C`0AE0
063c1443 ud2
063c1445 mov       0x30(%rsp),%r9
063c144a mov       0x38(%rsp),%r8
063c144f mov       0x40(%rsp),%rdx
063c1454 mov       0x48(%rsp),%rcx
063c1459 call      0x0000`0000`063C`1200
063c145e mov       %rax,0x20(%rsp)
063c1463 mov       %rdx,0x28(%rsp)
063c1468 jmp       0x0000`0000`063C`1480
063c146a mov       0x50(%rsp),%r8
063c146f mov       0x30(%rsp),%rdx
063c1474 mov       0x40(%rsp),%rcx
063c1479 call      0x0000`0000`063C`0A30
063c147e ud2
063c1480 mov       0x28(%rsp),%rdx
063c1485 mov       0x20(%rsp),%rax
063c148a add       $0x78,%rsp
063c148e ret

core::slice::index::impl$3::index_mut<u8>:
063c1490 sub       $0x78,%rsp
063c1494 mov       %r9,0x30(%rsp)
063c1499 mov       %r8,0x38(%rsp)
063c149e mov       %rdx,0x40(%rsp)
063c14a3 mov       %rcx,0x48(%rsp)
063c14a8 mov       0xA0(%rsp),%rax
063c14b0 mov       %rax,0x50(%rsp)
063c14b5 mov       %rcx,0x58(%rsp)
063c14ba mov       %rdx,0x60(%rsp)
063c14bf mov       %r8,0x68(%rsp)
063c14c4 mov       %r9,0x70(%rsp)
063c14c9 cmp       %rdx,%rcx
063c14cc ja        0x0000`0000`063C`14DF
063c14ce mov       0x40(%rsp),%rax
063c14d3 mov       0x30(%rsp),%rcx
063c14d8 cmp       %rcx,%rax
063c14db ja        0x0000`0000`063C`151A
063c14dd jmp       0x0000`0000`063C`14F5
063c14df mov       0x50(%rsp),%r8
063c14e4 mov       0x40(%rsp),%rdx
063c14e9 mov       0x48(%rsp),%rcx
063c14ee call      0x0000`0000`063C`0AE0
063c14f3 ud2
063c14f5 mov       0x30(%rsp),%r9
063c14fa mov       0x38(%rsp),%r8
063c14ff mov       0x40(%rsp),%rdx
063c1504 mov       0x48(%rsp),%rcx
063c1509 call      0x0000`0000`063C`1300
063c150e mov       %rax,0x20(%rsp)
063c1513 mov       %rdx,0x28(%rsp)
063c1518 jmp       0x0000`0000`063C`1530
063c151a mov       0x50(%rsp),%r8
063c151f mov       0x30(%rsp),%rdx
063c1524 mov       0x40(%rsp),%rcx
063c1529 call      0x0000`0000`063C`0A30
063c152e ud2
063c1530 mov       0x28(%rsp),%rdx
063c1535 mov       0x20(%rsp),%rax
063c153a add       $0x78,%rsp
063c153e ret

core::slice::index::impl$4::get_unchecked<usize>:
063c1540 sub       $0x58,%rsp
063c1544 mov       %r8,%r9
063c1547 mov       %rdx,%r8
063c154a mov       %rcx,0x40(%rsp)
063c154f mov       %r8,0x48(%rsp)
063c1554 mov       %r9,0x50(%rsp)
063c1559 movq      $0,0x30(%rsp)
063c1562 mov       %rcx,0x38(%rsp)
063c1567 mov       0x30(%rsp),%rcx
063c156c mov       0x38(%rsp),%rdx
063c1571 call      0x0000`0000`063C`1000
063c1576 mov       %rax,0x20(%rsp)
063c157b mov       %rdx,0x28(%rsp)
063c1580 mov       0x28(%rsp),%rdx
063c1585 mov       0x20(%rsp),%rax
063c158a add       $0x58,%rsp
063c158e ret

core::slice::index::impl$4::get_unchecked<u8>:
063c1590 sub       $0x58,%rsp
063c1594 mov       %r8,%r9
063c1597 mov       %rdx,%r8
063c159a mov       %rcx,0x40(%rsp)
063c159f mov       %r8,0x48(%rsp)
063c15a4 mov       %r9,0x50(%rsp)
063c15a9 movq      $0,0x30(%rsp)
063c15b2 mov       %rcx,0x38(%rsp)
063c15b7 mov       0x30(%rsp),%rcx
063c15bc mov       0x38(%rsp),%rdx
063c15c1 call      0x0000`0000`063C`1200
063c15c6 mov       %rax,0x20(%rsp)
063c15cb mov       %rdx,0x28(%rsp)
063c15d0 mov       0x28(%rsp),%rdx
063c15d5 mov       0x20(%rsp),%rax
063c15da add       $0x58,%rsp
063c15de ret

core::slice::index::impl$4::index<u8>:
063c15e0 sub       $0x68,%rsp
063c15e4 mov       %r9,%rax
063c15e7 mov       %r8,%r9
063c15ea mov       %rdx,%r8
063c15ed mov       %rcx,0x50(%rsp)
063c15f2 mov       %r8,0x58(%rsp)
063c15f7 mov       %r9,0x60(%rsp)
063c15fc movq      $0,0x40(%rsp)
063c1605 mov       %rcx,0x48(%rsp)
063c160a mov       0x40(%rsp),%rcx
063c160f mov       0x48(%rsp),%rdx
063c1614 mov       %rax,0x20(%rsp)
063c1619 call      0x0000`0000`063C`13E0
063c161e mov       %rax,0x30(%rsp)
063c1623 mov       %rdx,0x38(%rsp)
063c1628 mov       0x38(%rsp),%rdx
063c162d mov       0x30(%rsp),%rax
063c1632 add       $0x68,%rsp
063c1636 ret

core::slice::index::impl$4::index_mut<u8>:
063c1640 sub       $0x68,%rsp
063c1644 mov       %r9,%rax
063c1647 mov       %r8,%r9
063c164a mov       %rdx,%r8
063c164d mov       %rcx,0x50(%rsp)
063c1652 mov       %r8,0x58(%rsp)
063c1657 mov       %r9,0x60(%rsp)
063c165c movq      $0,0x40(%rsp)
063c1665 mov       %rcx,0x48(%rsp)
063c166a mov       0x40(%rsp),%rcx
063c166f mov       0x48(%rsp),%rdx
063c1674 mov       %rax,0x20(%rsp)
063c1679 call      0x0000`0000`063C`1490
063c167e mov       %rax,0x30(%rsp)
063c1683 mov       %rdx,0x38(%rsp)
063c1688 mov       0x38(%rsp),%rdx
063c168d mov       0x30(%rsp),%rax
063c1692 add       $0x68,%rsp
063c1696 ret

core::slice::index::impl$5::get_unchecked<u8>:
063c16a0 sub       $0x78,%rsp
063c16a4 mov       %r8,0x30(%rsp)
063c16a9 mov       %rdx,%rax
063c16ac mov       0x30(%rsp),%rdx
063c16b1 mov       %rax,0x38(%rsp)
063c16b6 mov       %rcx,%rax
063c16b9 mov       0x38(%rsp),%rcx
063c16be mov       %rax,0x40(%rsp)
063c16c3 mov       %rax,0x60(%rsp)
063c16c8 mov       %rcx,0x68(%rsp)
063c16cd mov       %rdx,0x70(%rsp)
063c16d2 call      0x0000`0000`063B`54F0
063c16d7 mov       %rax,0x48(%rsp)
063c16dc mov       0x30(%rsp),%r9
063c16e1 mov       0x38(%rsp),%r8
063c16e6 mov       0x48(%rsp),%rax
063c16eb mov       0x40(%rsp),%rcx
063c16f0 mov       %rcx,0x50(%rsp)
063c16f5 mov       %rax,0x58(%rsp)
063c16fa mov       0x50(%rsp),%rcx
063c16ff mov       0x58(%rsp),%rdx
063c1704 call      0x0000`0000`063C`1200
063c1709 mov       %rax,0x20(%rsp)
063c170e mov       %rdx,0x28(%rsp)
063c1713 mov       0x28(%rsp),%rdx
063c1718 mov       0x20(%rsp),%rax
063c171d add       $0x78,%rsp
063c1721 ret

core::slice::index::impl$5::get_unchecked<usize>:
063c1730 sub       $0x78,%rsp
063c1734 mov       %r8,0x30(%rsp)
063c1739 mov       %rdx,%rax
063c173c mov       0x30(%rsp),%rdx
063c1741 mov       %rax,0x38(%rsp)
063c1746 mov       %rcx,%rax
063c1749 mov       0x38(%rsp),%rcx
063c174e mov       %rax,0x40(%rsp)
063c1753 mov       %rax,0x60(%rsp)
063c1758 mov       %rcx,0x68(%rsp)
063c175d mov       %rdx,0x70(%rsp)
063c1762 call      0x0000`0000`063B`5520
063c1767 mov       %rax,0x48(%rsp)
063c176c mov       0x30(%rsp),%r9
063c1771 mov       0x38(%rsp),%r8
063c1776 mov       0x48(%rsp),%rax
063c177b mov       0x40(%rsp),%rcx
063c1780 mov       %rcx,0x50(%rsp)
063c1785 mov       %rax,0x58(%rsp)
063c178a mov       0x50(%rsp),%rcx
063c178f mov       0x58(%rsp),%rdx
063c1794 call      0x0000`0000`063C`1000
063c1799 mov       %rax,0x20(%rsp)
063c179e mov       %rdx,0x28(%rsp)
063c17a3 mov       0x28(%rsp),%rdx
063c17a8 mov       0x20(%rsp),%rax
063c17ad add       $0x78,%rsp
063c17b1 ret

core::slice::index::impl$5::get_unchecked<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c17c0 sub       $0x78,%rsp
063c17c4 mov       %r8,0x30(%rsp)
063c17c9 mov       %rdx,%rax
063c17cc mov       0x30(%rsp),%rdx
063c17d1 mov       %rax,0x38(%rsp)
063c17d6 mov       %rcx,%rax
063c17d9 mov       0x38(%rsp),%rcx
063c17de mov       %rax,0x40(%rsp)
063c17e3 mov       %rax,0x60(%rsp)
063c17e8 mov       %rcx,0x68(%rsp)
063c17ed mov       %rdx,0x70(%rsp)
063c17f2 call      0x0000`0000`063B`54C0
063c17f7 mov       %rax,0x48(%rsp)
063c17fc mov       0x30(%rsp),%r9
063c1801 mov       0x38(%rsp),%r8
063c1806 mov       0x48(%rsp),%rax
063c180b mov       0x40(%rsp),%rcx
063c1810 mov       %rcx,0x50(%rsp)
063c1815 mov       %rax,0x58(%rsp)
063c181a mov       0x50(%rsp),%rcx
063c181f mov       0x58(%rsp),%rdx
063c1824 call      0x0000`0000`063C`1100
063c1829 mov       %rax,0x20(%rsp)
063c182e mov       %rdx,0x28(%rsp)
063c1833 mov       0x28(%rsp),%rdx
063c1838 mov       0x20(%rsp),%rax
063c183d add       $0x78,%rsp
063c1841 ret

core::slice::index::impl$5::index<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c1850 sub       $0x68,%rsp
063c1854 mov       %r9,0x30(%rsp)
063c1859 mov       %r8,0x38(%rsp)
063c185e mov       %rdx,0x40(%rsp)
063c1863 mov       %rcx,0x48(%rsp)
063c1868 mov       %rcx,0x50(%rsp)
063c186d mov       %rdx,0x58(%rsp)
063c1872 mov       %r8,0x60(%rsp)
063c1877 cmp       %r8,%rcx
063c187a ja        0x0000`0000`063C`189C
063c187c mov       0x38(%rsp),%r8
063c1881 mov       0x40(%rsp),%rdx
063c1886 mov       0x48(%rsp),%rcx
063c188b call      0x0000`0000`063C`17C0
063c1890 mov       %rax,0x20(%rsp)
063c1895 mov       %rdx,0x28(%rsp)
063c189a jmp       0x0000`0000`063C`18B2
063c189c mov       0x30(%rsp),%r8
063c18a1 mov       0x38(%rsp),%rdx
063c18a6 mov       0x48(%rsp),%rcx
063c18ab call      0x0000`0000`063C`0980
063c18b0 ud2
063c18b2 mov       0x28(%rsp),%rdx
063c18b7 mov       0x20(%rsp),%rax
063c18bc add       $0x68,%rsp
063c18c0 ret

core::slice::index::impl$5::index<u8>:
063c18d0 sub       $0x68,%rsp
063c18d4 mov       %r9,0x30(%rsp)
063c18d9 mov       %r8,0x38(%rsp)
063c18de mov       %rdx,0x40(%rsp)
063c18e3 mov       %rcx,0x48(%rsp)
063c18e8 mov       %rcx,0x50(%rsp)
063c18ed mov       %rdx,0x58(%rsp)
063c18f2 mov       %r8,0x60(%rsp)
063c18f7 cmp       %r8,%rcx
063c18fa ja        0x0000`0000`063C`191C
063c18fc mov       0x38(%rsp),%r8
063c1901 mov       0x40(%rsp),%rdx
063c1906 mov       0x48(%rsp),%rcx
063c190b call      0x0000`0000`063C`16A0
063c1910 mov       %rax,0x20(%rsp)
063c1915 mov       %rdx,0x28(%rsp)
063c191a jmp       0x0000`0000`063C`1932
063c191c mov       0x30(%rsp),%r8
063c1921 mov       0x38(%rsp),%rdx
063c1926 mov       0x48(%rsp),%rcx
063c192b call      0x0000`0000`063C`0980
063c1930 ud2
063c1932 mov       0x28(%rsp),%rdx
063c1937 mov       0x20(%rsp),%rax
063c193c add       $0x68,%rsp
063c1940 ret

core::slice::index::impl$6::index_mut<u8>:
063c1950 sub       $0x18,%rsp
063c1954 mov       %rcx,%rax
063c1957 mov       %rax,8(%rsp)
063c195c mov       %rdx,0x10(%rsp)
063c1961 add       $0x18,%rsp
063c1965 ret

core::slice::index::impl$7::index<u8>:
063c1970 sub       $0x98,%rsp
063c1977 mov       %r9,0x48(%rsp)
063c197c mov       %r8,0x50(%rsp)
063c1981 mov       %rdx,0x58(%rsp)
063c1986 mov       %rcx,0x60(%rsp)
063c198b mov       %rdx,0x88(%rsp)
063c1993 mov       %r8,0x90(%rsp)
063c199b call      0x0000`0000`063B`6960
063c19a0 mov       %rax,0x68(%rsp)
063c19a5 mov       0x68(%rsp),%rax
063c19aa cmpq      $0xFFFF`FFFF`FFFF`FFFF,(%rax)
063c19ae je        0x0000`0000`063C`19E8
063c19b0 mov       0x60(%rsp),%rax
063c19b5 mov       (%rax),%rcx
063c19b8 mov       %rcx,0x70(%rsp)
063c19bd mov       8(%rax),%rcx
063c19c1 mov       %rcx,0x78(%rsp)
063c19c6 mov       0x10(%rax),%rax
063c19ca mov       %rax,0x80(%rsp)
063c19d2 lea       0x70(%rsp),%rcx
063c19d7 call      0x0000`0000`063B`6970
063c19dc mov       %rax,0x38(%rsp)
063c19e1 mov       %rdx,0x40(%rsp)
063c19e6 jmp       0x0000`0000`063C`19F4
063c19e8 mov       0x48(%rsp),%rcx
063c19ed call      0x0000`0000`063C`0B90
063c19f2 ud2
063c19f4 mov       0x48(%rsp),%rax
063c19f9 mov       0x50(%rsp),%r9
063c19fe mov       0x58(%rsp),%r8
063c1a03 mov       0x40(%rsp),%rdx
063c1a08 mov       0x38(%rsp),%rcx
063c1a0d mov       %rax,0x20(%rsp)
063c1a12 call      0x0000`0000`063C`13E0
063c1a17 mov       %rax,0x28(%rsp)
063c1a1c mov       %rdx,0x30(%rsp)
063c1a21 mov       0x30(%rsp),%rdx
063c1a26 mov       0x28(%rsp),%rax
063c1a2b add       $0x98,%rsp
063c1a32 ret

core::slice::iter::impl$0::into_iter<usize>:
063c1a40 sub       $0x48,%rsp
063c1a44 mov       %rcx,0x38(%rsp)
063c1a49 mov       %rdx,0x40(%rsp)
063c1a4e call      0x0000`0000`063C`2D90
063c1a53 mov       %rax,0x28(%rsp)
063c1a58 mov       %rdx,0x30(%rsp)
063c1a5d mov       0x30(%rsp),%rdx
063c1a62 mov       0x28(%rsp),%rax
063c1a67 add       $0x48,%rsp
063c1a6b ret

core::slice::iter::impl$0::into_iter<u8>:
063c1a70 sub       $0x48,%rsp
063c1a74 mov       %rcx,0x38(%rsp)
063c1a79 mov       %rdx,0x40(%rsp)
063c1a7e call      0x0000`0000`063C`2CD0
063c1a83 mov       %rax,0x28(%rsp)
063c1a88 mov       %rdx,0x30(%rsp)
063c1a8d mov       0x30(%rsp),%rdx
063c1a92 mov       0x28(%rsp),%rax
063c1a97 add       $0x48,%rsp
063c1a9b ret

core::slice::iter::impl$0::into_iter<tuple$<u8,u8> >:
063c1aa0 sub       $0x48,%rsp
063c1aa4 mov       %rcx,0x38(%rsp)
063c1aa9 mov       %rdx,0x40(%rsp)
063c1aae call      0x0000`0000`063C`2D00
063c1ab3 mov       %rax,0x28(%rsp)
063c1ab8 mov       %rdx,0x30(%rsp)
063c1abd mov       0x30(%rsp),%rdx
063c1ac2 mov       0x28(%rsp),%rax
063c1ac7 add       $0x48,%rsp
063c1acb ret

core::slice::iter::impl$0::into_iter<array$<usize,4> >:
063c1ad0 sub       $0x48,%rsp
063c1ad4 mov       %rcx,0x38(%rsp)
063c1ad9 mov       %rdx,0x40(%rsp)
063c1ade call      0x0000`0000`063C`2D30
063c1ae3 mov       %rax,0x28(%rsp)
063c1ae8 mov       %rdx,0x30(%rsp)
063c1aed mov       0x30(%rsp),%rdx
063c1af2 mov       0x28(%rsp),%rax
063c1af7 add       $0x48,%rsp
063c1afb ret

core::slice::iter::Iter<tuple$<u8,u8> >::new<tuple$<u8,u8> >:
063c1b00 sub       $0xC8,%rsp
063c1b07 mov       %rdx,0x38(%rsp)
063c1b0c mov       %rcx,0x60(%rsp)
063c1b11 mov       %rdx,0x68(%rsp)
063c1b16 call      0x0000`0000`063C`2BA0
063c1b1b mov       %rax,0x40(%rsp)
063c1b20 mov       %rax,0x70(%rsp)
063c1b25 mov       0x40(%rsp),%rcx
063c1b2a call      0x0000`0000`063B`5240
063c1b2f jmp       0x0000`0000`063C`1B31
063c1b31 mov       $2,%eax
063c1b36 cmp       $0,%rax
063c1b3a jne       0x0000`0000`063C`1B80
063c1b3c mov       0x38(%rsp),%rcx
063c1b41 mov       0x40(%rsp),%rax
063c1b46 mov       %rax,0xA0(%rsp)
063c1b4e mov       %rcx,0xA8(%rsp)
063c1b56 mov       %rax,0xB0(%rsp)
063c1b5e mov       %rcx,0xB8(%rsp)
063c1b66 add       %rcx,%rax
063c1b69 mov       %rax,0xC0(%rsp)
063c1b71 mov       0xC0(%rsp),%rax
063c1b79 mov       %rax,0x30(%rsp)
063c1b7e jmp       0x0000`0000`063C`1BD4
063c1b80 mov       0x40(%rsp),%rax
063c1b85 mov       0x38(%rsp),%rcx
063c1b8a mov       %rax,0x78(%rsp)
063c1b8f mov       %rcx,0x80(%rsp)
063c1b97 mov       %rax,0x88(%rsp)
063c1b9f mov       %rcx,0x90(%rsp)
063c1ba7 shl       $1,%rcx
063c1bab add       %rcx,%rax
063c1bae mov       %rax,0x98(%rsp)
063c1bb6 mov       0x98(%rsp),%rax
063c1bbe mov       %rax,0x58(%rsp)
063c1bc3 mov       0x40(%rsp),%rcx
063c1bc8 call      0x0000`0000`063B`5120
063c1bcd mov       %rax,0x28(%rsp)
063c1bd2 jmp       0x0000`0000`063C`1BE0
063c1bd4 mov       0x30(%rsp),%rax
063c1bd9 mov       %rax,0x58(%rsp)
063c1bde jmp       0x0000`0000`063C`1BC3
063c1be0 mov       0x28(%rsp),%rcx
063c1be5 mov       0x58(%rsp),%rax
063c1bea mov       %rcx,0x48(%rsp)
063c1bef mov       %rax,0x50(%rsp)
063c1bf4 mov       0x48(%rsp),%rax
063c1bf9 mov       0x50(%rsp),%rdx
063c1bfe add       $0xC8,%rsp
063c1c05 ret

core::slice::iter::Iter<array$<usize,4> >::new<array$<usize,4> >:
063c1c10 sub       $0xC8,%rsp
063c1c17 mov       %rdx,0x38(%rsp)
063c1c1c mov       %rcx,0x60(%rsp)
063c1c21 mov       %rdx,0x68(%rsp)
063c1c26 call      0x0000`0000`063C`2C60
063c1c2b mov       %rax,0x40(%rsp)
063c1c30 mov       %rax,0x70(%rsp)
063c1c35 mov       0x40(%rsp),%rcx
063c1c3a call      0x0000`0000`063B`5270
063c1c3f jmp       0x0000`0000`063C`1C41
063c1c41 mov       $0x20,%eax
063c1c46 cmp       $0,%rax
063c1c4a jne       0x0000`0000`063C`1C90
063c1c4c mov       0x38(%rsp),%rcx
063c1c51 mov       0x40(%rsp),%rax
063c1c56 mov       %rax,0xA0(%rsp)
063c1c5e mov       %rcx,0xA8(%rsp)
063c1c66 mov       %rax,0xB0(%rsp)
063c1c6e mov       %rcx,0xB8(%rsp)
063c1c76 add       %rcx,%rax
063c1c79 mov       %rax,0xC0(%rsp)
063c1c81 mov       0xC0(%rsp),%rax
063c1c89 mov       %rax,0x30(%rsp)
063c1c8e jmp       0x0000`0000`063C`1CE4
063c1c90 mov       0x40(%rsp),%rax
063c1c95 mov       0x38(%rsp),%rcx
063c1c9a mov       %rax,0x78(%rsp)
063c1c9f mov       %rcx,0x80(%rsp)
063c1ca7 mov       %rax,0x88(%rsp)
063c1caf mov       %rcx,0x90(%rsp)
063c1cb7 shl       $5,%rcx
063c1cbb add       %rcx,%rax
063c1cbe mov       %rax,0x98(%rsp)
063c1cc6 mov       0x98(%rsp),%rax
063c1cce mov       %rax,0x58(%rsp)
063c1cd3 mov       0x40(%rsp),%rcx
063c1cd8 call      0x0000`0000`063B`50E0
063c1cdd mov       %rax,0x28(%rsp)
063c1ce2 jmp       0x0000`0000`063C`1CF0
063c1ce4 mov       0x30(%rsp),%rax
063c1ce9 mov       %rax,0x58(%rsp)
063c1cee jmp       0x0000`0000`063C`1CD3
063c1cf0 mov       0x28(%rsp),%rcx
063c1cf5 mov       0x58(%rsp),%rax
063c1cfa mov       %rcx,0x48(%rsp)
063c1cff mov       %rax,0x50(%rsp)
063c1d04 mov       0x48(%rsp),%rax
063c1d09 mov       0x50(%rsp),%rdx
063c1d0e add       $0xC8,%rsp
063c1d15 ret

core::slice::iter::Iter<core::fmt::rt::v1::Argument>::new<core::fmt::rt::v1::Argument>:
063c1d20 sub       $0xC8,%rsp
063c1d27 mov       %rdx,0x38(%rsp)
063c1d2c mov       %rcx,0x60(%rsp)
063c1d31 mov       %rdx,0x68(%rsp)
063c1d36 call      0x0000`0000`063C`2BC0
063c1d3b mov       %rax,0x40(%rsp)
063c1d40 mov       %rax,0x70(%rsp)
063c1d45 mov       0x40(%rsp),%rcx
063c1d4a call      0x0000`0000`063B`5210
063c1d4f jmp       0x0000`0000`063C`1D51
063c1d51 mov       $0x38,%eax
063c1d56 cmp       $0,%rax
063c1d5a jne       0x0000`0000`063C`1DA0
063c1d5c mov       0x38(%rsp),%rcx
063c1d61 mov       0x40(%rsp),%rax
063c1d66 mov       %rax,0xA0(%rsp)
063c1d6e mov       %rcx,0xA8(%rsp)
063c1d76 mov       %rax,0xB0(%rsp)
063c1d7e mov       %rcx,0xB8(%rsp)
063c1d86 add       %rcx,%rax
063c1d89 mov       %rax,0xC0(%rsp)
063c1d91 mov       0xC0(%rsp),%rax
063c1d99 mov       %rax,0x30(%rsp)
063c1d9e jmp       0x0000`0000`063C`1DF4
063c1da0 mov       0x40(%rsp),%rax
063c1da5 mov       0x38(%rsp),%rcx
063c1daa mov       %rax,0x78(%rsp)
063c1daf mov       %rcx,0x80(%rsp)
063c1db7 mov       %rax,0x88(%rsp)
063c1dbf mov       %rcx,0x90(%rsp)
063c1dc7 imul      $0x38,%rcx
063c1dcb add       %rcx,%rax
063c1dce mov       %rax,0x98(%rsp)
063c1dd6 mov       0x98(%rsp),%rax
063c1dde mov       %rax,0x58(%rsp)
063c1de3 mov       0x40(%rsp),%rcx
063c1de8 call      0x0000`0000`063B`5080
063c1ded mov       %rax,0x28(%rsp)
063c1df2 jmp       0x0000`0000`063C`1E00
063c1df4 mov       0x30(%rsp),%rax
063c1df9 mov       %rax,0x58(%rsp)
063c1dfe jmp       0x0000`0000`063C`1DE3
063c1e00 mov       0x28(%rsp),%rcx
063c1e05 mov       0x58(%rsp),%rax
063c1e0a mov       %rcx,0x48(%rsp)
063c1e0f mov       %rax,0x50(%rsp)
063c1e14 mov       0x48(%rsp),%rax
063c1e19 mov       0x50(%rsp),%rdx
063c1e1e add       $0xC8,%rsp
063c1e25 ret

core::slice::iter::Iter<core::fmt::ArgumentV1>::new<core::fmt::ArgumentV1>:
063c1e30 sub       $0xC8,%rsp
063c1e37 mov       %rdx,0x38(%rsp)
063c1e3c mov       %rcx,0x60(%rsp)
063c1e41 mov       %rdx,0x68(%rsp)
063c1e46 call      0x0000`0000`063C`2C20
063c1e4b mov       %rax,0x40(%rsp)
063c1e50 mov       %rax,0x70(%rsp)
063c1e55 mov       0x40(%rsp),%rcx
063c1e5a call      0x0000`0000`063B`52A0
063c1e5f jmp       0x0000`0000`063C`1E61
063c1e61 mov       $0x10,%eax
063c1e66 cmp       $0,%rax
063c1e6a jne       0x0000`0000`063C`1EB0
063c1e6c mov       0x38(%rsp),%rcx
063c1e71 mov       0x40(%rsp),%rax
063c1e76 mov       %rax,0xA0(%rsp)
063c1e7e mov       %rcx,0xA8(%rsp)
063c1e86 mov       %rax,0xB0(%rsp)
063c1e8e mov       %rcx,0xB8(%rsp)
063c1e96 add       %rcx,%rax
063c1e99 mov       %rax,0xC0(%rsp)
063c1ea1 mov       0xC0(%rsp),%rax
063c1ea9 mov       %rax,0x30(%rsp)
063c1eae jmp       0x0000`0000`063C`1F04
063c1eb0 mov       0x40(%rsp),%rax
063c1eb5 mov       0x38(%rsp),%rcx
063c1eba mov       %rax,0x78(%rsp)
063c1ebf mov       %rcx,0x80(%rsp)
063c1ec7 mov       %rax,0x88(%rsp)
063c1ecf mov       %rcx,0x90(%rsp)
063c1ed7 shl       $4,%rcx
063c1edb add       %rcx,%rax
063c1ede mov       %rax,0x98(%rsp)
063c1ee6 mov       0x98(%rsp),%rax
063c1eee mov       %rax,0x58(%rsp)
063c1ef3 mov       0x40(%rsp),%rcx
063c1ef8 call      0x0000`0000`063B`5100
063c1efd mov       %rax,0x28(%rsp)
063c1f02 jmp       0x0000`0000`063C`1F10
063c1f04 mov       0x30(%rsp),%rax
063c1f09 mov       %rax,0x58(%rsp)
063c1f0e jmp       0x0000`0000`063C`1EF3
063c1f10 mov       0x28(%rsp),%rcx
063c1f15 mov       0x58(%rsp),%rax
063c1f1a mov       %rcx,0x48(%rsp)
063c1f1f mov       %rax,0x50(%rsp)
063c1f24 mov       0x48(%rsp),%rax
063c1f29 mov       0x50(%rsp),%rdx
063c1f2e add       $0xC8,%rsp
063c1f35 ret

core::slice::iter::Iter<usize>::new<usize>:
063c1f40 sub       $0xC8,%rsp
063c1f47 mov       %rdx,0x38(%rsp)
063c1f4c mov       %rcx,0x60(%rsp)
063c1f51 mov       %rdx,0x68(%rsp)
063c1f56 call      0x0000`0000`063C`2C40
063c1f5b mov       %rax,0x40(%rsp)
063c1f60 mov       %rax,0x70(%rsp)
063c1f65 mov       0x40(%rsp),%rcx
063c1f6a call      0x0000`0000`063B`51B0
063c1f6f jmp       0x0000`0000`063C`1F71
063c1f71 mov       $8,%eax
063c1f76 cmp       $0,%rax
063c1f7a jne       0x0000`0000`063C`1FC0
063c1f7c mov       0x38(%rsp),%rcx
063c1f81 mov       0x40(%rsp),%rax
063c1f86 mov       %rax,0xA0(%rsp)
063c1f8e mov       %rcx,0xA8(%rsp)
063c1f96 mov       %rax,0xB0(%rsp)
063c1f9e mov       %rcx,0xB8(%rsp)
063c1fa6 add       %rcx,%rax
063c1fa9 mov       %rax,0xC0(%rsp)
063c1fb1 mov       0xC0(%rsp),%rax
063c1fb9 mov       %rax,0x30(%rsp)
063c1fbe jmp       0x0000`0000`063C`2014
063c1fc0 mov       0x40(%rsp),%rax
063c1fc5 mov       0x38(%rsp),%rcx
063c1fca mov       %rax,0x78(%rsp)
063c1fcf mov       %rcx,0x80(%rsp)
063c1fd7 mov       %rax,0x88(%rsp)
063c1fdf mov       %rcx,0x90(%rsp)
063c1fe7 shl       $3,%rcx
063c1feb add       %rcx,%rax
063c1fee mov       %rax,0x98(%rsp)
063c1ff6 mov       0x98(%rsp),%rax
063c1ffe mov       %rax,0x58(%rsp)
063c2003 mov       0x40(%rsp),%rcx
063c2008 call      0x0000`0000`063B`50A0
063c200d mov       %rax,0x28(%rsp)
063c2012 jmp       0x0000`0000`063C`2020
063c2014 mov       0x30(%rsp),%rax
063c2019 mov       %rax,0x58(%rsp)
063c201e jmp       0x0000`0000`063C`2003
063c2020 mov       0x28(%rsp),%rcx
063c2025 mov       0x58(%rsp),%rax
063c202a mov       %rcx,0x48(%rsp)
063c202f mov       %rax,0x50(%rsp)
063c2034 mov       0x48(%rsp),%rax
063c2039 mov       0x50(%rsp),%rdx
063c203e add       $0xC8,%rsp
063c2045 ret

core::slice::iter::Iter<u8>::new<u8>:
063c2050 sub       $0xC8,%rsp
063c2057 mov       %rdx,0x38(%rsp)
063c205c mov       %rcx,0x60(%rsp)
063c2061 mov       %rdx,0x68(%rsp)
063c2066 call      0x0000`0000`063C`2BE0
063c206b mov       %rax,0x40(%rsp)
063c2070 mov       %rax,0x70(%rsp)
063c2075 mov       0x40(%rsp),%rcx
063c207a call      0x0000`0000`063B`51E0
063c207f jmp       0x0000`0000`063C`2081
063c2081 mov       $1,%eax
063c2086 cmp       $0,%rax
063c208a jne       0x0000`0000`063C`20D0
063c208c mov       0x38(%rsp),%rcx
063c2091 mov       0x40(%rsp),%rax
063c2096 mov       %rax,0xA0(%rsp)
063c209e mov       %rcx,0xA8(%rsp)
063c20a6 mov       %rax,0xB0(%rsp)
063c20ae mov       %rcx,0xB8(%rsp)
063c20b6 add       %rcx,%rax
063c20b9 mov       %rax,0xC0(%rsp)
063c20c1 mov       0xC0(%rsp),%rax
063c20c9 mov       %rax,0x30(%rsp)
063c20ce jmp       0x0000`0000`063C`2120
063c20d0 mov       0x38(%rsp),%rcx
063c20d5 mov       0x40(%rsp),%rax
063c20da mov       %rax,0x78(%rsp)
063c20df mov       %rcx,0x80(%rsp)
063c20e7 mov       %rax,0x88(%rsp)
063c20ef mov       %rcx,0x90(%rsp)
063c20f7 add       %rcx,%rax
063c20fa mov       %rax,0x98(%rsp)
063c2102 mov       0x98(%rsp),%rax
063c210a mov       %rax,0x58(%rsp)
063c210f mov       0x40(%rsp),%rcx
063c2114 call      0x0000`0000`063B`50C0
063c2119 mov       %rax,0x28(%rsp)
063c211e jmp       0x0000`0000`063C`212C
063c2120 mov       0x30(%rsp),%rax
063c2125 mov       %rax,0x58(%rsp)
063c212a jmp       0x0000`0000`063C`210F
063c212c mov       0x28(%rsp),%rcx
063c2131 mov       0x58(%rsp),%rax
063c2136 mov       %rcx,0x48(%rsp)
063c213b mov       %rax,0x50(%rsp)
063c2140 mov       0x48(%rsp),%rax
063c2145 mov       0x50(%rsp),%rdx
063c214a add       $0xC8,%rsp
063c2151 ret

core::slice::iter::Iter<u8>::as_slice<u8>:
063c2160 sub       $0x98,%rsp
063c2167 mov       %rcx,0x30(%rsp)
063c216c mov       %rcx,0x58(%rsp)
063c2171 mov       %rcx,0x68(%rsp)
063c2176 mov       (%rcx),%rcx
063c2179 call      0x0000`0000`063B`5180
063c217e mov       0x30(%rsp),%rcx
063c2183 mov       %rax,0x38(%rsp)
063c2188 mov       (%rcx),%rcx
063c218b mov       %rcx,0x28(%rsp)
063c2190 mov       %rcx,0x70(%rsp)
063c2195 call      0x0000`0000`063B`5180
063c219a mov       0x28(%rsp),%rcx
063c219f mov       %rax,%rdx
063c21a2 mov       0x30(%rsp),%rax
063c21a7 mov       %rdx,0x90(%rsp)
063c21af movq      $1,0x78(%rsp)
063c21b8 mov       8(%rax),%rax
063c21bc mov       %rax,0x40(%rsp)
063c21c1 call      0x0000`0000`063B`5180
063c21c6 mov       0x38(%rsp),%rcx
063c21cb mov       %rax,%rdx
063c21ce mov       0x40(%rsp),%rax
063c21d3 sub       %rdx,%rax
063c21d6 mov       %rax,0x80(%rsp)
063c21de mov       0x80(%rsp),%rax
063c21e6 mov       %rax,0x88(%rsp)
063c21ee mov       %rax,0x60(%rsp)
063c21f3 mov       0x60(%rsp),%rdx
063c21f8 call      0x0000`0000`063C`24E0
063c21fd mov       %rax,0x48(%rsp)
063c2202 mov       %rdx,0x50(%rsp)
063c2207 mov       0x50(%rsp),%rdx
063c220c mov       0x48(%rsp),%rax
063c2211 add       $0x98,%rsp
063c2218 ret

core::slice::iter::IterMut<core::mem::maybe_uninit::MaybeUninit<u8> >::new<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c2220 sub       $0xC8,%rsp
063c2227 mov       %rdx,0x38(%rsp)
063c222c mov       %rcx,0x60(%rsp)
063c2231 mov       %rdx,0x68(%rsp)
063c2236 call      0x0000`0000`063C`2C80
063c223b mov       %rax,0x40(%rsp)
063c2240 mov       %rax,0x70(%rsp)
063c2245 mov       0x40(%rsp),%rcx
063c224a call      0x0000`0000`063B`5670
063c224f jmp       0x0000`0000`063C`2251
063c2251 mov       $1,%eax
063c2256 cmp       $0,%rax
063c225a jne       0x0000`0000`063C`22A0
063c225c mov       0x38(%rsp),%rcx
063c2261 mov       0x40(%rsp),%rax
063c2266 mov       %rax,0xA0(%rsp)
063c226e mov       %rcx,0xA8(%rsp)
063c2276 mov       %rax,0xB0(%rsp)
063c227e mov       %rcx,0xB8(%rsp)
063c2286 add       %rcx,%rax
063c2289 mov       %rax,0xC0(%rsp)
063c2291 mov       0xC0(%rsp),%rax
063c2299 mov       %rax,0x30(%rsp)
063c229e jmp       0x0000`0000`063C`22F0
063c22a0 mov       0x38(%rsp),%rcx
063c22a5 mov       0x40(%rsp),%rax
063c22aa mov       %rax,0x78(%rsp)
063c22af mov       %rcx,0x80(%rsp)
063c22b7 mov       %rax,0x88(%rsp)
063c22bf mov       %rcx,0x90(%rsp)
063c22c7 add       %rcx,%rax
063c22ca mov       %rax,0x98(%rsp)
063c22d2 mov       0x98(%rsp),%rax
063c22da mov       %rax,0x58(%rsp)
063c22df mov       0x40(%rsp),%rcx
063c22e4 call      0x0000`0000`063B`5060
063c22e9 mov       %rax,0x28(%rsp)
063c22ee jmp       0x0000`0000`063C`22FC
063c22f0 mov       0x30(%rsp),%rax
063c22f5 mov       %rax,0x58(%rsp)
063c22fa jmp       0x0000`0000`063C`22DF
063c22fc mov       0x28(%rsp),%rcx
063c2301 mov       0x58(%rsp),%rax
063c2306 mov       %rcx,0x48(%rsp)
063c230b mov       %rax,0x50(%rsp)
063c2310 mov       0x48(%rsp),%rax
063c2315 mov       0x50(%rsp),%rdx
063c231a add       $0xC8,%rsp
063c2321 ret

core::slice::iter::Chunks<usize>::new<usize>:
063c2330 sub       $0x18,%rsp
063c2334 mov       %rcx,%rax
063c2337 mov       %rdx,(%rsp)
063c233b mov       %r8,8(%rsp)
063c2340 mov       %r9,0x10(%rsp)
063c2345 mov       %rdx,(%rcx)
063c2348 mov       %r8,8(%rcx)
063c234c mov       %r9,0x10(%rcx)
063c2350 add       $0x18,%rsp
063c2354 ret

core::slice::iter::impl$70::next<usize>:
063c2360 sub       $0xA8,%rsp
063c2367 mov       %rcx,%rax
063c236a mov       %rax,0x38(%rsp)
063c236f mov       %rax,0x78(%rsp)
063c2374 mov       (%rax),%rcx
063c2377 mov       8(%rax),%rdx
063c237b call      0x0000`0000`063C`2830
063c2380 mov       %al,0x47(%rsp)
063c2384 mov       0x47(%rsp),%al
063c2388 test      $1,%al
063c238a jne       0x0000`0000`063C`23AF
063c238c jmp       0x0000`0000`063C`238E
063c238e mov       0x38(%rsp),%rax
063c2393 mov       8(%rax),%rcx
063c2397 mov       0x10(%rax),%rdx
063c239b call      0x0000`0000`063B`66C0
063c23a0 mov       %rax,0x30(%rsp)
063c23a5 mov       %rax,0x80(%rsp)
063c23ad jmp       0x0000`0000`063C`23CA
063c23af movq      $0,0x48(%rsp)
063c23b8 mov       0x48(%rsp),%rax
063c23bd mov       0x50(%rsp),%rdx
063c23c2 add       $0xA8,%rsp
063c23c9 ret
063c23ca mov       0x30(%rsp),%r9
063c23cf mov       0x38(%rsp),%rax
063c23d4 mov       (%rax),%rdx
063c23d7 mov       8(%rax),%r8
063c23db lea       0x58(%rsp),%rcx
063c23e0 lea       0x63C`FF80,%rax
063c23e7 mov       %rax,0x20(%rsp)
063c23ec call      0x0000`0000`063C`32F0
063c23f1 mov       0x38(%rsp),%rdx
063c23f6 mov       0x58(%rsp),%rcx
063c23fb mov       0x60(%rsp),%rax
063c2400 mov       %rcx,0x88(%rsp)
063c2408 mov       %rax,0x90(%rsp)
063c2410 mov       0x68(%rsp),%r9
063c2415 mov       0x70(%rsp),%r8
063c241a mov       %r9,0x98(%rsp)
063c2422 mov       %r8,0xA0(%rsp)
063c242a mov       %r9,(%rdx)
063c242d mov       %r8,8(%rdx)
063c2431 mov       %rcx,0x48(%rsp)
063c2436 mov       %rax,0x50(%rsp)
063c243b jmp       0x0000`0000`063C`23B8

core::slice::raw::from_raw_parts<usize>:
063c2440 sub       $0x58,%rsp
063c2444 mov       %rdx,0x38(%rsp)
063c2449 mov       %rcx,0x40(%rsp)
063c244e mov       %rcx,0x48(%rsp)
063c2453 mov       %rdx,0x50(%rsp)
063c2458 call      0x0000`0000`063C`2670
063c245d mov       0x38(%rsp),%rdx
063c2462 mov       0x40(%rsp),%rcx
063c2467 call      0x0000`0000`063B`5830
063c246c mov       %rax,0x28(%rsp)
063c2471 mov       %rdx,0x30(%rsp)
063c2476 mov       0x30(%rsp),%rdx
063c247b mov       0x28(%rsp),%rax
063c2480 add       $0x58,%rsp
063c2484 ret

core::slice::raw::from_raw_parts<array$<usize,4> >:
063c2490 sub       $0x58,%rsp
063c2494 mov       %rdx,0x38(%rsp)
063c2499 mov       %rcx,0x40(%rsp)
063c249e mov       %rcx,0x48(%rsp)
063c24a3 mov       %rdx,0x50(%rsp)
063c24a8 call      0x0000`0000`063C`2530
063c24ad mov       0x38(%rsp),%rdx
063c24b2 mov       0x40(%rsp),%rcx
063c24b7 call      0x0000`0000`063B`5790
063c24bc mov       %rax,0x28(%rsp)
063c24c1 mov       %rdx,0x30(%rsp)
063c24c6 mov       0x30(%rsp),%rdx
063c24cb mov       0x28(%rsp),%rax
063c24d0 add       $0x58,%rsp
063c24d4 ret

core::slice::raw::from_raw_parts<u8>:
063c24e0 sub       $0x58,%rsp
063c24e4 mov       %rdx,0x38(%rsp)
063c24e9 mov       %rcx,0x40(%rsp)
063c24ee mov       %rcx,0x48(%rsp)
063c24f3 mov       %rdx,0x50(%rsp)
063c24f8 call      0x0000`0000`063C`25D0
063c24fd mov       0x38(%rsp),%rdx
063c2502 mov       0x40(%rsp),%rcx
063c2507 call      0x0000`0000`063B`57E0
063c250c mov       %rax,0x28(%rsp)
063c2511 mov       %rdx,0x30(%rsp)
063c2516 mov       0x30(%rsp),%rdx
063c251b mov       0x28(%rsp),%rax
063c2520 add       $0x58,%rsp
063c2524 ret

core::slice::raw::debug_check_data_len<array$<usize,4> >:
063c2530 sub       $0x88,%rsp
063c2537 mov       %rdx,0x38(%rsp)
063c253c mov       %rcx,0x78(%rsp)
063c2541 mov       %rdx,0x80(%rsp)
063c2549 mov       %rcx,0x40(%rsp)
063c254e mov       0x40(%rsp),%rcx
063c2553 call      0x0000`0000`063B`4B50
063c2558 jmp       0x0000`0000`063C`255A
063c255a mov       0x38(%rsp),%rdx
063c255f mov       $0x20,%ecx
063c2564 call      0x0000`0000`063C`7310
063c2569 mov       %rax,0x30(%rsp)
063c256e mov       0x30(%rsp),%rax
063c2573 movabs    $0x7FFF`FFFF`FFFF`FFFF,%rcx
063c257d cmp       %rcx,%rax
063c2580 setbe     %al
063c2583 xor       $0xFF,%al
063c2585 test      $1,%al
063c2587 jne       0x0000`0000`063C`2591
063c2589 add       $0x88,%rsp
063c2590 ret
063c2591 lea       0x48(%rsp),%rcx
063c2596 lea       0x63C`FFD8,%rdx
063c259d mov       $1,%r8d
063c25a3 lea       0x63C`E370,%r9
063c25aa xor       %eax,%eax
063c25ac movq      $0,0x20(%rsp)
063c25b5 call      0x0000`0000`063B`DE30
063c25ba lea       0x63D`0060,%rdx
063c25c1 lea       0x48(%rsp),%rcx
063c25c6 call      0x0000`0000`063B`8F40
063c25cb ud2

core::slice::raw::debug_check_data_len<u8>:
063c25d0 sub       $0x88,%rsp
063c25d7 mov       %rdx,0x38(%rsp)
063c25dc mov       %rcx,0x78(%rsp)
063c25e1 mov       %rdx,0x80(%rsp)
063c25e9 mov       %rcx,0x40(%rsp)
063c25ee mov       0x40(%rsp),%rcx
063c25f3 call      0x0000`0000`063B`4BE0
063c25f8 jmp       0x0000`0000`063C`25FA
063c25fa mov       0x38(%rsp),%rdx
063c25ff mov       $1,%ecx
063c2604 call      0x0000`0000`063C`7310
063c2609 mov       %rax,0x30(%rsp)
063c260e mov       0x30(%rsp),%rax
063c2613 movabs    $0x7FFF`FFFF`FFFF`FFFF,%rcx
063c261d cmp       %rcx,%rax
063c2620 setbe     %al
063c2623 xor       $0xFF,%al
063c2625 test      $1,%al
063c2627 jne       0x0000`0000`063C`2631
063c2629 add       $0x88,%rsp
063c2630 ret
063c2631 lea       0x48(%rsp),%rcx
063c2636 lea       0x63C`FFD8,%rdx
063c263d mov       $1,%r8d
063c2643 lea       0x63C`E370,%r9
063c264a xor       %eax,%eax
063c264c movq      $0,0x20(%rsp)
063c2655 call      0x0000`0000`063B`DE30
063c265a lea       0x63D`0060,%rdx
063c2661 lea       0x48(%rsp),%rcx
063c2666 call      0x0000`0000`063B`8F40
063c266b ud2

core::slice::raw::debug_check_data_len<usize>:
063c2670 sub       $0x88,%rsp
063c2677 mov       %rdx,0x38(%rsp)
063c267c mov       %rcx,0x78(%rsp)
063c2681 mov       %rdx,0x80(%rsp)
063c2689 mov       %rcx,0x40(%rsp)
063c268e mov       0x40(%rsp),%rcx
063c2693 call      0x0000`0000`063B`4B10
063c2698 jmp       0x0000`0000`063C`269A
063c269a mov       0x38(%rsp),%rdx
063c269f mov       $8,%ecx
063c26a4 call      0x0000`0000`063C`7310
063c26a9 mov       %rax,0x30(%rsp)
063c26ae mov       0x30(%rsp),%rax
063c26b3 movabs    $0x7FFF`FFFF`FFFF`FFFF,%rcx
063c26bd cmp       %rcx,%rax
063c26c0 setbe     %al
063c26c3 xor       $0xFF,%al
063c26c5 test      $1,%al
063c26c7 jne       0x0000`0000`063C`26D1
063c26c9 add       $0x88,%rsp
063c26d0 ret
063c26d1 lea       0x48(%rsp),%rcx
063c26d6 lea       0x63C`FFD8,%rdx
063c26dd mov       $1,%r8d
063c26e3 lea       0x63C`E370,%r9
063c26ea xor       %eax,%eax
063c26ec movq      $0,0x20(%rsp)
063c26f5 call      0x0000`0000`063B`DE30
063c26fa lea       0x63D`0060,%rdx
063c2701 lea       0x48(%rsp),%rcx
063c2706 call      0x0000`0000`063B`8F40
063c270b ud2

core::slice::raw::debug_check_data_len::rt_check<array$<usize,4> >:
063c2710 sub       $0x68,%rsp
063c2714 mov       %rcx,0x60(%rsp)
063c2719 call      0x0000`0000`063B`4740
063c271e mov       %al,0x2F(%rsp)
063c2722 mov       0x2F(%rsp),%al
063c2726 xor       $0xFF,%al
063c2728 test      $1,%al
063c272a jne       0x0000`0000`063C`2731
063c272c add       $0x68,%rsp
063c2730 ret
063c2731 lea       0x30(%rsp),%rcx
063c2736 lea       0x63D`00A8,%rdx
063c273d mov       $1,%r8d
063c2743 lea       0x63C`E370,%r9
063c274a xor       %eax,%eax
063c274c movq      $0,0x20(%rsp)
063c2755 call      0x0000`0000`063B`DE30
063c275a lea       0x63D`00B8,%rdx
063c2761 lea       0x30(%rsp),%rcx
063c2766 call      0x0000`0000`063B`8F40
063c276b ud2

core::slice::raw::debug_check_data_len::rt_check<usize>:
063c2770 sub       $0x68,%rsp
063c2774 mov       %rcx,0x60(%rsp)
063c2779 call      0x0000`0000`063B`47C0
063c277e mov       %al,0x2F(%rsp)
063c2782 mov       0x2F(%rsp),%al
063c2786 xor       $0xFF,%al
063c2788 test      $1,%al
063c278a jne       0x0000`0000`063C`2791
063c278c add       $0x68,%rsp
063c2790 ret
063c2791 lea       0x30(%rsp),%rcx
063c2796 lea       0x63D`00A8,%rdx
063c279d mov       $1,%r8d
063c27a3 lea       0x63C`E370,%r9
063c27aa xor       %eax,%eax
063c27ac movq      $0,0x20(%rsp)
063c27b5 call      0x0000`0000`063B`DE30
063c27ba lea       0x63D`00B8,%rdx
063c27c1 lea       0x30(%rsp),%rcx
063c27c6 call      0x0000`0000`063B`8F40
063c27cb ud2

core::slice::raw::debug_check_data_len::rt_check<u8>:
063c27d0 sub       $0x68,%rsp
063c27d4 mov       %rcx,0x60(%rsp)
063c27d9 call      0x0000`0000`063B`46C0
063c27de mov       %al,0x2F(%rsp)
063c27e2 mov       0x2F(%rsp),%al
063c27e6 xor       $0xFF,%al
063c27e8 test      $1,%al
063c27ea jne       0x0000`0000`063C`27F1
063c27ec add       $0x68,%rsp
063c27f0 ret
063c27f1 lea       0x30(%rsp),%rcx
063c27f6 lea       0x63D`00A8,%rdx
063c27fd mov       $1,%r8d
063c2803 lea       0x63C`E370,%r9
063c280a xor       %eax,%eax
063c280c movq      $0,0x20(%rsp)
063c2815 call      0x0000`0000`063B`DE30
063c281a lea       0x63D`00B8,%rdx
063c2821 lea       0x30(%rsp),%rcx
063c2826 call      0x0000`0000`063B`8F40
063c282b ud2

core::slice::impl$0::is_empty<usize>:
063c2830 sub       $0x10,%rsp
063c2834 mov       %rcx,(%rsp)
063c2838 mov       %rdx,8(%rsp)
063c283d cmp       $0,%rdx
063c2841 sete      %al
063c2844 and       $1,%al
063c2846 movzbl    %al,%eax
063c2849 add       $0x10,%rsp
063c284d ret

core::slice::impl$0::get<u32,usize>:
063c2850 sub       $0x48,%rsp
063c2854 mov       %r8,0x20(%rsp)
063c2859 mov       %rdx,%r8
063c285c mov       %rcx,%rdx
063c285f mov       0x20(%rsp),%rcx
063c2864 mov       %rdx,0x30(%rsp)
063c2869 mov       %r8,0x38(%rsp)
063c286e mov       %rcx,0x40(%rsp)
063c2873 call      0x0000`0000`063C`0CA0
063c2878 mov       %rax,0x28(%rsp)
063c287d mov       0x28(%rsp),%rax
063c2882 add       $0x48,%rsp
063c2886 ret

core::slice::impl$0::get<u8,usize>:
063c2890 sub       $0x48,%rsp
063c2894 mov       %r8,0x20(%rsp)
063c2899 mov       %rdx,%r8
063c289c mov       %rcx,%rdx
063c289f mov       0x20(%rsp),%rcx
063c28a4 mov       %rdx,0x30(%rsp)
063c28a9 mov       %r8,0x38(%rsp)
063c28ae mov       %rcx,0x40(%rsp)
063c28b3 call      0x0000`0000`063C`0C40
063c28b8 mov       %rax,0x28(%rsp)
063c28bd mov       0x28(%rsp),%rax
063c28c2 add       $0x48,%rsp
063c28c6 ret

core::slice::impl$0::get<str,usize>:
063c28d0 sub       $0x48,%rsp
063c28d4 mov       %r8,0x20(%rsp)
063c28d9 mov       %rdx,%r8
063c28dc mov       %rcx,%rdx
063c28df mov       0x20(%rsp),%rcx
063c28e4 mov       %rdx,0x30(%rsp)
063c28e9 mov       %r8,0x38(%rsp)
063c28ee mov       %rcx,0x40(%rsp)
063c28f3 call      0x0000`0000`063C`0BE0
063c28f8 mov       %rax,0x28(%rsp)
063c28fd mov       0x28(%rsp),%rax
063c2902 add       $0x48,%rsp
063c2906 ret

core::slice::impl$0::get<u8,core::ops::range::Range<usize> >:
063c2910 sub       $0x68,%rsp
063c2914 mov       %r9,0x28(%rsp)
063c2919 mov       %r8,0x30(%rsp)
063c291e mov       %rdx,%r9
063c2921 mov       0x28(%rsp),%rdx
063c2926 mov       %rcx,%r8
063c2929 mov       0x30(%rsp),%rcx
063c292e mov       %r8,0x48(%rsp)
063c2933 mov       %r9,0x50(%rsp)
063c2938 mov       %rcx,0x58(%rsp)
063c293d mov       %rdx,0x60(%rsp)
063c2942 call      0x0000`0000`063C`0F40
063c2947 mov       %rax,0x38(%rsp)
063c294c mov       %rdx,0x40(%rsp)
063c2951 mov       0x40(%rsp),%rdx
063c2956 mov       0x38(%rsp),%rax
063c295b add       $0x68,%rsp
063c295f ret

core::slice::impl$0::get_unchecked<core::fmt::ArgumentV1,usize>:
063c2960 sub       $0x48,%rsp
063c2964 mov       %r8,0x20(%rsp)
063c2969 mov       %rdx,%r8
063c296c mov       %rcx,%rdx
063c296f mov       0x20(%rsp),%rcx
063c2974 mov       %rdx,0x30(%rsp)
063c2979 mov       %r8,0x38(%rsp)
063c297e mov       %rcx,0x40(%rsp)
063c2983 call      0x0000`0000`063C`0D00
063c2988 mov       %rax,0x28(%rsp)
063c298d mov       0x28(%rsp),%rax
063c2992 add       $0x48,%rsp
063c2996 ret

core::slice::impl$0::get_unchecked<u8,core::ops::range::RangeTo<usize> >:
063c29a0 sub       $0x58,%rsp
063c29a4 mov       %r8,0x28(%rsp)
063c29a9 mov       %rdx,%r8
063c29ac mov       %rcx,%rdx
063c29af mov       0x28(%rsp),%rcx
063c29b4 mov       %rdx,0x40(%rsp)
063c29b9 mov       %r8,0x48(%rsp)
063c29be mov       %rcx,0x50(%rsp)
063c29c3 call      0x0000`0000`063C`1590
063c29c8 mov       %rax,0x30(%rsp)
063c29cd mov       %rdx,0x38(%rsp)
063c29d2 mov       0x38(%rsp),%rdx
063c29d7 mov       0x30(%rsp),%rax
063c29dc add       $0x58,%rsp
063c29e0 ret

core::slice::impl$0::get_unchecked<str,usize>:
063c29f0 sub       $0x48,%rsp
063c29f4 mov       %r8,0x20(%rsp)
063c29f9 mov       %rdx,%r8
063c29fc mov       %rcx,%rdx
063c29ff mov       0x20(%rsp),%rcx
063c2a04 mov       %rdx,0x30(%rsp)
063c2a09 mov       %r8,0x38(%rsp)
063c2a0e mov       %rcx,0x40(%rsp)
063c2a13 call      0x0000`0000`063C`0D90
063c2a18 mov       %rax,0x28(%rsp)
063c2a1d mov       0x28(%rsp),%rax
063c2a22 add       $0x48,%rsp
063c2a26 ret

core::slice::impl$0::get_unchecked<u32,usize>:
063c2a30 sub       $0x48,%rsp
063c2a34 mov       %r8,0x20(%rsp)
063c2a39 mov       %rdx,%r8
063c2a3c mov       %rcx,%rdx
063c2a3f mov       0x20(%rsp),%rcx
063c2a44 mov       %rdx,0x30(%rsp)
063c2a49 mov       %r8,0x38(%rsp)
063c2a4e mov       %rcx,0x40(%rsp)
063c2a53 call      0x0000`0000`063C`0E20
063c2a58 mov       %rax,0x28(%rsp)
063c2a5d mov       0x28(%rsp),%rax
063c2a62 add       $0x48,%rsp
063c2a66 ret

core::slice::impl$0::get_unchecked<usize,core::ops::range::RangeTo<usize> >:
063c2a70 sub       $0x58,%rsp
063c2a74 mov       %r8,0x28(%rsp)
063c2a79 mov       %rdx,%r8
063c2a7c mov       %rcx,%rdx
063c2a7f mov       0x28(%rsp),%rcx
063c2a84 mov       %rdx,0x40(%rsp)
063c2a89 mov       %r8,0x48(%rsp)
063c2a8e mov       %rcx,0x50(%rsp)
063c2a93 call      0x0000`0000`063C`1540
063c2a98 mov       %rax,0x30(%rsp)
063c2a9d mov       %rdx,0x38(%rsp)
063c2aa2 mov       0x38(%rsp),%rdx
063c2aa7 mov       0x30(%rsp),%rax
063c2aac add       $0x58,%rsp
063c2ab0 ret

core::slice::impl$0::get_unchecked<u8,usize>:
063c2ac0 sub       $0x48,%rsp
063c2ac4 mov       %r8,0x20(%rsp)
063c2ac9 mov       %rdx,%r8
063c2acc mov       %rcx,%rdx
063c2acf mov       0x20(%rsp),%rcx
063c2ad4 mov       %rdx,0x30(%rsp)
063c2ad9 mov       %r8,0x38(%rsp)
063c2ade mov       %rcx,0x40(%rsp)
063c2ae3 call      0x0000`0000`063C`0EB0
063c2ae8 mov       %rax,0x28(%rsp)
063c2aed mov       0x28(%rsp),%rax
063c2af2 add       $0x48,%rsp
063c2af6 ret

core::slice::impl$0::get_unchecked<usize,core::ops::range::RangeFrom<usize> >:
063c2b00 sub       $0x58,%rsp
063c2b04 mov       %r8,0x28(%rsp)
063c2b09 mov       %rdx,%r8
063c2b0c mov       %rcx,%rdx
063c2b0f mov       0x28(%rsp),%rcx
063c2b14 mov       %rdx,0x40(%rsp)
063c2b19 mov       %r8,0x48(%rsp)
063c2b1e mov       %rcx,0x50(%rsp)
063c2b23 call      0x0000`0000`063C`1730
063c2b28 mov       %rax,0x30(%rsp)
063c2b2d mov       %rdx,0x38(%rsp)
063c2b32 mov       0x38(%rsp),%rdx
063c2b37 mov       0x30(%rsp),%rax
063c2b3c add       $0x58,%rsp
063c2b40 ret

core::slice::impl$0::get_unchecked<u8,core::ops::range::RangeFrom<usize> >:
063c2b50 sub       $0x58,%rsp
063c2b54 mov       %r8,0x28(%rsp)
063c2b59 mov       %rdx,%r8
063c2b5c mov       %rcx,%rdx
063c2b5f mov       0x28(%rsp),%rcx
063c2b64 mov       %rdx,0x40(%rsp)
063c2b69 mov       %r8,0x48(%rsp)
063c2b6e mov       %rcx,0x50(%rsp)
063c2b73 call      0x0000`0000`063C`16A0
063c2b78 mov       %rax,0x30(%rsp)
063c2b7d mov       %rdx,0x38(%rsp)
063c2b82 mov       0x38(%rsp),%rdx
063c2b87 mov       0x30(%rsp),%rax
063c2b8c add       $0x58,%rsp
063c2b90 ret

core::slice::impl$0::as_ptr<tuple$<u8,u8> >:
063c2ba0 sub       $0x10,%rsp
063c2ba4 mov       %rcx,%rax
063c2ba7 mov       %rax,(%rsp)
063c2bab mov       %rdx,8(%rsp)
063c2bb0 add       $0x10,%rsp
063c2bb4 ret

core::slice::impl$0::as_ptr<core::fmt::rt::v1::Argument>:
063c2bc0 sub       $0x10,%rsp
063c2bc4 mov       %rcx,%rax
063c2bc7 mov       %rax,(%rsp)
063c2bcb mov       %rdx,8(%rsp)
063c2bd0 add       $0x10,%rsp
063c2bd4 ret

core::slice::impl$0::as_ptr<u8>:
063c2be0 sub       $0x10,%rsp
063c2be4 mov       %rcx,%rax
063c2be7 mov       %rax,(%rsp)
063c2beb mov       %rdx,8(%rsp)
063c2bf0 add       $0x10,%rsp
063c2bf4 ret

core::slice::impl$0::as_ptr<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c2c00 sub       $0x10,%rsp
063c2c04 mov       %rcx,%rax
063c2c07 mov       %rax,(%rsp)
063c2c0b mov       %rdx,8(%rsp)
063c2c10 add       $0x10,%rsp
063c2c14 ret

core::slice::impl$0::as_ptr<core::fmt::ArgumentV1>:
063c2c20 sub       $0x10,%rsp
063c2c24 mov       %rcx,%rax
063c2c27 mov       %rax,(%rsp)
063c2c2b mov       %rdx,8(%rsp)
063c2c30 add       $0x10,%rsp
063c2c34 ret

core::slice::impl$0::as_ptr<usize>:
063c2c40 sub       $0x10,%rsp
063c2c44 mov       %rcx,%rax
063c2c47 mov       %rax,(%rsp)
063c2c4b mov       %rdx,8(%rsp)
063c2c50 add       $0x10,%rsp
063c2c54 ret

core::slice::impl$0::as_ptr<array$<usize,4> >:
063c2c60 sub       $0x10,%rsp
063c2c64 mov       %rcx,%rax
063c2c67 mov       %rax,(%rsp)
063c2c6b mov       %rdx,8(%rsp)
063c2c70 add       $0x10,%rsp
063c2c74 ret

core::slice::impl$0::as_mut_ptr<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c2c80 sub       $0x10,%rsp
063c2c84 mov       %rcx,%rax
063c2c87 mov       %rax,(%rsp)
063c2c8b mov       %rdx,8(%rsp)
063c2c90 add       $0x10,%rsp
063c2c94 ret

core::slice::impl$0::iter<core::fmt::ArgumentV1>:
063c2ca0 sub       $0x48,%rsp
063c2ca4 mov       %rcx,0x38(%rsp)
063c2ca9 mov       %rdx,0x40(%rsp)
063c2cae call      0x0000`0000`063C`1E30
063c2cb3 mov       %rax,0x28(%rsp)
063c2cb8 mov       %rdx,0x30(%rsp)
063c2cbd mov       0x30(%rsp),%rdx
063c2cc2 mov       0x28(%rsp),%rax
063c2cc7 add       $0x48,%rsp
063c2ccb ret

core::slice::impl$0::iter<u8>:
063c2cd0 sub       $0x48,%rsp
063c2cd4 mov       %rcx,0x38(%rsp)
063c2cd9 mov       %rdx,0x40(%rsp)
063c2cde call      0x0000`0000`063C`2050
063c2ce3 mov       %rax,0x28(%rsp)
063c2ce8 mov       %rdx,0x30(%rsp)
063c2ced mov       0x30(%rsp),%rdx
063c2cf2 mov       0x28(%rsp),%rax
063c2cf7 add       $0x48,%rsp
063c2cfb ret

core::slice::impl$0::iter<tuple$<u8,u8> >:
063c2d00 sub       $0x48,%rsp
063c2d04 mov       %rcx,0x38(%rsp)
063c2d09 mov       %rdx,0x40(%rsp)
063c2d0e call      0x0000`0000`063C`1B00
063c2d13 mov       %rax,0x28(%rsp)
063c2d18 mov       %rdx,0x30(%rsp)
063c2d1d mov       0x30(%rsp),%rdx
063c2d22 mov       0x28(%rsp),%rax
063c2d27 add       $0x48,%rsp
063c2d2b ret

core::slice::impl$0::iter<array$<usize,4> >:
063c2d30 sub       $0x48,%rsp
063c2d34 mov       %rcx,0x38(%rsp)
063c2d39 mov       %rdx,0x40(%rsp)
063c2d3e call      0x0000`0000`063C`1C10
063c2d43 mov       %rax,0x28(%rsp)
063c2d48 mov       %rdx,0x30(%rsp)
063c2d4d mov       0x30(%rsp),%rdx
063c2d52 mov       0x28(%rsp),%rax
063c2d57 add       $0x48,%rsp
063c2d5b ret

core::slice::impl$0::iter<core::fmt::rt::v1::Argument>:
063c2d60 sub       $0x48,%rsp
063c2d64 mov       %rcx,0x38(%rsp)
063c2d69 mov       %rdx,0x40(%rsp)
063c2d6e call      0x0000`0000`063C`1D20
063c2d73 mov       %rax,0x28(%rsp)
063c2d78 mov       %rdx,0x30(%rsp)
063c2d7d mov       0x30(%rsp),%rdx
063c2d82 mov       0x28(%rsp),%rax
063c2d87 add       $0x48,%rsp
063c2d8b ret

core::slice::impl$0::iter<usize>:
063c2d90 sub       $0x48,%rsp
063c2d94 mov       %rcx,0x38(%rsp)
063c2d99 mov       %rdx,0x40(%rsp)
063c2d9e call      0x0000`0000`063C`1F40
063c2da3 mov       %rax,0x28(%rsp)
063c2da8 mov       %rdx,0x30(%rsp)
063c2dad mov       0x30(%rsp),%rdx
063c2db2 mov       0x28(%rsp),%rax
063c2db7 add       $0x48,%rsp
063c2dbb ret

core::slice::impl$0::iter_mut<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c2dc0 sub       $0x48,%rsp
063c2dc4 mov       %rcx,0x38(%rsp)
063c2dc9 mov       %rdx,0x40(%rsp)
063c2dce call      0x0000`0000`063C`2220
063c2dd3 mov       %rax,0x28(%rsp)
063c2dd8 mov       %rdx,0x30(%rsp)
063c2ddd mov       0x30(%rsp),%rdx
063c2de2 mov       0x28(%rsp),%rax
063c2de7 add       $0x48,%rsp
063c2deb ret

core::slice::impl$0::chunks<usize>:
063c2df0 sub       $0xC8,%rsp
063c2df7 mov       %r8,0x28(%rsp)
063c2dfc mov       %rdx,0x30(%rsp)
063c2e01 mov       %rcx,0x38(%rsp)
063c2e06 mov       %rcx,0x40(%rsp)
063c2e0b mov       %r9,0x58(%rsp)
063c2e10 mov       %rdx,0xA8(%rsp)
063c2e18 mov       %r8,0xB0(%rsp)
063c2e20 lea       0x58(%rsp),%rax
063c2e25 mov       %rax,0x60(%rsp)
063c2e2a lea       0x63C`E370,%rax
063c2e31 mov       %rax,0x68(%rsp)
063c2e36 mov       0x60(%rsp),%rax
063c2e3b mov       %rax,0x48(%rsp)
063c2e40 mov       %rax,0xB8(%rsp)
063c2e48 mov       0x68(%rsp),%rcx
063c2e4d mov       %rcx,0x50(%rsp)
063c2e52 mov       %rcx,0xC0(%rsp)
063c2e5a mov       (%rax),%rax
063c2e5d cmp       (%rcx),%rax
063c2e60 je        0x0000`0000`063C`2E7D
063c2e62 mov       0x28(%rsp),%r8
063c2e67 mov       0x30(%rsp),%rdx
063c2e6c mov       0x38(%rsp),%rcx
063c2e71 mov       0x58(%rsp),%r9
063c2e76 call      0x0000`0000`063C`2330
063c2e7b jmp       0x0000`0000`063C`2EB1
063c2e7d mov       0x50(%rsp),%r8
063c2e82 mov       0x48(%rsp),%rdx
063c2e87 movb      $1,0x77(%rsp)
063c2e8c movq      $0,0x78(%rsp)
063c2e95 lea       0x63D`0148,%rcx
063c2e9c mov       %rsp,%rax
063c2e9f mov       %rcx,0x20(%rax)
063c2ea3 mov       $1,%cl
063c2ea5 lea       0x78(%rsp),%r9
063c2eaa call      0x0000`0000`063B`8F90
063c2eaf ud2
063c2eb1 mov       0x40(%rsp),%rax
063c2eb6 add       $0xC8,%rsp
063c2ebd ret

core::slice::impl$0::as_chunks_unchecked<usize,4>:
063c2ec0 sub       $0x158,%rsp
063c2ec7 mov       %rdx,0x60(%rsp)
063c2ecc mov       %rcx,0x68(%rsp)
063c2ed1 mov       %rcx,0x118(%rsp)
063c2ed9 mov       %rdx,0x120(%rsp)
063c2ee1 lea       0x63D`0160,%rax
063c2ee8 mov       %rax,0x80(%rsp)
063c2ef0 lea       0x63C`E370,%rax
063c2ef7 mov       %rax,0x88(%rsp)
063c2eff mov       0x80(%rsp),%rax
063c2f07 mov       %rax,0x70(%rsp)
063c2f0c mov       %rax,0x128(%rsp)
063c2f14 mov       0x88(%rsp),%rcx
063c2f1c mov       %rcx,0x78(%rsp)
063c2f21 mov       %rcx,0x130(%rsp)
063c2f29 mov       (%rax),%rax
063c2f2c cmp       (%rcx),%rax
063c2f2f je        0x0000`0000`063C`2F33
063c2f31 jmp       0x0000`0000`063C`2F70
063c2f33 mov       0x78(%rsp),%r8
063c2f38 mov       0x70(%rsp),%rdx
063c2f3d movb      $1,0x97(%rsp)
063c2f45 movq      $0,0x98(%rsp)
063c2f51 lea       0x63D`0168,%rcx
063c2f58 mov       %rsp,%rax
063c2f5b mov       %rcx,0x20(%rax)
063c2f5f mov       $1,%cl
063c2f61 lea       0x98(%rsp),%r9
063c2f69 call      0x0000`0000`063B`8F90
063c2f6e ud2
063c2f70 mov       0x60(%rsp),%rax
063c2f75 and       $3,%rax
063c2f79 mov       %rax,0xD8(%rsp)
063c2f81 lea       0xD8(%rsp),%rax
063c2f89 mov       %rax,0xC8(%rsp)
063c2f91 lea       0x63C`E370,%rax
063c2f98 mov       %rax,0xD0(%rsp)
063c2fa0 mov       0xC8(%rsp),%rax
063c2fa8 mov       %rax,0x50(%rsp)
063c2fad mov       %rax,0x138(%rsp)
063c2fb5 mov       0xD0(%rsp),%rcx
063c2fbd mov       %rcx,0x58(%rsp)
063c2fc2 mov       %rcx,0x140(%rsp)
063c2fca mov       (%rax),%rax
063c2fcd cmp       (%rcx),%rax
063c2fd0 sete      %al
063c2fd3 xor       $0xFF,%al
063c2fd5 test      $1,%al
063c2fd7 jne       0x0000`0000`063C`3001
063c2fd9 mov       0x60(%rsp),%rax
063c2fde shr       $2,%rax
063c2fe2 mov       %rax,0x148(%rsp)
063c2fea mov       0x148(%rsp),%rax
063c2ff2 mov       %rax,0x48(%rsp)
063c2ff7 mov       %rax,0x150(%rsp)
063c2fff jmp       0x0000`0000`063C`3040
063c3001 mov       0x58(%rsp),%r8
063c3006 mov       0x50(%rsp),%rdx
063c300b movb      $0,0xE7(%rsp)
063c3013 movq      $0,0xE8(%rsp)
063c301f lea       0x63D`0180,%rcx
063c3026 mov       %rsp,%rax
063c3029 mov       %rcx,0x20(%rax)
063c302d xor       %eax,%eax
063c302f mov       %al,%cl
063c3031 lea       0xE8(%rsp),%r9
063c3039 call      0x0000`0000`063B`8F90
063c303e ud2
063c3040 mov       0x60(%rsp),%rdx
063c3045 mov       0x68(%rsp),%rcx
063c304a call      0x0000`0000`063C`2C40
063c304f mov       %rax,0x40(%rsp)
063c3054 mov       0x40(%rsp),%rcx
063c3059 call      0x0000`0000`063B`52E0
063c305e mov       %rax,0x38(%rsp)
063c3063 mov       0x48(%rsp),%rdx
063c3068 mov       0x38(%rsp),%rcx
063c306d call      0x0000`0000`063C`2490
063c3072 mov       %rax,0x28(%rsp)
063c3077 mov       %rdx,0x30(%rsp)
063c307c mov       0x30(%rsp),%rdx
063c3081 mov       0x28(%rsp),%rax
063c3086 add       $0x158,%rsp
063c308d ret

core::slice::impl$0::as_chunks<usize,4>:
063c3090 sub       $0x148,%rsp
063c3097 mov       %r8,0x58(%rsp)
063c309c mov       %rdx,0x60(%rsp)
063c30a1 mov       %rcx,0x68(%rsp)
063c30a6 mov       %rcx,0x70(%rsp)
063c30ab mov       %rdx,0xF0(%rsp)
063c30b3 mov       %r8,0xF8(%rsp)
063c30bb lea       0x63D`0160,%rax
063c30c2 mov       %rax,0x88(%rsp)
063c30ca lea       0x63C`E370,%rax
063c30d1 mov       %rax,0x90(%rsp)
063c30d9 mov       0x88(%rsp),%rax
063c30e1 mov       %rax,0x78(%rsp)
063c30e6 mov       %rax,0x100(%rsp)
063c30ee mov       0x90(%rsp),%rcx
063c30f6 mov       %rcx,0x80(%rsp)
063c30fe mov       %rcx,0x108(%rsp)
063c3106 mov       (%rax),%rax
063c3109 cmp       (%rcx),%rax
063c310c je        0x0000`0000`063C`3110
063c310e jmp       0x0000`0000`063C`3150
063c3110 mov       0x80(%rsp),%r8
063c3118 mov       0x78(%rsp),%rdx
063c311d movb      $1,0x9F(%rsp)
063c3125 movq      $0,0xA0(%rsp)
063c3131 lea       0x63D`0198,%rcx
063c3138 mov       %rsp,%rax
063c313b mov       %rcx,0x20(%rax)
063c313f mov       $1,%cl
063c3141 lea       0xA0(%rsp),%r9
063c3149 call      0x0000`0000`063B`8F90
063c314e ud2
063c3150 mov       0x58(%rsp),%rax
063c3155 shr       $2,%rax
063c3159 mov       %rax,0x110(%rsp)
063c3161 mov       $4,%ecx
063c3166 mul       %rcx
063c3169 mov       %rax,0x50(%rsp)
063c316e seto      %al
063c3171 test      $1,%al
063c3173 jne       0x0000`0000`063C`319F
063c3175 mov       0x50(%rsp),%r9
063c317a mov       0x58(%rsp),%r8
063c317f mov       0x60(%rsp),%rdx
063c3184 lea       0xD0(%rsp),%rcx
063c318c lea       0x63D`01C8,%rax
063c3193 mov       %rax,0x20(%rsp)
063c3198 call      0x0000`0000`063C`32F0
063c319d jmp       0x0000`0000`063C`31B9
063c319f lea       0x63C`E240,%rcx
063c31a6 lea       0x63D`01B0,%r8
063c31ad mov       $0x21,%edx
063c31b2 call      0x0000`0000`063B`8E30
063c31b7 ud2
063c31b9 mov       0xD0(%rsp),%rcx
063c31c1 mov       0xD8(%rsp),%rdx
063c31c9 mov       %rcx,0x118(%rsp)
063c31d1 mov       %rdx,0x120(%rsp)
063c31d9 mov       0xE0(%rsp),%r8
063c31e1 mov       %r8,0x30(%rsp)
063c31e6 mov       0xE8(%rsp),%rax
063c31ee mov       %rax,0x38(%rsp)
063c31f3 mov       %r8,0x128(%rsp)
063c31fb mov       %rax,0x130(%rsp)
063c3203 call      0x0000`0000`063C`2EC0
063c3208 mov       %rax,0x40(%rsp)
063c320d mov       %rdx,0x48(%rsp)
063c3212 mov       %rax,0x138(%rsp)
063c321a mov       %rdx,0x140(%rsp)
063c3222 mov       0x70(%rsp),%rax
063c3227 mov       0x68(%rsp),%rcx
063c322c mov       0x38(%rsp),%rdx
063c3231 mov       0x30(%rsp),%r8
063c3236 mov       0x48(%rsp),%r9
063c323b mov       0x40(%rsp),%r10
063c3240 mov       %r10,(%rcx)
063c3243 mov       %r9,8(%rcx)
063c3247 mov       %r8,0x10(%rcx)
063c324b mov       %rdx,0x18(%rcx)
063c324f add       $0x148,%rsp
063c3256 ret

core::slice::impl$0::split_at<u8>:
063c3260 sub       $0x68,%rsp
063c3264 mov       %r9,0x20(%rsp)
063c3269 mov       %r8,0x28(%rsp)
063c326e mov       %rdx,0x30(%rsp)
063c3273 mov       %rcx,0x38(%rsp)
063c3278 mov       %rcx,0x40(%rsp)
063c327d mov       0x90(%rsp),%rax
063c3285 mov       %rax,0x48(%rsp)
063c328a mov       %rdx,0x50(%rsp)
063c328f mov       %r8,0x58(%rsp)
063c3294 mov       %r9,0x60(%rsp)
063c3299 cmp       %r8,%r9
063c329c setbe     %al
063c329f xor       $0xFF,%al
063c32a1 test      $1,%al
063c32a3 jne       0x0000`0000`063C`32C0
063c32a5 mov       0x20(%rsp),%r9
063c32aa mov       0x28(%rsp),%r8
063c32af mov       0x30(%rsp),%rdx
063c32b4 mov       0x38(%rsp),%rcx
063c32b9 call      0x0000`0000`063C`3380
063c32be jmp       0x0000`0000`063C`32D8
063c32c0 mov       0x48(%rsp),%r8
063c32c5 lea       0x63D`01E0,%rcx
063c32cc mov       $0x23,%edx
063c32d1 call      0x0000`0000`063B`8E30
063c32d6 ud2
063c32d8 mov       0x40(%rsp),%rax
063c32dd add       $0x68,%rsp
063c32e1 ret

core::slice::impl$0::split_at<usize>:
063c32f0 sub       $0x68,%rsp
063c32f4 mov       %r9,0x20(%rsp)
063c32f9 mov       %r8,0x28(%rsp)
063c32fe mov       %rdx,0x30(%rsp)
063c3303 mov       %rcx,0x38(%rsp)
063c3308 mov       %rcx,0x40(%rsp)
063c330d mov       0x90(%rsp),%rax
063c3315 mov       %rax,0x48(%rsp)
063c331a mov       %rdx,0x50(%rsp)
063c331f mov       %r8,0x58(%rsp)
063c3324 mov       %r9,0x60(%rsp)
063c3329 cmp       %r8,%r9
063c332c setbe     %al
063c332f xor       $0xFF,%al
063c3331 test      $1,%al
063c3333 jne       0x0000`0000`063C`3350
063c3335 mov       0x20(%rsp),%r9
063c333a mov       0x28(%rsp),%r8
063c333f mov       0x30(%rsp),%rdx
063c3344 mov       0x38(%rsp),%rcx
063c3349 call      0x0000`0000`063C`3440
063c334e jmp       0x0000`0000`063C`3368
063c3350 mov       0x48(%rsp),%r8
063c3355 lea       0x63D`01E0,%rcx
063c335c mov       $0x23,%edx
063c3361 call      0x0000`0000`063B`8E30
063c3366 ud2
063c3368 mov       0x40(%rsp),%rax
063c336d add       $0x68,%rsp
063c3371 ret

core::slice::impl$0::split_at_unchecked<u8>:
063c3380 sub       $0x98,%rsp
063c3387 mov       %r9,0x38(%rsp)
063c338c mov       %r8,0x40(%rsp)
063c3391 mov       %rdx,%rax
063c3394 mov       0x40(%rsp),%rdx
063c3399 mov       %rax,0x48(%rsp)
063c339e mov       %rcx,%rax
063c33a1 mov       0x48(%rsp),%rcx
063c33a6 mov       %rax,0x50(%rsp)
063c33ab mov       %rax,0x58(%rsp)
063c33b0 mov       %rcx,0x80(%rsp)
063c33b8 mov       %rdx,0x88(%rsp)
063c33c0 mov       %r9,0x90(%rsp)
063c33c8 mov       %r9,0x70(%rsp)
063c33cd mov       0x70(%rsp),%r8
063c33d2 call      0x0000`0000`063C`29A0
063c33d7 mov       %rax,0x60(%rsp)
063c33dc mov       %rdx,0x68(%rsp)
063c33e1 mov       0x40(%rsp),%rdx
063c33e6 mov       0x48(%rsp),%rcx
063c33eb mov       0x38(%rsp),%rax
063c33f0 mov       %rax,0x78(%rsp)
063c33f5 mov       0x78(%rsp),%r8
063c33fa call      0x0000`0000`063C`2B50
063c33ff mov       %rax,0x28(%rsp)
063c3404 mov       %rdx,0x30(%rsp)
063c3409 mov       0x58(%rsp),%rax
063c340e mov       0x50(%rsp),%rcx
063c3413 mov       0x30(%rsp),%rdx
063c3418 mov       0x28(%rsp),%r8
063c341d mov       0x68(%rsp),%r9
063c3422 mov       0x60(%rsp),%r10
063c3427 mov       %r10,(%rcx)
063c342a mov       %r9,8(%rcx)
063c342e mov       %r8,0x10(%rcx)
063c3432 mov       %rdx,0x18(%rcx)
063c3436 add       $0x98,%rsp
063c343d ret

core::slice::impl$0::split_at_unchecked<usize>:
063c3440 sub       $0x98,%rsp
063c3447 mov       %r9,0x38(%rsp)
063c344c mov       %r8,0x40(%rsp)
063c3451 mov       %rdx,%rax
063c3454 mov       0x40(%rsp),%rdx
063c3459 mov       %rax,0x48(%rsp)
063c345e mov       %rcx,%rax
063c3461 mov       0x48(%rsp),%rcx
063c3466 mov       %rax,0x50(%rsp)
063c346b mov       %rax,0x58(%rsp)
063c3470 mov       %rcx,0x80(%rsp)
063c3478 mov       %rdx,0x88(%rsp)
063c3480 mov       %r9,0x90(%rsp)
063c3488 mov       %r9,0x70(%rsp)
063c348d mov       0x70(%rsp),%r8
063c3492 call      0x0000`0000`063C`2A70
063c3497 mov       %rax,0x60(%rsp)
063c349c mov       %rdx,0x68(%rsp)
063c34a1 mov       0x40(%rsp),%rdx
063c34a6 mov       0x48(%rsp),%rcx
063c34ab mov       0x38(%rsp),%rax
063c34b0 mov       %rax,0x78(%rsp)
063c34b5 mov       0x78(%rsp),%r8
063c34ba call      0x0000`0000`063C`2B00
063c34bf mov       %rax,0x28(%rsp)
063c34c4 mov       %rdx,0x30(%rsp)
063c34c9 mov       0x58(%rsp),%rax
063c34ce mov       0x50(%rsp),%rcx
063c34d3 mov       0x30(%rsp),%rdx
063c34d8 mov       0x28(%rsp),%r8
063c34dd mov       0x68(%rsp),%r9
063c34e2 mov       0x60(%rsp),%r10
063c34e7 mov       %r10,(%rcx)
063c34ea mov       %r9,8(%rcx)
063c34ee mov       %r8,0x10(%rcx)
063c34f2 mov       %rdx,0x18(%rcx)
063c34f6 add       $0x98,%rsp
063c34fd ret

core::slice::impl$0::binary_search_by<u32,core::slice::impl$0::binary_search_by_key::closure_env$0<u32,u32,core::unicode::unicode_data::skip_search::closure_env$0<32,707> > >:
063c3500 sub       $0xB8,%rsp
063c3507 mov       %rdx,0x48(%rsp)
063c350c mov       %rcx,0x50(%rsp)
063c3511 mov       %r8,0x58(%rsp)
063c3516 mov       %r9,0x60(%rsp)
063c351b mov       %rcx,0xA0(%rsp)
063c3523 mov       %rdx,0xA8(%rsp)
063c352b mov       %rdx,0x78(%rsp)
063c3530 movq      $0,0x80(%rsp)
063c353c mov       0x78(%rsp),%rax
063c3541 mov       %rax,0x88(%rsp)
063c3549 mov       0x80(%rsp),%rax
063c3551 cmp       0x88(%rsp),%rax
063c3559 jb        0x0000`0000`063C`3576
063c355b mov       0x80(%rsp),%rax
063c3563 mov       %rax,0x70(%rsp)
063c3568 movq      $1,0x68(%rsp)
063c3571 jmp       0x0000`0000`063C`36E8
063c3576 mov       0x80(%rsp),%rax
063c357e mov       0x78(%rsp),%rcx
063c3583 shr       $1,%rcx
063c3587 add       %rcx,%rax
063c358a mov       %rax,0x40(%rsp)
063c358f setb      %al
063c3592 test      $1,%al
063c3594 jne       0x0000`0000`063C`35B9
063c3596 mov       0x40(%rsp),%r8
063c359b mov       0x48(%rsp),%rdx
063c35a0 mov       0x50(%rsp),%rcx
063c35a5 mov       %r8,0xB0(%rsp)
063c35ad call      0x0000`0000`063C`2A30
063c35b2 mov       %rax,0x38(%rsp)
063c35b7 jmp       0x0000`0000`063C`35D3
063c35b9 lea       0x63C`E220,%rcx
063c35c0 lea       0x63D`0208,%r8
063c35c7 mov       $0x1C,%edx
063c35cc call      0x0000`0000`063B`8E30
063c35d1 ud2
063c35d3 mov       0x38(%rsp),%rax
063c35d8 mov       %rax,0x98(%rsp)
063c35e0 mov       0x98(%rsp),%rdx
063c35e8 lea       0x58(%rsp),%rcx
063c35ed call      0x0000`0000`063C`3750
063c35f2 mov       %al,0x97(%rsp)
063c35f9 lea       0x97(%rsp),%rcx
063c3601 lea       0x63D`0220,%rdx
063c3608 call      0x0000`0000`063C`7390
063c360d mov       %al,0x37(%rsp)
063c3611 mov       0x37(%rsp),%al
063c3615 test      $1,%al
063c3617 jne       0x0000`0000`063C`3635
063c3619 jmp       0x0000`0000`063C`361B
063c361b lea       0x97(%rsp),%rcx
063c3623 lea       0x63C`E2EF,%rdx
063c362a call      0x0000`0000`063C`7390
063c362f mov       %al,0x36(%rsp)
063c3633 jmp       0x0000`0000`063C`3691
063c3635 mov       0x40(%rsp),%rax
063c363a add       $1,%rax
063c363e mov       %rax,0x28(%rsp)
063c3643 setb      %al
063c3646 test      $1,%al
063c3648 jne       0x0000`0000`063C`3659
063c364a mov       0x28(%rsp),%rax
063c364f mov       %rax,0x80(%rsp)
063c3657 jmp       0x0000`0000`063C`3673
063c3659 lea       0x63C`E220,%rcx
063c3660 lea       0x63D`0228,%r8
063c3667 mov       $0x1C,%edx
063c366c call      0x0000`0000`063B`8E30
063c3671 ud2
063c3673 mov       0x88(%rsp),%rax
063c367b sub       0x80(%rsp),%rax
063c3683 mov       %rax,0x20(%rsp)
063c3688 setb      %al
063c368b test      $1,%al
063c368d jne       0x0000`0000`063C`36BB
063c368f jmp       0x0000`0000`063C`36AC
063c3691 mov       0x36(%rsp),%al
063c3695 test      $1,%al
063c3697 jne       0x0000`0000`063C`369D
063c3699 jmp       0x0000`0000`063C`369B
063c369b jmp       0x0000`0000`063C`36D5
063c369d mov       0x40(%rsp),%rax
063c36a2 mov       %rax,0x88(%rsp)
063c36aa jmp       0x0000`0000`063C`3673
063c36ac mov       0x20(%rsp),%rax
063c36b1 mov       %rax,0x78(%rsp)
063c36b6 jmp       0x0000`0000`063C`3549
063c36bb lea       0x63C`E1F0,%rcx
063c36c2 lea       0x63D`0240,%r8
063c36c9 mov       $0x21,%edx
063c36ce call      0x0000`0000`063B`8E30
063c36d3 ud2
063c36d5 mov       0x40(%rsp),%rax
063c36da mov       %rax,0x70(%rsp)
063c36df movq      $0,0x68(%rsp)
063c36e8 mov       0x68(%rsp),%rax
063c36ed mov       0x70(%rsp),%rdx
063c36f2 add       $0xB8,%rsp
063c36f9 ret

core::slice::impl$0::binary_search_by_key<u32,u32,core::unicode::unicode_data::skip_search::closure_env$0<32,707> >:
063c3700 sub       $0x68,%rsp
063c3704 mov       %rcx,0x50(%rsp)
063c3709 mov       %rdx,0x58(%rsp)
063c370e mov       %r8,0x60(%rsp)
063c3713 lea       0x38(%rsp),%rax
063c3718 mov       %rax,0x40(%rsp)
063c371d mov       %r8,0x48(%rsp)
063c3722 mov       0x40(%rsp),%r8
063c3727 mov       0x48(%rsp),%r9
063c372c call      0x0000`0000`063C`3500
063c3731 mov       %rax,0x28(%rsp)
063c3736 mov       %rdx,0x30(%rsp)
063c373b jmp       0x0000`0000`063C`373D
063c373d mov       0x30(%rsp),%rdx
063c3742 mov       0x28(%rsp),%rax
063c3747 add       $0x68,%rsp
063c374b ret

core::slice::impl$0::binary_search_by_key::closure$0<u32,u32,core::unicode::unicode_data::skip_search::closure_env$0<32,707> >:
063c3750 sub       $0x68,%rsp
063c3754 mov       %rcx,0x30(%rsp)
063c3759 mov       %rcx,0x48(%rsp)
063c375e mov       0x48(%rsp),%rax
063c3763 mov       (%rax),%rax
063c3766 mov       %rax,0x50(%rsp)
063c376b mov       0x48(%rsp),%rax
063c3770 mov       8(%rax),%rax
063c3774 mov       %rax,0x58(%rsp)
063c3779 mov       %rdx,0x60(%rsp)
063c377e mov       (%rcx),%rcx
063c3781 mov       %rdx,0x40(%rsp)
063c3786 mov       0x40(%rsp),%rdx
063c378b call      0x0000`0000`063C`70F0
063c3790 mov       %eax,0x3C(%rsp)
063c3794 mov       0x30(%rsp),%rax
063c3799 mov       8(%rax),%rdx
063c379d lea       0x3C(%rsp),%rcx
063c37a2 call      0x0000`0000`063C`74C0
063c37a7 mov       %al,0x2F(%rsp)
063c37ab jmp       0x0000`0000`063C`37AD
063c37ad mov       0x2F(%rsp),%al
063c37b1 add       $0x68,%rsp
063c37b5 ret

core::slice::impl$0::align_to_offsets<u8,usize>:
063c37c0 sub       $0x98,%rsp
063c37c7 mov       %rdx,0x48(%rsp)
063c37cc mov       %rcx,0x60(%rsp)
063c37d1 mov       %rdx,0x68(%rsp)
063c37d6 jmp       0x0000`0000`063C`37D8
063c37d8 mov       $1,%ecx
063c37dd mov       $8,%edx
063c37e2 call      0x0000`0000`063C`3960
063c37e7 mov       %rax,0x40(%rsp)
063c37ec mov       %rax,0x70(%rsp)
063c37f1 jmp       0x0000`0000`063C`37F3
063c37f3 mov       0x40(%rsp),%rax
063c37f8 cmp       $0,%rax
063c37fc sete      %al
063c37ff test      $1,%al
063c3801 jne       0x0000`0000`063C`381E
063c3803 mov       0x40(%rsp),%rcx
063c3808 mov       $8,%eax
063c380d xor       %edx,%edx
063c380f div       %rcx
063c3812 mov       %rax,0x38(%rsp)
063c3817 mov       %rax,0x78(%rsp)
063c381c jmp       0x0000`0000`063C`3838
063c381e lea       0x63C`E310,%rcx
063c3825 lea       0x63D`0258,%r8
063c382c mov       $0x19,%edx
063c3831 call      0x0000`0000`063B`8E30
063c3836 ud2
063c3838 mov       0x40(%rsp),%rax
063c383d cmp       $0,%rax
063c3841 sete      %al
063c3844 test      $1,%al
063c3846 jne       0x0000`0000`063C`3879
063c3848 mov       0x40(%rsp),%rcx
063c384d mov       $1,%eax
063c3852 xor       %edx,%edx
063c3854 div       %rcx
063c3857 mov       %rax,%rcx
063c385a mov       0x38(%rsp),%rax
063c385f mov       %rcx,0x30(%rsp)
063c3864 mov       %rcx,0x80(%rsp)
063c386c cmp       $0,%rax
063c3870 sete      %al
063c3873 test      $1,%al
063c3875 jne       0x0000`0000`063C`38B8
063c3877 jmp       0x0000`0000`063C`3893
063c3879 lea       0x63C`E310,%rcx
063c3880 lea       0x63D`0270,%r8
063c3887 mov       $0x19,%edx
063c388c call      0x0000`0000`063B`8E30
063c3891 ud2
063c3893 mov       0x30(%rsp),%rcx
063c3898 mov       0x38(%rsp),%r8
063c389d mov       0x48(%rsp),%rax
063c38a2 xor       %edx,%edx
063c38a4 div       %r8
063c38a7 mul       %rcx
063c38aa mov       %rax,0x28(%rsp)
063c38af seto      %al
063c38b2 test      $1,%al
063c38b4 jne       0x0000`0000`063C`38F1
063c38b6 jmp       0x0000`0000`063C`38D2
063c38b8 lea       0x63C`E310,%rcx
063c38bf lea       0x63D`0288,%r8
063c38c6 mov       $0x19,%edx
063c38cb call      0x0000`0000`063B`8E30
063c38d0 ud2
063c38d2 mov       0x38(%rsp),%rax
063c38d7 mov       0x28(%rsp),%rcx
063c38dc mov       %rcx,0x88(%rsp)
063c38e4 cmp       $0,%rax
063c38e8 sete      %al
063c38eb test      $1,%al
063c38ed jne       0x0000`0000`063C`3943
063c38ef jmp       0x0000`0000`063C`390B
063c38f1 lea       0x63C`E240,%rcx
063c38f8 lea       0x63D`0288,%r8
063c38ff mov       $0x21,%edx
063c3904 call      0x0000`0000`063B`8E30
063c3909 ud2
063c390b mov       0x38(%rsp),%rcx
063c3910 mov       0x48(%rsp),%rax
063c3915 xor       %edx,%edx
063c3917 div       %rcx
063c391a mov       0x28(%rsp),%rax
063c391f mov       %rdx,0x90(%rsp)
063c3927 mov       %rax,0x50(%rsp)
063c392c mov       %rdx,0x58(%rsp)
063c3931 mov       0x50(%rsp),%rax
063c3936 mov       0x58(%rsp),%rdx
063c393b add       $0x98,%rsp
063c3942 ret
063c3943 lea       0x63C`E330,%rcx
063c394a lea       0x63D`02A0,%r8
063c3951 mov       $0x39,%edx
063c3956 call      0x0000`0000`063B`8E30
063c395b ud2

core::slice::impl$0::align_to_offsets::gcd:
063c3960 sub       $0xE8,%rsp
063c3967 mov       %rdx,0x70(%rsp)
063c396c mov       %rcx,0x78(%rsp)
063c3971 mov       %rcx,0xB0(%rsp)
063c3979 mov       %rdx,0xB8(%rsp)
063c3981 cmp       $0,%rcx
063c3985 jne       0x0000`0000`063C`3999
063c3987 mov       0x70(%rsp),%rax
063c398c mov       %rax,0x80(%rsp)
063c3994 jmp       0x0000`0000`063C`3C04
063c3999 mov       0x70(%rsp),%rax
063c399e cmp       $0,%rax
063c39a2 jne       0x0000`0000`063C`39B6
063c39a4 mov       0x78(%rsp),%rax
063c39a9 mov       %rax,0x80(%rsp)
063c39b1 jmp       0x0000`0000`063C`3C04
063c39b6 mov       0x78(%rsp),%rax
063c39bb bsf       %rax,%rax
063c39bf mov       %rax,0xC0(%rsp)
063c39c7 mov       0xC0(%rsp),%rax
063c39cf mov       %rax,0x68(%rsp)
063c39d4 mov       0x70(%rsp),%rax
063c39d9 bsf       %rax,%rax
063c39dd mov       %rax,0xC8(%rsp)
063c39e5 mov       0xC8(%rsp),%rax
063c39ed mov       %rax,0x60(%rsp)
063c39f2 mov       0x60(%rsp),%rax
063c39f7 mov       0x68(%rsp),%rcx
063c39fc mov       %rcx,0x90(%rsp)
063c3a04 mov       %rax,0x98(%rsp)
063c3a0c mov       0x90(%rsp),%rcx
063c3a14 mov       %rcx,0x50(%rsp)
063c3a19 mov       %rcx,0xD0(%rsp)
063c3a21 mov       0x98(%rsp),%rax
063c3a29 mov       %rax,0x88(%rsp)
063c3a31 mov       0x88(%rsp),%rdx
063c3a39 call      0x0000`0000`063B`6690
063c3a3e mov       %rax,0x58(%rsp)
063c3a43 mov       %rax,0xD8(%rsp)
063c3a4b mov       0x78(%rsp),%rdx
063c3a50 mov       0x50(%rsp),%rcx
063c3a55 mov       %rcx,%rax
063c3a58 and       $0xFFFF`FFFF`FFFF`FFC0,%rax
063c3a5c cmp       $0,%rax
063c3a60 setne     %al
063c3a63 and       $0x3F,%rcx
063c3a67 shr       %cl,%rdx
063c3a6a mov       %rdx,0x48(%rsp)
063c3a6f test      $1,%al
063c3a71 jne       0x0000`0000`063C`3A8F
063c3a73 mov       0x70(%rsp),%rax
063c3a78 mov       0x48(%rsp),%rcx
063c3a7d mov       %rcx,0xA0(%rsp)
063c3a85 mov       %rax,0xA8(%rsp)
063c3a8d jmp       0x0000`0000`063C`3AA9
063c3a8f lea       0x63C`E2A0,%rcx
063c3a96 lea       0x63D`02B8,%r8
063c3a9d mov       $0x24,%edx
063c3aa2 call      0x0000`0000`063B`8E30
063c3aa7 ud2
063c3aa9 mov       0x88(%rsp),%rcx
063c3ab1 mov       0xA8(%rsp),%rdx
063c3ab9 mov       %rcx,%rax
063c3abc and       $0xFFFF`FFFF`FFFF`FFC0,%rax
063c3ac0 cmp       $0,%rax
063c3ac4 setne     %al
063c3ac7 and       $0x3F,%rcx
063c3acb shr       %cl,%rdx
063c3ace mov       %rdx,0x40(%rsp)
063c3ad3 test      $1,%al
063c3ad5 jne       0x0000`0000`063C`3AF8
063c3ad7 mov       0x40(%rsp),%rax
063c3adc mov       %rax,0xA8(%rsp)
063c3ae4 mov       0xA0(%rsp),%rax
063c3aec cmp       0xA8(%rsp),%rax
063c3af4 ja        0x0000`0000`063C`3B30
063c3af6 jmp       0x0000`0000`063C`3B12
063c3af8 lea       0x63C`E2A0,%rcx
063c3aff lea       0x63D`02D0,%r8
063c3b06 mov       $0x24,%edx
063c3b0b call      0x0000`0000`063B`8E30
063c3b10 ud2
063c3b12 mov       0xA8(%rsp),%rax
063c3b1a sub       0xA0(%rsp),%rax
063c3b22 mov       %rax,0x38(%rsp)
063c3b27 setb      %al
063c3b2a test      $1,%al
063c3b2c jne       0x0000`0000`063C`3B61
063c3b2e jmp       0x0000`0000`063C`3B47
063c3b30 lea       0xA0(%rsp),%rcx
063c3b38 lea       0xA8(%rsp),%rdx
063c3b40 call      0x0000`0000`063B`4C30
063c3b45 jmp       0x0000`0000`063C`3B12
063c3b47 mov       0x38(%rsp),%rax
063c3b4c mov       %rax,0xA8(%rsp)
063c3b54 cmpq      $0,0xA8(%rsp)
063c3b5d je        0x0000`0000`063C`3B7B
063c3b5f jmp       0x0000`0000`063C`3BA8
063c3b61 lea       0x63C`E1F0,%rcx
063c3b68 lea       0x63D`02E8,%r8
063c3b6f mov       $0x21,%edx
063c3b74 call      0x0000`0000`063B`8E30
063c3b79 ud2
063c3b7b mov       0x58(%rsp),%rcx
063c3b80 mov       0xA0(%rsp),%rdx
063c3b88 mov       %rcx,%rax
063c3b8b and       $0xFFFF`FFFF`FFFF`FFC0,%rax
063c3b8f cmp       $0,%rax
063c3b93 setne     %al
063c3b96 and       $0x3F,%rcx
063c3b9a shl       %cl,%rdx
063c3b9d mov       %rdx,0x30(%rsp)
063c3ba2 test      $1,%al
063c3ba4 jne       0x0000`0000`063C`3BEA
063c3ba6 jmp       0x0000`0000`063C`3BDB
063c3ba8 mov       0xA8(%rsp),%rax
063c3bb0 bsf       %rax,%rax
063c3bb4 mov       %rax,0xE0(%rsp)
063c3bbc mov       0xE0(%rsp),%rax
063c3bc4 mov       %rax,0x28(%rsp)
063c3bc9 mov       0x28(%rsp),%rax
063c3bce mov       %rax,0x88(%rsp)
063c3bd6 jmp       0x0000`0000`063C`3AA9
063c3bdb mov       0x30(%rsp),%rax
063c3be0 mov       %rax,0x80(%rsp)
063c3be8 jmp       0x0000`0000`063C`3C04
063c3bea lea       0x63C`E270,%rcx
063c3bf1 lea       0x63D`0300,%r8
063c3bf8 mov       $0x23,%edx
063c3bfd call      0x0000`0000`063B`8E30
063c3c02 ud2
063c3c04 mov       0x80(%rsp),%rax
063c3c0c add       $0xE8,%rsp
063c3c13 ret

core::slice::impl$0::align_to<u8,usize>:
063c3c20 sub       $0x168,%rsp
063c3c27 mov       %r8,0xA8(%rsp)
063c3c2f mov       %rdx,0xB0(%rsp)
063c3c37 mov       %rcx,0xB8(%rsp)
063c3c3f mov       %rcx,0xC0(%rsp)
063c3c47 mov       %rdx,0xF0(%rsp)
063c3c4f mov       %r8,0xF8(%rsp)
063c3c57 mov       $8,%eax
063c3c5c cmp       $0,%rax
063c3c60 jne       0x0000`0000`063C`3C6C
063c3c62 movb      $1,0xCF(%rsp)
063c3c6a jmp       0x0000`0000`063C`3C83
063c3c6c jmp       0x0000`0000`063C`3C6E
063c3c6e mov       $1,%eax
063c3c73 cmp       $0,%rax
063c3c77 sete      %al
063c3c7a and       $1,%al
063c3c7c mov       %al,0xCF(%rsp)
063c3c83 testb     $1,0xCF(%rsp)
063c3c8b jne       0x0000`0000`063C`3CB4
063c3c8d mov       0xA8(%rsp),%rdx
063c3c95 mov       0xB0(%rsp),%rcx
063c3c9d call      0x0000`0000`063C`2BE0
063c3ca2 mov       %rax,0xA0(%rsp)
063c3caa mov       %rax,0x100(%rsp)
063c3cb2 jmp       0x0000`0000`063C`3D09
063c3cb4 mov       0xB8(%rsp),%rax
063c3cbc mov       0xA8(%rsp),%rcx
063c3cc4 mov       0xB0(%rsp),%rdx
063c3ccc mov       %rdx,(%rax)
063c3ccf mov       %rcx,8(%rax)
063c3cd3 lea       0x63C`E370,%rcx
063c3cda mov       %rcx,0x10(%rax)
063c3cde movq      $0,0x18(%rax)
063c3ce6 lea       0x63C`E370,%rcx
063c3ced mov       %rcx,0x20(%rax)
063c3cf1 movq      $0,0x28(%rax)
063c3cf9 mov       0xC0(%rsp),%rax
063c3d01 add       $0x168,%rsp
063c3d08 ret
063c3d09 jmp       0x0000`0000`063C`3D0B
063c3d0b mov       0xA0(%rsp),%rcx
063c3d13 mov       $8,%edx
063c3d18 call      0x0000`0000`063B`6270
063c3d1d mov       %rax,0x98(%rsp)
063c3d25 mov       %rax,0x108(%rsp)
063c3d2d mov       0x98(%rsp),%rax
063c3d35 mov       0xA8(%rsp),%rcx
063c3d3d cmp       %rcx,%rax
063c3d40 ja        0x0000`0000`063C`3D75
063c3d42 mov       0x98(%rsp),%r9
063c3d4a mov       0xA8(%rsp),%r8
063c3d52 mov       0xB0(%rsp),%rdx
063c3d5a lea       0xD0(%rsp),%rcx
063c3d62 lea       0x63D`0318,%rax
063c3d69 mov       %rax,0x20(%rsp)
063c3d6e call      0x0000`0000`063C`3260
063c3d73 jmp       0x0000`0000`063C`3DBF
063c3d75 mov       0xB8(%rsp),%rax
063c3d7d mov       0xA8(%rsp),%rcx
063c3d85 mov       0xB0(%rsp),%rdx
063c3d8d mov       %rdx,(%rax)
063c3d90 mov       %rcx,8(%rax)
063c3d94 lea       0x63C`E370,%rcx
063c3d9b mov       %rcx,0x10(%rax)
063c3d9f movq      $0,0x18(%rax)
063c3da7 lea       0x63C`E370,%rcx
063c3dae mov       %rcx,0x20(%rax)
063c3db2 movq      $0,0x28(%rax)
063c3dba jmp       0x0000`0000`063C`3CF9
063c3dbf mov       0xD0(%rsp),%rcx
063c3dc7 mov       %rcx,0x68(%rsp)
063c3dcc mov       0xD8(%rsp),%rax
063c3dd4 mov       %rax,0x70(%rsp)
063c3dd9 mov       %rcx,0x110(%rsp)
063c3de1 mov       %rax,0x118(%rsp)
063c3de9 mov       0xE0(%rsp),%rcx
063c3df1 mov       %rcx,0x78(%rsp)
063c3df6 mov       0xE8(%rsp),%rdx
063c3dfe mov       %rdx,0x80(%rsp)
063c3e06 mov       %rcx,0x120(%rsp)
063c3e0e mov       %rdx,0x128(%rsp)
063c3e16 call      0x0000`0000`063C`37C0
063c3e1b mov       %rax,0x88(%rsp)
063c3e23 mov       %rdx,0x90(%rsp)
063c3e2b mov       0x80(%rsp),%rdx
063c3e33 mov       0x78(%rsp),%rcx
063c3e38 mov       0x90(%rsp),%rax
063c3e40 mov       0x88(%rsp),%r8
063c3e48 mov       %r8,0x130(%rsp)
063c3e50 mov       %rax,0x138(%rsp)
063c3e58 call      0x0000`0000`063C`2BE0
063c3e5d mov       %rax,0x60(%rsp)
063c3e62 mov       0x88(%rsp),%rdx
063c3e6a mov       0x60(%rsp),%rcx
063c3e6f call      0x0000`0000`063C`2440
063c3e74 mov       %rax,0x50(%rsp)
063c3e79 mov       %rdx,0x58(%rsp)
063c3e7e mov       0x80(%rsp),%rdx
063c3e86 mov       0x78(%rsp),%rcx
063c3e8b call      0x0000`0000`063C`2BE0
063c3e90 mov       %rax,0x48(%rsp)
063c3e95 mov       0x90(%rsp),%rcx
063c3e9d mov       0x80(%rsp),%rax
063c3ea5 sub       %rcx,%rax
063c3ea8 mov       %rax,0x40(%rsp)
063c3ead setb      %al
063c3eb0 test      $1,%al
063c3eb2 jne       0x0000`0000`063C`3EF8
063c3eb4 mov       0x40(%rsp),%rcx
063c3eb9 mov       0x48(%rsp),%rax
063c3ebe mov       %rax,0x140(%rsp)
063c3ec6 mov       %rcx,0x148(%rsp)
063c3ece mov       %rax,0x150(%rsp)
063c3ed6 mov       %rcx,0x158(%rsp)
063c3ede add       %rcx,%rax
063c3ee1 mov       %rax,0x160(%rsp)
063c3ee9 mov       0x160(%rsp),%rax
063c3ef1 mov       %rax,0x38(%rsp)
063c3ef6 jmp       0x0000`0000`063C`3F12
063c3ef8 lea       0x63C`E1F0,%rcx
063c3eff lea       0x63D`0330,%r8
063c3f06 mov       $0x21,%edx
063c3f0b call      0x0000`0000`063B`8E30
063c3f10 ud2
063c3f12 mov       0x90(%rsp),%rdx
063c3f1a mov       0x38(%rsp),%rcx
063c3f1f call      0x0000`0000`063C`24E0
063c3f24 mov       %rax,0x28(%rsp)
063c3f29 mov       %rdx,0x30(%rsp)
063c3f2e mov       0xB8(%rsp),%rax
063c3f36 mov       0x30(%rsp),%rcx
063c3f3b mov       0x28(%rsp),%rdx
063c3f40 mov       0x58(%rsp),%r8
063c3f45 mov       0x50(%rsp),%r9
063c3f4a mov       0x70(%rsp),%r10
063c3f4f mov       0x68(%rsp),%r11
063c3f54 mov       %r11,(%rax)
063c3f57 mov       %r10,8(%rax)
063c3f5b mov       %r9,0x10(%rax)
063c3f5f mov       %r8,0x18(%rax)
063c3f63 mov       %rdx,0x20(%rax)
063c3f67 mov       %rcx,0x28(%rax)
063c3f6b jmp       0x0000`0000`063C`3CF9

core::str::converts::from_utf8_unchecked:
063c3f70 sub       $0x30,%rsp
063c3f74 mov       %rcx,0x10(%rsp)
063c3f79 mov       %rdx,0x18(%rsp)
063c3f7e mov       %rcx,0x20(%rsp)
063c3f83 mov       %rdx,0x28(%rsp)
063c3f88 mov       0x20(%rsp),%rax
063c3f8d mov       %rax,(%rsp)
063c3f91 mov       0x28(%rsp),%rax
063c3f96 mov       %rax,8(%rsp)
063c3f9b mov       8(%rsp),%rdx
063c3fa0 mov       (%rsp),%rax
063c3fa4 add       $0x30,%rsp
063c3fa8 ret

core::str::converts::from_utf8_unchecked_mut:
063c3fb0 sub       $0x10,%rsp
063c3fb4 mov       %rcx,%rax
063c3fb7 mov       %rax,(%rsp)
063c3fbb mov       %rdx,8(%rsp)
063c3fc0 add       $0x10,%rsp
063c3fc4 ret

core::str::count::count_chars:
063c3fd0 sub       $0x88,%rsp
063c3fd7 mov       %rdx,0x38(%rsp)
063c3fdc mov       %rcx,0x40(%rsp)
063c3fe1 mov       %rcx,0x58(%rsp)
063c3fe6 mov       %rdx,0x60(%rsp)
063c3feb call      0x0000`0000`063C`6470
063c3ff0 mov       %rax,0x48(%rsp)
063c3ff5 mov       0x48(%rsp),%rax
063c3ffa cmp       $0x20,%rax
063c3ffe jb        0x0000`0000`063C`4016
063c4000 mov       0x38(%rsp),%rdx
063c4005 mov       0x40(%rsp),%rcx
063c400a call      0x0000`0000`063C`4070
063c400f mov       %rax,0x50(%rsp)
063c4014 jmp       0x0000`0000`063C`4062
063c4016 mov       0x38(%rsp),%rax
063c401b mov       0x40(%rsp),%rcx
063c4020 mov       %rcx,0x68(%rsp)
063c4025 mov       %rax,0x70(%rsp)
063c402a mov       %rcx,0x78(%rsp)
063c402f mov       %rax,0x80(%rsp)
063c4037 mov       0x78(%rsp),%rax
063c403c mov       %rax,0x28(%rsp)
063c4041 mov       0x80(%rsp),%rax
063c4049 mov       %rax,0x30(%rsp)
063c404e mov       0x30(%rsp),%rdx
063c4053 mov       0x28(%rsp),%rcx
063c4058 call      0x0000`0000`063C`4850
063c405d mov       %rax,0x50(%rsp)
063c4062 mov       0x50(%rsp),%rax
063c4067 add       $0x88,%rsp
063c406e ret

core::str::count::do_count_chars:
063c4070 sub       $0x318,%rsp
063c4077 mov       %rdx,0x110(%rsp)
063c407f mov       %rcx,0x118(%rsp)
063c4087 mov       %rcx,0x248(%rsp)
063c408f mov       %rdx,0x250(%rsp)
063c4097 mov       %rcx,0x2F8(%rsp)
063c409f mov       %rdx,0x300(%rsp)
063c40a7 mov       %rcx,0x308(%rsp)
063c40af mov       %rdx,0x310(%rsp)
063c40b7 mov       0x308(%rsp),%rax
063c40bf mov       %rax,0x120(%rsp)
063c40c7 mov       0x310(%rsp),%rax
063c40cf mov       %rax,0x128(%rsp)
063c40d7 mov       0x128(%rsp),%r8
063c40df mov       0x120(%rsp),%rdx
063c40e7 lea       0x138(%rsp),%rcx
063c40ef call      0x0000`0000`063C`3C20
063c40f4 mov       0x138(%rsp),%rcx
063c40fc mov       %rcx,0xD8(%rsp)
063c4104 mov       0x140(%rsp),%rax
063c410c mov       %rax,0xE0(%rsp)
063c4114 mov       %rcx,0x258(%rsp)
063c411c mov       %rax,0x260(%rsp)
063c4124 mov       0x148(%rsp),%rcx
063c412c mov       %rcx,0xE8(%rsp)
063c4134 mov       0x150(%rsp),%rdx
063c413c mov       %rdx,0xF0(%rsp)
063c4144 mov       %rcx,0x268(%rsp)
063c414c mov       %rdx,0x270(%rsp)
063c4154 mov       0x158(%rsp),%r8
063c415c mov       %r8,0xF8(%rsp)
063c4164 mov       0x160(%rsp),%rax
063c416c mov       %rax,0x100(%rsp)
063c4174 mov       %r8,0x278(%rsp)
063c417c mov       %rax,0x280(%rsp)
063c4184 call      0x0000`0000`063C`2830
063c4189 mov       %al,0x10F(%rsp)
063c4190 mov       0x10F(%rsp),%al
063c4197 test      $1,%al
063c4199 jne       0x0000`0000`063C`41B7
063c419b jmp       0x0000`0000`063C`419D
063c419d mov       0xE0(%rsp),%rax
063c41a5 cmp       $8,%rax
063c41a9 seta      %al
063c41ac and       $1,%al
063c41ae mov       %al,0x16F(%rsp)
063c41b5 jmp       0x0000`0000`063C`41BF
063c41b7 movb      $1,0x16F(%rsp)
063c41bf testb     $1,0x16F(%rsp)
063c41c7 jne       0x0000`0000`063C`41E3
063c41c9 mov       0x100(%rsp),%rax
063c41d1 cmp       $8,%rax
063c41d5 seta      %al
063c41d8 and       $1,%al
063c41da mov       %al,0x16E(%rsp)
063c41e1 jmp       0x0000`0000`063C`41EB
063c41e3 movb      $1,0x16E(%rsp)
063c41eb mov       0x16E(%rsp),%al
063c41f2 and       $1,%al
063c41f4 mov       %al,0x28F(%rsp)
063c41fb mov       0x28F(%rsp),%al
063c4202 mov       %al,0xD7(%rsp)
063c4209 mov       0xD7(%rsp),%al
063c4210 test      $1,%al
063c4212 jne       0x0000`0000`063C`4235
063c4214 jmp       0x0000`0000`063C`4216
063c4216 mov       0xE0(%rsp),%rdx
063c421e mov       0xD8(%rsp),%rcx
063c4226 call      0x0000`0000`063C`4850
063c422b mov       %rax,0xC8(%rsp)
063c4233 jmp       0x0000`0000`063C`42B2
063c4235 mov       0x110(%rsp),%rax
063c423d mov       0x118(%rsp),%rcx
063c4245 mov       %rcx,0x2D8(%rsp)
063c424d mov       %rax,0x2E0(%rsp)
063c4255 mov       %rcx,0x2E8(%rsp)
063c425d mov       %rax,0x2F0(%rsp)
063c4265 mov       0x2E8(%rsp),%rax
063c426d mov       %rax,0xB8(%rsp)
063c4275 mov       0x2F0(%rsp),%rax
063c427d mov       %rax,0xC0(%rsp)
063c4285 mov       0xC0(%rsp),%rdx
063c428d mov       0xB8(%rsp),%rcx
063c4295 call      0x0000`0000`063C`4850
063c429a mov       %rax,0x130(%rsp)
063c42a2 mov       0x130(%rsp),%rax
063c42aa add       $0x318,%rsp
063c42b1 ret
063c42b2 mov       0x100(%rsp),%rdx
063c42ba mov       0xF8(%rsp),%rcx
063c42c2 call      0x0000`0000`063C`4850
063c42c7 mov       %rax,0xB0(%rsp)
063c42cf mov       0xB0(%rsp),%rcx
063c42d7 mov       0xC8(%rsp),%rax
063c42df add       %rcx,%rax
063c42e2 mov       %rax,0xA8(%rsp)
063c42ea setb      %al
063c42ed test      $1,%al
063c42ef jne       0x0000`0000`063C`4326
063c42f1 mov       0xF0(%rsp),%r8
063c42f9 mov       0xE8(%rsp),%rdx
063c4301 mov       0xA8(%rsp),%rax
063c4309 mov       %rax,0x170(%rsp)
063c4311 lea       0x190(%rsp),%rcx
063c4319 mov       $0xC0,%r9d
063c431f call      0x0000`0000`063C`2DF0
063c4324 jmp       0x0000`0000`063C`4340
063c4326 lea       0x63C`E220,%rcx
063c432d lea       0x63D`03C0,%r8
063c4334 mov       $0x1C,%edx
063c4339 call      0x0000`0000`063B`8E30
063c433e ud2
063c4340 lea       0x178(%rsp),%rcx
063c4348 lea       0x190(%rsp),%rdx
063c4350 call      0x0000`0000`063B`7EF0
063c4355 mov       0x178(%rsp),%rax
063c435d mov       %rax,0x1A8(%rsp)
063c4365 mov       0x180(%rsp),%rax
063c436d mov       %rax,0x1B0(%rsp)
063c4375 mov       0x188(%rsp),%rax
063c437d mov       %rax,0x1B8(%rsp)
063c4385 lea       0x1A8(%rsp),%rcx
063c438d call      0x0000`0000`063C`2360
063c4392 mov       %rdx,0x1C8(%rsp)
063c439a mov       %rax,0x1C0(%rsp)
063c43a2 mov       0x1C0(%rsp),%rax
063c43aa test      %rax,%rax
063c43ad setne     %al
063c43b0 movzbl    %al,%eax
063c43b3 je        0x0000`0000`063C`43BB
063c43b5 jmp       0x0000`0000`063C`43B7
063c43b7 jmp       0x0000`0000`063C`43D0
063c43b9 ud2
063c43bb mov       0x170(%rsp),%rax
063c43c3 mov       %rax,0x130(%rsp)
063c43cb jmp       0x0000`0000`063C`42A2
063c43d0 mov       0x1C0(%rsp),%rdx
063c43d8 mov       0x1C8(%rsp),%r8
063c43e0 mov       %rdx,0x290(%rsp)
063c43e8 mov       %r8,0x298(%rsp)
063c43f0 movq      $0,0x1D0(%rsp)
063c43fc lea       0x1D8(%rsp),%rcx
063c4404 call      0x0000`0000`063C`3090
063c4409 mov       0x1D8(%rsp),%rcx
063c4411 mov       0x1E0(%rsp),%rdx
063c4419 mov       %rcx,0x2A0(%rsp)
063c4421 mov       %rdx,0x2A8(%rsp)
063c4429 mov       0x1E8(%rsp),%r8
063c4431 mov       %r8,0x88(%rsp)
063c4439 mov       0x1F0(%rsp),%rax
063c4441 mov       %rax,0x90(%rsp)
063c4449 mov       %r8,0x2B0(%rsp)
063c4451 mov       %rax,0x2B8(%rsp)
063c4459 call      0x0000`0000`063C`1AD0
063c445e mov       %rax,0x98(%rsp)
063c4466 mov       %rdx,0xA0(%rsp)
063c446e mov       0xA0(%rsp),%rax
063c4476 mov       0x98(%rsp),%rcx
063c447e mov       %rcx,0x1F8(%rsp)
063c4486 mov       %rax,0x200(%rsp)
063c448e lea       0x1F8(%rsp),%rcx
063c4496 call      0x0000`0000`063C`8CF0
063c449b mov       %rax,0x208(%rsp)
063c44a3 mov       0x208(%rsp),%rax
063c44ab test      %rax,%rax
063c44ae setne     %al
063c44b1 movzbl    %al,%eax
063c44b4 je        0x0000`0000`063C`44BC
063c44b6 jmp       0x0000`0000`063C`44B8
063c44b8 jmp       0x0000`0000`063C`44D6
063c44ba ud2
063c44bc mov       0x1D0(%rsp),%rcx
063c44c4 call      0x0000`0000`063C`4790
063c44c9 mov       %rax,0x80(%rsp)
063c44d1 jmp       0x0000`0000`063C`45A0
063c44d6 mov       0x208(%rsp),%rcx
063c44de mov       %rcx,0x2C0(%rsp)
063c44e6 call      0x0000`0000`063B`6A50
063c44eb mov       %rax,0x70(%rsp)
063c44f0 mov       %rdx,0x78(%rsp)
063c44f5 mov       0x78(%rsp),%rax
063c44fa mov       0x70(%rsp),%rcx
063c44ff mov       %rcx,0x210(%rsp)
063c4507 mov       %rax,0x218(%rsp)
063c450f lea       0x210(%rsp),%rcx
063c4517 call      0x0000`0000`063C`8E10
063c451c mov       %rax,0x220(%rsp)
063c4524 mov       0x220(%rsp),%rax
063c452c test      %rax,%rax
063c452f setne     %al
063c4532 movzbl    %al,%eax
063c4535 je        0x0000`0000`063C`448E
063c453b jmp       0x0000`0000`063C`453D
063c453d jmp       0x0000`0000`063C`4541
063c453f ud2
063c4541 mov       0x220(%rsp),%rax
063c4549 mov       (%rax),%rcx
063c454c mov       %rcx,0x2C8(%rsp)
063c4554 call      0x0000`0000`063C`4740
063c4559 mov       %rax,0x68(%rsp)
063c455e mov       0x68(%rsp),%rax
063c4563 add       0x1D0(%rsp),%rax
063c456b mov       %rax,0x60(%rsp)
063c4570 setb      %al
063c4573 test      $1,%al
063c4575 jne       0x0000`0000`063C`4586
063c4577 mov       0x60(%rsp),%rax
063c457c mov       %rax,0x1D0(%rsp)
063c4584 jmp       0x0000`0000`063C`450F
063c4586 lea       0x63C`E220,%rcx
063c458d lea       0x63D`03D8,%r8
063c4594 mov       $0x1C,%edx
063c4599 call      0x0000`0000`063B`8E30
063c459e ud2
063c45a0 mov       0x80(%rsp),%rax
063c45a8 add       0x170(%rsp),%rax
063c45b0 mov       %rax,0x58(%rsp)
063c45b5 setb      %al
063c45b8 test      $1,%al
063c45ba jne       0x0000`0000`063C`45E4
063c45bc mov       0x90(%rsp),%rdx
063c45c4 mov       0x88(%rsp),%rcx
063c45cc mov       0x58(%rsp),%rax
063c45d1 mov       %rax,0x170(%rsp)
063c45d9 call      0x0000`0000`063C`2830
063c45de mov       %al,0x57(%rsp)
063c45e2 jmp       0x0000`0000`063C`45FE
063c45e4 lea       0x63C`E220,%rcx
063c45eb lea       0x63D`03F0,%r8
063c45f2 mov       $0x1C,%edx
063c45f7 call      0x0000`0000`063B`8E30
063c45fc ud2
063c45fe mov       0x57(%rsp),%al
063c4602 xor       $0xFF,%al
063c4604 test      $1,%al
063c4606 jne       0x0000`0000`063C`460D
063c4608 jmp       0x0000`0000`063C`4385
063c460d mov       0x90(%rsp),%rdx
063c4615 mov       0x88(%rsp),%rcx
063c461d movq      $0,0x228(%rsp)
063c4629 call      0x0000`0000`063C`1A40
063c462e mov       %rax,0x40(%rsp)
063c4633 mov       %rdx,0x48(%rsp)
063c4638 mov       0x48(%rsp),%rax
063c463d mov       0x40(%rsp),%rcx
063c4642 mov       %rcx,0x230(%rsp)
063c464a mov       %rax,0x238(%rsp)
063c4652 lea       0x230(%rsp),%rcx
063c465a call      0x0000`0000`063C`8E10
063c465f mov       %rax,0x240(%rsp)
063c4667 mov       0x240(%rsp),%rax
063c466f test      %rax,%rax
063c4672 setne     %al
063c4675 movzbl    %al,%eax
063c4678 je        0x0000`0000`063C`4680
063c467a jmp       0x0000`0000`063C`467C
063c467c jmp       0x0000`0000`063C`4694
063c467e ud2
063c4680 mov       0x228(%rsp),%rcx
063c4688 call      0x0000`0000`063C`4790
063c468d mov       %rax,0x38(%rsp)
063c4692 jmp       0x0000`0000`063C`46F6
063c4694 mov       0x240(%rsp),%rax
063c469c mov       (%rax),%rcx
063c469f mov       %rcx,0x2D0(%rsp)
063c46a7 call      0x0000`0000`063C`4740
063c46ac mov       %rax,0x30(%rsp)
063c46b1 mov       0x30(%rsp),%rax
063c46b6 add       0x228(%rsp),%rax
063c46be mov       %rax,0x28(%rsp)
063c46c3 setb      %al
063c46c6 test      $1,%al
063c46c8 jne       0x0000`0000`063C`46DC
063c46ca mov       0x28(%rsp),%rax
063c46cf mov       %rax,0x228(%rsp)
063c46d7 jmp       0x0000`0000`063C`4652
063c46dc lea       0x63C`E220,%rcx
063c46e3 lea       0x63D`0408,%r8
063c46ea mov       $0x1C,%edx
063c46ef call      0x0000`0000`063B`8E30
063c46f4 ud2
063c46f6 mov       0x38(%rsp),%rax
063c46fb add       0x170(%rsp),%rax
063c4703 mov       %rax,0x20(%rsp)
063c4708 setb      %al
063c470b test      $1,%al
063c470d jne       0x0000`0000`063C`4721
063c470f mov       0x20(%rsp),%rax
063c4714 mov       %rax,0x170(%rsp)
063c471c jmp       0x0000`0000`063C`43BB
063c4721 lea       0x63C`E220,%rcx
063c4728 lea       0x63D`0420,%r8
063c472f mov       $0x1C,%edx
063c4734 call      0x0000`0000`063B`8E30
063c4739 ud2

core::str::count::contains_non_continuation_byte:
063c4740 sub       $0x20,%rsp
063c4744 mov       %rcx,%rax
063c4747 mov       %rax,8(%rsp)
063c474c mov       %rax,0x18(%rsp)
063c4751 xor       $0xFFFF`FFFF`FFFF`FFFF,%rax
063c4755 shr       $7,%rax
063c4759 mov       %rax,0x10(%rsp)
063c475e mov       8(%rsp),%rax
063c4763 shr       $6,%rax
063c4767 mov       %rax,(%rsp)
063c476b mov       (%rsp),%rcx
063c476f mov       0x10(%rsp),%rax
063c4774 or        %rcx,%rax
063c4777 movabs    $0x101`0101`0101`0101,%rcx
063c4781 and       %rcx,%rax
063c4784 add       $0x20,%rsp
063c4788 ret

core::str::count::sum_bytes_in_usize:
063c4790 sub       $0x68,%rsp
063c4794 mov       %rcx,0x48(%rsp)
063c4799 movabs    $0xFF`00FF`00FF`00FF,%rdx
063c47a3 mov       %rcx,%rax
063c47a6 and       %rdx,%rax
063c47a9 mov       %rax,0x38(%rsp)
063c47ae shr       $8,%rcx
063c47b2 mov       %rcx,0x40(%rsp)
063c47b7 mov       0x38(%rsp),%rax
063c47bc mov       0x40(%rsp),%rcx
063c47c1 movabs    $0xFF`00FF`00FF`00FF,%rdx
063c47cb and       %rdx,%rcx
063c47ce add       %rcx,%rax
063c47d1 mov       %rax,0x30(%rsp)
063c47d6 setb      %al
063c47d9 test      $1,%al
063c47db jne       0x0000`0000`063C`4810
063c47dd mov       0x30(%rsp),%rax
063c47e2 mov       %rax,0x50(%rsp)
063c47e7 mov       %rax,0x58(%rsp)
063c47ec movabs    $0x1`0001`0001`0001,%rcx
063c47f6 mov       %rcx,0x60(%rsp)
063c47fb movabs    $0x1`0001`0001`0001,%rcx
063c4805 imul      %rcx,%rax
063c4809 mov       %rax,0x28(%rsp)
063c480e jmp       0x0000`0000`063C`482A
063c4810 lea       0x63C`E220,%rcx
063c4817 lea       0x63D`0438,%r8
063c481e mov       $0x1C,%edx
063c4823 call      0x0000`0000`063B`8E30
063c4828 ud2
063c482a mov       0x28(%rsp),%rax
063c482f shr       $0x30,%rax
063c4833 mov       %rax,0x20(%rsp)
063c4838 mov       0x20(%rsp),%rax
063c483d add       $0x68,%rsp
063c4841 ret

core::str::count::char_count_general_case:
063c4850 sub       $0x58,%rsp
063c4854 mov       %rcx,0x48(%rsp)
063c4859 mov       %rdx,0x50(%rsp)
063c485e call      0x0000`0000`063C`2CD0
063c4863 mov       %rax,0x38(%rsp)
063c4868 mov       %rdx,0x40(%rsp)
063c486d mov       0x40(%rsp),%rdx
063c4872 mov       0x38(%rsp),%rcx
063c4877 call      0x0000`0000`063B`8190
063c487c mov       %rax,0x28(%rsp)
063c4881 mov       %rdx,0x30(%rsp)
063c4886 mov       0x30(%rsp),%rdx
063c488b mov       0x28(%rsp),%rcx
063c4890 call      0x0000`0000`063B`7BE0
063c4895 mov       %rax,0x20(%rsp)
063c489a mov       0x20(%rsp),%rax
063c489f add       $0x58,%rsp
063c48a3 ret

core::str::count::char_count_general_case::closure$0:
063c48b0 sub       $0x48,%rsp
063c48b4 mov       %rcx,0x30(%rsp)
063c48b9 mov       %rdx,0x38(%rsp)
063c48be mov       (%rdx),%rax
063c48c1 mov       (%rax),%cl
063c48c3 mov       %cl,0x47(%rsp)
063c48c7 call      0x0000`0000`063C`5520
063c48cc mov       %al,0x2F(%rsp)
063c48d0 mov       0x2F(%rsp),%al
063c48d4 xor       $0xFF,%al
063c48d6 and       $1,%al
063c48d8 movzbl    %al,%eax
063c48db add       $0x48,%rsp
063c48df ret

core::str::iter::impl$0::next:
063c48e0 sub       $0x38,%rsp
063c48e4 mov       %rcx,0x30(%rsp)
063c48e9 call      0x0000`0000`063C`5540
063c48ee mov       %eax,0x28(%rsp)
063c48f2 mov       %edx,0x2C(%rsp)
063c48f6 mov       0x2C(%rsp),%edx
063c48fa mov       0x28(%rsp),%ecx
063c48fe call      0x0000`0000`063B`88E0
063c4903 mov       %eax,0x24(%rsp)
063c4907 mov       0x24(%rsp),%eax
063c490b add       $0x38,%rsp
063c490f ret

core::str::iter::impl$0::next::closure$0:
063c4910 sub       $0x38,%rsp
063c4914 mov       %ecx,0x34(%rsp)
063c4918 call      0x0000`0000`063B`6B60
063c491d mov       %eax,0x2C(%rsp)
063c4921 mov       0x2C(%rsp),%eax
063c4925 add       $0x38,%rsp
063c4929 ret

core::str::iter::impl$0::count:
063c4930 sub       $0x48,%rsp
063c4934 mov       %rcx,0x38(%rsp)
063c4939 mov       %rdx,0x40(%rsp)
063c493e lea       0x38(%rsp),%rcx
063c4943 call      0x0000`0000`063C`4970
063c4948 mov       %rax,0x28(%rsp)
063c494d mov       %rdx,0x30(%rsp)
063c4952 mov       0x30(%rsp),%rdx
063c4957 mov       0x28(%rsp),%rcx
063c495c call      0x0000`0000`063C`3FD0
063c4961 mov       %rax,0x20(%rsp)
063c4966 mov       0x20(%rsp),%rax
063c496b add       $0x48,%rsp
063c496f ret

core::str::iter::Chars::as_str:
063c4970 sub       $0x48,%rsp
063c4974 mov       %rcx,0x40(%rsp)
063c4979 call      0x0000`0000`063C`2160
063c497e mov       %rax,0x30(%rsp)
063c4983 mov       %rdx,0x38(%rsp)
063c4988 mov       0x38(%rsp),%rdx
063c498d mov       0x30(%rsp),%rcx
063c4992 call      0x0000`0000`063C`3F70
063c4997 mov       %rax,0x20(%rsp)
063c499c mov       %rdx,0x28(%rsp)
063c49a1 mov       0x28(%rsp),%rdx
063c49a6 mov       0x20(%rsp),%rax
063c49ab add       $0x48,%rsp
063c49af ret

core::str::iter::impl$5::next:
063c49b0 sub       $0x138,%rsp
063c49b7 mov       %rcx,0x60(%rsp)
063c49bc mov       %rcx,0xA0(%rsp)
063c49c4 mov       %rcx,%rax
063c49c7 add       $8,%rax
063c49cb mov       %rax,0x108(%rsp)
063c49d3 mov       8(%rcx),%rcx
063c49d7 mov       %rcx,0x58(%rsp)
063c49dc mov       %rcx,0x110(%rsp)
063c49e4 call      0x0000`0000`063B`5180
063c49e9 mov       0x58(%rsp),%rcx
063c49ee mov       %rax,%rdx
063c49f1 mov       0x60(%rsp),%rax
063c49f6 mov       %rdx,0x130(%rsp)
063c49fe movq      $1,0x118(%rsp)
063c4a0a mov       0x10(%rax),%rax
063c4a0e mov       %rax,0x68(%rsp)
063c4a13 call      0x0000`0000`063B`5180
063c4a18 mov       %rax,%rcx
063c4a1b mov       0x68(%rsp),%rax
063c4a20 sub       %rcx,%rax
063c4a23 mov       %rax,0x120(%rsp)
063c4a2b mov       0x120(%rsp),%rax
063c4a33 mov       %rax,0x128(%rsp)
063c4a3b mov       %rax,0x100(%rsp)
063c4a43 mov       0x100(%rsp),%rax
063c4a4b mov       %rax,0x70(%rsp)
063c4a50 mov       %rax,0xA8(%rsp)
063c4a58 mov       0x60(%rsp),%rcx
063c4a5d add       $8,%rcx
063c4a61 call      0x0000`0000`063C`48E0
063c4a66 mov       %eax,0x8C(%rsp)
063c4a6d mov       0x8C(%rsp),%eax
063c4a74 add       $0xFFEF`0000,%eax
063c4a79 setne     %al
063c4a7c movzbl    %al,%eax
063c4a7f je        0x0000`0000`063C`4A87
063c4a81 jmp       0x0000`0000`063C`4A83
063c4a83 jmp       0x0000`0000`063C`4A97
063c4a85 ud2
063c4a87 movl      $0x11`0000,0x80(%rsp)
063c4a92 jmp       0x0000`0000`063C`4BFC
063c4a97 mov       0x60(%rsp),%rax
063c4a9c mov       0x8C(%rsp),%ecx
063c4aa3 mov       %ecx,0x34(%rsp)
063c4aa7 mov       %ecx,0xB4(%rsp)
063c4aae mov       (%rax),%rcx
063c4ab1 mov       %rcx,0x38(%rsp)
063c4ab6 mov       %rcx,0xB8(%rsp)
063c4abe mov       %rax,%rcx
063c4ac1 add       $8,%rcx
063c4ac5 mov       %rcx,0xD0(%rsp)
063c4acd mov       8(%rax),%rcx
063c4ad1 mov       %rcx,0x40(%rsp)
063c4ad6 mov       %rcx,0xD8(%rsp)
063c4ade call      0x0000`0000`063B`5180
063c4ae3 mov       0x40(%rsp),%rcx
063c4ae8 mov       %rax,%rdx
063c4aeb mov       0x60(%rsp),%rax
063c4af0 mov       %rdx,0xF8(%rsp)
063c4af8 movq      $1,0xE0(%rsp)
063c4b04 mov       0x10(%rax),%rax
063c4b08 mov       %rax,0x48(%rsp)
063c4b0d call      0x0000`0000`063B`5180
063c4b12 mov       %rax,%rcx
063c4b15 mov       0x48(%rsp),%rax
063c4b1a sub       %rcx,%rax
063c4b1d mov       %rax,0xE8(%rsp)
063c4b25 mov       0xE8(%rsp),%rax
063c4b2d mov       %rax,0xF0(%rsp)
063c4b35 mov       %rax,0xC8(%rsp)
063c4b3d mov       0xC8(%rsp),%rax
063c4b45 mov       %rax,0x50(%rsp)
063c4b4a mov       %rax,0xC0(%rsp)
063c4b52 mov       0x50(%rsp),%rcx
063c4b57 mov       0x70(%rsp),%rax
063c4b5c sub       %rcx,%rax
063c4b5f mov       %rax,0x28(%rsp)
063c4b64 setb      %al
063c4b67 test      $1,%al
063c4b69 jne       0x0000`0000`063C`4B86
063c4b6b mov       0x60(%rsp),%rcx
063c4b70 mov       0x28(%rsp),%rax
063c4b75 add       (%rcx),%rax
063c4b78 mov       %rax,0x20(%rsp)
063c4b7d setb      %al
063c4b80 test      $1,%al
063c4b82 jne       0x0000`0000`063C`4BE2
063c4b84 jmp       0x0000`0000`063C`4BA0
063c4b86 lea       0x63C`E1F0,%rcx
063c4b8d lea       0x63D`04C8,%r8
063c4b94 mov       $0x21,%edx
063c4b99 call      0x0000`0000`063B`8E30
063c4b9e ud2
063c4ba0 mov       0x34(%rsp),%eax
063c4ba4 mov       0x38(%rsp),%rcx
063c4ba9 mov       0x60(%rsp),%rdx
063c4bae mov       0x20(%rsp),%r8
063c4bb3 mov       %r8,(%rdx)
063c4bb6 mov       %rcx,0x90(%rsp)
063c4bbe mov       %eax,0x98(%rsp)
063c4bc5 mov       0x90(%rsp),%rcx
063c4bcd mov       0x98(%rsp),%eax
063c4bd4 mov       %rcx,0x78(%rsp)
063c4bd9 mov       %eax,0x80(%rsp)
063c4be0 jmp       0x0000`0000`063C`4BFC
063c4be2 lea       0x63C`E220,%rcx
063c4be9 lea       0x63D`04E0,%r8
063c4bf0 mov       $0x1C,%edx
063c4bf5 call      0x0000`0000`063B`8E30
063c4bfa ud2
063c4bfc mov       0x78(%rsp),%rax
063c4c01 mov       0x80(%rsp),%edx
063c4c08 add       $0x138,%rsp
063c4c0f ret

core::str::traits::impl$4::index<core::ops::range::RangeFrom<usize> >:
063c4c10 sub       $0x58,%rsp
063c4c14 mov       %r8,0x28(%rsp)
063c4c19 mov       %rdx,%r8
063c4c1c mov       %rcx,%rdx
063c4c1f mov       0x28(%rsp),%rcx
063c4c24 mov       %rdx,0x40(%rsp)
063c4c29 mov       %r8,0x48(%rsp)
063c4c2e mov       %rcx,0x50(%rsp)
063c4c33 call      0x0000`0000`063C`5390
063c4c38 mov       %rax,0x30(%rsp)
063c4c3d mov       %rdx,0x38(%rsp)
063c4c42 mov       0x38(%rsp),%rdx
063c4c47 mov       0x30(%rsp),%rax
063c4c4c add       $0x58,%rsp
063c4c50 ret

core::str::traits::impl$4::index<core::ops::range::Range<usize> >:
063c4c60 sub       $0x68,%rsp
063c4c64 mov       %r9,0x28(%rsp)
063c4c69 mov       %r8,0x30(%rsp)
063c4c6e mov       %rdx,%r9
063c4c71 mov       0x28(%rsp),%rdx
063c4c76 mov       %rcx,%r8
063c4c79 mov       0x30(%rsp),%rcx
063c4c7e mov       0x90(%rsp),%rax
063c4c86 mov       %r8,0x48(%rsp)
063c4c8b mov       %r9,0x50(%rsp)
063c4c90 mov       %rcx,0x58(%rsp)
063c4c95 mov       %rdx,0x60(%rsp)
063c4c9a mov       %rax,0x20(%rsp)
063c4c9f call      0x0000`0000`063C`4F30
063c4ca4 mov       %rax,0x38(%rsp)
063c4ca9 mov       %rdx,0x40(%rsp)
063c4cae mov       0x40(%rsp),%rdx
063c4cb3 mov       0x38(%rsp),%rax
063c4cb8 add       $0x68,%rsp
063c4cbc ret

core::str::traits::impl$4::index<core::ops::range::RangeTo<usize> >:
063c4cc0 sub       $0x58,%rsp
063c4cc4 mov       %r8,0x28(%rsp)
063c4cc9 mov       %rdx,%r8
063c4ccc mov       %rcx,%rdx
063c4ccf mov       0x28(%rsp),%rcx
063c4cd4 mov       %rdx,0x40(%rsp)
063c4cd9 mov       %r8,0x48(%rsp)
063c4cde mov       %rcx,0x50(%rsp)
063c4ce3 call      0x0000`0000`063C`5130
063c4ce8 mov       %rax,0x30(%rsp)
063c4ced mov       %rdx,0x38(%rsp)
063c4cf2 mov       0x38(%rsp),%rdx
063c4cf7 mov       0x30(%rsp),%rax
063c4cfc add       $0x58,%rsp
063c4d00 ret

core::str::traits::impl$7::get:
063c4d10 sub       $0x98,%rsp
063c4d17 mov       %r9,0x40(%rsp)
063c4d1c mov       %r8,0x48(%rsp)
063c4d21 mov       %rdx,0x50(%rsp)
063c4d26 mov       %rcx,0x58(%rsp)
063c4d2b mov       %rcx,0x78(%rsp)
063c4d30 mov       %rdx,0x80(%rsp)
063c4d38 mov       %r8,0x88(%rsp)
063c4d40 mov       %r9,0x90(%rsp)
063c4d48 cmp       %rdx,%rcx
063c4d4b jbe       0x0000`0000`063C`4D54
063c4d4d movb      $0,0x77(%rsp)
063c4d52 jmp       0x0000`0000`063C`4D76
063c4d54 mov       0x58(%rsp),%r8
063c4d59 mov       0x40(%rsp),%rdx
063c4d5e mov       0x48(%rsp),%rcx
063c4d63 call      0x0000`0000`063C`64E0
063c4d68 mov       %al,0x3F(%rsp)
063c4d6c mov       0x3F(%rsp),%al
063c4d70 and       $1,%al
063c4d72 mov       %al,0x77(%rsp)
063c4d76 testb     $1,0x77(%rsp)
063c4d7b jne       0x0000`0000`063C`4D84
063c4d7d movb      $0,0x76(%rsp)
063c4d82 jmp       0x0000`0000`063C`4DA6
063c4d84 mov       0x50(%rsp),%r8
063c4d89 mov       0x40(%rsp),%rdx
063c4d8e mov       0x48(%rsp),%rcx
063c4d93 call      0x0000`0000`063C`64E0
063c4d98 mov       %al,0x3E(%rsp)
063c4d9c mov       0x3E(%rsp),%al
063c4da0 and       $1,%al
063c4da2 mov       %al,0x76(%rsp)
063c4da6 testb     $1,0x76(%rsp)
063c4dab jne       0x0000`0000`063C`4DB8
063c4dad movq      $0,0x60(%rsp)
063c4db6 jmp       0x0000`0000`063C`4DEF
063c4db8 mov       0x40(%rsp),%r9
063c4dbd mov       0x48(%rsp),%r8
063c4dc2 mov       0x50(%rsp),%rdx
063c4dc7 mov       0x58(%rsp),%rcx
063c4dcc call      0x0000`0000`063C`4E10
063c4dd1 mov       %rax,0x28(%rsp)
063c4dd6 mov       %rdx,0x30(%rsp)
063c4ddb mov       0x30(%rsp),%rax
063c4de0 mov       0x28(%rsp),%rcx
063c4de5 mov       %rcx,0x60(%rsp)
063c4dea mov       %rax,0x68(%rsp)
063c4def mov       0x60(%rsp),%rax
063c4df4 mov       0x68(%rsp),%rdx
063c4df9 add       $0x98,%rsp
063c4e00 ret

core::str::traits::impl$7::get_unchecked:
063c4e10 sub       $0xD8,%rsp
063c4e17 mov       %r9,0x48(%rsp)
063c4e1c mov       %r8,0x58(%rsp)
063c4e21 mov       %rdx,%rax
063c4e24 mov       0x48(%rsp),%rdx
063c4e29 mov       %rax,0x50(%rsp)
063c4e2e mov       %rcx,%r8
063c4e31 mov       0x58(%rsp),%rcx
063c4e36 mov       %r8,0x60(%rsp)
063c4e3b mov       %r8,0x70(%rsp)
063c4e40 mov       %rax,0x78(%rsp)
063c4e45 mov       %rcx,0x80(%rsp)
063c4e4d mov       %rdx,0x88(%rsp)
063c4e55 mov       %rcx,0x90(%rsp)
063c4e5d mov       %rdx,0x98(%rsp)
063c4e65 call      0x0000`0000`063B`55D0
063c4e6a mov       %rax,0x68(%rsp)
063c4e6f mov       0x60(%rsp),%rcx
063c4e74 mov       0x68(%rsp),%rax
063c4e79 mov       %rax,0xB0(%rsp)
063c4e81 mov       %rcx,0xB8(%rsp)
063c4e89 mov       %rax,0xC0(%rsp)
063c4e91 mov       %rcx,0xC8(%rsp)
063c4e99 add       %rcx,%rax
063c4e9c mov       %rax,0xD0(%rsp)
063c4ea4 mov       0xD0(%rsp),%rax
063c4eac mov       %rax,0x40(%rsp)
063c4eb1 mov       %rax,0xA0(%rsp)
063c4eb9 mov       0x60(%rsp),%rcx
063c4ebe mov       0x50(%rsp),%rax
063c4ec3 sub       %rcx,%rax
063c4ec6 mov       %rax,0x38(%rsp)
063c4ecb setb      %al
063c4ece test      $1,%al
063c4ed0 jne       0x0000`0000`063C`4EF5
063c4ed2 mov       0x38(%rsp),%rdx
063c4ed7 mov       0x40(%rsp),%rcx
063c4edc mov       %rdx,0xA8(%rsp)
063c4ee4 call      0x0000`0000`063B`57E0
063c4ee9 mov       %rax,0x28(%rsp)
063c4eee mov       %rdx,0x30(%rsp)
063c4ef3 jmp       0x0000`0000`063C`4F0F
063c4ef5 lea       0x63C`E1F0,%rcx
063c4efc lea       0x63D`0578,%r8
063c4f03 mov       $0x21,%edx
063c4f08 call      0x0000`0000`063B`8E30
063c4f0d ud2
063c4f0f mov       0x30(%rsp),%rdx
063c4f14 mov       0x28(%rsp),%rax
063c4f19 add       $0xD8,%rsp
063c4f20 ret

core::str::traits::impl$7::index:
063c4f30 sub       $0xB8,%rsp
063c4f37 mov       %r9,0x30(%rsp)
063c4f3c mov       %r8,0x38(%rsp)
063c4f41 mov       0xE0(%rsp),%rax
063c4f49 mov       %rax,0x40(%rsp)
063c4f4e mov       %rcx,0x78(%rsp)
063c4f53 mov       %rdx,0x80(%rsp)
063c4f5b mov       %r8,0x88(%rsp)
063c4f63 mov       %r9,0x90(%rsp)
063c4f6b mov       %rcx,0x58(%rsp)
063c4f70 mov       %rdx,0x60(%rsp)
063c4f75 mov       0x58(%rsp),%rax
063c4f7a mov       %rax,0x48(%rsp)
063c4f7f mov       %rax,0x98(%rsp)
063c4f87 mov       0x60(%rsp),%rax
063c4f8c mov       %rax,0x50(%rsp)
063c4f91 mov       %rax,0xA0(%rsp)
063c4f99 call      0x0000`0000`063C`4D10
063c4f9e mov       %rdx,0x70(%rsp)
063c4fa3 mov       %rax,0x68(%rsp)
063c4fa8 mov       0x68(%rsp),%rax
063c4fad test      %rax,%rax
063c4fb0 setne     %al
063c4fb3 movzbl    %al,%eax
063c4fb6 je        0x0000`0000`063C`4FBE
063c4fb8 jmp       0x0000`0000`063C`4FBA
063c4fba jmp       0x0000`0000`063C`4FE5
063c4fbc ud2
063c4fbe mov       0x50(%rsp),%r9
063c4fc3 mov       0x48(%rsp),%r8
063c4fc8 mov       0x30(%rsp),%rdx
063c4fcd mov       0x38(%rsp),%rcx
063c4fd2 mov       0x40(%rsp),%r10
063c4fd7 mov       %rsp,%rax
063c4fda mov       %r10,0x20(%rax)
063c4fde call      0x0000`0000`063C`5D10
063c4fe3 ud2
063c4fe5 mov       0x68(%rsp),%rax
063c4fea mov       0x70(%rsp),%rdx
063c4fef mov       %rax,0xA8(%rsp)
063c4ff7 mov       %rdx,0xB0(%rsp)
063c4fff add       $0xB8,%rsp
063c5006 ret

core::str::traits::impl$8::get:
063c5010 sub       $0x78,%rsp
063c5014 mov       %r8,0x30(%rsp)
063c5019 mov       %rdx,%rax
063c501c mov       0x30(%rsp),%rdx
063c5021 mov       %rax,0x38(%rsp)
063c5026 mov       %rcx,%r8
063c5029 mov       0x38(%rsp),%rcx
063c502e mov       %r8,0x40(%rsp)
063c5033 mov       %r8,0x60(%rsp)
063c5038 mov       %rcx,0x68(%rsp)
063c503d mov       %rdx,0x70(%rsp)
063c5042 call      0x0000`0000`063C`64E0
063c5047 mov       %al,0x4F(%rsp)
063c504b mov       0x4F(%rsp),%al
063c504f test      $1,%al
063c5051 jne       0x0000`0000`063C`5060
063c5053 jmp       0x0000`0000`063C`5055
063c5055 movq      $0,0x50(%rsp)
063c505e jmp       0x0000`0000`063C`5092
063c5060 mov       0x30(%rsp),%r8
063c5065 mov       0x38(%rsp),%rdx
063c506a mov       0x40(%rsp),%rcx
063c506f call      0x0000`0000`063C`50B0
063c5074 mov       %rax,0x20(%rsp)
063c5079 mov       %rdx,0x28(%rsp)
063c507e mov       0x28(%rsp),%rax
063c5083 mov       0x20(%rsp),%rcx
063c5088 mov       %rcx,0x50(%rsp)
063c508d mov       %rax,0x58(%rsp)
063c5092 mov       0x50(%rsp),%rax
063c5097 mov       0x58(%rsp),%rdx
063c509c add       $0x78,%rsp
063c50a0 ret

core::str::traits::impl$8::get_unchecked:
063c50b0 sub       $0x88,%rsp
063c50b7 mov       %r8,0x38(%rsp)
063c50bc mov       %rdx,%rax
063c50bf mov       0x38(%rsp),%rdx
063c50c4 mov       %rax,0x40(%rsp)
063c50c9 mov       %rcx,%rax
063c50cc mov       0x40(%rsp),%rcx
063c50d1 mov       %rax,0x48(%rsp)
063c50d6 mov       %rax,0x58(%rsp)
063c50db mov       %rcx,0x60(%rsp)
063c50e0 mov       %rdx,0x68(%rsp)
063c50e5 mov       %rcx,0x70(%rsp)
063c50ea mov       %rdx,0x78(%rsp)
063c50ef call      0x0000`0000`063B`55D0
063c50f4 mov       %rax,0x50(%rsp)
063c50f9 mov       %rax,0x80(%rsp)
063c5101 mov       0x48(%rsp),%rdx
063c5106 mov       0x50(%rsp),%rcx
063c510b call      0x0000`0000`063B`57E0
063c5110 mov       %rax,0x28(%rsp)
063c5115 mov       %rdx,0x30(%rsp)
063c511a mov       0x30(%rsp),%rdx
063c511f mov       0x28(%rsp),%rax
063c5124 add       $0x88,%rsp
063c512b ret

core::str::traits::impl$8::index:
063c5130 sub       $0x88,%rsp
063c5137 mov       %r9,0x28(%rsp)
063c513c mov       %r8,0x30(%rsp)
063c5141 mov       %rdx,0x38(%rsp)
063c5146 mov       %rcx,0x40(%rsp)
063c514b mov       %rcx,0x58(%rsp)
063c5150 mov       %rdx,0x60(%rsp)
063c5155 mov       %r8,0x68(%rsp)
063c515a mov       %rcx,0x70(%rsp)
063c515f call      0x0000`0000`063C`5010
063c5164 mov       %rdx,0x50(%rsp)
063c5169 mov       %rax,0x48(%rsp)
063c516e mov       0x48(%rsp),%rax
063c5173 test      %rax,%rax
063c5176 setne     %al
063c5179 movzbl    %al,%eax
063c517c je        0x0000`0000`063C`5184
063c517e jmp       0x0000`0000`063C`5180
063c5180 jmp       0x0000`0000`063C`51AB
063c5182 ud2
063c5184 mov       0x40(%rsp),%r9
063c5189 mov       0x30(%rsp),%rdx
063c518e mov       0x38(%rsp),%rcx
063c5193 mov       0x28(%rsp),%r8
063c5198 mov       %rsp,%rax
063c519b mov       %r8,0x20(%rax)
063c519f xor       %eax,%eax
063c51a1 mov       %eax,%r8d
063c51a4 call      0x0000`0000`063C`5D10
063c51a9 ud2
063c51ab mov       0x48(%rsp),%rax
063c51b0 mov       0x50(%rsp),%rdx
063c51b5 mov       %rax,0x78(%rsp)
063c51ba mov       %rdx,0x80(%rsp)
063c51c2 add       $0x88,%rsp
063c51c9 ret

core::str::traits::impl$9::get:
063c51d0 sub       $0x78,%rsp
063c51d4 mov       %r8,0x30(%rsp)
063c51d9 mov       %rdx,%rax
063c51dc mov       0x30(%rsp),%rdx
063c51e1 mov       %rax,0x38(%rsp)
063c51e6 mov       %rcx,%r8
063c51e9 mov       0x38(%rsp),%rcx
063c51ee mov       %r8,0x40(%rsp)
063c51f3 mov       %r8,0x60(%rsp)
063c51f8 mov       %rcx,0x68(%rsp)
063c51fd mov       %rdx,0x70(%rsp)
063c5202 call      0x0000`0000`063C`64E0
063c5207 mov       %al,0x4F(%rsp)
063c520b mov       0x4F(%rsp),%al
063c520f test      $1,%al
063c5211 jne       0x0000`0000`063C`5220
063c5213 jmp       0x0000`0000`063C`5215
063c5215 movq      $0,0x50(%rsp)
063c521e jmp       0x0000`0000`063C`5252
063c5220 mov       0x30(%rsp),%r8
063c5225 mov       0x38(%rsp),%rdx
063c522a mov       0x40(%rsp),%rcx
063c522f call      0x0000`0000`063C`5270
063c5234 mov       %rax,0x20(%rsp)
063c5239 mov       %rdx,0x28(%rsp)
063c523e mov       0x28(%rsp),%rax
063c5243 mov       0x20(%rsp),%rcx
063c5248 mov       %rcx,0x50(%rsp)
063c524d mov       %rax,0x58(%rsp)
063c5252 mov       0x50(%rsp),%rax
063c5257 mov       0x58(%rsp),%rdx
063c525c add       $0x78,%rsp
063c5260 ret

core::str::traits::impl$9::get_unchecked:
063c5270 sub       $0xC8,%rsp
063c5277 mov       %r8,0x48(%rsp)
063c527c mov       %rdx,%rax
063c527f mov       0x48(%rsp),%rdx
063c5284 mov       %rax,0x50(%rsp)
063c5289 mov       %rcx,%rax
063c528c mov       0x50(%rsp),%rcx
063c5291 mov       %rax,0x58(%rsp)
063c5296 mov       %rax,0x68(%rsp)
063c529b mov       %rcx,0x70(%rsp)
063c52a0 mov       %rdx,0x78(%rsp)
063c52a5 mov       %rcx,0x80(%rsp)
063c52ad mov       %rdx,0x88(%rsp)
063c52b5 call      0x0000`0000`063B`55D0
063c52ba mov       %rax,0x60(%rsp)
063c52bf mov       0x58(%rsp),%rcx
063c52c4 mov       0x60(%rsp),%rax
063c52c9 mov       %rax,0xA0(%rsp)
063c52d1 mov       %rcx,0xA8(%rsp)
063c52d9 mov       %rax,0xB0(%rsp)
063c52e1 mov       %rcx,0xB8(%rsp)
063c52e9 add       %rcx,%rax
063c52ec mov       %rax,0xC0(%rsp)
063c52f4 mov       0xC0(%rsp),%rax
063c52fc mov       %rax,0x40(%rsp)
063c5301 mov       %rax,0x90(%rsp)
063c5309 mov       0x48(%rsp),%rdx
063c530e mov       0x50(%rsp),%rcx
063c5313 call      0x0000`0000`063B`54F0
063c5318 mov       %rax,0x38(%rsp)
063c531d mov       0x58(%rsp),%rcx
063c5322 mov       0x38(%rsp),%rax
063c5327 sub       %rcx,%rax
063c532a mov       %rax,0x30(%rsp)
063c532f setb      %al
063c5332 test      $1,%al
063c5334 jne       0x0000`0000`063C`5359
063c5336 mov       0x30(%rsp),%rdx
063c533b mov       0x40(%rsp),%rcx
063c5340 mov       %rdx,0x98(%rsp)
063c5348 call      0x0000`0000`063B`57E0
063c534d mov       %rax,0x20(%rsp)
063c5352 mov       %rdx,0x28(%rsp)
063c5357 jmp       0x0000`0000`063C`5373
063c5359 lea       0x63C`E1F0,%rcx
063c5360 lea       0x63D`0590,%r8
063c5367 mov       $0x21,%edx
063c536c call      0x0000`0000`063B`8E30
063c5371 ud2
063c5373 mov       0x28(%rsp),%rdx
063c5378 mov       0x20(%rsp),%rax
063c537d add       $0xC8,%rsp
063c5384 ret

core::str::traits::impl$9::index:
063c5390 sub       $0xB8,%rsp
063c5397 mov       %r9,0x38(%rsp)
063c539c mov       %r8,0x40(%rsp)
063c53a1 mov       %rdx,%rax
063c53a4 mov       0x40(%rsp),%rdx
063c53a9 mov       %rax,0x48(%rsp)
063c53ae mov       %rcx,%rax
063c53b1 mov       0x48(%rsp),%rcx
063c53b6 mov       %rax,0x50(%rsp)
063c53bb mov       %rax,0x80(%rsp)
063c53c3 mov       %rcx,0x88(%rsp)
063c53cb mov       %rdx,0x90(%rsp)
063c53d3 call      0x0000`0000`063C`6470
063c53d8 mov       %rax,0x58(%rsp)
063c53dd mov       0x40(%rsp),%r8
063c53e2 mov       0x48(%rsp),%rdx
063c53e7 mov       0x50(%rsp),%rcx
063c53ec mov       0x58(%rsp),%rax
063c53f1 mov       %rcx,0x60(%rsp)
063c53f6 mov       %rax,0x68(%rsp)
063c53fb mov       0x60(%rsp),%rax
063c5400 mov       %rax,0x28(%rsp)
063c5405 mov       %rax,0x98(%rsp)
063c540d mov       0x68(%rsp),%rax
063c5412 mov       %rax,0x30(%rsp)
063c5417 mov       %rax,0xA0(%rsp)
063c541f call      0x0000`0000`063C`51D0
063c5424 mov       %rdx,0x78(%rsp)
063c5429 mov       %rax,0x70(%rsp)
063c542e mov       0x70(%rsp),%rax
063c5433 test      %rax,%rax
063c5436 setne     %al
063c5439 movzbl    %al,%eax
063c543c je        0x0000`0000`063C`5444
063c543e jmp       0x0000`0000`063C`5440
063c5440 jmp       0x0000`0000`063C`546B
063c5442 ud2
063c5444 mov       0x30(%rsp),%r9
063c5449 mov       0x28(%rsp),%r8
063c544e mov       0x40(%rsp),%rdx
063c5453 mov       0x48(%rsp),%rcx
063c5458 mov       0x38(%rsp),%r10
063c545d mov       %rsp,%rax
063c5460 mov       %r10,0x20(%rax)
063c5464 call      0x0000`0000`063C`5D10
063c5469 ud2
063c546b mov       0x70(%rsp),%rax
063c5470 mov       0x78(%rsp),%rdx
063c5475 mov       %rax,0xA8(%rsp)
063c547d mov       %rdx,0xB0(%rsp)
063c5485 add       $0xB8,%rsp
063c548c ret

core::str::validations::utf8_first_byte:
063c5490 sub       $0x28,%rsp
063c5494 mov       %cl,0x21(%rsp)
063c5498 mov       %cl,0x23(%rsp)
063c549c mov       %edx,0x24(%rsp)
063c54a0 mov       %edx,%eax
063c54a2 and       $0xFFFF`FFF8,%eax
063c54a5 cmp       $0,%eax
063c54a8 setne     %al
063c54ab mov       %dl,%cl
063c54ad and       $7,%cl
063c54b0 mov       $0x7F,%dl
063c54b2 shr       %cl,%dl
063c54b4 mov       %dl,0x22(%rsp)
063c54b8 test      $1,%al
063c54ba jne       0x0000`0000`063C`54CE
063c54bc mov       0x22(%rsp),%cl
063c54c0 mov       0x21(%rsp),%al
063c54c4 and       %cl,%al
063c54c6 movzbl    %al,%eax
063c54c9 add       $0x28,%rsp
063c54cd ret
063c54ce lea       0x63C`E2A0,%rcx
063c54d5 lea       0x63D`0628,%r8
063c54dc mov       $0x24,%edx
063c54e1 call      0x0000`0000`063B`8E30
063c54e6 ud2

core::str::validations::utf8_acc_cont_byte:
063c54f0 sub       $0x10,%rsp
063c54f4 mov       %dl,3(%rsp)
063c54f8 mov       %ecx,8(%rsp)
063c54fc mov       %dl,0xF(%rsp)
063c5500 shl       $6,%ecx
063c5503 mov       %ecx,4(%rsp)
063c5507 mov       4(%rsp),%eax
063c550b mov       3(%rsp),%cl
063c550f and       $0x3F,%cl
063c5512 movzbl    %cl,%ecx
063c5515 or        %ecx,%eax
063c5517 add       $0x10,%rsp
063c551b ret

core::str::validations::utf8_is_cont_byte:
063c5520 push      %rax
063c5521 mov       %cl,7(%rsp)
063c5525 cmp       $0xC0,%cl
063c5528 setl      %al
063c552b and       $1,%al
063c552d movzbl    %al,%eax
063c5530 pop       %rcx
063c5531 ret

core::str::validations::next_code_point<core::slice::iter::Iter<u8> >:
063c5540 sub       $0xD8,%rsp
063c5547 mov       %rcx,0x80(%rsp)
063c554f mov       %rcx,0xA8(%rsp)
063c5557 call      0x0000`0000`063C`8BD0
063c555c mov       %rax,0x88(%rsp)
063c5564 mov       0x88(%rsp),%rcx
063c556c call      0x0000`0000`063B`8C50
063c5571 mov       %rax,0x98(%rsp)
063c5579 mov       0x98(%rsp),%rax
063c5581 test      %rax,%rax
063c5584 sete      %al
063c5587 movzbl    %al,%eax
063c558a jne       0x0000`0000`063C`5592
063c558c jmp       0x0000`0000`063C`558E
063c558e jmp       0x0000`0000`063C`55B5
063c5590 ud2
063c5592 mov       0x98(%rsp),%rax
063c559a mov       %rax,0xB8(%rsp)
063c55a2 mov       (%rax),%al
063c55a4 mov       %al,0x7F(%rsp)
063c55a8 mov       %al,0xC7(%rsp)
063c55af cmp       $0x80,%al
063c55b1 jb        0x0000`0000`063C`55F9
063c55b3 jmp       0x0000`0000`063C`55DE
063c55b5 call      0x0000`0000`063B`8D40
063c55ba mov       %edx,0x94(%rsp)
063c55c1 mov       %eax,0x90(%rsp)
063c55c8 mov       0x90(%rsp),%eax
063c55cf mov       0x94(%rsp),%edx
063c55d6 add       $0xD8,%rsp
063c55dd ret
063c55de mov       0x7F(%rsp),%cl
063c55e2 mov       $2,%edx
063c55e7 call      0x0000`0000`063C`5490
063c55ec mov       %eax,0x78(%rsp)
063c55f0 mov       %eax,0xC8(%rsp)
063c55f7 jmp       0x0000`0000`063C`5614
063c55f9 mov       0x7F(%rsp),%al
063c55fd movzbl    %al,%eax
063c5600 mov       %eax,0x94(%rsp)
063c5607 movl      $1,0x90(%rsp)
063c5612 jmp       0x0000`0000`063C`55C8
063c5614 mov       0x80(%rsp),%rcx
063c561c call      0x0000`0000`063C`8BD0
063c5621 mov       %rax,0x70(%rsp)
063c5626 mov       0x70(%rsp),%rcx
063c562b lea       0x63D`0640,%rdx
063c5632 call      0x0000`0000`063B`86D0
063c5637 mov       %rax,0x68(%rsp)
063c563c mov       0x78(%rsp),%ecx
063c5640 mov       0x68(%rsp),%rax
063c5645 mov       (%rax),%dl
063c5647 mov       %dl,0x67(%rsp)
063c564b mov       %dl,0xCE(%rsp)
063c5652 call      0x0000`0000`063C`54F0
063c5657 mov       %eax,0xA4(%rsp)
063c565e mov       0x7F(%rsp),%al
063c5662 cmp       $0xE0,%al
063c5664 jae       0x0000`0000`063C`5684
063c5666 mov       0xA4(%rsp),%eax
063c566d mov       %eax,0x94(%rsp)
063c5674 movl      $1,0x90(%rsp)
063c567f jmp       0x0000`0000`063C`55C8
063c5684 mov       0x80(%rsp),%rcx
063c568c call      0x0000`0000`063C`8BD0
063c5691 mov       %rax,0x58(%rsp)
063c5696 mov       0x58(%rsp),%rcx
063c569b lea       0x63D`0658,%rdx
063c56a2 call      0x0000`0000`063B`86D0
063c56a7 mov       %rax,0x50(%rsp)
063c56ac mov       0x67(%rsp),%al
063c56b0 mov       0x50(%rsp),%rcx
063c56b5 mov       (%rcx),%dl
063c56b7 mov       %dl,0xCF(%rsp)
063c56be and       $0x3F,%al
063c56c0 movzbl    %al,%ecx
063c56c3 call      0x0000`0000`063C`54F0
063c56c8 mov       %eax,0x4C(%rsp)
063c56cc mov       %eax,0xD0(%rsp)
063c56d3 mov       0x78(%rsp),%eax
063c56d7 shl       $0xC,%eax
063c56da mov       %eax,0x48(%rsp)
063c56de mov       0x7F(%rsp),%al
063c56e2 mov       0x4C(%rsp),%edx
063c56e6 mov       0x48(%rsp),%ecx
063c56ea or        %edx,%ecx
063c56ec mov       %ecx,0xA4(%rsp)
063c56f3 cmp       $0xF0,%al
063c56f5 jb        0x0000`0000`063C`5666
063c56fb mov       0x80(%rsp),%rcx
063c5703 call      0x0000`0000`063C`8BD0
063c5708 mov       %rax,0x40(%rsp)
063c570d mov       0x40(%rsp),%rcx
063c5712 lea       0x63D`0670,%rdx
063c5719 call      0x0000`0000`063B`86D0
063c571e mov       %rax,0x38(%rsp)
063c5723 mov       0x78(%rsp),%eax
063c5727 mov       0x38(%rsp),%rcx
063c572c mov       (%rcx),%cl
063c572e mov       %cl,0x33(%rsp)
063c5732 mov       %cl,0xD7(%rsp)
063c5739 and       $7,%eax
063c573c shl       $0x12,%eax
063c573f mov       %eax,0x34(%rsp)
063c5743 mov       0x33(%rsp),%dl
063c5747 mov       0x4C(%rsp),%ecx
063c574b call      0x0000`0000`063C`54F0
063c5750 mov       %eax,0x2C(%rsp)
063c5754 mov       0x2C(%rsp),%ecx
063c5758 mov       0x34(%rsp),%eax
063c575c or        %ecx,%eax
063c575e mov       %eax,0xA4(%rsp)
063c5765 jmp       0x0000`0000`063C`5666

core::str::pattern::impl$0::next_match:
063c5770 sub       $0x1D8,%rsp
063c5777 mov       %rdx,0xA8(%rsp)
063c577f mov       %rcx,0xB0(%rsp)
063c5787 mov       %rcx,0xB8(%rsp)
063c578f mov       %rdx,0x150(%rsp)
063c5797 mov       0xA8(%rsp),%rax
063c579f mov       (%rax),%rcx
063c57a2 mov       8(%rax),%rax
063c57a6 mov       %rcx,0x1B8(%rsp)
063c57ae mov       %rax,0x1C0(%rsp)
063c57b6 mov       %rcx,0x1C8(%rsp)
063c57be mov       %rax,0x1D0(%rsp)
063c57c6 mov       0x1C8(%rsp),%rax
063c57ce mov       %rax,0x98(%rsp)
063c57d6 mov       0x1D0(%rsp),%rax
063c57de mov       %rax,0xA0(%rsp)
063c57e6 mov       0xA0(%rsp),%rdx
063c57ee mov       0x98(%rsp),%rcx
063c57f6 mov       0xA8(%rsp),%rax
063c57fe mov       0x10(%rax),%r8
063c5802 mov       0x18(%rax),%rax
063c5806 mov       %r8,0xD0(%rsp)
063c580e mov       %rax,0xD8(%rsp)
063c5816 mov       0xD0(%rsp),%r8
063c581e mov       0xD8(%rsp),%r9
063c5826 call      0x0000`0000`063C`2910
063c582b mov       %rax,0x88(%rsp)
063c5833 mov       %rdx,0x90(%rsp)
063c583b mov       0x90(%rsp),%rdx
063c5843 mov       0x88(%rsp),%rcx
063c584b call      0x0000`0000`063B`8BF0
063c5850 mov       %rdx,0xC8(%rsp)
063c5858 mov       %rax,0xC0(%rsp)
063c5860 mov       0xC0(%rsp),%rax
063c5868 test      %rax,%rax
063c586b sete      %al
063c586e movzbl    %al,%eax
063c5871 jne       0x0000`0000`063C`5879
063c5873 jmp       0x0000`0000`063C`5875
063c5875 jmp       0x0000`0000`063C`58E0
063c5877 ud2
063c5879 mov       0xA8(%rsp),%rax
063c5881 mov       0xC0(%rsp),%rdx
063c5889 mov       %rdx,0x68(%rsp)
063c588e mov       0xC8(%rsp),%rcx
063c5896 mov       %rcx,0x70(%rsp)
063c589b mov       %rdx,0x160(%rsp)
063c58a3 mov       %rcx,0x168(%rsp)
063c58ab mov       %rdx,0x170(%rsp)
063c58b3 mov       %rcx,0x178(%rsp)
063c58bb mov       %rax,%rcx
063c58be add       $0x2C,%rcx
063c58c2 mov       %rcx,0x78(%rsp)
063c58c7 mov       0x20(%rax),%rax
063c58cb sub       $1,%rax
063c58cf mov       %rax,0x80(%rsp)
063c58d7 setb      %al
063c58da test      $1,%al
063c58dc jne       0x0000`0000`063C`591B
063c58de jmp       0x0000`0000`063C`58FD
063c58e0 mov       0xB0(%rsp),%rcx
063c58e8 call      0x0000`0000`063B`8CD0
063c58ed mov       0xB8(%rsp),%rax
063c58f5 add       $0x1D8,%rsp
063c58fc ret
063c58fd mov       0x80(%rsp),%r8
063c5905 mov       0x78(%rsp),%rcx
063c590a mov       $4,%edx
063c590f call      0x0000`0000`063C`2AC0
063c5914 mov       %rax,0x60(%rsp)
063c5919 jmp       0x0000`0000`063C`5935
063c591b lea       0x63C`E1F0,%rcx
063c5922 lea       0x63D`0708,%r8
063c5929 mov       $0x21,%edx
063c592e call      0x0000`0000`063B`8E30
063c5933 ud2
063c5935 mov       0x70(%rsp),%r8
063c593a mov       0x68(%rsp),%rdx
063c593f mov       0x60(%rsp),%rax
063c5944 mov       (%rax),%cl
063c5946 mov       %cl,0x187(%rsp)
063c594d call      0x0000`0000`063C`0060
063c5952 mov       %rdx,0xE8(%rsp)
063c595a mov       %rax,0xE0(%rsp)
063c5962 cmpq      $1,0xE0(%rsp)
063c596b jne       0x0000`0000`063C`598F
063c596d mov       0xE8(%rsp),%rax
063c5975 mov       %rax,0x188(%rsp)
063c597d add       $1,%rax
063c5981 mov       %rax,0x58(%rsp)
063c5986 setb      %al
063c5989 test      $1,%al
063c598b jne       0x0000`0000`063C`59D2
063c598d jmp       0x0000`0000`063C`59B3
063c598f mov       0xB0(%rsp),%rax
063c5997 mov       0xA8(%rsp),%rcx
063c599f mov       0x18(%rcx),%rdx
063c59a3 mov       %rdx,0x10(%rcx)
063c59a7 movq      $0,(%rax)
063c59ae jmp       0x0000`0000`063C`58ED
063c59b3 mov       0xA8(%rsp),%rcx
063c59bb mov       0x58(%rsp),%rax
063c59c0 add       0x10(%rcx),%rax
063c59c4 mov       %rax,0x50(%rsp)
063c59c9 setb      %al
063c59cc test      $1,%al
063c59ce jne       0x0000`0000`063C`5A0C
063c59d0 jmp       0x0000`0000`063C`59EC
063c59d2 lea       0x63C`E220,%rcx
063c59d9 lea       0x63D`0720,%r8
063c59e0 mov       $0x1C,%edx
063c59e5 call      0x0000`0000`063B`8E30
063c59ea ud2
063c59ec mov       0xA8(%rsp),%rcx
063c59f4 mov       0x50(%rsp),%rax
063c59f9 mov       %rax,0x10(%rcx)
063c59fd mov       0x10(%rcx),%rax
063c5a01 cmp       0x20(%rcx),%rax
063c5a05 jae       0x0000`0000`063C`5A26
063c5a07 jmp       0x0000`0000`063C`5797
063c5a0c lea       0x63C`E220,%rcx
063c5a13 lea       0x63D`0738,%r8
063c5a1a mov       $0x1C,%edx
063c5a1f call      0x0000`0000`063B`8E30
063c5a24 ud2
063c5a26 mov       0xA8(%rsp),%rcx
063c5a2e mov       0x10(%rcx),%rax
063c5a32 sub       0x20(%rcx),%rax
063c5a36 mov       %rax,0x48(%rsp)
063c5a3b setb      %al
063c5a3e test      $1,%al
063c5a40 jne       0x0000`0000`063C`5A9A
063c5a42 mov       0xA8(%rsp),%rax
063c5a4a mov       0x48(%rsp),%rcx
063c5a4f mov       %rcx,0x190(%rsp)
063c5a57 mov       (%rax),%rcx
063c5a5a mov       8(%rax),%rax
063c5a5e mov       %rcx,0x198(%rsp)
063c5a66 mov       %rax,0x1A0(%rsp)
063c5a6e mov       %rcx,0x1A8(%rsp)
063c5a76 mov       %rax,0x1B0(%rsp)
063c5a7e mov       0x1A8(%rsp),%rax
063c5a86 mov       %rax,0x38(%rsp)
063c5a8b mov       0x1B0(%rsp),%rax
063c5a93 mov       %rax,0x40(%rsp)
063c5a98 jmp       0x0000`0000`063C`5AB4
063c5a9a lea       0x63C`E1F0,%rcx
063c5aa1 lea       0x63D`0750,%r8
063c5aa8 mov       $0x21,%edx
063c5aad call      0x0000`0000`063B`8E30
063c5ab2 ud2
063c5ab4 mov       0x40(%rsp),%rdx
063c5ab9 mov       0x38(%rsp),%rcx
063c5abe mov       0x48(%rsp),%r8
063c5ac3 mov       0xA8(%rsp),%rax
063c5acb mov       0x10(%rax),%rax
063c5acf mov       %r8,0x100(%rsp)
063c5ad7 mov       %rax,0x108(%rsp)
063c5adf mov       0x100(%rsp),%r8
063c5ae7 mov       0x108(%rsp),%r9
063c5aef call      0x0000`0000`063C`2910
063c5af4 mov       %rdx,0xF8(%rsp)
063c5afc mov       %rax,0xF0(%rsp)
063c5b04 mov       $1,%eax
063c5b09 xor       %ecx,%ecx
063c5b0b cmpq      $0,0xF0(%rsp)
063c5b14 cmove     %rcx,%rax
063c5b18 cmp       $1,%rax
063c5b1c jne       0x0000`0000`063C`5797
063c5b22 mov       0xA8(%rsp),%rax
063c5b2a mov       0xF0(%rsp),%rdx
063c5b32 mov       0xF8(%rsp),%rcx
063c5b3a mov       %rdx,0x110(%rsp)
063c5b42 mov       %rcx,0x118(%rsp)
063c5b4a mov       %rax,%rcx
063c5b4d add       $0x2C,%rcx
063c5b51 mov       0x20(%rax),%rax
063c5b55 movq      $0,0x130(%rsp)
063c5b61 mov       %rax,0x138(%rsp)
063c5b69 mov       0x130(%rsp),%rdx
063c5b71 mov       0x138(%rsp),%r8
063c5b79 lea       0x63D`0768,%r9
063c5b80 call      0x0000`0000`063B`6A80
063c5b85 mov       %rax,0x28(%rsp)
063c5b8a mov       %rdx,0x30(%rsp)
063c5b8f mov       0x30(%rsp),%rax
063c5b94 mov       0x28(%rsp),%rcx
063c5b99 mov       %rcx,0x120(%rsp)
063c5ba1 mov       %rax,0x128(%rsp)
063c5ba9 lea       0x110(%rsp),%rcx
063c5bb1 lea       0x120(%rsp),%rdx
063c5bb9 call      0x0000`0000`063B`6790
063c5bbe mov       %al,0x27(%rsp)
063c5bc2 mov       0x27(%rsp),%al
063c5bc6 test      $1,%al
063c5bc8 jne       0x0000`0000`063C`5BCF
063c5bca jmp       0x0000`0000`063C`5797
063c5bcf mov       0xB0(%rsp),%rax
063c5bd7 mov       0x48(%rsp),%rdx
063c5bdc mov       0xA8(%rsp),%rcx
063c5be4 mov       0x10(%rcx),%rcx
063c5be8 mov       %rdx,0x140(%rsp)
063c5bf0 mov       %rcx,0x148(%rsp)
063c5bf8 mov       0x140(%rsp),%rdx
063c5c00 mov       0x148(%rsp),%rcx
063c5c08 mov       %rdx,8(%rax)
063c5c0c mov       %rcx,0x10(%rax)
063c5c10 movq      $1,(%rax)
063c5c17 jmp       0x0000`0000`063C`58ED

core::str::pattern::impl$3::into_searcher:
063c5c20 push      %rsi
063c5c21 sub       $0x90,%rsp
063c5c28 mov       %r9,0x30(%rsp)
063c5c2d mov       %r8,0x38(%rsp)
063c5c32 mov       %edx,0x54(%rsp)
063c5c36 mov       %rcx,0x40(%rsp)
063c5c3b mov       %rcx,0x48(%rsp)
063c5c40 mov       %edx,0x74(%rsp)
063c5c44 mov       %r8,0x78(%rsp)
063c5c49 mov       %r9,0x80(%rsp)
063c5c51 lea       0x6C(%rsp),%rcx
063c5c56 xor       %edx,%edx
063c5c58 mov       $4,%r8d
063c5c5e call      0x0000`0000`063C`AB00
063c5c63 mov       0x54(%rsp),%ecx
063c5c67 lea       0x6C(%rsp),%rdx
063c5c6c mov       $4,%r8d
063c5c72 call      0x0000`0000`063B`7050
063c5c77 mov       %rax,0x58(%rsp)
063c5c7c mov       %rdx,0x60(%rsp)
063c5c81 mov       0x60(%rsp),%rdx
063c5c86 mov       0x58(%rsp),%rcx
063c5c8b call      0x0000`0000`063C`6470
063c5c90 mov       %rax,0x28(%rsp)
063c5c95 mov       %rax,0x88(%rsp)
063c5c9d mov       0x30(%rsp),%rdx
063c5ca2 mov       0x38(%rsp),%rcx
063c5ca7 call      0x0000`0000`063C`6470
063c5cac mov       %rax,0x20(%rsp)
063c5cb1 mov       0x48(%rsp),%rax
063c5cb6 mov       0x40(%rsp),%rcx
063c5cbb mov       0x28(%rsp),%rdx
063c5cc0 mov       0x54(%rsp),%r8d
063c5cc5 mov       0x20(%rsp),%r9
063c5cca mov       0x30(%rsp),%r10
063c5ccf mov       0x38(%rsp),%r11
063c5cd4 mov       0x6C(%rsp),%esi
063c5cd8 mov       %esi,0x70(%rsp)
063c5cdc mov       %r11,(%rcx)
063c5cdf mov       %r10,8(%rcx)
063c5ce3 movq      $0,0x10(%rcx)
063c5ceb mov       %r9,0x18(%rcx)
063c5cef mov       %r8d,0x28(%rcx)
063c5cf3 mov       %rdx,0x20(%rcx)
063c5cf7 mov       0x70(%rsp),%edx
063c5cfb mov       %edx,0x2C(%rcx)
063c5cfe add       $0x90,%rsp
063c5d05 pop       %rsi
063c5d06 ret

core::str::slice_error_fail:
063c5d10 push      %rsi
063c5d11 push      %rdi
063c5d12 push      %rbx
063c5d13 sub       $0x380,%rsp
063c5d1a mov       %rdx,0x170(%rsp)
063c5d22 mov       %rcx,0x178(%rsp)
063c5d2a mov       0x3C0(%rsp),%rax
063c5d32 mov       %rax,0x180(%rsp)
063c5d3a mov       %r8,0x190(%rsp)
063c5d42 mov       %r9,0x198(%rsp)
063c5d4a mov       %rcx,0x360(%rsp)
063c5d52 mov       %rdx,0x368(%rsp)
063c5d5a mov       $0x100,%r8d
063c5d60 call      0x0000`0000`063C`65E0
063c5d65 mov       %rax,0x188(%rsp)
063c5d6d mov       %rax,0x370(%rsp)
063c5d75 mov       0x180(%rsp),%r9
063c5d7d mov       0x170(%rsp),%rdx
063c5d85 mov       0x178(%rsp),%rcx
063c5d8d mov       0x188(%rsp),%rax
063c5d95 mov       %rax,0x1B0(%rsp)
063c5d9d mov       0x1B0(%rsp),%r8
063c5da5 call      0x0000`0000`063C`4CC0
063c5daa mov       %rax,0x160(%rsp)
063c5db2 mov       %rdx,0x168(%rsp)
063c5dba mov       0x170(%rsp),%rdx
063c5dc2 mov       0x178(%rsp),%rcx
063c5dca mov       0x168(%rsp),%rax
063c5dd2 mov       0x160(%rsp),%r8
063c5dda mov       %r8,0x1A0(%rsp)
063c5de2 mov       %rax,0x1A8(%rsp)
063c5dea call      0x0000`0000`063C`6470
063c5def mov       %rax,0x158(%rsp)
063c5df7 mov       0x188(%rsp),%rax
063c5dff mov       0x158(%rsp),%rcx
063c5e07 cmp       %rcx,%rax
063c5e0a jb        0x0000`0000`063C`5E29
063c5e0c lea       0x63C`E370,%rax
063c5e13 mov       %rax,0x1B8(%rsp)
063c5e1b movq      $0,0x1C0(%rsp)
063c5e27 jmp       0x0000`0000`063C`5E44
063c5e29 lea       0x63D`0780,%rax
063c5e30 mov       %rax,0x1B8(%rsp)
063c5e38 movq      $5,0x1C0(%rsp)
063c5e44 mov       0x170(%rsp),%rdx
063c5e4c mov       0x178(%rsp),%rcx
063c5e54 mov       0x190(%rsp),%rax
063c5e5c mov       %rax,0x148(%rsp)
063c5e64 call      0x0000`0000`063C`6470
063c5e69 mov       %rax,0x150(%rsp)
063c5e71 mov       0x148(%rsp),%rax
063c5e79 mov       0x150(%rsp),%rcx
063c5e81 cmp       %rcx,%rax
063c5e84 ja        0x0000`0000`063C`5EB5
063c5e86 mov       0x170(%rsp),%rdx
063c5e8e mov       0x178(%rsp),%rcx
063c5e96 mov       0x198(%rsp),%rax
063c5e9e mov       %rax,0x138(%rsp)
063c5ea6 call      0x0000`0000`063C`6470
063c5eab mov       %rax,0x140(%rsp)
063c5eb3 jmp       0x0000`0000`063C`5EC9
063c5eb5 movb      $1,0x1CF(%rsp)
063c5ebd testb     $1,0x1CF(%rsp)
063c5ec5 jne       0x0000`0000`063C`5F0C
063c5ec7 jmp       0x0000`0000`063C`5EEA
063c5ec9 mov       0x138(%rsp),%rax
063c5ed1 mov       0x140(%rsp),%rcx
063c5ed9 cmp       %rcx,%rax
063c5edc seta      %al
063c5edf and       $1,%al
063c5ee1 mov       %al,0x1CF(%rsp)
063c5ee8 jmp       0x0000`0000`063C`5EBD
063c5eea mov       0x190(%rsp),%rax
063c5ef2 cmp       0x198(%rsp),%rax
063c5efa setbe     %al
063c5efd xor       $0xFF,%al
063c5eff test      $1,%al
063c5f01 jne       0x0000`0000`063C`6092
063c5f07 jmp       0x0000`0000`063C`6069
063c5f0c mov       0x170(%rsp),%rdx
063c5f14 mov       0x178(%rsp),%rcx
063c5f1c mov       0x190(%rsp),%rax
063c5f24 mov       %rax,0x128(%rsp)
063c5f2c call      0x0000`0000`063C`6470
063c5f31 mov       %rax,0x130(%rsp)
063c5f39 mov       0x128(%rsp),%rax
063c5f41 mov       0x130(%rsp),%rcx
063c5f49 cmp       %rcx,%rax
063c5f4c ja        0x0000`0000`063C`5F60
063c5f4e mov       0x198(%rsp),%rax
063c5f56 mov       %rax,0x1D0(%rsp)
063c5f5e jmp       0x0000`0000`063C`5F70
063c5f60 mov       0x190(%rsp),%rax
063c5f68 mov       %rax,0x1D0(%rsp)
063c5f70 lea       0x1D0(%rsp),%rcx
063c5f78 call      0x0000`0000`063C`87D0
063c5f7d mov       %rax,0x118(%rsp)
063c5f85 mov       %rdx,0x120(%rsp)
063c5f8d lea       0x1A0(%rsp),%rcx
063c5f95 call      0x0000`0000`063C`88C0
063c5f9a mov       %rax,0x108(%rsp)
063c5fa2 mov       %rdx,0x110(%rsp)
063c5faa lea       0x1B8(%rsp),%rcx
063c5fb2 call      0x0000`0000`063C`88C0
063c5fb7 mov       %rax,0xF8(%rsp)
063c5fbf mov       %rdx,0x100(%rsp)
063c5fc7 mov       0x100(%rsp),%rax
063c5fcf mov       0xF8(%rsp),%rcx
063c5fd7 mov       0x110(%rsp),%rdx
063c5fdf mov       0x108(%rsp),%r8
063c5fe7 mov       0x120(%rsp),%r9
063c5fef mov       0x118(%rsp),%r10
063c5ff7 mov       %r10,0x208(%rsp)
063c5fff mov       %r9,0x210(%rsp)
063c6007 mov       %r8,0x218(%rsp)
063c600f mov       %rdx,0x220(%rsp)
063c6017 mov       %rcx,0x228(%rsp)
063c601f mov       %rax,0x230(%rsp)
063c6027 lea       0x208(%rsp),%r9
063c602f lea       0x1D8(%rsp),%rcx
063c6037 lea       0x63D`07A8,%rdx
063c603e mov       $3,%r8d
063c6044 movq      $3,0x20(%rsp)
063c604d call      0x0000`0000`063B`DE30
063c6052 mov       0x180(%rsp),%rdx
063c605a lea       0x1D8(%rsp),%rcx
063c6062 call      0x0000`0000`063B`8F40
063c6067 ud2
063c6069 mov       0x170(%rsp),%rdx
063c6071 mov       0x178(%rsp),%rcx
063c6079 mov       0x190(%rsp),%r8
063c6081 call      0x0000`0000`063C`64E0
063c6086 mov       %al,0xF7(%rsp)
063c608d jmp       0x0000`0000`063C`61C8
063c6092 lea       0x190(%rsp),%rcx
063c609a call      0x0000`0000`063C`87D0
063c609f mov       %rax,0xE0(%rsp)
063c60a7 mov       %rdx,0xE8(%rsp)
063c60af lea       0x198(%rsp),%rcx
063c60b7 call      0x0000`0000`063C`87D0
063c60bc mov       %rax,0xD0(%rsp)
063c60c4 mov       %rdx,0xD8(%rsp)
063c60cc lea       0x1A0(%rsp),%rcx
063c60d4 call      0x0000`0000`063C`88C0
063c60d9 mov       %rax,0xC0(%rsp)
063c60e1 mov       %rdx,0xC8(%rsp)
063c60e9 lea       0x1B8(%rsp),%rcx
063c60f1 call      0x0000`0000`063C`88C0
063c60f6 mov       %rax,0xB0(%rsp)
063c60fe mov       %rdx,0xB8(%rsp)
063c6106 mov       0xB8(%rsp),%rax
063c610e mov       0xB0(%rsp),%rcx
063c6116 mov       0xC8(%rsp),%rdx
063c611e mov       0xC0(%rsp),%r8
063c6126 mov       0xD8(%rsp),%r9
063c612e mov       0xD0(%rsp),%r10
063c6136 mov       0xE8(%rsp),%r11
063c613e mov       0xE0(%rsp),%rsi
063c6146 mov       %rsi,0x268(%rsp)
063c614e mov       %r11,0x270(%rsp)
063c6156 mov       %r10,0x278(%rsp)
063c615e mov       %r9,0x280(%rsp)
063c6166 mov       %r8,0x288(%rsp)
063c616e mov       %rdx,0x290(%rsp)
063c6176 mov       %rcx,0x298(%rsp)
063c617e mov       %rax,0x2A0(%rsp)
063c6186 lea       0x268(%rsp),%r9
063c618e lea       0x238(%rsp),%rcx
063c6196 lea       0x63D`0800,%rdx
063c619d mov       $4,%r8d
063c61a3 movq      $4,0x20(%rsp)
063c61ac call      0x0000`0000`063B`DE30
063c61b1 mov       0x180(%rsp),%rdx
063c61b9 lea       0x238(%rsp),%rcx
063c61c1 call      0x0000`0000`063B`8F40
063c61c6 ud2
063c61c8 mov       0xF7(%rsp),%al
063c61cf xor       $0xFF,%al
063c61d1 test      $1,%al
063c61d3 jne       0x0000`0000`063C`61E7
063c61d5 mov       0x198(%rsp),%rax
063c61dd mov       %rax,0x2A8(%rsp)
063c61e5 jmp       0x0000`0000`063C`61F7
063c61e7 mov       0x190(%rsp),%rax
063c61ef mov       %rax,0x2A8(%rsp)
063c61f7 mov       0x170(%rsp),%rdx
063c61ff mov       0x178(%rsp),%rcx
063c6207 mov       0x2A8(%rsp),%r8
063c620f call      0x0000`0000`063C`65E0
063c6214 mov       %rax,0xA8(%rsp)
063c621c mov       %rax,0x378(%rsp)
063c6224 mov       0x180(%rsp),%r9
063c622c mov       0x170(%rsp),%rdx
063c6234 mov       0x178(%rsp),%rcx
063c623c mov       0xA8(%rsp),%rax
063c6244 mov       %rax,0x2C8(%rsp)
063c624c mov       0x2C8(%rsp),%r8
063c6254 call      0x0000`0000`063C`4C10
063c6259 mov       %rax,0x98(%rsp)
063c6261 mov       %rdx,0xA0(%rsp)
063c6269 mov       0xA0(%rsp),%rdx
063c6271 mov       0x98(%rsp),%rcx
063c6279 call      0x0000`0000`063C`6850
063c627e mov       %rdx,0x2C0(%rsp)
063c6286 mov       %rax,0x2B8(%rsp)
063c628e lea       0x2B8(%rsp),%rcx
063c6296 call      0x0000`0000`063C`48E0
063c629b mov       %eax,0x94(%rsp)
063c62a2 mov       0x180(%rsp),%rdx
063c62aa mov       0x94(%rsp),%ecx
063c62b1 call      0x0000`0000`063B`8470
063c62b6 mov       %eax,0x2B4(%rsp)
063c62bd mov       0x2B4(%rsp),%ecx
063c62c4 call      0x0000`0000`063B`7030
063c62c9 mov       %rax,0x88(%rsp)
063c62d1 mov       0x88(%rsp),%rcx
063c62d9 mov       0xA8(%rsp),%rax
063c62e1 add       %rcx,%rax
063c62e4 mov       %rax,0x80(%rsp)
063c62ec setb      %al
063c62ef test      $1,%al
063c62f1 jne       0x0000`0000`063C`632C
063c62f3 mov       0x80(%rsp),%rax
063c62fb mov       0xA8(%rsp),%rcx
063c6303 mov       %rcx,0x2D0(%rsp)
063c630b mov       %rax,0x2D8(%rsp)
063c6313 lea       0x2A8(%rsp),%rcx
063c631b call      0x0000`0000`063C`87D0
063c6320 mov       %rax,0x70(%rsp)
063c6325 mov       %rdx,0x78(%rsp)
063c632a jmp       0x0000`0000`063C`6347
063c632c mov       0x180(%rsp),%r8
063c6334 lea       0x63C`E220,%rcx
063c633b mov       $0x1C,%edx
063c6340 call      0x0000`0000`063B`8E30
063c6345 ud2
063c6347 lea       0x2B4(%rsp),%rcx
063c634f call      0x0000`0000`063C`8920
063c6354 mov       %rax,0x60(%rsp)
063c6359 mov       %rdx,0x68(%rsp)
063c635e lea       0x2D0(%rsp),%rcx
063c6366 call      0x0000`0000`063C`88F0
063c636b mov       %rax,0x50(%rsp)
063c6370 mov       %rdx,0x58(%rsp)
063c6375 lea       0x1A0(%rsp),%rcx
063c637d call      0x0000`0000`063C`88C0
063c6382 mov       %rax,0x40(%rsp)
063c6387 mov       %rdx,0x48(%rsp)
063c638c lea       0x1B8(%rsp),%rcx
063c6394 call      0x0000`0000`063C`88C0
063c6399 mov       %rax,0x30(%rsp)
063c639e mov       %rdx,0x38(%rsp)
063c63a3 mov       0x38(%rsp),%rax
063c63a8 mov       0x30(%rsp),%rcx
063c63ad mov       0x48(%rsp),%rdx
063c63b2 mov       0x40(%rsp),%r8
063c63b7 mov       0x58(%rsp),%r9
063c63bc mov       0x50(%rsp),%r10
063c63c1 mov       0x68(%rsp),%r11
063c63c6 mov       0x60(%rsp),%rsi
063c63cb mov       0x78(%rsp),%rdi
063c63d0 mov       0x70(%rsp),%rbx
063c63d5 mov       %rbx,0x310(%rsp)
063c63dd mov       %rdi,0x318(%rsp)
063c63e5 mov       %rsi,0x320(%rsp)
063c63ed mov       %r11,0x328(%rsp)
063c63f5 mov       %r10,0x330(%rsp)
063c63fd mov       %r9,0x338(%rsp)
063c6405 mov       %r8,0x340(%rsp)
063c640d mov       %rdx,0x348(%rsp)
063c6415 mov       %rcx,0x350(%rsp)
063c641d mov       %rax,0x358(%rsp)
063c6425 lea       0x310(%rsp),%r9
063c642d lea       0x2E0(%rsp),%rcx
063c6435 lea       0x63D`0878,%rdx
063c643c mov       $5,%r8d
063c6442 movq      $5,0x20(%rsp)
063c644b call      0x0000`0000`063B`DE30
063c6450 mov       0x180(%rsp),%rdx
063c6458 lea       0x2E0(%rsp),%rcx
063c6460 call      0x0000`0000`063B`8F40
063c6465 ud2

core::str::impl$0::len:
063c6470 sub       $0x38,%rsp
063c6474 mov       %rcx,8(%rsp)
063c6479 mov       %rdx,0x10(%rsp)
063c647e mov       %rcx,0x18(%rsp)
063c6483 mov       %rdx,0x20(%rsp)
063c6488 mov       %rcx,0x28(%rsp)
063c648d mov       %rdx,0x30(%rsp)
063c6492 mov       0x28(%rsp),%rax
063c6497 mov       0x30(%rsp),%rax
063c649c mov       %rax,(%rsp)
063c64a0 mov       (%rsp),%rax
063c64a4 add       $0x38,%rsp
063c64a8 ret

core::str::impl$0::is_empty:
063c64b0 sub       $0x38,%rsp
063c64b4 mov       %rcx,0x28(%rsp)
063c64b9 mov       %rdx,0x30(%rsp)
063c64be call      0x0000`0000`063C`6470
063c64c3 mov       %rax,0x20(%rsp)
063c64c8 mov       0x20(%rsp),%rax
063c64cd cmp       $0,%rax
063c64d1 sete      %al
063c64d4 and       $1,%al
063c64d6 movzbl    %al,%eax
063c64d9 add       $0x38,%rsp
063c64dd ret

core::str::impl$0::is_char_boundary:
063c64e0 sub       $0xA8,%rsp
063c64e7 mov       %r8,0x40(%rsp)
063c64ec mov       %rdx,0x48(%rsp)
063c64f1 mov       %rcx,0x50(%rsp)
063c64f6 mov       %rcx,0x68(%rsp)
063c64fb mov       %rdx,0x70(%rsp)
063c6500 mov       %r8,0x78(%rsp)
063c6505 cmp       $0,%r8
063c6509 jne       0x0000`0000`063C`6515
063c650b movb      $1,0x5F(%rsp)
063c6510 jmp       0x0000`0000`063C`65B7
063c6515 mov       0x48(%rsp),%rax
063c651a mov       0x50(%rsp),%rcx
063c651f mov       %rcx,0x88(%rsp)
063c6527 mov       %rax,0x90(%rsp)
063c652f mov       %rcx,0x98(%rsp)
063c6537 mov       %rax,0xA0(%rsp)
063c653f mov       0x98(%rsp),%rax
063c6547 mov       %rax,0x30(%rsp)
063c654c mov       0xA0(%rsp),%rax
063c6554 mov       %rax,0x38(%rsp)
063c6559 mov       0x40(%rsp),%r8
063c655e mov       0x38(%rsp),%rdx
063c6563 mov       0x30(%rsp),%rcx
063c6568 call      0x0000`0000`063C`2890
063c656d mov       %rax,0x60(%rsp)
063c6572 mov       0x60(%rsp),%rax
063c6577 test      %rax,%rax
063c657a setne     %al
063c657d movzbl    %al,%eax
063c6580 je        0x0000`0000`063C`6588
063c6582 jmp       0x0000`0000`063C`6584
063c6584 jmp       0x0000`0000`063C`659E
063c6586 ud2
063c6588 mov       0x48(%rsp),%rdx
063c658d mov       0x50(%rsp),%rcx
063c6592 call      0x0000`0000`063C`6470
063c6597 mov       %rax,0x28(%rsp)
063c659c jmp       0x0000`0000`063C`65C8
063c659e mov       0x60(%rsp),%rax
063c65a3 mov       (%rax),%cl
063c65a5 mov       %cl,0x87(%rsp)
063c65ac call      0x0000`0000`063B`4690
063c65b1 and       $1,%al
063c65b3 mov       %al,0x5F(%rsp)
063c65b7 mov       0x5F(%rsp),%al
063c65bb and       $1,%al
063c65bd movzbl    %al,%eax
063c65c0 add       $0xA8,%rsp
063c65c7 ret
063c65c8 mov       0x40(%rsp),%rax
063c65cd mov       0x28(%rsp),%rcx
063c65d2 cmp       %rcx,%rax
063c65d5 sete      %al
063c65d8 and       $1,%al
063c65da mov       %al,0x5F(%rsp)
063c65de jmp       0x0000`0000`063C`65B7

core::str::impl$0::floor_char_boundary:
063c65e0 sub       $0x128,%rsp
063c65e7 mov       %r8,0x70(%rsp)
063c65ec mov       %rdx,0x78(%rsp)
063c65f1 mov       %rcx,0x80(%rsp)
063c65f9 mov       %rcx,0xC0(%rsp)
063c6601 mov       %rdx,0xC8(%rsp)
063c6609 mov       %r8,0xD0(%rsp)
063c6611 call      0x0000`0000`063C`6470
063c6616 mov       %rax,0x88(%rsp)
063c661e mov       0x70(%rsp),%rax
063c6623 mov       0x88(%rsp),%rcx
063c662b cmp       %rcx,%rax
063c662e jae       0x0000`0000`063C`6672
063c6630 mov       0x70(%rsp),%rax
063c6635 mov       %rax,0x110(%rsp)
063c663d movq      $3,0x118(%rsp)
063c6649 xor       %ecx,%ecx
063c664b sub       $3,%rax
063c664f cmovb     %rcx,%rax
063c6653 mov       %rax,0x120(%rsp)
063c665b mov       0x120(%rsp),%rax
063c6663 mov       %rax,0x68(%rsp)
063c6668 mov       %rax,0xD8(%rsp)
063c6670 jmp       0x0000`0000`063C`669C
063c6672 mov       0x78(%rsp),%rdx
063c6677 mov       0x80(%rsp),%rcx
063c667f call      0x0000`0000`063C`6470
063c6684 mov       %rax,0x90(%rsp)
063c668c mov       0x90(%rsp),%rax
063c6694 add       $0x128,%rsp
063c669b ret
063c669c mov       0x78(%rsp),%rax
063c66a1 mov       0x80(%rsp),%rcx
063c66a9 mov       %rcx,0xF0(%rsp)
063c66b1 mov       %rax,0xF8(%rsp)
063c66b9 mov       %rcx,0x100(%rsp)
063c66c1 mov       %rax,0x108(%rsp)
063c66c9 mov       0x100(%rsp),%rax
063c66d1 mov       %rax,0x58(%rsp)
063c66d6 mov       0x108(%rsp),%rax
063c66de mov       %rax,0x60(%rsp)
063c66e3 mov       0x70(%rsp),%r8
063c66e8 mov       0x68(%rsp),%rdx
063c66ed lea       0xA8(%rsp),%rcx
063c66f5 call      0x0000`0000`063B`6940
063c66fa mov       0x60(%rsp),%rdx
063c66ff mov       0x58(%rsp),%rcx
063c6704 lea       0xA8(%rsp),%r8
063c670c lea       0x63D`0940,%r9
063c6713 call      0x0000`0000`063C`0850
063c6718 mov       %rax,0x48(%rsp)
063c671d mov       %rdx,0x50(%rsp)
063c6722 mov       0x50(%rsp),%rdx
063c6727 mov       0x48(%rsp),%rcx
063c672c call      0x0000`0000`063C`2CD0
063c6731 mov       %rdx,0xA0(%rsp)
063c6739 mov       %rax,0x98(%rsp)
063c6741 lea       0x98(%rsp),%rcx
063c6749 call      0x0000`0000`063C`9770
063c674e mov       %rax,0x38(%rsp)
063c6753 mov       %rdx,0x40(%rsp)
063c6758 mov       %rax,0xE0(%rsp)
063c6760 mov       %rdx,0xE8(%rsp)
063c6768 mov       0x40(%rsp),%rdx
063c676d mov       0x38(%rsp),%rcx
063c6772 lea       0x63D`0958,%r8
063c6779 call      0x0000`0000`063B`8740
063c677e mov       %rax,0x30(%rsp)
063c6783 mov       0x30(%rsp),%rcx
063c6788 mov       0x68(%rsp),%rax
063c678d add       %rcx,%rax
063c6790 mov       %rax,0x28(%rsp)
063c6795 setb      %al
063c6798 test      $1,%al
063c679a jne       0x0000`0000`063C`67AE
063c679c mov       0x28(%rsp),%rax
063c67a1 mov       %rax,0x90(%rsp)
063c67a9 jmp       0x0000`0000`063C`668C
063c67ae lea       0x63C`E220,%rcx
063c67b5 lea       0x63D`0970,%r8
063c67bc mov       $0x1C,%edx
063c67c1 call      0x0000`0000`063B`8E30
063c67c6 ud2

core::str::impl$0::floor_char_boundary::closure$0:
063c67d0 sub       $0x38,%rsp
063c67d4 mov       %rcx,0x28(%rsp)
063c67d9 mov       %rdx,0x30(%rsp)
063c67de mov       (%rdx),%cl
063c67e0 call      0x0000`0000`063B`4690
063c67e5 mov       %al,0x27(%rsp)
063c67e9 mov       0x27(%rsp),%al
063c67ed and       $1,%al
063c67ef movzbl    %al,%eax
063c67f2 add       $0x38,%rsp
063c67f6 ret

core::str::impl$0::get<core::ops::range::RangeTo<usize> >:
063c6800 sub       $0x58,%rsp
063c6804 mov       %r8,0x28(%rsp)
063c6809 mov       %rdx,%r8
063c680c mov       %rcx,%rdx
063c680f mov       0x28(%rsp),%rcx
063c6814 mov       %rdx,0x40(%rsp)
063c6819 mov       %r8,0x48(%rsp)
063c681e mov       %rcx,0x50(%rsp)
063c6823 call      0x0000`0000`063C`5010
063c6828 mov       %rax,0x30(%rsp)
063c682d mov       %rdx,0x38(%rsp)
063c6832 mov       0x38(%rsp),%rdx
063c6837 mov       0x30(%rsp),%rax
063c683c add       $0x58,%rsp
063c6840 ret

core::str::impl$0::chars:
063c6850 sub       $0x88,%rsp
063c6857 mov       %rcx,0x58(%rsp)
063c685c mov       %rdx,0x60(%rsp)
063c6861 mov       %rcx,0x68(%rsp)
063c6866 mov       %rdx,0x70(%rsp)
063c686b mov       %rcx,0x78(%rsp)
063c6870 mov       %rdx,0x80(%rsp)
063c6878 mov       0x78(%rsp),%rax
063c687d mov       %rax,0x38(%rsp)
063c6882 mov       0x80(%rsp),%rax
063c688a mov       %rax,0x40(%rsp)
063c688f mov       0x40(%rsp),%rdx
063c6894 mov       0x38(%rsp),%rcx
063c6899 call      0x0000`0000`063C`2CD0
063c689e mov       %rax,0x28(%rsp)
063c68a3 mov       %rdx,0x30(%rsp)
063c68a8 mov       0x30(%rsp),%rax
063c68ad mov       0x28(%rsp),%rcx
063c68b2 mov       %rcx,0x48(%rsp)
063c68b7 mov       %rax,0x50(%rsp)
063c68bc mov       0x48(%rsp),%rax
063c68c1 mov       0x50(%rsp),%rdx
063c68c6 add       $0x88,%rsp
063c68cd ret

core::str::impl$0::char_indices:
063c68d0 sub       $0x68,%rsp
063c68d4 mov       %r8,0x28(%rsp)
063c68d9 mov       %rdx,%rax
063c68dc mov       0x28(%rsp),%rdx
063c68e1 mov       %rax,0x30(%rsp)
063c68e6 mov       %rcx,%rax
063c68e9 mov       0x30(%rsp),%rcx
063c68ee mov       %rax,0x38(%rsp)
063c68f3 mov       %rax,0x40(%rsp)
063c68f8 mov       %rcx,0x58(%rsp)
063c68fd mov       %rdx,0x60(%rsp)
063c6902 call      0x0000`0000`063C`6850
063c6907 mov       %rax,0x48(%rsp)
063c690c mov       %rdx,0x50(%rsp)
063c6911 mov       0x40(%rsp),%rax
063c6916 mov       0x38(%rsp),%rcx
063c691b mov       0x50(%rsp),%rdx
063c6920 mov       0x48(%rsp),%r8
063c6925 movq      $0,(%rcx)
063c692c mov       %r8,8(%rcx)
063c6930 mov       %rdx,0x10(%rcx)
063c6934 add       $0x68,%rsp
063c6938 ret

core::str::impl$0::find<char>:
063c6940 sub       $0x98,%rsp
063c6947 mov       %r8d,0x34(%rsp)
063c694c mov       %rdx,%r9
063c694f mov       0x34(%rsp),%edx
063c6953 mov       %rcx,%r8
063c6956 mov       %r8,0x80(%rsp)
063c695e mov       %r9,0x88(%rsp)
063c6966 mov       %edx,0x94(%rsp)
063c696d lea       0x50(%rsp),%rcx
063c6972 call      0x0000`0000`063C`5C20
063c6977 lea       0x38(%rsp),%rcx
063c697c lea       0x50(%rsp),%rdx
063c6981 call      0x0000`0000`063C`5770
063c6986 lea       0x38(%rsp),%rcx
063c698b call      0x0000`0000`063B`87B0
063c6990 mov       %rax,0x20(%rsp)
063c6995 mov       %rdx,0x28(%rsp)
063c699a jmp       0x0000`0000`063C`699C
063c699c mov       0x28(%rsp),%rdx
063c69a1 mov       0x20(%rsp),%rax
063c69a6 add       $0x98,%rsp
063c69ad ret

core::str::impl$0::find::closure$0<char>:
063c69b0 sub       $0x20,%rsp
063c69b4 mov       %rcx,%rax
063c69b7 mov       %rax,8(%rsp)
063c69bc mov       %rdx,0x10(%rsp)
063c69c1 mov       %rax,0x18(%rsp)
063c69c6 add       $0x20,%rsp
063c69ca ret

core::unicode::printable::check:
063c69d0 sub       $0x198,%rsp
063c69d7 mov       %r9,0x98(%rsp)
063c69df mov       %r8,%r10
063c69e2 mov       %r10,0xA0(%rsp)
063c69ea mov       %rdx,%r11
063c69ed mov       %r11,0xA8(%rsp)
063c69f5 mov       %cx,0xB6(%rsp)
063c69fd mov       0x1D0(%rsp),%rax
063c6a05 mov       %rax,0xB8(%rsp)
063c6a0d mov       0x1C8(%rsp),%rdx
063c6a15 mov       %rdx,0xC0(%rsp)
063c6a1d mov       0x1C0(%rsp),%r8
063c6a25 mov       %r8,0xC8(%rsp)
063c6a2d mov       %cx,0x14E(%rsp)
063c6a35 mov       %r11,0x150(%rsp)
063c6a3d mov       %r10,0x158(%rsp)
063c6a45 mov       %r9,0x160(%rsp)
063c6a4d mov       %r8,0x168(%rsp)
063c6a55 mov       %rdx,0x170(%rsp)
063c6a5d mov       %rax,0x178(%rsp)
063c6a65 shr       $8,%cx
063c6a69 mov       %cx,0xD4(%rsp)
063c6a71 mov       0xA0(%rsp),%rdx
063c6a79 mov       0xA8(%rsp),%rcx
063c6a81 mov       0xD4(%rsp),%ax
063c6a89 mov       %al,0x87(%rsp)
063c6a90 mov       %al,0x185(%rsp)
063c6a97 movq      $0,0xD8(%rsp)
063c6aa3 call      0x0000`0000`063C`1AA0
063c6aa8 mov       %rax,0x88(%rsp)
063c6ab0 mov       %rdx,0x90(%rsp)
063c6ab8 mov       0x90(%rsp),%rax
063c6ac0 mov       0x88(%rsp),%rcx
063c6ac8 mov       %rcx,0xE0(%rsp)
063c6ad0 mov       %rax,0xE8(%rsp)
063c6ad8 lea       0xE0(%rsp),%rcx
063c6ae0 call      0x0000`0000`063C`8F30
063c6ae5 mov       %rax,0xF0(%rsp)
063c6aed mov       0xF0(%rsp),%rax
063c6af5 test      %rax,%rax
063c6af8 setne     %al
063c6afb movzbl    %al,%eax
063c6afe je        0x0000`0000`063C`6B06
063c6b00 jmp       0x0000`0000`063C`6B02
063c6b02 jmp       0x0000`0000`063C`6B3C
063c6b04 ud2
063c6b06 mov       0xB8(%rsp),%rdx
063c6b0e mov       0xC0(%rsp),%rcx
063c6b16 mov       0xB6(%rsp),%ax
063c6b1e movzwl    %ax,%eax
063c6b21 mov       %eax,0x124(%rsp)
063c6b28 call      0x0000`0000`063C`2CD0
063c6b2d mov       %rax,0x70(%rsp)
063c6b32 mov       %rdx,0x78(%rsp)
063c6b37 jmp       0x0000`0000`063C`6CD1
063c6b3c mov       0xF0(%rsp),%rax
063c6b44 mov       (%rax),%al
063c6b46 mov       %al,0x67(%rsp)
063c6b4a mov       %al,0x186(%rsp)
063c6b51 mov       0xF0(%rsp),%rax
063c6b59 mov       1(%rax),%cl
063c6b5c mov       %cl,0x187(%rsp)
063c6b63 mov       0xD8(%rsp),%rax
063c6b6b movzbl    %cl,%ecx
063c6b6e add       %rcx,%rax
063c6b71 mov       %rax,0x68(%rsp)
063c6b76 setb      %al
063c6b79 test      $1,%al
063c6b7b jne       0x0000`0000`063C`6B9B
063c6b7d mov       0x87(%rsp),%al
063c6b84 mov       0x67(%rsp),%cl
063c6b88 mov       0x68(%rsp),%rdx
063c6b8d mov       %rdx,0x188(%rsp)
063c6b95 cmp       %cl,%al
063c6b97 je        0x0000`0000`063C`6BCD
063c6b99 jmp       0x0000`0000`063C`6BB5
063c6b9b lea       0x63C`E220,%rcx
063c6ba2 lea       0x63D`0A08,%r8
063c6ba9 mov       $0x1C,%edx
063c6bae call      0x0000`0000`063B`8E30
063c6bb3 ud2
063c6bb5 mov       0x87(%rsp),%al
063c6bbc mov       0x67(%rsp),%cl
063c6bc0 cmp       %cl,%al
063c6bc2 jb        0x0000`0000`063C`6B06
063c6bc8 jmp       0x0000`0000`063C`6C86
063c6bcd mov       0xC8(%rsp),%rdx
063c6bd5 mov       0x98(%rsp),%rcx
063c6bdd mov       0x68(%rsp),%rax
063c6be2 mov       0xD8(%rsp),%r8
063c6bea mov       %r8,0xF8(%rsp)
063c6bf2 mov       %rax,0x100(%rsp)
063c6bfa mov       0xF8(%rsp),%r8
063c6c02 mov       0x100(%rsp),%r9
063c6c0a lea       0x63D`0A20,%rax
063c6c11 mov       %rax,0x20(%rsp)
063c6c16 call      0x0000`0000`063C`0750
063c6c1b mov       %rax,0x50(%rsp)
063c6c20 mov       %rdx,0x58(%rsp)
063c6c25 mov       0x58(%rsp),%rdx
063c6c2a mov       0x50(%rsp),%rcx
063c6c2f call      0x0000`0000`063C`1A70
063c6c34 mov       %rax,0x40(%rsp)
063c6c39 mov       %rdx,0x48(%rsp)
063c6c3e mov       0x48(%rsp),%rax
063c6c43 mov       0x40(%rsp),%rcx
063c6c48 mov       %rcx,0x108(%rsp)
063c6c50 mov       %rax,0x110(%rsp)
063c6c58 lea       0x108(%rsp),%rcx
063c6c60 call      0x0000`0000`063C`8BD0
063c6c65 mov       %rax,0x118(%rsp)
063c6c6d mov       0x118(%rsp),%rax
063c6c75 test      %rax,%rax
063c6c78 setne     %al
063c6c7b movzbl    %al,%eax
063c6c7e je        0x0000`0000`063C`6C86
063c6c80 jmp       0x0000`0000`063C`6C82
063c6c82 jmp       0x0000`0000`063C`6C98
063c6c84 ud2
063c6c86 mov       0x68(%rsp),%rax
063c6c8b mov       %rax,0xD8(%rsp)
063c6c93 jmp       0x0000`0000`063C`6AD8
063c6c98 mov       0xB6(%rsp),%cx
063c6ca0 mov       0x118(%rsp),%rax
063c6ca8 mov       (%rax),%al
063c6caa mov       %al,0x196(%rsp)
063c6cb1 cmp       %cl,%al
063c6cb3 jne       0x0000`0000`063C`6C58
063c6cb5 movb      $0,0xD7(%rsp)
063c6cbd mov       0xD7(%rsp),%al
063c6cc4 and       $1,%al
063c6cc6 movzbl    %al,%eax
063c6cc9 add       $0x198,%rsp
063c6cd0 ret
063c6cd1 mov       0x78(%rsp),%rdx
063c6cd6 mov       0x70(%rsp),%rcx
063c6cdb call      0x0000`0000`063B`82E0
063c6ce0 mov       %rdx,0x130(%rsp)
063c6ce8 mov       %rax,0x128(%rsp)
063c6cf0 movb      $1,0x13F(%rsp)
063c6cf8 lea       0x128(%rsp),%rcx
063c6d00 call      0x0000`0000`063B`7910
063c6d05 mov       %dl,0x141(%rsp)
063c6d0c mov       %al,0x140(%rsp)
063c6d13 mov       0x140(%rsp),%al
063c6d1a and       $1,%al
063c6d1c movzbl    %al,%eax
063c6d1f cmp       $1,%rax
063c6d23 jne       0x0000`0000`063C`6D3F
063c6d25 mov       0x141(%rsp),%al
063c6d2c mov       %al,0x3F(%rsp)
063c6d30 mov       %al,0x197(%rsp)
063c6d37 and       $0x80,%al
063c6d39 cmp       $0,%al
063c6d3b je        0x0000`0000`063C`6D54
063c6d3d jmp       0x0000`0000`063C`6D64
063c6d3f mov       0x13F(%rsp),%al
063c6d46 and       $1,%al
063c6d48 mov       %al,0xD7(%rsp)
063c6d4f jmp       0x0000`0000`063C`6CBD
063c6d54 mov       0x3F(%rsp),%al
063c6d58 movzbl    %al,%eax
063c6d5b mov       %eax,0x148(%rsp)
063c6d62 jmp       0x0000`0000`063C`6DB8
063c6d64 mov       0x3F(%rsp),%al
063c6d68 and       $0x7F,%al
063c6d6a movzbl    %al,%eax
063c6d6d shl       $8,%eax
063c6d70 mov       %eax,0x38(%rsp)
063c6d74 lea       0x128(%rsp),%rcx
063c6d7c call      0x0000`0000`063B`7910
063c6d81 mov       %al,0x36(%rsp)
063c6d85 mov       %dl,0x37(%rsp)
063c6d89 mov       0x37(%rsp),%dl
063c6d8d mov       0x36(%rsp),%cl
063c6d91 and       $1,%cl
063c6d94 lea       0x63D`0A38,%r8
063c6d9b call      0x0000`0000`063B`8510
063c6da0 mov       %al,0x35(%rsp)
063c6da4 mov       0x38(%rsp),%eax
063c6da8 mov       0x35(%rsp),%cl
063c6dac movzbl    %cl,%ecx
063c6daf or        %ecx,%eax
063c6db1 mov       %eax,0x148(%rsp)
063c6db8 mov       0x148(%rsp),%ecx
063c6dbf mov       0x124(%rsp),%eax
063c6dc6 sub       %ecx,%eax
063c6dc8 mov       %eax,0x30(%rsp)
063c6dcc seto      %al
063c6dcf test      $1,%al
063c6dd1 jne       0x0000`0000`063C`6DEE
063c6dd3 mov       0x30(%rsp),%eax
063c6dd7 mov       %eax,0x124(%rsp)
063c6dde cmpl      $0,0x124(%rsp)
063c6de6 jl        0x0000`0000`063C`6D3F
063c6dec jmp       0x0000`0000`063C`6E08
063c6dee lea       0x63C`E1F0,%rcx
063c6df5 lea       0x63D`0A50,%r8
063c6dfc mov       $0x21,%edx
063c6e01 call      0x0000`0000`063B`8E30
063c6e06 ud2
063c6e08 mov       0x13F(%rsp),%al
063c6e0f xor       $0xFF,%al
063c6e11 and       $1,%al
063c6e13 mov       %al,0x13F(%rsp)
063c6e1a jmp       0x0000`0000`063C`6CF8

core::unicode::printable::is_printable:
063c6e20 sub       $0x58,%rsp
063c6e24 mov       %ecx,0x3C(%rsp)
063c6e28 mov       %ecx,0x4C(%rsp)
063c6e2c mov       %ecx,0x50(%rsp)
063c6e30 mov       %cx,%ax
063c6e33 mov       %ax,0x40(%rsp)
063c6e38 mov       %ax,0x56(%rsp)
063c6e3d cmp       $0x1`0000,%ecx
063c6e43 jb        0x0000`0000`063C`6E52
063c6e45 mov       0x3C(%rsp),%eax
063c6e49 cmp       $0x2`0000,%eax
063c6e4e jb        0x0000`0000`063C`6EB2
063c6e50 jmp       0x0000`0000`063C`6EA3
063c6e52 mov       0x40(%rsp),%cx
063c6e57 mov       0x63D`0AB8,%rdx
063c6e5e mov       0x63D`0AC0,%r8
063c6e65 lea       0x63D`0AC8,%r9
063c6e6c lea       0x63D`0BE8,%rax
063c6e73 movq      $0x120,0x20(%rsp)
063c6e7c mov       %rax,0x28(%rsp)
063c6e81 movq      $0x12F,0x30(%rsp)
063c6e8a call      0x0000`0000`063C`69D0
063c6e8f and       $1,%al
063c6e91 mov       %al,0x43(%rsp)
063c6e95 mov       0x43(%rsp),%al
063c6e99 and       $1,%al
063c6e9b movzbl    %al,%eax
063c6e9e add       $0x58,%rsp
063c6ea2 ret
063c6ea3 mov       0x3C(%rsp),%ecx
063c6ea7 mov       $0x2`A6E0,%eax
063c6eac cmp       %ecx,%eax
063c6eae jbe       0x0000`0000`063C`6EFE
063c6eb0 jmp       0x0000`0000`063C`6EF7
063c6eb2 mov       0x40(%rsp),%cx
063c6eb7 mov       0x63D`0D70,%rdx
063c6ebe mov       0x63D`0D78,%r8
063c6ec5 lea       0x63D`0D80,%r9
063c6ecc lea       0x63D`0E40,%rax
063c6ed3 movq      $0xC0,0x20(%rsp)
063c6edc mov       %rax,0x28(%rsp)
063c6ee1 movq      $0x1B6,0x30(%rsp)
063c6eea call      0x0000`0000`063C`69D0
063c6eef and       $1,%al
063c6ef1 mov       %al,0x43(%rsp)
063c6ef5 jmp       0x0000`0000`063C`6E95
063c6ef7 movb      $0,0x44(%rsp)
063c6efc jmp       0x0000`0000`063C`6F10
063c6efe mov       0x3C(%rsp),%eax
063c6f02 cmp       $0x2`A700,%eax
063c6f07 setb      %al
063c6f0a and       $1,%al
063c6f0c mov       %al,0x44(%rsp)
063c6f10 testb     $1,0x44(%rsp)
063c6f15 jne       0x0000`0000`063C`6F26
063c6f17 mov       0x3C(%rsp),%ecx
063c6f1b mov       $0x2`B739,%eax
063c6f20 cmp       %ecx,%eax
063c6f22 jbe       0x0000`0000`063C`6F37
063c6f24 jmp       0x0000`0000`063C`6F30
063c6f26 movb      $0,0x43(%rsp)
063c6f2b jmp       0x0000`0000`063C`6E95
063c6f30 movb      $0,0x45(%rsp)
063c6f35 jmp       0x0000`0000`063C`6F49
063c6f37 mov       0x3C(%rsp),%eax
063c6f3b cmp       $0x2`B740,%eax
063c6f40 setb      %al
063c6f43 and       $1,%al
063c6f45 mov       %al,0x45(%rsp)
063c6f49 testb     $1,0x45(%rsp)
063c6f4e jne       0x0000`0000`063C`6F5F
063c6f50 mov       0x3C(%rsp),%ecx
063c6f54 mov       $0x2`B81E,%eax
063c6f59 cmp       %ecx,%eax
063c6f5b jbe       0x0000`0000`063C`6F70
063c6f5d jmp       0x0000`0000`063C`6F69
063c6f5f movb      $0,0x43(%rsp)
063c6f64 jmp       0x0000`0000`063C`6E95
063c6f69 movb      $0,0x46(%rsp)
063c6f6e jmp       0x0000`0000`063C`6F82
063c6f70 mov       0x3C(%rsp),%eax
063c6f74 cmp       $0x2`B820,%eax
063c6f79 setb      %al
063c6f7c and       $1,%al
063c6f7e mov       %al,0x46(%rsp)
063c6f82 testb     $1,0x46(%rsp)
063c6f87 jne       0x0000`0000`063C`6F98
063c6f89 mov       0x3C(%rsp),%ecx
063c6f8d mov       $0x2`CEA2,%eax
063c6f92 cmp       %ecx,%eax
063c6f94 jbe       0x0000`0000`063C`6FA9
063c6f96 jmp       0x0000`0000`063C`6FA2
063c6f98 movb      $0,0x43(%rsp)
063c6f9d jmp       0x0000`0000`063C`6E95
063c6fa2 movb      $0,0x47(%rsp)
063c6fa7 jmp       0x0000`0000`063C`6FBB
063c6fa9 mov       0x3C(%rsp),%eax
063c6fad cmp       $0x2`CEB0,%eax
063c6fb2 setb      %al
063c6fb5 and       $1,%al
063c6fb7 mov       %al,0x47(%rsp)
063c6fbb testb     $1,0x47(%rsp)
063c6fc0 jne       0x0000`0000`063C`6FD1
063c6fc2 mov       0x3C(%rsp),%ecx
063c6fc6 mov       $0x2`EBE1,%eax
063c6fcb cmp       %ecx,%eax
063c6fcd jbe       0x0000`0000`063C`6FE2
063c6fcf jmp       0x0000`0000`063C`6FDB
063c6fd1 movb      $0,0x43(%rsp)
063c6fd6 jmp       0x0000`0000`063C`6E95
063c6fdb movb      $0,0x48(%rsp)
063c6fe0 jmp       0x0000`0000`063C`6FF4
063c6fe2 mov       0x3C(%rsp),%eax
063c6fe6 cmp       $0x2`F800,%eax
063c6feb setb      %al
063c6fee and       $1,%al
063c6ff0 mov       %al,0x48(%rsp)
063c6ff4 testb     $1,0x48(%rsp)
063c6ff9 jne       0x0000`0000`063C`700A
063c6ffb mov       0x3C(%rsp),%ecx
063c6fff mov       $0x2`FA1E,%eax
063c7004 cmp       %ecx,%eax
063c7006 jbe       0x0000`0000`063C`701B
063c7008 jmp       0x0000`0000`063C`7014
063c700a movb      $0,0x43(%rsp)
063c700f jmp       0x0000`0000`063C`6E95
063c7014 movb      $0,0x49(%rsp)
063c7019 jmp       0x0000`0000`063C`702D
063c701b mov       0x3C(%rsp),%eax
063c701f cmp       $0x3`0000,%eax
063c7024 setb      %al
063c7027 and       $1,%al
063c7029 mov       %al,0x49(%rsp)
063c702d testb     $1,0x49(%rsp)
063c7032 jne       0x0000`0000`063C`7043
063c7034 mov       0x3C(%rsp),%ecx
063c7038 mov       $0x3`134B,%eax
063c703d cmp       %ecx,%eax
063c703f jbe       0x0000`0000`063C`7054
063c7041 jmp       0x0000`0000`063C`704D
063c7043 movb      $0,0x43(%rsp)
063c7048 jmp       0x0000`0000`063C`6E95
063c704d movb      $0,0x4A(%rsp)
063c7052 jmp       0x0000`0000`063C`7066
063c7054 mov       0x3C(%rsp),%eax
063c7058 cmp       $0xE`0100,%eax
063c705d setb      %al
063c7060 and       $1,%al
063c7062 mov       %al,0x4A(%rsp)
063c7066 testb     $1,0x4A(%rsp)
063c706b jne       0x0000`0000`063C`707C
063c706d mov       0x3C(%rsp),%ecx
063c7071 mov       $0xE`01F0,%eax
063c7076 cmp       %ecx,%eax
063c7078 jbe       0x0000`0000`063C`708D
063c707a jmp       0x0000`0000`063C`7086
063c707c movb      $0,0x43(%rsp)
063c7081 jmp       0x0000`0000`063C`6E95
063c7086 movb      $0,0x4B(%rsp)
063c708b jmp       0x0000`0000`063C`709F
063c708d mov       0x3C(%rsp),%eax
063c7091 cmp       $0x11`0000,%eax
063c7096 setb      %al
063c7099 and       $1,%al
063c709b mov       %al,0x4B(%rsp)
063c709f testb     $1,0x4B(%rsp)
063c70a4 jne       0x0000`0000`063C`70B0
063c70a6 movb      $1,0x43(%rsp)
063c70ab jmp       0x0000`0000`063C`6E95
063c70b0 movb      $0,0x43(%rsp)
063c70b5 jmp       0x0000`0000`063C`6E95

core::unicode::unicode_data::decode_prefix_sum:
063c70c0 push      %rax
063c70c1 mov       %ecx,%eax
063c70c3 mov       %eax,4(%rsp)
063c70c7 and       $0x1F`FFFF,%eax
063c70cc pop       %rcx
063c70cd ret

core::unicode::unicode_data::decode_length:
063c70d0 push      %rax
063c70d1 mov       %ecx,4(%rsp)
063c70d5 shr       $0x15,%ecx
063c70d8 mov       %ecx,(%rsp)
063c70db mov       (%rsp),%eax
063c70de mov       %eax,%eax
063c70e0 pop       %rcx
063c70e1 ret

core::unicode::unicode_data::skip_search::closure$0<32,707>:
063c70f0 sub       $0x48,%rsp
063c70f4 mov       %rdx,0x28(%rsp)
063c70f9 mov       %rcx,%rax
063c70fc mov       0x28(%rsp),%rcx
063c7101 mov       %rax,0x38(%rsp)
063c7106 mov       %rcx,0x40(%rsp)
063c710b mov       $0xB,%edx
063c7110 call      0x0000`0000`063C`7760
063c7115 mov       %eax,0x34(%rsp)
063c7119 mov       0x34(%rsp),%eax
063c711d add       $0x48,%rsp
063c7121 ret

core::unicode::unicode_data::skip_search::closure$1<32,707>:
063c7130 sub       $0x48,%rsp
063c7134 mov       %rdx,0x28(%rsp)
063c7139 mov       %rcx,0x30(%rsp)
063c713e mov       %rcx,0x38(%rsp)
063c7143 mov       %rdx,0x40(%rsp)
063c7148 cmp       $0x20,%rdx
063c714c setb      %al
063c714f test      $1,%al
063c7151 jne       0x0000`0000`063C`7155
063c7153 jmp       0x0000`0000`063C`716D
063c7155 mov       0x30(%rsp),%rax
063c715a mov       0x28(%rsp),%rcx
063c715f mov       (%rax,%rcx,4),%ecx
063c7162 call      0x0000`0000`063C`70C0
063c7167 mov       %eax,0x24(%rsp)
063c716b jmp       0x0000`0000`063C`7185
063c716d mov       0x28(%rsp),%rcx
063c7172 lea       0x63D`1170,%r8
063c7179 mov       $0x20,%edx
063c717e call      0x0000`0000`063B`8E90
063c7183 ud2
063c7185 mov       0x24(%rsp),%eax
063c7189 add       $0x48,%rsp
063c718d ret

core::num::impl$11::checked_sub:
063c7190 sub       $0x88,%rsp
063c7197 mov       %rcx,0x28(%rsp)
063c719c mov       %rdx,0x30(%rsp)
063c71a1 mov       %rcx,0x58(%rsp)
063c71a6 mov       %rdx,0x60(%rsp)
063c71ab sub       %rdx,%rcx
063c71ae mov       %rcx,0x68(%rsp)
063c71b3 setb      0x70(%rsp)
063c71b8 mov       0x68(%rsp),%rcx
063c71bd mov       0x70(%rsp),%al
063c71c1 mov       %rcx,0x78(%rsp)
063c71c6 mov       %al,0x87(%rsp)
063c71cd mov       %rcx,0x48(%rsp)
063c71d2 mov       %al,0x50(%rsp)
063c71d6 mov       0x48(%rsp),%rax
063c71db mov       %rax,8(%rsp)
063c71e0 mov       0x50(%rsp),%al
063c71e4 mov       %al,0x17(%rsp)
063c71e8 mov       0x17(%rsp),%al
063c71ec mov       8(%rsp),%rcx
063c71f1 mov       %rcx,0x38(%rsp)
063c71f6 mov       %al,%cl
063c71f8 and       $1,%cl
063c71fb mov       %cl,0x46(%rsp)
063c71ff and       $1,%al
063c7201 mov       %al,0x47(%rsp)
063c7205 mov       0x47(%rsp),%al
063c7209 mov       %al,7(%rsp)
063c720d mov       7(%rsp),%al
063c7211 test      $1,%al
063c7213 jne       0x0000`0000`063C`722C
063c7215 jmp       0x0000`0000`063C`7217
063c7217 mov       8(%rsp),%rax
063c721c mov       %rax,0x20(%rsp)
063c7221 movq      $1,0x18(%rsp)
063c722a jmp       0x0000`0000`063C`7235
063c722c movq      $0,0x18(%rsp)
063c7235 mov       0x18(%rsp),%rax
063c723a mov       0x20(%rsp),%rdx
063c723f add       $0x88,%rsp
063c7246 ret

core::num::impl$11::checked_mul:
063c7250 sub       $0x88,%rsp
063c7257 mov       %rcx,%rax
063c725a mov       %rax,0x28(%rsp)
063c725f mov       %rdx,0x30(%rsp)
063c7264 mov       %rax,0x58(%rsp)
063c7269 mov       %rdx,0x60(%rsp)
063c726e mul       %rdx
063c7271 mov       %rax,0x68(%rsp)
063c7276 seto      0x70(%rsp)
063c727b mov       0x68(%rsp),%rcx
063c7280 mov       0x70(%rsp),%al
063c7284 mov       %rcx,0x78(%rsp)
063c7289 mov       %al,0x87(%rsp)
063c7290 mov       %rcx,0x48(%rsp)
063c7295 mov       %al,0x50(%rsp)
063c7299 mov       0x48(%rsp),%rax
063c729e mov       %rax,8(%rsp)
063c72a3 mov       0x50(%rsp),%al
063c72a7 mov       %al,0x17(%rsp)
063c72ab mov       0x17(%rsp),%al
063c72af mov       8(%rsp),%rcx
063c72b4 mov       %rcx,0x38(%rsp)
063c72b9 mov       %al,%cl
063c72bb and       $1,%cl
063c72be mov       %cl,0x46(%rsp)
063c72c2 and       $1,%al
063c72c4 mov       %al,0x47(%rsp)
063c72c8 mov       0x47(%rsp),%al
063c72cc mov       %al,7(%rsp)
063c72d0 mov       7(%rsp),%al
063c72d4 test      $1,%al
063c72d6 jne       0x0000`0000`063C`72EF
063c72d8 jmp       0x0000`0000`063C`72DA
063c72da mov       8(%rsp),%rax
063c72df mov       %rax,0x20(%rsp)
063c72e4 movq      $1,0x18(%rsp)
063c72ed jmp       0x0000`0000`063C`72F8
063c72ef movq      $0,0x18(%rsp)
063c72f8 mov       0x18(%rsp),%rax
063c72fd mov       0x20(%rsp),%rdx
063c7302 add       $0x88,%rsp
063c7309 ret

core::num::impl$11::saturating_mul:
063c7310 sub       $0x58,%rsp
063c7314 mov       %rcx,0x40(%rsp)
063c7319 mov       %rdx,0x48(%rsp)
063c731e call      0x0000`0000`063C`7250
063c7323 mov       %rdx,0x38(%rsp)
063c7328 mov       %rax,0x30(%rsp)
063c732d mov       0x30(%rsp),%rax
063c7332 test      %rax,%rax
063c7335 je        0x0000`0000`063C`733D
063c7337 jmp       0x0000`0000`063C`7339
063c7339 jmp       0x0000`0000`063C`7348
063c733b ud2
063c733d movq      $0xFFFF`FFFF`FFFF`FFFF,0x28(%rsp)
063c7346 jmp       0x0000`0000`063C`7357
063c7348 mov       0x38(%rsp),%rax
063c734d mov       %rax,0x50(%rsp)
063c7352 mov       %rax,0x28(%rsp)
063c7357 mov       0x28(%rsp),%rax
063c735c add       $0x58,%rsp
063c7360 ret

core::clone::impls::impl$5::clone:
063c7370 push      %rax
063c7371 mov       %rcx,(%rsp)
063c7375 mov       (%rcx),%rax
063c7378 pop       %rcx
063c7379 ret

core::clone::impls::impl$6::clone:
063c7380 push      %rax
063c7381 mov       %rcx,(%rsp)
063c7385 mov       (%rcx),%al
063c7387 pop       %rcx
063c7388 ret

core::cmp::impl$10::eq:
063c7390 sub       $0x20,%rsp
063c7394 mov       %rcx,8(%rsp)
063c7399 mov       %rdx,0x10(%rsp)
063c739e mov       (%rcx),%al
063c73a0 mov       %al,0x1E(%rsp)
063c73a4 mov       (%rdx),%cl
063c73a6 mov       %cl,0x1F(%rsp)
063c73aa cmp       %cl,%al
063c73ac je        0x0000`0000`063C`73B5
063c73ae movb      $0,7(%rsp)
063c73b3 jmp       0x0000`0000`063C`73BA
063c73b5 movb      $1,7(%rsp)
063c73ba mov       7(%rsp),%al
063c73be and       $1,%al
063c73c0 movzbl    %al,%eax
063c73c3 add       $0x20,%rsp
063c73c7 ret

core::cmp::impls::impl$21::eq:
063c73d0 sub       $0x10,%rsp
063c73d4 mov       %rcx,(%rsp)
063c73d8 mov       %rdx,8(%rsp)
063c73dd mov       (%rcx),%rax
063c73e0 cmp       (%rdx),%rax
063c73e3 sete      %al
063c73e6 and       $1,%al
063c73e8 movzbl    %al,%eax
063c73eb add       $0x10,%rsp
063c73ef ret

core::cmp::impls::impl$24::eq:
063c73f0 sub       $0x10,%rsp
063c73f4 mov       %rcx,(%rsp)
063c73f8 mov       %rdx,8(%rsp)
063c73fd mov       (%rcx),%eax
063c73ff cmp       (%rdx),%eax
063c7401 sete      %al
063c7404 and       $1,%al
063c7406 movzbl    %al,%eax
063c7409 add       $0x10,%rsp
063c740d ret

core::cmp::impls::impl$54::lt:
063c7410 sub       $0x10,%rsp
063c7414 mov       %rcx,(%rsp)
063c7418 mov       %rdx,8(%rsp)
063c741d mov       (%rcx),%rax
063c7420 cmp       (%rdx),%rax
063c7423 setb      %al
063c7426 and       $1,%al
063c7428 movzbl    %al,%eax
063c742b add       $0x10,%rsp
063c742f ret

core::cmp::impls::impl$54::ge:
063c7430 sub       $0x10,%rsp
063c7434 mov       %rcx,(%rsp)
063c7438 mov       %rdx,8(%rsp)
063c743d mov       (%rcx),%rax
063c7440 cmp       (%rdx),%rax
063c7443 setae     %al
063c7446 and       $1,%al
063c7448 movzbl    %al,%eax
063c744b add       $0x10,%rsp
063c744f ret

core::cmp::impls::impl$55::cmp:
063c7450 sub       $0x28,%rsp
063c7454 mov       %rdx,(%rsp)
063c7458 mov       %rcx,8(%rsp)
063c745d mov       %rcx,0x18(%rsp)
063c7462 mov       %rdx,0x20(%rsp)
063c7467 mov       (%rcx),%rax
063c746a cmp       (%rdx),%rax
063c746d jb        0x0000`0000`063C`7482
063c746f mov       (%rsp),%rcx
063c7473 mov       8(%rsp),%rax
063c7478 mov       (%rax),%rax
063c747b cmp       (%rcx),%rax
063c747e je        0x0000`0000`063C`7497
063c7480 jmp       0x0000`0000`063C`7490
063c7482 movb      $0xFF,0x17(%rsp)
063c7487 mov       0x17(%rsp),%al
063c748b add       $0x28,%rsp
063c748f ret
063c7490 movb      $1,0x17(%rsp)
063c7495 jmp       0x0000`0000`063C`7487
063c7497 movb      $0,0x17(%rsp)
063c749c jmp       0x0000`0000`063C`7487

core::cmp::impls::impl$60::ge:
063c74a0 sub       $0x10,%rsp
063c74a4 mov       %rcx,(%rsp)
063c74a8 mov       %rdx,8(%rsp)
063c74ad mov       (%rcx),%eax
063c74af cmp       (%rdx),%eax
063c74b1 setae     %al
063c74b4 and       $1,%al
063c74b6 movzbl    %al,%eax
063c74b9 add       $0x10,%rsp
063c74bd ret

core::cmp::impls::impl$61::cmp:
063c74c0 sub       $0x28,%rsp
063c74c4 mov       %rdx,(%rsp)
063c74c8 mov       %rcx,8(%rsp)
063c74cd mov       %rcx,0x18(%rsp)
063c74d2 mov       %rdx,0x20(%rsp)
063c74d7 mov       (%rcx),%eax
063c74d9 cmp       (%rdx),%eax
063c74db jb        0x0000`0000`063C`74EE
063c74dd mov       (%rsp),%rcx
063c74e1 mov       8(%rsp),%rax
063c74e6 mov       (%rax),%eax
063c74e8 cmp       (%rcx),%eax
063c74ea je        0x0000`0000`063C`7503
063c74ec jmp       0x0000`0000`063C`74FC
063c74ee movb      $0xFF,0x17(%rsp)
063c74f3 mov       0x17(%rsp),%al
063c74f7 add       $0x28,%rsp
063c74fb ret
063c74fc movb      $1,0x17(%rsp)
063c7501 jmp       0x0000`0000`063C`74F3
063c7503 movb      $0,0x17(%rsp)
063c7508 jmp       0x0000`0000`063C`74F3

core::ops::arith::impl$56::sub:
063c7510 sub       $0x38,%rsp
063c7514 mov       %rcx,0x28(%rsp)
063c7519 mov       %rdx,0x30(%rsp)
063c751e sub       %rdx,%rcx
063c7521 mov       %rcx,0x20(%rsp)
063c7526 setb      %al
063c7529 test      $1,%al
063c752b jne       0x0000`0000`063C`7537
063c752d mov       0x20(%rsp),%rax
063c7532 add       $0x38,%rsp
063c7536 ret
063c7537 lea       0x63C`E1F0,%rcx
063c753e lea       0x63D`1200,%r8
063c7545 mov       $0x21,%edx
063c754a call      0x0000`0000`063B`8E30
063c754f ud2

core::ops::arith::impl$59::sub:
063c7560 sub       $0x38,%rsp
063c7564 mov       %ecx,0x30(%rsp)
063c7568 mov       %edx,0x34(%rsp)
063c756c sub       %edx,%ecx
063c756e mov       %ecx,0x2C(%rsp)
063c7572 setb      %al
063c7575 test      $1,%al
063c7577 jne       0x0000`0000`063C`7582
063c7579 mov       0x2C(%rsp),%eax
063c757d add       $0x38,%rsp
063c7581 ret
063c7582 lea       0x63C`E1F0,%rcx
063c7589 lea       0x63D`1200,%r8
063c7590 mov       $0x21,%edx
063c7595 call      0x0000`0000`063B`8E30
063c759a ud2

core::ops::arith::impl$168::div:
063c75a0 sub       $0x48,%rsp
063c75a4 mov       %rdx,0x28(%rsp)
063c75a9 mov       %rcx,0x30(%rsp)
063c75ae mov       %rcx,0x38(%rsp)
063c75b3 mov       %rdx,0x40(%rsp)
063c75b8 cmp       $0,%rdx
063c75bc sete      %al
063c75bf test      $1,%al
063c75c1 jne       0x0000`0000`063C`75D7
063c75c3 mov       0x28(%rsp),%rcx
063c75c8 mov       0x30(%rsp),%rax
063c75cd xor       %edx,%edx
063c75cf div       %rcx
063c75d2 add       $0x48,%rsp
063c75d6 ret
063c75d7 lea       0x63C`E310,%rcx
063c75de lea       0x63D`1218,%r8
063c75e5 mov       $0x19,%edx
063c75ea call      0x0000`0000`063B`8E30
063c75ef ud2

core::ops::arith::impl$171::div:
063c7600 sub       $0x38,%rsp
063c7604 mov       %edx,0x28(%rsp)
063c7608 mov       %ecx,0x2C(%rsp)
063c760c mov       %ecx,0x30(%rsp)
063c7610 mov       %edx,0x34(%rsp)
063c7614 cmp       $0,%edx
063c7617 sete      %al
063c761a test      $1,%al
063c761c jne       0x0000`0000`063C`762F
063c761e mov       0x28(%rsp),%ecx
063c7622 mov       0x2C(%rsp),%eax
063c7626 xor       %edx,%edx
063c7628 div       %ecx
063c762a add       $0x38,%rsp
063c762e ret
063c762f lea       0x63C`E310,%rcx
063c7636 lea       0x63D`1218,%r8
063c763d mov       $0x19,%edx
063c7642 call      0x0000`0000`063B`8E30
063c7647 ud2

core::ops::arith::impl$224::rem:
063c7650 sub       $0x48,%rsp
063c7654 mov       %rdx,0x28(%rsp)
063c7659 mov       %rcx,0x30(%rsp)
063c765e mov       %rcx,0x38(%rsp)
063c7663 mov       %rdx,0x40(%rsp)
063c7668 cmp       $0,%rdx
063c766c sete      %al
063c766f test      $1,%al
063c7671 jne       0x0000`0000`063C`768A
063c7673 mov       0x28(%rsp),%rcx
063c7678 mov       0x30(%rsp),%rax
063c767d xor       %edx,%edx
063c767f div       %rcx
063c7682 mov       %rdx,%rax
063c7685 add       $0x48,%rsp
063c7689 ret
063c768a lea       0x63C`E330,%rcx
063c7691 lea       0x63D`1230,%r8
063c7698 mov       $0x39,%edx
063c769d call      0x0000`0000`063B`8E30
063c76a2 ud2

core::ops::arith::impl$227::rem:
063c76b0 sub       $0x38,%rsp
063c76b4 mov       %edx,0x28(%rsp)
063c76b8 mov       %ecx,0x2C(%rsp)
063c76bc mov       %ecx,0x30(%rsp)
063c76c0 mov       %edx,0x34(%rsp)
063c76c4 cmp       $0,%edx
063c76c7 sete      %al
063c76ca test      $1,%al
063c76cc jne       0x0000`0000`063C`76E1
063c76ce mov       0x28(%rsp),%ecx
063c76d2 mov       0x2C(%rsp),%eax
063c76d6 xor       %edx,%edx
063c76d8 div       %ecx
063c76da mov       %edx,%eax
063c76dc add       $0x38,%rsp
063c76e0 ret
063c76e1 lea       0x63C`E330,%rcx
063c76e8 lea       0x63D`1230,%r8
063c76ef mov       $0x39,%edx
063c76f4 call      0x0000`0000`063B`8E30
063c76f9 ud2

core::ops::bit::impl$311::shl:
063c7700 sub       $0x38,%rsp
063c7704 mov       %edx,0x28(%rsp)
063c7708 mov       %ecx,%edx
063c770a mov       0x28(%rsp),%ecx
063c770e mov       %edx,0x30(%rsp)
063c7712 mov       %ecx,0x34(%rsp)
063c7716 mov       %ecx,%eax
063c7718 and       $0xFFFF`FFE0,%eax
063c771b cmp       $0,%eax
063c771e setne     %al
063c7721 and       $0x1F,%ecx
063c7724 shl       %cl,%edx
063c7726 mov       %edx,0x2C(%rsp)
063c772a test      $1,%al
063c772c jne       0x0000`0000`063C`7737
063c772e mov       0x2C(%rsp),%eax
063c7732 add       $0x38,%rsp
063c7736 ret
063c7737 lea       0x63C`E270,%rcx
063c773e lea       0x63D`12C0,%r8
063c7745 mov       $0x23,%edx
063c774a call      0x0000`0000`063B`8E30
063c774f ud2

core::ops::bit::impl$312::shl:
063c7760 sub       $0x38,%rsp
063c7764 mov       %rcx,0x28(%rsp)
063c7769 mov       %edx,0x34(%rsp)
063c776d mov       (%rcx),%ecx
063c776f call      0x0000`0000`063C`7700
063c7774 mov       %eax,0x24(%rsp)
063c7778 mov       0x24(%rsp),%eax
063c777c add       $0x38,%rsp
063c7780 ret

core::iter::range::impl$37::forward_unchecked:
063c7790 sub       $0x30,%rsp
063c7794 mov       %rcx,8(%rsp)
063c7799 mov       %rdx,0x10(%rsp)
063c779e mov       %rcx,0x18(%rsp)
063c77a3 mov       %rdx,0x20(%rsp)
063c77a8 add       %rdx,%rcx
063c77ab mov       %rcx,0x28(%rsp)
063c77b0 mov       0x28(%rsp),%rax
063c77b5 mov       %rax,(%rsp)
063c77b9 mov       (%rsp),%rax
063c77bd add       $0x30,%rsp
063c77c1 ret

core::iter::traits::accum::impl$48::sum<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> > >:
063c77d0 sub       $0x38,%rsp
063c77d4 mov       %rcx,0x28(%rsp)
063c77d9 mov       %rdx,0x30(%rsp)
063c77de xor       %eax,%eax
063c77e0 mov       %eax,%r8d
063c77e3 call      0x0000`0000`063B`7D40
063c77e8 mov       %rax,0x20(%rsp)
063c77ed mov       0x20(%rsp),%rax
063c77f2 add       $0x38,%rsp
063c77f6 ret

core::iter::traits::accum::impl$48::sum::closure$0<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> > >:
063c7800 sub       $0x48,%rsp
063c7804 mov       %rcx,0x30(%rsp)
063c7809 mov       %rdx,0x38(%rsp)
063c780e mov       %r8,0x40(%rsp)
063c7813 add       %r8,%rdx
063c7816 mov       %rdx,0x28(%rsp)
063c781b setb      %al
063c781e test      $1,%al
063c7820 jne       0x0000`0000`063C`782C
063c7822 mov       0x28(%rsp),%rax
063c7827 add       $0x48,%rsp
063c782b ret
063c782c lea       0x63C`E220,%rcx
063c7833 lea       0x63D`1358,%r8
063c783a mov       $0x1C,%edx
063c783f call      0x0000`0000`063B`8E30
063c7844 ud2

core::fmt::num::impl$8::to_u64:
063c7850 push      %rax
063c7851 mov       %rcx,(%rsp)
063c7855 movzbl    (%rcx),%eax
063c7858 pop       %rcx
063c7859 ret

core::fmt::num::impl$10::zero:
063c7860 xor       %eax,%eax
063c7862 ret

core::fmt::num::impl$10::from_u8:
063c7870 push      %rax
063c7871 mov       %cl,7(%rsp)
063c7875 movzbl    %cl,%eax
063c7878 pop       %rcx
063c7879 ret

core::fmt::num::impl$10::to_u8:
063c7880 push      %rax
063c7881 mov       %rcx,(%rsp)
063c7885 mov       (%rcx),%eax
063c7887 pop       %rcx
063c7888 ret

core::fmt::num::impl$10::to_u64:
063c7890 push      %rax
063c7891 mov       %rcx,(%rsp)
063c7895 mov       (%rcx),%eax
063c7897 pop       %rcx
063c7898 ret

core::fmt::num::impl$13::zero:
063c78a0 xor       %eax,%eax
063c78a2 ret

core::fmt::num::impl$13::from_u8:
063c78b0 push      %rax
063c78b1 mov       %cl,7(%rsp)
063c78b5 movzbl    %cl,%eax
063c78b8 pop       %rcx
063c78b9 ret

core::fmt::num::impl$13::to_u8:
063c78c0 push      %rax
063c78c1 mov       %rcx,(%rsp)
063c78c5 mov       (%rcx),%rax
063c78c8 pop       %rcx
063c78c9 ret

core::fmt::num::impl$13::to_u64:
063c78d0 push      %rax
063c78d1 mov       %rcx,(%rsp)
063c78d5 mov       (%rcx),%rax
063c78d8 pop       %rcx
063c78d9 ret

core::fmt::num::impl$28::digit:
063c78e0 sub       $0xB8,%rsp
063c78e7 mov       %cl,0x5D(%rsp)
063c78eb mov       %cl,0xB5(%rsp)
063c78f2 xor       %eax,%eax
063c78f4 cmp       %cl,%al
063c78f6 jbe       0x0000`0000`063C`7904
063c78f8 mov       0x5D(%rsp),%cl
063c78fc mov       $0xA,%al
063c78fe cmp       %cl,%al
063c7900 jbe       0x0000`0000`063C`7974
063c7902 jmp       0x0000`0000`063C`7954
063c7904 mov       0x5D(%rsp),%al
063c7908 cmp       $9,%al
063c790a ja        0x0000`0000`063C`78F8
063c790c mov       0x5D(%rsp),%al
063c7910 mov       %al,0xB6(%rsp)
063c7917 add       $0x30,%al
063c7919 mov       %al,0x5C(%rsp)
063c791d setb      %al
063c7920 test      $1,%al
063c7922 jne       0x0000`0000`063C`792E
063c7924 mov       0x5C(%rsp),%al
063c7928 mov       %al,0x5E(%rsp)
063c792c jmp       0x0000`0000`063C`7948
063c792e lea       0x63C`E220,%rcx
063c7935 lea       0x63D`13B0,%r8
063c793c mov       $0x1C,%edx
063c7941 call      0x0000`0000`063B`8E30
063c7946 ud2
063c7948 mov       0x5E(%rsp),%al
063c794c add       $0xB8,%rsp
063c7953 ret
063c7954 mov       0x5D(%rsp),%al
063c7958 mov       %al,0x5F(%rsp)
063c795c lea       0x63D`13F8,%rcx
063c7963 call      0x0000`0000`063C`8800
063c7968 mov       %rax,0x48(%rsp)
063c796d mov       %rdx,0x50(%rsp)
063c7972 jmp       0x0000`0000`063C`79E8
063c7974 mov       0x5D(%rsp),%al
063c7978 cmp       $0xF,%al
063c797a ja        0x0000`0000`063C`7954
063c797c mov       0x5D(%rsp),%al
063c7980 mov       %al,0xB7(%rsp)
063c7987 sub       $0xA,%al
063c7989 mov       %al,0x47(%rsp)
063c798d setb      %al
063c7990 test      $1,%al
063c7992 jne       0x0000`0000`063C`79A7
063c7994 mov       0x47(%rsp),%al
063c7998 add       $0x61,%al
063c799a mov       %al,0x46(%rsp)
063c799e setb      %al
063c79a1 test      $1,%al
063c79a3 jne       0x0000`0000`063C`79CE
063c79a5 jmp       0x0000`0000`063C`79C1
063c79a7 lea       0x63C`E1F0,%rcx
063c79ae lea       0x63D`13C8,%r8
063c79b5 mov       $0x21,%edx
063c79ba call      0x0000`0000`063B`8E30
063c79bf ud2
063c79c1 mov       0x46(%rsp),%al
063c79c5 mov       %al,0x5E(%rsp)
063c79c9 jmp       0x0000`0000`063C`7948
063c79ce lea       0x63C`E220,%rcx
063c79d5 lea       0x63D`13E0,%r8
063c79dc mov       $0x1C,%edx
063c79e1 call      0x0000`0000`063B`8E30
063c79e6 ud2
063c79e8 lea       0x5F(%rsp),%rcx
063c79ed call      0x0000`0000`063C`8800
063c79f2 mov       %rax,0x30(%rsp)
063c79f7 mov       %rdx,0x38(%rsp)
063c79fc mov       0x38(%rsp),%rax
063c7a01 mov       0x30(%rsp),%rcx
063c7a06 mov       0x50(%rsp),%rdx
063c7a0b mov       0x48(%rsp),%r8
063c7a10 mov       %r8,0x90(%rsp)
063c7a18 mov       %rdx,0x98(%rsp)
063c7a20 mov       %rcx,0xA0(%rsp)
063c7a28 mov       %rax,0xA8(%rsp)
063c7a30 lea       0x90(%rsp),%r9
063c7a38 lea       0x60(%rsp),%rcx
063c7a3d lea       0x63D`1390,%rdx
063c7a44 mov       $2,%r8d
063c7a4a movq      $2,0x20(%rsp)
063c7a53 call      0x0000`0000`063B`DE30
063c7a58 lea       0x63D`1400,%rdx
063c7a5f lea       0x60(%rsp),%rcx
063c7a64 call      0x0000`0000`063B`8F40
063c7a69 ud2

core::fmt::num::impl$29::digit:
063c7a70 sub       $0xB8,%rsp
063c7a77 mov       %cl,0x5D(%rsp)
063c7a7b mov       %cl,0xB5(%rsp)
063c7a82 xor       %eax,%eax
063c7a84 cmp       %cl,%al
063c7a86 jbe       0x0000`0000`063C`7A94
063c7a88 mov       0x5D(%rsp),%cl
063c7a8c mov       $0xA,%al
063c7a8e cmp       %cl,%al
063c7a90 jbe       0x0000`0000`063C`7B04
063c7a92 jmp       0x0000`0000`063C`7AE4
063c7a94 mov       0x5D(%rsp),%al
063c7a98 cmp       $9,%al
063c7a9a ja        0x0000`0000`063C`7A88
063c7a9c mov       0x5D(%rsp),%al
063c7aa0 mov       %al,0xB6(%rsp)
063c7aa7 add       $0x30,%al
063c7aa9 mov       %al,0x5C(%rsp)
063c7aad setb      %al
063c7ab0 test      $1,%al
063c7ab2 jne       0x0000`0000`063C`7ABE
063c7ab4 mov       0x5C(%rsp),%al
063c7ab8 mov       %al,0x5E(%rsp)
063c7abc jmp       0x0000`0000`063C`7AD8
063c7abe lea       0x63C`E220,%rcx
063c7ac5 lea       0x63D`1418,%r8
063c7acc mov       $0x1C,%edx
063c7ad1 call      0x0000`0000`063B`8E30
063c7ad6 ud2
063c7ad8 mov       0x5E(%rsp),%al
063c7adc add       $0xB8,%rsp
063c7ae3 ret
063c7ae4 mov       0x5D(%rsp),%al
063c7ae8 mov       %al,0x5F(%rsp)
063c7aec lea       0x63D`13F8,%rcx
063c7af3 call      0x0000`0000`063C`8800
063c7af8 mov       %rax,0x48(%rsp)
063c7afd mov       %rdx,0x50(%rsp)
063c7b02 jmp       0x0000`0000`063C`7B78
063c7b04 mov       0x5D(%rsp),%al
063c7b08 cmp       $0xF,%al
063c7b0a ja        0x0000`0000`063C`7AE4
063c7b0c mov       0x5D(%rsp),%al
063c7b10 mov       %al,0xB7(%rsp)
063c7b17 sub       $0xA,%al
063c7b19 mov       %al,0x47(%rsp)
063c7b1d setb      %al
063c7b20 test      $1,%al
063c7b22 jne       0x0000`0000`063C`7B37
063c7b24 mov       0x47(%rsp),%al
063c7b28 add       $0x41,%al
063c7b2a mov       %al,0x46(%rsp)
063c7b2e setb      %al
063c7b31 test      $1,%al
063c7b33 jne       0x0000`0000`063C`7B5E
063c7b35 jmp       0x0000`0000`063C`7B51
063c7b37 lea       0x63C`E1F0,%rcx
063c7b3e lea       0x63D`1430,%r8
063c7b45 mov       $0x21,%edx
063c7b4a call      0x0000`0000`063B`8E30
063c7b4f ud2
063c7b51 mov       0x46(%rsp),%al
063c7b55 mov       %al,0x5E(%rsp)
063c7b59 jmp       0x0000`0000`063C`7AD8
063c7b5e lea       0x63C`E220,%rcx
063c7b65 lea       0x63D`1448,%r8
063c7b6c mov       $0x1C,%edx
063c7b71 call      0x0000`0000`063B`8E30
063c7b76 ud2
063c7b78 lea       0x5F(%rsp),%rcx
063c7b7d call      0x0000`0000`063C`8800
063c7b82 mov       %rax,0x30(%rsp)
063c7b87 mov       %rdx,0x38(%rsp)
063c7b8c mov       0x38(%rsp),%rax
063c7b91 mov       0x30(%rsp),%rcx
063c7b96 mov       0x50(%rsp),%rdx
063c7b9b mov       0x48(%rsp),%r8
063c7ba0 mov       %r8,0x90(%rsp)
063c7ba8 mov       %rdx,0x98(%rsp)
063c7bb0 mov       %rcx,0xA0(%rsp)
063c7bb8 mov       %rax,0xA8(%rsp)
063c7bc0 lea       0x90(%rsp),%r9
063c7bc8 lea       0x60(%rsp),%rcx
063c7bcd lea       0x63D`1390,%rdx
063c7bd4 mov       $2,%r8d
063c7bda movq      $2,0x20(%rsp)
063c7be3 call      0x0000`0000`063B`DE30
063c7be8 lea       0x63D`1460,%rdx
063c7bef lea       0x60(%rsp),%rcx
063c7bf4 call      0x0000`0000`063B`8F40
063c7bf9 ud2

core::fmt::num::impl$36::fmt:
063c7c00 sub       $0x38,%rsp
063c7c04 mov       %rdx,%r8
063c7c07 mov       %rcx,0x28(%rsp)
063c7c0c mov       %r8,0x30(%rsp)
063c7c11 mov       (%rcx),%rdx
063c7c14 lea       0x63C`E370,%rcx
063c7c1b call      0x0000`0000`063B`B290
063c7c20 mov       %al,0x27(%rsp)
063c7c24 mov       0x27(%rsp),%al
063c7c28 and       $1,%al
063c7c2a movzbl    %al,%eax
063c7c2d add       $0x38,%rsp
063c7c31 ret

core::fmt::num::impl$37::fmt:
063c7c40 sub       $0x38,%rsp
063c7c44 mov       %rdx,%r8
063c7c47 mov       %rcx,0x28(%rsp)
063c7c4c mov       %r8,0x30(%rsp)
063c7c51 mov       (%rcx),%rdx
063c7c54 lea       0x63C`E370,%rcx
063c7c5b call      0x0000`0000`063B`AC80
063c7c60 mov       %al,0x27(%rsp)
063c7c64 mov       0x27(%rsp),%al
063c7c68 and       $1,%al
063c7c6a movzbl    %al,%eax
063c7c6d add       $0x38,%rsp
063c7c71 ret

core::fmt::num::impl$61::fmt:
063c7c80 sub       $0x38,%rsp
063c7c84 mov       %rdx,%r8
063c7c87 mov       %rcx,0x28(%rsp)
063c7c8c mov       %r8,0x30(%rsp)
063c7c91 mov       (%rcx),%edx
063c7c93 lea       0x63C`E370,%rcx
063c7c9a call      0x0000`0000`063B`A690
063c7c9f mov       %al,0x27(%rsp)
063c7ca3 mov       0x27(%rsp),%al
063c7ca7 and       $1,%al
063c7ca9 movzbl    %al,%eax
063c7cac add       $0x38,%rsp
063c7cb0 ret

core::fmt::num::impl$89::fmt:
063c7cc0 sub       $0x58,%rsp
063c7cc4 mov       %rdx,0x30(%rsp)
063c7cc9 mov       %rcx,%rax
063c7ccc mov       0x30(%rsp),%rcx
063c7cd1 mov       %rax,0x38(%rsp)
063c7cd6 mov       %rax,0x48(%rsp)
063c7cdb mov       %rcx,0x50(%rsp)
063c7ce0 call      0x0000`0000`063B`FB50
063c7ce5 mov       %al,0x46(%rsp)
063c7ce9 mov       0x46(%rsp),%al
063c7ced test      $1,%al
063c7cef jne       0x0000`0000`063C`7D03
063c7cf1 jmp       0x0000`0000`063C`7CF3
063c7cf3 mov       0x30(%rsp),%rcx
063c7cf8 call      0x0000`0000`063B`FB70
063c7cfd mov       %al,0x2F(%rsp)
063c7d01 jmp       0x0000`0000`063C`7D26
063c7d03 mov       0x30(%rsp),%rdx
063c7d08 mov       0x38(%rsp),%rcx
063c7d0d call      0x0000`0000`063C`7C00
063c7d12 and       $1,%al
063c7d14 mov       %al,0x47(%rsp)
063c7d18 mov       0x47(%rsp),%al
063c7d1c and       $1,%al
063c7d1e movzbl    %al,%eax
063c7d21 add       $0x58,%rsp
063c7d25 ret
063c7d26 mov       0x2F(%rsp),%al
063c7d2a test      $1,%al
063c7d2c jne       0x0000`0000`063C`7D47
063c7d2e jmp       0x0000`0000`063C`7D30
063c7d30 mov       0x30(%rsp),%rdx
063c7d35 mov       0x38(%rsp),%rcx
063c7d3a call      0x0000`0000`063C`86F0
063c7d3f and       $1,%al
063c7d41 mov       %al,0x47(%rsp)
063c7d45 jmp       0x0000`0000`063C`7D18
063c7d47 mov       0x30(%rsp),%rdx
063c7d4c mov       0x38(%rsp),%rcx
063c7d51 call      0x0000`0000`063C`7C40
063c7d56 and       $1,%al
063c7d58 mov       %al,0x47(%rsp)
063c7d5c jmp       0x0000`0000`063C`7D18

core::fmt::num::imp::fmt_u64:
063c7d60 sub       $0x2D8,%rsp
063c7d67 mov       %r8,0x128(%rsp)
063c7d6f mov       %dl,0x136(%rsp)
063c7d76 mov       %rcx,0x138(%rsp)
063c7d7e and       $1,%dl
063c7d81 mov       %dl,0x17F(%rsp)
063c7d88 mov       %r8,0x180(%rsp)
063c7d90 mov       0x1D7(%rsp),%al
063c7d97 mov       %al,0x137(%rsp)
063c7d9e mov       0x137(%rsp),%dl
063c7da5 lea       0x141(%rsp),%rcx
063c7dad mov       $0x27,%r8d
063c7db3 call      0x0000`0000`063C`AB00
063c7db8 movq      $0x27,0x168(%rsp)
063c7dc4 lea       0x141(%rsp),%rcx
063c7dcc mov       %rcx,0x1D8(%rsp)
063c7dd4 movq      $0x27,0x1E0(%rsp)
063c7de0 mov       $0x27,%edx
063c7de5 call      0x0000`0000`063C`2C80
063c7dea mov       %rax,0x120(%rsp)
063c7df2 mov       %rax,0x188(%rsp)
063c7dfa mov       0x63C`F440,%rcx
063c7e01 mov       $0xC8,%edx
063c7e06 call      0x0000`0000`063C`2BE0
063c7e0b mov       %rax,0x118(%rsp)
063c7e13 mov       %rax,0x190(%rsp)
063c7e1b jmp       0x0000`0000`063C`7E1D
063c7e1d mov       $8,%eax
063c7e22 cmp       $2,%rax
063c7e26 setae     %al
063c7e29 xor       $0xFF,%al
063c7e2b test      $1,%al
063c7e2d jne       0x0000`0000`063C`7E3F
063c7e2f cmpq      $0x2710,0x138(%rsp)
063c7e3b jae       0x0000`0000`063C`7E7D
063c7e3d jmp       0x0000`0000`063C`7E59
063c7e3f lea       0x63D`1478,%rcx
063c7e46 lea       0x63D`14B0,%r8
063c7e4d mov       $0x33,%edx
063c7e52 call      0x0000`0000`063B`8E30
063c7e57 ud2
063c7e59 mov       0x138(%rsp),%rax
063c7e61 mov       %rax,0x170(%rsp)
063c7e69 cmpq      $0x64,0x170(%rsp)
063c7e72 jge       0x0000`0000`063C`8142
063c7e78 jmp       0x0000`0000`063C`812E
063c7e7d mov       0x138(%rsp),%rax
063c7e85 mov       $0x2710,%ecx
063c7e8a xor       %edx,%edx
063c7e8c div       %rcx
063c7e8f mov       %rdx,0x110(%rsp)
063c7e97 mov       %rdx,0x198(%rsp)
063c7e9f mov       0x138(%rsp),%rax
063c7ea7 mov       $0x2710,%ecx
063c7eac xor       %edx,%edx
063c7eae div       %rcx
063c7eb1 mov       0x110(%rsp),%rdx
063c7eb9 mov       %rax,0x138(%rsp)
063c7ec1 movabs    $0x8000`0000`0000`0000,%rax
063c7ecb cmp       %rax,%rdx
063c7ece sete      %al
063c7ed1 and       $0,%al
063c7ed3 test      $1,%al
063c7ed5 jne       0x0000`0000`063C`7EF7
063c7ed7 mov       0x110(%rsp),%rax
063c7edf mov       $0x64,%ecx
063c7ee4 cqto
063c7ee6 idiv      %rcx
063c7ee9 shl       $1,%rax
063c7eed mov       %rax,0x108(%rsp)
063c7ef5 jmp       0x0000`0000`063C`7F11
063c7ef7 lea       0x63C`E2F0,%rcx
063c7efe lea       0x63D`14B0,%r8
063c7f05 mov       $0x1F,%edx
063c7f0a call      0x0000`0000`063B`8E30
063c7f0f ud2
063c7f11 mov       0x110(%rsp),%rax
063c7f19 mov       0x108(%rsp),%rcx
063c7f21 mov       %rcx,0x1A0(%rsp)
063c7f29 movabs    $0x8000`0000`0000`0000,%rcx
063c7f33 cmp       %rcx,%rax
063c7f36 sete      %al
063c7f39 and       $0,%al
063c7f3b test      $1,%al
063c7f3d jne       0x0000`0000`063C`7F5F
063c7f3f mov       0x110(%rsp),%rax
063c7f47 mov       $0x64,%ecx
063c7f4c cqto
063c7f4e idiv      %rcx
063c7f51 shl       $1,%rdx
063c7f55 mov       %rdx,0x100(%rsp)
063c7f5d jmp       0x0000`0000`063C`7F79
063c7f5f lea       0x63D`14D0,%rcx
063c7f66 lea       0x63D`14B0,%r8
063c7f6d mov       $0x30,%edx
063c7f72 call      0x0000`0000`063B`8E30
063c7f77 ud2
063c7f79 mov       0x100(%rsp),%rax
063c7f81 mov       %rax,0x1A8(%rsp)
063c7f89 mov       0x168(%rsp),%rax
063c7f91 sub       $4,%rax
063c7f95 mov       %rax,0xF8(%rsp)
063c7f9d seto      %al
063c7fa0 test      $1,%al
063c7fa2 jne       0x0000`0000`063C`7FF1
063c7fa4 mov       0x108(%rsp),%rcx
063c7fac mov       0x118(%rsp),%rax
063c7fb4 mov       0xF8(%rsp),%rdx
063c7fbc mov       %rdx,0x168(%rsp)
063c7fc4 mov       %rax,0x230(%rsp)
063c7fcc mov       %rcx,0x238(%rsp)
063c7fd4 add       %rcx,%rax
063c7fd7 mov       %rax,0x240(%rsp)
063c7fdf mov       0x240(%rsp),%rax
063c7fe7 mov       %rax,0xF0(%rsp)
063c7fef jmp       0x0000`0000`063C`800B
063c7ff1 lea       0x63C`E1F0,%rcx
063c7ff8 lea       0x63D`14B0,%r8
063c7fff mov       $0x21,%edx
063c8004 call      0x0000`0000`063B`8E30
063c8009 ud2
063c800b mov       0x120(%rsp),%rax
063c8013 mov       0x168(%rsp),%rcx
063c801b mov       %rax,0x2C0(%rsp)
063c8023 mov       %rcx,0x2C8(%rsp)
063c802b add       %rcx,%rax
063c802e mov       %rax,0x2D0(%rsp)
063c8036 mov       0x2D0(%rsp),%rax
063c803e mov       %rax,0xE8(%rsp)
063c8046 mov       0xE8(%rsp),%rdx
063c804e mov       0xF0(%rsp),%rcx
063c8056 mov       $2,%r8d
063c805c call      0x0000`0000`063B`4960
063c8061 mov       0x100(%rsp),%rcx
063c8069 mov       0x118(%rsp),%rax
063c8071 mov       %rax,0x218(%rsp)
063c8079 mov       %rcx,0x220(%rsp)
063c8081 add       %rcx,%rax
063c8084 mov       %rax,0x228(%rsp)
063c808c mov       0x228(%rsp),%rax
063c8094 mov       %rax,0xE0(%rsp)
063c809c mov       0x168(%rsp),%rax
063c80a4 add       $2,%rax
063c80a8 mov       %rax,0xD8(%rsp)
063c80b0 seto      %al
063c80b3 test      $1,%al
063c80b5 jne       0x0000`0000`063C`80F4
063c80b7 mov       0xD8(%rsp),%rcx
063c80bf mov       0x120(%rsp),%rax
063c80c7 mov       %rax,0x2A8(%rsp)
063c80cf mov       %rcx,0x2B0(%rsp)
063c80d7 add       %rcx,%rax
063c80da mov       %rax,0x2B8(%rsp)
063c80e2 mov       0x2B8(%rsp),%rax
063c80ea mov       %rax,0xD0(%rsp)
063c80f2 jmp       0x0000`0000`063C`810E
063c80f4 lea       0x63C`E220,%rcx
063c80fb lea       0x63D`14B0,%r8
063c8102 mov       $0x1C,%edx
063c8107 call      0x0000`0000`063B`8E30
063c810c ud2
063c810e mov       0xD0(%rsp),%rdx
063c8116 mov       0xE0(%rsp),%rcx
063c811e mov       $2,%r8d
063c8124 call      0x0000`0000`063B`4960
063c8129 jmp       0x0000`0000`063C`7E2F
063c812e cmpq      $0xA,0x170(%rsp)
063c8137 jl        0x0000`0000`063C`82F9
063c813d jmp       0x0000`0000`063C`82E0
063c8142 mov       0x170(%rsp),%rax
063c814a mov       %rax,0xC8(%rsp)
063c8152 movabs    $0x8000`0000`0000`0000,%rcx
063c815c cmp       %rcx,%rax
063c815f sete      %al
063c8162 and       $0,%al
063c8164 test      $1,%al
063c8166 jne       0x0000`0000`063C`8188
063c8168 mov       0xC8(%rsp),%rax
063c8170 mov       $0x64,%ecx
063c8175 cqto
063c8177 idiv      %rcx
063c817a shl       $1,%rdx
063c817e mov       %rdx,0xC0(%rsp)
063c8186 jmp       0x0000`0000`063C`81A2
063c8188 lea       0x63D`14D0,%rcx
063c818f lea       0x63D`14B0,%r8
063c8196 mov       $0x30,%edx
063c819b call      0x0000`0000`063B`8E30
063c81a0 ud2
063c81a2 mov       0xC0(%rsp),%rax
063c81aa mov       %rax,0x1B0(%rsp)
063c81b2 movabs    $0x8000`0000`0000`0000,%rax
063c81bc cmp       %rax,0x170(%rsp)
063c81c4 sete      %al
063c81c7 and       $0,%al
063c81c9 test      $1,%al
063c81cb jne       0x0000`0000`063C`8204
063c81cd mov       0x170(%rsp),%rax
063c81d5 mov       $0x64,%ecx
063c81da cqto
063c81dc idiv      %rcx
063c81df mov       %rax,0x170(%rsp)
063c81e7 mov       0x168(%rsp),%rax
063c81ef sub       $2,%rax
063c81f3 mov       %rax,0xB8(%rsp)
063c81fb seto      %al
063c81fe test      $1,%al
063c8200 jne       0x0000`0000`063C`826B
063c8202 jmp       0x0000`0000`063C`821E
063c8204 lea       0x63C`E2F0,%rcx
063c820b lea       0x63D`14B0,%r8
063c8212 mov       $0x1F,%edx
063c8217 call      0x0000`0000`063B`8E30
063c821c ud2
063c821e mov       0xC0(%rsp),%rcx
063c8226 mov       0x118(%rsp),%rax
063c822e mov       0xB8(%rsp),%rdx
063c8236 mov       %rdx,0x168(%rsp)
063c823e mov       %rax,0x200(%rsp)
063c8246 mov       %rcx,0x208(%rsp)
063c824e add       %rcx,%rax
063c8251 mov       %rax,0x210(%rsp)
063c8259 mov       0x210(%rsp),%rax
063c8261 mov       %rax,0xB0(%rsp)
063c8269 jmp       0x0000`0000`063C`8285
063c826b lea       0x63C`E1F0,%rcx
063c8272 lea       0x63D`14B0,%r8
063c8279 mov       $0x21,%edx
063c827e call      0x0000`0000`063B`8E30
063c8283 ud2
063c8285 mov       0x120(%rsp),%rax
063c828d mov       0x168(%rsp),%rcx
063c8295 mov       %rax,0x290(%rsp)
063c829d mov       %rcx,0x298(%rsp)
063c82a5 add       %rcx,%rax
063c82a8 mov       %rax,0x2A0(%rsp)
063c82b0 mov       0x2A0(%rsp),%rax
063c82b8 mov       %rax,0xA8(%rsp)
063c82c0 mov       0xA8(%rsp),%rdx
063c82c8 mov       0xB0(%rsp),%rcx
063c82d0 mov       $2,%r8d
063c82d6 call      0x0000`0000`063B`4960
063c82db jmp       0x0000`0000`063C`812E
063c82e0 mov       0x170(%rsp),%rax
063c82e8 shl       $1,%rax
063c82ec mov       %rax,0xA0(%rsp)
063c82f4 jmp       0x0000`0000`063C`83FF
063c82f9 mov       0x168(%rsp),%rax
063c8301 dec       %rax
063c8304 mov       %rax,0x98(%rsp)
063c830c seto      %al
063c830f test      $1,%al
063c8311 jne       0x0000`0000`063C`833D
063c8313 mov       0x98(%rsp),%rax
063c831b mov       %rax,0x168(%rsp)
063c8323 mov       0x170(%rsp),%rax
063c832b add       $0x30,%al
063c832d mov       %al,0x97(%rsp)
063c8334 setb      %al
063c8337 test      $1,%al
063c8339 jne       0x0000`0000`063C`8394
063c833b jmp       0x0000`0000`063C`8357
063c833d lea       0x63C`E1F0,%rcx
063c8344 lea       0x63D`14B0,%r8
063c834b mov       $0x21,%edx
063c8350 call      0x0000`0000`063B`8E30
063c8355 ud2
063c8357 mov       0x120(%rsp),%rax
063c835f mov       0x168(%rsp),%rcx
063c8367 mov       %rax,0x278(%rsp)
063c836f mov       %rcx,0x280(%rsp)
063c8377 add       %rcx,%rax
063c837a mov       %rax,0x288(%rsp)
063c8382 mov       0x288(%rsp),%rax
063c838a mov       %rax,0x88(%rsp)
063c8392 jmp       0x0000`0000`063C`83AE
063c8394 lea       0x63C`E220,%rcx
063c839b lea       0x63D`14B0,%r8
063c83a2 mov       $0x1C,%edx
063c83a7 call      0x0000`0000`063B`8E30
063c83ac ud2
063c83ae mov       0x88(%rsp),%rax
063c83b6 mov       0x97(%rsp),%cl
063c83bd mov       %cl,(%rax)
063c83bf mov       0x120(%rsp),%rax
063c83c7 mov       0x168(%rsp),%rcx
063c83cf mov       %rax,0x248(%rsp)
063c83d7 mov       %rcx,0x250(%rsp)
063c83df add       %rcx,%rax
063c83e2 mov       %rax,0x258(%rsp)
063c83ea mov       0x258(%rsp),%rax
063c83f2 mov       %rax,0x80(%rsp)
063c83fa jmp       0x0000`0000`063C`84DA
063c83ff mov       0xA0(%rsp),%rax
063c8407 mov       %rax,0x1B8(%rsp)
063c840f mov       0x168(%rsp),%rax
063c8417 sub       $2,%rax
063c841b mov       %rax,0x78(%rsp)
063c8420 seto      %al
063c8423 test      $1,%al
063c8425 jne       0x0000`0000`063C`846E
063c8427 mov       0xA0(%rsp),%rcx
063c842f mov       0x118(%rsp),%rax
063c8437 mov       0x78(%rsp),%rdx
063c843c mov       %rdx,0x168(%rsp)
063c8444 mov       %rax,0x1E8(%rsp)
063c844c mov       %rcx,0x1F0(%rsp)
063c8454 add       %rcx,%rax
063c8457 mov       %rax,0x1F8(%rsp)
063c845f mov       0x1F8(%rsp),%rax
063c8467 mov       %rax,0x70(%rsp)
063c846c jmp       0x0000`0000`063C`8488
063c846e lea       0x63C`E1F0,%rcx
063c8475 lea       0x63D`14B0,%r8
063c847c mov       $0x21,%edx
063c8481 call      0x0000`0000`063B`8E30
063c8486 ud2
063c8488 mov       0x120(%rsp),%rax
063c8490 mov       0x168(%rsp),%rcx
063c8498 mov       %rax,0x260(%rsp)
063c84a0 mov       %rcx,0x268(%rsp)
063c84a8 add       %rcx,%rax
063c84ab mov       %rax,0x270(%rsp)
063c84b3 mov       0x270(%rsp),%rax
063c84bb mov       %rax,0x68(%rsp)
063c84c0 mov       0x68(%rsp),%rdx
063c84c5 mov       0x70(%rsp),%rcx
063c84ca mov       $2,%r8d
063c84d0 call      0x0000`0000`063B`4960
063c84d5 jmp       0x0000`0000`063C`83BF
063c84da mov       $0x27,%eax
063c84df sub       0x168(%rsp),%rax
063c84e7 mov       %rax,0x60(%rsp)
063c84ec setb      %al
063c84ef test      $1,%al
063c84f1 jne       0x0000`0000`063C`8511
063c84f3 mov       0x60(%rsp),%rdx
063c84f8 mov       0x80(%rsp),%rcx
063c8500 call      0x0000`0000`063C`24E0
063c8505 mov       %rax,0x50(%rsp)
063c850a mov       %rdx,0x58(%rsp)
063c850f jmp       0x0000`0000`063C`852B
063c8511 lea       0x63C`E1F0,%rcx
063c8518 lea       0x63D`14B0,%r8
063c851f mov       $0x21,%edx
063c8524 call      0x0000`0000`063B`8E30
063c8529 ud2
063c852b mov       0x58(%rsp),%rdx
063c8530 mov       0x50(%rsp),%rcx
063c8535 call      0x0000`0000`063C`3F70
063c853a mov       %rax,0x40(%rsp)
063c853f mov       %rdx,0x48(%rsp)
063c8544 mov       %rax,0x1C0(%rsp)
063c854c mov       %rdx,0x1C8(%rsp)
063c8554 mov       0x128(%rsp),%rcx
063c855c mov       0x136(%rsp),%dl
063c8563 mov       0x40(%rsp),%r8
063c8568 mov       0x48(%rsp),%r9
063c856d mov       %rsp,%rax
063c8570 mov       %r9,0x28(%rax)
063c8574 mov       %r8,0x20(%rax)
063c8578 and       $1,%dl
063c857b lea       0x63C`E370,%r8
063c8582 xor       %eax,%eax
063c8584 mov       %eax,%r9d
063c8587 call      0x0000`0000`063B`E9D0
063c858c mov       %al,0x3F(%rsp)
063c8590 mov       0x3F(%rsp),%al
063c8594 and       $1,%al
063c8596 movzbl    %al,%eax
063c8599 add       $0x2D8,%rsp
063c85a0 ret

core::fmt::num::imp::impl$1::fmt:
063c85b0 sub       $0x78,%rsp
063c85b4 mov       %rdx,0x30(%rsp)
063c85b9 mov       %rcx,0x38(%rsp)
063c85be mov       %rcx,0x50(%rsp)
063c85c3 mov       %rdx,0x58(%rsp)
063c85c8 cmpb      $0,(%rcx)
063c85cb setae     %al
063c85ce mov       %al,0x47(%rsp)
063c85d2 mov       %al,%cl
063c85d4 and       $1,%cl
063c85d7 mov       %cl,0x67(%rsp)
063c85db test      $1,%al
063c85dd jne       0x0000`0000`063C`85F0
063c85df mov       0x38(%rsp),%rcx
063c85e4 call      0x0000`0000`063C`7850
063c85e9 mov       %rax,0x28(%rsp)
063c85ee jmp       0x0000`0000`063C`861B
063c85f0 mov       0x38(%rsp),%rcx
063c85f5 call      0x0000`0000`063C`7850
063c85fa mov       %rax,0x48(%rsp)
063c85ff mov       0x30(%rsp),%r8
063c8604 mov       0x47(%rsp),%dl
063c8608 mov       0x48(%rsp),%rcx
063c860d and       $1,%dl
063c8610 call      0x0000`0000`063C`7D60
063c8615 mov       %al,0x27(%rsp)
063c8619 jmp       0x0000`0000`063C`863D
063c861b mov       0x28(%rsp),%rax
063c8620 xor       $0xFFFF`FFFF`FFFF`FFFF,%rax
063c8624 mov       %rax,0x68(%rsp)
063c8629 movq      $1,0x70(%rsp)
063c8632 add       $1,%rax
063c8636 mov       %rax,0x48(%rsp)
063c863b jmp       0x0000`0000`063C`85FF
063c863d mov       0x27(%rsp),%al
063c8641 and       $1,%al
063c8643 movzbl    %al,%eax
063c8646 add       $0x78,%rsp
063c864a ret

core::fmt::num::imp::impl$5::fmt:
063c8650 sub       $0x78,%rsp
063c8654 mov       %rdx,0x30(%rsp)
063c8659 mov       %rcx,0x38(%rsp)
063c865e mov       %rcx,0x50(%rsp)
063c8663 mov       %rdx,0x58(%rsp)
063c8668 cmpl      $0,(%rcx)
063c866b setae     %al
063c866e mov       %al,0x47(%rsp)
063c8672 mov       %al,%cl
063c8674 and       $1,%cl
063c8677 mov       %cl,0x67(%rsp)
063c867b test      $1,%al
063c867d jne       0x0000`0000`063C`8690
063c867f mov       0x38(%rsp),%rcx
063c8684 call      0x0000`0000`063C`7890
063c8689 mov       %rax,0x28(%rsp)
063c868e jmp       0x0000`0000`063C`86BB
063c8690 mov       0x38(%rsp),%rcx
063c8695 call      0x0000`0000`063C`7890
063c869a mov       %rax,0x48(%rsp)
063c869f mov       0x30(%rsp),%r8
063c86a4 mov       0x47(%rsp),%dl
063c86a8 mov       0x48(%rsp),%rcx
063c86ad and       $1,%dl
063c86b0 call      0x0000`0000`063C`7D60
063c86b5 mov       %al,0x27(%rsp)
063c86b9 jmp       0x0000`0000`063C`86DD
063c86bb mov       0x28(%rsp),%rax
063c86c0 xor       $0xFFFF`FFFF`FFFF`FFFF,%rax
063c86c4 mov       %rax,0x68(%rsp)
063c86c9 movq      $1,0x70(%rsp)
063c86d2 add       $1,%rax
063c86d6 mov       %rax,0x48(%rsp)
063c86db jmp       0x0000`0000`063C`869F
063c86dd mov       0x27(%rsp),%al
063c86e1 and       $1,%al
063c86e3 movzbl    %al,%eax
063c86e6 add       $0x78,%rsp
063c86ea ret

core::fmt::num::imp::impl$8::fmt:
063c86f0 sub       $0x78,%rsp
063c86f4 mov       %rdx,0x30(%rsp)
063c86f9 mov       %rcx,0x38(%rsp)
063c86fe mov       %rcx,0x50(%rsp)
063c8703 mov       %rdx,0x58(%rsp)
063c8708 cmpq      $0,(%rcx)
063c870c setae     %al
063c870f mov       %al,0x47(%rsp)
063c8713 mov       %al,%cl
063c8715 and       $1,%cl
063c8718 mov       %cl,0x67(%rsp)
063c871c test      $1,%al
063c871e jne       0x0000`0000`063C`8731
063c8720 mov       0x38(%rsp),%rcx
063c8725 call      0x0000`0000`063C`78D0
063c872a mov       %rax,0x28(%rsp)
063c872f jmp       0x0000`0000`063C`875C
063c8731 mov       0x38(%rsp),%rcx
063c8736 call      0x0000`0000`063C`78D0
063c873b mov       %rax,0x48(%rsp)
063c8740 mov       0x30(%rsp),%r8
063c8745 mov       0x47(%rsp),%dl
063c8749 mov       0x48(%rsp),%rcx
063c874e and       $1,%dl
063c8751 call      0x0000`0000`063C`7D60
063c8756 mov       %al,0x27(%rsp)
063c875a jmp       0x0000`0000`063C`877E
063c875c mov       0x28(%rsp),%rax
063c8761 xor       $0xFFFF`FFFF`FFFF`FFFF,%rax
063c8765 mov       %rax,0x68(%rsp)
063c876a movq      $1,0x70(%rsp)
063c8773 add       $1,%rax
063c8777 mov       %rax,0x48(%rsp)
063c877c jmp       0x0000`0000`063C`8740
063c877e mov       0x27(%rsp),%al
063c8782 and       $1,%al
063c8784 movzbl    %al,%eax
063c8787 add       $0x78,%rsp
063c878b ret

core::fmt::impl$37::fmt:
063c8790 sub       $0x48,%rsp
063c8794 mov       %rdx,0x28(%rsp)
063c8799 mov       %rcx,%rax
063c879c mov       0x28(%rsp),%rcx
063c87a1 mov       %rax,0x38(%rsp)
063c87a6 mov       %rcx,0x40(%rsp)
063c87ab lea       0x63D`1500,%rdx
063c87b2 mov       $5,%r8d
063c87b8 call      0x0000`0000`063B`FA50
063c87bd mov       %al,0x37(%rsp)
063c87c1 mov       0x37(%rsp),%al
063c87c5 and       $1,%al
063c87c7 movzbl    %al,%eax
063c87ca add       $0x48,%rsp
063c87ce ret

core::fmt::ArgumentV1::new_display<usize>:
063c87d0 sub       $0x38,%rsp
063c87d4 mov       %rcx,0x30(%rsp)
063c87d9 lea       0x63C`86F0,%rdx
063c87e0 call      0x0000`0000`063B`DB40
063c87e5 mov       %rax,0x20(%rsp)
063c87ea mov       %rdx,0x28(%rsp)
063c87ef mov       0x28(%rsp),%rdx
063c87f4 mov       0x20(%rsp),%rax
063c87f9 add       $0x38,%rsp
063c87fd ret

core::fmt::ArgumentV1::new_display<u8>:
063c8800 sub       $0x38,%rsp
063c8804 mov       %rcx,0x30(%rsp)
063c8809 lea       0x63C`85B0,%rdx
063c8810 call      0x0000`0000`063B`DD20
063c8815 mov       %rax,0x20(%rsp)
063c881a mov       %rdx,0x28(%rsp)
063c881f mov       0x28(%rsp),%rdx
063c8824 mov       0x20(%rsp),%rax
063c8829 add       $0x38,%rsp
063c882d ret

core::fmt::ArgumentV1::new_display<ref$<core::fmt::Arguments> >:
063c8830 sub       $0x38,%rsp
063c8834 mov       %rcx,0x30(%rsp)
063c8839 lea       0x63C`8A40,%rdx
063c8840 call      0x0000`0000`063B`DC60
063c8845 mov       %rax,0x20(%rsp)
063c884a mov       %rdx,0x28(%rsp)
063c884f mov       0x28(%rsp),%rdx
063c8854 mov       0x20(%rsp),%rax
063c8859 add       $0x38,%rsp
063c885d ret

core::fmt::ArgumentV1::new_display<u32>:
063c8860 sub       $0x38,%rsp
063c8864 mov       %rcx,0x30(%rsp)
063c8869 lea       0x63C`8650,%rdx
063c8870 call      0x0000`0000`063B`DD80
063c8875 mov       %rax,0x20(%rsp)
063c887a mov       %rdx,0x28(%rsp)
063c887f mov       0x28(%rsp),%rdx
063c8884 mov       0x20(%rsp),%rax
063c8889 add       $0x38,%rsp
063c888d ret

core::fmt::ArgumentV1::new_display<core::fmt::Arguments>:
063c8890 sub       $0x38,%rsp
063c8894 mov       %rcx,0x30(%rsp)
063c8899 lea       0x63B`DF80,%rdx
063c88a0 call      0x0000`0000`063B`DC00
063c88a5 mov       %rax,0x20(%rsp)
063c88aa mov       %rdx,0x28(%rsp)
063c88af mov       0x28(%rsp),%rdx
063c88b4 mov       0x20(%rsp),%rax
063c88b9 add       $0x38,%rsp
063c88bd ret

core::fmt::ArgumentV1::new_display<str>:
063c88c0 sub       $0x38,%rsp
063c88c4 mov       %rcx,0x30(%rsp)
063c88c9 lea       0x63C`8A70,%rdx
063c88d0 call      0x0000`0000`063B`DAE0
063c88d5 mov       %rax,0x20(%rsp)
063c88da mov       %rdx,0x28(%rsp)
063c88df mov       0x28(%rsp),%rdx
063c88e4 mov       0x20(%rsp),%rax
063c88e9 add       $0x38,%rsp
063c88ed ret

core::fmt::ArgumentV1::new_debug<core::ops::range::Range<usize> >:
063c88f0 sub       $0x38,%rsp
063c88f4 mov       %rcx,0x30(%rsp)
063c88f9 lea       0x63B`67F0,%rdx
063c8900 call      0x0000`0000`063B`DBA0
063c8905 mov       %rax,0x20(%rsp)
063c890a mov       %rdx,0x28(%rsp)
063c890f mov       0x28(%rsp),%rdx
063c8914 mov       0x20(%rsp),%rax
063c8919 add       $0x38,%rsp
063c891d ret

core::fmt::ArgumentV1::new_debug<char>:
063c8920 sub       $0x38,%rsp
063c8924 mov       %rcx,0x30(%rsp)
063c8929 lea       0x63B`FC60,%rdx
063c8930 call      0x0000`0000`063B`DA80
063c8935 mov       %rax,0x20(%rsp)
063c893a mov       %rdx,0x28(%rsp)
063c893f mov       0x28(%rsp),%rdx
063c8944 mov       0x20(%rsp),%rax
063c8949 add       $0x38,%rsp
063c894d ret

core::fmt::ArgumentV1::new_debug<ref$<dyn$<core::fmt::Debug> > >:
063c8950 sub       $0x38,%rsp
063c8954 mov       %rcx,0x30(%rsp)
063c8959 lea       0x63C`89E0,%rdx
063c8960 call      0x0000`0000`063B`DCC0
063c8965 mov       %rax,0x20(%rsp)
063c896a mov       %rdx,0x28(%rsp)
063c896f mov       0x28(%rsp),%rdx
063c8974 mov       0x20(%rsp),%rax
063c8979 add       $0x38,%rsp
063c897d ret

core::fmt::ArgumentV1::new_upper_hex<u32>:
063c8980 sub       $0x38,%rsp
063c8984 mov       %rcx,0x30(%rsp)
063c8989 lea       0x63C`7C80,%rdx
063c8990 call      0x0000`0000`063B`DD80
063c8995 mov       %rax,0x20(%rsp)
063c899a mov       %rdx,0x28(%rsp)
063c899f mov       0x28(%rsp),%rdx
063c89a4 mov       0x20(%rsp),%rax
063c89a9 add       $0x38,%rsp
063c89ad ret

core::fmt::impl$52::fmt<tuple$<> >:
063c89b0 sub       $0x38,%rsp
063c89b4 mov       %rcx,0x28(%rsp)
063c89b9 mov       %rdx,0x30(%rsp)
063c89be mov       (%rcx),%rcx
063c89c1 call      0x0000`0000`063B`FF60
063c89c6 mov       %al,0x27(%rsp)
063c89ca mov       0x27(%rsp),%al
063c89ce and       $1,%al
063c89d0 movzbl    %al,%eax
063c89d3 add       $0x38,%rsp
063c89d7 ret

core::fmt::impl$52::fmt<dyn$<core::fmt::Debug> >:
063c89e0 sub       $0x38,%rsp
063c89e4 mov       %rcx,%rax
063c89e7 mov       %rax,0x28(%rsp)
063c89ec mov       %rdx,0x30(%rsp)
063c89f1 mov       (%rax),%rcx
063c89f4 mov       8(%rax),%rax
063c89f8 callq     *0x18(%rax)
063c89fb mov       %al,0x27(%rsp)
063c89ff mov       0x27(%rsp),%al
063c8a03 and       $1,%al
063c8a05 movzbl    %al,%eax
063c8a08 add       $0x38,%rsp
063c8a0c ret

core::fmt::impl$52::fmt<usize>:
063c8a10 sub       $0x38,%rsp
063c8a14 mov       %rcx,0x28(%rsp)
063c8a19 mov       %rdx,0x30(%rsp)
063c8a1e mov       (%rcx),%rcx
063c8a21 call      0x0000`0000`063C`7CC0
063c8a26 mov       %al,0x27(%rsp)
063c8a2a mov       0x27(%rsp),%al
063c8a2e and       $1,%al
063c8a30 movzbl    %al,%eax
063c8a33 add       $0x38,%rsp
063c8a37 ret

core::fmt::impl$54::fmt<core::fmt::Arguments>:
063c8a40 sub       $0x38,%rsp
063c8a44 mov       %rcx,0x28(%rsp)
063c8a49 mov       %rdx,0x30(%rsp)
063c8a4e mov       (%rcx),%rcx
063c8a51 call      0x0000`0000`063B`DF80
063c8a56 mov       %al,0x27(%rsp)
063c8a5a mov       0x27(%rsp),%al
063c8a5e and       $1,%al
063c8a60 movzbl    %al,%eax
063c8a63 add       $0x38,%rsp
063c8a67 ret

core::fmt::impl$54::fmt<str>:
063c8a70 sub       $0x38,%rsp
063c8a74 mov       %rdx,%r8
063c8a77 mov       %rcx,%rax
063c8a7a mov       %rax,0x28(%rsp)
063c8a7f mov       %r8,0x30(%rsp)
063c8a84 mov       (%rax),%rcx
063c8a87 mov       8(%rax),%rdx
063c8a8b call      0x0000`0000`063B`FC20
063c8a90 mov       %al,0x27(%rsp)
063c8a94 mov       0x27(%rsp),%al
063c8a98 and       $1,%al
063c8a9a movzbl    %al,%eax
063c8a9d add       $0x38,%rsp
063c8aa1 ret

core::slice::iter::impl$173::next<core::fmt::ArgumentV1>:
063c8ab0 sub       $0x98,%rsp
063c8ab7 mov       %rcx,0x40(%rsp)
063c8abc mov       %rcx,0x58(%rsp)
063c8ac1 mov       (%rcx),%rcx
063c8ac4 call      0x0000`0000`063B`51A0
063c8ac9 mov       %rax,0x48(%rsp)
063c8ace mov       0x48(%rsp),%rcx
063c8ad3 call      0x0000`0000`063B`5610
063c8ad8 jmp       0x0000`0000`063C`8ADA
063c8ada mov       $0x10,%eax
063c8adf cmp       $0,%rax
063c8ae3 jne       0x0000`0000`063C`8AF9
063c8ae5 mov       0x40(%rsp),%rax
063c8aea mov       (%rax),%rcx
063c8aed call      0x0000`0000`063B`51A0
063c8af2 mov       %rax,0x38(%rsp)
063c8af7 jmp       0x0000`0000`063C`8B09
063c8af9 mov       0x40(%rsp),%rax
063c8afe mov       8(%rax),%rcx
063c8b02 call      0x0000`0000`063B`52A0
063c8b07 jmp       0x0000`0000`063C`8AE5
063c8b09 mov       0x38(%rsp),%rax
063c8b0e mov       0x40(%rsp),%rcx
063c8b13 cmp       8(%rcx),%rax
063c8b17 je        0x0000`0000`063C`8BA0
063c8b1d mov       0x40(%rsp),%rax
063c8b22 mov       %rax,0x68(%rsp)
063c8b27 movq      $1,0x70(%rsp)
063c8b30 mov       (%rax),%rcx
063c8b33 call      0x0000`0000`063B`51A0
063c8b38 mov       %rax,%rcx
063c8b3b mov       0x40(%rsp),%rax
063c8b40 mov       %rcx,0x28(%rsp)
063c8b45 mov       %rcx,0x78(%rsp)
063c8b4a mov       (%rax),%rcx
063c8b4d call      0x0000`0000`063B`51A0
063c8b52 mov       %rax,0x80(%rsp)
063c8b5a movq      $1,0x88(%rsp)
063c8b66 add       $0x10,%rax
063c8b6a mov       %rax,0x90(%rsp)
063c8b72 mov       0x90(%rsp),%rcx
063c8b7a call      0x0000`0000`063B`5100
063c8b7f mov       0x40(%rsp),%rcx
063c8b84 mov       %rax,%rdx
063c8b87 mov       0x28(%rsp),%rax
063c8b8c mov       %rdx,(%rcx)
063c8b8f mov       %rax,0x60(%rsp)
063c8b94 mov       0x60(%rsp),%rax
063c8b99 mov       %rax,0x30(%rsp)
063c8b9e jmp       0x0000`0000`063C`8BB6
063c8ba0 movq      $0,0x50(%rsp)
063c8ba9 mov       0x50(%rsp),%rax
063c8bae add       $0x98,%rsp
063c8bb5 ret
063c8bb6 mov       0x30(%rsp),%rax
063c8bbb mov       %rax,0x50(%rsp)
063c8bc0 jmp       0x0000`0000`063C`8BA9

core::slice::iter::impl$173::next<u8>:
063c8bd0 sub       $0x98,%rsp
063c8bd7 mov       %rcx,0x40(%rsp)
063c8bdc mov       %rcx,0x58(%rsp)
063c8be1 mov       (%rcx),%rcx
063c8be4 call      0x0000`0000`063B`5180
063c8be9 mov       %rax,0x48(%rsp)
063c8bee mov       0x48(%rsp),%rcx
063c8bf3 call      0x0000`0000`063B`56D0
063c8bf8 jmp       0x0000`0000`063C`8BFA
063c8bfa mov       $1,%eax
063c8bff cmp       $0,%rax
063c8c03 jne       0x0000`0000`063C`8C19
063c8c05 mov       0x40(%rsp),%rax
063c8c0a mov       (%rax),%rcx
063c8c0d call      0x0000`0000`063B`5180
063c8c12 mov       %rax,0x38(%rsp)
063c8c17 jmp       0x0000`0000`063C`8C29
063c8c19 mov       0x40(%rsp),%rax
063c8c1e mov       8(%rax),%rcx
063c8c22 call      0x0000`0000`063B`51E0
063c8c27 jmp       0x0000`0000`063C`8C05
063c8c29 mov       0x38(%rsp),%rax
063c8c2e mov       0x40(%rsp),%rcx
063c8c33 cmp       8(%rcx),%rax
063c8c37 je        0x0000`0000`063C`8CC0
063c8c3d mov       0x40(%rsp),%rax
063c8c42 mov       %rax,0x68(%rsp)
063c8c47 movq      $1,0x70(%rsp)
063c8c50 mov       (%rax),%rcx
063c8c53 call      0x0000`0000`063B`5180
063c8c58 mov       %rax,%rcx
063c8c5b mov       0x40(%rsp),%rax
063c8c60 mov       %rcx,0x28(%rsp)
063c8c65 mov       %rcx,0x78(%rsp)
063c8c6a mov       (%rax),%rcx
063c8c6d call      0x0000`0000`063B`5180
063c8c72 mov       %rax,0x80(%rsp)
063c8c7a movq      $1,0x88(%rsp)
063c8c86 add       $1,%rax
063c8c8a mov       %rax,0x90(%rsp)
063c8c92 mov       0x90(%rsp),%rcx
063c8c9a call      0x0000`0000`063B`50C0
063c8c9f mov       0x40(%rsp),%rcx
063c8ca4 mov       %rax,%rdx
063c8ca7 mov       0x28(%rsp),%rax
063c8cac mov       %rdx,(%rcx)
063c8caf mov       %rax,0x60(%rsp)
063c8cb4 mov       0x60(%rsp),%rax
063c8cb9 mov       %rax,0x30(%rsp)
063c8cbe jmp       0x0000`0000`063C`8CD6
063c8cc0 movq      $0,0x50(%rsp)
063c8cc9 mov       0x50(%rsp),%rax
063c8cce add       $0x98,%rsp
063c8cd5 ret
063c8cd6 mov       0x30(%rsp),%rax
063c8cdb mov       %rax,0x50(%rsp)
063c8ce0 jmp       0x0000`0000`063C`8CC9

core::slice::iter::impl$173::next<array$<usize,4> >:
063c8cf0 sub       $0x98,%rsp
063c8cf7 mov       %rcx,0x40(%rsp)
063c8cfc mov       %rcx,0x58(%rsp)
063c8d01 mov       (%rcx),%rcx
063c8d04 call      0x0000`0000`063B`5170
063c8d09 mov       %rax,0x48(%rsp)
063c8d0e mov       0x48(%rsp),%rcx
063c8d13 call      0x0000`0000`063B`5700
063c8d18 jmp       0x0000`0000`063C`8D1A
063c8d1a mov       $0x20,%eax
063c8d1f cmp       $0,%rax
063c8d23 jne       0x0000`0000`063C`8D39
063c8d25 mov       0x40(%rsp),%rax
063c8d2a mov       (%rax),%rcx
063c8d2d call      0x0000`0000`063B`5170
063c8d32 mov       %rax,0x38(%rsp)
063c8d37 jmp       0x0000`0000`063C`8D49
063c8d39 mov       0x40(%rsp),%rax
063c8d3e mov       8(%rax),%rcx
063c8d42 call      0x0000`0000`063B`5270
063c8d47 jmp       0x0000`0000`063C`8D25
063c8d49 mov       0x38(%rsp),%rax
063c8d4e mov       0x40(%rsp),%rcx
063c8d53 cmp       8(%rcx),%rax
063c8d57 je        0x0000`0000`063C`8DE0
063c8d5d mov       0x40(%rsp),%rax
063c8d62 mov       %rax,0x68(%rsp)
063c8d67 movq      $1,0x70(%rsp)
063c8d70 mov       (%rax),%rcx
063c8d73 call      0x0000`0000`063B`5170
063c8d78 mov       %rax,%rcx
063c8d7b mov       0x40(%rsp),%rax
063c8d80 mov       %rcx,0x28(%rsp)
063c8d85 mov       %rcx,0x78(%rsp)
063c8d8a mov       (%rax),%rcx
063c8d8d call      0x0000`0000`063B`5170
063c8d92 mov       %rax,0x80(%rsp)
063c8d9a movq      $1,0x88(%rsp)
063c8da6 add       $0x20,%rax
063c8daa mov       %rax,0x90(%rsp)
063c8db2 mov       0x90(%rsp),%rcx
063c8dba call      0x0000`0000`063B`50E0
063c8dbf mov       0x40(%rsp),%rcx
063c8dc4 mov       %rax,%rdx
063c8dc7 mov       0x28(%rsp),%rax
063c8dcc mov       %rdx,(%rcx)
063c8dcf mov       %rax,0x60(%rsp)
063c8dd4 mov       0x60(%rsp),%rax
063c8dd9 mov       %rax,0x30(%rsp)
063c8dde jmp       0x0000`0000`063C`8DF6
063c8de0 movq      $0,0x50(%rsp)
063c8de9 mov       0x50(%rsp),%rax
063c8dee add       $0x98,%rsp
063c8df5 ret
063c8df6 mov       0x30(%rsp),%rax
063c8dfb mov       %rax,0x50(%rsp)
063c8e00 jmp       0x0000`0000`063C`8DE9

core::slice::iter::impl$173::next<usize>:
063c8e10 sub       $0x98,%rsp
063c8e17 mov       %rcx,0x40(%rsp)
063c8e1c mov       %rcx,0x58(%rsp)
063c8e21 mov       (%rcx),%rcx
063c8e24 call      0x0000`0000`063B`5160
063c8e29 mov       %rax,0x48(%rsp)
063c8e2e mov       0x48(%rsp),%rcx
063c8e33 call      0x0000`0000`063B`56A0
063c8e38 jmp       0x0000`0000`063C`8E3A
063c8e3a mov       $8,%eax
063c8e3f cmp       $0,%rax
063c8e43 jne       0x0000`0000`063C`8E59
063c8e45 mov       0x40(%rsp),%rax
063c8e4a mov       (%rax),%rcx
063c8e4d call      0x0000`0000`063B`5160
063c8e52 mov       %rax,0x38(%rsp)
063c8e57 jmp       0x0000`0000`063C`8E69
063c8e59 mov       0x40(%rsp),%rax
063c8e5e mov       8(%rax),%rcx
063c8e62 call      0x0000`0000`063B`51B0
063c8e67 jmp       0x0000`0000`063C`8E45
063c8e69 mov       0x38(%rsp),%rax
063c8e6e mov       0x40(%rsp),%rcx
063c8e73 cmp       8(%rcx),%rax
063c8e77 je        0x0000`0000`063C`8F00
063c8e7d mov       0x40(%rsp),%rax
063c8e82 mov       %rax,0x68(%rsp)
063c8e87 movq      $1,0x70(%rsp)
063c8e90 mov       (%rax),%rcx
063c8e93 call      0x0000`0000`063B`5160
063c8e98 mov       %rax,%rcx
063c8e9b mov       0x40(%rsp),%rax
063c8ea0 mov       %rcx,0x28(%rsp)
063c8ea5 mov       %rcx,0x78(%rsp)
063c8eaa mov       (%rax),%rcx
063c8ead call      0x0000`0000`063B`5160
063c8eb2 mov       %rax,0x80(%rsp)
063c8eba movq      $1,0x88(%rsp)
063c8ec6 add       $8,%rax
063c8eca mov       %rax,0x90(%rsp)
063c8ed2 mov       0x90(%rsp),%rcx
063c8eda call      0x0000`0000`063B`50A0
063c8edf mov       0x40(%rsp),%rcx
063c8ee4 mov       %rax,%rdx
063c8ee7 mov       0x28(%rsp),%rax
063c8eec mov       %rdx,(%rcx)
063c8eef mov       %rax,0x60(%rsp)
063c8ef4 mov       0x60(%rsp),%rax
063c8ef9 mov       %rax,0x30(%rsp)
063c8efe jmp       0x0000`0000`063C`8F16
063c8f00 movq      $0,0x50(%rsp)
063c8f09 mov       0x50(%rsp),%rax
063c8f0e add       $0x98,%rsp
063c8f15 ret
063c8f16 mov       0x30(%rsp),%rax
063c8f1b mov       %rax,0x50(%rsp)
063c8f20 jmp       0x0000`0000`063C`8F09

core::slice::iter::impl$173::next<tuple$<u8,u8> >:
063c8f30 sub       $0x98,%rsp
063c8f37 mov       %rcx,0x40(%rsp)
063c8f3c mov       %rcx,0x58(%rsp)
063c8f41 mov       (%rcx),%rcx
063c8f44 call      0x0000`0000`063B`5150
063c8f49 mov       %rax,0x48(%rsp)
063c8f4e mov       0x48(%rsp),%rcx
063c8f53 call      0x0000`0000`063B`5730
063c8f58 jmp       0x0000`0000`063C`8F5A
063c8f5a mov       $2,%eax
063c8f5f cmp       $0,%rax
063c8f63 jne       0x0000`0000`063C`8F79
063c8f65 mov       0x40(%rsp),%rax
063c8f6a mov       (%rax),%rcx
063c8f6d call      0x0000`0000`063B`5150
063c8f72 mov       %rax,0x38(%rsp)
063c8f77 jmp       0x0000`0000`063C`8F89
063c8f79 mov       0x40(%rsp),%rax
063c8f7e mov       8(%rax),%rcx
063c8f82 call      0x0000`0000`063B`5240
063c8f87 jmp       0x0000`0000`063C`8F65
063c8f89 mov       0x38(%rsp),%rax
063c8f8e mov       0x40(%rsp),%rcx
063c8f93 cmp       8(%rcx),%rax
063c8f97 je        0x0000`0000`063C`9020
063c8f9d mov       0x40(%rsp),%rax
063c8fa2 mov       %rax,0x68(%rsp)
063c8fa7 movq      $1,0x70(%rsp)
063c8fb0 mov       (%rax),%rcx
063c8fb3 call      0x0000`0000`063B`5150
063c8fb8 mov       %rax,%rcx
063c8fbb mov       0x40(%rsp),%rax
063c8fc0 mov       %rcx,0x28(%rsp)
063c8fc5 mov       %rcx,0x78(%rsp)
063c8fca mov       (%rax),%rcx
063c8fcd call      0x0000`0000`063B`5150
063c8fd2 mov       %rax,0x80(%rsp)
063c8fda movq      $1,0x88(%rsp)
063c8fe6 add       $2,%rax
063c8fea mov       %rax,0x90(%rsp)
063c8ff2 mov       0x90(%rsp),%rcx
063c8ffa call      0x0000`0000`063B`5120
063c8fff mov       0x40(%rsp),%rcx
063c9004 mov       %rax,%rdx
063c9007 mov       0x28(%rsp),%rax
063c900c mov       %rdx,(%rcx)
063c900f mov       %rax,0x60(%rsp)
063c9014 mov       0x60(%rsp),%rax
063c9019 mov       %rax,0x30(%rsp)
063c901e jmp       0x0000`0000`063C`9036
063c9020 movq      $0,0x50(%rsp)
063c9029 mov       0x50(%rsp),%rax
063c902e add       $0x98,%rsp
063c9035 ret
063c9036 mov       0x30(%rsp),%rax
063c903b mov       %rax,0x50(%rsp)
063c9040 jmp       0x0000`0000`063C`9029

core::slice::iter::impl$173::next<core::fmt::rt::v1::Argument>:
063c9050 sub       $0x98,%rsp
063c9057 mov       %rcx,0x40(%rsp)
063c905c mov       %rcx,0x58(%rsp)
063c9061 mov       (%rcx),%rcx
063c9064 call      0x0000`0000`063B`5140
063c9069 mov       %rax,0x48(%rsp)
063c906e mov       0x48(%rsp),%rcx
063c9073 call      0x0000`0000`063B`5640
063c9078 jmp       0x0000`0000`063C`907A
063c907a mov       $0x38,%eax
063c907f cmp       $0,%rax
063c9083 jne       0x0000`0000`063C`9099
063c9085 mov       0x40(%rsp),%rax
063c908a mov       (%rax),%rcx
063c908d call      0x0000`0000`063B`5140
063c9092 mov       %rax,0x38(%rsp)
063c9097 jmp       0x0000`0000`063C`90A9
063c9099 mov       0x40(%rsp),%rax
063c909e mov       8(%rax),%rcx
063c90a2 call      0x0000`0000`063B`5210
063c90a7 jmp       0x0000`0000`063C`9085
063c90a9 mov       0x38(%rsp),%rax
063c90ae mov       0x40(%rsp),%rcx
063c90b3 cmp       8(%rcx),%rax
063c90b7 je        0x0000`0000`063C`9140
063c90bd mov       0x40(%rsp),%rax
063c90c2 mov       %rax,0x68(%rsp)
063c90c7 movq      $1,0x70(%rsp)
063c90d0 mov       (%rax),%rcx
063c90d3 call      0x0000`0000`063B`5140
063c90d8 mov       %rax,%rcx
063c90db mov       0x40(%rsp),%rax
063c90e0 mov       %rcx,0x28(%rsp)
063c90e5 mov       %rcx,0x78(%rsp)
063c90ea mov       (%rax),%rcx
063c90ed call      0x0000`0000`063B`5140
063c90f2 mov       %rax,0x80(%rsp)
063c90fa movq      $1,0x88(%rsp)
063c9106 add       $0x38,%rax
063c910a mov       %rax,0x90(%rsp)
063c9112 mov       0x90(%rsp),%rcx
063c911a call      0x0000`0000`063B`5080
063c911f mov       0x40(%rsp),%rcx
063c9124 mov       %rax,%rdx
063c9127 mov       0x28(%rsp),%rax
063c912c mov       %rdx,(%rcx)
063c912f mov       %rax,0x60(%rsp)
063c9134 mov       0x60(%rsp),%rax
063c9139 mov       %rax,0x30(%rsp)
063c913e jmp       0x0000`0000`063C`9156
063c9140 movq      $0,0x50(%rsp)
063c9149 mov       0x50(%rsp),%rax
063c914e add       $0x98,%rsp
063c9155 ret
063c9156 mov       0x30(%rsp),%rax
063c915b mov       %rax,0x50(%rsp)
063c9160 jmp       0x0000`0000`063C`9149

core::slice::iter::impl$173::position<u8,core::slice::memchr::memchr_general_case::closure_env$0>:
063c9170 sub       $0xF8,%rsp
063c9177 mov       %rcx,0x60(%rsp)
063c917c mov       %rdx,0x78(%rsp)
063c9181 mov       %rcx,0xB0(%rsp)
063c9189 mov       (%rcx),%rcx
063c918c mov       %rcx,0x68(%rsp)
063c9191 mov       %rcx,0xB8(%rsp)
063c9199 call      0x0000`0000`063B`5180
063c919e mov       %rax,0x70(%rsp)
063c91a3 mov       0x70(%rsp),%rax
063c91a8 mov       %rax,0xE0(%rsp)
063c91b0 movq      $1,0xC0(%rsp)
063c91bc mov       $1,%eax
063c91c1 cmp       $0,%rax
063c91c5 jne       0x0000`0000`063C`91E6
063c91c7 mov       0x68(%rsp),%rcx
063c91cc mov       0x60(%rsp),%rax
063c91d1 mov       8(%rax),%rax
063c91d5 mov       %rax,0x50(%rsp)
063c91da call      0x0000`0000`063B`5180
063c91df mov       %rax,0x58(%rsp)
063c91e4 jmp       0x0000`0000`063C`924C
063c91e6 mov       0x68(%rsp),%rcx
063c91eb mov       0x60(%rsp),%rax
063c91f0 mov       8(%rax),%rax
063c91f4 mov       %rax,0x40(%rsp)
063c91f9 call      0x0000`0000`063B`5180
063c91fe mov       %rax,0x48(%rsp)
063c9203 mov       0x48(%rsp),%rcx
063c9208 mov       0x40(%rsp),%rax
063c920d sub       %rcx,%rax
063c9210 mov       %rax,0xC8(%rsp)
063c9218 mov       0xC8(%rsp),%rax
063c9220 mov       %rax,0x38(%rsp)
063c9225 mov       %rax,0xD0(%rsp)
063c922d mov       0x38(%rsp),%rax
063c9232 shr       $0,%rax
063c9236 mov       %rax,0x90(%rsp)
063c923e movq      $0,0x98(%rsp)
063c924a jmp       0x0000`0000`063C`9273
063c924c mov       0x58(%rsp),%rcx
063c9251 mov       0x50(%rsp),%rax
063c9256 mov       %rax,0xE8(%rsp)
063c925e mov       %rcx,0xF0(%rsp)
063c9266 sub       %rcx,%rax
063c9269 mov       %rax,0x90(%rsp)
063c9271 jmp       0x0000`0000`063C`923E
063c9273 mov       0x60(%rsp),%rcx
063c9278 call      0x0000`0000`063C`8BD0
063c927d mov       %rax,0xA0(%rsp)
063c9285 mov       $1,%eax
063c928a xor       %ecx,%ecx
063c928c cmpq      $0,0xA0(%rsp)
063c9295 cmove     %rcx,%rax
063c9299 cmp       $1,%rax
063c929d jne       0x0000`0000`063C`92CF
063c929f mov       0xA0(%rsp),%rax
063c92a7 mov       %rax,0xD8(%rsp)
063c92af mov       %rax,0xA8(%rsp)
063c92b7 mov       0xA8(%rsp),%rdx
063c92bf lea       0x78(%rsp),%rcx
063c92c4 call      0x0000`0000`063C`05B0
063c92c9 mov       %al,0x37(%rsp)
063c92cd jmp       0x0000`0000`063C`92F3
063c92cf movq      $0,0x80(%rsp)
063c92db mov       0x80(%rsp),%rax
063c92e3 mov       0x88(%rsp),%rdx
063c92eb add       $0xF8,%rsp
063c92f2 ret
063c92f3 mov       0x37(%rsp),%al
063c92f7 test      $1,%al
063c92f9 jne       0x0000`0000`063C`9317
063c92fb jmp       0x0000`0000`063C`92FD
063c92fd mov       0x98(%rsp),%rax
063c9305 add       $1,%rax
063c9309 mov       %rax,0x28(%rsp)
063c930e setb      %al
063c9311 test      $1,%al
063c9313 jne       0x0000`0000`063C`934F
063c9315 jmp       0x0000`0000`063C`933D
063c9317 mov       0x98(%rsp),%rax
063c931f mov       0x98(%rsp),%rax
063c9327 mov       %rax,0x88(%rsp)
063c932f movq      $1,0x80(%rsp)
063c933b jmp       0x0000`0000`063C`92DB
063c933d mov       0x28(%rsp),%rax
063c9342 mov       %rax,0x98(%rsp)
063c934a jmp       0x0000`0000`063C`9273
063c934f lea       0x63C`E220,%rcx
063c9356 lea       0x63D`1508,%r8
063c935d mov       $0x1C,%edx
063c9362 call      0x0000`0000`063B`8E30
063c9367 ud2

core::slice::iter::impl$173::position<u8,core::slice::memchr::memchr::closure_env$0>:
063c9370 sub       $0xF8,%rsp
063c9377 mov       %rcx,0x60(%rsp)
063c937c mov       %rdx,0x78(%rsp)
063c9381 mov       %rcx,0xB0(%rsp)
063c9389 mov       (%rcx),%rcx
063c938c mov       %rcx,0x68(%rsp)
063c9391 mov       %rcx,0xB8(%rsp)
063c9399 call      0x0000`0000`063B`5180
063c939e mov       %rax,0x70(%rsp)
063c93a3 mov       0x70(%rsp),%rax
063c93a8 mov       %rax,0xE0(%rsp)
063c93b0 movq      $1,0xC0(%rsp)
063c93bc mov       $1,%eax
063c93c1 cmp       $0,%rax
063c93c5 jne       0x0000`0000`063C`93E6
063c93c7 mov       0x68(%rsp),%rcx
063c93cc mov       0x60(%rsp),%rax
063c93d1 mov       8(%rax),%rax
063c93d5 mov       %rax,0x50(%rsp)
063c93da call      0x0000`0000`063B`5180
063c93df mov       %rax,0x58(%rsp)
063c93e4 jmp       0x0000`0000`063C`944C
063c93e6 mov       0x68(%rsp),%rcx
063c93eb mov       0x60(%rsp),%rax
063c93f0 mov       8(%rax),%rax
063c93f4 mov       %rax,0x40(%rsp)
063c93f9 call      0x0000`0000`063B`5180
063c93fe mov       %rax,0x48(%rsp)
063c9403 mov       0x48(%rsp),%rcx
063c9408 mov       0x40(%rsp),%rax
063c940d sub       %rcx,%rax
063c9410 mov       %rax,0xC8(%rsp)
063c9418 mov       0xC8(%rsp),%rax
063c9420 mov       %rax,0x38(%rsp)
063c9425 mov       %rax,0xD0(%rsp)
063c942d mov       0x38(%rsp),%rax
063c9432 shr       $0,%rax
063c9436 mov       %rax,0x90(%rsp)
063c943e movq      $0,0x98(%rsp)
063c944a jmp       0x0000`0000`063C`9473
063c944c mov       0x58(%rsp),%rcx
063c9451 mov       0x50(%rsp),%rax
063c9456 mov       %rax,0xE8(%rsp)
063c945e mov       %rcx,0xF0(%rsp)
063c9466 sub       %rcx,%rax
063c9469 mov       %rax,0x90(%rsp)
063c9471 jmp       0x0000`0000`063C`943E
063c9473 mov       0x60(%rsp),%rcx
063c9478 call      0x0000`0000`063C`8BD0
063c947d mov       %rax,0xA0(%rsp)
063c9485 mov       $1,%eax
063c948a xor       %ecx,%ecx
063c948c cmpq      $0,0xA0(%rsp)
063c9495 cmove     %rcx,%rax
063c9499 cmp       $1,%rax
063c949d jne       0x0000`0000`063C`94CF
063c949f mov       0xA0(%rsp),%rax
063c94a7 mov       %rax,0xD8(%rsp)
063c94af mov       %rax,0xA8(%rsp)
063c94b7 mov       0xA8(%rsp),%rdx
063c94bf lea       0x78(%rsp),%rcx
063c94c4 call      0x0000`0000`063C`00F0
063c94c9 mov       %al,0x37(%rsp)
063c94cd jmp       0x0000`0000`063C`94F3
063c94cf movq      $0,0x80(%rsp)
063c94db mov       0x80(%rsp),%rax
063c94e3 mov       0x88(%rsp),%rdx
063c94eb add       $0xF8,%rsp
063c94f2 ret
063c94f3 mov       0x37(%rsp),%al
063c94f7 test      $1,%al
063c94f9 jne       0x0000`0000`063C`9517
063c94fb jmp       0x0000`0000`063C`94FD
063c94fd mov       0x98(%rsp),%rax
063c9505 add       $1,%rax
063c9509 mov       %rax,0x28(%rsp)
063c950e setb      %al
063c9511 test      $1,%al
063c9513 jne       0x0000`0000`063C`954F
063c9515 jmp       0x0000`0000`063C`953D
063c9517 mov       0x98(%rsp),%rax
063c951f mov       0x98(%rsp),%rax
063c9527 mov       %rax,0x88(%rsp)
063c952f movq      $1,0x80(%rsp)
063c953b jmp       0x0000`0000`063C`94DB
063c953d mov       0x28(%rsp),%rax
063c9542 mov       %rax,0x98(%rsp)
063c954a jmp       0x0000`0000`063C`9473
063c954f lea       0x63C`E220,%rcx
063c9556 lea       0x63D`1508,%r8
063c955d mov       $0x1C,%edx
063c9562 call      0x0000`0000`063B`8E30
063c9567 ud2

core::slice::iter::impl$173::position<u8,core::slice::memchr::memchr_general_case::closure_env$1>:
063c9570 sub       $0xF8,%rsp
063c9577 mov       %rcx,0x60(%rsp)
063c957c mov       %rdx,0x78(%rsp)
063c9581 mov       %rcx,0xB0(%rsp)
063c9589 mov       (%rcx),%rcx
063c958c mov       %rcx,0x68(%rsp)
063c9591 mov       %rcx,0xB8(%rsp)
063c9599 call      0x0000`0000`063B`5180
063c959e mov       %rax,0x70(%rsp)
063c95a3 mov       0x70(%rsp),%rax
063c95a8 mov       %rax,0xE0(%rsp)
063c95b0 movq      $1,0xC0(%rsp)
063c95bc mov       $1,%eax
063c95c1 cmp       $0,%rax
063c95c5 jne       0x0000`0000`063C`95E6
063c95c7 mov       0x68(%rsp),%rcx
063c95cc mov       0x60(%rsp),%rax
063c95d1 mov       8(%rax),%rax
063c95d5 mov       %rax,0x50(%rsp)
063c95da call      0x0000`0000`063B`5180
063c95df mov       %rax,0x58(%rsp)
063c95e4 jmp       0x0000`0000`063C`964C
063c95e6 mov       0x68(%rsp),%rcx
063c95eb mov       0x60(%rsp),%rax
063c95f0 mov       8(%rax),%rax
063c95f4 mov       %rax,0x40(%rsp)
063c95f9 call      0x0000`0000`063B`5180
063c95fe mov       %rax,0x48(%rsp)
063c9603 mov       0x48(%rsp),%rcx
063c9608 mov       0x40(%rsp),%rax
063c960d sub       %rcx,%rax
063c9610 mov       %rax,0xC8(%rsp)
063c9618 mov       0xC8(%rsp),%rax
063c9620 mov       %rax,0x38(%rsp)
063c9625 mov       %rax,0xD0(%rsp)
063c962d mov       0x38(%rsp),%rax
063c9632 shr       $0,%rax
063c9636 mov       %rax,0x90(%rsp)
063c963e movq      $0,0x98(%rsp)
063c964a jmp       0x0000`0000`063C`9673
063c964c mov       0x58(%rsp),%rcx
063c9651 mov       0x50(%rsp),%rax
063c9656 mov       %rax,0xE8(%rsp)
063c965e mov       %rcx,0xF0(%rsp)
063c9666 sub       %rcx,%rax
063c9669 mov       %rax,0x90(%rsp)
063c9671 jmp       0x0000`0000`063C`963E
063c9673 mov       0x60(%rsp),%rcx
063c9678 call      0x0000`0000`063C`8BD0
063c967d mov       %rax,0xA0(%rsp)
063c9685 mov       $1,%eax
063c968a xor       %ecx,%ecx
063c968c cmpq      $0,0xA0(%rsp)
063c9695 cmove     %rcx,%rax
063c9699 cmp       $1,%rax
063c969d jne       0x0000`0000`063C`96CF
063c969f mov       0xA0(%rsp),%rax
063c96a7 mov       %rax,0xD8(%rsp)
063c96af mov       %rax,0xA8(%rsp)
063c96b7 mov       0xA8(%rsp),%rdx
063c96bf lea       0x78(%rsp),%rcx
063c96c4 call      0x0000`0000`063C`05E0
063c96c9 mov       %al,0x37(%rsp)
063c96cd jmp       0x0000`0000`063C`96F3
063c96cf movq      $0,0x80(%rsp)
063c96db mov       0x80(%rsp),%rax
063c96e3 mov       0x88(%rsp),%rdx
063c96eb add       $0xF8,%rsp
063c96f2 ret
063c96f3 mov       0x37(%rsp),%al
063c96f7 test      $1,%al
063c96f9 jne       0x0000`0000`063C`9717
063c96fb jmp       0x0000`0000`063C`96FD
063c96fd mov       0x98(%rsp),%rax
063c9705 add       $1,%rax
063c9709 mov       %rax,0x28(%rsp)
063c970e setb      %al
063c9711 test      $1,%al
063c9713 jne       0x0000`0000`063C`974F
063c9715 jmp       0x0000`0000`063C`973D
063c9717 mov       0x98(%rsp),%rax
063c971f mov       0x98(%rsp),%rax
063c9727 mov       %rax,0x88(%rsp)
063c972f movq      $1,0x80(%rsp)
063c973b jmp       0x0000`0000`063C`96DB
063c973d mov       0x28(%rsp),%rax
063c9742 mov       %rax,0x98(%rsp)
063c974a jmp       0x0000`0000`063C`9673
063c974f lea       0x63C`E220,%rcx
063c9756 lea       0x63D`1508,%r8
063c975d mov       $0x1C,%edx
063c9762 call      0x0000`0000`063B`8E30
063c9767 ud2

core::slice::iter::impl$173::rposition<u8,core::str::impl$0::floor_char_boundary::closure_env$0>:
063c9770 sub       $0xF8,%rsp
063c9777 mov       %rcx,0x60(%rsp)
063c977c mov       %rcx,0xB0(%rsp)
063c9784 mov       (%rcx),%rcx
063c9787 mov       %rcx,0x68(%rsp)
063c978c mov       %rcx,0xB8(%rsp)
063c9794 call      0x0000`0000`063B`5180
063c9799 mov       %rax,0x70(%rsp)
063c979e mov       0x70(%rsp),%rax
063c97a3 mov       %rax,0xE0(%rsp)
063c97ab movq      $1,0xC0(%rsp)
063c97b7 mov       $1,%eax
063c97bc cmp       $0,%rax
063c97c0 jne       0x0000`0000`063C`97E1
063c97c2 mov       0x68(%rsp),%rcx
063c97c7 mov       0x60(%rsp),%rax
063c97cc mov       8(%rax),%rax
063c97d0 mov       %rax,0x50(%rsp)
063c97d5 call      0x0000`0000`063B`5180
063c97da mov       %rax,0x58(%rsp)
063c97df jmp       0x0000`0000`063C`984B
063c97e1 mov       0x68(%rsp),%rcx
063c97e6 mov       0x60(%rsp),%rax
063c97eb mov       8(%rax),%rax
063c97ef mov       %rax,0x40(%rsp)
063c97f4 call      0x0000`0000`063B`5180
063c97f9 mov       %rax,0x48(%rsp)
063c97fe mov       0x48(%rsp),%rcx
063c9803 mov       0x40(%rsp),%rax
063c9808 sub       %rcx,%rax
063c980b mov       %rax,0xC8(%rsp)
063c9813 mov       0xC8(%rsp),%rax
063c981b mov       %rax,0x38(%rsp)
063c9820 mov       %rax,0xD0(%rsp)
063c9828 mov       0x38(%rsp),%rax
063c982d shr       $0,%rax
063c9831 mov       %rax,0x90(%rsp)
063c9839 mov       0x90(%rsp),%rax
063c9841 mov       %rax,0x98(%rsp)
063c9849 jmp       0x0000`0000`063C`9872
063c984b mov       0x58(%rsp),%rcx
063c9850 mov       0x50(%rsp),%rax
063c9855 mov       %rax,0xE8(%rsp)
063c985d mov       %rcx,0xF0(%rsp)
063c9865 sub       %rcx,%rax
063c9868 mov       %rax,0x90(%rsp)
063c9870 jmp       0x0000`0000`063C`9839
063c9872 mov       0x60(%rsp),%rcx
063c9877 call      0x0000`0000`063C`9980
063c987c mov       %rax,0xA0(%rsp)
063c9884 mov       $1,%eax
063c9889 xor       %ecx,%ecx
063c988b cmpq      $0,0xA0(%rsp)
063c9894 cmove     %rcx,%rax
063c9898 cmp       $1,%rax
063c989c jne       0x0000`0000`063C`98CD
063c989e mov       0xA0(%rsp),%rax
063c98a6 mov       %rax,0x28(%rsp)
063c98ab mov       %rax,0xD8(%rsp)
063c98b3 mov       0x98(%rsp),%rax
063c98bb sub       $1,%rax
063c98bf mov       %rax,0x30(%rsp)
063c98c4 setb      %al
063c98c7 test      $1,%al
063c98c9 jne       0x0000`0000`063C`9925
063c98cb jmp       0x0000`0000`063C`98F3
063c98cd jmp       0x0000`0000`063C`98CF
063c98cf movq      $0,0x80(%rsp)
063c98db mov       0x80(%rsp),%rax
063c98e3 mov       0x88(%rsp),%rdx
063c98eb add       $0xF8,%rsp
063c98f2 ret
063c98f3 mov       0x28(%rsp),%rax
063c98f8 mov       0x30(%rsp),%rcx
063c98fd mov       %rcx,0x98(%rsp)
063c9905 mov       %rax,0xA8(%rsp)
063c990d mov       0xA8(%rsp),%rdx
063c9915 lea       0x78(%rsp),%rcx
063c991a call      0x0000`0000`063C`67D0
063c991f mov       %al,0x27(%rsp)
063c9923 jmp       0x0000`0000`063C`993F
063c9925 lea       0x63C`E1F0,%rcx
063c992c lea       0x63D`1508,%r8
063c9933 mov       $0x21,%edx
063c9938 call      0x0000`0000`063B`8E30
063c993d ud2
063c993f mov       0x27(%rsp),%al
063c9943 test      $1,%al
063c9945 jne       0x0000`0000`063C`994E
063c9947 jmp       0x0000`0000`063C`9949
063c9949 jmp       0x0000`0000`063C`9872
063c994e mov       0x98(%rsp),%rax
063c9956 mov       0x98(%rsp),%rax
063c995e mov       %rax,0x88(%rsp)
063c9966 movq      $1,0x80(%rsp)
063c9972 jmp       0x0000`0000`063C`98DB

core::slice::iter::impl$174::next_back<u8>:
063c9980 sub       $0x88,%rsp
063c9987 mov       %rcx,0x38(%rsp)
063c998c mov       %rcx,0x50(%rsp)
063c9991 mov       (%rcx),%rcx
063c9994 call      0x0000`0000`063B`5180
063c9999 mov       %rax,0x40(%rsp)
063c999e mov       0x40(%rsp),%rcx
063c99a3 call      0x0000`0000`063B`56D0
063c99a8 jmp       0x0000`0000`063C`99AA
063c99aa mov       $1,%eax
063c99af cmp       $0,%rax
063c99b3 jne       0x0000`0000`063C`99C9
063c99b5 mov       0x38(%rsp),%rax
063c99ba mov       (%rax),%rcx
063c99bd call      0x0000`0000`063B`5180
063c99c2 mov       %rax,0x30(%rsp)
063c99c7 jmp       0x0000`0000`063C`99D9
063c99c9 mov       0x38(%rsp),%rax
063c99ce mov       8(%rax),%rcx
063c99d2 call      0x0000`0000`063B`51E0
063c99d7 jmp       0x0000`0000`063C`99B5
063c99d9 mov       0x30(%rsp),%rax
063c99de mov       0x38(%rsp),%rcx
063c99e3 cmp       8(%rcx),%rax
063c99e7 je        0x0000`0000`063C`9A70
063c99ed mov       0x38(%rsp),%rax
063c99f2 mov       %rax,0x60(%rsp)
063c99f7 movq      $1,0x68(%rsp)
063c9a00 mov       8(%rax),%rax
063c9a04 mov       %rax,0x28(%rsp)
063c9a09 xor       %eax,%eax
063c9a0b test      $1,%al
063c9a0d jne       0x0000`0000`063C`9A11
063c9a0f jmp       0x0000`0000`063C`9A2B
063c9a11 lea       0x63C`E2D0,%rcx
063c9a18 lea       0x63D`1508,%r8
063c9a1f mov       $0x1F,%edx
063c9a24 call      0x0000`0000`063B`8E30
063c9a29 ud2
063c9a2b mov       0x38(%rsp),%rax
063c9a30 mov       0x28(%rsp),%rcx
063c9a35 mov       %rcx,0x70(%rsp)
063c9a3a movq      $0xFFFF`FFFF`FFFF`FFFF,0x78(%rsp)
063c9a43 add       $0xFFFF`FFFF`FFFF`FFFF,%rcx
063c9a47 mov       %rcx,0x80(%rsp)
063c9a4f mov       0x80(%rsp),%rcx
063c9a57 mov       %rcx,8(%rax)
063c9a5b mov       8(%rax),%rax
063c9a5f mov       %rax,0x58(%rsp)
063c9a64 mov       0x58(%rsp),%rax
063c9a69 mov       %rax,0x20(%rsp)
063c9a6e jmp       0x0000`0000`063C`9A86
063c9a70 movq      $0,0x48(%rsp)
063c9a79 mov       0x48(%rsp),%rax
063c9a7e add       $0x88,%rsp
063c9a85 ret
063c9a86 mov       0x20(%rsp),%rax
063c9a8b mov       %rax,0x48(%rsp)
063c9a90 jmp       0x0000`0000`063C`9A79

core::slice::iter::impl$180::next_back<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c9aa0 sub       $0x88,%rsp
063c9aa7 mov       %rcx,0x38(%rsp)
063c9aac mov       %rcx,0x50(%rsp)
063c9ab1 mov       (%rcx),%rcx
063c9ab4 call      0x0000`0000`063B`5190
063c9ab9 mov       %rax,0x40(%rsp)
063c9abe mov       0x40(%rsp),%rcx
063c9ac3 call      0x0000`0000`063B`5670
063c9ac8 jmp       0x0000`0000`063C`9ACA
063c9aca mov       $1,%eax
063c9acf cmp       $0,%rax
063c9ad3 jne       0x0000`0000`063C`9AE9
063c9ad5 mov       0x38(%rsp),%rax
063c9ada mov       (%rax),%rcx
063c9add call      0x0000`0000`063B`5190
063c9ae2 mov       %rax,0x30(%rsp)
063c9ae7 jmp       0x0000`0000`063C`9AF9
063c9ae9 mov       0x38(%rsp),%rax
063c9aee mov       8(%rax),%rcx
063c9af2 call      0x0000`0000`063B`5670
063c9af7 jmp       0x0000`0000`063C`9AD5
063c9af9 mov       0x30(%rsp),%rax
063c9afe mov       0x38(%rsp),%rcx
063c9b03 cmp       8(%rcx),%rax
063c9b07 je        0x0000`0000`063C`9B90
063c9b0d mov       0x38(%rsp),%rax
063c9b12 mov       %rax,0x60(%rsp)
063c9b17 movq      $1,0x68(%rsp)
063c9b20 mov       8(%rax),%rax
063c9b24 mov       %rax,0x28(%rsp)
063c9b29 xor       %eax,%eax
063c9b2b test      $1,%al
063c9b2d jne       0x0000`0000`063C`9B31
063c9b2f jmp       0x0000`0000`063C`9B4B
063c9b31 lea       0x63C`E2D0,%rcx
063c9b38 lea       0x63D`1520,%r8
063c9b3f mov       $0x1F,%edx
063c9b44 call      0x0000`0000`063B`8E30
063c9b49 ud2
063c9b4b mov       0x38(%rsp),%rax
063c9b50 mov       0x28(%rsp),%rcx
063c9b55 mov       %rcx,0x70(%rsp)
063c9b5a movq      $0xFFFF`FFFF`FFFF`FFFF,0x78(%rsp)
063c9b63 add       $0xFFFF`FFFF`FFFF`FFFF,%rcx
063c9b67 mov       %rcx,0x80(%rsp)
063c9b6f mov       0x80(%rsp),%rcx
063c9b77 mov       %rcx,8(%rax)
063c9b7b mov       8(%rax),%rax
063c9b7f mov       %rax,0x58(%rsp)
063c9b84 mov       0x58(%rsp),%rax
063c9b89 mov       %rax,0x20(%rsp)
063c9b8e jmp       0x0000`0000`063C`9BA6
063c9b90 movq      $0,0x48(%rsp)
063c9b99 mov       0x48(%rsp),%rax
063c9b9e add       $0x88,%rsp
063c9ba5 ret
063c9ba6 mov       0x20(%rsp),%rax
063c9bab mov       %rax,0x48(%rsp)
063c9bb0 jmp       0x0000`0000`063C`9B99

core::unicode::unicode_data::grapheme_extend::lookup:
063c9bc0 sub       $0x138,%rsp
063c9bc7 mov       %ecx,%eax
063c9bc9 mov       %eax,0x78(%rsp)
063c9bcd mov       %eax,0x7C(%rsp)
063c9bd1 mov       %eax,0xFC(%rsp)
063c9bd8 lea       0x63D`1538,%rcx
063c9bdf mov       %rcx,0x100(%rsp)
063c9be7 lea       0x63D`15B8,%rdx
063c9bee mov       %rdx,0x108(%rsp)
063c9bf6 shl       $0xB,%eax
063c9bf9 mov       %eax,0x9C(%rsp)
063c9c00 mov       $0x20,%edx
063c9c05 lea       0x9C(%rsp),%r8
063c9c0d call      0x0000`0000`063C`3700
063c9c12 mov       %rdx,0x90(%rsp)
063c9c1a mov       %rax,0x88(%rsp)
063c9c22 mov       0x88(%rsp),%rax
063c9c2a test      %rax,%rax
063c9c2d je        0x0000`0000`063C`9C35
063c9c2f jmp       0x0000`0000`063C`9C31
063c9c31 jmp       0x0000`0000`063C`9C57
063c9c33 ud2
063c9c35 mov       0x90(%rsp),%rax
063c9c3d mov       %rax,0x118(%rsp)
063c9c45 add       $1,%rax
063c9c49 mov       %rax,0x70(%rsp)
063c9c4e setb      %al
063c9c51 test      $1,%al
063c9c53 jne       0x0000`0000`063C`9C98
063c9c55 jmp       0x0000`0000`063C`9C89
063c9c57 mov       0x90(%rsp),%rax
063c9c5f mov       %rax,0x110(%rsp)
063c9c67 mov       %rax,0x80(%rsp)
063c9c6f mov       0x80(%rsp),%rax
063c9c77 mov       %rax,0x68(%rsp)
063c9c7c cmp       $0x20,%rax
063c9c80 setb      %al
063c9c83 test      $1,%al
063c9c85 jne       0x0000`0000`063C`9CB2
063c9c87 jmp       0x0000`0000`063C`9CE8
063c9c89 mov       0x70(%rsp),%rax
063c9c8e mov       %rax,0x80(%rsp)
063c9c96 jmp       0x0000`0000`063C`9C6F
063c9c98 lea       0x63C`E220,%rcx
063c9c9f lea       0x63D`1080,%r8
063c9ca6 mov       $0x1C,%edx
063c9cab call      0x0000`0000`063B`8E30
063c9cb0 ud2
063c9cb2 mov       0x68(%rsp),%rcx
063c9cb7 lea       0x63D`1538,%rax
063c9cbe mov       (%rax,%rcx,4),%ecx
063c9cc1 call      0x0000`0000`063C`70D0
063c9cc6 mov       %rax,0xA0(%rsp)
063c9cce mov       0x80(%rsp),%rax
063c9cd6 add       $1,%rax
063c9cda mov       %rax,0x60(%rsp)
063c9cdf setb      %al
063c9ce2 test      $1,%al
063c9ce4 jne       0x0000`0000`063C`9D3A
063c9ce6 jmp       0x0000`0000`063C`9D00
063c9ce8 mov       0x68(%rsp),%rcx
063c9ced lea       0x63D`1098,%r8
063c9cf4 mov       $0x20,%edx
063c9cf9 call      0x0000`0000`063B`8E90
063c9cfe ud2
063c9d00 mov       0x60(%rsp),%r8
063c9d05 lea       0x63D`1538,%rcx
063c9d0c mov       $0x20,%edx
063c9d11 call      0x0000`0000`063C`2850
063c9d16 mov       %rax,0xB0(%rsp)
063c9d1e mov       $1,%eax
063c9d23 xor       %ecx,%ecx
063c9d25 cmpq      $0,0xB0(%rsp)
063c9d2e cmove     %rcx,%rax
063c9d32 cmp       $1,%rax
063c9d36 je        0x0000`0000`063C`9D54
063c9d38 jmp       0x0000`0000`063C`9D88
063c9d3a lea       0x63C`E220,%rcx
063c9d41 lea       0x63D`10B0,%r8
063c9d48 mov       $0x1C,%edx
063c9d4d call      0x0000`0000`063B`8E30
063c9d52 ud2
063c9d54 mov       0xB0(%rsp),%rax
063c9d5c mov       %rax,0x120(%rsp)
063c9d64 mov       (%rax),%ecx
063c9d66 call      0x0000`0000`063C`70D0
063c9d6b sub       0xA0(%rsp),%rax
063c9d73 mov       %rax,0x58(%rsp)
063c9d78 setb      %al
063c9d7b test      $1,%al
063c9d7d jne       0x0000`0000`063C`9E30
063c9d83 jmp       0x0000`0000`063C`9E21
063c9d88 mov       $0x2C3,%eax
063c9d8d sub       0xA0(%rsp),%rax
063c9d95 mov       %rax,0x50(%rsp)
063c9d9a setb      %al
063c9d9d test      $1,%al
063c9d9f jne       0x0000`0000`063C`9DB0
063c9da1 mov       0x50(%rsp),%rax
063c9da6 mov       %rax,0xA8(%rsp)
063c9dae jmp       0x0000`0000`063C`9DCA
063c9db0 lea       0x63C`E1F0,%rcx
063c9db7 lea       0x63D`10C8,%r8
063c9dbe mov       $0x21,%edx
063c9dc3 call      0x0000`0000`063B`8E30
063c9dc8 ud2
063c9dca mov       0x80(%rsp),%rcx
063c9dd2 mov       $1,%edx
063c9dd7 call      0x0000`0000`063C`7190
063c9ddc mov       %rax,%rcx
063c9ddf lea       0x63D`1538,%rax
063c9de6 mov       %rax,0xB8(%rsp)
063c9dee mov       0xB8(%rsp),%r8
063c9df6 call      0x0000`0000`063B`8950
063c9dfb mov       %eax,%ecx
063c9dfd xor       %r8d,%r8d
063c9e00 call      0x0000`0000`063B`8600
063c9e05 mov       %eax,%ecx
063c9e07 mov       0x78(%rsp),%eax
063c9e0b mov       %ecx,0x12C(%rsp)
063c9e12 sub       %ecx,%eax
063c9e14 mov       %eax,0x4C(%rsp)
063c9e18 setb      %al
063c9e1b test      $1,%al
063c9e1d jne       0x0000`0000`063C`9E7A
063c9e1f jmp       0x0000`0000`063C`9E4A
063c9e21 mov       0x58(%rsp),%rax
063c9e26 mov       %rax,0xA8(%rsp)
063c9e2e jmp       0x0000`0000`063C`9DCA
063c9e30 lea       0x63C`E1F0,%rcx
063c9e37 lea       0x63D`10E0,%r8
063c9e3e mov       $0x21,%edx
063c9e43 call      0x0000`0000`063B`8E30
063c9e48 ud2
063c9e4a mov       0x4C(%rsp),%eax
063c9e4e mov       %eax,0x130(%rsp)
063c9e55 movl      $0,0xC4(%rsp)
063c9e60 mov       0xA8(%rsp),%rax
063c9e68 sub       $1,%rax
063c9e6c mov       %rax,0x40(%rsp)
063c9e71 setb      %al
063c9e74 test      $1,%al
063c9e76 jne       0x0000`0000`063C`9ED4
063c9e78 jmp       0x0000`0000`063C`9E94
063c9e7a lea       0x63C`E1F0,%rcx
063c9e81 lea       0x63D`10F8,%r8
063c9e88 mov       $0x21,%edx
063c9e8d call      0x0000`0000`063B`8E30
063c9e92 ud2
063c9e94 mov       0x40(%rsp),%rax
063c9e99 movq      $0,0xC8(%rsp)
063c9ea5 mov       %rax,0xD0(%rsp)
063c9ead mov       0xC8(%rsp),%rcx
063c9eb5 mov       0xD0(%rsp),%rdx
063c9ebd call      0x0000`0000`063B`7F30
063c9ec2 mov       %rax,0xD8(%rsp)
063c9eca mov       %rdx,0xE0(%rsp)
063c9ed2 jmp       0x0000`0000`063C`9EEE
063c9ed4 lea       0x63C`E1F0,%rcx
063c9edb lea       0x63D`1110,%r8
063c9ee2 mov       $0x21,%edx
063c9ee7 call      0x0000`0000`063B`8E30
063c9eec ud2
063c9eee lea       0xD8(%rsp),%rcx
063c9ef6 call      0x0000`0000`063B`7E80
063c9efb mov       %rdx,0xF0(%rsp)
063c9f03 mov       %rax,0xE8(%rsp)
063c9f0b mov       0xE8(%rsp),%rax
063c9f13 test      %rax,%rax
063c9f16 je        0x0000`0000`063C`9FFB
063c9f1c jmp       0x0000`0000`063C`9F1E
063c9f1e jmp       0x0000`0000`063C`9F22
063c9f20 ud2
063c9f22 mov       0xA0(%rsp),%rax
063c9f2a mov       %rax,0x38(%rsp)
063c9f2f cmp       $0x2C3,%rax
063c9f35 setb      %al
063c9f38 test      $1,%al
063c9f3a jne       0x0000`0000`063C`9F3E
063c9f3c jmp       0x0000`0000`063C`9F6B
063c9f3e mov       0x38(%rsp),%rcx
063c9f43 lea       0x63D`15B8,%rax
063c9f4a mov       (%rax,%rcx),%al
063c9f4d mov       %al,0x137(%rsp)
063c9f54 movzbl    %al,%eax
063c9f57 add       0xC4(%rsp),%eax
063c9f5e mov       %eax,0x34(%rsp)
063c9f62 setb      %al
063c9f65 test      $1,%al
063c9f67 jne       0x0000`0000`063C`9F9D
063c9f69 jmp       0x0000`0000`063C`9F83
063c9f6b mov       0x38(%rsp),%rcx
063c9f70 lea       0x63D`1128,%r8
063c9f77 mov       $0x2C3,%edx
063c9f7c call      0x0000`0000`063B`8E90
063c9f81 ud2
063c9f83 mov       0x4C(%rsp),%eax
063c9f87 mov       0x34(%rsp),%ecx
063c9f8b mov       %ecx,0xC4(%rsp)
063c9f92 cmp       %eax,0xC4(%rsp)
063c9f99 ja        0x0000`0000`063C`9FFB
063c9f9b jmp       0x0000`0000`063C`9FB7
063c9f9d lea       0x63C`E220,%rcx
063c9fa4 lea       0x63D`1140,%r8
063c9fab mov       $0x1C,%edx
063c9fb0 call      0x0000`0000`063B`8E30
063c9fb5 ud2
063c9fb7 mov       0xA0(%rsp),%rax
063c9fbf add       $1,%rax
063c9fc3 mov       %rax,0x28(%rsp)
063c9fc8 setb      %al
063c9fcb test      $1,%al
063c9fcd jne       0x0000`0000`063C`9FE1
063c9fcf mov       0x28(%rsp),%rax
063c9fd4 mov       %rax,0xA0(%rsp)
063c9fdc jmp       0x0000`0000`063C`9EEE
063c9fe1 lea       0x63C`E220,%rcx
063c9fe8 lea       0x63D`1158,%r8
063c9fef mov       $0x1C,%edx
063c9ff4 call      0x0000`0000`063B`8E30
063c9ff9 ud2
063c9ffb mov       0xA0(%rsp),%rax
063ca003 and       $1,%rax
063ca007 cmp       $1,%rax
063ca00b sete      %al
063ca00e mov       %al,0x27(%rsp)
063ca012 mov       0x27(%rsp),%al
063ca016 and       $1,%al
063ca018 movzbl    %al,%eax
063ca01b add       $0x138,%rsp
063ca022 ret

core::num::impl$9::checked_div:
063ca060 sub       $0x50,%rsp
063ca064 mov       %rdx,8(%rsp)
063ca069 mov       %rcx,0x10(%rsp)
063ca06e mov       %rcx,0x30(%rsp)
063ca073 mov       %rdx,0x38(%rsp)
063ca078 cmp       $0,%rdx
063ca07c sete      %al
063ca07f and       $1,%al
063ca081 mov       %al,0x47(%rsp)
063ca085 mov       0x47(%rsp),%al
063ca089 mov       %al,0x1F(%rsp)
063ca08d mov       0x1F(%rsp),%al
063ca091 test      $1,%al
063ca093 jne       0x0000`0000`063C`A0B6
063ca095 jmp       0x0000`0000`063C`A097
063ca097 mov       8(%rsp),%rcx
063ca09c mov       0x10(%rsp),%rax
063ca0a1 xor       %edx,%edx
063ca0a3 div       %rcx
063ca0a6 mov       %rax,0x48(%rsp)
063ca0ab mov       0x48(%rsp),%rax
063ca0b0 mov       %rax,(%rsp)
063ca0b4 jmp       0x0000`0000`063C`A0CE
063ca0b6 movq      $0,0x20(%rsp)
063ca0bf mov       0x20(%rsp),%rax
063ca0c4 mov       0x28(%rsp),%rdx
063ca0c9 add       $0x50,%rsp
063ca0cd ret
063ca0ce mov       (%rsp),%rax
063ca0d2 mov       %rax,0x28(%rsp)
063ca0d7 movq      $1,0x20(%rsp)
063ca0e0 jmp       0x0000`0000`063C`A0BF

core::num::impl$9::checked_rem:
063ca0f0 sub       $0x50,%rsp
063ca0f4 mov       %rdx,8(%rsp)
063ca0f9 mov       %rcx,0x10(%rsp)
063ca0fe mov       %rcx,0x30(%rsp)
063ca103 mov       %rdx,0x38(%rsp)
063ca108 cmp       $0,%rdx
063ca10c sete      %al
063ca10f and       $1,%al
063ca111 mov       %al,0x47(%rsp)
063ca115 mov       0x47(%rsp),%al
063ca119 mov       %al,0x1F(%rsp)
063ca11d mov       0x1F(%rsp),%al
063ca121 test      $1,%al
063ca123 jne       0x0000`0000`063C`A146
063ca125 jmp       0x0000`0000`063C`A127
063ca127 mov       8(%rsp),%rcx
063ca12c mov       0x10(%rsp),%rax
063ca131 xor       %edx,%edx
063ca133 div       %rcx
063ca136 mov       %rdx,0x48(%rsp)
063ca13b mov       0x48(%rsp),%rax
063ca140 mov       %rax,(%rsp)
063ca144 jmp       0x0000`0000`063C`A15E
063ca146 movq      $0,0x20(%rsp)
063ca14f mov       0x20(%rsp),%rax
063ca154 mov       0x28(%rsp),%rdx
063ca159 add       $0x50,%rsp
063ca15d ret
063ca15e mov       (%rsp),%rax
063ca162 mov       %rax,0x28(%rsp)
063ca167 movq      $1,0x20(%rsp)
063ca170 jmp       0x0000`0000`063C`A14F

core::hint::unreachable_unchecked:
063ca180 ud2

compiler_builtins::int::specialized_div_rem::zero_div_fn:
063ca190 sub       $0x28,%rsp
063ca194 call      0x0000`0000`063C`A180
063ca199 ud2

compiler_builtins::int::specialized_div_rem::u64_by_u64_div_rem:
063ca1a0 sub       $0x88,%rsp
063ca1a7 mov       %rdx,0x28(%rsp)
063ca1ac mov       %rcx,0x30(%rsp)
063ca1b1 mov       %rcx,0x68(%rsp)
063ca1b6 mov       %rdx,0x70(%rsp)
063ca1bb call      0x0000`0000`063C`A060
063ca1c0 mov       %rdx,0x50(%rsp)
063ca1c5 mov       %rax,0x48(%rsp)
063ca1ca cmpq      $1,0x48(%rsp)
063ca1d0 jne       0x0000`0000`063C`A1FC
063ca1d2 mov       0x28(%rsp),%rdx
063ca1d7 mov       0x30(%rsp),%rcx
063ca1dc mov       0x50(%rsp),%rax
063ca1e1 mov       %rax,0x20(%rsp)
063ca1e6 mov       %rax,0x78(%rsp)
063ca1eb call      0x0000`0000`063C`A0F0
063ca1f0 mov       %rdx,0x60(%rsp)
063ca1f5 mov       %rax,0x58(%rsp)
063ca1fa jmp       0x0000`0000`063C`A203
063ca1fc call      0x0000`0000`063C`A190
063ca201 ud2
063ca203 cmpq      $1,0x58(%rsp)
063ca209 jne       0x0000`0000`063C`A1FC
063ca20b mov       0x20(%rsp),%rcx
063ca210 mov       0x60(%rsp),%rax
063ca215 mov       %rax,0x80(%rsp)
063ca21d mov       %rcx,0x38(%rsp)
063ca222 mov       %rax,0x40(%rsp)
063ca227 mov       0x38(%rsp),%rax
063ca22c mov       0x40(%rsp),%rdx
063ca231 add       $0x88,%rsp
063ca238 ret

compiler_builtins::int::specialized_div_rem::u128_by_u64_div_rem:
063ca240 sub       $0x60,%rsp
063ca244 mov       %r8,(%rsp)
063ca248 mov       %rcx,0x38(%rsp)
063ca24d mov       %rdx,0x40(%rsp)
063ca252 mov       %r8,0x48(%rsp)
063ca257 mov       %rcx,%rax
063ca25a mov       %rax,8(%rsp)
063ca25f mov       %rcx,0x50(%rsp)
063ca264 xor       %eax,%eax
063ca266 mov       %rdx,0x10(%rsp)
063ca26b mov       8(%rsp),%rax
063ca270 mov       (%rsp),%rcx
063ca274 mov       0x10(%rsp),%rdx
063ca279 mov       %rdx,0x58(%rsp)
063ca27e div       %rcx
063ca281 mov       %rax,0x28(%rsp)
063ca286 mov       %rdx,0x30(%rsp)
063ca28b mov       0x28(%rsp),%rcx
063ca290 mov       0x30(%rsp),%rax
063ca295 mov       %rcx,0x18(%rsp)
063ca29a mov       %rax,0x20(%rsp)
063ca29f mov       0x18(%rsp),%rax
063ca2a4 mov       0x20(%rsp),%rdx
063ca2a9 add       $0x60,%rsp
063ca2ad ret

compiler_builtins::int::specialized_div_rem::u128_div_rem:
063ca2b0 sub       $0x278,%rsp
063ca2b7 mov       %rcx,%rax
063ca2ba mov       %rax,0x138(%rsp)
063ca2c2 mov       0x2A0(%rsp),%rax
063ca2ca mov       %rax,0x140(%rsp)
063ca2d2 mov       %r9,0x148(%rsp)
063ca2da mov       %r8,0x150(%rsp)
063ca2e2 mov       %rdx,0x158(%rsp)
063ca2ea mov       %rcx,0x160(%rsp)
063ca2f2 mov       %rdx,0x1B0(%rsp)
063ca2fa mov       %r8,0x1B8(%rsp)
063ca302 mov       %rax,0x1C8(%rsp)
063ca30a mov       %r9,0x1C0(%rsp)
063ca312 movl      $0x40,0x1D4(%rsp)
063ca31d mov       %rdx,%rax
063ca320 mov       %rax,0x168(%rsp)
063ca328 mov       %rdx,0x1D8(%rsp)
063ca330 xor       %eax,%eax
063ca332 mov       %r8,0x170(%rsp)
063ca33a mov       0x140(%rsp),%rax
063ca342 mov       0x148(%rsp),%rcx
063ca34a mov       0x170(%rsp),%rdx
063ca352 mov       %rdx,%r8
063ca355 mov       %r8,0x120(%rsp)
063ca35d mov       %rdx,0x1E0(%rsp)
063ca365 mov       %rcx,%rdx
063ca368 mov       %rdx,0x128(%rsp)
063ca370 mov       %rcx,0x1E8(%rsp)
063ca378 xor       %ecx,%ecx
063ca37a mov       %rax,0x130(%rsp)
063ca382 mov       0x130(%rsp),%rax
063ca38a mov       %rax,0x118(%rsp)
063ca392 mov       %rax,0x1F0(%rsp)
063ca39a cmp       $0,%rax
063ca39e jne       0x0000`0000`063C`A3B7
063ca3a0 mov       0x128(%rsp),%rax
063ca3a8 cmp       $0,%rax
063ca3ac je        0x0000`0000`063C`A87C
063ca3b2 jmp       0x0000`0000`063C`A883
063ca3b7 mov       0x118(%rsp),%rax
063ca3bf mov       %rax,0x248(%rsp)
063ca3c7 bsr       %rax,%rax
063ca3cb mov       $0x7F,%ecx
063ca3d0 cmove     %rcx,%rax
063ca3d4 xor       $0x3F,%rax
063ca3d8 mov       %rax,0x250(%rsp)
063ca3e0 mov       0x250(%rsp),%rax
063ca3e8 mov       %eax,0x114(%rsp)
063ca3ef mov       %eax,0x1F8(%rsp)
063ca3f6 mov       0x114(%rsp),%ecx
063ca3fd mov       $0x40,%eax
063ca402 sub       %ecx,%eax
063ca404 mov       %eax,0x110(%rsp)
063ca40b setb      %al
063ca40e test      $1,%al
063ca410 jne       0x0000`0000`063C`A468
063ca412 mov       0x140(%rsp),%rdx
063ca41a mov       0x148(%rsp),%r8
063ca422 mov       0x110(%rsp),%ecx
063ca429 mov       %ecx,0x1FC(%rsp)
063ca430 test      $0xFFFF`FF80,%ecx
063ca436 setne     %al
063ca439 mov       %cl,%r9b
063ca43c mov       %r9b,%cl
063ca43f shrd      %cl,%rdx,%r8
063ca443 mov       %r9b,%cl
063ca446 shr       %cl,%rdx
063ca449 mov       %rdx,%rcx
063ca44c xor       %edx,%edx
063ca44e test      $0x40,%r9b
063ca452 cmovne    %rcx,%r8
063ca456 mov       %r8,0x108(%rsp)
063ca45e cmovne    %rdx,%rcx
063ca462 test      $1,%al
063ca464 jne       0x0000`0000`063C`A4CA
063ca466 jmp       0x0000`0000`063C`A482
063ca468 lea       0x63D`1880,%rcx
063ca46f lea       0x63D`1A90,%r8
063ca476 mov       $0x21,%edx
063ca47b call      0x0000`0000`063B`8E30
063ca480 ud2
063ca482 mov       0x150(%rsp),%rax
063ca48a mov       0x158(%rsp),%rdx
063ca492 mov       0x108(%rsp),%rcx
063ca49a mov       %rcx,%r8
063ca49d mov       %r8,0xF0(%rsp)
063ca4a5 mov       %rcx,0x200(%rsp)
063ca4ad mov       %rax,%rcx
063ca4b0 shld      $0x3F,%rdx,%rcx
063ca4b5 mov       %rcx,0xF8(%rsp)
063ca4bd shr       $1,%rax
063ca4c0 mov       %rax,0x100(%rsp)
063ca4c8 jmp       0x0000`0000`063C`A4E4
063ca4ca lea       0x63D`18B0,%rcx
063ca4d1 lea       0x63D`1A90,%r8
063ca4d8 mov       $0x24,%edx
063ca4dd call      0x0000`0000`063B`8E30
063ca4e2 ud2
063ca4e4 mov       0xF0(%rsp),%r8
063ca4ec mov       0x100(%rsp),%rdx
063ca4f4 mov       0xF8(%rsp),%rcx
063ca4fc call      0x0000`0000`063C`A240
063ca501 mov       %rax,0xE8(%rsp)
063ca509 mov       %rax,0x208(%rsp)
063ca511 mov       %rdx,0x210(%rsp)
063ca519 mov       $0x40,%eax
063ca51e sub       $1,%eax
063ca521 mov       %eax,0xE4(%rsp)
063ca528 setb      %al
063ca52b test      $1,%al
063ca52d jne       0x0000`0000`063C`A54F
063ca52f mov       0x114(%rsp),%ecx
063ca536 mov       0xE4(%rsp),%eax
063ca53d sub       %ecx,%eax
063ca53f mov       %eax,0xE0(%rsp)
063ca546 setb      %al
063ca549 test      $1,%al
063ca54b jne       0x0000`0000`063C`A59A
063ca54d jmp       0x0000`0000`063C`A569
063ca54f lea       0x63D`1880,%rcx
063ca556 lea       0x63D`1A90,%r8
063ca55d mov       $0x21,%edx
063ca562 call      0x0000`0000`063B`8E30
063ca567 ud2
063ca569 mov       0xE8(%rsp),%rdx
063ca571 mov       0xE0(%rsp),%ecx
063ca578 mov       %ecx,%eax
063ca57a and       $0xFFFF`FFC0,%eax
063ca57d cmp       $0,%eax
063ca580 setne     %al
063ca583 mov       %ecx,%ecx
063ca585 and       $0x3F,%rcx
063ca589 shr       %cl,%rdx
063ca58c mov       %rdx,0xD8(%rsp)
063ca594 test      $1,%al
063ca596 jne       0x0000`0000`063C`A5D1
063ca598 jmp       0x0000`0000`063C`A5B4
063ca59a lea       0x63D`1880,%rcx
063ca5a1 lea       0x63D`1A90,%r8
063ca5a8 mov       $0x21,%edx
063ca5ad call      0x0000`0000`063B`8E30
063ca5b2 ud2
063ca5b4 mov       0xD8(%rsp),%rax
063ca5bc mov       %rax,0x198(%rsp)
063ca5c4 cmpq      $0,0x198(%rsp)
063ca5cd je        0x0000`0000`063C`A5EB
063ca5cf jmp       0x0000`0000`063C`A646
063ca5d1 lea       0x63D`18B0,%rcx
063ca5d8 lea       0x63D`1A90,%r8
063ca5df mov       $0x24,%edx
063ca5e4 call      0x0000`0000`063B`8E30
063ca5e9 ud2
063ca5eb mov       0x140(%rsp),%r8
063ca5f3 mov       0x148(%rsp),%rdx
063ca5fb mov       0x198(%rsp),%rcx
063ca603 mov       %rcx,0x258(%rsp)
063ca60b movq      $0,0x260(%rsp)
063ca617 mov       %r8,0x270(%rsp)
063ca61f mov       %rdx,0x268(%rsp)
063ca627 mov       %rcx,%rax
063ca62a mul       %rdx
063ca62d imul      %r8,%rcx
063ca631 add       %rcx,%rdx
063ca634 mov       %rdx,0xC8(%rsp)
063ca63c mov       %rax,0xD0(%rsp)
063ca644 jmp       0x0000`0000`063C`A690
063ca646 mov       0x198(%rsp),%rax
063ca64e sub       $1,%rax
063ca652 mov       %rax,0xC0(%rsp)
063ca65a setb      %al
063ca65d test      $1,%al
063ca65f jne       0x0000`0000`063C`A676
063ca661 mov       0xC0(%rsp),%rax
063ca669 mov       %rax,0x198(%rsp)
063ca671 jmp       0x0000`0000`063C`A5EB
063ca676 lea       0x63D`1880,%rcx
063ca67d lea       0x63D`1A90,%r8
063ca684 mov       $0x21,%edx
063ca689 call      0x0000`0000`063B`8E30
063ca68e ud2
063ca690 mov       0xC8(%rsp),%rax
063ca698 mov       0x150(%rsp),%rcx
063ca6a0 mov       0xD0(%rsp),%r8
063ca6a8 mov       0x158(%rsp),%rdx
063ca6b0 sub       %r8,%rdx
063ca6b3 mov       %rdx,0xB0(%rsp)
063ca6bb sbb       %rax,%rcx
063ca6be setb      %al
063ca6c1 mov       %rcx,0xB8(%rsp)
063ca6c9 test      $1,%al
063ca6cb jne       0x0000`0000`063C`A717
063ca6cd mov       0x140(%rsp),%rcx
063ca6d5 mov       0x148(%rsp),%r8
063ca6dd mov       0xB8(%rsp),%rax
063ca6e5 mov       0xB0(%rsp),%rdx
063ca6ed mov       %rdx,0x1A0(%rsp)
063ca6f5 mov       %rax,0x1A8(%rsp)
063ca6fd mov       0x1A0(%rsp),%rdx
063ca705 mov       0x1A8(%rsp),%rax
063ca70d sub       %r8,%rdx
063ca710 sbb       %rcx,%rax
063ca713 jae       0x0000`0000`063C`A772
063ca715 jmp       0x0000`0000`063C`A731
063ca717 lea       0x63D`1880,%rcx
063ca71e lea       0x63D`1A90,%r8
063ca725 mov       $0x21,%edx
063ca72a call      0x0000`0000`063B`8E30
063ca72f ud2
063ca731 mov       0x198(%rsp),%rdx
063ca739 mov       0x1A0(%rsp),%rax
063ca741 mov       0x1A8(%rsp),%rcx
063ca749 mov       %rdx,0x178(%rsp)
063ca751 movq      $0,0x180(%rsp)
063ca75d mov       %rcx,0x190(%rsp)
063ca765 mov       %rax,0x188(%rsp)
063ca76d jmp       0x0000`0000`063C`A835
063ca772 mov       0x198(%rsp),%rax
063ca77a add       $1,%rax
063ca77e mov       %rax,0xA8(%rsp)
063ca786 setb      %al
063ca789 test      $1,%al
063ca78b jne       0x0000`0000`063C`A7DC
063ca78d mov       0x140(%rsp),%rax
063ca795 mov       0x148(%rsp),%r8
063ca79d mov       0xA8(%rsp),%rcx
063ca7a5 mov       %rcx,0x198(%rsp)
063ca7ad mov       0x1A0(%rsp),%rdx
063ca7b5 mov       0x1A8(%rsp),%rcx
063ca7bd sub       %r8,%rdx
063ca7c0 mov       %rdx,0x98(%rsp)
063ca7c8 sbb       %rax,%rcx
063ca7cb setb      %al
063ca7ce mov       %rcx,0xA0(%rsp)
063ca7d6 test      $1,%al
063ca7d8 jne       0x0000`0000`063C`A81B
063ca7da jmp       0x0000`0000`063C`A7F6
063ca7dc lea       0x63D`18E0,%rcx
063ca7e3 lea       0x63D`1A90,%r8
063ca7ea mov       $0x1C,%edx
063ca7ef call      0x0000`0000`063B`8E30
063ca7f4 ud2
063ca7f6 mov       0xA0(%rsp),%rax
063ca7fe mov       0x98(%rsp),%rcx
063ca806 mov       %rcx,0x1A0(%rsp)
063ca80e mov       %rax,0x1A8(%rsp)
063ca816 jmp       0x0000`0000`063C`A731
063ca81b lea       0x63D`1880,%rcx
063ca822 lea       0x63D`1A90,%r8
063ca829 mov       $0x21,%edx
063ca82e call      0x0000`0000`063B`8E30
063ca833 ud2
063ca835 mov       0x138(%rsp),%rax
063ca83d mov       0x160(%rsp),%rcx
063ca845 mov       0x178(%rsp),%rdx
063ca84d mov       0x180(%rsp),%r8
063ca855 mov       0x188(%rsp),%r9
063ca85d mov       0x190(%rsp),%r10
063ca865 mov       %r10,0x18(%rcx)
063ca869 mov       %r9,0x10(%rcx)
063ca86d mov       %r8,8(%rcx)
063ca871 mov       %rdx,(%rcx)
063ca874 add       $0x278,%rsp
063ca87b ret
063ca87c call      0x0000`0000`063C`A190
063ca881 ud2
063ca883 mov       0x120(%rsp),%rax
063ca88b mov       0x128(%rsp),%rcx
063ca893 cmp       %rcx,%rax
063ca896 jb        0x0000`0000`063C`A8BF
063ca898 mov       0x128(%rsp),%rdx
063ca8a0 mov       0x120(%rsp),%rcx
063ca8a8 call      0x0000`0000`063C`A1A0
063ca8ad mov       %rax,0x88(%rsp)
063ca8b5 mov       %rdx,0x90(%rsp)
063ca8bd jmp       0x0000`0000`063C`A933
063ca8bf mov       0x128(%rsp),%r8
063ca8c7 mov       0x150(%rsp),%rdx
063ca8cf mov       0x158(%rsp),%rcx
063ca8d7 call      0x0000`0000`063C`A240
063ca8dc mov       %rdx,0x78(%rsp)
063ca8e1 mov       %rax,0x80(%rsp)
063ca8e9 mov       0x78(%rsp),%rax
063ca8ee mov       0x80(%rsp),%rcx
063ca8f6 mov       %rcx,0x218(%rsp)
063ca8fe mov       %rax,0x220(%rsp)
063ca906 mov       %rcx,0x178(%rsp)
063ca90e movq      $0,0x180(%rsp)
063ca91a mov       %rax,0x188(%rsp)
063ca922 movq      $0,0x190(%rsp)
063ca92e jmp       0x0000`0000`063C`A835
063ca933 mov       0x90(%rsp),%rcx
063ca93b mov       0x168(%rsp),%rax
063ca943 mov       0x88(%rsp),%rdx
063ca94b mov       %rdx,0x228(%rsp)
063ca953 mov       %rcx,0x230(%rsp)
063ca95b mov       %rax,0x58(%rsp)
063ca960 xor       %eax,%eax
063ca962 mov       %rax,0x60(%rsp)
063ca967 mov       %rcx,0x68(%rsp)
063ca96c mov       %rax,0x70(%rsp)
063ca971 mov       0x128(%rsp),%r8
063ca979 mov       0x68(%rsp),%rax
063ca97e mov       0x60(%rsp),%rdx
063ca983 mov       0x70(%rsp),%r9
063ca988 mov       0x58(%rsp),%rcx
063ca98d or        %r9,%rcx
063ca990 or        %rax,%rdx
063ca993 call      0x0000`0000`063C`A240
063ca998 mov       %rdx,0x48(%rsp)
063ca99d mov       %rax,0x50(%rsp)
063ca9a2 mov       %rax,0x238(%rsp)
063ca9aa mov       %rdx,0x240(%rsp)
063ca9b2 mov       0x88(%rsp),%rax
063ca9ba mov       0x50(%rsp),%rcx
063ca9bf mov       %rcx,0x28(%rsp)
063ca9c4 xor       %ecx,%ecx
063ca9c6 mov       %rcx,0x30(%rsp)
063ca9cb mov       %rcx,0x38(%rsp)
063ca9d0 mov       %rax,0x40(%rsp)
063ca9d5 mov       0x48(%rsp),%rax
063ca9da mov       0x30(%rsp),%r8
063ca9df mov       0x28(%rsp),%rdx
063ca9e4 mov       0x40(%rsp),%r9
063ca9e9 mov       0x38(%rsp),%rcx
063ca9ee or        %r9,%rcx
063ca9f1 or        %r8,%rdx
063ca9f4 mov       %rdx,0x178(%rsp)
063ca9fc mov       %rcx,0x180(%rsp)
063caa04 mov       %rax,0x188(%rsp)
063caa0c movq      $0,0x190(%rsp)
063caa18 jmp       0x0000`0000`063C`A835

compiler_builtins::int::udiv::__udivti3:
063caa20 sub       $0x78,%rsp
063caa24 mov       %r8,%rax
063caa27 mov       %rdx,0x30(%rsp)
063caa2c mov       %rcx,%rdx
063caa2f mov       0x30(%rsp),%rcx
063caa34 mov       %rdx,0x38(%rsp)
063caa39 mov       %rdx,0x40(%rsp)
063caa3e mov       (%rcx),%rdx
063caa41 mov       8(%rcx),%r8
063caa45 mov       (%rax),%r9
063caa48 mov       8(%rax),%rcx
063caa4c mov       %rsp,%rax
063caa4f mov       %rcx,0x20(%rax)
063caa53 lea       0x58(%rsp),%rcx
063caa58 call      0x0000`0000`063C`A2B0
063caa5d mov       0x58(%rsp),%rax
063caa62 mov       %rax,0x48(%rsp)
063caa67 mov       0x60(%rsp),%rax
063caa6c mov       %rax,0x50(%rsp)
063caa71 mov       0x40(%rsp),%rax
063caa76 mov       0x38(%rsp),%rcx
063caa7b mov       0x50(%rsp),%rdx
063caa80 mov       0x48(%rsp),%r8
063caa85 mov       %r8,(%rcx)
063caa88 mov       %rdx,8(%rcx)
063caa8c add       $0x78,%rsp
063caa90 ret

compiler_builtins::int::udiv::__udivti3::__udivti3:
063caaa0 sub       $0x58,%rsp
063caaa4 mov       %r8,0x28(%rsp)
063caaa9 mov       %rdx,%rax
063caaac mov       0x28(%rsp),%rdx
063caab1 mov       %rcx,%r8
063caab4 mov       %r8,0x30(%rsp)
063caab9 mov       (%rax),%r8
063caabc mov       8(%rax),%r9
063caac0 mov       (%rdx),%rax
063caac3 mov       8(%rdx),%rdx
063caac7 mov       %r9,0x40(%rsp)
063caacc mov       %r8,0x38(%rsp)
063caad1 mov       %rdx,0x50(%rsp)
063caad6 mov       %rax,0x48(%rsp)
063caadb lea       0x38(%rsp),%rdx
063caae0 lea       0x48(%rsp),%r8
063caae5 call      0x0000`0000`063C`AA20
063caaea mov       0x30(%rsp),%rax
063caaef add       $0x58,%rsp
063caaf3 ret

compiler_builtins::mem::memcpy:
063cab30 push      %rsi
063cab31 push      %rdi
063cab32 sub       $0x48,%rsp
063cab36 mov       %r8,%rax
063cab39 mov       %rdx,%rsi
063cab3c mov       %rcx,%rdi
063cab3f mov       %rdi,(%rsp)
063cab43 mov       %rdi,8(%rsp)
063cab48 mov       %rsi,0x10(%rsp)
063cab4d mov       %rax,0x18(%rsp)
063cab52 mov       %rdi,0x20(%rsp)
063cab57 mov       %rsi,0x28(%rsp)
063cab5c mov       %rax,0x30(%rsp)
063cab61 mov       %rax,%rcx
063cab64 shr       $3,%rcx
063cab68 mov       %rcx,0x38(%rsp)
063cab6d and       $7,%rax
063cab71 mov       %rax,0x40(%rsp)
063cab76 rep movsq (%rsi),(%rdi)
063cab79 mov       %eax,%ecx
063cab7b rep movsb (%rsi),(%rdi)
063cab7d mov       (%rsp),%rax
063cab81 add       $0x48,%rsp
063cab85 pop       %rdi
063cab86 pop       %rsi
063cab87 ret

compiler_builtins::mem::memcpy::memcpy:
063cab90 sub       $0x48,%rsp
063cab94 mov       %rcx,0x30(%rsp)
063cab99 mov       %rdx,0x38(%rsp)
063cab9e mov       %r8,0x40(%rsp)
063caba3 call      0x0000`0000`063C`AB30
063caba8 mov       %rax,0x28(%rsp)
063cabad mov       0x28(%rsp),%rax
063cabb2 add       $0x48,%rsp
063cabb6 ret

compiler_builtins::mem::memset:
063cabc0 push      %rdi
063cabc1 sub       $0x80,%rsp
063cabc8 mov       %rcx,0x20(%rsp)
063cabcd mov       %rcx,0x40(%rsp)
063cabd2 mov       %edx,0x4C(%rsp)
063cabd6 mov       %r8,0x50(%rsp)
063cabdb mov       %dl,%al
063cabdd mov       %rcx,0x58(%rsp)
063cabe2 mov       %al,0x67(%rsp)
063cabe6 mov       %r8,0x68(%rsp)
063cabeb mov       %r8,%rcx
063cabee shr       $3,%rcx
063cabf2 mov       %rcx,0x28(%rsp)
063cabf7 mov       %rcx,0x70(%rsp)
063cabfc and       $7,%r8
063cac00 mov       %r8,0x30(%rsp)
063cac05 mov       %r8,0x78(%rsp)
063cac0a movzbl    %al,%eax
063cac0d movabs    $0x101`0101`0101`0101,%rcx
063cac17 mul       %rcx
063cac1a mov       %rax,0x38(%rsp)
063cac1f seto      %al
063cac22 test      $1,%al
063cac24 jne       0x0000`0000`063C`AC28
063cac26 jmp       0x0000`0000`063C`AC42
063cac28 lea       0x63D`1900,%rcx
063cac2f lea       0x63D`1990,%r8
063cac36 mov       $0x21,%edx
063cac3b call      0x0000`0000`063B`8E30
063cac40 ud2
063cac42 mov       0x38(%rsp),%rax
063cac47 mov       0x20(%rsp),%rdi
063cac4c mov       0x28(%rsp),%rcx
063cac51 mov       0x30(%rsp),%rdx
063cac56 rep stos  %rax,(%rdi)
063cac59 mov       %edx,%ecx
063cac5b rep stos  %al,(%rdi)
063cac5d mov       0x20(%rsp),%rax
063cac62 add       $0x80,%rsp
063cac69 pop       %rdi
063cac6a ret

compiler_builtins::mem::memset::memset:
063cab00 sub       $0x48,%rsp
063cab04 mov       %rcx,0x30(%rsp)
063cab09 mov       %edx,0x3C(%rsp)
063cab0d mov       %r8,0x40(%rsp)
063cab12 call      0x0000`0000`063C`ABC0
063cab17 mov       %rax,0x28(%rsp)
063cab1c mov       0x28(%rsp),%rax
063cab21 add       $0x48,%rsp
063cab25 ret

compiler_builtins::mem::memcmp:
063cac70 sub       $0xE8,%rsp
063cac77 mov       %r8,0x50(%rsp)
063cac7c mov       %rdx,0x58(%rsp)
063cac81 mov       %rcx,0x60(%rsp)
063cac86 mov       %rcx,0x78(%rsp)
063cac8b mov       %rdx,0x80(%rsp)
063cac93 mov       %r8,0x88(%rsp)
063cac9b movq      $0,0x70(%rsp)
063caca4 mov       0x50(%rsp),%rax
063caca9 cmp       %rax,0x70(%rsp)
063cacae jb        0x0000`0000`063C`ACBD
063cacb0 movl      $0,0x6C(%rsp)
063cacb8 jmp       0x0000`0000`063C`ADC3
063cacbd mov       0x60(%rsp),%rax
063cacc2 mov       0x70(%rsp),%rcx
063cacc7 mov       %rax,0xA8(%rsp)
063caccf mov       %rcx,0xB0(%rsp)
063cacd7 mov       %rax,0xB8(%rsp)
063cacdf mov       %rcx,0xC0(%rsp)
063cace7 add       %rcx,%rax
063cacea mov       %rax,0xC8(%rsp)
063cacf2 mov       0xC8(%rsp),%rax
063cacfa mov       %rax,0x48(%rsp)
063cacff mov       0x58(%rsp),%rax
063cad04 mov       0x48(%rsp),%rcx
063cad09 mov       (%rcx),%cl
063cad0b mov       %cl,0x3F(%rsp)
063cad0f mov       %cl,0x96(%rsp)
063cad16 mov       0x70(%rsp),%rcx
063cad1b mov       %rax,0x98(%rsp)
063cad23 mov       %rcx,0xA0(%rsp)
063cad2b mov       %rax,0xD0(%rsp)
063cad33 mov       %rcx,0xD8(%rsp)
063cad3b add       %rcx,%rax
063cad3e mov       %rax,0xE0(%rsp)
063cad46 mov       0xE0(%rsp),%rax
063cad4e mov       %rax,0x40(%rsp)
063cad53 mov       0x3F(%rsp),%al
063cad57 mov       0x40(%rsp),%rcx
063cad5c mov       (%rcx),%cl
063cad5e mov       %cl,0x3E(%rsp)
063cad62 mov       %cl,0x97(%rsp)
063cad69 cmp       %cl,%al
063cad6b jne       0x0000`0000`063C`AD84
063cad6d mov       0x70(%rsp),%rax
063cad72 add       $1,%rax
063cad76 mov       %rax,0x30(%rsp)
063cad7b setb      %al
063cad7e test      $1,%al
063cad80 jne       0x0000`0000`063C`ADDE
063cad82 jmp       0x0000`0000`063C`ADCF
063cad84 mov       0x3E(%rsp),%cl
063cad88 mov       0x3F(%rsp),%al
063cad8c movzbl    %al,%eax
063cad8f movzbl    %cl,%ecx
063cad92 sub       %ecx,%eax
063cad94 mov       %eax,0x2C(%rsp)
063cad98 seto      %al
063cad9b test      $1,%al
063cad9d jne       0x0000`0000`063C`ADA9
063cad9f mov       0x2C(%rsp),%eax
063cada3 mov       %eax,0x6C(%rsp)
063cada7 jmp       0x0000`0000`063C`ADC3
063cada9 lea       0x63D`1880,%rcx
063cadb0 lea       0x63D`1AA8,%r8
063cadb7 mov       $0x21,%edx
063cadbc call      0x0000`0000`063B`8E30
063cadc1 ud2
063cadc3 mov       0x6C(%rsp),%eax
063cadc7 add       $0xE8,%rsp
063cadce ret
063cadcf mov       0x30(%rsp),%rax
063cadd4 mov       %rax,0x70(%rsp)
063cadd9 jmp       0x0000`0000`063C`ACA4
063cadde lea       0x63D`18E0,%rcx
063cade5 lea       0x63D`1AC0,%r8
063cadec mov       $0x1C,%edx
063cadf1 call      0x0000`0000`063B`8E30
063cadf6 ud2

compiler_builtins::mem::memcmp::memcmp:
063cae00 sub       $0x48,%rsp
063cae04 mov       %rcx,0x30(%rsp)
063cae09 mov       %rdx,0x38(%rsp)
063cae0e mov       %r8,0x40(%rsp)
063cae13 call      0x0000`0000`063C`AC70
063cae18 mov       %eax,0x2C(%rsp)
063cae1c mov       0x2C(%rsp),%eax
063cae20 add       $0x48,%rsp
063cae24 ret

core::result::impl$28::from_residual<tuple$<>,enum$<ucs2::Error>,enum$<ucs2::Error> >:
063cae30 sub       $0x28,%rsp
063cae34 and       $1,%cl
063cae37 mov       %cl,0x25(%rsp)
063cae3b mov       0x25(%rsp),%cl
063cae3f mov       %cl,%al
063cae41 and       $1,%al
063cae43 mov       %al,0x27(%rsp)
063cae47 and       $1,%cl
063cae4a call      0x0000`0000`063C`B060
063cae4f mov       %al,0x24(%rsp)
063cae53 mov       0x24(%rsp),%al
063cae57 and       $1,%al
063cae59 mov       %al,0x26(%rsp)
063cae5d mov       0x26(%rsp),%al
063cae61 add       $0x28,%rsp
063cae65 ret

core::ptr::mut_ptr::impl$0::is_null<u16>:
063cae70 sub       $0x38,%rsp
063cae74 mov       %rcx,0x30(%rsp)
063cae79 mov       %rcx,0x28(%rsp)
063cae7e mov       0x28(%rsp),%rcx
063cae83 xor       %eax,%eax
063cae85 mov       %eax,%edx
063cae87 call      0x0000`0000`063B`5760
063cae8c mov       %al,0x27(%rsp)
063cae90 mov       0x27(%rsp),%al
063cae94 and       $1,%al
063cae96 movzbl    %al,%eax
063cae99 add       $0x38,%rsp
063cae9d ret

core::ptr::non_null::NonNull<u16>::new_unchecked<u16>:
063caea0 sub       $0x10,%rsp
063caea4 mov       %rcx,8(%rsp)
063caea9 mov       %rcx,(%rsp)
063caead mov       (%rsp),%rax
063caeb1 add       $0x10,%rsp
063caeb5 ret

core::ptr::non_null::NonNull<u16>::as_ptr<u16>:
063caec0 push      %rax
063caec1 mov       %rcx,%rax
063caec4 mov       %rax,(%rsp)
063caec8 pop       %rcx
063caec9 ret

core::ptr::const_ptr::impl$0::is_null<u16>:
063caed0 sub       $0x38,%rsp
063caed4 mov       %rcx,0x30(%rsp)
063caed9 mov       %rcx,0x28(%rsp)
063caede mov       0x28(%rsp),%rcx
063caee3 xor       %eax,%eax
063caee5 mov       %eax,%edx
063caee7 call      0x0000`0000`063B`5320
063caeec mov       %al,0x27(%rsp)
063caef0 mov       0x27(%rsp),%al
063caef4 and       $1,%al
063caef6 movzbl    %al,%eax
063caef9 add       $0x38,%rsp
063caefd ret

core::slice::impl$0::iter<u16>:
063caf00 sub       $0x48,%rsp
063caf04 mov       %rcx,0x38(%rsp)
063caf09 mov       %rdx,0x40(%rsp)
063caf0e call      0x0000`0000`063C`AF50
063caf13 mov       %rax,0x28(%rsp)
063caf18 mov       %rdx,0x30(%rsp)
063caf1d mov       0x30(%rsp),%rdx
063caf22 mov       0x28(%rsp),%rax
063caf27 add       $0x48,%rsp
063caf2b ret

core::slice::impl$0::as_ptr<u16>:
063caf30 sub       $0x10,%rsp
063caf34 mov       %rcx,%rax
063caf37 mov       %rax,(%rsp)
063caf3b mov       %rdx,8(%rsp)
063caf40 add       $0x10,%rsp
063caf44 ret

core::slice::iter::Iter<u16>::new<u16>:
063caf50 sub       $0xC8,%rsp
063caf57 mov       %rdx,0x38(%rsp)
063caf5c mov       %rcx,0x60(%rsp)
063caf61 mov       %rdx,0x68(%rsp)
063caf66 call      0x0000`0000`063C`AF30
063caf6b mov       %rax,0x40(%rsp)
063caf70 mov       %rax,0x70(%rsp)
063caf75 mov       0x40(%rsp),%rcx
063caf7a call      0x0000`0000`063C`AED0
063caf7f jmp       0x0000`0000`063C`AF81
063caf81 mov       $2,%eax
063caf86 cmp       $0,%rax
063caf8a jne       0x0000`0000`063C`AFCD
063caf8c mov       0x38(%rsp),%rcx
063caf91 mov       0x40(%rsp),%rax
063caf96 mov       %rax,0x78(%rsp)
063caf9b mov       %rcx,0x80(%rsp)
063cafa3 mov       %rax,0x88(%rsp)
063cafab mov       %rcx,0x90(%rsp)
063cafb3 add       %rcx,%rax
063cafb6 mov       %rax,0x98(%rsp)
063cafbe mov       0x98(%rsp),%rax
063cafc6 mov       %rax,0x30(%rsp)
063cafcb jmp       0x0000`0000`063C`B024
063cafcd mov       0x40(%rsp),%rax
063cafd2 mov       0x38(%rsp),%rcx
063cafd7 mov       %rax,0xA0(%rsp)
063cafdf mov       %rcx,0xA8(%rsp)
063cafe7 mov       %rax,0xB0(%rsp)
063cafef mov       %rcx,0xB8(%rsp)
063caff7 shl       $1,%rcx
063caffb add       %rcx,%rax
063caffe mov       %rax,0xC0(%rsp)
063cb006 mov       0xC0(%rsp),%rax
063cb00e mov       %rax,0x58(%rsp)
063cb013 mov       0x40(%rsp),%rcx
063cb018 call      0x0000`0000`063C`AEA0
063cb01d mov       %rax,0x28(%rsp)
063cb022 jmp       0x0000`0000`063C`B030
063cb024 mov       0x30(%rsp),%rax
063cb029 mov       %rax,0x58(%rsp)
063cb02e jmp       0x0000`0000`063C`B013
063cb030 mov       0x28(%rsp),%rcx
063cb035 mov       0x58(%rsp),%rax
063cb03a mov       %rcx,0x48(%rsp)
063cb03f mov       %rax,0x50(%rsp)
063cb044 mov       0x48(%rsp),%rax
063cb049 mov       0x50(%rsp),%rdx
063cb04e add       $0xC8,%rsp
063cb055 ret

core::convert::impl$4::from<enum$<ucs2::Error> >:
063cb060 push      %rax
063cb061 mov       %cl,%al
063cb063 and       $1,%al
063cb065 mov       %al,7(%rsp)
063cb069 and       $1,%cl
063cb06c movzbl    %cl,%eax
063cb06f pop       %rcx
063cb070 ret

core::result::impl$27::branch<tuple$<>,enum$<ucs2::Error> >:
063cb080 sub       $0x10,%rsp
063cb084 mov       %cl,5(%rsp)
063cb088 mov       5(%rsp),%al
063cb08c add       $0xFE,%al
063cb08e setne     %al
063cb091 movzbl    %al,%eax
063cb094 je        0x0000`0000`063C`B09C
063cb096 jmp       0x0000`0000`063C`B098
063cb098 jmp       0x0000`0000`063C`B0A3
063cb09a ud2
063cb09c movb      $2,6(%rsp)
063cb0a1 jmp       0x0000`0000`063C`B0C0
063cb0a3 mov       5(%rsp),%al
063cb0a7 mov       %al,%cl
063cb0a9 and       $1,%cl
063cb0ac mov       %cl,0xF(%rsp)
063cb0b0 and       $1,%al
063cb0b2 mov       %al,7(%rsp)
063cb0b6 mov       7(%rsp),%al
063cb0ba and       $1,%al
063cb0bc mov       %al,6(%rsp)
063cb0c0 mov       6(%rsp),%al
063cb0c4 add       $0x10,%rsp
063cb0c8 ret

core::slice::iter::impl$173::next<u16>:
063cb0d0 sub       $0x98,%rsp
063cb0d7 mov       %rcx,0x40(%rsp)
063cb0dc mov       %rcx,0x58(%rsp)
063cb0e1 mov       (%rcx),%rcx
063cb0e4 call      0x0000`0000`063C`AEC0
063cb0e9 mov       %rax,0x48(%rsp)
063cb0ee mov       0x48(%rsp),%rcx
063cb0f3 call      0x0000`0000`063C`AE70
063cb0f8 jmp       0x0000`0000`063C`B0FA
063cb0fa mov       $2,%eax
063cb0ff cmp       $0,%rax
063cb103 jne       0x0000`0000`063C`B119
063cb105 mov       0x40(%rsp),%rax
063cb10a mov       (%rax),%rcx
063cb10d call      0x0000`0000`063C`AEC0
063cb112 mov       %rax,0x38(%rsp)
063cb117 jmp       0x0000`0000`063C`B129
063cb119 mov       0x40(%rsp),%rax
063cb11e mov       8(%rax),%rcx
063cb122 call      0x0000`0000`063C`AED0
063cb127 jmp       0x0000`0000`063C`B105
063cb129 mov       0x38(%rsp),%rax
063cb12e mov       0x40(%rsp),%rcx
063cb133 cmp       8(%rcx),%rax
063cb137 je        0x0000`0000`063C`B1C0
063cb13d mov       0x40(%rsp),%rax
063cb142 mov       %rax,0x68(%rsp)
063cb147 movq      $1,0x70(%rsp)
063cb150 mov       (%rax),%rcx
063cb153 call      0x0000`0000`063C`AEC0
063cb158 mov       %rax,%rcx
063cb15b mov       0x40(%rsp),%rax
063cb160 mov       %rcx,0x28(%rsp)
063cb165 mov       %rcx,0x78(%rsp)
063cb16a mov       (%rax),%rcx
063cb16d call      0x0000`0000`063C`AEC0
063cb172 mov       %rax,0x80(%rsp)
063cb17a movq      $1,0x88(%rsp)
063cb186 add       $2,%rax
063cb18a mov       %rax,0x90(%rsp)
063cb192 mov       0x90(%rsp),%rcx
063cb19a call      0x0000`0000`063C`AEA0
063cb19f mov       0x40(%rsp),%rcx
063cb1a4 mov       %rax,%rdx
063cb1a7 mov       0x28(%rsp),%rax
063cb1ac mov       %rdx,(%rcx)
063cb1af mov       %rax,0x60(%rsp)
063cb1b4 mov       0x60(%rsp),%rax
063cb1b9 mov       %rax,0x30(%rsp)
063cb1be jmp       0x0000`0000`063C`B1D6
063cb1c0 movq      $0,0x50(%rsp)
063cb1c9 mov       0x50(%rsp),%rax
063cb1ce add       $0x98,%rsp
063cb1d5 ret
063cb1d6 mov       0x30(%rsp),%rax
063cb1db mov       %rax,0x50(%rsp)
063cb1e0 jmp       0x0000`0000`063C`B1C9

