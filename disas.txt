log::impl$4::le:
063ab000 sub       $0x10,%rsp
063ab004 mov       %rcx,(%rsp)
063ab008 mov       %rdx,8(%rsp)
063ab00d mov       (%rcx),%rax
063ab010 mov       (%rdx),%rcx
063ab013 cmp       %rcx,%rax
063ab016 setbe     %al
063ab019 and       $1,%al
063ab01b movzbl    %al,%eax
063ab01e add       $0x10,%rsp
063ab022 ret

core::sync::atomic::AtomicUsize::load:
063ab030 sub       $0x58,%rsp
063ab034 mov       %dl,0x37(%rsp)
063ab038 mov       %rcx,0x40(%rsp)
063ab03d mov       %dl,0x4F(%rsp)
063ab041 mov       %rcx,0x38(%rsp)
063ab046 mov       %rcx,0x50(%rsp)
063ab04b mov       0x37(%rsp),%dl
063ab04f mov       0x38(%rsp),%rcx
063ab054 call      0x0000`0000`063B`11C0
063ab059 mov       %rax,0x28(%rsp)
063ab05e mov       0x28(%rsp),%rax
063ab063 add       $0x58,%rsp
063ab067 ret

core::fmt::ArgumentV1::new_display<u128>:
063ab070 sub       $0x38,%rsp
063ab074 mov       %rcx,0x30(%rsp)
063ab079 lea       0x63A`FE30,%rdx
063ab080 call      0x0000`0000`063A`B0A0
063ab085 mov       %rax,0x20(%rsp)
063ab08a mov       %rdx,0x28(%rsp)
063ab08f mov       0x28(%rsp),%rdx
063ab094 mov       0x20(%rsp),%rax
063ab099 add       $0x38,%rsp
063ab09d ret

core::fmt::ArgumentV1::new<u128>:
063ab0a0 sub       $0x48,%rsp
063ab0a4 mov       %rcx,8(%rsp)
063ab0a9 mov       %rcx,0x28(%rsp)
063ab0ae mov       %rdx,0x30(%rsp)
063ab0b3 mov       %rdx,0x38(%rsp)
063ab0b8 mov       0x38(%rsp),%rax
063ab0bd mov       %rax,0x10(%rsp)
063ab0c2 mov       8(%rsp),%rax
063ab0c7 mov       %rax,0x40(%rsp)
063ab0cc mov       0x40(%rsp),%rax
063ab0d1 mov       %rax,(%rsp)
063ab0d5 mov       0x10(%rsp),%rax
063ab0da mov       (%rsp),%rcx
063ab0de mov       %rcx,0x18(%rsp)
063ab0e3 mov       %rax,0x20(%rsp)
063ab0e8 mov       0x18(%rsp),%rax
063ab0ed mov       0x20(%rsp),%rdx
063ab0f2 add       $0x48,%rsp
063ab0f6 ret

core::fmt::ArgumentV1::new<ptr_const$<tuple$<> > >:
063ab100 sub       $0x48,%rsp
063ab104 mov       %rcx,8(%rsp)
063ab109 mov       %rcx,0x28(%rsp)
063ab10e mov       %rdx,0x30(%rsp)
063ab113 mov       %rdx,0x38(%rsp)
063ab118 mov       0x38(%rsp),%rax
063ab11d mov       %rax,0x10(%rsp)
063ab122 mov       8(%rsp),%rax
063ab127 mov       %rax,0x40(%rsp)
063ab12c mov       0x40(%rsp),%rax
063ab131 mov       %rax,(%rsp)
063ab135 mov       0x10(%rsp),%rax
063ab13a mov       (%rsp),%rcx
063ab13e mov       %rcx,0x18(%rsp)
063ab143 mov       %rax,0x20(%rsp)
063ab148 mov       0x18(%rsp),%rax
063ab14d mov       0x20(%rsp),%rdx
063ab152 add       $0x48,%rsp
063ab156 ret

core::fmt::ArgumentV1::new_debug<ptr_const$<tuple$<> > >:
063ab160 sub       $0x38,%rsp
063ab164 mov       %rcx,0x30(%rsp)
063ab169 lea       0x63B`6270,%rdx
063ab170 call      0x0000`0000`063A`B100
063ab175 mov       %rax,0x20(%rsp)
063ab17a mov       %rdx,0x28(%rsp)
063ab17f mov       0x28(%rsp),%rdx
063ab184 mov       0x20(%rsp),%rax
063ab189 add       $0x38,%rsp
063ab18d ret

uefi_div_bug::hide_u128:
063ab190 sub       $0x10,%rsp
063ab194 mov       %rcx,%rax
063ab197 mov       %rax,(%rsp)
063ab19b mov       %rdx,8(%rsp)
063ab1a0 add       $0x10,%rsp
063ab1a4 ret

uefi_div_bug::do_div:
063ab1b0 sub       $0x88,%rsp
063ab1b7 mov       %r9,0x20(%rsp)
063ab1bc mov       %r8,0x28(%rsp)
063ab1c1 mov       %rdx,0x30(%rsp)
063ab1c6 mov       %rcx,0x38(%rsp)
063ab1cb mov       %rcx,0x68(%rsp)
063ab1d0 mov       %rdx,0x70(%rsp)
063ab1d5 mov       %r9,0x80(%rsp)
063ab1dd mov       %r8,0x78(%rsp)
063ab1e2 or        %r9,%r8
063ab1e5 sete      %al
063ab1e8 test      $1,%al
063ab1ea jne       0x0000`0000`063A`B22B
063ab1ec mov       0x28(%rsp),%rax
063ab1f1 mov       0x20(%rsp),%rcx
063ab1f6 mov       0x30(%rsp),%rdx
063ab1fb mov       0x38(%rsp),%r8
063ab200 mov       %r8,0x50(%rsp)
063ab205 mov       %rdx,0x58(%rsp)
063ab20a mov       %rcx,0x48(%rsp)
063ab20f mov       %rax,0x40(%rsp)
063ab214 lea       0x50(%rsp),%rcx
063ab219 lea       0x40(%rsp),%rdx
063ab21e call      0x0000`0000`063B`6870
063ab223 add       $0x88,%rsp
063ab22a ret
063ab22b lea       0x63C`C030,%rcx
063ab232 lea       0x63C`C010,%r8
063ab239 mov       $0x19,%edx
063ab23e call      0x0000`0000`063B`2030
063ab243 ud2

uefi_div_bug::efi_main:
063ab250 sub       $0x458,%rsp
063ab257 mov       %rdx,0x138(%rsp)
063ab25f mov       %rcx,0x3F0(%rsp)
063ab267 lea       0x138(%rsp),%rcx
063ab26f call      0x0000`0000`063A`BE50
063ab274 mov       %rax,0x128(%rsp)
063ab27c mov       %rdx,0x130(%rsp)
063ab284 mov       0x130(%rsp),%rdx
063ab28c mov       0x128(%rsp),%rcx
063ab294 lea       0x63C`C050,%r8
063ab29b call      0x0000`0000`063A`C6C0
063ab2a0 movq      $3,0x140(%rsp)
063ab2ac lea       0x140(%rsp),%rcx
063ab2b4 lea       0x63C`C068,%rdx
063ab2bb call      0x0000`0000`063A`B000
063ab2c0 mov       %al,0x127(%rsp)
063ab2c7 mov       0x127(%rsp),%al
063ab2ce test      $1,%al
063ab2d0 jne       0x0000`0000`063A`B2DE
063ab2d2 jmp       0x0000`0000`063A`B2D4
063ab2d4 movb      $0,0x14F(%rsp)
063ab2dc jmp       0x0000`0000`063A`B33D
063ab2de movb      $0,0x44F(%rsp)
063ab2e6 mov       0x44F(%rsp),%dl
063ab2ed mov       0x63D`3010,%rcx
063ab2f4 call      0x0000`0000`063A`B030
063ab2f9 mov       %rax,0x450(%rsp)
063ab301 mov       0x450(%rsp),%rax
063ab309 mov       %rax,0x150(%rsp)
063ab311 lea       0x140(%rsp),%rcx
063ab319 lea       0x150(%rsp),%rdx
063ab321 call      0x0000`0000`063A`B000
063ab326 mov       %al,0x126(%rsp)
063ab32d mov       0x126(%rsp),%al
063ab334 and       $1,%al
063ab336 mov       %al,0x14F(%rsp)
063ab33d testb     $1,0x14F(%rsp)
063ab345 jne       0x0000`0000`063A`B36A
063ab347 xor       %eax,%eax
063ab349 mov       %eax,%edx
063ab34b mov       $2,%ecx
063ab350 call      0x0000`0000`063A`B190
063ab355 mov       %rdx,0x1A0(%rsp)
063ab35d mov       %rax,0x198(%rsp)
063ab365 jmp       0x0000`0000`063A`B417
063ab36a lea       0x63C`C090,%rcx
063ab371 call      0x0000`0000`063A`B160
063ab376 mov       %rax,0x110(%rsp)
063ab37e mov       %rdx,0x118(%rsp)
063ab386 mov       0x118(%rsp),%rax
063ab38e mov       0x110(%rsp),%rcx
063ab396 mov       %rcx,0x188(%rsp)
063ab39e mov       %rax,0x190(%rsp)
063ab3a6 lea       0x188(%rsp),%rax
063ab3ae mov       %rax,0x108(%rsp)
063ab3b6 mov       0x108(%rsp),%r9
063ab3be lea       0x158(%rsp),%rcx
063ab3c6 lea       0x63C`C080,%rdx
063ab3cd mov       $1,%r8d
063ab3d3 lea       0x63C`C098,%rax
063ab3da movq      $1,0x20(%rsp)
063ab3e3 mov       %rax,0x28(%rsp)
063ab3e8 movq      $1,0x30(%rsp)
063ab3f1 call      0x0000`0000`063A`BC90
063ab3f6 mov       0x140(%rsp),%rdx
063ab3fe lea       0x158(%rsp),%rcx
063ab406 lea       0x63C`C0E0,%r8
063ab40d call      0x0000`0000`063A`D380
063ab412 jmp       0x0000`0000`063A`B347
063ab417 xor       %eax,%eax
063ab419 mov       %eax,%edx
063ab41b mov       $1,%ecx
063ab420 call      0x0000`0000`063A`B190
063ab425 mov       %rdx,0x1B0(%rsp)
063ab42d mov       %rax,0x1A8(%rsp)
063ab435 movq      $3,0x1B8(%rsp)
063ab441 lea       0x1B8(%rsp),%rcx
063ab449 lea       0x63C`C068,%rdx
063ab450 call      0x0000`0000`063A`B000
063ab455 mov       %al,0x107(%rsp)
063ab45c mov       0x107(%rsp),%al
063ab463 test      $1,%al
063ab465 jne       0x0000`0000`063A`B473
063ab467 jmp       0x0000`0000`063A`B469
063ab469 movb      $0,0x1C7(%rsp)
063ab471 jmp       0x0000`0000`063A`B4D2
063ab473 movb      $0,0x43F(%rsp)
063ab47b mov       0x43F(%rsp),%dl
063ab482 mov       0x63D`3010,%rcx
063ab489 call      0x0000`0000`063A`B030
063ab48e mov       %rax,0x440(%rsp)
063ab496 mov       0x440(%rsp),%rax
063ab49e mov       %rax,0x1C8(%rsp)
063ab4a6 lea       0x1B8(%rsp),%rcx
063ab4ae lea       0x1C8(%rsp),%rdx
063ab4b6 call      0x0000`0000`063A`B000
063ab4bb mov       %al,0x106(%rsp)
063ab4c2 mov       0x106(%rsp),%al
063ab4c9 and       $1,%al
063ab4cb mov       %al,0x1C7(%rsp)
063ab4d2 testb     $1,0x1C7(%rsp)
063ab4da jne       0x0000`0000`063A`B508
063ab4dc movq      $3,0x220(%rsp)
063ab4e8 lea       0x220(%rsp),%rcx
063ab4f0 lea       0x63C`C068,%rdx
063ab4f7 call      0x0000`0000`063A`B000
063ab4fc mov       %al,0x105(%rsp)
063ab503 jmp       0x0000`0000`063A`B5CE
063ab508 lea       0x198(%rsp),%rcx
063ab510 call      0x0000`0000`063A`B070
063ab515 mov       %rax,0xF0(%rsp)
063ab51d mov       %rdx,0xF8(%rsp)
063ab525 lea       0x1A8(%rsp),%rcx
063ab52d call      0x0000`0000`063A`B070
063ab532 mov       %rax,0xE0(%rsp)
063ab53a mov       %rdx,0xE8(%rsp)
063ab542 mov       0xE8(%rsp),%rax
063ab54a mov       0xE0(%rsp),%rcx
063ab552 mov       0xF8(%rsp),%rdx
063ab55a mov       0xF0(%rsp),%r8
063ab562 mov       %r8,0x200(%rsp)
063ab56a mov       %rdx,0x208(%rsp)
063ab572 mov       %rcx,0x210(%rsp)
063ab57a mov       %rax,0x218(%rsp)
063ab582 lea       0x200(%rsp),%r9
063ab58a lea       0x1D0(%rsp),%rcx
063ab592 lea       0x63C`C120,%rdx
063ab599 mov       $2,%r8d
063ab59f movq      $2,0x20(%rsp)
063ab5a8 call      0x0000`0000`063A`BD00
063ab5ad mov       0x1B8(%rsp),%rdx
063ab5b5 lea       0x1D0(%rsp),%rcx
063ab5bd lea       0x63C`C140,%r8
063ab5c4 call      0x0000`0000`063A`D380
063ab5c9 jmp       0x0000`0000`063A`B4DC
063ab5ce mov       0x105(%rsp),%al
063ab5d5 test      $1,%al
063ab5d7 jne       0x0000`0000`063A`B5E5
063ab5d9 jmp       0x0000`0000`063A`B5DB
063ab5db movb      $0,0x22F(%rsp)
063ab5e3 jmp       0x0000`0000`063A`B644
063ab5e5 movb      $0,0x42F(%rsp)
063ab5ed mov       0x42F(%rsp),%dl
063ab5f4 mov       0x63D`3010,%rcx
063ab5fb call      0x0000`0000`063A`B030
063ab600 mov       %rax,0x430(%rsp)
063ab608 mov       0x430(%rsp),%rax
063ab610 mov       %rax,0x230(%rsp)
063ab618 lea       0x220(%rsp),%rcx
063ab620 lea       0x230(%rsp),%rdx
063ab628 call      0x0000`0000`063A`B000
063ab62d mov       %al,0xDF(%rsp)
063ab634 mov       0xDF(%rsp),%al
063ab63b and       $1,%al
063ab63d mov       %al,0x22F(%rsp)
063ab644 testb     $1,0x22F(%rsp)
063ab64c jne       0x0000`0000`063A`B67A
063ab64e movq      $3,0x288(%rsp)
063ab65a lea       0x288(%rsp),%rcx
063ab662 lea       0x63C`C068,%rdx
063ab669 call      0x0000`0000`063A`B000
063ab66e mov       %al,0xDE(%rsp)
063ab675 jmp       0x0000`0000`063A`B77C
063ab67a mov       0x198(%rsp),%rdx
063ab682 mov       0x1A0(%rsp),%rcx
063ab68a mov       0x1A8(%rsp),%r8
063ab692 mov       0x1B0(%rsp),%rax
063ab69a add       %r8,%rdx
063ab69d mov       %rdx,0xC8(%rsp)
063ab6a5 adc       %rax,%rcx
063ab6a8 setb      %al
063ab6ab mov       %rcx,0xD0(%rsp)
063ab6b3 test      $1,%al
063ab6b5 jne       0x0000`0000`063A`B6F6
063ab6b7 mov       0xD0(%rsp),%rax
063ab6bf mov       0xC8(%rsp),%rcx
063ab6c7 mov       %rcx,0x278(%rsp)
063ab6cf mov       %rax,0x280(%rsp)
063ab6d7 lea       0x278(%rsp),%rcx
063ab6df call      0x0000`0000`063A`B070
063ab6e4 mov       %rax,0xB8(%rsp)
063ab6ec mov       %rdx,0xC0(%rsp)
063ab6f4 jmp       0x0000`0000`063A`B710
063ab6f6 lea       0x63C`C1B0,%rcx
063ab6fd lea       0x63C`C190,%r8
063ab704 mov       $0x1C,%edx
063ab709 call      0x0000`0000`063B`2030
063ab70e ud2
063ab710 mov       0xC0(%rsp),%rax
063ab718 mov       0xB8(%rsp),%rcx
063ab720 mov       %rcx,0x268(%rsp)
063ab728 mov       %rax,0x270(%rsp)
063ab730 lea       0x268(%rsp),%r9
063ab738 lea       0x238(%rsp),%rcx
063ab740 lea       0x63C`C180,%rdx
063ab747 mov       $1,%r8d
063ab74d movq      $1,0x20(%rsp)
063ab756 call      0x0000`0000`063A`BD00
063ab75b mov       0x220(%rsp),%rdx
063ab763 lea       0x238(%rsp),%rcx
063ab76b lea       0x63C`C1D0,%r8
063ab772 call      0x0000`0000`063A`D380
063ab777 jmp       0x0000`0000`063A`B64E
063ab77c mov       0xDE(%rsp),%al
063ab783 test      $1,%al
063ab785 jne       0x0000`0000`063A`B793
063ab787 jmp       0x0000`0000`063A`B789
063ab789 movb      $0,0x297(%rsp)
063ab791 jmp       0x0000`0000`063A`B7F2
063ab793 movb      $0,0x41F(%rsp)
063ab79b mov       0x41F(%rsp),%dl
063ab7a2 mov       0x63D`3010,%rcx
063ab7a9 call      0x0000`0000`063A`B030
063ab7ae mov       %rax,0x420(%rsp)
063ab7b6 mov       0x420(%rsp),%rax
063ab7be mov       %rax,0x298(%rsp)
063ab7c6 lea       0x288(%rsp),%rcx
063ab7ce lea       0x298(%rsp),%rdx
063ab7d6 call      0x0000`0000`063A`B000
063ab7db mov       %al,0xB7(%rsp)
063ab7e2 mov       0xB7(%rsp),%al
063ab7e9 and       $1,%al
063ab7eb mov       %al,0x297(%rsp)
063ab7f2 testb     $1,0x297(%rsp)
063ab7fa jne       0x0000`0000`063A`B828
063ab7fc movq      $3,0x2F0(%rsp)
063ab808 lea       0x2F0(%rsp),%rcx
063ab810 lea       0x63C`C068,%rdx
063ab817 call      0x0000`0000`063A`B000
063ab81c mov       %al,0xB6(%rsp)
063ab823 jmp       0x0000`0000`063A`B92A
063ab828 mov       0x198(%rsp),%rdx
063ab830 mov       0x1A0(%rsp),%rcx
063ab838 mov       0x1A8(%rsp),%r8
063ab840 mov       0x1B0(%rsp),%rax
063ab848 sub       %r8,%rdx
063ab84b mov       %rdx,0xA0(%rsp)
063ab853 sbb       %rax,%rcx
063ab856 setb      %al
063ab859 mov       %rcx,0xA8(%rsp)
063ab861 test      $1,%al
063ab863 jne       0x0000`0000`063A`B8A4
063ab865 mov       0xA8(%rsp),%rax
063ab86d mov       0xA0(%rsp),%rcx
063ab875 mov       %rcx,0x2E0(%rsp)
063ab87d mov       %rax,0x2E8(%rsp)
063ab885 lea       0x2E0(%rsp),%rcx
063ab88d call      0x0000`0000`063A`B070
063ab892 mov       %rax,0x90(%rsp)
063ab89a mov       %rdx,0x98(%rsp)
063ab8a2 jmp       0x0000`0000`063A`B8BE
063ab8a4 lea       0x63C`C240,%rcx
063ab8ab lea       0x63C`C220,%r8
063ab8b2 mov       $0x21,%edx
063ab8b7 call      0x0000`0000`063B`2030
063ab8bc ud2
063ab8be mov       0x98(%rsp),%rax
063ab8c6 mov       0x90(%rsp),%rcx
063ab8ce mov       %rcx,0x2D0(%rsp)
063ab8d6 mov       %rax,0x2D8(%rsp)
063ab8de lea       0x2D0(%rsp),%r9
063ab8e6 lea       0x2A0(%rsp),%rcx
063ab8ee lea       0x63C`C210,%rdx
063ab8f5 mov       $1,%r8d
063ab8fb movq      $1,0x20(%rsp)
063ab904 call      0x0000`0000`063A`BD00
063ab909 mov       0x288(%rsp),%rdx
063ab911 lea       0x2A0(%rsp),%rcx
063ab919 lea       0x63C`C268,%r8
063ab920 call      0x0000`0000`063A`D380
063ab925 jmp       0x0000`0000`063A`B7FC
063ab92a mov       0xB6(%rsp),%al
063ab931 test      $1,%al
063ab933 jne       0x0000`0000`063A`B941
063ab935 jmp       0x0000`0000`063A`B937
063ab937 movb      $0,0x2FF(%rsp)
063ab93f jmp       0x0000`0000`063A`B9A0
063ab941 movb      $0,0x40F(%rsp)
063ab949 mov       0x40F(%rsp),%dl
063ab950 mov       0x63D`3010,%rcx
063ab957 call      0x0000`0000`063A`B030
063ab95c mov       %rax,0x410(%rsp)
063ab964 mov       0x410(%rsp),%rax
063ab96c mov       %rax,0x300(%rsp)
063ab974 lea       0x2F0(%rsp),%rcx
063ab97c lea       0x300(%rsp),%rdx
063ab984 call      0x0000`0000`063A`B000
063ab989 mov       %al,0x8F(%rsp)
063ab990 mov       0x8F(%rsp),%al
063ab997 and       $1,%al
063ab999 mov       %al,0x2FF(%rsp)
063ab9a0 testb     $1,0x2FF(%rsp)
063ab9a8 jne       0x0000`0000`063A`B9D6
063ab9aa movq      $3,0x358(%rsp)
063ab9b6 lea       0x358(%rsp),%rcx
063ab9be lea       0x63C`C068,%rdx
063ab9c5 call      0x0000`0000`063A`B000
063ab9ca mov       %al,0x8E(%rsp)
063ab9d1 jmp       0x0000`0000`063A`BB1C
063ab9d6 mov       0x198(%rsp),%rax
063ab9de mov       %rax,0x68(%rsp)
063ab9e3 mov       0x1A0(%rsp),%rax
063ab9eb mov       0x1A8(%rsp),%rcx
063ab9f3 mov       0x1B0(%rsp),%rdx
063ab9fb mov       %rdx,0x60(%rsp)
063aba00 test      %rdx,%rdx
063aba03 setne     %dl
063aba06 test      %rax,%rax
063aba09 setne     %r9b
063aba0d and       %dl,%r9b
063aba10 mul       %rcx
063aba13 mov       0x68(%rsp),%rdx
063aba18 mov       %rax,%r8
063aba1b mov       0x60(%rsp),%rax
063aba20 seto      %r10b
063aba24 or        %r10b,%r9b
063aba27 mul       %rdx
063aba2a mov       %rax,%rdx
063aba2d mov       0x68(%rsp),%rax
063aba32 seto      %r10b
063aba36 or        %r10b,%r9b
063aba39 mov       %r9b,0x77(%rsp)
063aba3e add       %rdx,%r8
063aba41 mul       %rcx
063aba44 mov       %rax,%rcx
063aba47 mov       0x77(%rsp),%al
063aba4b add       %r8,%rdx
063aba4e mov       %rdx,0x78(%rsp)
063aba53 setb      %r8b
063aba57 or        %r8b,%al
063aba5a mov       %rcx,0x80(%rsp)
063aba62 test      $1,%al
063aba64 jne       0x0000`0000`063A`BA9C
063aba66 mov       0x78(%rsp),%rax
063aba6b mov       0x80(%rsp),%rcx
063aba73 mov       %rcx,0x348(%rsp)
063aba7b mov       %rax,0x350(%rsp)
063aba83 lea       0x348(%rsp),%rcx
063aba8b call      0x0000`0000`063A`B070
063aba90 mov       %rax,0x50(%rsp)
063aba95 mov       %rdx,0x58(%rsp)
063aba9a jmp       0x0000`0000`063A`BAB6
063aba9c lea       0x63C`C2D0,%rcx
063abaa3 lea       0x63C`C2B8,%r8
063abaaa mov       $0x21,%edx
063abaaf call      0x0000`0000`063B`2030
063abab4 ud2
063abab6 mov       0x58(%rsp),%rax
063ababb mov       0x50(%rsp),%rcx
063abac0 mov       %rcx,0x338(%rsp)
063abac8 mov       %rax,0x340(%rsp)
063abad0 lea       0x338(%rsp),%r9
063abad8 lea       0x308(%rsp),%rcx
063abae0 lea       0x63C`C2A8,%rdx
063abae7 mov       $1,%r8d
063abaed movq      $1,0x20(%rsp)
063abaf6 call      0x0000`0000`063A`BD00
063abafb mov       0x2F0(%rsp),%rdx
063abb03 lea       0x308(%rsp),%rcx
063abb0b lea       0x63C`C2F8,%r8
063abb12 call      0x0000`0000`063A`D380
063abb17 jmp       0x0000`0000`063A`B9AA
063abb1c mov       0x8E(%rsp),%al
063abb23 test      $1,%al
063abb25 jne       0x0000`0000`063A`BB33
063abb27 jmp       0x0000`0000`063A`BB29
063abb29 movb      $0,0x367(%rsp)
063abb31 jmp       0x0000`0000`063A`BB8C
063abb33 movb      $0,0x3FF(%rsp)
063abb3b mov       0x3FF(%rsp),%dl
063abb42 mov       0x63D`3010,%rcx
063abb49 call      0x0000`0000`063A`B030
063abb4e mov       %rax,0x400(%rsp)
063abb56 mov       0x400(%rsp),%rax
063abb5e mov       %rax,0x368(%rsp)
063abb66 lea       0x358(%rsp),%rcx
063abb6e lea       0x368(%rsp),%rdx
063abb76 call      0x0000`0000`063A`B000
063abb7b mov       %al,0x4F(%rsp)
063abb7f mov       0x4F(%rsp),%al
063abb83 and       $1,%al
063abb85 mov       %al,0x367(%rsp)
063abb8c testb     $1,0x367(%rsp)
063abb94 jne       0x0000`0000`063A`BBC7
063abb96 lea       0x3C0(%rsp),%rcx
063abb9e lea       0x63C`C390,%rdx
063abba5 mov       $1,%r8d
063abbab lea       0x63C`C3A0,%r9
063abbb2 xor       %eax,%eax
063abbb4 movq      $0,0x20(%rsp)
063abbbd call      0x0000`0000`063A`BD00
063abbc2 jmp       0x0000`0000`063A`BC79
063abbc7 mov       0x198(%rsp),%rcx
063abbcf mov       0x1A0(%rsp),%rdx
063abbd7 mov       0x1A8(%rsp),%r8
063abbdf mov       0x1B0(%rsp),%r9
063abbe7 call      0x0000`0000`063A`B1B0
063abbec mov       %rdx,0x3B8(%rsp)
063abbf4 mov       %rax,0x3B0(%rsp)
063abbfc lea       0x3B0(%rsp),%rcx
063abc04 call      0x0000`0000`063A`B070
063abc09 mov       %rax,0x38(%rsp)
063abc0e mov       %rdx,0x40(%rsp)
063abc13 mov       0x40(%rsp),%rax
063abc18 mov       0x38(%rsp),%rcx
063abc1d mov       %rcx,0x3A0(%rsp)
063abc25 mov       %rax,0x3A8(%rsp)
063abc2d lea       0x3A0(%rsp),%r9
063abc35 lea       0x370(%rsp),%rcx
063abc3d lea       0x63C`C338,%rdx
063abc44 mov       $1,%r8d
063abc4a movq      $1,0x20(%rsp)
063abc53 call      0x0000`0000`063A`BD00
063abc58 mov       0x358(%rsp),%rdx
063abc60 lea       0x370(%rsp),%rcx
063abc68 lea       0x63C`C348,%r8
063abc6f call      0x0000`0000`063A`D380
063abc74 jmp       0x0000`0000`063A`BB96
063abc79 lea       0x63C`C3A0,%rdx
063abc80 lea       0x3C0(%rsp),%rcx
063abc88 call      0x0000`0000`063B`2140
063abc8d ud2

core::fmt::Arguments::new_v1_formatted:
063abc90 push      %rsi
063abc91 sub       $0x48,%rsp
063abc95 mov       %rdx,%r10
063abc98 mov       %rcx,%rax
063abc9b mov       0x88(%rsp),%r11
063abca3 mov       0x80(%rsp),%rsi
063abcab mov       0x78(%rsp),%rdx
063abcb0 mov       %r10,0x10(%rsp)
063abcb5 mov       %r8,0x18(%rsp)
063abcba mov       %r9,0x20(%rsp)
063abcbf mov       %rdx,0x28(%rsp)
063abcc4 mov       %rsi,0x30(%rsp)
063abcc9 mov       %r11,0x38(%rsp)
063abcce mov       %rsi,(%rsp)
063abcd2 mov       %r11,8(%rsp)
063abcd7 mov       %r10,(%rcx)
063abcda mov       %r8,8(%rcx)
063abcde mov       (%rsp),%r10
063abce2 mov       8(%rsp),%r8
063abce7 mov       %r10,0x10(%rcx)
063abceb mov       %r8,0x18(%rcx)
063abcef mov       %r9,0x20(%rcx)
063abcf3 mov       %rdx,0x28(%rcx)
063abcf7 add       $0x48,%rsp
063abcfb pop       %rsi
063abcfc ret

core::fmt::Arguments::new_v1:
063abd00 sub       $0xC8,%rsp
063abd07 mov       %r9,0x30(%rsp)
063abd0c mov       %r8,0x38(%rsp)
063abd11 mov       %rdx,0x40(%rsp)
063abd16 mov       %rcx,0x48(%rsp)
063abd1b mov       %rcx,0x50(%rsp)
063abd20 mov       0xF0(%rsp),%rax
063abd28 mov       %rax,0x58(%rsp)
063abd2d mov       %rdx,0xA8(%rsp)
063abd35 mov       %r8,0xB0(%rsp)
063abd3d mov       %r9,0xB8(%rsp)
063abd45 mov       %rax,0xC0(%rsp)
063abd4d cmp       %rax,%r8
063abd50 jb        0x0000`0000`063A`BD69
063abd52 mov       0x58(%rsp),%rax
063abd57 add       $1,%rax
063abd5b mov       %rax,0x28(%rsp)
063abd60 setb      %al
063abd63 test      $1,%al
063abd65 jne       0x0000`0000`063A`BD93
063abd67 jmp       0x0000`0000`063A`BD7B
063abd69 movb      $1,0x67(%rsp)
063abd6e testb     $1,0x67(%rsp)
063abd73 jne       0x0000`0000`063A`BE06
063abd79 jmp       0x0000`0000`063A`BDAD
063abd7b mov       0x38(%rsp),%rax
063abd80 mov       0x28(%rsp),%rcx
063abd85 cmp       %rcx,%rax
063abd88 seta      %al
063abd8b and       $1,%al
063abd8d mov       %al,0x67(%rsp)
063abd91 jmp       0x0000`0000`063A`BD6E
063abd93 lea       0x63C`C450,%rcx
063abd9a lea       0x63C`C430,%r8
063abda1 mov       $0x1C,%edx
063abda6 call      0x0000`0000`063B`2030
063abdab ud2
063abdad mov       0x50(%rsp),%rax
063abdb2 mov       0x48(%rsp),%rcx
063abdb7 mov       0x58(%rsp),%rdx
063abdbc mov       0x30(%rsp),%r8
063abdc1 mov       0x38(%rsp),%r9
063abdc6 mov       0x40(%rsp),%r10
063abdcb movq      $0,0x98(%rsp)
063abdd7 mov       %r10,(%rcx)
063abdda mov       %r9,8(%rcx)
063abdde mov       0x98(%rsp),%r10
063abde6 mov       0xA0(%rsp),%r9
063abdee mov       %r10,0x10(%rcx)
063abdf2 mov       %r9,0x18(%rcx)
063abdf6 mov       %r8,0x20(%rcx)
063abdfa mov       %rdx,0x28(%rcx)
063abdfe add       $0xC8,%rsp
063abe05 ret
063abe06 lea       0x68(%rsp),%rcx
063abe0b lea       0x63C`C478,%rdx
063abe12 mov       $1,%r8d
063abe18 lea       0x63C`C488,%r9
063abe1f xor       %eax,%eax
063abe21 movq      $0,0x20(%rsp)
063abe2a call      0x0000`0000`063A`BD00
063abe2f lea       0x63C`C488,%rdx
063abe36 lea       0x68(%rsp),%rcx
063abe3b call      0x0000`0000`063B`2140
063abe40 ud2

uefi_services::init:
063abe50 sub       $0x98,%rsp
063abe57 mov       %rcx,0x40(%rsp)
063abe5c mov       %rcx,0x88(%rsp)
063abe64 lea       0x63D`3018,%rcx
063abe6b call      0x0000`0000`063B`69C0
063abe70 mov       %al,0x4F(%rsp)
063abe74 mov       0x4F(%rsp),%al
063abe78 test      $1,%al
063abe7a jne       0x0000`0000`063A`BE8F
063abe7c jmp       0x0000`0000`063A`BE7E
063abe7e mov       0x40(%rsp),%rcx
063abe83 call      0x0000`0000`063B`6C50
063abe88 mov       %rax,0x38(%rsp)
063abe8d jmp       0x0000`0000`063A`BEB4
063abe8f xor       %eax,%eax
063abe91 mov       %eax,%ecx
063abe93 call      0x0000`0000`063B`7630
063abe98 mov       %rdx,0x58(%rsp)
063abe9d mov       %rax,0x50(%rsp)
063abea2 mov       0x50(%rsp),%rax
063abea7 mov       0x58(%rsp),%rdx
063abeac add       $0x98,%rsp
063abeb3 ret
063abeb4 mov       0x40(%rsp),%rcx
063abeb9 mov       0x38(%rsp),%rax
063abebe mov       %rax,0x60(%rsp)
063abec3 mov       0x60(%rsp),%rax
063abec8 mov       %rax,0x63D`3018
063abecf call      0x0000`0000`063A`BF70
063abed4 mov       0x40(%rsp),%rcx
063abed9 call      0x0000`0000`063B`6C40
063abede mov       %rax,0x30(%rsp)
063abee3 mov       %rax,0x90(%rsp)
063abeeb mov       0x30(%rsp),%rcx
063abef0 call      0x0000`0000`063B`8C30
063abef5 mov       0x30(%rsp),%rdx
063abefa lea       0x63A`C030,%rax
063abf01 mov       %rax,0x78(%rsp)
063abf06 movq      $0,0x80(%rsp)
063abf12 mov       0x78(%rsp),%r10
063abf17 mov       0x80(%rsp),%rax
063abf1f lea       0x68(%rsp),%rcx
063abf24 mov       $0x201,%r8d
063abf2a mov       $0x10,%r9d
063abf30 mov       %r10,0x20(%rsp)
063abf35 mov       %rax,0x28(%rsp)
063abf3a call      0x0000`0000`063B`8CB0
063abf3f lea       0x68(%rsp),%rcx
063abf44 call      0x0000`0000`063B`8E60
063abf49 mov       %rdx,0x58(%rsp)
063abf4e mov       %rax,0x50(%rsp)
063abf53 jmp       0x0000`0000`063A`BEA2

uefi_services::init::closure$0:
063abf60 sub       $0x10,%rsp
063abf64 mov       %rcx,8(%rsp)
063abf69 add       $0x10,%rsp
063abf6d ret

uefi_services::init_logger:
063abf70 sub       $0x78,%rsp
063abf74 mov       %rcx,0x60(%rsp)
063abf79 call      0x0000`0000`063B`6C00
063abf7e mov       %rax,0x40(%rsp)
063abf83 mov       %rax,0x68(%rsp)
063abf88 mov       0x40(%rsp),%rcx
063abf8d call      0x0000`0000`063B`6C70
063abf92 mov       %rax,0x38(%rsp)
063abf97 mov       0x38(%rsp),%rax
063abf9c mov       %rax,0x50(%rsp)
063abfa1 movq      $1,0x48(%rsp)
063abfaa mov       0x48(%rsp),%rcx
063abfaf mov       0x50(%rsp),%rax
063abfb4 mov       %rcx,0x63D`3020
063abfbb mov       %rax,0x63D`3028
063abfc2 lea       0x63D`3020,%rcx
063abfc9 call      0x0000`0000`063B`6920
063abfce mov       %rax,0x30(%rsp)
063abfd3 mov       0x30(%rsp),%rcx
063abfd8 lea       0x63C`C508,%rdx
063abfdf call      0x0000`0000`063B`6970
063abfe4 mov       %rax,0x28(%rsp)
063abfe9 mov       %rax,0x70(%rsp)
063abfee mov       0x28(%rsp),%rcx
063abff3 lea       0x63C`C538,%rdx
063abffa call      0x0000`0000`063A`D150
063abfff mov       %al,0x27(%rsp)
063ac003 mov       0x27(%rsp),%cl
063ac007 and       $1,%cl
063ac00a lea       0x63C`C570,%rdx
063ac011 call      0x0000`0000`063B`8EF0
063ac016 movq      $3,0x58(%rsp)
063ac01f mov       0x58(%rsp),%rcx
063ac024 call      0x0000`0000`063B`8F40
063ac029 add       $0x78,%rsp
063ac02d ret

uefi_services::exit_boot_services:
063ac030 sub       $0x48,%rsp
063ac034 mov       %rcx,0x30(%rsp)
063ac039 mov       %rdx,0x38(%rsp)
063ac03e movq      $0,0x28(%rsp)
063ac047 mov       0x28(%rsp),%rax
063ac04c mov       %rax,0x63D`3018
063ac053 cmpq      $1,0x63D`3020
063ac05b jne       0x0000`0000`063A`C07D
063ac05d lea       0x63D`3020,%rax
063ac064 add       $8,%rax
063ac068 mov       %rax,0x40(%rsp)
063ac06d lea       0x63D`3020,%rcx
063ac074 add       $8,%rcx
063ac078 call      0x0000`0000`063B`6CA0
063ac07d call      0x0000`0000`063B`8C60
063ac082 add       $0x48,%rsp
063ac086 ret

uefi_services::panic_handler:
063ac090 sub       $0x2B8,%rsp
063ac097 mov       %rcx,0xB0(%rsp)
063ac09f mov       %rcx,0x260(%rsp)
063ac0a7 call      0x0000`0000`063B`91B0
063ac0ac mov       %rax,0xB8(%rsp)
063ac0b4 mov       $1,%eax
063ac0b9 xor       %ecx,%ecx
063ac0bb cmpq      $0,0xB8(%rsp)
063ac0c4 cmove     %rcx,%rax
063ac0c8 cmp       $1,%rax
063ac0cc jne       0x0000`0000`063A`C10F
063ac0ce mov       0xB8(%rsp),%rax
063ac0d6 mov       %rax,0xA0(%rsp)
063ac0de mov       %rax,0x268(%rsp)
063ac0e6 movq      $1,0xC0(%rsp)
063ac0f2 lea       0xC0(%rsp),%rcx
063ac0fa lea       0x63C`C588,%rdx
063ac101 call      0x0000`0000`063B`8F70
063ac106 mov       %al,0xAF(%rsp)
063ac10d jmp       0x0000`0000`063A`C128
063ac10f lea       0x63D`3018,%rcx
063ac116 call      0x0000`0000`063B`68D0
063ac11b mov       %rax,0x1B8(%rsp)
063ac123 jmp       0x0000`0000`063A`C442
063ac128 mov       0xAF(%rsp),%al
063ac12f test      $1,%al
063ac131 jne       0x0000`0000`063A`C13F
063ac133 jmp       0x0000`0000`063A`C135
063ac135 movb      $0,0xCF(%rsp)
063ac13d jmp       0x0000`0000`063A`C19E
063ac13f movb      $0,0x2AF(%rsp)
063ac147 mov       0x2AF(%rsp),%dl
063ac14e mov       0x63D`3010,%rcx
063ac155 call      0x0000`0000`063B`9260
063ac15a mov       %rax,0x2B0(%rsp)
063ac162 mov       0x2B0(%rsp),%rax
063ac16a mov       %rax,0xD0(%rsp)
063ac172 lea       0xC0(%rsp),%rcx
063ac17a lea       0xD0(%rsp),%rdx
063ac182 call      0x0000`0000`063B`8F70
063ac187 mov       %al,0x9F(%rsp)
063ac18e mov       0x9F(%rsp),%al
063ac195 and       $1,%al
063ac197 mov       %al,0xCF(%rsp)
063ac19e testb     $1,0xCF(%rsp)
063ac1a6 jne       0x0000`0000`063A`C1C2
063ac1a8 mov       0xB0(%rsp),%rcx
063ac1b0 call      0x0000`0000`063B`91A0
063ac1b5 mov       %rax,0x150(%rsp)
063ac1bd jmp       0x0000`0000`063A`C2F8
063ac1c2 mov       0xA0(%rsp),%rcx
063ac1ca call      0x0000`0000`063B`A0D0
063ac1cf mov       %rdx,0x140(%rsp)
063ac1d7 mov       %rax,0x138(%rsp)
063ac1df lea       0x138(%rsp),%rcx
063ac1e7 call      0x0000`0000`063B`6600
063ac1ec mov       %rax,0x88(%rsp)
063ac1f4 mov       %rdx,0x90(%rsp)
063ac1fc mov       0xA0(%rsp),%rcx
063ac204 call      0x0000`0000`063B`A0E0
063ac209 mov       %eax,0x148(%rsp)
063ac210 lea       0x148(%rsp),%rcx
063ac218 call      0x0000`0000`063B`65A0
063ac21d mov       %rax,0x78(%rsp)
063ac222 mov       %rdx,0x80(%rsp)
063ac22a mov       0xA0(%rsp),%rcx
063ac232 call      0x0000`0000`063B`A0F0
063ac237 mov       %eax,0x14C(%rsp)
063ac23e lea       0x14C(%rsp),%rcx
063ac246 call      0x0000`0000`063B`65A0
063ac24b mov       %rax,0x68(%rsp)
063ac250 mov       %rdx,0x70(%rsp)
063ac255 mov       0x70(%rsp),%rax
063ac25a mov       0x68(%rsp),%rcx
063ac25f mov       0x80(%rsp),%rdx
063ac267 mov       0x78(%rsp),%r8
063ac26c mov       0x90(%rsp),%r9
063ac274 mov       0x88(%rsp),%r10
063ac27c mov       %r10,0x108(%rsp)
063ac284 mov       %r9,0x110(%rsp)
063ac28c mov       %r8,0x118(%rsp)
063ac294 mov       %rdx,0x120(%rsp)
063ac29c mov       %rcx,0x128(%rsp)
063ac2a4 mov       %rax,0x130(%rsp)
063ac2ac lea       0x108(%rsp),%r9
063ac2b4 lea       0xD8(%rsp),%rcx
063ac2bc lea       0x63C`C5A8,%rdx
063ac2c3 mov       $4,%r8d
063ac2c9 movq      $3,0x20(%rsp)
063ac2d2 call      0x0000`0000`063B`BA00
063ac2d7 mov       0xC0(%rsp),%rdx
063ac2df lea       0xD8(%rsp),%rcx
063ac2e7 lea       0x63C`C5F8,%r8
063ac2ee call      0x0000`0000`063A`D380
063ac2f3 jmp       0x0000`0000`063A`C1A8
063ac2f8 mov       $1,%eax
063ac2fd xor       %ecx,%ecx
063ac2ff cmpq      $0,0x150(%rsp)
063ac308 cmove     %rcx,%rax
063ac30c cmp       $1,%rax
063ac310 jne       0x0000`0000`063A`C10F
063ac316 mov       0x150(%rsp),%rax
063ac31e mov       %rax,0x158(%rsp)
063ac326 movq      $1,0x160(%rsp)
063ac332 lea       0x160(%rsp),%rcx
063ac33a lea       0x63C`C588,%rdx
063ac341 call      0x0000`0000`063B`8F70
063ac346 mov       %al,0x67(%rsp)
063ac34a mov       0x67(%rsp),%al
063ac34e test      $1,%al
063ac350 jne       0x0000`0000`063A`C35E
063ac352 jmp       0x0000`0000`063A`C354
063ac354 movb      $0,0x16F(%rsp)
063ac35c jmp       0x0000`0000`063A`C3B7
063ac35e movb      $0,0x29F(%rsp)
063ac366 mov       0x29F(%rsp),%dl
063ac36d mov       0x63D`3010,%rcx
063ac374 call      0x0000`0000`063B`9260
063ac379 mov       %rax,0x2A0(%rsp)
063ac381 mov       0x2A0(%rsp),%rax
063ac389 mov       %rax,0x170(%rsp)
063ac391 lea       0x160(%rsp),%rcx
063ac399 lea       0x170(%rsp),%rdx
063ac3a1 call      0x0000`0000`063B`8F70
063ac3a6 mov       %al,0x66(%rsp)
063ac3aa mov       0x66(%rsp),%al
063ac3ae and       $1,%al
063ac3b0 mov       %al,0x16F(%rsp)
063ac3b7 testb     $1,0x16F(%rsp)
063ac3bf je        0x0000`0000`063A`C10F
063ac3c5 lea       0x158(%rsp),%rcx
063ac3cd call      0x0000`0000`063B`6570
063ac3d2 mov       %rax,0x50(%rsp)
063ac3d7 mov       %rdx,0x58(%rsp)
063ac3dc mov       0x58(%rsp),%rax
063ac3e1 mov       0x50(%rsp),%rcx
063ac3e6 mov       %rcx,0x1A8(%rsp)
063ac3ee mov       %rax,0x1B0(%rsp)
063ac3f6 lea       0x1A8(%rsp),%r9
063ac3fe lea       0x178(%rsp),%rcx
063ac406 lea       0x63C`C630,%rdx
063ac40d mov       $1,%r8d
063ac413 movq      $1,0x20(%rsp)
063ac41c call      0x0000`0000`063B`BA00
063ac421 mov       0x160(%rsp),%rdx
063ac429 lea       0x178(%rsp),%rcx
063ac431 lea       0x63C`C640,%r8
063ac438 call      0x0000`0000`063A`D380
063ac43d jmp       0x0000`0000`063A`C10F
063ac442 mov       $1,%eax
063ac447 xor       %ecx,%ecx
063ac449 cmpq      $0,0x1B8(%rsp)
063ac452 cmove     %rcx,%rax
063ac456 cmp       $1,%rax
063ac45a jne       0x0000`0000`063A`C47B
063ac45c mov       0x1B8(%rsp),%rcx
063ac464 mov       %rcx,0x278(%rsp)
063ac46c call      0x0000`0000`063B`6C40
063ac471 mov       %rax,0x48(%rsp)
063ac476 jmp       0x0000`0000`063A`C53D
063ac47b movq      $0,0x1C0(%rsp)
063ac487 movq      $0,0x1C8(%rsp)
063ac493 movq      $0x11E1`A300,0x1D0(%rsp)
063ac49f mov       0x1C8(%rsp),%rcx
063ac4a7 mov       0x1D0(%rsp),%rdx
063ac4af call      0x0000`0000`063B`BB80
063ac4b4 mov       %rax,0x38(%rsp)
063ac4b9 mov       %rdx,0x40(%rsp)
063ac4be mov       0x40(%rsp),%rax
063ac4c3 mov       0x38(%rsp),%rcx
063ac4c8 mov       %rcx,0x1D8(%rsp)
063ac4d0 mov       %rax,0x1E0(%rsp)
063ac4d8 lea       0x1D8(%rsp),%rcx
063ac4e0 call      0x0000`0000`063B`BB50
063ac4e5 mov       %rdx,0x1F0(%rsp)
063ac4ed mov       %rax,0x1E8(%rsp)
063ac4f5 mov       0x1E8(%rsp),%rax
063ac4fd test      %rax,%rax
063ac500 je        0x0000`0000`063A`C508
063ac502 jmp       0x0000`0000`063A`C504
063ac504 jmp       0x0000`0000`063A`C51E
063ac506 ud2
063ac508 lea       0x63D`3018,%rcx
063ac50f call      0x0000`0000`063B`68D0
063ac514 mov       %rax,0x1F8(%rsp)
063ac51c jmp       0x0000`0000`063A`C54E
063ac51e mov       0x1F0(%rsp),%rdx
063ac526 mov       %rdx,0x270(%rsp)
063ac52e lea       0x1C0(%rsp),%rcx
063ac536 call      0x0000`0000`063B`BC40
063ac53b jmp       0x0000`0000`063A`C4D8
063ac53d mov       0x48(%rsp),%rcx
063ac542 mov       $0x98`9680,%edx
063ac547 call      0x0000`0000`063B`8DA0
063ac54c jmp       0x0000`0000`063A`C508
063ac54e mov       $1,%eax
063ac553 xor       %ecx,%ecx
063ac555 cmpq      $0,0x1F8(%rsp)
063ac55e cmove     %rcx,%rax
063ac562 cmp       $1,%rax
063ac566 jne       0x0000`0000`063A`C587
063ac568 mov       0x1F8(%rsp),%rcx
063ac570 mov       %rcx,0x280(%rsp)
063ac578 call      0x0000`0000`063B`6C30
063ac57d mov       %rax,0x30(%rsp)
063ac582 jmp       0x0000`0000`063A`C66F
063ac587 movq      $1,0x218(%rsp)
063ac593 lea       0x218(%rsp),%rcx
063ac59b lea       0x63C`C588,%rdx
063ac5a2 call      0x0000`0000`063B`8F70
063ac5a7 mov       %al,0x2F(%rsp)
063ac5ab mov       0x2F(%rsp),%al
063ac5af test      $1,%al
063ac5b1 jne       0x0000`0000`063A`C5BF
063ac5b3 jmp       0x0000`0000`063A`C5B5
063ac5b5 movb      $0,0x227(%rsp)
063ac5bd jmp       0x0000`0000`063A`C618
063ac5bf movb      $0,0x28F(%rsp)
063ac5c7 mov       0x28F(%rsp),%dl
063ac5ce mov       0x63D`3010,%rcx
063ac5d5 call      0x0000`0000`063B`9260
063ac5da mov       %rax,0x290(%rsp)
063ac5e2 mov       0x290(%rsp),%rax
063ac5ea mov       %rax,0x228(%rsp)
063ac5f2 lea       0x218(%rsp),%rcx
063ac5fa lea       0x228(%rsp),%rdx
063ac602 call      0x0000`0000`063B`8F70
063ac607 mov       %al,0x2E(%rsp)
063ac60b mov       0x2E(%rsp),%al
063ac60f and       $1,%al
063ac611 mov       %al,0x227(%rsp)
063ac618 testb     $1,0x227(%rsp)
063ac620 jne       0x0000`0000`063A`C625
063ac622 hlt
063ac623 jmp       0x0000`0000`063A`C622
063ac625 lea       0x230(%rsp),%rcx
063ac62d lea       0x63C`C6B8,%rdx
063ac634 mov       $1,%r8d
063ac63a lea       0x63C`C630,%r9
063ac641 xor       %eax,%eax
063ac643 movq      $0,0x20(%rsp)
063ac64c call      0x0000`0000`063B`BA00
063ac651 mov       0x218(%rsp),%rdx
063ac659 lea       0x230(%rsp),%rcx
063ac661 lea       0x63C`C6C8,%r8
063ac668 call      0x0000`0000`063A`D380
063ac66d jmp       0x0000`0000`063A`C622
063ac66f mov       0x30(%rsp),%rcx
063ac674 movl      $2,0x204(%rsp)
063ac67f movq      $0,0x208(%rsp)
063ac68b mov       0x204(%rsp),%edx
063ac692 mov       0x208(%rsp),%r9
063ac69a mov       0x210(%rsp),%r8
063ac6a2 mov       %rsp,%rax
063ac6a5 mov       %r8,0x20(%rax)
063ac6a9 movabs    $0x8000`0000`0000`0015,%r8
063ac6b3 call      0x0000`0000`063B`BCE0
063ac6b8 ud2

enum$<core::result::Result<tuple$<>,uefi::result::error::Error<tuple$<> > > >::unwrap<tuple$<>,uefi::result::error::Error<tuple$<> > >:
063ac6c0 sub       $0x58,%rsp
063ac6c4 mov       %r8,0x30(%rsp)
063ac6c9 mov       %rcx,0x38(%rsp)
063ac6ce mov       %rdx,0x40(%rsp)
063ac6d3 mov       0x38(%rsp),%rax
063ac6d8 test      %rax,%rax
063ac6db je        0x0000`0000`063A`C6E3
063ac6dd jmp       0x0000`0000`063A`C6DF
063ac6df jmp       0x0000`0000`063A`C6E8
063ac6e1 ud2
063ac6e3 add       $0x58,%rsp
063ac6e7 ret
063ac6e8 mov       0x30(%rsp),%rcx
063ac6ed mov       0x40(%rsp),%rax
063ac6f2 mov       %rax,0x48(%rsp)
063ac6f7 mov       %rsp,%rax
063ac6fa mov       %rcx,0x20(%rax)
063ac6fe lea       0x63C`C720,%rcx
063ac705 lea       0x63C`C700,%r9
063ac70c mov       $0x2B,%edx
063ac711 lea       0x48(%rsp),%r8
063ac716 call      0x0000`0000`063B`CD40
063ac71b ud2

core::result::Result::unwrap<tuple$<>,core::fmt::Error>:
063ac720 sub       $0x48,%rsp
063ac724 mov       %rdx,0x28(%rsp)
063ac729 and       $1,%cl
063ac72c mov       %cl,0x37(%rsp)
063ac730 movzbl    0x37(%rsp),%eax
063ac735 test      $1,%al
063ac737 je        0x0000`0000`063A`C73F
063ac739 jmp       0x0000`0000`063A`C73B
063ac73b jmp       0x0000`0000`063A`C744
063ac73d ud2
063ac73f add       $0x48,%rsp
063ac743 ret
063ac744 mov       0x28(%rsp),%rcx
063ac749 mov       %rsp,%rax
063ac74c mov       %rcx,0x20(%rax)
063ac750 lea       0x63C`C720,%rcx
063ac757 lea       0x63C`C750,%r9
063ac75e mov       $0x2B,%edx
063ac763 lea       0x38(%rsp),%r8
063ac768 call      0x0000`0000`063B`CD40
063ac76d ud2

enum$<core::result::Result<tuple$<>,enum$<ucs2::Error> >, 0, 1, Err>::map_err<tuple$<>,enum$<ucs2::Error>,core::fmt::Error,uefi::proto::console::text::output::impl$1::write_str::closure_env$3>:
063ac770 sub       $0x38,%rsp
063ac774 mov       %cl,0x24(%rsp)
063ac778 movb      $0,0x27(%rsp)
063ac77d movb      $1,0x27(%rsp)
063ac782 mov       0x24(%rsp),%al
063ac786 add       $0xFE,%al
063ac788 setne     %al
063ac78b movzbl    %al,%eax
063ac78e je        0x0000`0000`063A`C796
063ac790 jmp       0x0000`0000`063A`C792
063ac792 jmp       0x0000`0000`063A`C79D
063ac794 ud2
063ac796 movb      $0,0x25(%rsp)
063ac79b jmp       0x0000`0000`063A`C7C6
063ac79d mov       0x24(%rsp),%al
063ac7a1 mov       %al,%cl
063ac7a3 and       $1,%cl
063ac7a6 mov       %cl,0x37(%rsp)
063ac7aa movb      $0,0x27(%rsp)
063ac7af and       $1,%al
063ac7b1 mov       %al,0x26(%rsp)
063ac7b5 mov       0x26(%rsp),%cl
063ac7b9 and       $1,%cl
063ac7bc call      0x0000`0000`063B`C880
063ac7c1 movb      $1,0x25(%rsp)
063ac7c6 testb     $1,0x27(%rsp)
063ac7cb jne       0x0000`0000`063A`C7DB
063ac7cd mov       0x25(%rsp),%al
063ac7d1 and       $1,%al
063ac7d3 movzbl    %al,%eax
063ac7d6 add       $0x38,%rsp
063ac7da ret
063ac7db jmp       0x0000`0000`063A`C7CD

enum$<core::result::Result<ref$<uefi::data_types::strs::CStr16>,enum$<uefi::data_types::strs::FromSliceWithNulError> > >::map_err<ref$<uefi::data_types::strs::CStr16>,enum$<uefi::data_types::strs::FromSliceWithNulError>,core::fmt::Error,uefi::proto::console::text::output::impl$1::write_str::closure$0::closure_env$0>:
063ac7e0 sub       $0x78,%rsp
063ac7e4 mov       %rcx,0x20(%rsp)
063ac7e9 movb      $0,0x4F(%rsp)
063ac7ee movb      $1,0x4F(%rsp)
063ac7f3 mov       (%rcx),%rax
063ac7f6 test      %rax,%rax
063ac7f9 je        0x0000`0000`063A`C801
063ac7fb jmp       0x0000`0000`063A`C7FD
063ac7fd jmp       0x0000`0000`063A`C824
063ac7ff ud2
063ac801 mov       0x20(%rsp),%rax
063ac806 mov       8(%rax),%rcx
063ac80a mov       0x10(%rax),%rax
063ac80e mov       %rcx,0x68(%rsp)
063ac813 mov       %rax,0x70(%rsp)
063ac818 mov       %rcx,0x28(%rsp)
063ac81d mov       %rax,0x30(%rsp)
063ac822 jmp       0x0000`0000`063A`C862
063ac824 mov       0x20(%rsp),%rax
063ac829 mov       8(%rax),%rcx
063ac82d mov       0x10(%rax),%rax
063ac831 mov       %rcx,0x58(%rsp)
063ac836 mov       %rax,0x60(%rsp)
063ac83b movb      $0,0x4F(%rsp)
063ac840 mov       %rcx,0x38(%rsp)
063ac845 mov       %rax,0x40(%rsp)
063ac84a mov       0x38(%rsp),%rcx
063ac84f mov       0x40(%rsp),%rdx
063ac854 call      0x0000`0000`063B`C620
063ac859 movq      $0,0x28(%rsp)
063ac862 testb     $1,0x4F(%rsp)
063ac867 jne       0x0000`0000`063A`C878
063ac869 mov       0x28(%rsp),%rax
063ac86e mov       0x30(%rsp),%rdx
063ac873 add       $0x78,%rsp
063ac877 ret
063ac878 jmp       0x0000`0000`063A`C869

core::result::Result::map_err<tuple$<>,core::fmt::Error,enum$<ucs2::Error>,uefi::proto::console::text::output::impl$1::write_str::closure$1::closure_env$0>:
063ac880 sub       $0x48,%rsp
063ac884 and       $1,%cl
063ac887 mov       %cl,0x26(%rsp)
063ac88b movb      $0,0x2F(%rsp)
063ac890 movb      $1,0x2F(%rsp)
063ac895 movzbl    0x26(%rsp),%eax
063ac89a test      $1,%al
063ac89c je        0x0000`0000`063A`C8A4
063ac89e jmp       0x0000`0000`063A`C8A0
063ac8a0 jmp       0x0000`0000`063A`C8AB
063ac8a2 ud2
063ac8a4 movb      $2,0x27(%rsp)
063ac8a9 jmp       0x0000`0000`063A`C8C3
063ac8ab movb      $0,0x2F(%rsp)
063ac8b0 call      0x0000`0000`063B`C7A0
063ac8b5 mov       %al,0x25(%rsp)
063ac8b9 mov       0x25(%rsp),%al
063ac8bd and       $1,%al
063ac8bf mov       %al,0x27(%rsp)
063ac8c3 testb     $1,0x2F(%rsp)
063ac8c8 jne       0x0000`0000`063A`C8D3
063ac8ca mov       0x27(%rsp),%al
063ac8ce add       $0x48,%rsp
063ac8d2 ret
063ac8d3 jmp       0x0000`0000`063A`C8CA

enum$<core::result::Result<tuple$<>,uefi::result::error::Error<tuple$<> > > >::map_err<tuple$<>,uefi::result::error::Error<tuple$<> >,core::fmt::Error,uefi::proto::console::text::output::impl$1::write_str::closure$0::closure_env$1>:
063ac8e0 sub       $0x68,%rsp
063ac8e4 mov       %rcx,0x28(%rsp)
063ac8e9 mov       %rdx,0x30(%rsp)
063ac8ee movb      $0,0x4F(%rsp)
063ac8f3 movb      $1,0x4F(%rsp)
063ac8f8 mov       0x28(%rsp),%rax
063ac8fd test      %rax,%rax
063ac900 je        0x0000`0000`063A`C908
063ac902 jmp       0x0000`0000`063A`C904
063ac904 jmp       0x0000`0000`063A`C90F
063ac906 ud2
063ac908 movb      $0,0x3F(%rsp)
063ac90d jmp       0x0000`0000`063A`C932
063ac90f mov       0x30(%rsp),%rax
063ac914 mov       %rax,0x60(%rsp)
063ac919 movb      $0,0x4F(%rsp)
063ac91e mov       %rax,0x40(%rsp)
063ac923 mov       0x40(%rsp),%rcx
063ac928 call      0x0000`0000`063B`C640
063ac92d movb      $1,0x3F(%rsp)
063ac932 testb     $1,0x4F(%rsp)
063ac937 jne       0x0000`0000`063A`C947
063ac939 mov       0x3F(%rsp),%al
063ac93d and       $1,%al
063ac93f movzbl    %al,%eax
063ac942 add       $0x68,%rsp
063ac946 ret
063ac947 jmp       0x0000`0000`063A`C939

core::result::impl$27::branch<ref$<uefi::data_types::strs::CStr16>,core::fmt::Error>:
063ac950 sub       $0x40,%rsp
063ac954 mov       %rcx,(%rsp)
063ac958 mov       %rdx,8(%rsp)
063ac95d mov       (%rsp),%rax
063ac961 test      %rax,%rax
063ac964 sete      %al
063ac967 movzbl    %al,%eax
063ac96a jne       0x0000`0000`063A`C972
063ac96c jmp       0x0000`0000`063A`C96E
063ac96e jmp       0x0000`0000`063A`C991
063ac970 ud2
063ac972 mov       (%rsp),%rcx
063ac976 mov       8(%rsp),%rax
063ac97b mov       %rcx,0x30(%rsp)
063ac980 mov       %rax,0x38(%rsp)
063ac985 mov       %rcx,0x10(%rsp)
063ac98a mov       %rax,0x18(%rsp)
063ac98f jmp       0x0000`0000`063A`C99A
063ac991 movq      $0,0x10(%rsp)
063ac99a mov       0x10(%rsp),%rax
063ac99f mov       0x18(%rsp),%rdx
063ac9a4 add       $0x40,%rsp
063ac9a8 ret

uefi::data_types::strs::CStr16::from_u16_with_nul:
063ac9b0 sub       $0x128,%rsp
063ac9b7 mov       %r8,0x48(%rsp)
063ac9bc mov       %rdx,%rax
063ac9bf mov       0x48(%rsp),%rdx
063ac9c4 mov       %rax,0x50(%rsp)
063ac9c9 mov       %rcx,%rax
063ac9cc mov       0x50(%rsp),%rcx
063ac9d1 mov       %rax,0x58(%rsp)
063ac9d6 mov       %rax,0x60(%rsp)
063ac9db mov       %rcx,0x108(%rsp)
063ac9e3 mov       %rdx,0x110(%rsp)
063ac9eb call      0x0000`0000`063C`14F0
063ac9f0 mov       %rax,0x68(%rsp)
063ac9f5 mov       %rdx,0x70(%rsp)
063ac9fa mov       0x70(%rsp),%r8
063ac9ff mov       0x68(%rsp),%rdx
063aca04 lea       0x90(%rsp),%rcx
063aca0c call      0x0000`0000`063B`E2E0
063aca11 lea       0x78(%rsp),%rcx
063aca16 lea       0x90(%rsp),%rdx
063aca1e call      0x0000`0000`063B`C0B0
063aca23 mov       0x78(%rsp),%rax
063aca28 mov       %rax,0xA8(%rsp)
063aca30 mov       0x80(%rsp),%rax
063aca38 mov       %rax,0xB0(%rsp)
063aca40 mov       0x88(%rsp),%rax
063aca48 mov       %rax,0xB8(%rsp)
063aca50 lea       0xA8(%rsp),%rcx
063aca58 call      0x0000`0000`063B`BE70
063aca5d mov       %rdx,0xC8(%rsp)
063aca65 mov       %rax,0xC0(%rsp)
063aca6d mov       0xC8(%rsp),%rax
063aca75 test      %rax,%rax
063aca78 setne     %al
063aca7b movzbl    %al,%eax
063aca7e je        0x0000`0000`063A`CA86
063aca80 jmp       0x0000`0000`063A`CA82
063aca82 jmp       0x0000`0000`063A`CABB
063aca84 ud2
063aca86 mov       0x58(%rsp),%rax
063aca8b movq      $2,0xF8(%rsp)
063aca97 mov       0xF8(%rsp),%rdx
063aca9f mov       0x100(%rsp),%rcx
063acaa7 mov       %rdx,8(%rax)
063acaab mov       %rcx,0x10(%rax)
063acaaf movq      $1,(%rax)
063acab6 jmp       0x0000`0000`063A`CB58
063acabb mov       0xC8(%rsp),%rax
063acac3 mov       (%rax),%cx
063acac6 mov       %cx,0x11E(%rsp)
063acace mov       0xC0(%rsp),%rax
063acad6 mov       %rax,0x40(%rsp)
063acadb mov       %rax,0x120(%rsp)
063acae3 call      0x0000`0000`063C`2130
063acae8 mov       %dx,0xD2(%rsp)
063acaf0 mov       %ax,0xD0(%rsp)
063acaf8 movzwl    0xD0(%rsp),%eax
063acb00 test      %rax,%rax
063acb03 je        0x0000`0000`063A`CB0B
063acb05 jmp       0x0000`0000`063A`CB07
063acb07 jmp       0x0000`0000`063A`CB1B
063acb09 ud2
063acb0b cmpw      $0,0xD2(%rsp)
063acb14 je        0x0000`0000`063A`CB65
063acb16 jmp       0x0000`0000`063A`CA50
063acb1b mov       0x58(%rsp),%rax
063acb20 mov       0x40(%rsp),%rcx
063acb25 mov       %rcx,0xF0(%rsp)
063acb2d movq      $0,0xE8(%rsp)
063acb39 mov       0xE8(%rsp),%rdx
063acb41 mov       0xF0(%rsp),%rcx
063acb49 mov       %rdx,8(%rax)
063acb4d mov       %rcx,0x10(%rax)
063acb51 movq      $1,(%rax)
063acb58 mov       0x60(%rsp),%rax
063acb5d add       $0x128,%rsp
063acb64 ret
063acb65 mov       0x48(%rsp),%rax
063acb6a sub       $1,%rax
063acb6e mov       %rax,0x38(%rsp)
063acb73 setb      %al
063acb76 test      $1,%al
063acb78 jne       0x0000`0000`063A`CB8B
063acb7a mov       0x40(%rsp),%rax
063acb7f mov       0x38(%rsp),%rcx
063acb84 cmp       %rcx,%rax
063acb87 jne       0x0000`0000`063A`CBC0
063acb89 jmp       0x0000`0000`063A`CBA5
063acb8b lea       0x63C`C7E0,%rcx
063acb92 lea       0x63C`C808,%r8
063acb99 mov       $0x21,%edx
063acb9e call      0x0000`0000`063B`2030
063acba3 ud2
063acba5 mov       0x48(%rsp),%rdx
063acbaa mov       0x50(%rsp),%rcx
063acbaf call      0x0000`0000`063A`CC30
063acbb4 mov       %rax,0x28(%rsp)
063acbb9 mov       %rdx,0x30(%rsp)
063acbbe jmp       0x0000`0000`063A`CC02
063acbc0 mov       0x58(%rsp),%rax
063acbc5 mov       0x40(%rsp),%rcx
063acbca mov       %rcx,0xE0(%rsp)
063acbd2 movq      $1,0xD8(%rsp)
063acbde mov       0xD8(%rsp),%rdx
063acbe6 mov       0xE0(%rsp),%rcx
063acbee mov       %rdx,8(%rax)
063acbf2 mov       %rcx,0x10(%rax)
063acbf6 movq      $1,(%rax)
063acbfd jmp       0x0000`0000`063A`CB58
063acc02 mov       0x58(%rsp),%rax
063acc07 mov       0x30(%rsp),%rcx
063acc0c mov       0x28(%rsp),%rdx
063acc11 mov       %rdx,8(%rax)
063acc15 mov       %rcx,0x10(%rax)
063acc19 movq      $0,(%rax)
063acc20 jmp       0x0000`0000`063A`CB58

uefi::data_types::strs::CStr16::from_u16_with_nul_unchecked:
063acc30 sub       $0x10,%rsp
063acc34 mov       %rcx,%rax
063acc37 mov       %rax,(%rsp)
063acc3b mov       %rdx,8(%rsp)
063acc40 add       $0x10,%rsp
063acc44 ret

uefi::data_types::strs::CStr16::as_ptr:
063acc50 sub       $0x38,%rsp
063acc54 mov       %rcx,0x28(%rsp)
063acc59 mov       %rdx,0x30(%rsp)
063acc5e call      0x0000`0000`063B`F6B0
063acc63 mov       %rax,0x20(%rsp)
063acc68 mov       0x20(%rsp),%rax
063acc6d add       $0x38,%rsp
063acc71 ret

uefi::result::status::impl$1::from:
063acc80 sub       $0x38,%rsp
063acc84 mov       %rcx,0x30(%rsp)
063acc89 call      0x0000`0000`063B`7740
063acc8e mov       %rax,0x20(%rsp)
063acc93 mov       %rdx,0x28(%rsp)
063acc98 mov       0x28(%rsp),%rdx
063acc9d mov       0x20(%rsp),%rax
063acca2 add       $0x38,%rsp
063acca6 ret

log::impl$0::clone:
063accb0 push      %rax
063accb1 mov       %rcx,(%rsp)
063accb5 mov       (%rcx),%rax
063accb8 pop       %rcx
063accb9 ret

log::impl$7::fmt:
063accc0 sub       $0x58,%rsp
063accc4 mov       %rdx,0x30(%rsp)
063accc9 mov       %rcx,0x48(%rsp)
063accce mov       %rdx,0x50(%rsp)
063accd3 call      0x0000`0000`063A`CD10
063accd8 mov       %rax,0x38(%rsp)
063accdd mov       %rdx,0x40(%rsp)
063acce2 mov       0x40(%rsp),%r8
063acce7 mov       0x38(%rsp),%rdx
063accec mov       0x30(%rsp),%rcx
063accf1 call      0x0000`0000`063B`56C0
063accf6 mov       %al,0x2F(%rsp)
063accfa mov       0x2F(%rsp),%al
063accfe and       $1,%al
063acd00 movzbl    %al,%eax
063acd03 add       $0x58,%rsp
063acd07 ret

log::Level::as_str:
063acd10 sub       $0x38,%rsp
063acd14 mov       %rcx,0x30(%rsp)
063acd19 mov       (%rcx),%rax
063acd1c mov       %rax,0x28(%rsp)
063acd21 cmp       $6,%rax
063acd25 setb      %al
063acd28 test      $1,%al
063acd2a jne       0x0000`0000`063A`CD2E
063acd2c jmp       0x0000`0000`063A`CD4C
063acd2e mov       0x28(%rsp),%rcx
063acd33 shl       $4,%rcx
063acd37 lea       0x63C`C890,%rdx
063acd3e mov       (%rcx,%rdx),%rax
063acd42 mov       8(%rcx,%rdx),%rdx
063acd47 add       $0x38,%rsp
063acd4b ret
063acd4c mov       0x28(%rsp),%rcx
063acd51 lea       0x63C`C948,%r8
063acd58 mov       $6,%edx
063acd5d call      0x0000`0000`063B`2090
063acd62 ud2

log::Record::builder:
063acd70 sub       $0x28,%rsp
063acd74 mov       %rcx,%rax
063acd77 mov       %rax,0x20(%rsp)
063acd7c call      0x0000`0000`063A`CD90
063acd81 mov       0x20(%rsp),%rax
063acd86 add       $0x28,%rsp
063acd8a ret

log::RecordBuilder::new:
063acd90 sub       $0x158,%rsp
063acd97 mov       %rcx,0x30(%rsp)
063acd9c mov       %rcx,0x38(%rsp)
063acda1 lea       0xC0(%rsp),%rcx
063acda9 lea       0x63C`C820,%r9
063acdb0 mov       %r9,%rdx
063acdb3 xor       %eax,%eax
063acdb5 mov       %eax,%r8d
063acdb8 movq      $0,0x20(%rsp)
063acdc1 call      0x0000`0000`063C`4020
063acdc6 lea       0x108(%rsp),%rcx
063acdce call      0x0000`0000`063A`D070
063acdd3 lea       0xF0(%rsp),%rcx
063acddb lea       0x108(%rsp),%rdx
063acde3 call      0x0000`0000`063A`D0E0
063acde8 movq      $2,0x120(%rsp)
063acdf4 movq      $2,0x138(%rsp)
063ace00 movl      $0,0x150(%rsp)
063ace0b mov       0xF0(%rsp),%rax
063ace13 mov       %rax,0x40(%rsp)
063ace18 mov       0xF8(%rsp),%rax
063ace20 mov       %rax,0x48(%rsp)
063ace25 mov       0x100(%rsp),%rax
063ace2d mov       %rax,0x50(%rsp)
063ace32 lea       0x40(%rsp),%rcx
063ace37 add       $0x18,%rcx
063ace3b lea       0xC0(%rsp),%rdx
063ace43 mov       $0x30,%r8d
063ace49 call      0x0000`0000`063B`BDE0
063ace4e mov       0x30(%rsp),%rcx
063ace53 mov       0x120(%rsp),%rax
063ace5b mov       %rax,0x88(%rsp)
063ace63 mov       0x128(%rsp),%rax
063ace6b mov       %rax,0x90(%rsp)
063ace73 mov       0x130(%rsp),%rax
063ace7b mov       %rax,0x98(%rsp)
063ace83 mov       0x138(%rsp),%rax
063ace8b mov       %rax,0xA0(%rsp)
063ace93 mov       0x140(%rsp),%rax
063ace9b mov       %rax,0xA8(%rsp)
063acea3 mov       0x148(%rsp),%rax
063aceab mov       %rax,0xB0(%rsp)
063aceb3 mov       0x150(%rsp),%edx
063aceba mov       0x154(%rsp),%eax
063acec1 mov       %edx,0xB8(%rsp)
063acec8 mov       %eax,0xBC(%rsp)
063acecf lea       0x40(%rsp),%rdx
063aced4 mov       $0x80,%r8d
063aceda call      0x0000`0000`063B`BDE0
063acedf mov       0x38(%rsp),%rax
063acee4 add       $0x158,%rsp
063aceeb ret

log::RecordBuilder::args:
063acef0 sub       $0x68,%rsp
063acef4 mov       %rcx,0x28(%rsp)
063acef9 mov       %rcx,0x60(%rsp)
063acefe lea       0x30(%rsp),%rcx
063acf03 mov       $0x30,%r8d
063acf09 call      0x0000`0000`063B`BDE0
063acf0e mov       0x28(%rsp),%rcx
063acf13 add       $0x18,%rcx
063acf17 lea       0x30(%rsp),%rdx
063acf1c mov       $0x30,%r8d
063acf22 call      0x0000`0000`063B`BDE0
063acf27 mov       0x28(%rsp),%rax
063acf2c add       $0x68,%rsp
063acf30 ret

log::RecordBuilder::level:
063acf40 sub       $0x10,%rsp
063acf44 mov       %rcx,%rax
063acf47 mov       %rax,(%rsp)
063acf4b mov       %rdx,8(%rsp)
063acf50 mov       %rdx,(%rax)
063acf53 add       $0x10,%rsp
063acf57 ret

log::RecordBuilder::target:
063acf60 sub       $0x18,%rsp
063acf64 mov       %rcx,%rax
063acf67 mov       %rax,(%rsp)
063acf6b mov       %rdx,8(%rsp)
063acf70 mov       %r8,0x10(%rsp)
063acf75 mov       %rdx,8(%rax)
063acf79 mov       %r8,0x10(%rax)
063acf7d add       $0x18,%rsp
063acf81 ret

log::RecordBuilder::module_path_static:
063acf90 sub       $0x58,%rsp
063acf94 mov       %rcx,0x20(%rsp)
063acf99 mov       %rcx,0x40(%rsp)
063acf9e mov       %rdx,0x48(%rsp)
063acfa3 mov       %r8,0x50(%rsp)
063acfa8 lea       0x28(%rsp),%rcx
063acfad call      0x0000`0000`063C`3E60
063acfb2 mov       0x20(%rsp),%rax
063acfb7 mov       0x28(%rsp),%rcx
063acfbc mov       %rcx,0x48(%rax)
063acfc0 mov       0x30(%rsp),%rcx
063acfc5 mov       %rcx,0x50(%rax)
063acfc9 mov       0x38(%rsp),%rcx
063acfce mov       %rcx,0x58(%rax)
063acfd2 add       $0x58,%rsp
063acfd6 ret

log::RecordBuilder::file_static:
063acfe0 sub       $0x58,%rsp
063acfe4 mov       %rcx,0x20(%rsp)
063acfe9 mov       %rcx,0x40(%rsp)
063acfee mov       %rdx,0x48(%rsp)
063acff3 mov       %r8,0x50(%rsp)
063acff8 lea       0x28(%rsp),%rcx
063acffd call      0x0000`0000`063C`3E60
063ad002 mov       0x20(%rsp),%rax
063ad007 mov       0x28(%rsp),%rcx
063ad00c mov       %rcx,0x60(%rax)
063ad010 mov       0x30(%rsp),%rcx
063ad015 mov       %rcx,0x68(%rax)
063ad019 mov       0x38(%rsp),%rcx
063ad01e mov       %rcx,0x70(%rax)
063ad022 add       $0x58,%rsp
063ad026 ret

log::RecordBuilder::line:
063ad030 sub       $0x10,%rsp
063ad034 mov       %rcx,%rax
063ad037 mov       %rax,(%rsp)
063ad03b mov       %edx,8(%rsp)
063ad03f mov       %r8d,0xC(%rsp)
063ad044 mov       %edx,0x78(%rax)
063ad047 mov       %r8d,0x7C(%rax)
063ad04b add       $0x10,%rsp
063ad04f ret

log::RecordBuilder::build:
063ad050 sub       $0x38,%rsp
063ad054 mov       %rcx,%rax
063ad057 mov       %rax,0x28(%rsp)
063ad05c mov       %rdx,0x30(%rsp)
063ad061 call      0x0000`0000`063A`D5F0
063ad066 mov       0x28(%rsp),%rax
063ad06b add       $0x38,%rsp
063ad06f ret

log::Metadata::builder:
063ad070 sub       $0x28,%rsp
063ad074 mov       %rcx,%rax
063ad077 mov       %rax,0x20(%rsp)
063ad07c call      0x0000`0000`063A`D090
063ad081 mov       0x20(%rsp),%rax
063ad086 add       $0x28,%rsp
063ad08a ret

log::MetadataBuilder::new:
063ad090 sub       $0x18,%rsp
063ad094 mov       %rcx,%rax
063ad097 movq      $3,(%rsp)
063ad09f lea       0x63C`C820,%rdx
063ad0a6 mov       %rdx,8(%rsp)
063ad0ab movq      $0,0x10(%rsp)
063ad0b4 mov       (%rsp),%rdx
063ad0b8 mov       %rdx,(%rcx)
063ad0bb mov       8(%rsp),%rdx
063ad0c0 mov       %rdx,8(%rcx)
063ad0c4 mov       0x10(%rsp),%rdx
063ad0c9 mov       %rdx,0x10(%rcx)
063ad0cd add       $0x18,%rsp
063ad0d1 ret

log::MetadataBuilder::build:
063ad0e0 sub       $0x38,%rsp
063ad0e4 mov       %rcx,%rax
063ad0e7 mov       %rax,0x28(%rsp)
063ad0ec mov       %rdx,0x30(%rsp)
063ad0f1 call      0x0000`0000`063A`D750
063ad0f6 mov       0x28(%rsp),%rax
063ad0fb add       $0x38,%rsp
063ad0ff ret

log::impl$23::enabled:
063ad100 sub       $0x10,%rsp
063ad104 mov       %rcx,(%rsp)
063ad108 mov       %rdx,8(%rsp)
063ad10d xor       %eax,%eax
063ad10f and       $1,%al
063ad111 movzbl    %al,%eax
063ad114 add       $0x10,%rsp
063ad118 ret

log::impl$23::log:
063ad120 sub       $0x10,%rsp
063ad124 mov       %rcx,(%rsp)
063ad128 mov       %rdx,8(%rsp)
063ad12d add       $0x10,%rsp
063ad131 ret

log::impl$23::flush:
063ad140 push      %rax
063ad141 mov       %rcx,(%rsp)
063ad145 pop       %rax
063ad146 ret

log::set_logger:
063ad150 sub       $0x48,%rsp
063ad154 mov       %rcx,0x30(%rsp)
063ad159 mov       %rdx,0x38(%rsp)
063ad15e lea       0x30(%rsp),%rax
063ad163 mov       %rax,0x40(%rsp)
063ad168 mov       0x40(%rsp),%rcx
063ad16d call      0x0000`0000`063A`D1A0
063ad172 mov       %al,0x2F(%rsp)
063ad176 mov       0x2F(%rsp),%al
063ad17a and       $1,%al
063ad17c movzbl    %al,%eax
063ad17f add       $0x48,%rsp
063ad183 ret

log::set_logger::closure$0:
063ad190 push      %rax
063ad191 mov       %rcx,(%rsp)
063ad195 mov       (%rcx),%rax
063ad198 mov       8(%rcx),%rdx
063ad19c pop       %rcx
063ad19d ret

log::set_logger_inner<log::set_logger::closure_env$0>:
063ad1a0 sub       $0x98,%rsp
063ad1a7 mov       %rcx,0x50(%rsp)
063ad1ac mov       %rcx,0x88(%rsp)
063ad1b4 movb      $0,0x87(%rsp)
063ad1bc movb      $1,0x87(%rsp)
063ad1c4 movb      $4,0x76(%rsp)
063ad1c9 movb      $4,0x77(%rsp)
063ad1ce mov       0x76(%rsp),%r9b
063ad1d3 mov       0x77(%rsp),%cl
063ad1d7 mov       %rsp,%rax
063ad1da mov       %cl,0x20(%rax)
063ad1dd lea       0x63D`3030,%rcx
063ad1e4 xor       %eax,%eax
063ad1e6 mov       %eax,%edx
063ad1e8 mov       $1,%r8d
063ad1ee call      0x0000`0000`063C`41A0
063ad1f3 mov       %rdx,0x68(%rsp)
063ad1f8 mov       %rax,0x60(%rsp)
063ad1fd mov       0x60(%rsp),%rax
063ad202 test      %rax,%rax
063ad205 je        0x0000`0000`063A`D20D
063ad207 jmp       0x0000`0000`063A`D209
063ad209 jmp       0x0000`0000`063A`D219
063ad20b ud2
063ad20d mov       0x68(%rsp),%rax
063ad212 mov       %rax,0x78(%rsp)
063ad217 jmp       0x0000`0000`063A`D223
063ad219 mov       0x68(%rsp),%rax
063ad21e mov       %rax,0x78(%rsp)
063ad223 mov       0x78(%rsp),%rax
063ad228 mov       %rax,0x48(%rsp)
063ad22d mov       %rax,0x90(%rsp)
063ad235 test      %rax,%rax
063ad238 je        0x0000`0000`063A`D250
063ad23a jmp       0x0000`0000`063A`D23C
063ad23c mov       0x48(%rsp),%rax
063ad241 sub       $1,%rax
063ad245 je        0x0000`0000`063A`D26E
063ad247 jmp       0x0000`0000`063A`D249
063ad249 movb      $1,0x5F(%rsp)
063ad24e jmp       0x0000`0000`063A`D290
063ad250 mov       0x50(%rsp),%rcx
063ad255 movb      $0,0x87(%rsp)
063ad25d call      0x0000`0000`063A`D190
063ad262 mov       %rax,0x38(%rsp)
063ad267 mov       %rdx,0x40(%rsp)
063ad26c jmp       0x0000`0000`063A`D2B5
063ad26e movb      $4,0x86(%rsp)
063ad276 mov       0x86(%rsp),%dl
063ad27d lea       0x63D`3030,%rcx
063ad284 call      0x0000`0000`063C`4220
063ad289 mov       %rax,0x30(%rsp)
063ad28e jmp       0x0000`0000`063A`D29C
063ad290 testb     $1,0x87(%rsp)
063ad298 jne       0x0000`0000`063A`D306
063ad29a jmp       0x0000`0000`063A`D2F5
063ad29c mov       0x30(%rsp),%rax
063ad2a1 cmp       $1,%rax
063ad2a5 je        0x0000`0000`063A`D2AE
063ad2a7 movb      $1,0x5F(%rsp)
063ad2ac jmp       0x0000`0000`063A`D290
063ad2ae call      0x0000`0000`063C`43B0
063ad2b3 jmp       0x0000`0000`063A`D26E
063ad2b5 mov       0x40(%rsp),%rax
063ad2ba mov       0x38(%rsp),%rcx
063ad2bf mov       %rcx,0x63D`3000
063ad2c6 mov       %rax,0x63D`3008
063ad2cd movb      $4,0x85(%rsp)
063ad2d5 mov       0x85(%rsp),%r8b
063ad2dd lea       0x63D`3030,%rcx
063ad2e4 mov       $2,%edx
063ad2e9 call      0x0000`0000`063C`4260
063ad2ee movb      $0,0x5F(%rsp)
063ad2f3 jmp       0x0000`0000`063A`D290
063ad2f5 mov       0x5F(%rsp),%al
063ad2f9 and       $1,%al
063ad2fb movzbl    %al,%eax
063ad2fe add       $0x98,%rsp
063ad305 ret
063ad306 jmp       0x0000`0000`063A`D2F5

log::logger:
063ad310 sub       $0x48,%rsp
063ad314 movb      $4,0x47(%rsp)
063ad319 mov       0x47(%rsp),%dl
063ad31d lea       0x63D`3030,%rcx
063ad324 call      0x0000`0000`063C`4220
063ad329 mov       %rax,0x28(%rsp)
063ad32e mov       0x28(%rsp),%rax
063ad333 cmp       $2,%rax
063ad337 jne       0x0000`0000`063A`D353
063ad339 mov       0x63D`3000,%rcx
063ad340 mov       0x63D`3008,%rax
063ad347 mov       %rcx,0x30(%rsp)
063ad34c mov       %rax,0x38(%rsp)
063ad351 jmp       0x0000`0000`063A`D36B
063ad353 lea       0x63C`C960,%rax
063ad35a mov       %rax,0x30(%rsp)
063ad35f lea       0x63C`C838,%rax
063ad366 mov       %rax,0x38(%rsp)
063ad36b mov       0x30(%rsp),%rax
063ad370 mov       0x38(%rsp),%rdx
063ad375 add       $0x48,%rsp
063ad379 ret

log::__private_api_log:
063ad380 sub       $0x258,%rsp
063ad387 mov       %r8,0x58(%rsp)
063ad38c mov       %rdx,0x60(%rsp)
063ad391 mov       %rcx,0x68(%rsp)
063ad396 mov       %rdx,0x210(%rsp)
063ad39e mov       %r8,0x218(%rsp)
063ad3a6 mov       (%r8),%rcx
063ad3a9 mov       %rcx,0x70(%rsp)
063ad3ae mov       8(%r8),%rax
063ad3b2 mov       %rax,0x78(%rsp)
063ad3b7 mov       %rcx,0x220(%rsp)
063ad3bf mov       %rax,0x228(%rsp)
063ad3c7 mov       0x10(%r8),%rcx
063ad3cb mov       %rcx,0x80(%rsp)
063ad3d3 mov       0x18(%r8),%rax
063ad3d7 mov       %rax,0x88(%rsp)
063ad3df mov       %rcx,0x230(%rsp)
063ad3e7 mov       %rax,0x238(%rsp)
063ad3ef mov       0x20(%r8),%rcx
063ad3f3 mov       %rcx,0x90(%rsp)
063ad3fb mov       0x28(%r8),%rax
063ad3ff mov       %rax,0x98(%rsp)
063ad407 mov       %rcx,0x240(%rsp)
063ad40f mov       %rax,0x248(%rsp)
063ad417 mov       0x30(%r8),%eax
063ad41b mov       %eax,0xA4(%rsp)
063ad422 mov       %eax,0x254(%rsp)
063ad429 call      0x0000`0000`063A`D310
063ad42e mov       %rax,0xA8(%rsp)
063ad436 mov       %rdx,0xB0(%rsp)
063ad43e lea       0x138(%rsp),%rcx
063ad446 call      0x0000`0000`063A`CD70
063ad44b mov       0x68(%rsp),%rdx
063ad450 lea       0x1B8(%rsp),%rcx
063ad458 mov       $0x30,%r8d
063ad45e call      0x0000`0000`063B`BDE0
063ad463 lea       0x138(%rsp),%rcx
063ad46b lea       0x1B8(%rsp),%rdx
063ad473 call      0x0000`0000`063A`CEF0
063ad478 mov       %rax,0x50(%rsp)
063ad47d mov       0x60(%rsp),%rdx
063ad482 mov       0x50(%rsp),%rcx
063ad487 call      0x0000`0000`063A`CF40
063ad48c mov       %rax,0x48(%rsp)
063ad491 mov       0x78(%rsp),%r8
063ad496 mov       0x70(%rsp),%rdx
063ad49b mov       0x48(%rsp),%rcx
063ad4a0 call      0x0000`0000`063A`CF60
063ad4a5 mov       %rax,0x40(%rsp)
063ad4aa mov       0x40(%rsp),%rcx
063ad4af mov       0x88(%rsp),%rax
063ad4b7 mov       0x80(%rsp),%rdx
063ad4bf mov       %rdx,0x1E8(%rsp)
063ad4c7 mov       %rax,0x1F0(%rsp)
063ad4cf mov       0x1E8(%rsp),%rdx
063ad4d7 mov       0x1F0(%rsp),%r8
063ad4df call      0x0000`0000`063A`CF90
063ad4e4 mov       %rax,0x38(%rsp)
063ad4e9 mov       0x38(%rsp),%rcx
063ad4ee mov       0x98(%rsp),%rax
063ad4f6 mov       0x90(%rsp),%rdx
063ad4fe mov       %rdx,0x1F8(%rsp)
063ad506 mov       %rax,0x200(%rsp)
063ad50e mov       0x1F8(%rsp),%rdx
063ad516 mov       0x200(%rsp),%r8
063ad51e call      0x0000`0000`063A`CFE0
063ad523 mov       %rax,0x30(%rsp)
063ad528 mov       0x30(%rsp),%rcx
063ad52d mov       0xA4(%rsp),%eax
063ad534 mov       %eax,0x20C(%rsp)
063ad53b movl      $1,0x208(%rsp)
063ad546 mov       0x208(%rsp),%edx
063ad54d mov       0x20C(%rsp),%r8d
063ad555 call      0x0000`0000`063A`D030
063ad55a mov       %rax,0x28(%rsp)
063ad55f mov       0x28(%rsp),%rdx
063ad564 lea       0xB8(%rsp),%rcx
063ad56c call      0x0000`0000`063A`D050
063ad571 mov       0xB0(%rsp),%rax
063ad579 mov       0xA8(%rsp),%rcx
063ad581 lea       0xB8(%rsp),%rdx
063ad589 callq     *0x28(%rax)
063ad58c add       $0x258,%rsp
063ad593 ret

log::MaybeStaticStr::Static::constructor$0:
063ad5a0 sub       $0x10,%rsp
063ad5a4 mov       %rcx,%rax
063ad5a7 mov       %rdx,(%rsp)
063ad5ab mov       %r8,8(%rsp)
063ad5b0 mov       %rdx,8(%rcx)
063ad5b4 mov       %r8,0x10(%rcx)
063ad5b8 movq      $0,(%rcx)
063ad5bf add       $0x10,%rsp
063ad5c3 ret

log::impl$37::clone:
063ad5d0 push      %rax
063ad5d1 mov       %rcx,%rax
063ad5d4 mov       %rdx,(%rsp)
063ad5d8 mov       (%rdx),%r8
063ad5db mov       %r8,(%rcx)
063ad5de mov       8(%rdx),%r8
063ad5e2 mov       %r8,8(%rcx)
063ad5e6 mov       0x10(%rdx),%rdx
063ad5ea mov       %rdx,0x10(%rcx)
063ad5ee pop       %rcx
063ad5ef ret

log::impl$46::clone:
063ad5f0 sub       $0x108,%rsp
063ad5f7 mov       %rdx,%rax
063ad5fa mov       %rcx,0x30(%rsp)
063ad5ff mov       %rcx,0x38(%rsp)
063ad604 mov       %rax,0xD8(%rsp)
063ad60c mov       %rax,%rdx
063ad60f mov       %rdx,0xE0(%rsp)
063ad617 mov       %rax,%rcx
063ad61a add       $0x18,%rcx
063ad61e mov       %rcx,0x40(%rsp)
063ad623 mov       %rcx,0xE8(%rsp)
063ad62b mov       %rax,%rcx
063ad62e add       $0x48,%rcx
063ad632 mov       %rcx,0x48(%rsp)
063ad637 mov       %rcx,0xF0(%rsp)
063ad63f mov       %rax,%rcx
063ad642 add       $0x60,%rcx
063ad646 mov       %rcx,0x50(%rsp)
063ad64b mov       %rcx,0xF8(%rsp)
063ad653 add       $0x78,%rax
063ad657 mov       %rax,0x58(%rsp)
063ad65c mov       %rax,0x100(%rsp)
063ad664 lea       0x60(%rsp),%rcx
063ad669 call      0x0000`0000`063A`D750
063ad66e mov       0x40(%rsp),%rdx
063ad673 lea       0x78(%rsp),%rcx
063ad678 call      0x0000`0000`063C`4170
063ad67d mov       0x48(%rsp),%rdx
063ad682 lea       0xA8(%rsp),%rcx
063ad68a call      0x0000`0000`063C`3F80
063ad68f mov       0x50(%rsp),%rdx
063ad694 lea       0xC0(%rsp),%rcx
063ad69c call      0x0000`0000`063C`3F80
063ad6a1 mov       0x58(%rsp),%rcx
063ad6a6 call      0x0000`0000`063C`3F20
063ad6ab mov       %eax,0x28(%rsp)
063ad6af mov       %edx,0x2C(%rsp)
063ad6b3 mov       0x30(%rsp),%rcx
063ad6b8 mov       0x60(%rsp),%rax
063ad6bd mov       %rax,(%rcx)
063ad6c0 mov       0x68(%rsp),%rax
063ad6c5 mov       %rax,8(%rcx)
063ad6c9 mov       0x70(%rsp),%rax
063ad6ce mov       %rax,0x10(%rcx)
063ad6d2 add       $0x18,%rcx
063ad6d6 lea       0x78(%rsp),%rdx
063ad6db mov       $0x30,%r8d
063ad6e1 call      0x0000`0000`063B`BDE0
063ad6e6 mov       0x28(%rsp),%r8d
063ad6eb mov       0x2C(%rsp),%edx
063ad6ef mov       0x30(%rsp),%rcx
063ad6f4 mov       0x38(%rsp),%rax
063ad6f9 mov       0xA8(%rsp),%r9
063ad701 mov       %r9,0x48(%rcx)
063ad705 mov       0xB0(%rsp),%r9
063ad70d mov       %r9,0x50(%rcx)
063ad711 mov       0xB8(%rsp),%r9
063ad719 mov       %r9,0x58(%rcx)
063ad71d mov       0xC0(%rsp),%r9
063ad725 mov       %r9,0x60(%rcx)
063ad729 mov       0xC8(%rsp),%r9
063ad731 mov       %r9,0x68(%rcx)
063ad735 mov       0xD0(%rsp),%r9
063ad73d mov       %r9,0x70(%rcx)
063ad741 mov       %r8d,0x78(%rcx)
063ad745 mov       %edx,0x7C(%rcx)
063ad748 add       $0x108,%rsp
063ad74f ret

log::impl$49::clone:
063ad750 sub       $0x68,%rsp
063ad754 mov       %rcx,0x30(%rsp)
063ad759 mov       %rcx,0x38(%rsp)
063ad75e mov       %rdx,0x50(%rsp)
063ad763 mov       %rdx,%rcx
063ad766 mov       %rcx,0x58(%rsp)
063ad76b add       $8,%rdx
063ad76f mov       %rdx,0x40(%rsp)
063ad774 mov       %rdx,0x60(%rsp)
063ad779 call      0x0000`0000`063A`CCB0
063ad77e mov       %rax,0x48(%rsp)
063ad783 mov       0x40(%rsp),%rcx
063ad788 call      0x0000`0000`063B`9580
063ad78d mov       %rax,0x20(%rsp)
063ad792 mov       %rdx,0x28(%rsp)
063ad797 mov       0x38(%rsp),%rax
063ad79c mov       0x30(%rsp),%rcx
063ad7a1 mov       0x28(%rsp),%rdx
063ad7a6 mov       0x20(%rsp),%r8
063ad7ab mov       0x48(%rsp),%r9
063ad7b0 mov       %r9,(%rcx)
063ad7b3 mov       %r8,8(%rcx)
063ad7b7 mov       %rdx,0x10(%rcx)
063ad7bb add       $0x68,%rsp
063ad7bf ret

log::impl$66::fmt:
063ad7c0 sub       $0x78,%rsp
063ad7c4 mov       %rcx,0x58(%rsp)
063ad7c9 mov       %rdx,0x60(%rsp)
063ad7ce mov       %rcx,0x30(%rsp)
063ad7d3 mov       %rcx,0x68(%rsp)
063ad7d8 lea       0x38(%rsp),%rcx
063ad7dd lea       0x63C`C960,%r8
063ad7e4 mov       $0xE,%r9d
063ad7ea call      0x0000`0000`063B`5F00
063ad7ef mov       0x30(%rsp),%rax
063ad7f4 lea       0x38(%rsp),%rcx
063ad7f9 mov       %rcx,0x70(%rsp)
063ad7fe mov       %rax,0x50(%rsp)
063ad803 lea       0x50(%rsp),%rdx
063ad808 lea       0x38(%rsp),%rcx
063ad80d lea       0x63C`C970,%r8
063ad814 call      0x0000`0000`063C`3310
063ad819 lea       0x38(%rsp),%rcx
063ad81e call      0x0000`0000`063C`35D0
063ad823 mov       %al,0x2F(%rsp)
063ad827 mov       0x2F(%rsp),%al
063ad82b and       $1,%al
063ad82d movzbl    %al,%eax
063ad830 add       $0x78,%rsp
063ad834 ret

core::fmt::num::GenericRadix::fmt_int<core::fmt::num::UpperHex,u32>:
063ad840 sub       $0x2A8,%rsp
063ad847 mov       %r8,0x128(%rsp)
063ad84f mov       %edx,0x130(%rsp)
063ad856 mov       %rcx,0x208(%rsp)
063ad85e mov       %r8,0x210(%rsp)
063ad866 call      0x0000`0000`063B`0A30
063ad86b mov       %eax,0x134(%rsp)
063ad872 lea       0x130(%rsp),%rcx
063ad87a lea       0x134(%rsp),%rdx
063ad882 call      0x0000`0000`063C`6040
063ad887 mov       %al,0x127(%rsp)
063ad88e and       $1,%al
063ad890 mov       %al,0x21B(%rsp)
063ad897 mov       0x257(%rsp),%al
063ad89e mov       %al,0x126(%rsp)
063ad8a5 mov       0x126(%rsp),%dl
063ad8ac lea       0x138(%rsp),%rcx
063ad8b4 mov       $0x80,%r8d
063ad8ba call      0x0000`0000`063B`BE10
063ad8bf movq      $0x80,0x1B8(%rsp)
063ad8cb mov       $0x10,%ecx
063ad8d0 call      0x0000`0000`063B`0A40
063ad8d5 mov       %eax,0x120(%rsp)
063ad8dc mov       %eax,0x21C(%rsp)
063ad8e3 mov       0x127(%rsp),%al
063ad8ea test      $1,%al
063ad8ec jne       0x0000`0000`063A`D917
063ad8ee jmp       0x0000`0000`063A`D8F0
063ad8f0 lea       0x138(%rsp),%rcx
063ad8f8 mov       $0x80,%edx
063ad8fd call      0x0000`0000`063C`8920
063ad902 mov       %rax,0x110(%rsp)
063ad90a mov       %rdx,0x118(%rsp)
063ad912 jmp       0x0000`0000`063A`DB64
063ad917 lea       0x138(%rsp),%rcx
063ad91f mov       $0x80,%edx
063ad924 call      0x0000`0000`063C`8920
063ad929 mov       %rax,0x100(%rsp)
063ad931 mov       %rdx,0x108(%rsp)
063ad939 mov       0x108(%rsp),%rdx
063ad941 mov       0x100(%rsp),%rcx
063ad949 call      0x0000`0000`063C`4E20
063ad94e mov       %rax,0xF0(%rsp)
063ad956 mov       %rdx,0xF8(%rsp)
063ad95e mov       0xF8(%rsp),%rdx
063ad966 mov       0xF0(%rsp),%rcx
063ad96e call      0x0000`0000`063B`9EA0
063ad973 mov       %rax,0xE0(%rsp)
063ad97b mov       %rdx,0xE8(%rsp)
063ad983 mov       0xE8(%rsp),%rax
063ad98b mov       0xE0(%rsp),%rcx
063ad993 mov       %rcx,0x1C0(%rsp)
063ad99b mov       %rax,0x1C8(%rsp)
063ad9a3 lea       0x1C0(%rsp),%rcx
063ad9ab call      0x0000`0000`063B`9E80
063ad9b0 mov       %rax,0x1D0(%rsp)
063ad9b8 mov       0x1D0(%rsp),%rax
063ad9c0 test      %rax,%rax
063ad9c3 setne     %al
063ad9c6 movzbl    %al,%eax
063ad9c9 je        0x0000`0000`063A`D9D1
063ad9cb jmp       0x0000`0000`063A`D9CD
063ad9cd jmp       0x0000`0000`063A`DA12
063ad9cf ud2
063ad9d1 mov       0x1B8(%rsp),%rax
063ad9d9 mov       %rax,0x200(%rsp)
063ad9e1 mov       0x200(%rsp),%rdx
063ad9e9 lea       0x138(%rsp),%rcx
063ad9f1 lea       0x63C`CA60,%r8
063ad9f8 call      0x0000`0000`063C`7E70
063ad9fd mov       %rax,0xD0(%rsp)
063ada05 mov       %rdx,0xD8(%rsp)
063ada0d jmp       0x0000`0000`063A`DD5C
063ada12 mov       0x120(%rsp),%edx
063ada19 mov       0x1D0(%rsp),%rax
063ada21 mov       %rax,0xC8(%rsp)
063ada29 mov       %rax,0x220(%rsp)
063ada31 mov       0x130(%rsp),%ecx
063ada38 call      0x0000`0000`063C`6250
063ada3d mov       %eax,0x1DC(%rsp)
063ada44 mov       0x120(%rsp),%edx
063ada4b mov       0x130(%rsp),%ecx
063ada52 call      0x0000`0000`063C`61A0
063ada57 mov       %eax,0xC4(%rsp)
063ada5e mov       0xC4(%rsp),%eax
063ada65 mov       %eax,0x130(%rsp)
063ada6c lea       0x1DC(%rsp),%rcx
063ada74 call      0x0000`0000`063B`0A50
063ada79 mov       %al,0xC3(%rsp)
063ada80 mov       0xC3(%rsp),%cl
063ada87 call      0x0000`0000`063B`0C40
063ada8c mov       %al,0xC2(%rsp)
063ada93 mov       0xC8(%rsp),%rax
063ada9b mov       0xC2(%rsp),%cl
063adaa2 mov       %rax,0x268(%rsp)
063adaaa mov       %cl,0x273(%rsp)
063adab1 mov       %cl,0x275(%rsp)
063adab8 mov       %cl,0x277(%rsp)
063adabf mov       %cl,0x276(%rsp)
063adac6 mov       0x276(%rsp),%cl
063adacd mov       %cl,0x274(%rsp)
063adad4 mov       0x274(%rsp),%cl
063adadb mov       %cl,(%rax)
063adadd mov       %rax,0x278(%rsp)
063adae5 mov       %rax,0x280(%rsp)
063adaed mov       0x1B8(%rsp),%rax
063adaf5 sub       $1,%rax
063adaf9 mov       %rax,0xB8(%rsp)
063adb01 setb      %al
063adb04 test      $1,%al
063adb06 jne       0x0000`0000`063A`DB36
063adb08 mov       0xB8(%rsp),%rax
063adb10 mov       %rax,0x1B8(%rsp)
063adb18 lea       0x130(%rsp),%rcx
063adb20 lea       0x134(%rsp),%rdx
063adb28 call      0x0000`0000`063C`5F90
063adb2d mov       %al,0xB7(%rsp)
063adb34 jmp       0x0000`0000`063A`DB50
063adb36 lea       0x63C`CA20,%rcx
063adb3d lea       0x63C`CA08,%r8
063adb44 mov       $0x21,%edx
063adb49 call      0x0000`0000`063B`2030
063adb4e ud2
063adb50 mov       0xB7(%rsp),%al
063adb57 test      $1,%al
063adb59 jne       0x0000`0000`063A`D9D1
063adb5f jmp       0x0000`0000`063A`D9A3
063adb64 mov       0x118(%rsp),%rdx
063adb6c mov       0x110(%rsp),%rcx
063adb74 call      0x0000`0000`063C`4E20
063adb79 mov       %rax,0xA0(%rsp)
063adb81 mov       %rdx,0xA8(%rsp)
063adb89 mov       0xA8(%rsp),%rdx
063adb91 mov       0xA0(%rsp),%rcx
063adb99 call      0x0000`0000`063B`9EA0
063adb9e mov       %rax,0x90(%rsp)
063adba6 mov       %rdx,0x98(%rsp)
063adbae mov       0x98(%rsp),%rax
063adbb6 mov       0x90(%rsp),%rcx
063adbbe mov       %rcx,0x1E0(%rsp)
063adbc6 mov       %rax,0x1E8(%rsp)
063adbce lea       0x1E0(%rsp),%rcx
063adbd6 call      0x0000`0000`063B`9E80
063adbdb mov       %rax,0x1F0(%rsp)
063adbe3 mov       0x1F0(%rsp),%rax
063adbeb test      %rax,%rax
063adbee setne     %al
063adbf1 movzbl    %al,%eax
063adbf4 je        0x0000`0000`063A`D9D1
063adbfa jmp       0x0000`0000`063A`DBFC
063adbfc jmp       0x0000`0000`063A`DC00
063adbfe ud2
063adc00 mov       0x120(%rsp),%edx
063adc07 mov       0x1F0(%rsp),%rax
063adc0f mov       %rax,0x80(%rsp)
063adc17 mov       %rax,0x228(%rsp)
063adc1f mov       0x134(%rsp),%eax
063adc26 mov       %eax,0x88(%rsp)
063adc2d mov       0x130(%rsp),%ecx
063adc34 call      0x0000`0000`063C`6250
063adc39 mov       %eax,0x8C(%rsp)
063adc40 mov       0x8C(%rsp),%edx
063adc47 mov       0x88(%rsp),%ecx
063adc4e call      0x0000`0000`063C`6100
063adc53 mov       %eax,0x1FC(%rsp)
063adc5a mov       0x120(%rsp),%edx
063adc61 mov       0x130(%rsp),%ecx
063adc68 call      0x0000`0000`063C`61A0
063adc6d mov       %eax,0x7C(%rsp)
063adc71 mov       0x7C(%rsp),%eax
063adc75 mov       %eax,0x130(%rsp)
063adc7c lea       0x1FC(%rsp),%rcx
063adc84 call      0x0000`0000`063B`0A50
063adc89 mov       %al,0x7B(%rsp)
063adc8d mov       0x7B(%rsp),%cl
063adc91 call      0x0000`0000`063B`0C40
063adc96 mov       %al,0x7A(%rsp)
063adc9a mov       0x80(%rsp),%rax
063adca2 mov       0x7A(%rsp),%cl
063adca6 mov       %rax,0x258(%rsp)
063adcae mov       %cl,0x263(%rsp)
063adcb5 mov       %cl,0x265(%rsp)
063adcbc mov       %cl,0x267(%rsp)
063adcc3 mov       %cl,0x266(%rsp)
063adcca mov       0x266(%rsp),%cl
063adcd1 mov       %cl,0x264(%rsp)
063adcd8 mov       0x264(%rsp),%cl
063adcdf mov       %cl,(%rax)
063adce1 mov       %rax,0x288(%rsp)
063adce9 mov       %rax,0x290(%rsp)
063adcf1 mov       0x1B8(%rsp),%rax
063adcf9 sub       $1,%rax
063adcfd mov       %rax,0x70(%rsp)
063add02 setb      %al
063add05 test      $1,%al
063add07 jne       0x0000`0000`063A`DD31
063add09 mov       0x70(%rsp),%rax
063add0e mov       %rax,0x1B8(%rsp)
063add16 lea       0x130(%rsp),%rcx
063add1e lea       0x134(%rsp),%rdx
063add26 call      0x0000`0000`063C`5F90
063add2b mov       %al,0x6F(%rsp)
063add2f jmp       0x0000`0000`063A`DD4B
063add31 lea       0x63C`CA20,%rcx
063add38 lea       0x63C`CA48,%r8
063add3f mov       $0x21,%edx
063add44 call      0x0000`0000`063B`2030
063add49 ud2
063add4b mov       0x6F(%rsp),%al
063add4f test      $1,%al
063add51 jne       0x0000`0000`063A`D9D1
063add57 jmp       0x0000`0000`063A`DBCE
063add5c mov       0xD8(%rsp),%rdx
063add64 mov       0xD0(%rsp),%rcx
063add6c mov       %rcx,0x230(%rsp)
063add74 mov       %rdx,0x238(%rsp)
063add7c mov       %rcx,0x298(%rsp)
063add84 mov       %rdx,0x2A0(%rsp)
063add8c call      0x0000`0000`063C`88E0
063add91 mov       %rax,0x60(%rsp)
063add96 mov       0xD8(%rsp),%rdx
063add9e mov       0x60(%rsp),%rcx
063adda3 call      0x0000`0000`063B`A940
063adda8 mov       %rax,0x50(%rsp)
063addad mov       %rdx,0x58(%rsp)
063addb2 mov       0x58(%rsp),%rdx
063addb7 mov       0x50(%rsp),%rcx
063addbc call      0x0000`0000`063B`6370
063addc1 mov       %rax,0x40(%rsp)
063addc6 mov       %rdx,0x48(%rsp)
063addcb mov       %rax,0x240(%rsp)
063addd3 mov       %rdx,0x248(%rsp)
063adddb mov       0x128(%rsp),%rcx
063adde3 mov       0x127(%rsp),%dl
063addea mov       0x40(%rsp),%r8
063addef mov       0x48(%rsp),%r9
063addf4 mov       %rsp,%rax
063addf7 mov       %r9,0x28(%rax)
063addfb mov       %r8,0x20(%rax)
063addff and       $1,%dl
063ade02 lea       0x63C`CA78,%r8
063ade09 mov       $2,%r9d
063ade0f call      0x0000`0000`063B`4D10
063ade14 mov       %al,0x3F(%rsp)
063ade18 mov       0x3F(%rsp),%al
063ade1c and       $1,%al
063ade1e movzbl    %al,%eax
063ade21 add       $0x2A8,%rsp
063ade28 ret

core::fmt::num::GenericRadix::fmt_int<core::fmt::num::UpperHex,usize>:
063ade30 sub       $0x2D8,%rsp
063ade37 mov       %r8,0x148(%rsp)
063ade3f mov       %rdx,0x150(%rsp)
063ade47 mov       %rcx,0x230(%rsp)
063ade4f mov       %r8,0x238(%rsp)
063ade57 call      0x0000`0000`063B`0A70
063ade5c mov       %rax,0x158(%rsp)
063ade64 lea       0x150(%rsp),%rcx
063ade6c lea       0x158(%rsp),%rdx
063ade74 call      0x0000`0000`063C`5FD0
063ade79 mov       %al,0x147(%rsp)
063ade80 and       $1,%al
063ade82 mov       %al,0x247(%rsp)
063ade89 mov       0x287(%rsp),%al
063ade90 mov       %al,0x146(%rsp)
063ade97 mov       0x146(%rsp),%dl
063ade9e lea       0x160(%rsp),%rcx
063adea6 mov       $0x80,%r8d
063adeac call      0x0000`0000`063B`BE10
063adeb1 movq      $0x80,0x1E0(%rsp)
063adebd mov       $0x10,%ecx
063adec2 call      0x0000`0000`063B`0A80
063adec7 mov       %rax,0x138(%rsp)
063adecf mov       %rax,0x248(%rsp)
063aded7 mov       0x147(%rsp),%al
063adede test      $1,%al
063adee0 jne       0x0000`0000`063A`DF0B
063adee2 jmp       0x0000`0000`063A`DEE4
063adee4 lea       0x160(%rsp),%rcx
063adeec mov       $0x80,%edx
063adef1 call      0x0000`0000`063C`8920
063adef6 mov       %rax,0x128(%rsp)
063adefe mov       %rdx,0x130(%rsp)
063adf06 jmp       0x0000`0000`063A`E160
063adf0b lea       0x160(%rsp),%rcx
063adf13 mov       $0x80,%edx
063adf18 call      0x0000`0000`063C`8920
063adf1d mov       %rax,0x118(%rsp)
063adf25 mov       %rdx,0x120(%rsp)
063adf2d mov       0x120(%rsp),%rdx
063adf35 mov       0x118(%rsp),%rcx
063adf3d call      0x0000`0000`063C`4E20
063adf42 mov       %rax,0x108(%rsp)
063adf4a mov       %rdx,0x110(%rsp)
063adf52 mov       0x110(%rsp),%rdx
063adf5a mov       0x108(%rsp),%rcx
063adf62 call      0x0000`0000`063B`9EA0
063adf67 mov       %rax,0xF8(%rsp)
063adf6f mov       %rdx,0x100(%rsp)
063adf77 mov       0x100(%rsp),%rax
063adf7f mov       0xF8(%rsp),%rcx
063adf87 mov       %rcx,0x1E8(%rsp)
063adf8f mov       %rax,0x1F0(%rsp)
063adf97 lea       0x1E8(%rsp),%rcx
063adf9f call      0x0000`0000`063B`9E80
063adfa4 mov       %rax,0x1F8(%rsp)
063adfac mov       0x1F8(%rsp),%rax
063adfb4 test      %rax,%rax
063adfb7 setne     %al
063adfba movzbl    %al,%eax
063adfbd je        0x0000`0000`063A`DFC5
063adfbf jmp       0x0000`0000`063A`DFC1
063adfc1 jmp       0x0000`0000`063A`E006
063adfc3 ud2
063adfc5 mov       0x1E0(%rsp),%rax
063adfcd mov       %rax,0x228(%rsp)
063adfd5 mov       0x228(%rsp),%rdx
063adfdd lea       0x160(%rsp),%rcx
063adfe5 lea       0x63C`CA60,%r8
063adfec call      0x0000`0000`063C`7E70
063adff1 mov       %rax,0xE8(%rsp)
063adff9 mov       %rdx,0xF0(%rsp)
063ae001 jmp       0x0000`0000`063A`E36B
063ae006 mov       0x138(%rsp),%rdx
063ae00e mov       0x1F8(%rsp),%rax
063ae016 mov       %rax,0xE0(%rsp)
063ae01e mov       %rax,0x250(%rsp)
063ae026 mov       0x150(%rsp),%rcx
063ae02e call      0x0000`0000`063C`61F0
063ae033 mov       %rax,0x200(%rsp)
063ae03b mov       0x138(%rsp),%rdx
063ae043 mov       0x150(%rsp),%rcx
063ae04b call      0x0000`0000`063C`6140
063ae050 mov       %rax,0xD8(%rsp)
063ae058 mov       0xD8(%rsp),%rax
063ae060 mov       %rax,0x150(%rsp)
063ae068 lea       0x200(%rsp),%rcx
063ae070 call      0x0000`0000`063B`0A90
063ae075 mov       %al,0xD7(%rsp)
063ae07c mov       0xD7(%rsp),%cl
063ae083 call      0x0000`0000`063B`0C40
063ae088 mov       %al,0xD6(%rsp)
063ae08f mov       0xE0(%rsp),%rax
063ae097 mov       0xD6(%rsp),%cl
063ae09e mov       %rax,0x298(%rsp)
063ae0a6 mov       %cl,0x2A3(%rsp)
063ae0ad mov       %cl,0x2A5(%rsp)
063ae0b4 mov       %cl,0x2A7(%rsp)
063ae0bb mov       %cl,0x2A6(%rsp)
063ae0c2 mov       0x2A6(%rsp),%cl
063ae0c9 mov       %cl,0x2A4(%rsp)
063ae0d0 mov       0x2A4(%rsp),%cl
063ae0d7 mov       %cl,(%rax)
063ae0d9 mov       %rax,0x2A8(%rsp)
063ae0e1 mov       %rax,0x2B0(%rsp)
063ae0e9 mov       0x1E0(%rsp),%rax
063ae0f1 sub       $1,%rax
063ae0f5 mov       %rax,0xC8(%rsp)
063ae0fd setb      %al
063ae100 test      $1,%al
063ae102 jne       0x0000`0000`063A`E132
063ae104 mov       0xC8(%rsp),%rax
063ae10c mov       %rax,0x1E0(%rsp)
063ae114 lea       0x150(%rsp),%rcx
063ae11c lea       0x158(%rsp),%rdx
063ae124 call      0x0000`0000`063C`5F70
063ae129 mov       %al,0xC7(%rsp)
063ae130 jmp       0x0000`0000`063A`E14C
063ae132 lea       0x63C`CA20,%rcx
063ae139 lea       0x63C`CA08,%r8
063ae140 mov       $0x21,%edx
063ae145 call      0x0000`0000`063B`2030
063ae14a ud2
063ae14c mov       0xC7(%rsp),%al
063ae153 test      $1,%al
063ae155 jne       0x0000`0000`063A`DFC5
063ae15b jmp       0x0000`0000`063A`DF97
063ae160 mov       0x130(%rsp),%rdx
063ae168 mov       0x128(%rsp),%rcx
063ae170 call      0x0000`0000`063C`4E20
063ae175 mov       %rax,0xB0(%rsp)
063ae17d mov       %rdx,0xB8(%rsp)
063ae185 mov       0xB8(%rsp),%rdx
063ae18d mov       0xB0(%rsp),%rcx
063ae195 call      0x0000`0000`063B`9EA0
063ae19a mov       %rax,0xA0(%rsp)
063ae1a2 mov       %rdx,0xA8(%rsp)
063ae1aa mov       0xA8(%rsp),%rax
063ae1b2 mov       0xA0(%rsp),%rcx
063ae1ba mov       %rcx,0x208(%rsp)
063ae1c2 mov       %rax,0x210(%rsp)
063ae1ca lea       0x208(%rsp),%rcx
063ae1d2 call      0x0000`0000`063B`9E80
063ae1d7 mov       %rax,0x218(%rsp)
063ae1df mov       0x218(%rsp),%rax
063ae1e7 test      %rax,%rax
063ae1ea setne     %al
063ae1ed movzbl    %al,%eax
063ae1f0 je        0x0000`0000`063A`DFC5
063ae1f6 jmp       0x0000`0000`063A`E1F8
063ae1f8 jmp       0x0000`0000`063A`E1FC
063ae1fa ud2
063ae1fc mov       0x138(%rsp),%rdx
063ae204 mov       0x218(%rsp),%rax
063ae20c mov       %rax,0x88(%rsp)
063ae214 mov       %rax,0x258(%rsp)
063ae21c mov       0x158(%rsp),%rax
063ae224 mov       %rax,0x90(%rsp)
063ae22c mov       0x150(%rsp),%rcx
063ae234 call      0x0000`0000`063C`61F0
063ae239 mov       %rax,0x98(%rsp)
063ae241 mov       0x98(%rsp),%rdx
063ae249 mov       0x90(%rsp),%rcx
063ae251 call      0x0000`0000`063C`60B0
063ae256 mov       %rax,0x220(%rsp)
063ae25e mov       0x138(%rsp),%rdx
063ae266 mov       0x150(%rsp),%rcx
063ae26e call      0x0000`0000`063C`6140
063ae273 mov       %rax,0x80(%rsp)
063ae27b mov       0x80(%rsp),%rax
063ae283 mov       %rax,0x150(%rsp)
063ae28b lea       0x220(%rsp),%rcx
063ae293 call      0x0000`0000`063B`0A90
063ae298 mov       %al,0x7F(%rsp)
063ae29c mov       0x7F(%rsp),%cl
063ae2a0 call      0x0000`0000`063B`0C40
063ae2a5 mov       %al,0x7E(%rsp)
063ae2a9 mov       0x88(%rsp),%rax
063ae2b1 mov       0x7E(%rsp),%cl
063ae2b5 mov       %rax,0x288(%rsp)
063ae2bd mov       %cl,0x293(%rsp)
063ae2c4 mov       %cl,0x295(%rsp)
063ae2cb mov       %cl,0x297(%rsp)
063ae2d2 mov       %cl,0x296(%rsp)
063ae2d9 mov       0x296(%rsp),%cl
063ae2e0 mov       %cl,0x294(%rsp)
063ae2e7 mov       0x294(%rsp),%cl
063ae2ee mov       %cl,(%rax)
063ae2f0 mov       %rax,0x2B8(%rsp)
063ae2f8 mov       %rax,0x2C0(%rsp)
063ae300 mov       0x1E0(%rsp),%rax
063ae308 sub       $1,%rax
063ae30c mov       %rax,0x70(%rsp)
063ae311 setb      %al
063ae314 test      $1,%al
063ae316 jne       0x0000`0000`063A`E340
063ae318 mov       0x70(%rsp),%rax
063ae31d mov       %rax,0x1E0(%rsp)
063ae325 lea       0x150(%rsp),%rcx
063ae32d lea       0x158(%rsp),%rdx
063ae335 call      0x0000`0000`063C`5F70
063ae33a mov       %al,0x6F(%rsp)
063ae33e jmp       0x0000`0000`063A`E35A
063ae340 lea       0x63C`CA20,%rcx
063ae347 lea       0x63C`CA48,%r8
063ae34e mov       $0x21,%edx
063ae353 call      0x0000`0000`063B`2030
063ae358 ud2
063ae35a mov       0x6F(%rsp),%al
063ae35e test      $1,%al
063ae360 jne       0x0000`0000`063A`DFC5
063ae366 jmp       0x0000`0000`063A`E1CA
063ae36b mov       0xF0(%rsp),%rdx
063ae373 mov       0xE8(%rsp),%rcx
063ae37b mov       %rcx,0x260(%rsp)
063ae383 mov       %rdx,0x268(%rsp)
063ae38b mov       %rcx,0x2C8(%rsp)
063ae393 mov       %rdx,0x2D0(%rsp)
063ae39b call      0x0000`0000`063C`88E0
063ae3a0 mov       %rax,0x60(%rsp)
063ae3a5 mov       0xF0(%rsp),%rdx
063ae3ad mov       0x60(%rsp),%rcx
063ae3b2 call      0x0000`0000`063B`A940
063ae3b7 mov       %rax,0x50(%rsp)
063ae3bc mov       %rdx,0x58(%rsp)
063ae3c1 mov       0x58(%rsp),%rdx
063ae3c6 mov       0x50(%rsp),%rcx
063ae3cb call      0x0000`0000`063B`6370
063ae3d0 mov       %rax,0x40(%rsp)
063ae3d5 mov       %rdx,0x48(%rsp)
063ae3da mov       %rax,0x270(%rsp)
063ae3e2 mov       %rdx,0x278(%rsp)
063ae3ea mov       0x148(%rsp),%rcx
063ae3f2 mov       0x147(%rsp),%dl
063ae3f9 mov       0x40(%rsp),%r8
063ae3fe mov       0x48(%rsp),%r9
063ae403 mov       %rsp,%rax
063ae406 mov       %r9,0x28(%rax)
063ae40a mov       %r8,0x20(%rax)
063ae40e and       $1,%dl
063ae411 lea       0x63C`CA78,%r8
063ae418 mov       $2,%r9d
063ae41e call      0x0000`0000`063B`4D10
063ae423 mov       %al,0x3F(%rsp)
063ae427 mov       0x3F(%rsp),%al
063ae42b and       $1,%al
063ae42d movzbl    %al,%eax
063ae430 add       $0x2D8,%rsp
063ae437 ret

core::fmt::num::GenericRadix::fmt_int<core::fmt::num::LowerHex,usize>:
063ae440 sub       $0x2D8,%rsp
063ae447 mov       %r8,0x148(%rsp)
063ae44f mov       %rdx,0x150(%rsp)
063ae457 mov       %rcx,0x230(%rsp)
063ae45f mov       %r8,0x238(%rsp)
063ae467 call      0x0000`0000`063B`0A70
063ae46c mov       %rax,0x158(%rsp)
063ae474 lea       0x150(%rsp),%rcx
063ae47c lea       0x158(%rsp),%rdx
063ae484 call      0x0000`0000`063C`5FD0
063ae489 mov       %al,0x147(%rsp)
063ae490 and       $1,%al
063ae492 mov       %al,0x247(%rsp)
063ae499 mov       0x287(%rsp),%al
063ae4a0 mov       %al,0x146(%rsp)
063ae4a7 mov       0x146(%rsp),%dl
063ae4ae lea       0x160(%rsp),%rcx
063ae4b6 mov       $0x80,%r8d
063ae4bc call      0x0000`0000`063B`BE10
063ae4c1 movq      $0x80,0x1E0(%rsp)
063ae4cd mov       $0x10,%ecx
063ae4d2 call      0x0000`0000`063B`0A80
063ae4d7 mov       %rax,0x138(%rsp)
063ae4df mov       %rax,0x248(%rsp)
063ae4e7 mov       0x147(%rsp),%al
063ae4ee test      $1,%al
063ae4f0 jne       0x0000`0000`063A`E51B
063ae4f2 jmp       0x0000`0000`063A`E4F4
063ae4f4 lea       0x160(%rsp),%rcx
063ae4fc mov       $0x80,%edx
063ae501 call      0x0000`0000`063C`8920
063ae506 mov       %rax,0x128(%rsp)
063ae50e mov       %rdx,0x130(%rsp)
063ae516 jmp       0x0000`0000`063A`E770
063ae51b lea       0x160(%rsp),%rcx
063ae523 mov       $0x80,%edx
063ae528 call      0x0000`0000`063C`8920
063ae52d mov       %rax,0x118(%rsp)
063ae535 mov       %rdx,0x120(%rsp)
063ae53d mov       0x120(%rsp),%rdx
063ae545 mov       0x118(%rsp),%rcx
063ae54d call      0x0000`0000`063C`4E20
063ae552 mov       %rax,0x108(%rsp)
063ae55a mov       %rdx,0x110(%rsp)
063ae562 mov       0x110(%rsp),%rdx
063ae56a mov       0x108(%rsp),%rcx
063ae572 call      0x0000`0000`063B`9EA0
063ae577 mov       %rax,0xF8(%rsp)
063ae57f mov       %rdx,0x100(%rsp)
063ae587 mov       0x100(%rsp),%rax
063ae58f mov       0xF8(%rsp),%rcx
063ae597 mov       %rcx,0x1E8(%rsp)
063ae59f mov       %rax,0x1F0(%rsp)
063ae5a7 lea       0x1E8(%rsp),%rcx
063ae5af call      0x0000`0000`063B`9E80
063ae5b4 mov       %rax,0x1F8(%rsp)
063ae5bc mov       0x1F8(%rsp),%rax
063ae5c4 test      %rax,%rax
063ae5c7 setne     %al
063ae5ca movzbl    %al,%eax
063ae5cd je        0x0000`0000`063A`E5D5
063ae5cf jmp       0x0000`0000`063A`E5D1
063ae5d1 jmp       0x0000`0000`063A`E616
063ae5d3 ud2
063ae5d5 mov       0x1E0(%rsp),%rax
063ae5dd mov       %rax,0x228(%rsp)
063ae5e5 mov       0x228(%rsp),%rdx
063ae5ed lea       0x160(%rsp),%rcx
063ae5f5 lea       0x63C`CA60,%r8
063ae5fc call      0x0000`0000`063C`7E70
063ae601 mov       %rax,0xE8(%rsp)
063ae609 mov       %rdx,0xF0(%rsp)
063ae611 jmp       0x0000`0000`063A`E97B
063ae616 mov       0x138(%rsp),%rdx
063ae61e mov       0x1F8(%rsp),%rax
063ae626 mov       %rax,0xE0(%rsp)
063ae62e mov       %rax,0x250(%rsp)
063ae636 mov       0x150(%rsp),%rcx
063ae63e call      0x0000`0000`063C`61F0
063ae643 mov       %rax,0x200(%rsp)
063ae64b mov       0x138(%rsp),%rdx
063ae653 mov       0x150(%rsp),%rcx
063ae65b call      0x0000`0000`063C`6140
063ae660 mov       %rax,0xD8(%rsp)
063ae668 mov       0xD8(%rsp),%rax
063ae670 mov       %rax,0x150(%rsp)
063ae678 lea       0x200(%rsp),%rcx
063ae680 call      0x0000`0000`063B`0A90
063ae685 mov       %al,0xD7(%rsp)
063ae68c mov       0xD7(%rsp),%cl
063ae693 call      0x0000`0000`063B`0AB0
063ae698 mov       %al,0xD6(%rsp)
063ae69f mov       0xE0(%rsp),%rax
063ae6a7 mov       0xD6(%rsp),%cl
063ae6ae mov       %rax,0x298(%rsp)
063ae6b6 mov       %cl,0x2A3(%rsp)
063ae6bd mov       %cl,0x2A5(%rsp)
063ae6c4 mov       %cl,0x2A7(%rsp)
063ae6cb mov       %cl,0x2A6(%rsp)
063ae6d2 mov       0x2A6(%rsp),%cl
063ae6d9 mov       %cl,0x2A4(%rsp)
063ae6e0 mov       0x2A4(%rsp),%cl
063ae6e7 mov       %cl,(%rax)
063ae6e9 mov       %rax,0x2A8(%rsp)
063ae6f1 mov       %rax,0x2B0(%rsp)
063ae6f9 mov       0x1E0(%rsp),%rax
063ae701 sub       $1,%rax
063ae705 mov       %rax,0xC8(%rsp)
063ae70d setb      %al
063ae710 test      $1,%al
063ae712 jne       0x0000`0000`063A`E742
063ae714 mov       0xC8(%rsp),%rax
063ae71c mov       %rax,0x1E0(%rsp)
063ae724 lea       0x150(%rsp),%rcx
063ae72c lea       0x158(%rsp),%rdx
063ae734 call      0x0000`0000`063C`5F70
063ae739 mov       %al,0xC7(%rsp)
063ae740 jmp       0x0000`0000`063A`E75C
063ae742 lea       0x63C`CA20,%rcx
063ae749 lea       0x63C`CA08,%r8
063ae750 mov       $0x21,%edx
063ae755 call      0x0000`0000`063B`2030
063ae75a ud2
063ae75c mov       0xC7(%rsp),%al
063ae763 test      $1,%al
063ae765 jne       0x0000`0000`063A`E5D5
063ae76b jmp       0x0000`0000`063A`E5A7
063ae770 mov       0x130(%rsp),%rdx
063ae778 mov       0x128(%rsp),%rcx
063ae780 call      0x0000`0000`063C`4E20
063ae785 mov       %rax,0xB0(%rsp)
063ae78d mov       %rdx,0xB8(%rsp)
063ae795 mov       0xB8(%rsp),%rdx
063ae79d mov       0xB0(%rsp),%rcx
063ae7a5 call      0x0000`0000`063B`9EA0
063ae7aa mov       %rax,0xA0(%rsp)
063ae7b2 mov       %rdx,0xA8(%rsp)
063ae7ba mov       0xA8(%rsp),%rax
063ae7c2 mov       0xA0(%rsp),%rcx
063ae7ca mov       %rcx,0x208(%rsp)
063ae7d2 mov       %rax,0x210(%rsp)
063ae7da lea       0x208(%rsp),%rcx
063ae7e2 call      0x0000`0000`063B`9E80
063ae7e7 mov       %rax,0x218(%rsp)
063ae7ef mov       0x218(%rsp),%rax
063ae7f7 test      %rax,%rax
063ae7fa setne     %al
063ae7fd movzbl    %al,%eax
063ae800 je        0x0000`0000`063A`E5D5
063ae806 jmp       0x0000`0000`063A`E808
063ae808 jmp       0x0000`0000`063A`E80C
063ae80a ud2
063ae80c mov       0x138(%rsp),%rdx
063ae814 mov       0x218(%rsp),%rax
063ae81c mov       %rax,0x88(%rsp)
063ae824 mov       %rax,0x258(%rsp)
063ae82c mov       0x158(%rsp),%rax
063ae834 mov       %rax,0x90(%rsp)
063ae83c mov       0x150(%rsp),%rcx
063ae844 call      0x0000`0000`063C`61F0
063ae849 mov       %rax,0x98(%rsp)
063ae851 mov       0x98(%rsp),%rdx
063ae859 mov       0x90(%rsp),%rcx
063ae861 call      0x0000`0000`063C`60B0
063ae866 mov       %rax,0x220(%rsp)
063ae86e mov       0x138(%rsp),%rdx
063ae876 mov       0x150(%rsp),%rcx
063ae87e call      0x0000`0000`063C`6140
063ae883 mov       %rax,0x80(%rsp)
063ae88b mov       0x80(%rsp),%rax
063ae893 mov       %rax,0x150(%rsp)
063ae89b lea       0x220(%rsp),%rcx
063ae8a3 call      0x0000`0000`063B`0A90
063ae8a8 mov       %al,0x7F(%rsp)
063ae8ac mov       0x7F(%rsp),%cl
063ae8b0 call      0x0000`0000`063B`0AB0
063ae8b5 mov       %al,0x7E(%rsp)
063ae8b9 mov       0x88(%rsp),%rax
063ae8c1 mov       0x7E(%rsp),%cl
063ae8c5 mov       %rax,0x288(%rsp)
063ae8cd mov       %cl,0x293(%rsp)
063ae8d4 mov       %cl,0x295(%rsp)
063ae8db mov       %cl,0x297(%rsp)
063ae8e2 mov       %cl,0x296(%rsp)
063ae8e9 mov       0x296(%rsp),%cl
063ae8f0 mov       %cl,0x294(%rsp)
063ae8f7 mov       0x294(%rsp),%cl
063ae8fe mov       %cl,(%rax)
063ae900 mov       %rax,0x2B8(%rsp)
063ae908 mov       %rax,0x2C0(%rsp)
063ae910 mov       0x1E0(%rsp),%rax
063ae918 sub       $1,%rax
063ae91c mov       %rax,0x70(%rsp)
063ae921 setb      %al
063ae924 test      $1,%al
063ae926 jne       0x0000`0000`063A`E950
063ae928 mov       0x70(%rsp),%rax
063ae92d mov       %rax,0x1E0(%rsp)
063ae935 lea       0x150(%rsp),%rcx
063ae93d lea       0x158(%rsp),%rdx
063ae945 call      0x0000`0000`063C`5F70
063ae94a mov       %al,0x6F(%rsp)
063ae94e jmp       0x0000`0000`063A`E96A
063ae950 lea       0x63C`CA20,%rcx
063ae957 lea       0x63C`CA48,%r8
063ae95e mov       $0x21,%edx
063ae963 call      0x0000`0000`063B`2030
063ae968 ud2
063ae96a mov       0x6F(%rsp),%al
063ae96e test      $1,%al
063ae970 jne       0x0000`0000`063A`E5D5
063ae976 jmp       0x0000`0000`063A`E7DA
063ae97b mov       0xF0(%rsp),%rdx
063ae983 mov       0xE8(%rsp),%rcx
063ae98b mov       %rcx,0x260(%rsp)
063ae993 mov       %rdx,0x268(%rsp)
063ae99b mov       %rcx,0x2C8(%rsp)
063ae9a3 mov       %rdx,0x2D0(%rsp)
063ae9ab call      0x0000`0000`063C`88E0
063ae9b0 mov       %rax,0x60(%rsp)
063ae9b5 mov       0xF0(%rsp),%rdx
063ae9bd mov       0x60(%rsp),%rcx
063ae9c2 call      0x0000`0000`063B`A940
063ae9c7 mov       %rax,0x50(%rsp)
063ae9cc mov       %rdx,0x58(%rsp)
063ae9d1 mov       0x58(%rsp),%rdx
063ae9d6 mov       0x50(%rsp),%rcx
063ae9db call      0x0000`0000`063B`6370
063ae9e0 mov       %rax,0x40(%rsp)
063ae9e5 mov       %rdx,0x48(%rsp)
063ae9ea mov       %rax,0x270(%rsp)
063ae9f2 mov       %rdx,0x278(%rsp)
063ae9fa mov       0x148(%rsp),%rcx
063aea02 mov       0x147(%rsp),%dl
063aea09 mov       0x40(%rsp),%r8
063aea0e mov       0x48(%rsp),%r9
063aea13 mov       %rsp,%rax
063aea16 mov       %r9,0x28(%rax)
063aea1a mov       %r8,0x20(%rax)
063aea1e and       $1,%dl
063aea21 lea       0x63C`CA78,%r8
063aea28 mov       $2,%r9d
063aea2e call      0x0000`0000`063B`4D10
063aea33 mov       %al,0x3F(%rsp)
063aea37 mov       0x3F(%rsp),%al
063aea3b and       $1,%al
063aea3d movzbl    %al,%eax
063aea40 add       $0x2D8,%rsp
063aea47 ret

core::fmt::num::parse_u64_into<39>:
063aea50 sub       $0x658,%rsp
063aea57 mov       %r8,0x268(%rsp)
063aea5f mov       %rdx,0x270(%rsp)
063aea67 mov       %rcx,%rax
063aea6a mov       0x270(%rsp),%rcx
063aea72 mov       %rax,0x280(%rsp)
063aea7a mov       %rcx,0x290(%rsp)
063aea82 mov       %r8,0x298(%rsp)
063aea8a mov       %rcx,0x330(%rsp)
063aea92 movq      $0x27,0x338(%rsp)
063aea9e mov       $0x27,%edx
063aeaa3 call      0x0000`0000`063C`8900
063aeaa8 mov       %rax,0x278(%rsp)
063aeab0 mov       %rax,0x2A0(%rsp)
063aeab8 mov       0x63C`CB48,%rcx
063aeabf mov       $0xC8,%edx
063aeac4 call      0x0000`0000`063C`0180
063aeac9 mov       %rax,0x260(%rsp)
063aead1 mov       %rax,0x2A8(%rsp)
063aead9 mov       0x268(%rsp),%rax
063aeae1 cmpq      $0x13,(%rax)
063aeae5 setg      %al
063aeae8 xor       $0xFF,%al
063aeaea test      $1,%al
063aeaec jne       0x0000`0000`063A`EB04
063aeaee movabs    $0x23`86F2`6FC1`0000,%rax
063aeaf8 cmp       %rax,0x280(%rsp)
063aeb00 jae       0x0000`0000`063A`EB35
063aeb02 jmp       0x0000`0000`063A`EB1E
063aeb04 lea       0x63C`CB50,%rcx
063aeb0b lea       0x63C`CB70,%r8
063aeb12 mov       $0x1C,%edx
063aeb17 call      0x0000`0000`063B`2030
063aeb1c ud2
063aeb1e cmpq      $0x5F5`E100,0x280(%rsp)
063aeb2a jae       0x0000`0000`063A`F416
063aeb30 jmp       0x0000`0000`063A`F3F1
063aeb35 mov       0x280(%rsp),%rax
063aeb3d movabs    $0x23`86F2`6FC1`0000,%rcx
063aeb47 xor       %edx,%edx
063aeb49 div       %rcx
063aeb4c mov       %rdx,0x250(%rsp)
063aeb54 mov       %rdx,0x2B0(%rsp)
063aeb5c mov       0x280(%rsp),%rax
063aeb64 movabs    $0x23`86F2`6FC1`0000,%rcx
063aeb6e xor       %edx,%edx
063aeb70 div       %rcx
063aeb73 mov       %rax,%rcx
063aeb76 mov       0x250(%rsp),%rax
063aeb7e mov       %rcx,0x280(%rsp)
063aeb86 movabs    $0x5AF3`107A`4000,%rcx
063aeb90 xor       %edx,%edx
063aeb92 div       %rcx
063aeb95 mov       $0x64,%ecx
063aeb9a xor       %edx,%edx
063aeb9c div       %rcx
063aeb9f shl       $1,%rdx
063aeba3 mov       %rdx,0x258(%rsp)
063aebab mov       0x250(%rsp),%rax
063aebb3 mov       0x258(%rsp),%rcx
063aebbb mov       %rcx,0x2B8(%rsp)
063aebc3 movabs    $0xE8`D4A5`1000,%rcx
063aebcd xor       %edx,%edx
063aebcf div       %rcx
063aebd2 mov       $0x64,%ecx
063aebd7 xor       %edx,%edx
063aebd9 div       %rcx
063aebdc shl       $1,%rdx
063aebe0 mov       %rdx,0x248(%rsp)
063aebe8 mov       0x250(%rsp),%rax
063aebf0 mov       0x248(%rsp),%rcx
063aebf8 mov       %rcx,0x2C0(%rsp)
063aec00 movabs    $0x2`540B`E400,%rcx
063aec0a xor       %edx,%edx
063aec0c div       %rcx
063aec0f mov       $0x64,%ecx
063aec14 xor       %edx,%edx
063aec16 div       %rcx
063aec19 shl       $1,%rdx
063aec1d mov       %rdx,0x240(%rsp)
063aec25 mov       0x250(%rsp),%rax
063aec2d mov       0x240(%rsp),%rcx
063aec35 mov       %rcx,0x2C8(%rsp)
063aec3d mov       $0x5F5`E100,%ecx
063aec42 xor       %edx,%edx
063aec44 div       %rcx
063aec47 mov       $0x64,%ecx
063aec4c xor       %edx,%edx
063aec4e div       %rcx
063aec51 shl       $1,%rdx
063aec55 mov       %rdx,0x238(%rsp)
063aec5d mov       0x250(%rsp),%rax
063aec65 mov       0x238(%rsp),%rcx
063aec6d mov       %rcx,0x2D0(%rsp)
063aec75 mov       $0xF`4240,%ecx
063aec7a xor       %edx,%edx
063aec7c div       %rcx
063aec7f mov       $0x64,%ecx
063aec84 xor       %edx,%edx
063aec86 div       %rcx
063aec89 shl       $1,%rdx
063aec8d mov       %rdx,0x230(%rsp)
063aec95 mov       0x250(%rsp),%rax
063aec9d mov       0x230(%rsp),%rcx
063aeca5 mov       %rcx,0x2D8(%rsp)
063aecad mov       $0x2710,%ecx
063aecb2 xor       %edx,%edx
063aecb4 div       %rcx
063aecb7 mov       $0x64,%ecx
063aecbc xor       %edx,%edx
063aecbe div       %rcx
063aecc1 shl       $1,%rdx
063aecc5 mov       %rdx,0x228(%rsp)
063aeccd mov       0x250(%rsp),%rax
063aecd5 mov       0x228(%rsp),%rcx
063aecdd mov       %rcx,0x2E0(%rsp)
063aece5 mov       $0x64,%ecx
063aecea xor       %edx,%edx
063aecec div       %rcx
063aecef mov       $0x64,%ecx
063aecf4 xor       %edx,%edx
063aecf6 div       %rcx
063aecf9 shl       $1,%rdx
063aecfd mov       %rdx,0x220(%rsp)
063aed05 mov       0x250(%rsp),%rax
063aed0d mov       0x220(%rsp),%rcx
063aed15 mov       %rcx,0x2E8(%rsp)
063aed1d shr       $0,%rax
063aed21 mov       $0x64,%ecx
063aed26 xor       %edx,%edx
063aed28 div       %rcx
063aed2b shl       $1,%rdx
063aed2f mov       %rdx,0x218(%rsp)
063aed37 mov       0x268(%rsp),%rax
063aed3f mov       0x218(%rsp),%rcx
063aed47 mov       %rcx,0x2F0(%rsp)
063aed4f mov       (%rax),%rax
063aed52 sub       $0x10,%rax
063aed56 mov       %rax,0x210(%rsp)
063aed5e seto      %al
063aed61 test      $1,%al
063aed63 jne       0x0000`0000`063A`EDB5
063aed65 mov       0x258(%rsp),%rcx
063aed6d mov       0x260(%rsp),%rax
063aed75 mov       0x268(%rsp),%rdx
063aed7d mov       0x210(%rsp),%r8
063aed85 mov       %r8,(%rdx)
063aed88 mov       %rax,0x4A8(%rsp)
063aed90 mov       %rcx,0x4B0(%rsp)
063aed98 add       %rcx,%rax
063aed9b mov       %rax,0x4B8(%rsp)
063aeda3 mov       0x4B8(%rsp),%rax
063aedab mov       %rax,0x208(%rsp)
063aedb3 jmp       0x0000`0000`063A`EDCF
063aedb5 lea       0x63C`CA20,%rcx
063aedbc lea       0x63C`CB88,%r8
063aedc3 mov       $0x21,%edx
063aedc8 call      0x0000`0000`063B`2030
063aedcd ud2
063aedcf mov       0x268(%rsp),%rax
063aedd7 mov       (%rax),%rax
063aedda add       $0,%rax
063aedde mov       %rax,0x200(%rsp)
063aede6 seto      %al
063aede9 test      $1,%al
063aedeb jne       0x0000`0000`063A`EE2A
063aeded mov       0x200(%rsp),%rcx
063aedf5 mov       0x278(%rsp),%rax
063aedfd mov       %rax,0x640(%rsp)
063aee05 mov       %rcx,0x648(%rsp)
063aee0d add       %rcx,%rax
063aee10 mov       %rax,0x650(%rsp)
063aee18 mov       0x650(%rsp),%rax
063aee20 mov       %rax,0x1F8(%rsp)
063aee28 jmp       0x0000`0000`063A`EE44
063aee2a lea       0x63C`CBC0,%rcx
063aee31 lea       0x63C`CBA0,%r8
063aee38 mov       $0x1C,%edx
063aee3d call      0x0000`0000`063B`2030
063aee42 ud2
063aee44 mov       0x1F8(%rsp),%rdx
063aee4c mov       0x208(%rsp),%rcx
063aee54 mov       $2,%r8d
063aee5a call      0x0000`0000`063C`2510
063aee5f mov       0x248(%rsp),%rcx
063aee67 mov       0x260(%rsp),%rax
063aee6f mov       %rax,0x490(%rsp)
063aee77 mov       %rcx,0x498(%rsp)
063aee7f add       %rcx,%rax
063aee82 mov       %rax,0x4A0(%rsp)
063aee8a mov       0x4A0(%rsp),%rax
063aee92 mov       %rax,0x1F0(%rsp)
063aee9a mov       0x268(%rsp),%rax
063aeea2 mov       (%rax),%rax
063aeea5 add       $2,%rax
063aeea9 mov       %rax,0x1E8(%rsp)
063aeeb1 seto      %al
063aeeb4 test      $1,%al
063aeeb6 jne       0x0000`0000`063A`EEF5
063aeeb8 mov       0x1E8(%rsp),%rcx
063aeec0 mov       0x278(%rsp),%rax
063aeec8 mov       %rax,0x628(%rsp)
063aeed0 mov       %rcx,0x630(%rsp)
063aeed8 add       %rcx,%rax
063aeedb mov       %rax,0x638(%rsp)
063aeee3 mov       0x638(%rsp),%rax
063aeeeb mov       %rax,0x1E0(%rsp)
063aeef3 jmp       0x0000`0000`063A`EF0F
063aeef5 lea       0x63C`CBC0,%rcx
063aeefc lea       0x63C`CBE0,%r8
063aef03 mov       $0x1C,%edx
063aef08 call      0x0000`0000`063B`2030
063aef0d ud2
063aef0f mov       0x1E0(%rsp),%rdx
063aef17 mov       0x1F0(%rsp),%rcx
063aef1f mov       $2,%r8d
063aef25 call      0x0000`0000`063C`2510
063aef2a mov       0x240(%rsp),%rcx
063aef32 mov       0x260(%rsp),%rax
063aef3a mov       %rax,0x478(%rsp)
063aef42 mov       %rcx,0x480(%rsp)
063aef4a add       %rcx,%rax
063aef4d mov       %rax,0x488(%rsp)
063aef55 mov       0x488(%rsp),%rax
063aef5d mov       %rax,0x1D8(%rsp)
063aef65 mov       0x268(%rsp),%rax
063aef6d mov       (%rax),%rax
063aef70 add       $4,%rax
063aef74 mov       %rax,0x1D0(%rsp)
063aef7c seto      %al
063aef7f test      $1,%al
063aef81 jne       0x0000`0000`063A`EFC0
063aef83 mov       0x1D0(%rsp),%rcx
063aef8b mov       0x278(%rsp),%rax
063aef93 mov       %rax,0x610(%rsp)
063aef9b mov       %rcx,0x618(%rsp)
063aefa3 add       %rcx,%rax
063aefa6 mov       %rax,0x620(%rsp)
063aefae mov       0x620(%rsp),%rax
063aefb6 mov       %rax,0x1C8(%rsp)
063aefbe jmp       0x0000`0000`063A`EFDA
063aefc0 lea       0x63C`CBC0,%rcx
063aefc7 lea       0x63C`CBF8,%r8
063aefce mov       $0x1C,%edx
063aefd3 call      0x0000`0000`063B`2030
063aefd8 ud2
063aefda mov       0x1C8(%rsp),%rdx
063aefe2 mov       0x1D8(%rsp),%rcx
063aefea mov       $2,%r8d
063aeff0 call      0x0000`0000`063C`2510
063aeff5 mov       0x238(%rsp),%rcx
063aeffd mov       0x260(%rsp),%rax
063af005 mov       %rax,0x460(%rsp)
063af00d mov       %rcx,0x468(%rsp)
063af015 add       %rcx,%rax
063af018 mov       %rax,0x470(%rsp)
063af020 mov       0x470(%rsp),%rax
063af028 mov       %rax,0x1C0(%rsp)
063af030 mov       0x268(%rsp),%rax
063af038 mov       (%rax),%rax
063af03b add       $6,%rax
063af03f mov       %rax,0x1B8(%rsp)
063af047 seto      %al
063af04a test      $1,%al
063af04c jne       0x0000`0000`063A`F08B
063af04e mov       0x1B8(%rsp),%rcx
063af056 mov       0x278(%rsp),%rax
063af05e mov       %rax,0x5F8(%rsp)
063af066 mov       %rcx,0x600(%rsp)
063af06e add       %rcx,%rax
063af071 mov       %rax,0x608(%rsp)
063af079 mov       0x608(%rsp),%rax
063af081 mov       %rax,0x1B0(%rsp)
063af089 jmp       0x0000`0000`063A`F0A5
063af08b lea       0x63C`CBC0,%rcx
063af092 lea       0x63C`CC10,%r8
063af099 mov       $0x1C,%edx
063af09e call      0x0000`0000`063B`2030
063af0a3 ud2
063af0a5 mov       0x1B0(%rsp),%rdx
063af0ad mov       0x1C0(%rsp),%rcx
063af0b5 mov       $2,%r8d
063af0bb call      0x0000`0000`063C`2510
063af0c0 mov       0x230(%rsp),%rcx
063af0c8 mov       0x260(%rsp),%rax
063af0d0 mov       %rax,0x448(%rsp)
063af0d8 mov       %rcx,0x450(%rsp)
063af0e0 add       %rcx,%rax
063af0e3 mov       %rax,0x458(%rsp)
063af0eb mov       0x458(%rsp),%rax
063af0f3 mov       %rax,0x1A8(%rsp)
063af0fb mov       0x268(%rsp),%rax
063af103 mov       (%rax),%rax
063af106 add       $8,%rax
063af10a mov       %rax,0x1A0(%rsp)
063af112 seto      %al
063af115 test      $1,%al
063af117 jne       0x0000`0000`063A`F156
063af119 mov       0x1A0(%rsp),%rcx
063af121 mov       0x278(%rsp),%rax
063af129 mov       %rax,0x5E0(%rsp)
063af131 mov       %rcx,0x5E8(%rsp)
063af139 add       %rcx,%rax
063af13c mov       %rax,0x5F0(%rsp)
063af144 mov       0x5F0(%rsp),%rax
063af14c mov       %rax,0x198(%rsp)
063af154 jmp       0x0000`0000`063A`F170
063af156 lea       0x63C`CBC0,%rcx
063af15d lea       0x63C`CC28,%r8
063af164 mov       $0x1C,%edx
063af169 call      0x0000`0000`063B`2030
063af16e ud2
063af170 mov       0x198(%rsp),%rdx
063af178 mov       0x1A8(%rsp),%rcx
063af180 mov       $2,%r8d
063af186 call      0x0000`0000`063C`2510
063af18b mov       0x228(%rsp),%rcx
063af193 mov       0x260(%rsp),%rax
063af19b mov       %rax,0x430(%rsp)
063af1a3 mov       %rcx,0x438(%rsp)
063af1ab add       %rcx,%rax
063af1ae mov       %rax,0x440(%rsp)
063af1b6 mov       0x440(%rsp),%rax
063af1be mov       %rax,0x190(%rsp)
063af1c6 mov       0x268(%rsp),%rax
063af1ce mov       (%rax),%rax
063af1d1 add       $0xA,%rax
063af1d5 mov       %rax,0x188(%rsp)
063af1dd seto      %al
063af1e0 test      $1,%al
063af1e2 jne       0x0000`0000`063A`F221
063af1e4 mov       0x188(%rsp),%rcx
063af1ec mov       0x278(%rsp),%rax
063af1f4 mov       %rax,0x5C8(%rsp)
063af1fc mov       %rcx,0x5D0(%rsp)
063af204 add       %rcx,%rax
063af207 mov       %rax,0x5D8(%rsp)
063af20f mov       0x5D8(%rsp),%rax
063af217 mov       %rax,0x180(%rsp)
063af21f jmp       0x0000`0000`063A`F23B
063af221 lea       0x63C`CBC0,%rcx
063af228 lea       0x63C`CC40,%r8
063af22f mov       $0x1C,%edx
063af234 call      0x0000`0000`063B`2030
063af239 ud2
063af23b mov       0x180(%rsp),%rdx
063af243 mov       0x190(%rsp),%rcx
063af24b mov       $2,%r8d
063af251 call      0x0000`0000`063C`2510
063af256 mov       0x220(%rsp),%rcx
063af25e mov       0x260(%rsp),%rax
063af266 mov       %rax,0x418(%rsp)
063af26e mov       %rcx,0x420(%rsp)
063af276 add       %rcx,%rax
063af279 mov       %rax,0x428(%rsp)
063af281 mov       0x428(%rsp),%rax
063af289 mov       %rax,0x178(%rsp)
063af291 mov       0x268(%rsp),%rax
063af299 mov       (%rax),%rax
063af29c add       $0xC,%rax
063af2a0 mov       %rax,0x170(%rsp)
063af2a8 seto      %al
063af2ab test      $1,%al
063af2ad jne       0x0000`0000`063A`F2EC
063af2af mov       0x170(%rsp),%rcx
063af2b7 mov       0x278(%rsp),%rax
063af2bf mov       %rax,0x5B0(%rsp)
063af2c7 mov       %rcx,0x5B8(%rsp)
063af2cf add       %rcx,%rax
063af2d2 mov       %rax,0x5C0(%rsp)
063af2da mov       0x5C0(%rsp),%rax
063af2e2 mov       %rax,0x168(%rsp)
063af2ea jmp       0x0000`0000`063A`F306
063af2ec lea       0x63C`CBC0,%rcx
063af2f3 lea       0x63C`CC58,%r8
063af2fa mov       $0x1C,%edx
063af2ff call      0x0000`0000`063B`2030
063af304 ud2
063af306 mov       0x168(%rsp),%rdx
063af30e mov       0x178(%rsp),%rcx
063af316 mov       $2,%r8d
063af31c call      0x0000`0000`063C`2510
063af321 mov       0x218(%rsp),%rcx
063af329 mov       0x260(%rsp),%rax
063af331 mov       %rax,0x400(%rsp)
063af339 mov       %rcx,0x408(%rsp)
063af341 add       %rcx,%rax
063af344 mov       %rax,0x410(%rsp)
063af34c mov       0x410(%rsp),%rax
063af354 mov       %rax,0x160(%rsp)
063af35c mov       0x268(%rsp),%rax
063af364 mov       (%rax),%rax
063af367 add       $0xE,%rax
063af36b mov       %rax,0x158(%rsp)
063af373 seto      %al
063af376 test      $1,%al
063af378 jne       0x0000`0000`063A`F3B7
063af37a mov       0x158(%rsp),%rcx
063af382 mov       0x278(%rsp),%rax
063af38a mov       %rax,0x598(%rsp)
063af392 mov       %rcx,0x5A0(%rsp)
063af39a add       %rcx,%rax
063af39d mov       %rax,0x5A8(%rsp)
063af3a5 mov       0x5A8(%rsp),%rax
063af3ad mov       %rax,0x150(%rsp)
063af3b5 jmp       0x0000`0000`063A`F3D1
063af3b7 lea       0x63C`CBC0,%rcx
063af3be lea       0x63C`CC70,%r8
063af3c5 mov       $0x1C,%edx
063af3ca call      0x0000`0000`063B`2030
063af3cf ud2
063af3d1 mov       0x150(%rsp),%rdx
063af3d9 mov       0x160(%rsp),%rcx
063af3e1 mov       $2,%r8d
063af3e7 call      0x0000`0000`063C`2510
063af3ec jmp       0x0000`0000`063A`EB1E
063af3f1 mov       0x280(%rsp),%rax
063af3f9 mov       %eax,0x288(%rsp)
063af400 cmpl      $0x2710,0x288(%rsp)
063af40b jae       0x0000`0000`063A`F8D0
063af411 jmp       0x0000`0000`063A`F8AD
063af416 mov       0x280(%rsp),%rax
063af41e mov       $0x5F5`E100,%ecx
063af423 xor       %edx,%edx
063af425 div       %rcx
063af428 mov       %rdx,0x140(%rsp)
063af430 mov       %rdx,0x2F8(%rsp)
063af438 mov       0x280(%rsp),%rax
063af440 mov       $0x5F5`E100,%ecx
063af445 xor       %edx,%edx
063af447 div       %rcx
063af44a mov       %rax,%rcx
063af44d mov       0x140(%rsp),%rax
063af455 mov       %rcx,0x280(%rsp)
063af45d mov       $0xF`4240,%ecx
063af462 xor       %edx,%edx
063af464 div       %rcx
063af467 mov       $0x64,%ecx
063af46c xor       %edx,%edx
063af46e div       %rcx
063af471 shl       $1,%rdx
063af475 mov       %rdx,0x148(%rsp)
063af47d mov       0x140(%rsp),%rax
063af485 mov       0x148(%rsp),%rcx
063af48d mov       %rcx,0x300(%rsp)
063af495 mov       $0x2710,%ecx
063af49a xor       %edx,%edx
063af49c div       %rcx
063af49f mov       $0x64,%ecx
063af4a4 xor       %edx,%edx
063af4a6 div       %rcx
063af4a9 shl       $1,%rdx
063af4ad mov       %rdx,0x138(%rsp)
063af4b5 mov       0x140(%rsp),%rax
063af4bd mov       0x138(%rsp),%rcx
063af4c5 mov       %rcx,0x308(%rsp)
063af4cd mov       $0x64,%ecx
063af4d2 xor       %edx,%edx
063af4d4 div       %rcx
063af4d7 mov       $0x64,%ecx
063af4dc xor       %edx,%edx
063af4de div       %rcx
063af4e1 shl       $1,%rdx
063af4e5 mov       %rdx,0x130(%rsp)
063af4ed mov       0x140(%rsp),%rax
063af4f5 mov       0x130(%rsp),%rcx
063af4fd mov       %rcx,0x310(%rsp)
063af505 shr       $0,%rax
063af509 mov       $0x64,%ecx
063af50e xor       %edx,%edx
063af510 div       %rcx
063af513 shl       $1,%rdx
063af517 mov       %rdx,0x128(%rsp)
063af51f mov       0x268(%rsp),%rax
063af527 mov       0x128(%rsp),%rcx
063af52f mov       %rcx,0x318(%rsp)
063af537 mov       (%rax),%rax
063af53a sub       $8,%rax
063af53e mov       %rax,0x120(%rsp)
063af546 seto      %al
063af549 test      $1,%al
063af54b jne       0x0000`0000`063A`F59D
063af54d mov       0x148(%rsp),%rcx
063af555 mov       0x260(%rsp),%rax
063af55d mov       0x268(%rsp),%rdx
063af565 mov       0x120(%rsp),%r8
063af56d mov       %r8,(%rdx)
063af570 mov       %rax,0x3E8(%rsp)
063af578 mov       %rcx,0x3F0(%rsp)
063af580 add       %rcx,%rax
063af583 mov       %rax,0x3F8(%rsp)
063af58b mov       0x3F8(%rsp),%rax
063af593 mov       %rax,0x118(%rsp)
063af59b jmp       0x0000`0000`063A`F5B7
063af59d lea       0x63C`CA20,%rcx
063af5a4 lea       0x63C`CC88,%r8
063af5ab mov       $0x21,%edx
063af5b0 call      0x0000`0000`063B`2030
063af5b5 ud2
063af5b7 mov       0x268(%rsp),%rax
063af5bf mov       (%rax),%rax
063af5c2 add       $0,%rax
063af5c6 mov       %rax,0x110(%rsp)
063af5ce seto      %al
063af5d1 test      $1,%al
063af5d3 jne       0x0000`0000`063A`F612
063af5d5 mov       0x110(%rsp),%rcx
063af5dd mov       0x278(%rsp),%rax
063af5e5 mov       %rax,0x580(%rsp)
063af5ed mov       %rcx,0x588(%rsp)
063af5f5 add       %rcx,%rax
063af5f8 mov       %rax,0x590(%rsp)
063af600 mov       0x590(%rsp),%rax
063af608 mov       %rax,0x108(%rsp)
063af610 jmp       0x0000`0000`063A`F62C
063af612 lea       0x63C`CBC0,%rcx
063af619 lea       0x63C`CCA0,%r8
063af620 mov       $0x1C,%edx
063af625 call      0x0000`0000`063B`2030
063af62a ud2
063af62c mov       0x108(%rsp),%rdx
063af634 mov       0x118(%rsp),%rcx
063af63c mov       $2,%r8d
063af642 call      0x0000`0000`063C`2510
063af647 mov       0x138(%rsp),%rcx
063af64f mov       0x260(%rsp),%rax
063af657 mov       %rax,0x3D0(%rsp)
063af65f mov       %rcx,0x3D8(%rsp)
063af667 add       %rcx,%rax
063af66a mov       %rax,0x3E0(%rsp)
063af672 mov       0x3E0(%rsp),%rax
063af67a mov       %rax,0x100(%rsp)
063af682 mov       0x268(%rsp),%rax
063af68a mov       (%rax),%rax
063af68d add       $2,%rax
063af691 mov       %rax,0xF8(%rsp)
063af699 seto      %al
063af69c test      $1,%al
063af69e jne       0x0000`0000`063A`F6DD
063af6a0 mov       0xF8(%rsp),%rcx
063af6a8 mov       0x278(%rsp),%rax
063af6b0 mov       %rax,0x568(%rsp)
063af6b8 mov       %rcx,0x570(%rsp)
063af6c0 add       %rcx,%rax
063af6c3 mov       %rax,0x578(%rsp)
063af6cb mov       0x578(%rsp),%rax
063af6d3 mov       %rax,0xF0(%rsp)
063af6db jmp       0x0000`0000`063A`F6F7
063af6dd lea       0x63C`CBC0,%rcx
063af6e4 lea       0x63C`CCB8,%r8
063af6eb mov       $0x1C,%edx
063af6f0 call      0x0000`0000`063B`2030
063af6f5 ud2
063af6f7 mov       0xF0(%rsp),%rdx
063af6ff mov       0x100(%rsp),%rcx
063af707 mov       $2,%r8d
063af70d call      0x0000`0000`063C`2510
063af712 mov       0x130(%rsp),%rcx
063af71a mov       0x260(%rsp),%rax
063af722 mov       %rax,0x3B8(%rsp)
063af72a mov       %rcx,0x3C0(%rsp)
063af732 add       %rcx,%rax
063af735 mov       %rax,0x3C8(%rsp)
063af73d mov       0x3C8(%rsp),%rax
063af745 mov       %rax,0xE8(%rsp)
063af74d mov       0x268(%rsp),%rax
063af755 mov       (%rax),%rax
063af758 add       $4,%rax
063af75c mov       %rax,0xE0(%rsp)
063af764 seto      %al
063af767 test      $1,%al
063af769 jne       0x0000`0000`063A`F7A8
063af76b mov       0xE0(%rsp),%rcx
063af773 mov       0x278(%rsp),%rax
063af77b mov       %rax,0x550(%rsp)
063af783 mov       %rcx,0x558(%rsp)
063af78b add       %rcx,%rax
063af78e mov       %rax,0x560(%rsp)
063af796 mov       0x560(%rsp),%rax
063af79e mov       %rax,0xD8(%rsp)
063af7a6 jmp       0x0000`0000`063A`F7C2
063af7a8 lea       0x63C`CBC0,%rcx
063af7af lea       0x63C`CCD0,%r8
063af7b6 mov       $0x1C,%edx
063af7bb call      0x0000`0000`063B`2030
063af7c0 ud2
063af7c2 mov       0xD8(%rsp),%rdx
063af7ca mov       0xE8(%rsp),%rcx
063af7d2 mov       $2,%r8d
063af7d8 call      0x0000`0000`063C`2510
063af7dd mov       0x128(%rsp),%rcx
063af7e5 mov       0x260(%rsp),%rax
063af7ed mov       %rax,0x3A0(%rsp)
063af7f5 mov       %rcx,0x3A8(%rsp)
063af7fd add       %rcx,%rax
063af800 mov       %rax,0x3B0(%rsp)
063af808 mov       0x3B0(%rsp),%rax
063af810 mov       %rax,0xD0(%rsp)
063af818 mov       0x268(%rsp),%rax
063af820 mov       (%rax),%rax
063af823 add       $6,%rax
063af827 mov       %rax,0xC8(%rsp)
063af82f seto      %al
063af832 test      $1,%al
063af834 jne       0x0000`0000`063A`F873
063af836 mov       0xC8(%rsp),%rcx
063af83e mov       0x278(%rsp),%rax
063af846 mov       %rax,0x538(%rsp)
063af84e mov       %rcx,0x540(%rsp)
063af856 add       %rcx,%rax
063af859 mov       %rax,0x548(%rsp)
063af861 mov       0x548(%rsp),%rax
063af869 mov       %rax,0xC0(%rsp)
063af871 jmp       0x0000`0000`063A`F88D
063af873 lea       0x63C`CBC0,%rcx
063af87a lea       0x63C`CCE8,%r8
063af881 mov       $0x1C,%edx
063af886 call      0x0000`0000`063B`2030
063af88b ud2
063af88d mov       0xC0(%rsp),%rdx
063af895 mov       0xD0(%rsp),%rcx
063af89d mov       $2,%r8d
063af8a3 call      0x0000`0000`063C`2510
063af8a8 jmp       0x0000`0000`063A`F3F1
063af8ad mov       0x288(%rsp),%eax
063af8b4 mov       %ax,0x28E(%rsp)
063af8bc cmpw      $0x64,0x28E(%rsp)
063af8c5 jae       0x0000`0000`063A`FB4F
063af8cb jmp       0x0000`0000`063A`FB3B
063af8d0 mov       0x288(%rsp),%eax
063af8d7 mov       $0x2710,%ecx
063af8dc xor       %edx,%edx
063af8de div       %ecx
063af8e0 mov       %edx,0xB8(%rsp)
063af8e7 mov       %edx,0x320(%rsp)
063af8ee mov       0x288(%rsp),%eax
063af8f5 mov       $0x2710,%ecx
063af8fa xor       %edx,%edx
063af8fc div       %ecx
063af8fe mov       %eax,%ecx
063af900 mov       0xB8(%rsp),%eax
063af907 mov       %ecx,0x288(%rsp)
063af90e mov       $0x64,%ecx
063af913 xor       %edx,%edx
063af915 div       %ecx
063af917 shl       $1,%eax
063af91a mov       %eax,0xBC(%rsp)
063af921 mov       0xB8(%rsp),%eax
063af928 mov       0xBC(%rsp),%ecx
063af92f mov       %ecx,0x324(%rsp)
063af936 mov       $0x64,%ecx
063af93b xor       %edx,%edx
063af93d div       %ecx
063af93f shl       $1,%edx
063af942 mov       %edx,0xB4(%rsp)
063af949 mov       0x268(%rsp),%rax
063af951 mov       0xB4(%rsp),%ecx
063af958 mov       %ecx,0x328(%rsp)
063af95f mov       (%rax),%rax
063af962 sub       $4,%rax
063af966 mov       %rax,0xA8(%rsp)
063af96e seto      %al
063af971 test      $1,%al
063af973 jne       0x0000`0000`063A`F9C6
063af975 mov       0x260(%rsp),%rax
063af97d mov       0xBC(%rsp),%ecx
063af984 mov       0x268(%rsp),%rdx
063af98c mov       0xA8(%rsp),%r8
063af994 mov       %r8,(%rdx)
063af997 mov       %ecx,%ecx
063af999 mov       %rax,0x388(%rsp)
063af9a1 mov       %rcx,0x390(%rsp)
063af9a9 add       %rcx,%rax
063af9ac mov       %rax,0x398(%rsp)
063af9b4 mov       0x398(%rsp),%rax
063af9bc mov       %rax,0xA0(%rsp)
063af9c4 jmp       0x0000`0000`063A`F9E0
063af9c6 lea       0x63C`CA20,%rcx
063af9cd lea       0x63C`CD00,%r8
063af9d4 mov       $0x21,%edx
063af9d9 call      0x0000`0000`063B`2030
063af9de ud2
063af9e0 mov       0x268(%rsp),%rax
063af9e8 mov       (%rax),%rax
063af9eb add       $0,%rax
063af9ef mov       %rax,0x98(%rsp)
063af9f7 seto      %al
063af9fa test      $1,%al
063af9fc jne       0x0000`0000`063A`FA3B
063af9fe mov       0x98(%rsp),%rcx
063afa06 mov       0x278(%rsp),%rax
063afa0e mov       %rax,0x520(%rsp)
063afa16 mov       %rcx,0x528(%rsp)
063afa1e add       %rcx,%rax
063afa21 mov       %rax,0x530(%rsp)
063afa29 mov       0x530(%rsp),%rax
063afa31 mov       %rax,0x90(%rsp)
063afa39 jmp       0x0000`0000`063A`FA55
063afa3b lea       0x63C`CBC0,%rcx
063afa42 lea       0x63C`CD18,%r8
063afa49 mov       $0x1C,%edx
063afa4e call      0x0000`0000`063B`2030
063afa53 ud2
063afa55 mov       0x90(%rsp),%rdx
063afa5d mov       0xA0(%rsp),%rcx
063afa65 mov       $2,%r8d
063afa6b call      0x0000`0000`063C`2510
063afa70 mov       0x260(%rsp),%rax
063afa78 mov       0xB4(%rsp),%ecx
063afa7f mov       %ecx,%ecx
063afa81 mov       %rax,0x370(%rsp)
063afa89 mov       %rcx,0x378(%rsp)
063afa91 add       %rcx,%rax
063afa94 mov       %rax,0x380(%rsp)
063afa9c mov       0x380(%rsp),%rax
063afaa4 mov       %rax,0x88(%rsp)
063afaac mov       0x268(%rsp),%rax
063afab4 mov       (%rax),%rax
063afab7 add       $2,%rax
063afabb mov       %rax,0x80(%rsp)
063afac3 seto      %al
063afac6 test      $1,%al
063afac8 jne       0x0000`0000`063A`FB04
063afaca mov       0x80(%rsp),%rcx
063afad2 mov       0x278(%rsp),%rax
063afada mov       %rax,0x508(%rsp)
063afae2 mov       %rcx,0x510(%rsp)
063afaea add       %rcx,%rax
063afaed mov       %rax,0x518(%rsp)
063afaf5 mov       0x518(%rsp),%rax
063afafd mov       %rax,0x78(%rsp)
063afb02 jmp       0x0000`0000`063A`FB1E
063afb04 lea       0x63C`CBC0,%rcx
063afb0b lea       0x63C`CD30,%r8
063afb12 mov       $0x1C,%edx
063afb17 call      0x0000`0000`063B`2030
063afb1c ud2
063afb1e mov       0x78(%rsp),%rdx
063afb23 mov       0x88(%rsp),%rcx
063afb2b mov       $2,%r8d
063afb31 call      0x0000`0000`063C`2510
063afb36 jmp       0x0000`0000`063A`F8AD
063afb3b cmpw      $0xA,0x28E(%rsp)
063afb44 jb        0x0000`0000`063A`FC7C
063afb4a jmp       0x0000`0000`063A`FC66
063afb4f mov       0x28E(%rsp),%ax
063afb57 mov       $0x64,%cx
063afb5b xor       %edx,%edx
063afb5d div       %cx
063afb60 shl       $1,%dx
063afb64 mov       %dx,0x76(%rsp)
063afb69 mov       0x76(%rsp),%ax
063afb6e mov       %ax,0x32C(%rsp)
063afb76 mov       0x28E(%rsp),%ax
063afb7e mov       $0x64,%cx
063afb82 xor       %edx,%edx
063afb84 div       %cx
063afb87 mov       %ax,%cx
063afb8a mov       0x268(%rsp),%rax
063afb92 mov       %cx,0x28E(%rsp)
063afb9a mov       (%rax),%rax
063afb9d sub       $2,%rax
063afba1 mov       %rax,0x68(%rsp)
063afba6 seto      %al
063afba9 test      $1,%al
063afbab jne       0x0000`0000`063A`FBF7
063afbad mov       0x260(%rsp),%rax
063afbb5 mov       0x76(%rsp),%cx
063afbba mov       0x268(%rsp),%rdx
063afbc2 mov       0x68(%rsp),%r8
063afbc7 mov       %r8,(%rdx)
063afbca movzwl    %cx,%ecx
063afbcd mov       %rax,0x358(%rsp)
063afbd5 mov       %rcx,0x360(%rsp)
063afbdd add       %rcx,%rax
063afbe0 mov       %rax,0x368(%rsp)
063afbe8 mov       0x368(%rsp),%rax
063afbf0 mov       %rax,0x60(%rsp)
063afbf5 jmp       0x0000`0000`063A`FC11
063afbf7 lea       0x63C`CA20,%rcx
063afbfe lea       0x63C`CD48,%r8
063afc05 mov       $0x21,%edx
063afc0a call      0x0000`0000`063B`2030
063afc0f ud2
063afc11 mov       0x278(%rsp),%rax
063afc19 mov       0x268(%rsp),%rcx
063afc21 mov       (%rcx),%rcx
063afc24 mov       %rax,0x4F0(%rsp)
063afc2c mov       %rcx,0x4F8(%rsp)
063afc34 add       %rcx,%rax
063afc37 mov       %rax,0x500(%rsp)
063afc3f mov       0x500(%rsp),%rax
063afc47 mov       %rax,0x58(%rsp)
063afc4c mov       0x58(%rsp),%rdx
063afc51 mov       0x60(%rsp),%rcx
063afc56 mov       $2,%r8d
063afc5c call      0x0000`0000`063C`2510
063afc61 jmp       0x0000`0000`063A`FB3B
063afc66 mov       0x28E(%rsp),%ax
063afc6e shl       $1,%ax
063afc72 mov       %ax,0x56(%rsp)
063afc77 jmp       0x0000`0000`063A`FD41
063afc7c mov       0x268(%rsp),%rax
063afc84 mov       (%rax),%rax
063afc87 dec       %rax
063afc8a mov       %rax,0x48(%rsp)
063afc8f seto      %al
063afc92 test      $1,%al
063afc94 jne       0x0000`0000`063A`FCBD
063afc96 mov       0x268(%rsp),%rax
063afc9e mov       0x48(%rsp),%rcx
063afca3 mov       %rcx,(%rax)
063afca6 mov       0x28E(%rsp),%ax
063afcae add       $0x30,%al
063afcb0 mov       %al,0x47(%rsp)
063afcb4 setb      %al
063afcb7 test      $1,%al
063afcb9 jne       0x0000`0000`063A`FD14
063afcbb jmp       0x0000`0000`063A`FCD7
063afcbd lea       0x63C`CA20,%rcx
063afcc4 lea       0x63C`CD60,%r8
063afccb mov       $0x21,%edx
063afcd0 call      0x0000`0000`063B`2030
063afcd5 ud2
063afcd7 mov       0x278(%rsp),%rax
063afcdf mov       0x268(%rsp),%rcx
063afce7 mov       (%rcx),%rcx
063afcea mov       %rax,0x4D8(%rsp)
063afcf2 mov       %rcx,0x4E0(%rsp)
063afcfa add       %rcx,%rax
063afcfd mov       %rax,0x4E8(%rsp)
063afd05 mov       0x4E8(%rsp),%rax
063afd0d mov       %rax,0x38(%rsp)
063afd12 jmp       0x0000`0000`063A`FD2E
063afd14 lea       0x63C`CBC0,%rcx
063afd1b lea       0x63C`CD78,%r8
063afd22 mov       $0x1C,%edx
063afd27 call      0x0000`0000`063B`2030
063afd2c ud2
063afd2e mov       0x38(%rsp),%rax
063afd33 mov       0x47(%rsp),%cl
063afd37 mov       %cl,(%rax)
063afd39 add       $0x658,%rsp
063afd40 ret
063afd41 mov       0x268(%rsp),%rax
063afd49 mov       0x56(%rsp),%cx
063afd4e mov       %cx,0x32E(%rsp)
063afd56 mov       (%rax),%rax
063afd59 sub       $2,%rax
063afd5d mov       %rax,0x30(%rsp)
063afd62 seto      %al
063afd65 test      $1,%al
063afd67 jne       0x0000`0000`063A`FDB3
063afd69 mov       0x260(%rsp),%rax
063afd71 mov       0x56(%rsp),%cx
063afd76 mov       0x268(%rsp),%rdx
063afd7e mov       0x30(%rsp),%r8
063afd83 mov       %r8,(%rdx)
063afd86 movzwl    %cx,%ecx
063afd89 mov       %rax,0x340(%rsp)
063afd91 mov       %rcx,0x348(%rsp)
063afd99 add       %rcx,%rax
063afd9c mov       %rax,0x350(%rsp)
063afda4 mov       0x350(%rsp),%rax
063afdac mov       %rax,0x28(%rsp)
063afdb1 jmp       0x0000`0000`063A`FDCD
063afdb3 lea       0x63C`CA20,%rcx
063afdba lea       0x63C`CD90,%r8
063afdc1 mov       $0x21,%edx
063afdc6 call      0x0000`0000`063B`2030
063afdcb ud2
063afdcd mov       0x278(%rsp),%rax
063afdd5 mov       0x268(%rsp),%rcx
063afddd mov       (%rcx),%rcx
063afde0 mov       %rax,0x4C0(%rsp)
063afde8 mov       %rcx,0x4C8(%rsp)
063afdf0 add       %rcx,%rax
063afdf3 mov       %rax,0x4D0(%rsp)
063afdfb mov       0x4D0(%rsp),%rax
063afe03 mov       %rax,0x20(%rsp)
063afe08 mov       0x20(%rsp),%rdx
063afe0d mov       0x28(%rsp),%rcx
063afe12 mov       $2,%r8d
063afe18 call      0x0000`0000`063C`2510
063afe1d jmp       0x0000`0000`063A`FD39

core::fmt::num::impl$0::fmt:
063afe30 sub       $0x38,%rsp
063afe34 mov       %rdx,%r9
063afe37 mov       %rcx,%rax
063afe3a mov       %rax,0x28(%rsp)
063afe3f mov       %r9,0x30(%rsp)
063afe44 mov       (%rax),%rcx
063afe47 mov       8(%rax),%rdx
063afe4b mov       $1,%r8b
063afe4e call      0x0000`0000`063A`FE70
063afe53 mov       %al,0x27(%rsp)
063afe57 mov       0x27(%rsp),%al
063afe5b and       $1,%al
063afe5d movzbl    %al,%eax
063afe60 add       $0x38,%rsp
063afe64 ret

core::fmt::num::fmt_u128:
063afe70 sub       $0x258,%rsp
063afe77 mov       %r9,0xF8(%rsp)
063afe7f mov       %rdx,0x100(%rsp)
063afe87 mov       %rcx,0x108(%rsp)
063afe8f mov       %r8b,0x116(%rsp)
063afe97 mov       %rcx,0x148(%rsp)
063afe9f mov       %rdx,0x150(%rsp)
063afea7 and       $1,%r8b
063afeab mov       %r8b,0x15F(%rsp)
063afeb3 mov       %r9,0x160(%rsp)
063afebb mov       0x1C7(%rsp),%al
063afec2 mov       %al,0x117(%rsp)
063afec9 mov       0x100(%rsp),%rdx
063afed1 mov       0x108(%rsp),%rcx
063afed9 mov       0x117(%rsp),%al
063afee0 movzbl    %al,%eax
063afee3 movabs    $0x101`0101`0101`0101,%r8
063afeed imul      %r8,%rax
063afef1 mov       %rax,0x137(%rsp)
063afef9 mov       %rax,0x130(%rsp)
063aff01 mov       %rax,0x128(%rsp)
063aff09 mov       %rax,0x120(%rsp)
063aff11 mov       %rax,0x118(%rsp)
063aff19 movq      $0x27,0x140(%rsp)
063aff25 call      0x0000`0000`063B`0440
063aff2a mov       %rcx,0xE0(%rsp)
063aff32 mov       %rdx,0xE8(%rsp)
063aff3a mov       %rax,0xF0(%rsp)
063aff42 mov       0xE0(%rsp),%rcx
063aff4a mov       0xE8(%rsp),%rax
063aff52 mov       0xF0(%rsp),%rdx
063aff5a mov       %rdx,0x168(%rsp)
063aff62 mov       %rax,0x170(%rsp)
063aff6a mov       %rcx,0x178(%rsp)
063aff72 lea       0x118(%rsp),%rdx
063aff7a lea       0x140(%rsp),%r8
063aff82 call      0x0000`0000`063A`EA50
063aff87 mov       0xE8(%rsp),%rcx
063aff8f mov       0xF0(%rsp),%rax
063aff97 or        %rcx,%rax
063aff9a jne       0x0000`0000`063A`FFD1
063aff9c jmp       0x0000`0000`063A`FF9E
063aff9e lea       0x118(%rsp),%rcx
063affa6 mov       %rcx,0x1C8(%rsp)
063affae movq      $0x27,0x1D0(%rsp)
063affba mov       $0x27,%edx
063affbf call      0x0000`0000`063C`8900
063affc4 mov       %rax,0xD8(%rsp)
063affcc jmp       0x0000`0000`063B`0339
063affd1 mov       $0x27,%eax
063affd6 sub       $0x13,%rax
063affda mov       %rax,0xD0(%rsp)
063affe2 setb      %al
063affe5 test      $1,%al
063affe7 jne       0x0000`0000`063B`0029
063affe9 mov       0xD0(%rsp),%rax
063afff1 mov       %rax,0x180(%rsp)
063afff9 lea       0x118(%rsp),%rcx
063b0001 mov       %rcx,0x1E8(%rsp)
063b0009 movq      $0x27,0x1F0(%rsp)
063b0015 mov       $0x27,%edx
063b001a call      0x0000`0000`063C`8900
063b001f mov       %rax,0xC8(%rsp)
063b0027 jmp       0x0000`0000`063B`0043
063b0029 lea       0x63C`CA20,%rcx
063b0030 lea       0x63C`CDA8,%r8
063b0037 mov       $0x21,%edx
063b003c call      0x0000`0000`063B`2030
063b0041 ud2
063b0043 mov       0xD0(%rsp),%rcx
063b004b mov       0xC8(%rsp),%rax
063b0053 mov       %rax,0x240(%rsp)
063b005b mov       %rcx,0x248(%rsp)
063b0063 add       %rcx,%rax
063b0066 mov       %rax,0x250(%rsp)
063b006e mov       0x250(%rsp),%rax
063b0076 mov       %rax,0xC0(%rsp)
063b007e mov       0xD0(%rsp),%rcx
063b0086 mov       0x140(%rsp),%rax
063b008e sub       %rcx,%rax
063b0091 mov       %rax,0xB8(%rsp)
063b0099 seto      %al
063b009c test      $1,%al
063b009e jne       0x0000`0000`063B`00BC
063b00a0 mov       0xB8(%rsp),%r8
063b00a8 mov       0xC0(%rsp),%rcx
063b00b0 mov       $0x30,%edx
063b00b5 call      0x0000`0000`063C`2610
063b00ba jmp       0x0000`0000`063B`00D6
063b00bc lea       0x63C`CA20,%rcx
063b00c3 lea       0x63C`CDC0,%r8
063b00ca mov       $0x21,%edx
063b00cf call      0x0000`0000`063B`2030
063b00d4 ud2
063b00d6 mov       0xE8(%rsp),%rdx
063b00de mov       0xF0(%rsp),%rcx
063b00e6 mov       0xD0(%rsp),%rax
063b00ee mov       %rax,0x140(%rsp)
063b00f6 call      0x0000`0000`063B`0440
063b00fb mov       %rcx,0xA0(%rsp)
063b0103 mov       %rdx,0xA8(%rsp)
063b010b mov       %rax,0xB0(%rsp)
063b0113 mov       0xA0(%rsp),%rcx
063b011b mov       0xA8(%rsp),%rax
063b0123 mov       0xB0(%rsp),%rdx
063b012b mov       %rdx,0x188(%rsp)
063b0133 mov       %rax,0x190(%rsp)
063b013b mov       %rcx,0x198(%rsp)
063b0143 lea       0x118(%rsp),%rdx
063b014b lea       0x140(%rsp),%r8
063b0153 call      0x0000`0000`063A`EA50
063b0158 mov       0xA8(%rsp),%rcx
063b0160 mov       0xB0(%rsp),%rax
063b0168 or        %rcx,%rax
063b016b je        0x0000`0000`063A`FF9E
063b0171 jmp       0x0000`0000`063B`0173
063b0173 mov       $0x27,%eax
063b0178 sub       $0x26,%rax
063b017c mov       %rax,0x98(%rsp)
063b0184 setb      %al
063b0187 test      $1,%al
063b0189 jne       0x0000`0000`063B`01D3
063b018b mov       0x98(%rsp),%rax
063b0193 mov       %rax,0x1A0(%rsp)
063b019b lea       0x118(%rsp),%rcx
063b01a3 mov       %rcx,0x1D8(%rsp)
063b01ab movq      $0x27,0x1E0(%rsp)
063b01b7 mov       $0x27,%edx
063b01bc call      0x0000`0000`063C`8900
063b01c1 mov       %rax,0x90(%rsp)
063b01c9 mov       %rax,0x1A8(%rsp)
063b01d1 jmp       0x0000`0000`063B`01ED
063b01d3 lea       0x63C`CA20,%rcx
063b01da lea       0x63C`CDD8,%r8
063b01e1 mov       $0x21,%edx
063b01e6 call      0x0000`0000`063B`2030
063b01eb ud2
063b01ed mov       0x98(%rsp),%rcx
063b01f5 mov       0x90(%rsp),%rax
063b01fd mov       %rax,0x228(%rsp)
063b0205 mov       %rcx,0x230(%rsp)
063b020d add       %rcx,%rax
063b0210 mov       %rax,0x238(%rsp)
063b0218 mov       0x238(%rsp),%rax
063b0220 mov       %rax,0x88(%rsp)
063b0228 mov       0x98(%rsp),%rcx
063b0230 mov       0x140(%rsp),%rax
063b0238 sub       %rcx,%rax
063b023b mov       %rax,0x80(%rsp)
063b0243 seto      %al
063b0246 test      $1,%al
063b0248 jne       0x0000`0000`063B`0266
063b024a mov       0x80(%rsp),%r8
063b0252 mov       0x88(%rsp),%rcx
063b025a mov       $0x30,%edx
063b025f call      0x0000`0000`063C`2610
063b0264 jmp       0x0000`0000`063B`0280
063b0266 lea       0x63C`CA20,%rcx
063b026d lea       0x63C`CDF0,%r8
063b0274 mov       $0x21,%edx
063b0279 call      0x0000`0000`063B`2030
063b027e ud2
063b0280 mov       0x98(%rsp),%rax
063b0288 dec       %rax
063b028b mov       %rax,0x78(%rsp)
063b0290 seto      %al
063b0293 test      $1,%al
063b0295 jne       0x0000`0000`063B`02BB
063b0297 mov       0xB0(%rsp),%rax
063b029f mov       0x78(%rsp),%rcx
063b02a4 mov       %rcx,0x140(%rsp)
063b02ac add       $0x30,%al
063b02ae mov       %al,0x77(%rsp)
063b02b2 setb      %al
063b02b5 test      $1,%al
063b02b7 jne       0x0000`0000`063B`030F
063b02b9 jmp       0x0000`0000`063B`02D5
063b02bb lea       0x63C`CA20,%rcx
063b02c2 lea       0x63C`CE08,%r8
063b02c9 mov       $0x21,%edx
063b02ce call      0x0000`0000`063B`2030
063b02d3 ud2
063b02d5 mov       0x90(%rsp),%rax
063b02dd mov       0x140(%rsp),%rcx
063b02e5 mov       %rax,0x210(%rsp)
063b02ed mov       %rcx,0x218(%rsp)
063b02f5 add       %rcx,%rax
063b02f8 mov       %rax,0x220(%rsp)
063b0300 mov       0x220(%rsp),%rax
063b0308 mov       %rax,0x68(%rsp)
063b030d jmp       0x0000`0000`063B`0329
063b030f lea       0x63C`CBC0,%rcx
063b0316 lea       0x63C`CE20,%r8
063b031d mov       $0x1C,%edx
063b0322 call      0x0000`0000`063B`2030
063b0327 ud2
063b0329 mov       0x68(%rsp),%rax
063b032e mov       0x77(%rsp),%cl
063b0332 mov       %cl,(%rax)
063b0334 jmp       0x0000`0000`063A`FF9E
063b0339 mov       0xD8(%rsp),%rax
063b0341 mov       0x140(%rsp),%rcx
063b0349 mov       %rax,0x1F8(%rsp)
063b0351 mov       %rcx,0x200(%rsp)
063b0359 add       %rcx,%rax
063b035c mov       %rax,0x208(%rsp)
063b0364 mov       0x208(%rsp),%rax
063b036c mov       %rax,0x60(%rsp)
063b0371 mov       $0x27,%eax
063b0376 sub       0x140(%rsp),%rax
063b037e mov       %rax,0x58(%rsp)
063b0383 setb      %al
063b0386 test      $1,%al
063b0388 jne       0x0000`0000`063B`03A5
063b038a mov       0x58(%rsp),%rdx
063b038f mov       0x60(%rsp),%rcx
063b0394 call      0x0000`0000`063B`A940
063b0399 mov       %rax,0x48(%rsp)
063b039e mov       %rdx,0x50(%rsp)
063b03a3 jmp       0x0000`0000`063B`03BF
063b03a5 lea       0x63C`CA20,%rcx
063b03ac lea       0x63C`CE38,%r8
063b03b3 mov       $0x21,%edx
063b03b8 call      0x0000`0000`063B`2030
063b03bd ud2
063b03bf mov       0x50(%rsp),%rdx
063b03c4 mov       0x48(%rsp),%rcx
063b03c9 call      0x0000`0000`063B`6370
063b03ce mov       %rax,0x38(%rsp)
063b03d3 mov       %rdx,0x40(%rsp)
063b03d8 mov       %rax,0x1B0(%rsp)
063b03e0 mov       %rdx,0x1B8(%rsp)
063b03e8 mov       0xF8(%rsp),%rcx
063b03f0 mov       0x116(%rsp),%dl
063b03f7 mov       0x38(%rsp),%r8
063b03fc mov       0x40(%rsp),%r9
063b0401 mov       %rsp,%rax
063b0404 mov       %r9,0x28(%rax)
063b0408 mov       %r8,0x20(%rax)
063b040c and       $1,%dl
063b040f lea       0x63C`CE50,%r8
063b0416 xor       %eax,%eax
063b0418 mov       %eax,%r9d
063b041b call      0x0000`0000`063B`4D10
063b0420 mov       %al,0x37(%rsp)
063b0424 mov       0x37(%rsp),%al
063b0428 and       $1,%al
063b042a movzbl    %al,%eax
063b042d add       $0x258,%rsp
063b0434 ret

core::fmt::num::udiv_1e19:
063b0440 sub       $0xC8,%rsp
063b0447 mov       %rdx,0x78(%rsp)
063b044c mov       %rcx,0x80(%rsp)
063b0454 mov       %rcx,0xB0(%rsp)
063b045c mov       %rdx,0xB8(%rsp)
063b0464 sub       $0x8`0000,%rdx
063b046b jb        0x0000`0000`063B`04A4
063b046d jmp       0x0000`0000`063B`046F
063b046f mov       0x78(%rsp),%rdx
063b0474 mov       0x80(%rsp),%rcx
063b047c movabs    $0x9598`F4F1`E836`1973,%r8
063b0486 movabs    $0x760F`253E`DB4A`B0D2,%r9
063b0490 call      0x0000`0000`063B`0640
063b0495 mov       %rdx,0x68(%rsp)
063b049a mov       %rax,0x70(%rsp)
063b049f jmp       0x0000`0000`063B`0541
063b04a4 mov       0x78(%rsp),%rax
063b04a9 mov       0x80(%rsp),%rdx
063b04b1 mov       %rax,%rcx
063b04b4 shld      $0x2D,%rdx,%rcx
063b04b9 mov       %rcx,0x60(%rsp)
063b04be shr       $0x13,%rax
063b04c2 mov       0x60(%rsp),%rax
063b04c7 movabs    $0x760F`253E`DB4A`B0D3,%rcx
063b04d1 mul       %rcx
063b04d4 shr       $0x2B,%rdx
063b04d8 mov       %rdx,0xA0(%rsp)
063b04e0 movq      $0,0xA8(%rsp)
063b04ec mov       0xA0(%rsp),%rax
063b04f4 mov       %rax,0x40(%rsp)
063b04f9 mov       0xA8(%rsp),%rax
063b0501 movabs    $0x8AC7`2304`89E8`0000,%rcx
063b050b mul       %rcx
063b050e mov       %rax,%r8
063b0511 mov       0x40(%rsp),%rax
063b0516 seto      %dl
063b0519 mov       %dl,0x4F(%rsp)
063b051d mul       %rcx
063b0520 mov       %rax,%rcx
063b0523 mov       0x4F(%rsp),%al
063b0527 add       %r8,%rdx
063b052a mov       %rdx,0x50(%rsp)
063b052f setb      %r8b
063b0533 or        %r8b,%al
063b0536 mov       %rcx,0x58(%rsp)
063b053b test      $1,%al
063b053d jne       0x0000`0000`063B`05AB
063b053f jmp       0x0000`0000`063B`0580
063b0541 mov       0x68(%rsp),%rax
063b0546 mov       0x70(%rsp),%rdx
063b054b mov       %rax,%rcx
063b054e shld      $2,%rdx,%rcx
063b0553 mov       %rcx,0x30(%rsp)
063b0558 shr       $0x3E,%rax
063b055c mov       %rax,0x38(%rsp)
063b0561 mov       0x38(%rsp),%rax
063b0566 mov       0x30(%rsp),%rcx
063b056b mov       %rcx,0xA0(%rsp)
063b0573 mov       %rax,0xA8(%rsp)
063b057b jmp       0x0000`0000`063B`04EC
063b0580 mov       0x50(%rsp),%rax
063b0585 mov       0x78(%rsp),%rcx
063b058a mov       0x58(%rsp),%r8
063b058f mov       0x80(%rsp),%rdx
063b0597 sub       %r8,%rdx
063b059a mov       %rdx,0x28(%rsp)
063b059f sbb       %rax,%rcx
063b05a2 setb      %al
063b05a5 test      $1,%al
063b05a7 jne       0x0000`0000`063B`061A
063b05a9 jmp       0x0000`0000`063B`05C5
063b05ab lea       0x63C`CE70,%rcx
063b05b2 lea       0x63C`CE50,%r8
063b05b9 mov       $0x21,%edx
063b05be call      0x0000`0000`063B`2030
063b05c3 ud2
063b05c5 mov       0x28(%rsp),%rax
063b05ca mov       %rax,0xC0(%rsp)
063b05d2 mov       0xA0(%rsp),%rcx
063b05da mov       0xA8(%rsp),%rdx
063b05e2 mov       %rdx,0x90(%rsp)
063b05ea mov       %rcx,0x88(%rsp)
063b05f2 mov       %rax,0x98(%rsp)
063b05fa mov       0x88(%rsp),%rax
063b0602 mov       0x90(%rsp),%rdx
063b060a mov       0x98(%rsp),%rcx
063b0612 add       $0xC8,%rsp
063b0619 ret
063b061a lea       0x63C`CA20,%rcx
063b0621 lea       0x63C`CE98,%r8
063b0628 mov       $0x21,%edx
063b062d call      0x0000`0000`063B`2030
063b0632 ud2

core::fmt::num::u128_mulhi:
063b0640 sub       $0x198,%rsp
063b0647 mov       %r9,0xF0(%rsp)
063b064f mov       %r8,0xF8(%rsp)
063b0657 mov       %rcx,0x110(%rsp)
063b065f mov       %rdx,0x118(%rsp)
063b0667 mov       %r9,0x128(%rsp)
063b066f mov       %r8,0x120(%rsp)
063b0677 mov       %rcx,%rax
063b067a mov       %rax,0x100(%rsp)
063b0682 mov       %rcx,0x130(%rsp)
063b068a xor       %eax,%eax
063b068c mov       %rdx,0x108(%rsp)
063b0694 mov       0xF0(%rsp),%rax
063b069c mov       0xF8(%rsp),%rcx
063b06a4 mov       0x108(%rsp),%rdx
063b06ac mov       %rdx,%r8
063b06af mov       %r8,0xD8(%rsp)
063b06b7 mov       %rdx,0x138(%rsp)
063b06bf mov       %rcx,%rdx
063b06c2 mov       %rdx,0xE0(%rsp)
063b06ca mov       %rcx,0x140(%rsp)
063b06d2 xor       %ecx,%ecx
063b06d4 mov       %rax,0xE8(%rsp)
063b06dc mov       0xE0(%rsp),%rcx
063b06e4 mov       0x100(%rsp),%rax
063b06ec mov       0xE8(%rsp),%rdx
063b06f4 mov       %rdx,%r8
063b06f7 mov       %r8,0xC8(%rsp)
063b06ff mov       %rdx,0x148(%rsp)
063b0707 mul       %rcx
063b070a mov       %rax,%rcx
063b070d xor       %eax,%eax
063b070f mov       %rdx,0xD0(%rsp)
063b0717 test      $1,%al
063b0719 jne       0x0000`0000`063B`0737
063b071b mov       0xD0(%rsp),%rax
063b0723 xor       %ecx,%ecx
063b0725 mov       %rcx,0xB8(%rsp)
063b072d mov       %rax,0xC0(%rsp)
063b0735 jmp       0x0000`0000`063B`0751
063b0737 lea       0x63C`CE70,%rcx
063b073e lea       0x63C`CEB0,%r8
063b0745 mov       $0x21,%edx
063b074a call      0x0000`0000`063B`2030
063b074f ud2
063b0751 mov       0xC8(%rsp),%rcx
063b0759 mov       0x100(%rsp),%rax
063b0761 mov       0xB8(%rsp),%rdx
063b0769 mov       0xC0(%rsp),%r8
063b0771 mov       %r8,0x150(%rsp)
063b0779 mov       %rdx,0x158(%rsp)
063b0781 mul       %rcx
063b0784 mov       %rax,%rcx
063b0787 xor       %eax,%eax
063b0789 mov       %rdx,0xA8(%rsp)
063b0791 mov       %rcx,0xB0(%rsp)
063b0799 test      $1,%al
063b079b jne       0x0000`0000`063B`07DC
063b079d mov       0xB8(%rsp),%rax
063b07a5 mov       0xA8(%rsp),%rcx
063b07ad mov       0xC0(%rsp),%r8
063b07b5 mov       0xB0(%rsp),%rdx
063b07bd add       %r8,%rdx
063b07c0 mov       %rdx,0x98(%rsp)
063b07c8 adc       %rax,%rcx
063b07cb setb      %al
063b07ce mov       %rcx,0xA0(%rsp)
063b07d6 test      $1,%al
063b07d8 jne       0x0000`0000`063B`082A
063b07da jmp       0x0000`0000`063B`07F6
063b07dc lea       0x63C`CE70,%rcx
063b07e3 lea       0x63C`CEC8,%r8
063b07ea mov       $0x21,%edx
063b07ef call      0x0000`0000`063B`2030
063b07f4 ud2
063b07f6 mov       0xA0(%rsp),%rax
063b07fe mov       0x98(%rsp),%rcx
063b0806 mov       %rcx,0x160(%rsp)
063b080e mov       %rax,0x168(%rsp)
063b0816 xor       %ecx,%ecx
063b0818 mov       %rcx,0x88(%rsp)
063b0820 mov       %rax,0x90(%rsp)
063b0828 jmp       0x0000`0000`063B`0844
063b082a lea       0x63C`CBC0,%rcx
063b0831 lea       0x63C`CEC8,%r8
063b0838 mov       $0x1C,%edx
063b083d call      0x0000`0000`063B`2030
063b0842 ud2
063b0844 mov       0xE0(%rsp),%rcx
063b084c mov       0xD8(%rsp),%rax
063b0854 mov       0x98(%rsp),%rdx
063b085c mov       0x88(%rsp),%r8
063b0864 mov       0x90(%rsp),%r9
063b086c mov       %r9,0x170(%rsp)
063b0874 mov       %r8,0x178(%rsp)
063b087c mov       %rdx,%r8
063b087f mov       %r8,0x70(%rsp)
063b0884 mov       %rdx,0x180(%rsp)
063b088c mul       %rcx
063b088f mov       %rax,%rcx
063b0892 xor       %eax,%eax
063b0894 mov       %rdx,0x78(%rsp)
063b0899 mov       %rcx,0x80(%rsp)
063b08a1 test      $1,%al
063b08a3 jne       0x0000`0000`063B`08CC
063b08a5 mov       0x78(%rsp),%rcx
063b08aa mov       0x70(%rsp),%rax
063b08af mov       0x80(%rsp),%rdx
063b08b7 add       %rax,%rdx
063b08ba adc       $0,%rcx
063b08be setb      %al
063b08c1 mov       %rcx,0x68(%rsp)
063b08c6 test      $1,%al
063b08c8 jne       0x0000`0000`063B`08F9
063b08ca jmp       0x0000`0000`063B`08E6
063b08cc lea       0x63C`CE70,%rcx
063b08d3 lea       0x63C`CEE0,%r8
063b08da mov       $0x21,%edx
063b08df call      0x0000`0000`063B`2030
063b08e4 ud2
063b08e6 mov       0x68(%rsp),%rax
063b08eb xor       %ecx,%ecx
063b08ed mov       %rcx,0x58(%rsp)
063b08f2 mov       %rax,0x60(%rsp)
063b08f7 jmp       0x0000`0000`063B`0913
063b08f9 lea       0x63C`CBC0,%rcx
063b0900 lea       0x63C`CEF8,%r8
063b0907 mov       $0x1C,%edx
063b090c call      0x0000`0000`063B`2030
063b0911 ud2
063b0913 mov       0xC8(%rsp),%rcx
063b091b mov       0xD8(%rsp),%rax
063b0923 mov       0x58(%rsp),%rdx
063b0928 mov       0x60(%rsp),%r8
063b092d mov       %r8,0x188(%rsp)
063b0935 mov       %rdx,0x190(%rsp)
063b093d mul       %rcx
063b0940 mov       %rax,%rcx
063b0943 xor       %eax,%eax
063b0945 mov       %rdx,0x48(%rsp)
063b094a mov       %rcx,0x50(%rsp)
063b094f test      $1,%al
063b0951 jne       0x0000`0000`063B`0986
063b0953 mov       0x88(%rsp),%rax
063b095b mov       0x48(%rsp),%rcx
063b0960 mov       0x90(%rsp),%r8
063b0968 mov       0x50(%rsp),%rdx
063b096d add       %r8,%rdx
063b0970 mov       %rdx,0x38(%rsp)
063b0975 adc       %rax,%rcx
063b0978 setb      %al
063b097b mov       %rcx,0x40(%rsp)
063b0980 test      $1,%al
063b0982 jne       0x0000`0000`063B`09CD
063b0984 jmp       0x0000`0000`063B`09A0
063b0986 lea       0x63C`CE70,%rcx
063b098d lea       0x63C`CF10,%r8
063b0994 mov       $0x21,%edx
063b0999 call      0x0000`0000`063B`2030
063b099e ud2
063b09a0 mov       0x58(%rsp),%rax
063b09a5 mov       0x40(%rsp),%rcx
063b09aa mov       0x60(%rsp),%r8
063b09af mov       0x38(%rsp),%rdx
063b09b4 add       %r8,%rdx
063b09b7 mov       %rdx,0x28(%rsp)
063b09bc adc       %rax,%rcx
063b09bf setb      %al
063b09c2 mov       %rcx,0x30(%rsp)
063b09c7 test      $1,%al
063b09c9 jne       0x0000`0000`063B`09F9
063b09cb jmp       0x0000`0000`063B`09E7
063b09cd lea       0x63C`CBC0,%rcx
063b09d4 lea       0x63C`CF10,%r8
063b09db mov       $0x1C,%edx
063b09e0 call      0x0000`0000`063B`2030
063b09e5 ud2
063b09e7 mov       0x30(%rsp),%rdx
063b09ec mov       0x28(%rsp),%rax
063b09f1 add       $0x198,%rsp
063b09f8 ret
063b09f9 lea       0x63C`CBC0,%rcx
063b0a00 lea       0x63C`CF10,%r8
063b0a07 mov       $0x1C,%edx
063b0a0c call      0x0000`0000`063B`2030
063b0a11 ud2

core::fmt::num::impl$8::to_u64:
063b0a20 push      %rax
063b0a21 mov       %rcx,(%rsp)
063b0a25 movzbl    (%rcx),%eax
063b0a28 pop       %rcx
063b0a29 ret

core::fmt::num::impl$10::zero:
063b0a30 xor       %eax,%eax
063b0a32 ret

core::fmt::num::impl$10::from_u8:
063b0a40 push      %rax
063b0a41 mov       %cl,7(%rsp)
063b0a45 movzbl    %cl,%eax
063b0a48 pop       %rcx
063b0a49 ret

core::fmt::num::impl$10::to_u8:
063b0a50 push      %rax
063b0a51 mov       %rcx,(%rsp)
063b0a55 mov       (%rcx),%eax
063b0a57 pop       %rcx
063b0a58 ret

core::fmt::num::impl$10::to_u64:
063b0a60 push      %rax
063b0a61 mov       %rcx,(%rsp)
063b0a65 mov       (%rcx),%eax
063b0a67 pop       %rcx
063b0a68 ret

core::fmt::num::impl$13::zero:
063b0a70 xor       %eax,%eax
063b0a72 ret

core::fmt::num::impl$13::from_u8:
063b0a80 push      %rax
063b0a81 mov       %cl,7(%rsp)
063b0a85 movzbl    %cl,%eax
063b0a88 pop       %rcx
063b0a89 ret

core::fmt::num::impl$13::to_u8:
063b0a90 push      %rax
063b0a91 mov       %rcx,(%rsp)
063b0a95 mov       (%rcx),%rax
063b0a98 pop       %rcx
063b0a99 ret

core::fmt::num::impl$13::to_u64:
063b0aa0 push      %rax
063b0aa1 mov       %rcx,(%rsp)
063b0aa5 mov       (%rcx),%rax
063b0aa8 pop       %rcx
063b0aa9 ret

core::fmt::num::impl$28::digit:
063b0ab0 sub       $0xB8,%rsp
063b0ab7 mov       %cl,0x5D(%rsp)
063b0abb mov       %cl,0xB5(%rsp)
063b0ac2 xor       %eax,%eax
063b0ac4 cmp       %cl,%al
063b0ac6 jbe       0x0000`0000`063B`0AD4
063b0ac8 mov       0x5D(%rsp),%cl
063b0acc mov       $0xA,%al
063b0ace cmp       %cl,%al
063b0ad0 jbe       0x0000`0000`063B`0B44
063b0ad2 jmp       0x0000`0000`063B`0B24
063b0ad4 mov       0x5D(%rsp),%al
063b0ad8 cmp       $9,%al
063b0ada ja        0x0000`0000`063B`0AC8
063b0adc mov       0x5D(%rsp),%al
063b0ae0 mov       %al,0xB6(%rsp)
063b0ae7 add       $0x30,%al
063b0ae9 mov       %al,0x5C(%rsp)
063b0aed setb      %al
063b0af0 test      $1,%al
063b0af2 jne       0x0000`0000`063B`0AFE
063b0af4 mov       0x5C(%rsp),%al
063b0af8 mov       %al,0x5E(%rsp)
063b0afc jmp       0x0000`0000`063B`0B18
063b0afe lea       0x63C`CBC0,%rcx
063b0b05 lea       0x63C`CF68,%r8
063b0b0c mov       $0x1C,%edx
063b0b11 call      0x0000`0000`063B`2030
063b0b16 ud2
063b0b18 mov       0x5E(%rsp),%al
063b0b1c add       $0xB8,%rsp
063b0b23 ret
063b0b24 mov       0x5D(%rsp),%al
063b0b28 mov       %al,0x5F(%rsp)
063b0b2c lea       0x63C`CFB0,%rcx
063b0b33 call      0x0000`0000`063B`6540
063b0b38 mov       %rax,0x48(%rsp)
063b0b3d mov       %rdx,0x50(%rsp)
063b0b42 jmp       0x0000`0000`063B`0BB8
063b0b44 mov       0x5D(%rsp),%al
063b0b48 cmp       $0xF,%al
063b0b4a ja        0x0000`0000`063B`0B24
063b0b4c mov       0x5D(%rsp),%al
063b0b50 mov       %al,0xB7(%rsp)
063b0b57 sub       $0xA,%al
063b0b59 mov       %al,0x47(%rsp)
063b0b5d setb      %al
063b0b60 test      $1,%al
063b0b62 jne       0x0000`0000`063B`0B77
063b0b64 mov       0x47(%rsp),%al
063b0b68 add       $0x61,%al
063b0b6a mov       %al,0x46(%rsp)
063b0b6e setb      %al
063b0b71 test      $1,%al
063b0b73 jne       0x0000`0000`063B`0B9E
063b0b75 jmp       0x0000`0000`063B`0B91
063b0b77 lea       0x63C`CA20,%rcx
063b0b7e lea       0x63C`CF80,%r8
063b0b85 mov       $0x21,%edx
063b0b8a call      0x0000`0000`063B`2030
063b0b8f ud2
063b0b91 mov       0x46(%rsp),%al
063b0b95 mov       %al,0x5E(%rsp)
063b0b99 jmp       0x0000`0000`063B`0B18
063b0b9e lea       0x63C`CBC0,%rcx
063b0ba5 lea       0x63C`CF98,%r8
063b0bac mov       $0x1C,%edx
063b0bb1 call      0x0000`0000`063B`2030
063b0bb6 ud2
063b0bb8 lea       0x5F(%rsp),%rcx
063b0bbd call      0x0000`0000`063B`6540
063b0bc2 mov       %rax,0x30(%rsp)
063b0bc7 mov       %rdx,0x38(%rsp)
063b0bcc mov       0x38(%rsp),%rax
063b0bd1 mov       0x30(%rsp),%rcx
063b0bd6 mov       0x50(%rsp),%rdx
063b0bdb mov       0x48(%rsp),%r8
063b0be0 mov       %r8,0x90(%rsp)
063b0be8 mov       %rdx,0x98(%rsp)
063b0bf0 mov       %rcx,0xA0(%rsp)
063b0bf8 mov       %rax,0xA8(%rsp)
063b0c00 lea       0x90(%rsp),%r9
063b0c08 lea       0x60(%rsp),%rcx
063b0c0d lea       0x63C`CF48,%rdx
063b0c14 mov       $2,%r8d
063b0c1a movq      $2,0x20(%rsp)
063b0c23 call      0x0000`0000`063B`4170
063b0c28 lea       0x63C`CFB8,%rdx
063b0c2f lea       0x60(%rsp),%rcx
063b0c34 call      0x0000`0000`063B`2140
063b0c39 ud2

core::fmt::num::impl$29::digit:
063b0c40 sub       $0xB8,%rsp
063b0c47 mov       %cl,0x5D(%rsp)
063b0c4b mov       %cl,0xB5(%rsp)
063b0c52 xor       %eax,%eax
063b0c54 cmp       %cl,%al
063b0c56 jbe       0x0000`0000`063B`0C64
063b0c58 mov       0x5D(%rsp),%cl
063b0c5c mov       $0xA,%al
063b0c5e cmp       %cl,%al
063b0c60 jbe       0x0000`0000`063B`0CD4
063b0c62 jmp       0x0000`0000`063B`0CB4
063b0c64 mov       0x5D(%rsp),%al
063b0c68 cmp       $9,%al
063b0c6a ja        0x0000`0000`063B`0C58
063b0c6c mov       0x5D(%rsp),%al
063b0c70 mov       %al,0xB6(%rsp)
063b0c77 add       $0x30,%al
063b0c79 mov       %al,0x5C(%rsp)
063b0c7d setb      %al
063b0c80 test      $1,%al
063b0c82 jne       0x0000`0000`063B`0C8E
063b0c84 mov       0x5C(%rsp),%al
063b0c88 mov       %al,0x5E(%rsp)
063b0c8c jmp       0x0000`0000`063B`0CA8
063b0c8e lea       0x63C`CBC0,%rcx
063b0c95 lea       0x63C`CFD0,%r8
063b0c9c mov       $0x1C,%edx
063b0ca1 call      0x0000`0000`063B`2030
063b0ca6 ud2
063b0ca8 mov       0x5E(%rsp),%al
063b0cac add       $0xB8,%rsp
063b0cb3 ret
063b0cb4 mov       0x5D(%rsp),%al
063b0cb8 mov       %al,0x5F(%rsp)
063b0cbc lea       0x63C`CFB0,%rcx
063b0cc3 call      0x0000`0000`063B`6540
063b0cc8 mov       %rax,0x48(%rsp)
063b0ccd mov       %rdx,0x50(%rsp)
063b0cd2 jmp       0x0000`0000`063B`0D48
063b0cd4 mov       0x5D(%rsp),%al
063b0cd8 cmp       $0xF,%al
063b0cda ja        0x0000`0000`063B`0CB4
063b0cdc mov       0x5D(%rsp),%al
063b0ce0 mov       %al,0xB7(%rsp)
063b0ce7 sub       $0xA,%al
063b0ce9 mov       %al,0x47(%rsp)
063b0ced setb      %al
063b0cf0 test      $1,%al
063b0cf2 jne       0x0000`0000`063B`0D07
063b0cf4 mov       0x47(%rsp),%al
063b0cf8 add       $0x41,%al
063b0cfa mov       %al,0x46(%rsp)
063b0cfe setb      %al
063b0d01 test      $1,%al
063b0d03 jne       0x0000`0000`063B`0D2E
063b0d05 jmp       0x0000`0000`063B`0D21
063b0d07 lea       0x63C`CA20,%rcx
063b0d0e lea       0x63C`CFE8,%r8
063b0d15 mov       $0x21,%edx
063b0d1a call      0x0000`0000`063B`2030
063b0d1f ud2
063b0d21 mov       0x46(%rsp),%al
063b0d25 mov       %al,0x5E(%rsp)
063b0d29 jmp       0x0000`0000`063B`0CA8
063b0d2e lea       0x63C`CBC0,%rcx
063b0d35 lea       0x63C`D000,%r8
063b0d3c mov       $0x1C,%edx
063b0d41 call      0x0000`0000`063B`2030
063b0d46 ud2
063b0d48 lea       0x5F(%rsp),%rcx
063b0d4d call      0x0000`0000`063B`6540
063b0d52 mov       %rax,0x30(%rsp)
063b0d57 mov       %rdx,0x38(%rsp)
063b0d5c mov       0x38(%rsp),%rax
063b0d61 mov       0x30(%rsp),%rcx
063b0d66 mov       0x50(%rsp),%rdx
063b0d6b mov       0x48(%rsp),%r8
063b0d70 mov       %r8,0x90(%rsp)
063b0d78 mov       %rdx,0x98(%rsp)
063b0d80 mov       %rcx,0xA0(%rsp)
063b0d88 mov       %rax,0xA8(%rsp)
063b0d90 lea       0x90(%rsp),%r9
063b0d98 lea       0x60(%rsp),%rcx
063b0d9d lea       0x63C`CF48,%rdx
063b0da4 mov       $2,%r8d
063b0daa movq      $2,0x20(%rsp)
063b0db3 call      0x0000`0000`063B`4170
063b0db8 lea       0x63C`D018,%rdx
063b0dbf lea       0x60(%rsp),%rcx
063b0dc4 call      0x0000`0000`063B`2140
063b0dc9 ud2

core::fmt::num::impl$36::fmt:
063b0dd0 sub       $0x38,%rsp
063b0dd4 mov       %rdx,%r8
063b0dd7 mov       %rcx,0x28(%rsp)
063b0ddc mov       %r8,0x30(%rsp)
063b0de1 mov       (%rcx),%rdx
063b0de4 lea       0x63C`CE50,%rcx
063b0deb call      0x0000`0000`063A`E440
063b0df0 mov       %al,0x27(%rsp)
063b0df4 mov       0x27(%rsp),%al
063b0df8 and       $1,%al
063b0dfa movzbl    %al,%eax
063b0dfd add       $0x38,%rsp
063b0e01 ret

core::fmt::num::impl$37::fmt:
063b0e10 sub       $0x38,%rsp
063b0e14 mov       %rdx,%r8
063b0e17 mov       %rcx,0x28(%rsp)
063b0e1c mov       %r8,0x30(%rsp)
063b0e21 mov       (%rcx),%rdx
063b0e24 lea       0x63C`CE50,%rcx
063b0e2b call      0x0000`0000`063A`DE30
063b0e30 mov       %al,0x27(%rsp)
063b0e34 mov       0x27(%rsp),%al
063b0e38 and       $1,%al
063b0e3a movzbl    %al,%eax
063b0e3d add       $0x38,%rsp
063b0e41 ret

core::fmt::num::impl$61::fmt:
063b0e50 sub       $0x38,%rsp
063b0e54 mov       %rdx,%r8
063b0e57 mov       %rcx,0x28(%rsp)
063b0e5c mov       %r8,0x30(%rsp)
063b0e61 mov       (%rcx),%edx
063b0e63 lea       0x63C`CE50,%rcx
063b0e6a call      0x0000`0000`063A`D840
063b0e6f mov       %al,0x27(%rsp)
063b0e73 mov       0x27(%rsp),%al
063b0e77 and       $1,%al
063b0e79 movzbl    %al,%eax
063b0e7c add       $0x38,%rsp
063b0e80 ret

core::fmt::num::impl$89::fmt:
063b0e90 sub       $0x58,%rsp
063b0e94 mov       %rdx,0x30(%rsp)
063b0e99 mov       %rcx,%rax
063b0e9c mov       0x30(%rsp),%rcx
063b0ea1 mov       %rax,0x38(%rsp)
063b0ea6 mov       %rax,0x48(%rsp)
063b0eab mov       %rcx,0x50(%rsp)
063b0eb0 call      0x0000`0000`063B`5E90
063b0eb5 mov       %al,0x46(%rsp)
063b0eb9 mov       0x46(%rsp),%al
063b0ebd test      $1,%al
063b0ebf jne       0x0000`0000`063B`0ED3
063b0ec1 jmp       0x0000`0000`063B`0EC3
063b0ec3 mov       0x30(%rsp),%rcx
063b0ec8 call      0x0000`0000`063B`5EB0
063b0ecd mov       %al,0x2F(%rsp)
063b0ed1 jmp       0x0000`0000`063B`0EF6
063b0ed3 mov       0x30(%rsp),%rdx
063b0ed8 mov       0x38(%rsp),%rcx
063b0edd call      0x0000`0000`063B`0DD0
063b0ee2 and       $1,%al
063b0ee4 mov       %al,0x47(%rsp)
063b0ee8 mov       0x47(%rsp),%al
063b0eec and       $1,%al
063b0eee movzbl    %al,%eax
063b0ef1 add       $0x58,%rsp
063b0ef5 ret
063b0ef6 mov       0x2F(%rsp),%al
063b0efa test      $1,%al
063b0efc jne       0x0000`0000`063B`0F17
063b0efe jmp       0x0000`0000`063B`0F00
063b0f00 mov       0x30(%rsp),%rdx
063b0f05 mov       0x38(%rsp),%rcx
063b0f0a call      0x0000`0000`063C`6C30
063b0f0f and       $1,%al
063b0f11 mov       %al,0x47(%rsp)
063b0f15 jmp       0x0000`0000`063B`0EE8
063b0f17 mov       0x30(%rsp),%rdx
063b0f1c mov       0x38(%rsp),%rcx
063b0f21 call      0x0000`0000`063B`0E10
063b0f26 and       $1,%al
063b0f28 mov       %al,0x47(%rsp)
063b0f2c jmp       0x0000`0000`063B`0EE8

core::ops::function::FnOnce::call_once<usize (*)(ptr_const$<u8>,usize),tuple$<ptr_const$<u8>,usize> >:
063b0f30 sub       $0x48,%rsp
063b0f34 mov       %rcx,0x30(%rsp)
063b0f39 mov       %rdx,0x38(%rsp)
063b0f3e mov       0x30(%rsp),%rcx
063b0f43 mov       0x38(%rsp),%rdx
063b0f48 call      0x0000`0000`063C`4A70
063b0f4d mov       %rax,0x28(%rsp)
063b0f52 mov       0x28(%rsp),%rax
063b0f57 add       $0x48,%rsp
063b0f5b ret

core::ops::function::FnOnce::call_once<void (*)(ptr_const$<array$<usize,4> >),tuple$<ptr_const$<array$<usize,4> > > >:
063b0f60 sub       $0x38,%rsp
063b0f64 mov       %rcx,0x28(%rsp)
063b0f69 mov       0x28(%rsp),%rcx
063b0f6e call      0x0000`0000`063B`AB70
063b0f73 add       $0x38,%rsp
063b0f77 ret

core::ops::function::FnOnce::call_once<void (*)(ptr_const$<u8>),tuple$<ptr_const$<u8> > >:
063b0f80 sub       $0x38,%rsp
063b0f84 mov       %rcx,0x28(%rsp)
063b0f89 mov       0x28(%rsp),%rcx
063b0f8e call      0x0000`0000`063B`AC30
063b0f93 add       $0x38,%rsp
063b0f97 ret

core::ops::function::FnOnce::call_once<void (*)(ptr_mut$<u8>),tuple$<ptr_mut$<u8> > >:
063b0fa0 sub       $0x38,%rsp
063b0fa4 mov       %rcx,0x28(%rsp)
063b0fa9 mov       0x28(%rsp),%rcx
063b0fae call      0x0000`0000`063C`2660
063b0fb3 add       $0x38,%rsp
063b0fb7 ret

core::ops::function::FnOnce::call_once<void (*)(ptr_const$<u8>,ptr_mut$<u8>,usize),tuple$<ptr_const$<u8>,ptr_mut$<u8>,usize> >:
063b0fc0 sub       $0x48,%rsp
063b0fc4 mov       %rcx,0x28(%rsp)
063b0fc9 mov       %rdx,0x30(%rsp)
063b0fce mov       %r8,0x38(%rsp)
063b0fd3 mov       0x28(%rsp),%rcx
063b0fd8 mov       0x30(%rsp),%rdx
063b0fdd mov       0x38(%rsp),%r8
063b0fe2 call      0x0000`0000`063C`2570
063b0fe7 add       $0x48,%rsp
063b0feb ret

core::ops::function::FnOnce::call_once<void (*)(ptr_const$<usize>),tuple$<ptr_const$<usize> > >:
063b0ff0 sub       $0x38,%rsp
063b0ff4 mov       %rcx,0x28(%rsp)
063b0ff9 mov       0x28(%rsp),%rcx
063b0ffe call      0x0000`0000`063B`ABD0
063b1003 add       $0x38,%rsp
063b1007 ret

core::ops::function::FnOnce::call_once<core::fmt::USIZE_MARKER::closure_env$0,tuple$<ref$<usize>,ref_mut$<core::fmt::Formatter> > >:
063b1010 sub       $0x48,%rsp
063b1014 mov       %rcx,0x38(%rsp)
063b1019 mov       %rdx,0x40(%rsp)
063b101e mov       0x38(%rsp),%rdx
063b1023 mov       0x40(%rsp),%r8
063b1028 lea       0x30(%rsp),%rcx
063b102d call      0x0000`0000`063B`3D90
063b1032 mov       %al,0x2F(%rsp)
063b1036 jmp       0x0000`0000`063B`1038
063b1038 mov       0x2F(%rsp),%al
063b103c and       $1,%al
063b103e movzbl    %al,%eax
063b1041 add       $0x48,%rsp
063b1045 ret

core::ops::function::FnOnce::call_once<enum$<core::cmp::Ordering> (*)(ref$<usize>,ref$<usize>),tuple$<ref$<usize>,ref$<usize> > >:
063b1050 sub       $0x48,%rsp
063b1054 mov       %rcx,0x30(%rsp)
063b1059 mov       %rdx,0x38(%rsp)
063b105e mov       0x30(%rsp),%rcx
063b1063 mov       0x38(%rsp),%rdx
063b1068 call      0x0000`0000`063C`5FF0
063b106d mov       %al,0x2F(%rsp)
063b1071 mov       0x2F(%rsp),%al
063b1075 add       $0x48,%rsp
063b1079 ret

core::ptr::drop_in_place<ref$<usize> >:
063b1080 push      %rax
063b1081 mov       %rcx,(%rsp)
063b1085 pop       %rax
063b1086 ret

core::ptr::drop_in_place<core::fmt::builders::PadAdapter>:
063b1090 push      %rax
063b1091 mov       %rcx,(%rsp)
063b1095 pop       %rax
063b1096 ret

core::ptr::drop_in_place<ref_mut$<core::fmt::builders::PadAdapter> >:
063b10a0 push      %rax
063b10a1 mov       %rcx,(%rsp)
063b10a5 pop       %rax
063b10a6 ret

core::ptr::drop_in_place<core::panic::panic_info::impl$0::internal_constructor::NoPayload>:
063b10b0 push      %rax
063b10b1 mov       %rcx,(%rsp)
063b10b5 pop       %rax
063b10b6 ret

core::cmp::Ord::min<usize>:
063b10c0 sub       $0x38,%rsp
063b10c4 mov       %rcx,0x28(%rsp)
063b10c9 mov       %rdx,0x30(%rsp)
063b10ce call      0x0000`0000`063B`1120
063b10d3 mov       %rax,0x20(%rsp)
063b10d8 mov       0x20(%rsp),%rax
063b10dd add       $0x38,%rsp
063b10e1 ret

core::cmp::min<usize>:
063b10f0 sub       $0x38,%rsp
063b10f4 mov       %rcx,0x28(%rsp)
063b10f9 mov       %rdx,0x30(%rsp)
063b10fe call      0x0000`0000`063B`10C0
063b1103 mov       %rax,0x20(%rsp)
063b1108 mov       0x20(%rsp),%rax
063b110d add       $0x38,%rsp
063b1111 ret

core::cmp::min_by<usize,enum$<core::cmp::Ordering> (*)(ref$<usize>,ref$<usize>)>:
063b1120 sub       $0x68,%rsp
063b1124 mov       %rcx,0x28(%rsp)
063b1129 mov       %rdx,0x30(%rsp)
063b112e movb      $0,0x5F(%rsp)
063b1133 movb      $0,0x5E(%rsp)
063b1138 movb      $1,0x5F(%rsp)
063b113d movb      $1,0x5E(%rsp)
063b1142 lea       0x28(%rsp),%rax
063b1147 mov       %rax,0x48(%rsp)
063b114c lea       0x30(%rsp),%rax
063b1151 mov       %rax,0x50(%rsp)
063b1156 mov       0x48(%rsp),%rcx
063b115b mov       0x50(%rsp),%rdx
063b1160 call      0x0000`0000`063B`1050
063b1165 mov       %al,0x47(%rsp)
063b1169 mov       0x47(%rsp),%al
063b116d add       $1,%al
063b116f sub       $2,%al
063b1171 jb        0x0000`0000`063B`1179
063b1173 jmp       0x0000`0000`063B`1175
063b1175 jmp       0x0000`0000`063B`118A
063b1177 ud2
063b1179 movb      $0,0x5F(%rsp)
063b117e mov       0x28(%rsp),%rax
063b1183 mov       %rax,0x38(%rsp)
063b1188 jmp       0x0000`0000`063B`1199
063b118a movb      $0,0x5E(%rsp)
063b118f mov       0x30(%rsp),%rax
063b1194 mov       %rax,0x38(%rsp)
063b1199 testb     $1,0x5E(%rsp)
063b119e jne       0x0000`0000`063B`11A9
063b11a0 testb     $1,0x5F(%rsp)
063b11a5 jne       0x0000`0000`063B`11B5
063b11a7 jmp       0x0000`0000`063B`11AB
063b11a9 jmp       0x0000`0000`063B`11A0
063b11ab mov       0x38(%rsp),%rax
063b11b0 add       $0x68,%rsp
063b11b4 ret
063b11b5 jmp       0x0000`0000`063B`11AB

core::sync::atomic::atomic_load<usize>:
063b11c0 sub       $0xB8,%rsp
063b11c7 mov       %rcx,0x30(%rsp)
063b11cc mov       %dl,0x47(%rsp)
063b11d0 mov       %rcx,0xB0(%rsp)
063b11d8 movzbl    0x47(%rsp),%eax
063b11dd mov       %rax,0x38(%rsp)
063b11e2 mov       0x38(%rsp),%rax
063b11e7 lea       0x63B`12B4,%rcx
063b11ee movslq    (%rcx,%rax,4),%rax
063b11f2 add       %rcx,%rax
063b11f5 jmp       *%rax
063b11f7 ud2
063b11f9 mov       0x30(%rsp),%rax
063b11fe mov       (%rax),%rax
063b1201 mov       %rax,0x48(%rsp)
063b1206 jmp       0x0000`0000`063B`127D
063b1208 lea       0x50(%rsp),%rcx
063b120d lea       0x63C`D138,%rdx
063b1214 mov       $1,%r8d
063b121a lea       0x63C`D078,%r9
063b1221 xor       %eax,%eax
063b1223 movq      $0,0x20(%rsp)
063b122c call      0x0000`0000`063B`4170
063b1231 jmp       0x0000`0000`063B`12A0
063b1233 mov       0x30(%rsp),%rax
063b1238 mov       (%rax),%rax
063b123b mov       %rax,0x48(%rsp)
063b1240 jmp       0x0000`0000`063B`127D
063b1242 lea       0x80(%rsp),%rcx
063b124a lea       0x63C`D068,%rdx
063b1251 mov       $1,%r8d
063b1257 lea       0x63C`D078,%r9
063b125e xor       %eax,%eax
063b1260 movq      $0,0x20(%rsp)
063b1269 call      0x0000`0000`063B`4170
063b126e jmp       0x0000`0000`063B`128A
063b1270 mov       0x30(%rsp),%rax
063b1275 mov       (%rax),%rax
063b1278 mov       %rax,0x48(%rsp)
063b127d mov       0x48(%rsp),%rax
063b1282 add       $0xB8,%rsp
063b1289 ret
063b128a lea       0x63C`D0F8,%rdx
063b1291 lea       0x80(%rsp),%rcx
063b1299 call      0x0000`0000`063B`2140
063b129e ud2
063b12a0 lea       0x63C`D148,%rdx
063b12a7 lea       0x50(%rsp),%rcx
063b12ac call      0x0000`0000`063B`2140
063b12b1 ud2

core::cmp::impl$10::eq:
063b12d0 sub       $0x20,%rsp
063b12d4 mov       %rcx,8(%rsp)
063b12d9 mov       %rdx,0x10(%rsp)
063b12de mov       (%rcx),%al
063b12e0 mov       %al,0x1E(%rsp)
063b12e4 mov       (%rdx),%cl
063b12e6 mov       %cl,0x1F(%rsp)
063b12ea cmp       %cl,%al
063b12ec je        0x0000`0000`063B`12F5
063b12ee movb      $0,7(%rsp)
063b12f3 jmp       0x0000`0000`063B`12FA
063b12f5 movb      $1,7(%rsp)
063b12fa mov       7(%rsp),%al
063b12fe and       $1,%al
063b1300 movzbl    %al,%eax
063b1303 add       $0x20,%rsp
063b1307 ret

core::ops::range::impl$1::fmt<usize>:
063b1310 sub       $0xC8,%rsp
063b1317 mov       %rdx,0x38(%rsp)
063b131c mov       %rcx,0x40(%rsp)
063b1321 mov       %rcx,0x88(%rsp)
063b1329 mov       %rdx,0x90(%rsp)
063b1331 call      0x0000`0000`063B`0E90
063b1336 mov       %al,0x4C(%rsp)
063b133a mov       0x4C(%rsp),%cl
063b133e and       $1,%cl
063b1341 call      0x0000`0000`063B`CEE0
063b1346 and       $1,%al
063b1348 mov       %al,0x4E(%rsp)
063b134c movzbl    0x4E(%rsp),%eax
063b1351 test      $1,%al
063b1353 je        0x0000`0000`063B`135B
063b1355 jmp       0x0000`0000`063B`1357
063b1357 jmp       0x0000`0000`063B`1386
063b1359 ud2
063b135b lea       0x50(%rsp),%rcx
063b1360 lea       0x63C`D188,%rdx
063b1367 mov       $1,%r8d
063b136d lea       0x63C`D198,%r9
063b1374 xor       %eax,%eax
063b1376 movq      $0,0x20(%rsp)
063b137f call      0x0000`0000`063B`4170
063b1384 jmp       0x0000`0000`063B`13A9
063b1386 lea       0x63C`D210,%rcx
063b138d call      0x0000`0000`063B`CF60
063b1392 and       $1,%al
063b1394 mov       %al,0x4D(%rsp)
063b1398 mov       0x4D(%rsp),%al
063b139c and       $1,%al
063b139e movzbl    %al,%eax
063b13a1 add       $0xC8,%rsp
063b13a8 ret
063b13a9 mov       0x38(%rsp),%rcx
063b13ae lea       0x50(%rsp),%rdx
063b13b3 call      0x0000`0000`063B`5DD0
063b13b8 mov       %al,0x37(%rsp)
063b13bc mov       0x37(%rsp),%cl
063b13c0 and       $1,%cl
063b13c3 call      0x0000`0000`063B`CEE0
063b13c8 and       $1,%al
063b13ca mov       %al,0x4F(%rsp)
063b13ce movzbl    0x4F(%rsp),%eax
063b13d3 test      $1,%al
063b13d5 je        0x0000`0000`063B`13DD
063b13d7 jmp       0x0000`0000`063B`13D9
063b13d9 jmp       0x0000`0000`063B`13F6
063b13db ud2
063b13dd mov       0x38(%rsp),%rdx
063b13e2 mov       0x40(%rsp),%rcx
063b13e7 add       $8,%rcx
063b13eb call      0x0000`0000`063B`0E90
063b13f0 mov       %al,0x36(%rsp)
063b13f4 jmp       0x0000`0000`063B`140A
063b13f6 lea       0x63C`D228,%rcx
063b13fd call      0x0000`0000`063B`CF60
063b1402 and       $1,%al
063b1404 mov       %al,0x4D(%rsp)
063b1408 jmp       0x0000`0000`063B`1398
063b140a mov       0x36(%rsp),%cl
063b140e and       $1,%cl
063b1411 call      0x0000`0000`063B`CEE0
063b1416 and       $1,%al
063b1418 mov       %al,0x87(%rsp)
063b141f movzbl    0x87(%rsp),%eax
063b1427 test      $1,%al
063b1429 je        0x0000`0000`063B`1431
063b142b jmp       0x0000`0000`063B`142D
063b142d jmp       0x0000`0000`063B`143B
063b142f ud2
063b1431 movb      $0,0x4D(%rsp)
063b1436 jmp       0x0000`0000`063B`1398
063b143b lea       0x63C`D240,%rcx
063b1442 call      0x0000`0000`063B`CF60
063b1447 and       $1,%al
063b1449 mov       %al,0x4D(%rsp)
063b144d jmp       0x0000`0000`063B`1398

core::ops::range::RangeInclusive<usize>::new<usize>:
063b1460 sub       $0x10,%rsp
063b1464 mov       %rcx,%rax
063b1467 mov       %rdx,(%rsp)
063b146b mov       %r8,8(%rsp)
063b1470 mov       %rdx,(%rcx)
063b1473 mov       %r8,8(%rcx)
063b1477 movb      $0,0x10(%rcx)
063b147b add       $0x10,%rsp
063b147f ret

core::ops::range::RangeInclusive<usize>::end<usize>:
063b1480 push      %rax
063b1481 mov       %rcx,%rax
063b1484 mov       %rax,(%rsp)
063b1488 add       $8,%rax
063b148c pop       %rcx
063b148d ret

core::ops::range::RangeInclusive<usize>::into_slice_range:
063b1490 sub       $0x58,%rsp
063b1494 mov       %rcx,0x28(%rsp)
063b1499 mov       8(%rcx),%rax
063b149d add       $1,%rax
063b14a1 mov       %rax,0x30(%rsp)
063b14a6 setb      %al
063b14a9 test      $1,%al
063b14ab jne       0x0000`0000`063B`14C4
063b14ad mov       0x28(%rsp),%rax
063b14b2 mov       0x30(%rsp),%rcx
063b14b7 mov       %rcx,0x50(%rsp)
063b14bc testb     $1,0x10(%rax)
063b14c0 jne       0x0000`0000`063B`14ED
063b14c2 jmp       0x0000`0000`063B`14DE
063b14c4 lea       0x63C`D270,%rcx
063b14cb lea       0x63C`D258,%r8
063b14d2 mov       $0x1C,%edx
063b14d7 call      0x0000`0000`063B`2030
063b14dc ud2
063b14de mov       0x28(%rsp),%rax
063b14e3 mov       (%rax),%rax
063b14e6 mov       %rax,0x48(%rsp)
063b14eb jmp       0x0000`0000`063B`14F7
063b14ed mov       0x30(%rsp),%rax
063b14f2 mov       %rax,0x48(%rsp)
063b14f7 mov       0x30(%rsp),%rax
063b14fc mov       0x48(%rsp),%rcx
063b1501 mov       %rcx,0x38(%rsp)
063b1506 mov       %rax,0x40(%rsp)
063b150b mov       0x38(%rsp),%rax
063b1510 mov       0x40(%rsp),%rdx
063b1515 add       $0x58,%rsp
063b1519 ret

core::iter::range::impl$2::spec_next<usize>:
063b1520 sub       $0x68,%rsp
063b1524 mov       %rcx,%rdx
063b1527 mov       %rdx,0x38(%rsp)
063b152c mov       %rdx,0x58(%rsp)
063b1531 mov       %rdx,%rcx
063b1534 add       $8,%rdx
063b1538 call      0x0000`0000`063C`5FB0
063b153d mov       %al,0x47(%rsp)
063b1541 mov       0x47(%rsp),%al
063b1545 test      $1,%al
063b1547 jne       0x0000`0000`063B`1556
063b1549 jmp       0x0000`0000`063B`154B
063b154b movq      $0,0x48(%rsp)
063b1554 jmp       0x0000`0000`063B`15A5
063b1556 mov       0x38(%rsp),%rcx
063b155b call      0x0000`0000`063B`B8D0
063b1560 mov       %rax,0x30(%rsp)
063b1565 mov       0x30(%rsp),%rcx
063b156a mov       $1,%edx
063b156f call      0x0000`0000`063B`9220
063b1574 mov       %rax,0x28(%rsp)
063b1579 mov       %rax,0x60(%rsp)
063b157e mov       0x28(%rsp),%rdx
063b1583 mov       0x38(%rsp),%rcx
063b1588 call      0x0000`0000`063B`9540
063b158d mov       %rax,0x20(%rsp)
063b1592 mov       0x20(%rsp),%rax
063b1597 mov       %rax,0x50(%rsp)
063b159c movq      $1,0x48(%rsp)
063b15a5 mov       0x48(%rsp),%rax
063b15aa mov       0x50(%rsp),%rdx
063b15af add       $0x68,%rsp
063b15b3 ret

core::iter::range::impl$3::next<usize>:
063b15c0 sub       $0x38,%rsp
063b15c4 mov       %rcx,0x30(%rsp)
063b15c9 call      0x0000`0000`063B`1520
063b15ce mov       %rax,0x20(%rsp)
063b15d3 mov       %rdx,0x28(%rsp)
063b15d8 mov       0x28(%rsp),%rdx
063b15dd mov       0x20(%rsp),%rax
063b15e2 add       $0x38,%rsp
063b15e6 ret

core::iter::traits::collect::impl$0::into_iter<core::ops::range::Range<usize> >:
063b15f0 sub       $0x10,%rsp
063b15f4 mov       %rcx,%rax
063b15f7 mov       %rax,(%rsp)
063b15fb mov       %rdx,8(%rsp)
063b1600 add       $0x10,%rsp
063b1604 ret

enum$<core::option::Option<ref$<u8> >, 1, 18446744073709551615, Some>::is_some<ref$<u8> >:
063b1610 sub       $0x10,%rsp
063b1614 mov       %rcx,%rdx
063b1617 mov       %rdx,8(%rsp)
063b161c mov       $1,%eax
063b1621 xor       %ecx,%ecx
063b1623 cmpq      $0,(%rdx)
063b1627 cmove     %rcx,%rax
063b162b cmp       $1,%rax
063b162f jne       0x0000`0000`063B`1638
063b1631 movb      $1,7(%rsp)
063b1636 jmp       0x0000`0000`063B`163D
063b1638 movb      $0,7(%rsp)
063b163d mov       7(%rsp),%al
063b1641 and       $1,%al
063b1643 movzbl    %al,%eax
063b1646 add       $0x10,%rsp
063b164a ret

enum$<core::option::Option<ref_mut$<core::fmt::builders::PadAdapter> >, 1, 18446744073709551615, Some>::is_some<ref_mut$<core::fmt::builders::PadAdapter> >:
063b1650 sub       $0x10,%rsp
063b1654 mov       %rcx,%rdx
063b1657 mov       %rdx,8(%rsp)
063b165c mov       $1,%eax
063b1661 xor       %ecx,%ecx
063b1663 cmpq      $0,(%rdx)
063b1667 cmove     %rcx,%rax
063b166b cmp       $1,%rax
063b166f jne       0x0000`0000`063B`1678
063b1671 movb      $1,7(%rsp)
063b1676 jmp       0x0000`0000`063B`167D
063b1678 movb      $0,7(%rsp)
063b167d mov       7(%rsp),%al
063b1681 and       $1,%al
063b1683 movzbl    %al,%eax
063b1686 add       $0x10,%rsp
063b168a ret

enum$<core::option::Option<usize> >::is_some<usize>:
063b1690 sub       $0x10,%rsp
063b1694 mov       %rcx,8(%rsp)
063b1699 cmpq      $1,(%rcx)
063b169d jne       0x0000`0000`063B`16A6
063b169f movb      $1,7(%rsp)
063b16a4 jmp       0x0000`0000`063B`16AB
063b16a6 movb      $0,7(%rsp)
063b16ab mov       7(%rsp),%al
063b16af and       $1,%al
063b16b1 movzbl    %al,%eax
063b16b4 add       $0x10,%rsp
063b16b8 ret

enum$<core::option::Option<usize> >::is_none<usize>:
063b16c0 sub       $0x38,%rsp
063b16c4 mov       %rcx,0x30(%rsp)
063b16c9 call      0x0000`0000`063B`1690
063b16ce mov       %al,0x2F(%rsp)
063b16d2 mov       0x2F(%rsp),%al
063b16d6 xor       $0xFF,%al
063b16d8 and       $1,%al
063b16da movzbl    %al,%eax
063b16dd add       $0x38,%rsp
063b16e1 ret

enum$<core::option::Option<core::fmt::builders::PadAdapter>, 1, 18446744073709551615, Some>::as_mut<core::fmt::builders::PadAdapter>:
063b16f0 sub       $0x20,%rsp
063b16f4 mov       %rcx,(%rsp)
063b16f8 mov       %rcx,0x10(%rsp)
063b16fd mov       (%rcx),%rax
063b1700 test      %rax,%rax
063b1703 setne     %al
063b1706 movzbl    %al,%eax
063b1709 je        0x0000`0000`063B`1711
063b170b jmp       0x0000`0000`063B`170D
063b170d jmp       0x0000`0000`063B`171C
063b170f ud2
063b1711 movq      $0,8(%rsp)
063b171a jmp       0x0000`0000`063B`172A
063b171c mov       (%rsp),%rax
063b1720 mov       %rax,0x18(%rsp)
063b1725 mov       %rax,8(%rsp)
063b172a mov       8(%rsp),%rax
063b172f add       $0x20,%rsp
063b1733 ret

enum$<core::option::Option<char>, 0, 1114111, Some>::unwrap<char>:
063b1740 sub       $0x38,%rsp
063b1744 mov       %rdx,0x28(%rsp)
063b1749 mov       %ecx,0x30(%rsp)
063b174d mov       0x30(%rsp),%eax
063b1751 add       $0xFFEF`0000,%eax
063b1756 setne     %al
063b1759 movzbl    %al,%eax
063b175c je        0x0000`0000`063B`1764
063b175e jmp       0x0000`0000`063B`1760
063b1760 jmp       0x0000`0000`063B`177C
063b1762 ud2
063b1764 mov       0x28(%rsp),%r8
063b1769 lea       0x63C`D28C,%rcx
063b1770 mov       $0x2B,%edx
063b1775 call      0x0000`0000`063B`2030
063b177a ud2
063b177c mov       0x30(%rsp),%eax
063b1780 mov       %eax,0x34(%rsp)
063b1784 add       $0x38,%rsp
063b1788 ret

enum$<core::option::Option<usize> >::unwrap<usize>:
063b1790 sub       $0x48,%rsp
063b1794 mov       %r8,0x28(%rsp)
063b1799 mov       %rcx,0x30(%rsp)
063b179e mov       %rdx,0x38(%rsp)
063b17a3 mov       0x30(%rsp),%rax
063b17a8 test      %rax,%rax
063b17ab je        0x0000`0000`063B`17B3
063b17ad jmp       0x0000`0000`063B`17AF
063b17af jmp       0x0000`0000`063B`17CB
063b17b1 ud2
063b17b3 mov       0x28(%rsp),%r8
063b17b8 lea       0x63C`D28C,%rcx
063b17bf mov       $0x2B,%edx
063b17c4 call      0x0000`0000`063B`2030
063b17c9 ud2
063b17cb mov       0x38(%rsp),%rax
063b17d0 mov       %rax,0x40(%rsp)
063b17d5 add       $0x48,%rsp
063b17d9 ret

enum$<core::option::Option<u8> >::unwrap<u8>:
063b17e0 sub       $0x38,%rsp
063b17e4 mov       %r8,0x28(%rsp)
063b17e9 and       $1,%cl
063b17ec mov       %cl,0x30(%rsp)
063b17f0 mov       %dl,0x31(%rsp)
063b17f4 movzbl    0x30(%rsp),%eax
063b17f9 test      $1,%al
063b17fb je        0x0000`0000`063B`1803
063b17fd jmp       0x0000`0000`063B`17FF
063b17ff jmp       0x0000`0000`063B`181B
063b1801 ud2
063b1803 mov       0x28(%rsp),%r8
063b1808 lea       0x63C`D28C,%rcx
063b180f mov       $0x2B,%edx
063b1814 call      0x0000`0000`063B`2030
063b1819 ud2
063b181b mov       0x31(%rsp),%al
063b181f mov       %al,0x37(%rsp)
063b1823 add       $0x38,%rsp
063b1827 ret

enum$<core::option::Option<str>, 1, 18446744073709551615, Some>::unwrap_or<str>:
063b1830 sub       $0x58,%rsp
063b1834 mov       %r9,(%rsp)
063b1838 mov       %r8,8(%rsp)
063b183d mov       %rcx,0x10(%rsp)
063b1842 mov       %rdx,0x18(%rsp)
063b1847 mov       %r8,0x38(%rsp)
063b184c mov       %r9,0x40(%rsp)
063b1851 movb      $0,0x37(%rsp)
063b1856 movb      $1,0x37(%rsp)
063b185b mov       0x10(%rsp),%rax
063b1860 test      %rax,%rax
063b1863 setne     %al
063b1866 movzbl    %al,%eax
063b1869 je        0x0000`0000`063B`1871
063b186b jmp       0x0000`0000`063B`186D
063b186d jmp       0x0000`0000`063B`188B
063b186f ud2
063b1871 mov       (%rsp),%rax
063b1875 mov       8(%rsp),%rcx
063b187a movb      $0,0x37(%rsp)
063b187f mov       %rcx,0x20(%rsp)
063b1884 mov       %rax,0x28(%rsp)
063b1889 jmp       0x0000`0000`063B`18A9
063b188b mov       0x10(%rsp),%rcx
063b1890 mov       0x18(%rsp),%rax
063b1895 mov       %rcx,0x48(%rsp)
063b189a mov       %rax,0x50(%rsp)
063b189f mov       %rcx,0x20(%rsp)
063b18a4 mov       %rax,0x28(%rsp)
063b18a9 testb     $1,0x37(%rsp)
063b18ae jne       0x0000`0000`063B`18BF
063b18b0 mov       0x20(%rsp),%rax
063b18b5 mov       0x28(%rsp),%rdx
063b18ba add       $0x58,%rsp
063b18be ret
063b18bf jmp       0x0000`0000`063B`18B0

enum$<core::option::Option<u32> >::unwrap_or<u32>:
063b18d0 sub       $0x20,%rsp
063b18d4 mov       %r8d,4(%rsp)
063b18d9 mov       %ecx,8(%rsp)
063b18dd mov       %edx,0xC(%rsp)
063b18e1 mov       %r8d,0x18(%rsp)
063b18e6 movb      $0,0x17(%rsp)
063b18eb movb      $1,0x17(%rsp)
063b18f0 mov       8(%rsp),%eax
063b18f4 test      %rax,%rax
063b18f7 je        0x0000`0000`063B`18FF
063b18f9 jmp       0x0000`0000`063B`18FB
063b18fb jmp       0x0000`0000`063B`190E
063b18fd ud2
063b18ff mov       4(%rsp),%eax
063b1903 movb      $0,0x17(%rsp)
063b1908 mov       %eax,0x10(%rsp)
063b190c jmp       0x0000`0000`063B`191A
063b190e mov       0xC(%rsp),%eax
063b1912 mov       %eax,0x1C(%rsp)
063b1916 mov       %eax,0x10(%rsp)
063b191a testb     $1,0x17(%rsp)
063b191f jne       0x0000`0000`063B`192A
063b1921 mov       0x10(%rsp),%eax
063b1925 add       $0x20,%rsp
063b1929 ret
063b192a jmp       0x0000`0000`063B`1921

enum$<core::option::Option<ref_mut$<core::fmt::builders::PadAdapter> >, 1, 18446744073709551615, Some>::unwrap_unchecked<ref_mut$<core::fmt::builders::PadAdapter> >:
063b1930 sub       $0x48,%rsp
063b1934 mov       %rdx,0x28(%rsp)
063b1939 mov       %rcx,0x38(%rsp)
063b193e lea       0x38(%rsp),%rcx
063b1943 call      0x0000`0000`063B`1650
063b1948 mov       %al,0x37(%rsp)
063b194c mov       0x37(%rsp),%al
063b1950 xor       $0xFF,%al
063b1952 test      $1,%al
063b1954 jne       0x0000`0000`063B`196A
063b1956 mov       0x38(%rsp),%rax
063b195b test      %rax,%rax
063b195e setne     %al
063b1961 movzbl    %al,%eax
063b1964 je        0x0000`0000`063B`1984
063b1966 jmp       0x0000`0000`063B`1968
063b1968 jmp       0x0000`0000`063B`198B
063b196a mov       0x28(%rsp),%r8
063b196f lea       0x63C`D2B7,%rcx
063b1976 mov       $0x20,%edx
063b197b call      0x0000`0000`063B`2030
063b1980 ud2
063b1982 ud2
063b1984 call      0x0000`0000`063B`92E0
063b1989 ud2
063b198b mov       0x38(%rsp),%rax
063b1990 mov       %rax,0x40(%rsp)
063b1995 add       $0x48,%rsp
063b1999 ret

enum$<core::option::Option<ref$<u8> >, 1, 18446744073709551615, Some>::unwrap_unchecked<ref$<u8> >:
063b19a0 sub       $0x48,%rsp
063b19a4 mov       %rdx,0x28(%rsp)
063b19a9 mov       %rcx,0x38(%rsp)
063b19ae lea       0x38(%rsp),%rcx
063b19b3 call      0x0000`0000`063B`1610
063b19b8 mov       %al,0x37(%rsp)
063b19bc mov       0x37(%rsp),%al
063b19c0 xor       $0xFF,%al
063b19c2 test      $1,%al
063b19c4 jne       0x0000`0000`063B`19DA
063b19c6 mov       0x38(%rsp),%rax
063b19cb test      %rax,%rax
063b19ce setne     %al
063b19d1 movzbl    %al,%eax
063b19d4 je        0x0000`0000`063B`19F4
063b19d6 jmp       0x0000`0000`063B`19D8
063b19d8 jmp       0x0000`0000`063B`19FB
063b19da mov       0x28(%rsp),%r8
063b19df lea       0x63C`D2B7,%rcx
063b19e6 mov       $0x20,%edx
063b19eb call      0x0000`0000`063B`2030
063b19f0 ud2
063b19f2 ud2
063b19f4 call      0x0000`0000`063B`92E0
063b19f9 ud2
063b19fb mov       0x38(%rsp),%rax
063b1a00 mov       %rax,0x40(%rsp)
063b1a05 add       $0x48,%rsp
063b1a09 ret

enum$<core::option::Option<usize> >::unwrap_unchecked<usize>:
063b1a10 sub       $0x48,%rsp
063b1a14 mov       %r8,0x20(%rsp)
063b1a19 mov       %rcx,0x30(%rsp)
063b1a1e mov       %rdx,0x38(%rsp)
063b1a23 lea       0x30(%rsp),%rcx
063b1a28 call      0x0000`0000`063B`1690
063b1a2d mov       %al,0x2F(%rsp)
063b1a31 mov       0x2F(%rsp),%al
063b1a35 xor       $0xFF,%al
063b1a37 test      $1,%al
063b1a39 jne       0x0000`0000`063B`1A49
063b1a3b mov       0x30(%rsp),%rax
063b1a40 test      %rax,%rax
063b1a43 je        0x0000`0000`063B`1A63
063b1a45 jmp       0x0000`0000`063B`1A47
063b1a47 jmp       0x0000`0000`063B`1A6A
063b1a49 mov       0x20(%rsp),%r8
063b1a4e lea       0x63C`D2B7,%rcx
063b1a55 mov       $0x20,%edx
063b1a5a call      0x0000`0000`063B`2030
063b1a5f ud2
063b1a61 ud2
063b1a63 call      0x0000`0000`063B`92E0
063b1a68 ud2
063b1a6a mov       0x38(%rsp),%rax
063b1a6f mov       %rax,0x40(%rsp)
063b1a74 add       $0x48,%rsp
063b1a78 ret

enum$<core::option::Option<tuple$<usize,usize> > >::map<tuple$<usize,usize>,usize,core::str::impl$0::find::closure_env$0<char> >:
063b1a80 sub       $0x78,%rsp
063b1a84 mov       %rcx,0x30(%rsp)
063b1a89 movb      $0,0x5F(%rsp)
063b1a8e movb      $1,0x5F(%rsp)
063b1a93 mov       (%rcx),%rax
063b1a96 test      %rax,%rax
063b1a99 je        0x0000`0000`063B`1AA1
063b1a9b jmp       0x0000`0000`063B`1A9D
063b1a9d jmp       0x0000`0000`063B`1AAC
063b1a9f ud2
063b1aa1 movq      $0,0x38(%rsp)
063b1aaa jmp       0x0000`0000`063B`1AF9
063b1aac mov       0x30(%rsp),%rax
063b1ab1 mov       8(%rax),%rcx
063b1ab5 mov       0x10(%rax),%rax
063b1ab9 mov       %rcx,0x68(%rsp)
063b1abe mov       %rax,0x70(%rsp)
063b1ac3 movb      $0,0x5F(%rsp)
063b1ac8 mov       %rcx,0x48(%rsp)
063b1acd mov       %rax,0x50(%rsp)
063b1ad2 mov       0x48(%rsp),%rcx
063b1ad7 mov       0x50(%rsp),%rdx
063b1adc call      0x0000`0000`063B`DC40
063b1ae1 mov       %rax,0x28(%rsp)
063b1ae6 mov       0x28(%rsp),%rax
063b1aeb mov       %rax,0x40(%rsp)
063b1af0 movq      $1,0x38(%rsp)
063b1af9 testb     $1,0x5F(%rsp)
063b1afe jne       0x0000`0000`063B`1B0F
063b1b00 mov       0x38(%rsp),%rax
063b1b05 mov       0x40(%rsp),%rdx
063b1b0a add       $0x78,%rsp
063b1b0e ret
063b1b0f jmp       0x0000`0000`063B`1B00

enum$<core::option::Option<usize> >::map<usize,usize,core::slice::memchr::memchr_general_case::closure_env$2>:
063b1b20 sub       $0x78,%rsp
063b1b24 mov       %r8,0x30(%rsp)
063b1b29 mov       %rcx,0x38(%rsp)
063b1b2e mov       %rdx,0x40(%rsp)
063b1b33 mov       %r8,0x68(%rsp)
063b1b38 movb      $0,0x67(%rsp)
063b1b3d movb      $1,0x67(%rsp)
063b1b42 mov       0x38(%rsp),%rax
063b1b47 test      %rax,%rax
063b1b4a je        0x0000`0000`063B`1B52
063b1b4c jmp       0x0000`0000`063B`1B4E
063b1b4e jmp       0x0000`0000`063B`1B5D
063b1b50 ud2
063b1b52 movq      $0,0x48(%rsp)
063b1b5b jmp       0x0000`0000`063B`1B98
063b1b5d mov       0x30(%rsp),%rcx
063b1b62 mov       0x40(%rsp),%rax
063b1b67 mov       %rax,0x70(%rsp)
063b1b6c movb      $0,0x67(%rsp)
063b1b71 mov       %rax,0x58(%rsp)
063b1b76 mov       0x58(%rsp),%rdx
063b1b7b call      0x0000`0000`063C`8840
063b1b80 mov       %rax,0x28(%rsp)
063b1b85 mov       0x28(%rsp),%rax
063b1b8a mov       %rax,0x50(%rsp)
063b1b8f movq      $1,0x48(%rsp)
063b1b98 testb     $1,0x67(%rsp)
063b1b9d jne       0x0000`0000`063B`1BAE
063b1b9f mov       0x48(%rsp),%rax
063b1ba4 mov       0x50(%rsp),%rdx
063b1ba9 add       $0x78,%rsp
063b1bad ret
063b1bae jmp       0x0000`0000`063B`1B9F

enum$<core::option::Option<u32> >::map<u32,char,core::str::iter::impl$0::next::closure_env$0>:
063b1bb0 sub       $0x48,%rsp
063b1bb4 mov       %ecx,0x28(%rsp)
063b1bb8 mov       %edx,0x2C(%rsp)
063b1bbc movb      $0,0x3F(%rsp)
063b1bc1 movb      $1,0x3F(%rsp)
063b1bc6 mov       0x28(%rsp),%eax
063b1bca test      %rax,%rax
063b1bcd je        0x0000`0000`063B`1BD5
063b1bcf jmp       0x0000`0000`063B`1BD1
063b1bd1 jmp       0x0000`0000`063B`1BDF
063b1bd3 ud2
063b1bd5 movl      $0x11`0000,0x34(%rsp)
063b1bdd jmp       0x0000`0000`063B`1C05
063b1bdf mov       0x2C(%rsp),%eax
063b1be3 mov       %eax,0x44(%rsp)
063b1be7 movb      $0,0x3F(%rsp)
063b1bec mov       %eax,0x38(%rsp)
063b1bf0 mov       0x38(%rsp),%ecx
063b1bf4 call      0x0000`0000`063B`B5D0
063b1bf9 mov       %eax,0x24(%rsp)
063b1bfd mov       0x24(%rsp),%eax
063b1c01 mov       %eax,0x34(%rsp)
063b1c05 testb     $1,0x3F(%rsp)
063b1c0a jne       0x0000`0000`063B`1C15
063b1c0c mov       0x34(%rsp),%eax
063b1c10 add       $0x48,%rsp
063b1c14 ret
063b1c15 jmp       0x0000`0000`063B`1C0C

enum$<core::option::Option<usize> >::map<usize,u32,core::unicode::unicode_data::skip_search::closure_env$1<32,707> >:
063b1c20 sub       $0x68,%rsp
063b1c24 mov       %r8,0x28(%rsp)
063b1c29 mov       %rcx,0x30(%rsp)
063b1c2e mov       %rdx,0x38(%rsp)
063b1c33 mov       %r8,0x58(%rsp)
063b1c38 movb      $0,0x57(%rsp)
063b1c3d movb      $1,0x57(%rsp)
063b1c42 mov       0x30(%rsp),%rax
063b1c47 test      %rax,%rax
063b1c4a je        0x0000`0000`063B`1C52
063b1c4c jmp       0x0000`0000`063B`1C4E
063b1c4e jmp       0x0000`0000`063B`1C5C
063b1c50 ud2
063b1c52 movl      $0,0x40(%rsp)
063b1c5a jmp       0x0000`0000`063B`1C93
063b1c5c mov       0x28(%rsp),%rcx
063b1c61 mov       0x38(%rsp),%rax
063b1c66 mov       %rax,0x60(%rsp)
063b1c6b movb      $0,0x57(%rsp)
063b1c70 mov       %rax,0x48(%rsp)
063b1c75 mov       0x48(%rsp),%rdx
063b1c7a call      0x0000`0000`063C`1490
063b1c7f mov       %eax,0x24(%rsp)
063b1c83 mov       0x24(%rsp),%eax
063b1c87 mov       %eax,0x44(%rsp)
063b1c8b movl      $1,0x40(%rsp)
063b1c93 testb     $1,0x57(%rsp)
063b1c98 jne       0x0000`0000`063B`1CA7
063b1c9a mov       0x40(%rsp),%eax
063b1c9e mov       0x44(%rsp),%edx
063b1ca2 add       $0x68,%rsp
063b1ca6 ret
063b1ca7 jmp       0x0000`0000`063B`1C9A

enum$<core::option::Option<tuple$<usize,char> >, 0, 1114111, Some>::ok_or<tuple$<usize,char>,usize>:
063b1cb0 sub       $0x48,%rsp
063b1cb4 mov       %r9,(%rsp)
063b1cb8 mov       %rcx,8(%rsp)
063b1cbd mov       %rcx,0x10(%rsp)
063b1cc2 mov       %rdx,0x18(%rsp)
063b1cc7 mov       %r8d,0x20(%rsp)
063b1ccc mov       %r9,0x30(%rsp)
063b1cd1 movb      $0,0x2F(%rsp)
063b1cd6 movb      $1,0x2F(%rsp)
063b1cdb mov       0x20(%rsp),%eax
063b1cdf add       $0xFFEF`0000,%eax
063b1ce4 setne     %al
063b1ce7 movzbl    %al,%eax
063b1cea je        0x0000`0000`063B`1CF2
063b1cec jmp       0x0000`0000`063B`1CEE
063b1cee jmp       0x0000`0000`063B`1D0D
063b1cf0 ud2
063b1cf2 mov       8(%rsp),%rax
063b1cf7 mov       (%rsp),%rcx
063b1cfb movb      $0,0x2F(%rsp)
063b1d00 mov       %rcx,8(%rax)
063b1d04 movq      $1,(%rax)
063b1d0b jmp       0x0000`0000`063B`1D32
063b1d0d mov       8(%rsp),%rax
063b1d12 mov       0x18(%rsp),%rdx
063b1d17 mov       0x20(%rsp),%ecx
063b1d1b mov       %rdx,0x38(%rsp)
063b1d20 mov       %ecx,0x40(%rsp)
063b1d24 mov       %rdx,8(%rax)
063b1d28 mov       %ecx,0x10(%rax)
063b1d2b movq      $0,(%rax)
063b1d32 testb     $1,0x2F(%rsp)
063b1d37 jne       0x0000`0000`063B`1D43
063b1d39 mov       0x10(%rsp),%rax
063b1d3e add       $0x48,%rsp
063b1d42 ret
063b1d43 jmp       0x0000`0000`063B`1D39

enum$<core::option::Option<core::fmt::builders::PadAdapter>, 1, 18446744073709551615, Some>::insert<core::fmt::builders::PadAdapter>:
063b1d50 sub       $0x78,%rsp
063b1d54 mov       %rcx,0x38(%rsp)
063b1d59 mov       %rcx,0x70(%rsp)
063b1d5e mov       (%rdx),%rax
063b1d61 mov       %rax,0x58(%rsp)
063b1d66 mov       8(%rdx),%rax
063b1d6a mov       %rax,0x60(%rsp)
063b1d6f mov       0x10(%rdx),%rax
063b1d73 mov       %rax,0x68(%rsp)
063b1d78 mov       0x58(%rsp),%rax
063b1d7d mov       %rax,0x40(%rsp)
063b1d82 mov       0x60(%rsp),%rax
063b1d87 mov       %rax,0x48(%rsp)
063b1d8c mov       0x68(%rsp),%rax
063b1d91 mov       %rax,0x50(%rsp)
063b1d96 mov       0x38(%rsp),%rcx
063b1d9b mov       0x40(%rsp),%rax
063b1da0 mov       %rax,(%rcx)
063b1da3 mov       0x48(%rsp),%rax
063b1da8 mov       %rax,8(%rcx)
063b1dac mov       0x50(%rsp),%rax
063b1db1 mov       %rax,0x10(%rcx)
063b1db5 call      0x0000`0000`063B`16F0
063b1dba mov       %rax,0x30(%rsp)
063b1dbf mov       0x30(%rsp),%rcx
063b1dc4 lea       0x63C`D350,%rdx
063b1dcb call      0x0000`0000`063B`1930
063b1dd0 mov       %rax,0x28(%rsp)
063b1dd5 mov       0x28(%rsp),%rax
063b1dda add       $0x78,%rsp
063b1dde ret

enum$<core::option::Option<ref$<u8> >, 1, 18446744073709551615, Some>::cloned<u8>:
063b1de0 sub       $0x48,%rsp
063b1de4 mov       %rcx,0x30(%rsp)
063b1de9 mov       0x30(%rsp),%rax
063b1dee test      %rax,%rax
063b1df1 setne     %al
063b1df4 movzbl    %al,%eax
063b1df7 je        0x0000`0000`063B`1DFF
063b1df9 jmp       0x0000`0000`063B`1DFB
063b1dfb jmp       0x0000`0000`063B`1E06
063b1dfd ud2
063b1dff movb      $0,0x38(%rsp)
063b1e04 jmp       0x0000`0000`063B`1E26
063b1e06 mov       0x30(%rsp),%rcx
063b1e0b mov       %rcx,0x40(%rsp)
063b1e10 call      0x0000`0000`063B`B8E0
063b1e15 mov       %al,0x2F(%rsp)
063b1e19 mov       0x2F(%rsp),%al
063b1e1d mov       %al,0x39(%rsp)
063b1e21 movb      $1,0x38(%rsp)
063b1e26 mov       0x38(%rsp),%al
063b1e2a mov       0x39(%rsp),%dl
063b1e2e add       $0x48,%rsp
063b1e32 ret

core::option::impl$35::branch<ref$<core::fmt::ArgumentV1> >:
063b1e40 sub       $0x18,%rsp
063b1e44 mov       %rcx,(%rsp)
063b1e48 mov       (%rsp),%rax
063b1e4c test      %rax,%rax
063b1e4f setne     %al
063b1e52 movzbl    %al,%eax
063b1e55 je        0x0000`0000`063B`1E5D
063b1e57 jmp       0x0000`0000`063B`1E59
063b1e59 jmp       0x0000`0000`063B`1E68
063b1e5b ud2
063b1e5d movq      $0,8(%rsp)
063b1e66 jmp       0x0000`0000`063B`1E76
063b1e68 mov       (%rsp),%rax
063b1e6c mov       %rax,0x10(%rsp)
063b1e71 mov       %rax,8(%rsp)
063b1e76 mov       8(%rsp),%rax
063b1e7b add       $0x18,%rsp
063b1e7f ret

core::option::impl$35::branch<tuple$<> >:
063b1e80 sub       $0x10,%rsp
063b1e84 and       $1,%cl
063b1e87 mov       %cl,6(%rsp)
063b1e8b movzbl    6(%rsp),%eax
063b1e90 test      $1,%al
063b1e92 je        0x0000`0000`063B`1E9A
063b1e94 jmp       0x0000`0000`063B`1E96
063b1e96 jmp       0x0000`0000`063B`1EA1
063b1e98 ud2
063b1e9a movb      $1,7(%rsp)
063b1e9f jmp       0x0000`0000`063B`1EA6
063b1ea1 movb      $0,7(%rsp)
063b1ea6 mov       7(%rsp),%al
063b1eaa and       $1,%al
063b1eac movzbl    %al,%eax
063b1eaf add       $0x10,%rsp
063b1eb3 ret

core::option::impl$35::branch<slice$<u8> >:
063b1ec0 sub       $0x30,%rsp
063b1ec4 mov       %rcx,(%rsp)
063b1ec8 mov       %rdx,8(%rsp)
063b1ecd mov       (%rsp),%rax
063b1ed1 test      %rax,%rax
063b1ed4 setne     %al
063b1ed7 movzbl    %al,%eax
063b1eda je        0x0000`0000`063B`1EE2
063b1edc jmp       0x0000`0000`063B`1EDE
063b1ede jmp       0x0000`0000`063B`1EED
063b1ee0 ud2
063b1ee2 movq      $0,0x10(%rsp)
063b1eeb jmp       0x0000`0000`063B`1F0A
063b1eed mov       (%rsp),%rcx
063b1ef1 mov       8(%rsp),%rax
063b1ef6 mov       %rcx,0x20(%rsp)
063b1efb mov       %rax,0x28(%rsp)
063b1f00 mov       %rcx,0x10(%rsp)
063b1f05 mov       %rax,0x18(%rsp)
063b1f0a mov       0x10(%rsp),%rax
063b1f0f mov       0x18(%rsp),%rdx
063b1f14 add       $0x30,%rsp
063b1f18 ret

core::option::impl$35::branch<ref$<u8> >:
063b1f20 sub       $0x18,%rsp
063b1f24 mov       %rcx,(%rsp)
063b1f28 mov       (%rsp),%rax
063b1f2c test      %rax,%rax
063b1f2f setne     %al
063b1f32 movzbl    %al,%eax
063b1f35 je        0x0000`0000`063B`1F3D
063b1f37 jmp       0x0000`0000`063B`1F39
063b1f39 jmp       0x0000`0000`063B`1F48
063b1f3b ud2
063b1f3d movq      $0,8(%rsp)
063b1f46 jmp       0x0000`0000`063B`1F56
063b1f48 mov       (%rsp),%rax
063b1f4c mov       %rax,0x10(%rsp)
063b1f51 mov       %rax,8(%rsp)
063b1f56 mov       8(%rsp),%rax
063b1f5b add       $0x18,%rsp
063b1f5f ret

core::option::impl$35::branch<ref$<core::fmt::rt::v1::Argument> >:
063b1f60 sub       $0x18,%rsp
063b1f64 mov       %rcx,(%rsp)
063b1f68 mov       (%rsp),%rax
063b1f6c test      %rax,%rax
063b1f6f setne     %al
063b1f72 movzbl    %al,%eax
063b1f75 je        0x0000`0000`063B`1F7D
063b1f77 jmp       0x0000`0000`063B`1F79
063b1f79 jmp       0x0000`0000`063B`1F88
063b1f7b ud2
063b1f7d movq      $0,8(%rsp)
063b1f86 jmp       0x0000`0000`063B`1F96
063b1f88 mov       (%rsp),%rax
063b1f8c mov       %rax,0x10(%rsp)
063b1f91 mov       %rax,8(%rsp)
063b1f96 mov       8(%rsp),%rax
063b1f9b add       $0x18,%rsp
063b1f9f ret

core::option::impl$36::from_residual<tuple$<usize,usize> >:
063b1fa0 push      %rax
063b1fa1 mov       %rcx,%rax
063b1fa4 movq      $0,(%rcx)
063b1fab pop       %rcx
063b1fac ret

core::option::impl$36::from_residual<tuple$<usize,ref$<core::fmt::rt::v1::Argument> > >:
063b1fb0 sub       $0x18,%rsp
063b1fb4 movq      $0,8(%rsp)
063b1fbd mov       (%rsp),%rax
063b1fc1 mov       8(%rsp),%rdx
063b1fc6 add       $0x18,%rsp
063b1fca ret

core::option::impl$36::from_residual<tuple$<usize,ref$<core::fmt::ArgumentV1> > >:
063b1fd0 sub       $0x18,%rsp
063b1fd4 movq      $0,8(%rsp)
063b1fdd mov       (%rsp),%rax
063b1fe1 mov       8(%rsp),%rdx
063b1fe6 add       $0x18,%rsp
063b1fea ret

core::option::impl$36::from_residual<tuple$<usize,char> >:
063b1ff0 sub       $0x18,%rsp
063b1ff4 movl      $0x11`0000,8(%rsp)
063b1ffc mov       (%rsp),%rax
063b2000 mov       8(%rsp),%edx
063b2004 add       $0x18,%rsp
063b2008 ret

core::option::impl$36::from_residual<u32>:
063b2010 sub       $0x10,%rsp
063b2014 movl      $0,(%rsp)
063b201b mov       (%rsp),%eax
063b201e mov       4(%rsp),%edx
063b2022 add       $0x10,%rsp
063b2026 ret

core::panicking::panic:
063b2030 sub       $0x88,%rsp
063b2037 mov       %r8,0x30(%rsp)
063b203c mov       %rcx,0x78(%rsp)
063b2041 mov       %rdx,0x80(%rsp)
063b2049 mov       %rcx,0x68(%rsp)
063b204e mov       %rdx,0x70(%rsp)
063b2053 lea       0x68(%rsp),%rdx
063b2058 lea       0x38(%rsp),%rcx
063b205d mov       $1,%r8d
063b2063 lea       0x63C`D198,%r9
063b206a xor       %eax,%eax
063b206c movq      $0,0x20(%rsp)
063b2075 call      0x0000`0000`063B`4170
063b207a mov       0x30(%rsp),%rdx
063b207f lea       0x38(%rsp),%rcx
063b2084 call      0x0000`0000`063B`2140
063b2089 ud2

core::panicking::panic_bounds_check:
063b2090 sub       $0xB8,%rsp
063b2097 mov       %r8,0x40(%rsp)
063b209c mov       %rcx,0x58(%rsp)
063b20a1 mov       %rdx,0x60(%rsp)
063b20a6 lea       0x60(%rsp),%rcx
063b20ab call      0x0000`0000`063B`6510
063b20b0 mov       %rax,0x48(%rsp)
063b20b5 mov       %rdx,0x50(%rsp)
063b20ba lea       0x58(%rsp),%rcx
063b20bf call      0x0000`0000`063B`6510
063b20c4 mov       %rax,0x30(%rsp)
063b20c9 mov       %rdx,0x38(%rsp)
063b20ce mov       0x38(%rsp),%rax
063b20d3 mov       0x30(%rsp),%rcx
063b20d8 mov       0x50(%rsp),%rdx
063b20dd mov       0x48(%rsp),%r8
063b20e2 mov       %r8,0x98(%rsp)
063b20ea mov       %rdx,0xA0(%rsp)
063b20f2 mov       %rcx,0xA8(%rsp)
063b20fa mov       %rax,0xB0(%rsp)
063b2102 lea       0x98(%rsp),%r9
063b210a lea       0x68(%rsp),%rcx
063b210f lea       0x63C`D3A0,%rdx
063b2116 mov       $2,%r8d
063b211c movq      $2,0x20(%rsp)
063b2125 call      0x0000`0000`063B`4170
063b212a mov       0x40(%rsp),%rdx
063b212f lea       0x68(%rsp),%rcx
063b2134 call      0x0000`0000`063B`2140
063b2139 ud2

core::panicking::panic_fmt:
063b2140 sub       $0x68,%rsp
063b2144 mov       %rdx,0x28(%rsp)
063b2149 mov       %rcx,%rax
063b214c mov       0x28(%rsp),%rcx
063b2151 mov       %rax,0x60(%rsp)
063b2156 call      0x0000`0000`063B`A0B0
063b215b mov       %rax,0x30(%rsp)
063b2160 mov       0x30(%rsp),%r8
063b2165 mov       0x60(%rsp),%rdx
063b216a lea       0x38(%rsp),%rcx
063b216f mov       $1,%r9d
063b2175 call      0x0000`0000`063B`9150
063b217a lea       0x38(%rsp),%rcx
063b217f call      0x0000`0000`063A`C090
063b2184 ud2

core::panicking::assert_failed<usize,usize>:
063b2190 sub       $0x88,%rsp
063b2197 mov       %rdx,%rax
063b219a mov       0xB0(%rsp),%rdx
063b21a2 mov       %rax,0x40(%rsp)
063b21a7 mov       %r8,0x48(%rsp)
063b21ac mov       %cl,0x87(%rsp)
063b21b3 mov       0x28(%r9),%rax
063b21b7 mov       %rax,0x78(%rsp)
063b21bc mov       0x20(%r9),%rax
063b21c0 mov       %rax,0x70(%rsp)
063b21c5 mov       0x18(%r9),%rax
063b21c9 mov       %rax,0x68(%rsp)
063b21ce mov       0x10(%r9),%rax
063b21d2 mov       %rax,0x60(%rsp)
063b21d7 mov       (%r9),%rax
063b21da mov       8(%r9),%r8
063b21de mov       %r8,0x58(%rsp)
063b21e3 mov       %rax,0x50(%rsp)
063b21e8 mov       %rsp,%rax
063b21eb mov       %rdx,0x30(%rax)
063b21ef lea       0x50(%rsp),%rdx
063b21f4 mov       %rdx,0x28(%rax)
063b21f8 lea       0x63C`D3C0,%r8
063b21ff mov       %r8,0x20(%rax)
063b2203 lea       0x40(%rsp),%rdx
063b2208 lea       0x48(%rsp),%r9
063b220d call      0x0000`0000`063B`2220
063b2212 ud2

core::panicking::assert_failed_inner:
063b2220 push      %rsi
063b2221 sub       $0x1F0,%rsp
063b2228 mov       0x230(%rsp),%rax
063b2230 mov       %rax,0xA0(%rsp)
063b2238 mov       0x228(%rsp),%rax
063b2240 mov       %rax,0xA8(%rsp)
063b2248 mov       0x220(%rsp),%rax
063b2250 mov       %cl,0xBF(%rsp)
063b2257 mov       %rdx,0xC0(%rsp)
063b225f mov       %r8,0xC8(%rsp)
063b2267 mov       %r9,0xD0(%rsp)
063b226f mov       %rax,0xD8(%rsp)
063b2277 movzbl    0xBF(%rsp),%eax
063b227f mov       %rax,0xB0(%rsp)
063b2287 test      %rax,%rax
063b228a je        0x0000`0000`063B`22A2
063b228c jmp       0x0000`0000`063B`228E
063b228e mov       0xB0(%rsp),%rax
063b2296 sub       $1,%rax
063b229a je        0x0000`0000`063B`22BF
063b229c jmp       0x0000`0000`063B`229E
063b229e jmp       0x0000`0000`063B`22DC
063b22a0 ud2
063b22a2 lea       0x63C`D3E9,%rax
063b22a9 mov       %rax,0xE0(%rsp)
063b22b1 movq      $2,0xE8(%rsp)
063b22bd jmp       0x0000`0000`063B`22F7
063b22bf lea       0x63C`D3E7,%rax
063b22c6 mov       %rax,0xE0(%rsp)
063b22ce movq      $2,0xE8(%rsp)
063b22da jmp       0x0000`0000`063B`22F7
063b22dc lea       0x63C`D3E0,%rax
063b22e3 mov       %rax,0xE0(%rsp)
063b22eb movq      $7,0xE8(%rsp)
063b22f7 mov       0xA8(%rsp),%rax
063b22ff mov       (%rax),%rax
063b2302 test      %rax,%rax
063b2305 setne     %al
063b2308 movzbl    %al,%eax
063b230b je        0x0000`0000`063B`2313
063b230d jmp       0x0000`0000`063B`230F
063b230f jmp       0x0000`0000`063B`2335
063b2311 ud2
063b2313 lea       0xE0(%rsp),%rcx
063b231b call      0x0000`0000`063B`6600
063b2320 mov       %rax,0x90(%rsp)
063b2328 mov       %rdx,0x98(%rsp)
063b2330 jmp       0x0000`0000`063B`2462
063b2335 mov       0xA8(%rsp),%rdx
063b233d lea       0xF0(%rsp),%rcx
063b2345 mov       $0x30,%r8d
063b234b call      0x0000`0000`063B`BDE0
063b2350 lea       0xE0(%rsp),%rcx
063b2358 call      0x0000`0000`063B`6600
063b235d mov       %rax,0x80(%rsp)
063b2365 mov       %rdx,0x88(%rsp)
063b236d lea       0xC0(%rsp),%rcx
063b2375 call      0x0000`0000`063B`6690
063b237a mov       %rax,0x70(%rsp)
063b237f mov       %rdx,0x78(%rsp)
063b2384 lea       0xD0(%rsp),%rcx
063b238c call      0x0000`0000`063B`6690
063b2391 mov       %rax,0x60(%rsp)
063b2396 mov       %rdx,0x68(%rsp)
063b239b lea       0xF0(%rsp),%rcx
063b23a3 call      0x0000`0000`063B`65D0
063b23a8 mov       %rax,0x50(%rsp)
063b23ad mov       %rdx,0x58(%rsp)
063b23b2 mov       0x58(%rsp),%rax
063b23b7 mov       0x50(%rsp),%rcx
063b23bc mov       0x68(%rsp),%rdx
063b23c1 mov       0x60(%rsp),%r8
063b23c6 mov       0x78(%rsp),%r9
063b23cb mov       0x70(%rsp),%r10
063b23d0 mov       0x88(%rsp),%r11
063b23d8 mov       0x80(%rsp),%rsi
063b23e0 mov       %rsi,0x150(%rsp)
063b23e8 mov       %r11,0x158(%rsp)
063b23f0 mov       %r10,0x160(%rsp)
063b23f8 mov       %r9,0x168(%rsp)
063b2400 mov       %r8,0x170(%rsp)
063b2408 mov       %rdx,0x178(%rsp)
063b2410 mov       %rcx,0x180(%rsp)
063b2418 mov       %rax,0x188(%rsp)
063b2420 lea       0x150(%rsp),%r9
063b2428 lea       0x120(%rsp),%rcx
063b2430 lea       0x63C`D428,%rdx
063b2437 mov       $4,%r8d
063b243d movq      $4,0x20(%rsp)
063b2446 call      0x0000`0000`063B`4170
063b244b mov       0xA0(%rsp),%rdx
063b2453 lea       0x120(%rsp),%rcx
063b245b call      0x0000`0000`063B`2140
063b2460 ud2
063b2462 lea       0xC0(%rsp),%rcx
063b246a call      0x0000`0000`063B`6690
063b246f mov       %rax,0x40(%rsp)
063b2474 mov       %rdx,0x48(%rsp)
063b2479 lea       0xD0(%rsp),%rcx
063b2481 call      0x0000`0000`063B`6690
063b2486 mov       %rax,0x30(%rsp)
063b248b mov       %rdx,0x38(%rsp)
063b2490 mov       0x38(%rsp),%rax
063b2495 mov       0x30(%rsp),%rcx
063b249a mov       0x48(%rsp),%rdx
063b249f mov       0x40(%rsp),%r8
063b24a4 mov       0x98(%rsp),%r9
063b24ac mov       0x90(%rsp),%r10
063b24b4 mov       %r10,0x1C0(%rsp)
063b24bc mov       %r9,0x1C8(%rsp)
063b24c4 mov       %r8,0x1D0(%rsp)
063b24cc mov       %rdx,0x1D8(%rsp)
063b24d4 mov       %rcx,0x1E0(%rsp)
063b24dc mov       %rax,0x1E8(%rsp)
063b24e4 lea       0x1C0(%rsp),%r9
063b24ec lea       0x190(%rsp),%rcx
063b24f4 lea       0x63C`D470,%rdx
063b24fb mov       $4,%r8d
063b2501 movq      $3,0x20(%rsp)
063b250a call      0x0000`0000`063B`4170
063b250f mov       0xA0(%rsp),%rdx
063b2517 lea       0x190(%rsp),%rcx
063b251f call      0x0000`0000`063B`2140
063b2524 ud2

core::slice::index::impl$3::get<u8>:
063b2530 sub       $0x88,%rsp
063b2537 mov       %r9,0x30(%rsp)
063b253c mov       %r8,0x38(%rsp)
063b2541 mov       %rdx,0x40(%rsp)
063b2546 mov       %rcx,0x48(%rsp)
063b254b mov       %rcx,0x68(%rsp)
063b2550 mov       %rdx,0x70(%rsp)
063b2555 mov       %r8,0x78(%rsp)
063b255a mov       %r9,0x80(%rsp)
063b2562 cmp       %rdx,%rcx
063b2565 ja        0x0000`0000`063B`257F
063b2567 mov       0x40(%rsp),%rax
063b256c mov       0x30(%rsp),%rcx
063b2571 cmp       %rcx,%rax
063b2574 seta      %al
063b2577 and       $1,%al
063b2579 mov       %al,0x67(%rsp)
063b257d jmp       0x0000`0000`063B`2584
063b257f movb      $1,0x67(%rsp)
063b2584 testb     $1,0x67(%rsp)
063b2589 jne       0x0000`0000`063B`25B0
063b258b mov       0x30(%rsp),%r9
063b2590 mov       0x38(%rsp),%r8
063b2595 mov       0x40(%rsp),%rdx
063b259a mov       0x48(%rsp),%rcx
063b259f call      0x0000`0000`063B`27F0
063b25a4 mov       %rax,0x20(%rsp)
063b25a9 mov       %rdx,0x28(%rsp)
063b25ae jmp       0x0000`0000`063B`25CB
063b25b0 movq      $0,0x50(%rsp)
063b25b9 mov       0x50(%rsp),%rax
063b25be mov       0x58(%rsp),%rdx
063b25c3 add       $0x88,%rsp
063b25ca ret
063b25cb mov       0x28(%rsp),%rax
063b25d0 mov       0x20(%rsp),%rcx
063b25d5 mov       %rcx,0x50(%rsp)
063b25da mov       %rax,0x58(%rsp)
063b25df jmp       0x0000`0000`063B`25B9

core::slice::index::impl$3::get_unchecked<usize>:
063b25f0 sub       $0xB8,%rsp
063b25f7 mov       %r9,0x48(%rsp)
063b25fc mov       %r8,0x58(%rsp)
063b2601 mov       %rdx,%rax
063b2604 mov       0x48(%rsp),%rdx
063b2609 mov       %rax,0x50(%rsp)
063b260e mov       %rcx,%r8
063b2611 mov       0x58(%rsp),%rcx
063b2616 mov       %r8,0x60(%rsp)
063b261b mov       %r8,0x70(%rsp)
063b2620 mov       %rax,0x78(%rsp)
063b2625 mov       %rcx,0x80(%rsp)
063b262d mov       %rdx,0x88(%rsp)
063b2635 call      0x0000`0000`063C`4B60
063b263a mov       %rax,0x68(%rsp)
063b263f mov       0x68(%rsp),%rax
063b2644 mov       0x60(%rsp),%rcx
063b2649 mov       %rax,0x90(%rsp)
063b2651 mov       %rcx,0x98(%rsp)
063b2659 mov       %rax,0xA0(%rsp)
063b2661 mov       %rcx,0xA8(%rsp)
063b2669 shl       $3,%rcx
063b266d add       %rcx,%rax
063b2670 mov       %rax,0xB0(%rsp)
063b2678 mov       0xB0(%rsp),%rax
063b2680 mov       %rax,0x40(%rsp)
063b2685 mov       0x60(%rsp),%rcx
063b268a mov       0x50(%rsp),%rax
063b268f sub       %rcx,%rax
063b2692 mov       %rax,0x38(%rsp)
063b2697 setb      %al
063b269a test      $1,%al
063b269c jne       0x0000`0000`063B`26B9
063b269e mov       0x38(%rsp),%rdx
063b26a3 mov       0x40(%rsp),%rcx
063b26a8 call      0x0000`0000`063C`8BF0
063b26ad mov       %rax,0x28(%rsp)
063b26b2 mov       %rdx,0x30(%rsp)
063b26b7 jmp       0x0000`0000`063B`26D3
063b26b9 lea       0x63C`D160,%rcx
063b26c0 lea       0x63C`D530,%r8
063b26c7 mov       $0x21,%edx
063b26cc call      0x0000`0000`063B`2030
063b26d1 ud2
063b26d3 mov       0x30(%rsp),%rdx
063b26d8 mov       0x28(%rsp),%rax
063b26dd add       $0xB8,%rsp
063b26e4 ret

core::slice::index::impl$3::get_unchecked<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b26f0 sub       $0xB8,%rsp
063b26f7 mov       %r9,0x48(%rsp)
063b26fc mov       %r8,0x58(%rsp)
063b2701 mov       %rdx,%rax
063b2704 mov       0x48(%rsp),%rdx
063b2709 mov       %rax,0x50(%rsp)
063b270e mov       %rcx,%r8
063b2711 mov       0x58(%rsp),%rcx
063b2716 mov       %r8,0x60(%rsp)
063b271b mov       %r8,0x70(%rsp)
063b2720 mov       %rax,0x78(%rsp)
063b2725 mov       %rcx,0x80(%rsp)
063b272d mov       %rdx,0x88(%rsp)
063b2735 call      0x0000`0000`063C`7E20
063b273a mov       %rax,0x68(%rsp)
063b273f mov       0x60(%rsp),%rcx
063b2744 mov       0x68(%rsp),%rax
063b2749 mov       %rax,0x90(%rsp)
063b2751 mov       %rcx,0x98(%rsp)
063b2759 mov       %rax,0xA0(%rsp)
063b2761 mov       %rcx,0xA8(%rsp)
063b2769 add       %rcx,%rax
063b276c mov       %rax,0xB0(%rsp)
063b2774 mov       0xB0(%rsp),%rax
063b277c mov       %rax,0x40(%rsp)
063b2781 mov       0x60(%rsp),%rcx
063b2786 mov       0x50(%rsp),%rax
063b278b sub       %rcx,%rax
063b278e mov       %rax,0x38(%rsp)
063b2793 setb      %al
063b2796 test      $1,%al
063b2798 jne       0x0000`0000`063B`27B5
063b279a mov       0x38(%rsp),%rdx
063b279f mov       0x40(%rsp),%rcx
063b27a4 call      0x0000`0000`063C`8C40
063b27a9 mov       %rax,0x28(%rsp)
063b27ae mov       %rdx,0x30(%rsp)
063b27b3 jmp       0x0000`0000`063B`27CF
063b27b5 lea       0x63C`D160,%rcx
063b27bc lea       0x63C`D530,%r8
063b27c3 mov       $0x21,%edx
063b27c8 call      0x0000`0000`063B`2030
063b27cd ud2
063b27cf mov       0x30(%rsp),%rdx
063b27d4 mov       0x28(%rsp),%rax
063b27d9 add       $0xB8,%rsp
063b27e0 ret

core::slice::index::impl$3::get_unchecked<u8>:
063b27f0 sub       $0xB8,%rsp
063b27f7 mov       %r9,0x48(%rsp)
063b27fc mov       %r8,0x58(%rsp)
063b2801 mov       %rdx,%rax
063b2804 mov       0x48(%rsp),%rdx
063b2809 mov       %rax,0x50(%rsp)
063b280e mov       %rcx,%r8
063b2811 mov       0x58(%rsp),%rcx
063b2816 mov       %r8,0x60(%rsp)
063b281b mov       %r8,0x70(%rsp)
063b2820 mov       %rax,0x78(%rsp)
063b2825 mov       %rcx,0x80(%rsp)
063b282d mov       %rdx,0x88(%rsp)
063b2835 call      0x0000`0000`063C`4B40
063b283a mov       %rax,0x68(%rsp)
063b283f mov       0x60(%rsp),%rcx
063b2844 mov       0x68(%rsp),%rax
063b2849 mov       %rax,0x90(%rsp)
063b2851 mov       %rcx,0x98(%rsp)
063b2859 mov       %rax,0xA0(%rsp)
063b2861 mov       %rcx,0xA8(%rsp)
063b2869 add       %rcx,%rax
063b286c mov       %rax,0xB0(%rsp)
063b2874 mov       0xB0(%rsp),%rax
063b287c mov       %rax,0x40(%rsp)
063b2881 mov       0x60(%rsp),%rcx
063b2886 mov       0x50(%rsp),%rax
063b288b sub       %rcx,%rax
063b288e mov       %rax,0x38(%rsp)
063b2893 setb      %al
063b2896 test      $1,%al
063b2898 jne       0x0000`0000`063B`28B5
063b289a mov       0x38(%rsp),%rdx
063b289f mov       0x40(%rsp),%rcx
063b28a4 call      0x0000`0000`063C`8BA0
063b28a9 mov       %rax,0x28(%rsp)
063b28ae mov       %rdx,0x30(%rsp)
063b28b3 jmp       0x0000`0000`063B`28CF
063b28b5 lea       0x63C`D160,%rcx
063b28bc lea       0x63C`D530,%r8
063b28c3 mov       $0x21,%edx
063b28c8 call      0x0000`0000`063B`2030
063b28cd ud2
063b28cf mov       0x30(%rsp),%rdx
063b28d4 mov       0x28(%rsp),%rax
063b28d9 add       $0xB8,%rsp
063b28e0 ret

core::slice::index::impl$3::get_unchecked_mut<u8>:
063b28f0 sub       $0xB8,%rsp
063b28f7 mov       %rdx,0x48(%rsp)
063b28fc mov       %rcx,0x50(%rsp)
063b2901 mov       %rcx,0x60(%rsp)
063b2906 mov       %rdx,0x68(%rsp)
063b290b mov       %r8,0x70(%rsp)
063b2910 mov       %r9,0x78(%rsp)
063b2915 mov       %r8,0xA8(%rsp)
063b291d mov       %r9,0xB0(%rsp)
063b2925 mov       %r8,0x58(%rsp)
063b292a mov       0x50(%rsp),%rcx
063b292f mov       0x58(%rsp),%rax
063b2934 mov       %rax,0x80(%rsp)
063b293c mov       %rcx,0x88(%rsp)
063b2944 mov       %rax,0x90(%rsp)
063b294c mov       %rcx,0x98(%rsp)
063b2954 add       %rcx,%rax
063b2957 mov       %rax,0xA0(%rsp)
063b295f mov       0xA0(%rsp),%rax
063b2967 mov       %rax,0x40(%rsp)
063b296c mov       0x50(%rsp),%rcx
063b2971 mov       0x48(%rsp),%rax
063b2976 sub       %rcx,%rax
063b2979 mov       %rax,0x38(%rsp)
063b297e setb      %al
063b2981 test      $1,%al
063b2983 jne       0x0000`0000`063B`29A0
063b2985 mov       0x38(%rsp),%rdx
063b298a mov       0x40(%rsp),%rcx
063b298f call      0x0000`0000`063C`8C90
063b2994 mov       %rax,0x28(%rsp)
063b2999 mov       %rdx,0x30(%rsp)
063b299e jmp       0x0000`0000`063B`29BA
063b29a0 lea       0x63C`D160,%rcx
063b29a7 lea       0x63C`D548,%r8
063b29ae mov       $0x21,%edx
063b29b3 call      0x0000`0000`063B`2030
063b29b8 ud2
063b29ba mov       0x30(%rsp),%rdx
063b29bf mov       0x28(%rsp),%rax
063b29c4 add       $0xB8,%rsp
063b29cb ret

core::slice::index::impl$3::index<u8>:
063b29d0 sub       $0x78,%rsp
063b29d4 mov       %r9,0x30(%rsp)
063b29d9 mov       %r8,0x38(%rsp)
063b29de mov       %rdx,0x40(%rsp)
063b29e3 mov       %rcx,0x48(%rsp)
063b29e8 mov       0xA0(%rsp),%rax
063b29f0 mov       %rax,0x50(%rsp)
063b29f5 mov       %rcx,0x58(%rsp)
063b29fa mov       %rdx,0x60(%rsp)
063b29ff mov       %r8,0x68(%rsp)
063b2a04 mov       %r9,0x70(%rsp)
063b2a09 cmp       %rdx,%rcx
063b2a0c ja        0x0000`0000`063B`2A1F
063b2a0e mov       0x40(%rsp),%rax
063b2a13 mov       0x30(%rsp),%rcx
063b2a18 cmp       %rcx,%rax
063b2a1b ja        0x0000`0000`063B`2A5A
063b2a1d jmp       0x0000`0000`063B`2A35
063b2a1f mov       0x50(%rsp),%r8
063b2a24 mov       0x40(%rsp),%rdx
063b2a29 mov       0x48(%rsp),%rcx
063b2a2e call      0x0000`0000`063B`A440
063b2a33 ud2
063b2a35 mov       0x30(%rsp),%r9
063b2a3a mov       0x38(%rsp),%r8
063b2a3f mov       0x40(%rsp),%rdx
063b2a44 mov       0x48(%rsp),%rcx
063b2a49 call      0x0000`0000`063B`27F0
063b2a4e mov       %rax,0x20(%rsp)
063b2a53 mov       %rdx,0x28(%rsp)
063b2a58 jmp       0x0000`0000`063B`2A70
063b2a5a mov       0x50(%rsp),%r8
063b2a5f mov       0x30(%rsp),%rdx
063b2a64 mov       0x40(%rsp),%rcx
063b2a69 call      0x0000`0000`063B`A390
063b2a6e ud2
063b2a70 mov       0x28(%rsp),%rdx
063b2a75 mov       0x20(%rsp),%rax
063b2a7a add       $0x78,%rsp
063b2a7e ret

core::slice::index::impl$3::index_mut<u8>:
063b2a80 sub       $0x78,%rsp
063b2a84 mov       %r9,0x30(%rsp)
063b2a89 mov       %r8,0x38(%rsp)
063b2a8e mov       %rdx,0x40(%rsp)
063b2a93 mov       %rcx,0x48(%rsp)
063b2a98 mov       0xA0(%rsp),%rax
063b2aa0 mov       %rax,0x50(%rsp)
063b2aa5 mov       %rcx,0x58(%rsp)
063b2aaa mov       %rdx,0x60(%rsp)
063b2aaf mov       %r8,0x68(%rsp)
063b2ab4 mov       %r9,0x70(%rsp)
063b2ab9 cmp       %rdx,%rcx
063b2abc ja        0x0000`0000`063B`2ACF
063b2abe mov       0x40(%rsp),%rax
063b2ac3 mov       0x30(%rsp),%rcx
063b2ac8 cmp       %rcx,%rax
063b2acb ja        0x0000`0000`063B`2B0A
063b2acd jmp       0x0000`0000`063B`2AE5
063b2acf mov       0x50(%rsp),%r8
063b2ad4 mov       0x40(%rsp),%rdx
063b2ad9 mov       0x48(%rsp),%rcx
063b2ade call      0x0000`0000`063B`A440
063b2ae3 ud2
063b2ae5 mov       0x30(%rsp),%r9
063b2aea mov       0x38(%rsp),%r8
063b2aef mov       0x40(%rsp),%rdx
063b2af4 mov       0x48(%rsp),%rcx
063b2af9 call      0x0000`0000`063B`28F0
063b2afe mov       %rax,0x20(%rsp)
063b2b03 mov       %rdx,0x28(%rsp)
063b2b08 jmp       0x0000`0000`063B`2B20
063b2b0a mov       0x50(%rsp),%r8
063b2b0f mov       0x30(%rsp),%rdx
063b2b14 mov       0x40(%rsp),%rcx
063b2b19 call      0x0000`0000`063B`A390
063b2b1e ud2
063b2b20 mov       0x28(%rsp),%rdx
063b2b25 mov       0x20(%rsp),%rax
063b2b2a add       $0x78,%rsp
063b2b2e ret

core::slice::index::impl$4::get_unchecked<usize>:
063b2b30 sub       $0x58,%rsp
063b2b34 mov       %r8,%r9
063b2b37 mov       %rdx,%r8
063b2b3a mov       %rcx,0x40(%rsp)
063b2b3f mov       %r8,0x48(%rsp)
063b2b44 mov       %r9,0x50(%rsp)
063b2b49 movq      $0,0x30(%rsp)
063b2b52 mov       %rcx,0x38(%rsp)
063b2b57 mov       0x30(%rsp),%rcx
063b2b5c mov       0x38(%rsp),%rdx
063b2b61 call      0x0000`0000`063B`25F0
063b2b66 mov       %rax,0x20(%rsp)
063b2b6b mov       %rdx,0x28(%rsp)
063b2b70 mov       0x28(%rsp),%rdx
063b2b75 mov       0x20(%rsp),%rax
063b2b7a add       $0x58,%rsp
063b2b7e ret

core::slice::index::impl$4::get_unchecked<u8>:
063b2b80 sub       $0x58,%rsp
063b2b84 mov       %r8,%r9
063b2b87 mov       %rdx,%r8
063b2b8a mov       %rcx,0x40(%rsp)
063b2b8f mov       %r8,0x48(%rsp)
063b2b94 mov       %r9,0x50(%rsp)
063b2b99 movq      $0,0x30(%rsp)
063b2ba2 mov       %rcx,0x38(%rsp)
063b2ba7 mov       0x30(%rsp),%rcx
063b2bac mov       0x38(%rsp),%rdx
063b2bb1 call      0x0000`0000`063B`27F0
063b2bb6 mov       %rax,0x20(%rsp)
063b2bbb mov       %rdx,0x28(%rsp)
063b2bc0 mov       0x28(%rsp),%rdx
063b2bc5 mov       0x20(%rsp),%rax
063b2bca add       $0x58,%rsp
063b2bce ret

core::slice::index::impl$4::index<u8>:
063b2bd0 sub       $0x68,%rsp
063b2bd4 mov       %r9,%rax
063b2bd7 mov       %r8,%r9
063b2bda mov       %rdx,%r8
063b2bdd mov       %rcx,0x50(%rsp)
063b2be2 mov       %r8,0x58(%rsp)
063b2be7 mov       %r9,0x60(%rsp)
063b2bec movq      $0,0x40(%rsp)
063b2bf5 mov       %rcx,0x48(%rsp)
063b2bfa mov       0x40(%rsp),%rcx
063b2bff mov       0x48(%rsp),%rdx
063b2c04 mov       %rax,0x20(%rsp)
063b2c09 call      0x0000`0000`063B`29D0
063b2c0e mov       %rax,0x30(%rsp)
063b2c13 mov       %rdx,0x38(%rsp)
063b2c18 mov       0x38(%rsp),%rdx
063b2c1d mov       0x30(%rsp),%rax
063b2c22 add       $0x68,%rsp
063b2c26 ret

core::slice::index::impl$4::index_mut<u8>:
063b2c30 sub       $0x68,%rsp
063b2c34 mov       %r9,%rax
063b2c37 mov       %r8,%r9
063b2c3a mov       %rdx,%r8
063b2c3d mov       %rcx,0x50(%rsp)
063b2c42 mov       %r8,0x58(%rsp)
063b2c47 mov       %r9,0x60(%rsp)
063b2c4c movq      $0,0x40(%rsp)
063b2c55 mov       %rcx,0x48(%rsp)
063b2c5a mov       0x40(%rsp),%rcx
063b2c5f mov       0x48(%rsp),%rdx
063b2c64 mov       %rax,0x20(%rsp)
063b2c69 call      0x0000`0000`063B`2A80
063b2c6e mov       %rax,0x30(%rsp)
063b2c73 mov       %rdx,0x38(%rsp)
063b2c78 mov       0x38(%rsp),%rdx
063b2c7d mov       0x30(%rsp),%rax
063b2c82 add       $0x68,%rsp
063b2c86 ret

core::slice::index::impl$5::get_unchecked<u8>:
063b2c90 sub       $0x78,%rsp
063b2c94 mov       %r8,0x30(%rsp)
063b2c99 mov       %rdx,%rax
063b2c9c mov       0x30(%rsp),%rdx
063b2ca1 mov       %rax,0x38(%rsp)
063b2ca6 mov       %rcx,%rax
063b2ca9 mov       0x38(%rsp),%rcx
063b2cae mov       %rax,0x40(%rsp)
063b2cb3 mov       %rax,0x60(%rsp)
063b2cb8 mov       %rcx,0x68(%rsp)
063b2cbd mov       %rdx,0x70(%rsp)
063b2cc2 call      0x0000`0000`063C`4AA0
063b2cc7 mov       %rax,0x48(%rsp)
063b2ccc mov       0x30(%rsp),%r9
063b2cd1 mov       0x38(%rsp),%r8
063b2cd6 mov       0x48(%rsp),%rax
063b2cdb mov       0x40(%rsp),%rcx
063b2ce0 mov       %rcx,0x50(%rsp)
063b2ce5 mov       %rax,0x58(%rsp)
063b2cea mov       0x50(%rsp),%rcx
063b2cef mov       0x58(%rsp),%rdx
063b2cf4 call      0x0000`0000`063B`27F0
063b2cf9 mov       %rax,0x20(%rsp)
063b2cfe mov       %rdx,0x28(%rsp)
063b2d03 mov       0x28(%rsp),%rdx
063b2d08 mov       0x20(%rsp),%rax
063b2d0d add       $0x78,%rsp
063b2d11 ret

core::slice::index::impl$5::get_unchecked<usize>:
063b2d20 sub       $0x78,%rsp
063b2d24 mov       %r8,0x30(%rsp)
063b2d29 mov       %rdx,%rax
063b2d2c mov       0x30(%rsp),%rdx
063b2d31 mov       %rax,0x38(%rsp)
063b2d36 mov       %rcx,%rax
063b2d39 mov       0x38(%rsp),%rcx
063b2d3e mov       %rax,0x40(%rsp)
063b2d43 mov       %rax,0x60(%rsp)
063b2d48 mov       %rcx,0x68(%rsp)
063b2d4d mov       %rdx,0x70(%rsp)
063b2d52 call      0x0000`0000`063C`4AD0
063b2d57 mov       %rax,0x48(%rsp)
063b2d5c mov       0x30(%rsp),%r9
063b2d61 mov       0x38(%rsp),%r8
063b2d66 mov       0x48(%rsp),%rax
063b2d6b mov       0x40(%rsp),%rcx
063b2d70 mov       %rcx,0x50(%rsp)
063b2d75 mov       %rax,0x58(%rsp)
063b2d7a mov       0x50(%rsp),%rcx
063b2d7f mov       0x58(%rsp),%rdx
063b2d84 call      0x0000`0000`063B`25F0
063b2d89 mov       %rax,0x20(%rsp)
063b2d8e mov       %rdx,0x28(%rsp)
063b2d93 mov       0x28(%rsp),%rdx
063b2d98 mov       0x20(%rsp),%rax
063b2d9d add       $0x78,%rsp
063b2da1 ret

core::slice::index::impl$5::get_unchecked<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b2db0 sub       $0x78,%rsp
063b2db4 mov       %r8,0x30(%rsp)
063b2db9 mov       %rdx,%rax
063b2dbc mov       0x30(%rsp),%rdx
063b2dc1 mov       %rax,0x38(%rsp)
063b2dc6 mov       %rcx,%rax
063b2dc9 mov       0x38(%rsp),%rcx
063b2dce mov       %rax,0x40(%rsp)
063b2dd3 mov       %rax,0x60(%rsp)
063b2dd8 mov       %rcx,0x68(%rsp)
063b2ddd mov       %rdx,0x70(%rsp)
063b2de2 call      0x0000`0000`063C`7DF0
063b2de7 mov       %rax,0x48(%rsp)
063b2dec mov       0x30(%rsp),%r9
063b2df1 mov       0x38(%rsp),%r8
063b2df6 mov       0x48(%rsp),%rax
063b2dfb mov       0x40(%rsp),%rcx
063b2e00 mov       %rcx,0x50(%rsp)
063b2e05 mov       %rax,0x58(%rsp)
063b2e0a mov       0x50(%rsp),%rcx
063b2e0f mov       0x58(%rsp),%rdx
063b2e14 call      0x0000`0000`063B`26F0
063b2e19 mov       %rax,0x20(%rsp)
063b2e1e mov       %rdx,0x28(%rsp)
063b2e23 mov       0x28(%rsp),%rdx
063b2e28 mov       0x20(%rsp),%rax
063b2e2d add       $0x78,%rsp
063b2e31 ret

core::slice::index::impl$5::index<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b2e40 sub       $0x68,%rsp
063b2e44 mov       %r9,0x30(%rsp)
063b2e49 mov       %r8,0x38(%rsp)
063b2e4e mov       %rdx,0x40(%rsp)
063b2e53 mov       %rcx,0x48(%rsp)
063b2e58 mov       %rcx,0x50(%rsp)
063b2e5d mov       %rdx,0x58(%rsp)
063b2e62 mov       %r8,0x60(%rsp)
063b2e67 cmp       %r8,%rcx
063b2e6a ja        0x0000`0000`063B`2E8C
063b2e6c mov       0x38(%rsp),%r8
063b2e71 mov       0x40(%rsp),%rdx
063b2e76 mov       0x48(%rsp),%rcx
063b2e7b call      0x0000`0000`063B`2DB0
063b2e80 mov       %rax,0x20(%rsp)
063b2e85 mov       %rdx,0x28(%rsp)
063b2e8a jmp       0x0000`0000`063B`2EA2
063b2e8c mov       0x30(%rsp),%r8
063b2e91 mov       0x38(%rsp),%rdx
063b2e96 mov       0x48(%rsp),%rcx
063b2e9b call      0x0000`0000`063B`A2E0
063b2ea0 ud2
063b2ea2 mov       0x28(%rsp),%rdx
063b2ea7 mov       0x20(%rsp),%rax
063b2eac add       $0x68,%rsp
063b2eb0 ret

core::slice::index::impl$5::index<u8>:
063b2ec0 sub       $0x68,%rsp
063b2ec4 mov       %r9,0x30(%rsp)
063b2ec9 mov       %r8,0x38(%rsp)
063b2ece mov       %rdx,0x40(%rsp)
063b2ed3 mov       %rcx,0x48(%rsp)
063b2ed8 mov       %rcx,0x50(%rsp)
063b2edd mov       %rdx,0x58(%rsp)
063b2ee2 mov       %r8,0x60(%rsp)
063b2ee7 cmp       %r8,%rcx
063b2eea ja        0x0000`0000`063B`2F0C
063b2eec mov       0x38(%rsp),%r8
063b2ef1 mov       0x40(%rsp),%rdx
063b2ef6 mov       0x48(%rsp),%rcx
063b2efb call      0x0000`0000`063B`2C90
063b2f00 mov       %rax,0x20(%rsp)
063b2f05 mov       %rdx,0x28(%rsp)
063b2f0a jmp       0x0000`0000`063B`2F22
063b2f0c mov       0x30(%rsp),%r8
063b2f11 mov       0x38(%rsp),%rdx
063b2f16 mov       0x48(%rsp),%rcx
063b2f1b call      0x0000`0000`063B`A2E0
063b2f20 ud2
063b2f22 mov       0x28(%rsp),%rdx
063b2f27 mov       0x20(%rsp),%rax
063b2f2c add       $0x68,%rsp
063b2f30 ret

core::slice::index::impl$6::index_mut<u8>:
063b2f40 sub       $0x18,%rsp
063b2f44 mov       %rcx,%rax
063b2f47 mov       %rax,8(%rsp)
063b2f4c mov       %rdx,0x10(%rsp)
063b2f51 add       $0x18,%rsp
063b2f55 ret

core::slice::index::impl$7::index<u8>:
063b2f60 sub       $0x98,%rsp
063b2f67 mov       %r9,0x48(%rsp)
063b2f6c mov       %r8,0x50(%rsp)
063b2f71 mov       %rdx,0x58(%rsp)
063b2f76 mov       %rcx,0x60(%rsp)
063b2f7b mov       %rdx,0x88(%rsp)
063b2f83 mov       %r8,0x90(%rsp)
063b2f8b call      0x0000`0000`063B`1480
063b2f90 mov       %rax,0x68(%rsp)
063b2f95 mov       0x68(%rsp),%rax
063b2f9a cmpq      $0xFFFF`FFFF`FFFF`FFFF,(%rax)
063b2f9e je        0x0000`0000`063B`2FD8
063b2fa0 mov       0x60(%rsp),%rax
063b2fa5 mov       (%rax),%rcx
063b2fa8 mov       %rcx,0x70(%rsp)
063b2fad mov       8(%rax),%rcx
063b2fb1 mov       %rcx,0x78(%rsp)
063b2fb6 mov       0x10(%rax),%rax
063b2fba mov       %rax,0x80(%rsp)
063b2fc2 lea       0x70(%rsp),%rcx
063b2fc7 call      0x0000`0000`063B`1490
063b2fcc mov       %rax,0x38(%rsp)
063b2fd1 mov       %rdx,0x40(%rsp)
063b2fd6 jmp       0x0000`0000`063B`2FE4
063b2fd8 mov       0x48(%rsp),%rcx
063b2fdd call      0x0000`0000`063B`A4F0
063b2fe2 ud2
063b2fe4 mov       0x48(%rsp),%rax
063b2fe9 mov       0x50(%rsp),%r9
063b2fee mov       0x58(%rsp),%r8
063b2ff3 mov       0x40(%rsp),%rdx
063b2ff8 mov       0x38(%rsp),%rcx
063b2ffd mov       %rax,0x20(%rsp)
063b3002 call      0x0000`0000`063B`29D0
063b3007 mov       %rax,0x28(%rsp)
063b300c mov       %rdx,0x30(%rsp)
063b3011 mov       0x30(%rsp),%rdx
063b3016 mov       0x28(%rsp),%rax
063b301b add       $0x98,%rsp
063b3022 ret

core::str::traits::impl$7::get:
063b3030 sub       $0x98,%rsp
063b3037 mov       %r9,0x40(%rsp)
063b303c mov       %r8,0x48(%rsp)
063b3041 mov       %rdx,0x50(%rsp)
063b3046 mov       %rcx,0x58(%rsp)
063b304b mov       %rcx,0x78(%rsp)
063b3050 mov       %rdx,0x80(%rsp)
063b3058 mov       %r8,0x88(%rsp)
063b3060 mov       %r9,0x90(%rsp)
063b3068 cmp       %rdx,%rcx
063b306b jbe       0x0000`0000`063B`3074
063b306d movb      $0,0x77(%rsp)
063b3072 jmp       0x0000`0000`063B`3096
063b3074 mov       0x58(%rsp),%r8
063b3079 mov       0x40(%rsp),%rdx
063b307e mov       0x48(%rsp),%rcx
063b3083 call      0x0000`0000`063B`D770
063b3088 mov       %al,0x3F(%rsp)
063b308c mov       0x3F(%rsp),%al
063b3090 and       $1,%al
063b3092 mov       %al,0x77(%rsp)
063b3096 testb     $1,0x77(%rsp)
063b309b jne       0x0000`0000`063B`30A4
063b309d movb      $0,0x76(%rsp)
063b30a2 jmp       0x0000`0000`063B`30C6
063b30a4 mov       0x50(%rsp),%r8
063b30a9 mov       0x40(%rsp),%rdx
063b30ae mov       0x48(%rsp),%rcx
063b30b3 call      0x0000`0000`063B`D770
063b30b8 mov       %al,0x3E(%rsp)
063b30bc mov       0x3E(%rsp),%al
063b30c0 and       $1,%al
063b30c2 mov       %al,0x76(%rsp)
063b30c6 testb     $1,0x76(%rsp)
063b30cb jne       0x0000`0000`063B`30D8
063b30cd movq      $0,0x60(%rsp)
063b30d6 jmp       0x0000`0000`063B`310F
063b30d8 mov       0x40(%rsp),%r9
063b30dd mov       0x48(%rsp),%r8
063b30e2 mov       0x50(%rsp),%rdx
063b30e7 mov       0x58(%rsp),%rcx
063b30ec call      0x0000`0000`063B`3130
063b30f1 mov       %rax,0x28(%rsp)
063b30f6 mov       %rdx,0x30(%rsp)
063b30fb mov       0x30(%rsp),%rax
063b3100 mov       0x28(%rsp),%rcx
063b3105 mov       %rcx,0x60(%rsp)
063b310a mov       %rax,0x68(%rsp)
063b310f mov       0x60(%rsp),%rax
063b3114 mov       0x68(%rsp),%rdx
063b3119 add       $0x98,%rsp
063b3120 ret

core::str::traits::impl$7::get_unchecked:
063b3130 sub       $0xD8,%rsp
063b3137 mov       %r9,0x48(%rsp)
063b313c mov       %r8,0x58(%rsp)
063b3141 mov       %rdx,%rax
063b3144 mov       0x48(%rsp),%rdx
063b3149 mov       %rax,0x50(%rsp)
063b314e mov       %rcx,%r8
063b3151 mov       0x58(%rsp),%rcx
063b3156 mov       %r8,0x60(%rsp)
063b315b mov       %r8,0x70(%rsp)
063b3160 mov       %rax,0x78(%rsp)
063b3165 mov       %rcx,0x80(%rsp)
063b316d mov       %rdx,0x88(%rsp)
063b3175 mov       %rcx,0x90(%rsp)
063b317d mov       %rdx,0x98(%rsp)
063b3185 call      0x0000`0000`063C`4B40
063b318a mov       %rax,0x68(%rsp)
063b318f mov       0x60(%rsp),%rcx
063b3194 mov       0x68(%rsp),%rax
063b3199 mov       %rax,0xB0(%rsp)
063b31a1 mov       %rcx,0xB8(%rsp)
063b31a9 mov       %rax,0xC0(%rsp)
063b31b1 mov       %rcx,0xC8(%rsp)
063b31b9 add       %rcx,%rax
063b31bc mov       %rax,0xD0(%rsp)
063b31c4 mov       0xD0(%rsp),%rax
063b31cc mov       %rax,0x40(%rsp)
063b31d1 mov       %rax,0xA0(%rsp)
063b31d9 mov       0x60(%rsp),%rcx
063b31de mov       0x50(%rsp),%rax
063b31e3 sub       %rcx,%rax
063b31e6 mov       %rax,0x38(%rsp)
063b31eb setb      %al
063b31ee test      $1,%al
063b31f0 jne       0x0000`0000`063B`3215
063b31f2 mov       0x38(%rsp),%rdx
063b31f7 mov       0x40(%rsp),%rcx
063b31fc mov       %rdx,0xA8(%rsp)
063b3204 call      0x0000`0000`063C`8BA0
063b3209 mov       %rax,0x28(%rsp)
063b320e mov       %rdx,0x30(%rsp)
063b3213 jmp       0x0000`0000`063B`322F
063b3215 lea       0x63C`D160,%rcx
063b321c lea       0x63C`D5E0,%r8
063b3223 mov       $0x21,%edx
063b3228 call      0x0000`0000`063B`2030
063b322d ud2
063b322f mov       0x30(%rsp),%rdx
063b3234 mov       0x28(%rsp),%rax
063b3239 add       $0xD8,%rsp
063b3240 ret

core::str::traits::impl$7::index:
063b3250 sub       $0xB8,%rsp
063b3257 mov       %r9,0x30(%rsp)
063b325c mov       %r8,0x38(%rsp)
063b3261 mov       0xE0(%rsp),%rax
063b3269 mov       %rax,0x40(%rsp)
063b326e mov       %rcx,0x78(%rsp)
063b3273 mov       %rdx,0x80(%rsp)
063b327b mov       %r8,0x88(%rsp)
063b3283 mov       %r9,0x90(%rsp)
063b328b mov       %rcx,0x58(%rsp)
063b3290 mov       %rdx,0x60(%rsp)
063b3295 mov       0x58(%rsp),%rax
063b329a mov       %rax,0x48(%rsp)
063b329f mov       %rax,0x98(%rsp)
063b32a7 mov       0x60(%rsp),%rax
063b32ac mov       %rax,0x50(%rsp)
063b32b1 mov       %rax,0xA0(%rsp)
063b32b9 call      0x0000`0000`063B`3030
063b32be mov       %rdx,0x70(%rsp)
063b32c3 mov       %rax,0x68(%rsp)
063b32c8 mov       0x68(%rsp),%rax
063b32cd test      %rax,%rax
063b32d0 setne     %al
063b32d3 movzbl    %al,%eax
063b32d6 je        0x0000`0000`063B`32DE
063b32d8 jmp       0x0000`0000`063B`32DA
063b32da jmp       0x0000`0000`063B`3305
063b32dc ud2
063b32de mov       0x50(%rsp),%r9
063b32e3 mov       0x48(%rsp),%r8
063b32e8 mov       0x30(%rsp),%rdx
063b32ed mov       0x38(%rsp),%rcx
063b32f2 mov       0x40(%rsp),%r10
063b32f7 mov       %rsp,%rax
063b32fa mov       %r10,0x20(%rax)
063b32fe call      0x0000`0000`063B`CFA0
063b3303 ud2
063b3305 mov       0x68(%rsp),%rax
063b330a mov       0x70(%rsp),%rdx
063b330f mov       %rax,0xA8(%rsp)
063b3317 mov       %rdx,0xB0(%rsp)
063b331f add       $0xB8,%rsp
063b3326 ret

core::str::traits::impl$8::get:
063b3330 sub       $0x78,%rsp
063b3334 mov       %r8,0x30(%rsp)
063b3339 mov       %rdx,%rax
063b333c mov       0x30(%rsp),%rdx
063b3341 mov       %rax,0x38(%rsp)
063b3346 mov       %rcx,%r8
063b3349 mov       0x38(%rsp),%rcx
063b334e mov       %r8,0x40(%rsp)
063b3353 mov       %r8,0x60(%rsp)
063b3358 mov       %rcx,0x68(%rsp)
063b335d mov       %rdx,0x70(%rsp)
063b3362 call      0x0000`0000`063B`D770
063b3367 mov       %al,0x4F(%rsp)
063b336b mov       0x4F(%rsp),%al
063b336f test      $1,%al
063b3371 jne       0x0000`0000`063B`3380
063b3373 jmp       0x0000`0000`063B`3375
063b3375 movq      $0,0x50(%rsp)
063b337e jmp       0x0000`0000`063B`33B2
063b3380 mov       0x30(%rsp),%r8
063b3385 mov       0x38(%rsp),%rdx
063b338a mov       0x40(%rsp),%rcx
063b338f call      0x0000`0000`063B`33D0
063b3394 mov       %rax,0x20(%rsp)
063b3399 mov       %rdx,0x28(%rsp)
063b339e mov       0x28(%rsp),%rax
063b33a3 mov       0x20(%rsp),%rcx
063b33a8 mov       %rcx,0x50(%rsp)
063b33ad mov       %rax,0x58(%rsp)
063b33b2 mov       0x50(%rsp),%rax
063b33b7 mov       0x58(%rsp),%rdx
063b33bc add       $0x78,%rsp
063b33c0 ret

core::str::traits::impl$8::get_unchecked:
063b33d0 sub       $0x88,%rsp
063b33d7 mov       %r8,0x38(%rsp)
063b33dc mov       %rdx,%rax
063b33df mov       0x38(%rsp),%rdx
063b33e4 mov       %rax,0x40(%rsp)
063b33e9 mov       %rcx,%rax
063b33ec mov       0x40(%rsp),%rcx
063b33f1 mov       %rax,0x48(%rsp)
063b33f6 mov       %rax,0x58(%rsp)
063b33fb mov       %rcx,0x60(%rsp)
063b3400 mov       %rdx,0x68(%rsp)
063b3405 mov       %rcx,0x70(%rsp)
063b340a mov       %rdx,0x78(%rsp)
063b340f call      0x0000`0000`063C`4B40
063b3414 mov       %rax,0x50(%rsp)
063b3419 mov       %rax,0x80(%rsp)
063b3421 mov       0x48(%rsp),%rdx
063b3426 mov       0x50(%rsp),%rcx
063b342b call      0x0000`0000`063C`8BA0
063b3430 mov       %rax,0x28(%rsp)
063b3435 mov       %rdx,0x30(%rsp)
063b343a mov       0x30(%rsp),%rdx
063b343f mov       0x28(%rsp),%rax
063b3444 add       $0x88,%rsp
063b344b ret

core::str::traits::impl$8::index:
063b3450 sub       $0x88,%rsp
063b3457 mov       %r9,0x28(%rsp)
063b345c mov       %r8,0x30(%rsp)
063b3461 mov       %rdx,0x38(%rsp)
063b3466 mov       %rcx,0x40(%rsp)
063b346b mov       %rcx,0x58(%rsp)
063b3470 mov       %rdx,0x60(%rsp)
063b3475 mov       %r8,0x68(%rsp)
063b347a mov       %rcx,0x70(%rsp)
063b347f call      0x0000`0000`063B`3330
063b3484 mov       %rdx,0x50(%rsp)
063b3489 mov       %rax,0x48(%rsp)
063b348e mov       0x48(%rsp),%rax
063b3493 test      %rax,%rax
063b3496 setne     %al
063b3499 movzbl    %al,%eax
063b349c je        0x0000`0000`063B`34A4
063b349e jmp       0x0000`0000`063B`34A0
063b34a0 jmp       0x0000`0000`063B`34CB
063b34a2 ud2
063b34a4 mov       0x40(%rsp),%r9
063b34a9 mov       0x30(%rsp),%rdx
063b34ae mov       0x38(%rsp),%rcx
063b34b3 mov       0x28(%rsp),%r8
063b34b8 mov       %rsp,%rax
063b34bb mov       %r8,0x20(%rax)
063b34bf xor       %eax,%eax
063b34c1 mov       %eax,%r8d
063b34c4 call      0x0000`0000`063B`CFA0
063b34c9 ud2
063b34cb mov       0x48(%rsp),%rax
063b34d0 mov       0x50(%rsp),%rdx
063b34d5 mov       %rax,0x78(%rsp)
063b34da mov       %rdx,0x80(%rsp)
063b34e2 add       $0x88,%rsp
063b34e9 ret

core::str::traits::impl$9::get:
063b34f0 sub       $0x78,%rsp
063b34f4 mov       %r8,0x30(%rsp)
063b34f9 mov       %rdx,%rax
063b34fc mov       0x30(%rsp),%rdx
063b3501 mov       %rax,0x38(%rsp)
063b3506 mov       %rcx,%r8
063b3509 mov       0x38(%rsp),%rcx
063b350e mov       %r8,0x40(%rsp)
063b3513 mov       %r8,0x60(%rsp)
063b3518 mov       %rcx,0x68(%rsp)
063b351d mov       %rdx,0x70(%rsp)
063b3522 call      0x0000`0000`063B`D770
063b3527 mov       %al,0x4F(%rsp)
063b352b mov       0x4F(%rsp),%al
063b352f test      $1,%al
063b3531 jne       0x0000`0000`063B`3540
063b3533 jmp       0x0000`0000`063B`3535
063b3535 movq      $0,0x50(%rsp)
063b353e jmp       0x0000`0000`063B`3572
063b3540 mov       0x30(%rsp),%r8
063b3545 mov       0x38(%rsp),%rdx
063b354a mov       0x40(%rsp),%rcx
063b354f call      0x0000`0000`063B`3590
063b3554 mov       %rax,0x20(%rsp)
063b3559 mov       %rdx,0x28(%rsp)
063b355e mov       0x28(%rsp),%rax
063b3563 mov       0x20(%rsp),%rcx
063b3568 mov       %rcx,0x50(%rsp)
063b356d mov       %rax,0x58(%rsp)
063b3572 mov       0x50(%rsp),%rax
063b3577 mov       0x58(%rsp),%rdx
063b357c add       $0x78,%rsp
063b3580 ret

core::str::traits::impl$9::get_unchecked:
063b3590 sub       $0xC8,%rsp
063b3597 mov       %r8,0x48(%rsp)
063b359c mov       %rdx,%rax
063b359f mov       0x48(%rsp),%rdx
063b35a4 mov       %rax,0x50(%rsp)
063b35a9 mov       %rcx,%rax
063b35ac mov       0x50(%rsp),%rcx
063b35b1 mov       %rax,0x58(%rsp)
063b35b6 mov       %rax,0x68(%rsp)
063b35bb mov       %rcx,0x70(%rsp)
063b35c0 mov       %rdx,0x78(%rsp)
063b35c5 mov       %rcx,0x80(%rsp)
063b35cd mov       %rdx,0x88(%rsp)
063b35d5 call      0x0000`0000`063C`4B40
063b35da mov       %rax,0x60(%rsp)
063b35df mov       0x58(%rsp),%rcx
063b35e4 mov       0x60(%rsp),%rax
063b35e9 mov       %rax,0xA0(%rsp)
063b35f1 mov       %rcx,0xA8(%rsp)
063b35f9 mov       %rax,0xB0(%rsp)
063b3601 mov       %rcx,0xB8(%rsp)
063b3609 add       %rcx,%rax
063b360c mov       %rax,0xC0(%rsp)
063b3614 mov       0xC0(%rsp),%rax
063b361c mov       %rax,0x40(%rsp)
063b3621 mov       %rax,0x90(%rsp)
063b3629 mov       0x48(%rsp),%rdx
063b362e mov       0x50(%rsp),%rcx
063b3633 call      0x0000`0000`063C`4AA0
063b3638 mov       %rax,0x38(%rsp)
063b363d mov       0x58(%rsp),%rcx
063b3642 mov       0x38(%rsp),%rax
063b3647 sub       %rcx,%rax
063b364a mov       %rax,0x30(%rsp)
063b364f setb      %al
063b3652 test      $1,%al
063b3654 jne       0x0000`0000`063B`3679
063b3656 mov       0x30(%rsp),%rdx
063b365b mov       0x40(%rsp),%rcx
063b3660 mov       %rdx,0x98(%rsp)
063b3668 call      0x0000`0000`063C`8BA0
063b366d mov       %rax,0x20(%rsp)
063b3672 mov       %rdx,0x28(%rsp)
063b3677 jmp       0x0000`0000`063B`3693
063b3679 lea       0x63C`D160,%rcx
063b3680 lea       0x63C`D5F8,%r8
063b3687 mov       $0x21,%edx
063b368c call      0x0000`0000`063B`2030
063b3691 ud2
063b3693 mov       0x28(%rsp),%rdx
063b3698 mov       0x20(%rsp),%rax
063b369d add       $0xC8,%rsp
063b36a4 ret

core::str::traits::impl$9::index:
063b36b0 sub       $0xB8,%rsp
063b36b7 mov       %r9,0x38(%rsp)
063b36bc mov       %r8,0x40(%rsp)
063b36c1 mov       %rdx,%rax
063b36c4 mov       0x40(%rsp),%rdx
063b36c9 mov       %rax,0x48(%rsp)
063b36ce mov       %rcx,%rax
063b36d1 mov       0x48(%rsp),%rcx
063b36d6 mov       %rax,0x50(%rsp)
063b36db mov       %rax,0x80(%rsp)
063b36e3 mov       %rcx,0x88(%rsp)
063b36eb mov       %rdx,0x90(%rsp)
063b36f3 call      0x0000`0000`063B`D700
063b36f8 mov       %rax,0x58(%rsp)
063b36fd mov       0x40(%rsp),%r8
063b3702 mov       0x48(%rsp),%rdx
063b3707 mov       0x50(%rsp),%rcx
063b370c mov       0x58(%rsp),%rax
063b3711 mov       %rcx,0x60(%rsp)
063b3716 mov       %rax,0x68(%rsp)
063b371b mov       0x60(%rsp),%rax
063b3720 mov       %rax,0x28(%rsp)
063b3725 mov       %rax,0x98(%rsp)
063b372d mov       0x68(%rsp),%rax
063b3732 mov       %rax,0x30(%rsp)
063b3737 mov       %rax,0xA0(%rsp)
063b373f call      0x0000`0000`063B`34F0
063b3744 mov       %rdx,0x78(%rsp)
063b3749 mov       %rax,0x70(%rsp)
063b374e mov       0x70(%rsp),%rax
063b3753 test      %rax,%rax
063b3756 setne     %al
063b3759 movzbl    %al,%eax
063b375c je        0x0000`0000`063B`3764
063b375e jmp       0x0000`0000`063B`3760
063b3760 jmp       0x0000`0000`063B`378B
063b3762 ud2
063b3764 mov       0x30(%rsp),%r9
063b3769 mov       0x28(%rsp),%r8
063b376e mov       0x40(%rsp),%rdx
063b3773 mov       0x48(%rsp),%rcx
063b3778 mov       0x38(%rsp),%r10
063b377d mov       %rsp,%rax
063b3780 mov       %r10,0x20(%rax)
063b3784 call      0x0000`0000`063B`CFA0
063b3789 ud2
063b378b mov       0x70(%rsp),%rax
063b3790 mov       0x78(%rsp),%rdx
063b3795 mov       %rax,0xA8(%rsp)
063b379d mov       %rdx,0xB0(%rsp)
063b37a5 add       $0xB8,%rsp
063b37ac ret

core::str::validations::utf8_first_byte:
063b37b0 sub       $0x28,%rsp
063b37b4 mov       %cl,0x21(%rsp)
063b37b8 mov       %cl,0x23(%rsp)
063b37bc mov       %edx,0x24(%rsp)
063b37c0 mov       %edx,%eax
063b37c2 and       $0xFFFF`FFF8,%eax
063b37c5 cmp       $0,%eax
063b37c8 setne     %al
063b37cb mov       %dl,%cl
063b37cd and       $7,%cl
063b37d0 mov       $0x7F,%dl
063b37d2 shr       %cl,%dl
063b37d4 mov       %dl,0x22(%rsp)
063b37d8 test      $1,%al
063b37da jne       0x0000`0000`063B`37EE
063b37dc mov       0x22(%rsp),%cl
063b37e0 mov       0x21(%rsp),%al
063b37e4 and       %cl,%al
063b37e6 movzbl    %al,%eax
063b37e9 add       $0x28,%rsp
063b37ed ret
063b37ee lea       0x63C`D6B0,%rcx
063b37f5 lea       0x63C`D690,%r8
063b37fc mov       $0x24,%edx
063b3801 call      0x0000`0000`063B`2030
063b3806 ud2

core::str::validations::utf8_acc_cont_byte:
063b3810 sub       $0x10,%rsp
063b3814 mov       %dl,3(%rsp)
063b3818 mov       %ecx,8(%rsp)
063b381c mov       %dl,0xF(%rsp)
063b3820 shl       $6,%ecx
063b3823 mov       %ecx,4(%rsp)
063b3827 mov       4(%rsp),%eax
063b382b mov       3(%rsp),%cl
063b382f and       $0x3F,%cl
063b3832 movzbl    %cl,%ecx
063b3835 or        %ecx,%eax
063b3837 add       $0x10,%rsp
063b383b ret

core::str::validations::utf8_is_cont_byte:
063b3840 push      %rax
063b3841 mov       %cl,7(%rsp)
063b3845 cmp       $0xC0,%cl
063b3848 setl      %al
063b384b and       $1,%al
063b384d movzbl    %al,%eax
063b3850 pop       %rcx
063b3851 ret

core::str::validations::next_code_point<core::slice::iter::Iter<u8> >:
063b3860 sub       $0xD8,%rsp
063b3867 mov       %rcx,0x80(%rsp)
063b386f mov       %rcx,0xA8(%rsp)
063b3877 call      0x0000`0000`063C`6DF0
063b387c mov       %rax,0x88(%rsp)
063b3884 mov       0x88(%rsp),%rcx
063b388c call      0x0000`0000`063B`1F20
063b3891 mov       %rax,0x98(%rsp)
063b3899 mov       0x98(%rsp),%rax
063b38a1 test      %rax,%rax
063b38a4 sete      %al
063b38a7 movzbl    %al,%eax
063b38aa jne       0x0000`0000`063B`38B2
063b38ac jmp       0x0000`0000`063B`38AE
063b38ae jmp       0x0000`0000`063B`38D5
063b38b0 ud2
063b38b2 mov       0x98(%rsp),%rax
063b38ba mov       %rax,0xB8(%rsp)
063b38c2 mov       (%rax),%al
063b38c4 mov       %al,0x7F(%rsp)
063b38c8 mov       %al,0xC7(%rsp)
063b38cf cmp       $0x80,%al
063b38d1 jb        0x0000`0000`063B`3919
063b38d3 jmp       0x0000`0000`063B`38FE
063b38d5 call      0x0000`0000`063B`2010
063b38da mov       %edx,0x94(%rsp)
063b38e1 mov       %eax,0x90(%rsp)
063b38e8 mov       0x90(%rsp),%eax
063b38ef mov       0x94(%rsp),%edx
063b38f6 add       $0xD8,%rsp
063b38fd ret
063b38fe mov       0x7F(%rsp),%cl
063b3902 mov       $2,%edx
063b3907 call      0x0000`0000`063B`37B0
063b390c mov       %eax,0x78(%rsp)
063b3910 mov       %eax,0xC8(%rsp)
063b3917 jmp       0x0000`0000`063B`3934
063b3919 mov       0x7F(%rsp),%al
063b391d movzbl    %al,%eax
063b3920 mov       %eax,0x94(%rsp)
063b3927 movl      $1,0x90(%rsp)
063b3932 jmp       0x0000`0000`063B`38E8
063b3934 mov       0x80(%rsp),%rcx
063b393c call      0x0000`0000`063C`6DF0
063b3941 mov       %rax,0x70(%rsp)
063b3946 mov       0x70(%rsp),%rcx
063b394b lea       0x63C`D6D8,%rdx
063b3952 call      0x0000`0000`063B`19A0
063b3957 mov       %rax,0x68(%rsp)
063b395c mov       0x78(%rsp),%ecx
063b3960 mov       0x68(%rsp),%rax
063b3965 mov       (%rax),%dl
063b3967 mov       %dl,0x67(%rsp)
063b396b mov       %dl,0xCE(%rsp)
063b3972 call      0x0000`0000`063B`3810
063b3977 mov       %eax,0xA4(%rsp)
063b397e mov       0x7F(%rsp),%al
063b3982 cmp       $0xE0,%al
063b3984 jae       0x0000`0000`063B`39A4
063b3986 mov       0xA4(%rsp),%eax
063b398d mov       %eax,0x94(%rsp)
063b3994 movl      $1,0x90(%rsp)
063b399f jmp       0x0000`0000`063B`38E8
063b39a4 mov       0x80(%rsp),%rcx
063b39ac call      0x0000`0000`063C`6DF0
063b39b1 mov       %rax,0x58(%rsp)
063b39b6 mov       0x58(%rsp),%rcx
063b39bb lea       0x63C`D6F0,%rdx
063b39c2 call      0x0000`0000`063B`19A0
063b39c7 mov       %rax,0x50(%rsp)
063b39cc mov       0x67(%rsp),%al
063b39d0 mov       0x50(%rsp),%rcx
063b39d5 mov       (%rcx),%dl
063b39d7 mov       %dl,0xCF(%rsp)
063b39de and       $0x3F,%al
063b39e0 movzbl    %al,%ecx
063b39e3 call      0x0000`0000`063B`3810
063b39e8 mov       %eax,0x4C(%rsp)
063b39ec mov       %eax,0xD0(%rsp)
063b39f3 mov       0x78(%rsp),%eax
063b39f7 shl       $0xC,%eax
063b39fa mov       %eax,0x48(%rsp)
063b39fe mov       0x7F(%rsp),%al
063b3a02 mov       0x4C(%rsp),%edx
063b3a06 mov       0x48(%rsp),%ecx
063b3a0a or        %edx,%ecx
063b3a0c mov       %ecx,0xA4(%rsp)
063b3a13 cmp       $0xF0,%al
063b3a15 jb        0x0000`0000`063B`3986
063b3a1b mov       0x80(%rsp),%rcx
063b3a23 call      0x0000`0000`063C`6DF0
063b3a28 mov       %rax,0x40(%rsp)
063b3a2d mov       0x40(%rsp),%rcx
063b3a32 lea       0x63C`D708,%rdx
063b3a39 call      0x0000`0000`063B`19A0
063b3a3e mov       %rax,0x38(%rsp)
063b3a43 mov       0x78(%rsp),%eax
063b3a47 mov       0x38(%rsp),%rcx
063b3a4c mov       (%rcx),%cl
063b3a4e mov       %cl,0x33(%rsp)
063b3a52 mov       %cl,0xD7(%rsp)
063b3a59 and       $7,%eax
063b3a5c shl       $0x12,%eax
063b3a5f mov       %eax,0x34(%rsp)
063b3a63 mov       0x33(%rsp),%dl
063b3a67 mov       0x4C(%rsp),%ecx
063b3a6b call      0x0000`0000`063B`3810
063b3a70 mov       %eax,0x2C(%rsp)
063b3a74 mov       0x2C(%rsp),%ecx
063b3a78 mov       0x34(%rsp),%eax
063b3a7c or        %ecx,%eax
063b3a7e mov       %eax,0xA4(%rsp)
063b3a85 jmp       0x0000`0000`063B`3986

core::ptr::metadata::metadata<slice$<u8> >:
063b3a90 sub       $0x20,%rsp
063b3a94 mov       %rcx,0x10(%rsp)
063b3a99 mov       %rdx,0x18(%rsp)
063b3a9e mov       %rcx,(%rsp)
063b3aa2 mov       %rdx,8(%rsp)
063b3aa7 mov       8(%rsp),%rax
063b3aac add       $0x20,%rsp
063b3ab0 ret

core::ptr::metadata::metadata<slice$<usize> >:
063b3ac0 sub       $0x20,%rsp
063b3ac4 mov       %rcx,0x10(%rsp)
063b3ac9 mov       %rdx,0x18(%rsp)
063b3ace mov       %rcx,(%rsp)
063b3ad2 mov       %rdx,8(%rsp)
063b3ad7 mov       8(%rsp),%rax
063b3adc add       $0x20,%rsp
063b3ae0 ret

core::ptr::metadata::metadata<slice$<core::mem::maybe_uninit::MaybeUninit<u8> > >:
063b3af0 sub       $0x20,%rsp
063b3af4 mov       %rcx,0x10(%rsp)
063b3af9 mov       %rdx,0x18(%rsp)
063b3afe mov       %rcx,(%rsp)
063b3b02 mov       %rdx,8(%rsp)
063b3b07 mov       8(%rsp),%rax
063b3b0c add       $0x20,%rsp
063b3b10 ret

core::ptr::metadata::from_raw_parts<slice$<usize> >:
063b3b20 sub       $0x30,%rsp
063b3b24 mov       %rcx,0x20(%rsp)
063b3b29 mov       %rdx,0x28(%rsp)
063b3b2e mov       %rcx,0x10(%rsp)
063b3b33 mov       %rdx,0x18(%rsp)
063b3b38 mov       0x10(%rsp),%rcx
063b3b3d mov       0x18(%rsp),%rax
063b3b42 mov       %rcx,(%rsp)
063b3b46 mov       %rax,8(%rsp)
063b3b4b mov       (%rsp),%rax
063b3b4f mov       8(%rsp),%rdx
063b3b54 add       $0x30,%rsp
063b3b58 ret

core::ptr::metadata::from_raw_parts<slice$<core::mem::maybe_uninit::MaybeUninit<u8> > >:
063b3b60 sub       $0x30,%rsp
063b3b64 mov       %rcx,0x20(%rsp)
063b3b69 mov       %rdx,0x28(%rsp)
063b3b6e mov       %rcx,0x10(%rsp)
063b3b73 mov       %rdx,0x18(%rsp)
063b3b78 mov       0x10(%rsp),%rcx
063b3b7d mov       0x18(%rsp),%rax
063b3b82 mov       %rcx,(%rsp)
063b3b86 mov       %rax,8(%rsp)
063b3b8b mov       (%rsp),%rax
063b3b8f mov       8(%rsp),%rdx
063b3b94 add       $0x30,%rsp
063b3b98 ret

core::ptr::metadata::from_raw_parts<slice$<array$<usize,4> > >:
063b3ba0 sub       $0x30,%rsp
063b3ba4 mov       %rcx,0x20(%rsp)
063b3ba9 mov       %rdx,0x28(%rsp)
063b3bae mov       %rcx,0x10(%rsp)
063b3bb3 mov       %rdx,0x18(%rsp)
063b3bb8 mov       0x10(%rsp),%rcx
063b3bbd mov       0x18(%rsp),%rax
063b3bc2 mov       %rcx,(%rsp)
063b3bc6 mov       %rax,8(%rsp)
063b3bcb mov       (%rsp),%rax
063b3bcf mov       8(%rsp),%rdx
063b3bd4 add       $0x30,%rsp
063b3bd8 ret

core::ptr::metadata::from_raw_parts<slice$<u8> >:
063b3be0 sub       $0x30,%rsp
063b3be4 mov       %rcx,0x20(%rsp)
063b3be9 mov       %rdx,0x28(%rsp)
063b3bee mov       %rcx,0x10(%rsp)
063b3bf3 mov       %rdx,0x18(%rsp)
063b3bf8 mov       0x10(%rsp),%rcx
063b3bfd mov       0x18(%rsp),%rax
063b3c02 mov       %rcx,(%rsp)
063b3c06 mov       %rax,8(%rsp)
063b3c0b mov       (%rsp),%rax
063b3c0f mov       8(%rsp),%rdx
063b3c14 add       $0x30,%rsp
063b3c18 ret

core::ptr::metadata::from_raw_parts_mut<slice$<u8> >:
063b3c20 sub       $0x30,%rsp
063b3c24 mov       %rcx,0x20(%rsp)
063b3c29 mov       %rdx,0x28(%rsp)
063b3c2e mov       %rcx,0x10(%rsp)
063b3c33 mov       %rdx,0x18(%rsp)
063b3c38 mov       0x10(%rsp),%rcx
063b3c3d mov       0x18(%rsp),%rax
063b3c42 mov       %rcx,(%rsp)
063b3c46 mov       %rax,8(%rsp)
063b3c4b mov       (%rsp),%rax
063b3c4f mov       8(%rsp),%rdx
063b3c54 add       $0x30,%rsp
063b3c58 ret

core::ptr::const_ptr::impl$0::is_null<core::fmt::ArgumentV1>:
063b3c60 sub       $0x38,%rsp
063b3c64 mov       %rcx,0x30(%rsp)
063b3c69 mov       %rcx,0x28(%rsp)
063b3c6e mov       0x28(%rsp),%rcx
063b3c73 xor       %eax,%eax
063b3c75 mov       %eax,%edx
063b3c77 call      0x0000`0000`063C`4900
063b3c7c mov       %al,0x27(%rsp)
063b3c80 mov       0x27(%rsp),%al
063b3c84 and       $1,%al
063b3c86 movzbl    %al,%eax
063b3c89 add       $0x38,%rsp
063b3c8d ret

core::ptr::const_ptr::impl$1::as_ptr<core::fmt::ArgumentV1>:
063b3c90 sub       $0x10,%rsp
063b3c94 mov       %rcx,%rax
063b3c97 mov       %rax,(%rsp)
063b3c9b mov       %rdx,8(%rsp)
063b3ca0 add       $0x10,%rsp
063b3ca4 ret

core::ptr::mut_ptr::impl$0::is_null<core::fmt::ArgumentV1>:
063b3cb0 sub       $0x38,%rsp
063b3cb4 mov       %rcx,0x30(%rsp)
063b3cb9 mov       %rcx,0x28(%rsp)
063b3cbe mov       0x28(%rsp),%rcx
063b3cc3 xor       %eax,%eax
063b3cc5 mov       %eax,%edx
063b3cc7 call      0x0000`0000`063B`FE00
063b3ccc mov       %al,0x27(%rsp)
063b3cd0 mov       0x27(%rsp),%al
063b3cd4 and       $1,%al
063b3cd6 movzbl    %al,%eax
063b3cd9 add       $0x38,%rsp
063b3cdd ret

core::convert::impl$4::from<core::fmt::Error>:
063b3ce0 push      %rax
063b3ce1 pop       %rax
063b3ce2 ret

core::any::TypeId::of<core::panic::panic_info::impl$0::internal_constructor::NoPayload>:
063b3cf0 sub       $0x18,%rsp
063b3cf4 movabs    $0x93ED`F856`EE82`B78A,%rax
063b3cfe mov       %rax,0x10(%rsp)
063b3d03 mov       0x10(%rsp),%rax
063b3d08 mov       %rax,(%rsp)
063b3d0c mov       (%rsp),%rax
063b3d10 mov       %rax,8(%rsp)
063b3d15 mov       8(%rsp),%rax
063b3d1a add       $0x18,%rsp
063b3d1e ret

core::fmt::Formatter::new:
063b3d20 sub       $0x30,%rsp
063b3d24 mov       %rcx,%rax
063b3d27 mov       %rdx,0x20(%rsp)
063b3d2c mov       %r8,0x28(%rsp)
063b3d31 movq      $0,(%rsp)
063b3d39 movq      $0,0x10(%rsp)
063b3d42 movl      $0,0x30(%rcx)
063b3d49 movl      $0x20,0x34(%rcx)
063b3d50 movb      $3,0x38(%rcx)
063b3d54 mov       (%rsp),%r10
063b3d58 mov       8(%rsp),%r9
063b3d5d mov       %r10,(%rcx)
063b3d60 mov       %r9,8(%rcx)
063b3d64 mov       0x10(%rsp),%r10
063b3d69 mov       0x18(%rsp),%r9
063b3d6e mov       %r10,0x10(%rcx)
063b3d72 mov       %r9,0x18(%rcx)
063b3d76 mov       %rdx,0x20(%rcx)
063b3d7a mov       %r8,0x28(%rcx)
063b3d7e add       $0x30,%rsp
063b3d82 ret

core::fmt::USIZE_MARKER::closure$0:
063b3d90 sub       $0x48,%rsp
063b3d94 mov       %rdx,0x20(%rsp)
063b3d99 mov       %rcx,%rax
063b3d9c mov       0x20(%rsp),%rcx
063b3da1 mov       %rax,0x28(%rsp)
063b3da6 mov       %rcx,0x30(%rsp)
063b3dab mov       %r8,0x38(%rsp)
063b3db0 call      0x0000`0000`063C`95E0
063b3db5 mov       %rax,0x40(%rsp)
063b3dba jmp       0x0000`0000`063B`3DBA

core::fmt::ArgumentV1::new<char>:
063b3dc0 sub       $0x48,%rsp
063b3dc4 mov       %rcx,8(%rsp)
063b3dc9 mov       %rcx,0x28(%rsp)
063b3dce mov       %rdx,0x30(%rsp)
063b3dd3 mov       %rdx,0x38(%rsp)
063b3dd8 mov       0x38(%rsp),%rax
063b3ddd mov       %rax,0x10(%rsp)
063b3de2 mov       8(%rsp),%rax
063b3de7 mov       %rax,0x40(%rsp)
063b3dec mov       0x40(%rsp),%rax
063b3df1 mov       %rax,(%rsp)
063b3df5 mov       0x10(%rsp),%rax
063b3dfa mov       (%rsp),%rcx
063b3dfe mov       %rcx,0x18(%rsp)
063b3e03 mov       %rax,0x20(%rsp)
063b3e08 mov       0x18(%rsp),%rax
063b3e0d mov       0x20(%rsp),%rdx
063b3e12 add       $0x48,%rsp
063b3e16 ret

core::fmt::ArgumentV1::new<str>:
063b3e20 sub       $0x48,%rsp
063b3e24 mov       %rcx,8(%rsp)
063b3e29 mov       %rcx,0x28(%rsp)
063b3e2e mov       %rdx,0x30(%rsp)
063b3e33 mov       %rdx,0x38(%rsp)
063b3e38 mov       0x38(%rsp),%rax
063b3e3d mov       %rax,0x10(%rsp)
063b3e42 mov       8(%rsp),%rax
063b3e47 mov       %rax,0x40(%rsp)
063b3e4c mov       0x40(%rsp),%rax
063b3e51 mov       %rax,(%rsp)
063b3e55 mov       0x10(%rsp),%rax
063b3e5a mov       (%rsp),%rcx
063b3e5e mov       %rcx,0x18(%rsp)
063b3e63 mov       %rax,0x20(%rsp)
063b3e68 mov       0x18(%rsp),%rax
063b3e6d mov       0x20(%rsp),%rdx
063b3e72 add       $0x48,%rsp
063b3e76 ret

core::fmt::ArgumentV1::new<usize>:
063b3e80 sub       $0x48,%rsp
063b3e84 mov       %rcx,8(%rsp)
063b3e89 mov       %rcx,0x28(%rsp)
063b3e8e mov       %rdx,0x30(%rsp)
063b3e93 mov       %rdx,0x38(%rsp)
063b3e98 mov       0x38(%rsp),%rax
063b3e9d mov       %rax,0x10(%rsp)
063b3ea2 mov       8(%rsp),%rax
063b3ea7 mov       %rax,0x40(%rsp)
063b3eac mov       0x40(%rsp),%rax
063b3eb1 mov       %rax,(%rsp)
063b3eb5 mov       0x10(%rsp),%rax
063b3eba mov       (%rsp),%rcx
063b3ebe mov       %rcx,0x18(%rsp)
063b3ec3 mov       %rax,0x20(%rsp)
063b3ec8 mov       0x18(%rsp),%rax
063b3ecd mov       0x20(%rsp),%rdx
063b3ed2 add       $0x48,%rsp
063b3ed6 ret

core::fmt::ArgumentV1::new<core::ops::range::Range<usize> >:
063b3ee0 sub       $0x48,%rsp
063b3ee4 mov       %rcx,8(%rsp)
063b3ee9 mov       %rcx,0x28(%rsp)
063b3eee mov       %rdx,0x30(%rsp)
063b3ef3 mov       %rdx,0x38(%rsp)
063b3ef8 mov       0x38(%rsp),%rax
063b3efd mov       %rax,0x10(%rsp)
063b3f02 mov       8(%rsp),%rax
063b3f07 mov       %rax,0x40(%rsp)
063b3f0c mov       0x40(%rsp),%rax
063b3f11 mov       %rax,(%rsp)
063b3f15 mov       0x10(%rsp),%rax
063b3f1a mov       (%rsp),%rcx
063b3f1e mov       %rcx,0x18(%rsp)
063b3f23 mov       %rax,0x20(%rsp)
063b3f28 mov       0x18(%rsp),%rax
063b3f2d mov       0x20(%rsp),%rdx
063b3f32 add       $0x48,%rsp
063b3f36 ret

core::fmt::ArgumentV1::new<core::fmt::Arguments>:
063b3f40 sub       $0x48,%rsp
063b3f44 mov       %rcx,8(%rsp)
063b3f49 mov       %rcx,0x28(%rsp)
063b3f4e mov       %rdx,0x30(%rsp)
063b3f53 mov       %rdx,0x38(%rsp)
063b3f58 mov       0x38(%rsp),%rax
063b3f5d mov       %rax,0x10(%rsp)
063b3f62 mov       8(%rsp),%rax
063b3f67 mov       %rax,0x40(%rsp)
063b3f6c mov       0x40(%rsp),%rax
063b3f71 mov       %rax,(%rsp)
063b3f75 mov       0x10(%rsp),%rax
063b3f7a mov       (%rsp),%rcx
063b3f7e mov       %rcx,0x18(%rsp)
063b3f83 mov       %rax,0x20(%rsp)
063b3f88 mov       0x18(%rsp),%rax
063b3f8d mov       0x20(%rsp),%rdx
063b3f92 add       $0x48,%rsp
063b3f96 ret

core::fmt::ArgumentV1::new<ref$<core::fmt::Arguments> >:
063b3fa0 sub       $0x48,%rsp
063b3fa4 mov       %rcx,8(%rsp)
063b3fa9 mov       %rcx,0x28(%rsp)
063b3fae mov       %rdx,0x30(%rsp)
063b3fb3 mov       %rdx,0x38(%rsp)
063b3fb8 mov       0x38(%rsp),%rax
063b3fbd mov       %rax,0x10(%rsp)
063b3fc2 mov       8(%rsp),%rax
063b3fc7 mov       %rax,0x40(%rsp)
063b3fcc mov       0x40(%rsp),%rax
063b3fd1 mov       %rax,(%rsp)
063b3fd5 mov       0x10(%rsp),%rax
063b3fda mov       (%rsp),%rcx
063b3fde mov       %rcx,0x18(%rsp)
063b3fe3 mov       %rax,0x20(%rsp)
063b3fe8 mov       0x18(%rsp),%rax
063b3fed mov       0x20(%rsp),%rdx
063b3ff2 add       $0x48,%rsp
063b3ff6 ret

core::fmt::ArgumentV1::new<ref$<dyn$<core::fmt::Debug> > >:
063b4000 sub       $0x48,%rsp
063b4004 mov       %rcx,8(%rsp)
063b4009 mov       %rcx,0x28(%rsp)
063b400e mov       %rdx,0x30(%rsp)
063b4013 mov       %rdx,0x38(%rsp)
063b4018 mov       0x38(%rsp),%rax
063b401d mov       %rax,0x10(%rsp)
063b4022 mov       8(%rsp),%rax
063b4027 mov       %rax,0x40(%rsp)
063b402c mov       0x40(%rsp),%rax
063b4031 mov       %rax,(%rsp)
063b4035 mov       0x10(%rsp),%rax
063b403a mov       (%rsp),%rcx
063b403e mov       %rcx,0x18(%rsp)
063b4043 mov       %rax,0x20(%rsp)
063b4048 mov       0x18(%rsp),%rax
063b404d mov       0x20(%rsp),%rdx
063b4052 add       $0x48,%rsp
063b4056 ret

core::fmt::ArgumentV1::new<u8>:
063b4060 sub       $0x48,%rsp
063b4064 mov       %rcx,8(%rsp)
063b4069 mov       %rcx,0x28(%rsp)
063b406e mov       %rdx,0x30(%rsp)
063b4073 mov       %rdx,0x38(%rsp)
063b4078 mov       0x38(%rsp),%rax
063b407d mov       %rax,0x10(%rsp)
063b4082 mov       8(%rsp),%rax
063b4087 mov       %rax,0x40(%rsp)
063b408c mov       0x40(%rsp),%rax
063b4091 mov       %rax,(%rsp)
063b4095 mov       0x10(%rsp),%rax
063b409a mov       (%rsp),%rcx
063b409e mov       %rcx,0x18(%rsp)
063b40a3 mov       %rax,0x20(%rsp)
063b40a8 mov       0x18(%rsp),%rax
063b40ad mov       0x20(%rsp),%rdx
063b40b2 add       $0x48,%rsp
063b40b6 ret

core::fmt::ArgumentV1::new<u32>:
063b40c0 sub       $0x48,%rsp
063b40c4 mov       %rcx,8(%rsp)
063b40c9 mov       %rcx,0x28(%rsp)
063b40ce mov       %rdx,0x30(%rsp)
063b40d3 mov       %rdx,0x38(%rsp)
063b40d8 mov       0x38(%rsp),%rax
063b40dd mov       %rax,0x10(%rsp)
063b40e2 mov       8(%rsp),%rax
063b40e7 mov       %rax,0x40(%rsp)
063b40ec mov       0x40(%rsp),%rax
063b40f1 mov       %rax,(%rsp)
063b40f5 mov       0x10(%rsp),%rax
063b40fa mov       (%rsp),%rcx
063b40fe mov       %rcx,0x18(%rsp)
063b4103 mov       %rax,0x20(%rsp)
063b4108 mov       0x18(%rsp),%rax
063b410d mov       0x20(%rsp),%rdx
063b4112 add       $0x48,%rsp
063b4116 ret

core::fmt::ArgumentV1::as_usize:
063b4120 sub       $0x20,%rsp
063b4124 mov       %rcx,(%rsp)
063b4128 mov       %rcx,0x18(%rsp)
063b412d mov       8(%rcx),%rax
063b4131 mov       0x63C`D768,%rcx
063b4138 cmp       %rcx,%rax
063b413b je        0x0000`0000`063B`4148
063b413d movq      $0,8(%rsp)
063b4146 jmp       0x0000`0000`063B`4160
063b4148 mov       (%rsp),%rax
063b414c mov       (%rax),%rax
063b414f mov       (%rax),%rax
063b4152 mov       %rax,0x10(%rsp)
063b4157 movq      $1,8(%rsp)
063b4160 mov       8(%rsp),%rax
063b4165 mov       0x10(%rsp),%rdx
063b416a add       $0x20,%rsp
063b416e ret

core::fmt::Arguments::new_v1:
063b4170 sub       $0xC8,%rsp
063b4177 mov       %r9,0x30(%rsp)
063b417c mov       %r8,0x38(%rsp)
063b4181 mov       %rdx,0x40(%rsp)
063b4186 mov       %rcx,0x48(%rsp)
063b418b mov       %rcx,0x50(%rsp)
063b4190 mov       0xF0(%rsp),%rax
063b4198 mov       %rax,0x58(%rsp)
063b419d mov       %rdx,0xA8(%rsp)
063b41a5 mov       %r8,0xB0(%rsp)
063b41ad mov       %r9,0xB8(%rsp)
063b41b5 mov       %rax,0xC0(%rsp)
063b41bd cmp       %rax,%r8
063b41c0 jb        0x0000`0000`063B`41D9
063b41c2 mov       0x58(%rsp),%rax
063b41c7 add       $1,%rax
063b41cb mov       %rax,0x28(%rsp)
063b41d0 setb      %al
063b41d3 test      $1,%al
063b41d5 jne       0x0000`0000`063B`4203
063b41d7 jmp       0x0000`0000`063B`41EB
063b41d9 movb      $1,0x67(%rsp)
063b41de testb     $1,0x67(%rsp)
063b41e3 jne       0x0000`0000`063B`4276
063b41e9 jmp       0x0000`0000`063B`421D
063b41eb mov       0x38(%rsp),%rax
063b41f0 mov       0x28(%rsp),%rcx
063b41f5 cmp       %rcx,%rax
063b41f8 seta      %al
063b41fb and       $1,%al
063b41fd mov       %al,0x67(%rsp)
063b4201 jmp       0x0000`0000`063B`41DE
063b4203 lea       0x63C`D720,%rcx
063b420a lea       0x63C`D7E8,%r8
063b4211 mov       $0x1C,%edx
063b4216 call      0x0000`0000`063B`2030
063b421b ud2
063b421d mov       0x50(%rsp),%rax
063b4222 mov       0x48(%rsp),%rcx
063b4227 mov       0x58(%rsp),%rdx
063b422c mov       0x30(%rsp),%r8
063b4231 mov       0x38(%rsp),%r9
063b4236 mov       0x40(%rsp),%r10
063b423b movq      $0,0x98(%rsp)
063b4247 mov       %r10,(%rcx)
063b424a mov       %r9,8(%rcx)
063b424e mov       0x98(%rsp),%r10
063b4256 mov       0xA0(%rsp),%r9
063b425e mov       %r10,0x10(%rcx)
063b4262 mov       %r9,0x18(%rcx)
063b4266 mov       %r8,0x20(%rcx)
063b426a mov       %rdx,0x28(%rcx)
063b426e add       $0xC8,%rsp
063b4275 ret
063b4276 lea       0x68(%rsp),%rcx
063b427b lea       0x63C`D810,%rdx
063b4282 mov       $1,%r8d
063b4288 lea       0x63C`D820,%r9
063b428f xor       %eax,%eax
063b4291 movq      $0,0x20(%rsp)
063b429a call      0x0000`0000`063B`4170
063b429f lea       0x63C`D820,%rdx
063b42a6 lea       0x68(%rsp),%rcx
063b42ab call      0x0000`0000`063B`2140
063b42b0 ud2

core::fmt::impl$7::fmt:
063b42c0 sub       $0x78,%rsp
063b42c4 mov       %rdx,%rax
063b42c7 mov       %rcx,%rdx
063b42ca mov       %rdx,0x68(%rsp)
063b42cf mov       %rax,0x70(%rsp)
063b42d4 mov       0x20(%rax),%rcx
063b42d8 mov       %rcx,0x20(%rsp)
063b42dd mov       0x28(%rax),%rax
063b42e1 mov       %rax,0x28(%rsp)
063b42e6 lea       0x38(%rsp),%rcx
063b42eb mov       $0x30,%r8d
063b42f1 call      0x0000`0000`063B`BDE0
063b42f6 mov       0x20(%rsp),%rcx
063b42fb mov       0x28(%rsp),%rdx
063b4300 lea       0x38(%rsp),%r8
063b4305 call      0x0000`0000`063B`4320
063b430a mov       %al,0x37(%rsp)
063b430e mov       0x37(%rsp),%al
063b4312 and       $1,%al
063b4314 movzbl    %al,%eax
063b4317 add       $0x78,%rsp
063b431b ret

core::fmt::write:
063b4320 sub       $0x258,%rsp
063b4327 mov       %r8,0x88(%rsp)
063b432f mov       %rdx,%r8
063b4332 mov       %rcx,%rdx
063b4335 mov       %rdx,0x1B0(%rsp)
063b433d mov       %r8,0x1B8(%rsp)
063b4345 lea       0x98(%rsp),%rcx
063b434d call      0x0000`0000`063B`3D20
063b4352 mov       0x88(%rsp),%rax
063b435a movq      $0,0xD8(%rsp)
063b4366 mov       0x10(%rax),%rax
063b436a test      %rax,%rax
063b436d setne     %al
063b4370 movzbl    %al,%eax
063b4373 je        0x0000`0000`063B`437B
063b4375 jmp       0x0000`0000`063B`4377
063b4377 jmp       0x0000`0000`063B`43A2
063b4379 ud2
063b437b mov       0x88(%rsp),%rax
063b4383 mov       0x20(%rax),%rcx
063b4387 mov       0x28(%rax),%rdx
063b438b call      0x0000`0000`063B`6340
063b4390 mov       %rax,0x78(%rsp)
063b4395 mov       %rdx,0x80(%rsp)
063b439d jmp       0x0000`0000`063B`4610
063b43a2 mov       0x88(%rsp),%rax
063b43aa mov       0x10(%rax),%rcx
063b43ae mov       0x18(%rax),%rdx
063b43b2 mov       %rcx,0x210(%rsp)
063b43ba mov       %rdx,0x218(%rsp)
063b43c2 call      0x0000`0000`063B`91F0
063b43c7 mov       %rax,0x68(%rsp)
063b43cc mov       %rdx,0x70(%rsp)
063b43d1 mov       0x70(%rsp),%r8
063b43d6 mov       0x68(%rsp),%rdx
063b43db lea       0x158(%rsp),%rcx
063b43e3 call      0x0000`0000`063C`4D30
063b43e8 lea       0x140(%rsp),%rcx
063b43f0 lea       0x158(%rsp),%rdx
063b43f8 call      0x0000`0000`063C`9CC0
063b43fd mov       0x140(%rsp),%rax
063b4405 mov       %rax,0x170(%rsp)
063b440d mov       0x148(%rsp),%rax
063b4415 mov       %rax,0x178(%rsp)
063b441d mov       0x150(%rsp),%rax
063b4425 mov       %rax,0x180(%rsp)
063b442d lea       0x170(%rsp),%rcx
063b4435 call      0x0000`0000`063C`9BA0
063b443a mov       %rdx,0x190(%rsp)
063b4442 mov       %rax,0x188(%rsp)
063b444a mov       0x190(%rsp),%rax
063b4452 test      %rax,%rax
063b4455 setne     %al
063b4458 movzbl    %al,%eax
063b445b je        0x0000`0000`063B`4463
063b445d jmp       0x0000`0000`063B`445F
063b445f jmp       0x0000`0000`063B`448C
063b4461 ud2
063b4463 mov       0x88(%rsp),%rax
063b446b mov       (%rax),%rcx
063b446e mov       8(%rax),%rdx
063b4472 mov       0xD8(%rsp),%r8
063b447a call      0x0000`0000`063B`FED0
063b447f mov       %rax,0x1A0(%rsp)
063b4487 jmp       0x0000`0000`063B`4815
063b448c mov       0x88(%rsp),%rax
063b4494 mov       0x188(%rsp),%r8
063b449c mov       %r8,0x220(%rsp)
063b44a4 mov       0x190(%rsp),%rcx
063b44ac mov       %rcx,0x58(%rsp)
063b44b1 mov       %rcx,0x228(%rsp)
063b44b9 mov       (%rax),%rcx
063b44bc mov       8(%rax),%rdx
063b44c0 call      0x0000`0000`063B`FFB0
063b44c5 mov       %rax,0x60(%rsp)
063b44ca mov       %rax,0x230(%rsp)
063b44d2 mov       0x60(%rsp),%rax
063b44d7 mov       (%rax),%rcx
063b44da mov       8(%rax),%rdx
063b44de call      0x0000`0000`063B`D740
063b44e3 mov       %al,0x57(%rsp)
063b44e7 mov       0x57(%rsp),%al
063b44eb xor       $0xFF,%al
063b44ed test      $1,%al
063b44ef jne       0x0000`0000`063B`4519
063b44f1 mov       0x58(%rsp),%rdx
063b44f6 mov       0x88(%rsp),%rax
063b44fe mov       0x20(%rax),%r8
063b4502 mov       0x28(%rax),%r9
063b4506 lea       0x98(%rsp),%rcx
063b450e call      0x0000`0000`063B`48B0
063b4513 mov       %al,0x56(%rsp)
063b4517 jmp       0x0000`0000`063B`458C
063b4519 mov       0x60(%rsp),%r8
063b451e mov       0xB8(%rsp),%rcx
063b4526 mov       0xC0(%rsp),%rax
063b452e mov       (%r8),%rdx
063b4531 mov       8(%r8),%r8
063b4535 callq     *0x18(%rax)
063b4538 mov       %al,0x55(%rsp)
063b453c mov       0x55(%rsp),%cl
063b4540 and       $1,%cl
063b4543 call      0x0000`0000`063B`CEE0
063b4548 and       $1,%al
063b454a mov       %al,0x19E(%rsp)
063b4551 movzbl    0x19E(%rsp),%eax
063b4559 test      $1,%al
063b455b je        0x0000`0000`063B`44F1
063b455d jmp       0x0000`0000`063B`455F
063b455f jmp       0x0000`0000`063B`4563
063b4561 ud2
063b4563 lea       0x63C`D838,%rcx
063b456a call      0x0000`0000`063B`CF60
063b456f and       $1,%al
063b4571 mov       %al,0x97(%rsp)
063b4578 mov       0x97(%rsp),%al
063b457f and       $1,%al
063b4581 movzbl    %al,%eax
063b4584 add       $0x258,%rsp
063b458b ret
063b458c mov       0x56(%rsp),%cl
063b4590 and       $1,%cl
063b4593 call      0x0000`0000`063B`CEE0
063b4598 and       $1,%al
063b459a mov       %al,0x19F(%rsp)
063b45a1 movzbl    0x19F(%rsp),%eax
063b45a9 test      $1,%al
063b45ab je        0x0000`0000`063B`45B3
063b45ad jmp       0x0000`0000`063B`45AF
063b45af jmp       0x0000`0000`063B`45CD
063b45b1 ud2
063b45b3 mov       0xD8(%rsp),%rax
063b45bb add       $1,%rax
063b45bf mov       %rax,0x48(%rsp)
063b45c4 setb      %al
063b45c7 test      $1,%al
063b45c9 jne       0x0000`0000`063B`45F6
063b45cb jmp       0x0000`0000`063B`45E4
063b45cd lea       0x63C`D850,%rcx
063b45d4 call      0x0000`0000`063B`CF60
063b45d9 and       $1,%al
063b45db mov       %al,0x97(%rsp)
063b45e2 jmp       0x0000`0000`063B`4578
063b45e4 mov       0x48(%rsp),%rax
063b45e9 mov       %rax,0xD8(%rsp)
063b45f1 jmp       0x0000`0000`063B`442D
063b45f6 lea       0x63C`D720,%rcx
063b45fd lea       0x63C`D868,%r8
063b4604 mov       $0x1C,%edx
063b4609 call      0x0000`0000`063B`2030
063b460e ud2
063b4610 mov       0x80(%rsp),%r8
063b4618 mov       0x78(%rsp),%rdx
063b461d lea       0xF8(%rsp),%rcx
063b4625 call      0x0000`0000`063C`4D60
063b462a lea       0xE0(%rsp),%rcx
063b4632 lea       0xF8(%rsp),%rdx
063b463a call      0x0000`0000`063C`9CA0
063b463f mov       0xE0(%rsp),%rax
063b4647 mov       %rax,0x110(%rsp)
063b464f mov       0xE8(%rsp),%rax
063b4657 mov       %rax,0x118(%rsp)
063b465f mov       0xF0(%rsp),%rax
063b4667 mov       %rax,0x120(%rsp)
063b466f lea       0x110(%rsp),%rcx
063b4677 call      0x0000`0000`063C`9AA0
063b467c mov       %rdx,0x130(%rsp)
063b4684 mov       %rax,0x128(%rsp)
063b468c mov       0x130(%rsp),%rax
063b4694 test      %rax,%rax
063b4697 setne     %al
063b469a movzbl    %al,%eax
063b469d je        0x0000`0000`063B`4463
063b46a3 jmp       0x0000`0000`063B`46A5
063b46a5 jmp       0x0000`0000`063B`46A9
063b46a7 ud2
063b46a9 mov       0x88(%rsp),%rax
063b46b1 mov       0x128(%rsp),%r8
063b46b9 mov       %r8,0x238(%rsp)
063b46c1 mov       0x130(%rsp),%rcx
063b46c9 mov       %rcx,0x38(%rsp)
063b46ce mov       %rcx,0x240(%rsp)
063b46d6 mov       (%rax),%rcx
063b46d9 mov       8(%rax),%rdx
063b46dd call      0x0000`0000`063B`FFB0
063b46e2 mov       %rax,0x40(%rsp)
063b46e7 mov       %rax,0x248(%rsp)
063b46ef mov       0x40(%rsp),%rax
063b46f4 mov       (%rax),%rcx
063b46f7 mov       8(%rax),%rdx
063b46fb call      0x0000`0000`063B`D740
063b4700 mov       %al,0x37(%rsp)
063b4704 mov       0x37(%rsp),%al
063b4708 xor       $0xFF,%al
063b470a test      $1,%al
063b470c jne       0x0000`0000`063B`472A
063b470e mov       0x38(%rsp),%rcx
063b4713 mov       8(%rcx),%rax
063b4717 mov       (%rcx),%rcx
063b471a lea       0x98(%rsp),%rdx
063b4722 call      *%rax
063b4724 mov       %al,0x36(%rsp)
063b4728 jmp       0x0000`0000`063B`478E
063b472a mov       0x40(%rsp),%r8
063b472f mov       0xB8(%rsp),%rcx
063b4737 mov       0xC0(%rsp),%rax
063b473f mov       (%r8),%rdx
063b4742 mov       8(%r8),%r8
063b4746 callq     *0x18(%rax)
063b4749 mov       %al,0x35(%rsp)
063b474d mov       0x35(%rsp),%cl
063b4751 and       $1,%cl
063b4754 call      0x0000`0000`063B`CEE0
063b4759 and       $1,%al
063b475b mov       %al,0x13E(%rsp)
063b4762 movzbl    0x13E(%rsp),%eax
063b476a test      $1,%al
063b476c je        0x0000`0000`063B`470E
063b476e jmp       0x0000`0000`063B`4770
063b4770 jmp       0x0000`0000`063B`4774
063b4772 ud2
063b4774 lea       0x63C`D880,%rcx
063b477b call      0x0000`0000`063B`CF60
063b4780 and       $1,%al
063b4782 mov       %al,0x97(%rsp)
063b4789 jmp       0x0000`0000`063B`4578
063b478e mov       0x36(%rsp),%cl
063b4792 and       $1,%cl
063b4795 call      0x0000`0000`063B`CEE0
063b479a and       $1,%al
063b479c mov       %al,0x13F(%rsp)
063b47a3 movzbl    0x13F(%rsp),%eax
063b47ab test      $1,%al
063b47ad je        0x0000`0000`063B`47B5
063b47af jmp       0x0000`0000`063B`47B1
063b47b1 jmp       0x0000`0000`063B`47CF
063b47b3 ud2
063b47b5 mov       0xD8(%rsp),%rax
063b47bd add       $1,%rax
063b47c1 mov       %rax,0x28(%rsp)
063b47c6 setb      %al
063b47c9 test      $1,%al
063b47cb jne       0x0000`0000`063B`47FB
063b47cd jmp       0x0000`0000`063B`47E9
063b47cf lea       0x63C`D898,%rcx
063b47d6 call      0x0000`0000`063B`CF60
063b47db and       $1,%al
063b47dd mov       %al,0x97(%rsp)
063b47e4 jmp       0x0000`0000`063B`4578
063b47e9 mov       0x28(%rsp),%rax
063b47ee mov       %rax,0xD8(%rsp)
063b47f6 jmp       0x0000`0000`063B`466F
063b47fb lea       0x63C`D720,%rcx
063b4802 lea       0x63C`D8B0,%r8
063b4809 mov       $0x1C,%edx
063b480e call      0x0000`0000`063B`2030
063b4813 ud2
063b4815 mov       $1,%eax
063b481a xor       %ecx,%ecx
063b481c cmpq      $0,0x1A0(%rsp)
063b4825 cmove     %rcx,%rax
063b4829 cmp       $1,%rax
063b482d jne       0x0000`0000`063B`485F
063b482f mov       0x1A0(%rsp),%r8
063b4837 mov       %r8,0x250(%rsp)
063b483f mov       0xB8(%rsp),%rcx
063b4847 mov       0xC0(%rsp),%rax
063b484f mov       (%r8),%rdx
063b4852 mov       8(%r8),%r8
063b4856 callq     *0x18(%rax)
063b4859 mov       %al,0x27(%rsp)
063b485d jmp       0x0000`0000`063B`486C
063b485f movb      $0,0x97(%rsp)
063b4867 jmp       0x0000`0000`063B`4578
063b486c mov       0x27(%rsp),%cl
063b4870 and       $1,%cl
063b4873 call      0x0000`0000`063B`CEE0
063b4878 and       $1,%al
063b487a mov       %al,0x1AF(%rsp)
063b4881 movzbl    0x1AF(%rsp),%eax
063b4889 test      $1,%al
063b488b je        0x0000`0000`063B`485F
063b488d jmp       0x0000`0000`063B`488F
063b488f jmp       0x0000`0000`063B`4893
063b4891 ud2
063b4893 lea       0x63C`D8C8,%rcx
063b489a call      0x0000`0000`063B`CF60
063b489f and       $1,%al
063b48a1 mov       %al,0x97(%rsp)
063b48a8 jmp       0x0000`0000`063B`4578

core::fmt::run:
063b48b0 sub       $0x98,%rsp
063b48b7 mov       %r9,0x40(%rsp)
063b48bc mov       %r8,0x50(%rsp)
063b48c1 mov       %rdx,%r8
063b48c4 mov       0x40(%rsp),%rdx
063b48c9 mov       %r8,0x48(%rsp)
063b48ce mov       %rcx,%rax
063b48d1 mov       0x50(%rsp),%rcx
063b48d6 mov       %rax,0x58(%rsp)
063b48db mov       %rax,0x70(%rsp)
063b48e0 mov       %r8,0x78(%rsp)
063b48e5 mov       %rcx,0x80(%rsp)
063b48ed mov       %rdx,0x88(%rsp)
063b48f5 mov       0x28(%r8),%r9d
063b48f9 mov       %r9d,0x34(%rax)
063b48fd mov       0x30(%r8),%r9b
063b4901 mov       %r9b,0x38(%rax)
063b4905 mov       0x2C(%r8),%r9d
063b4909 mov       %r9d,0x30(%rax)
063b490d add       $8,%r8
063b4911 add       $0x10,%r8
063b4915 call      0x0000`0000`063B`4A00
063b491a mov       %rax,0x60(%rsp)
063b491f mov       %rdx,0x68(%rsp)
063b4924 mov       0x40(%rsp),%rdx
063b4929 mov       0x50(%rsp),%rcx
063b492e mov       0x48(%rsp),%r8
063b4933 mov       0x58(%rsp),%rax
063b4938 mov       0x68(%rsp),%r9
063b493d mov       0x60(%rsp),%r10
063b4942 mov       %r10,(%rax)
063b4945 mov       %r9,8(%rax)
063b4949 add       $8,%r8
063b494d call      0x0000`0000`063B`4A00
063b4952 mov       %rax,0x30(%rsp)
063b4957 mov       %rdx,0x38(%rsp)
063b495c mov       0x48(%rsp),%rax
063b4961 mov       0x40(%rsp),%rcx
063b4966 mov       0x58(%rsp),%rdx
063b496b mov       0x38(%rsp),%r8
063b4970 mov       0x30(%rsp),%r9
063b4975 mov       %r9,0x10(%rdx)
063b4979 mov       %r8,0x18(%rdx)
063b497d cmp       %rcx,(%rax)
063b4980 setb      %al
063b4983 xor       $0xFF,%al
063b4985 test      $1,%al
063b4987 jne       0x0000`0000`063B`49AF
063b4989 mov       0x40(%rsp),%rdx
063b498e mov       0x50(%rsp),%rcx
063b4993 mov       0x48(%rsp),%rax
063b4998 mov       (%rax),%r8
063b499b call      0x0000`0000`063B`62E0
063b49a0 mov       %rax,0x28(%rsp)
063b49a5 mov       %rax,0x90(%rsp)
063b49ad jmp       0x0000`0000`063B`49C9
063b49af lea       0x63C`D8E0,%rcx
063b49b6 lea       0x63C`D910,%r8
063b49bd mov       $0x2B,%edx
063b49c2 call      0x0000`0000`063B`2030
063b49c7 ud2
063b49c9 mov       0x58(%rsp),%rdx
063b49ce mov       0x28(%rsp),%rcx
063b49d3 mov       8(%rcx),%rax
063b49d7 mov       (%rcx),%rcx
063b49da call      *%rax
063b49dc mov       %al,0x27(%rsp)
063b49e0 mov       0x27(%rsp),%al
063b49e4 and       $1,%al
063b49e6 movzbl    %al,%eax
063b49e9 add       $0x98,%rsp
063b49f0 ret

core::fmt::getcount:
063b4a00 sub       $0x88,%rsp
063b4a07 mov       %r8,0x30(%rsp)
063b4a0c mov       %rdx,0x38(%rsp)
063b4a11 mov       %rcx,0x40(%rsp)
063b4a16 mov       %rcx,0x60(%rsp)
063b4a1b mov       %rdx,0x68(%rsp)
063b4a20 mov       %r8,0x70(%rsp)
063b4a25 mov       (%r8),%rax
063b4a28 mov       %rax,0x48(%rsp)
063b4a2d test      %rax,%rax
063b4a30 je        0x0000`0000`063B`4A45
063b4a32 jmp       0x0000`0000`063B`4A34
063b4a34 mov       0x48(%rsp),%rax
063b4a39 sub       $1,%rax
063b4a3d je        0x0000`0000`063B`4A66
063b4a3f jmp       0x0000`0000`063B`4A41
063b4a41 jmp       0x0000`0000`063B`4A8C
063b4a43 ud2
063b4a45 mov       0x30(%rsp),%rax
063b4a4a mov       8(%rax),%rax
063b4a4e mov       %rax,0x80(%rsp)
063b4a56 mov       %rax,0x58(%rsp)
063b4a5b movq      $1,0x50(%rsp)
063b4a64 jmp       0x0000`0000`063B`4A95
063b4a66 mov       0x38(%rsp),%rcx
063b4a6b mov       0x30(%rsp),%rax
063b4a70 mov       8(%rax),%rax
063b4a74 mov       %rax,0x28(%rsp)
063b4a79 mov       %rax,0x78(%rsp)
063b4a7e cmp       %rcx,%rax
063b4a81 setb      %al
063b4a84 xor       $0xFF,%al
063b4a86 test      $1,%al
063b4a88 jne       0x0000`0000`063B`4AC2
063b4a8a jmp       0x0000`0000`063B`4AA7
063b4a8c movq      $0,0x50(%rsp)
063b4a95 mov       0x50(%rsp),%rax
063b4a9a mov       0x58(%rsp),%rdx
063b4a9f add       $0x88,%rsp
063b4aa6 ret
063b4aa7 mov       0x28(%rsp),%r8
063b4aac mov       0x38(%rsp),%rdx
063b4ab1 mov       0x40(%rsp),%rcx
063b4ab6 call      0x0000`0000`063B`62E0
063b4abb mov       %rax,0x20(%rsp)
063b4ac0 jmp       0x0000`0000`063B`4ADC
063b4ac2 lea       0x63C`D928,%rcx
063b4ac9 lea       0x63C`D948,%r8
063b4ad0 mov       $0x20,%edx
063b4ad5 call      0x0000`0000`063B`2030
063b4ada ud2
063b4adc mov       0x20(%rsp),%rcx
063b4ae1 call      0x0000`0000`063B`4120
063b4ae6 mov       %rdx,0x58(%rsp)
063b4aeb mov       %rax,0x50(%rsp)
063b4af0 jmp       0x0000`0000`063B`4A95

core::fmt::PostPadding::new:
063b4b00 sub       $0x20,%rsp
063b4b04 mov       %ecx,0x14(%rsp)
063b4b08 mov       %rdx,0x18(%rsp)
063b4b0d mov       %ecx,8(%rsp)
063b4b11 mov       %rdx,(%rsp)
063b4b15 mov       (%rsp),%rax
063b4b19 mov       8(%rsp),%edx
063b4b1d add       $0x20,%rsp
063b4b21 ret

core::fmt::PostPadding::write:
063b4b30 sub       $0xB8,%rsp
063b4b37 mov       %r8,0x30(%rsp)
063b4b3c mov       %edx,0x3C(%rsp)
063b4b40 mov       %rcx,0x90(%rsp)
063b4b48 mov       %edx,0x98(%rsp)
063b4b4f mov       %r8,0xA0(%rsp)
063b4b57 movq      $0,0x58(%rsp)
063b4b60 mov       %rcx,0x60(%rsp)
063b4b65 mov       0x58(%rsp),%rcx
063b4b6a mov       0x60(%rsp),%rdx
063b4b6f call      0x0000`0000`063B`15F0
063b4b74 mov       %rax,0x40(%rsp)
063b4b79 mov       %rdx,0x48(%rsp)
063b4b7e mov       0x48(%rsp),%rax
063b4b83 mov       0x40(%rsp),%rcx
063b4b88 mov       %rcx,0x68(%rsp)
063b4b8d mov       %rax,0x70(%rsp)
063b4b92 lea       0x68(%rsp),%rcx
063b4b97 call      0x0000`0000`063B`15C0
063b4b9c mov       %rdx,0x80(%rsp)
063b4ba4 mov       %rax,0x78(%rsp)
063b4ba9 mov       0x78(%rsp),%rax
063b4bae test      %rax,%rax
063b4bb1 je        0x0000`0000`063B`4BB9
063b4bb3 jmp       0x0000`0000`063B`4BB5
063b4bb5 jmp       0x0000`0000`063B`4BC0
063b4bb7 ud2
063b4bb9 movb      $0,0x57(%rsp)
063b4bbe jmp       0x0000`0000`063B`4C11
063b4bc0 mov       0x3C(%rsp),%edx
063b4bc4 mov       0x30(%rsp),%rax
063b4bc9 mov       0x20(%rax),%rcx
063b4bcd mov       0x28(%rax),%rax
063b4bd1 callq     *0x20(%rax)
063b4bd4 mov       %al,0x2F(%rsp)
063b4bd8 mov       0x2F(%rsp),%cl
063b4bdc and       $1,%cl
063b4bdf call      0x0000`0000`063B`CEE0
063b4be4 and       $1,%al
063b4be6 mov       %al,0x8F(%rsp)
063b4bed movzbl    0x8F(%rsp),%eax
063b4bf5 test      $1,%al
063b4bf7 je        0x0000`0000`063B`4B92
063b4bf9 jmp       0x0000`0000`063B`4BFB
063b4bfb jmp       0x0000`0000`063B`4BFF
063b4bfd ud2
063b4bff lea       0x63C`D960,%rcx
063b4c06 call      0x0000`0000`063B`CF60
063b4c0b and       $1,%al
063b4c0d mov       %al,0x57(%rsp)
063b4c11 mov       0x57(%rsp),%al
063b4c15 and       $1,%al
063b4c17 movzbl    %al,%eax
063b4c1a add       $0xB8,%rsp
063b4c21 ret

core::fmt::Formatter::wrap_buf<core::fmt::builders::impl$1::wrap::closure_env$0>:
063b4c30 push      %rsi
063b4c31 push      %rdi
063b4c32 push      %rbp
063b4c33 push      %rbx
063b4c34 sub       $0x88,%rsp
063b4c3b mov       %r9,0x28(%rsp)
063b4c40 mov       %r8,0x38(%rsp)
063b4c45 mov       %rdx,%rax
063b4c48 mov       0x28(%rsp),%rdx
063b4c4d mov       %rax,0x30(%rsp)
063b4c52 mov       %rcx,%r8
063b4c55 mov       0x38(%rsp),%rcx
063b4c5a mov       %r8,0x40(%rsp)
063b4c5f mov       %r8,0x48(%rsp)
063b4c64 mov       %rax,0x70(%rsp)
063b4c69 mov       %rcx,0x78(%rsp)
063b4c6e mov       %rdx,0x80(%rsp)
063b4c76 mov       0x20(%rax),%r8
063b4c7a mov       0x28(%rax),%rax
063b4c7e mov       %r8,0x60(%rsp)
063b4c83 mov       %rax,0x68(%rsp)
063b4c88 mov       0x60(%rsp),%r8
063b4c8d mov       0x68(%rsp),%r9
063b4c92 call      0x0000`0000`063C`29D0
063b4c97 mov       %rax,0x50(%rsp)
063b4c9c mov       %rdx,0x58(%rsp)
063b4ca1 mov       0x48(%rsp),%rax
063b4ca6 mov       0x40(%rsp),%rcx
063b4cab mov       0x58(%rsp),%rdx
063b4cb0 mov       0x50(%rsp),%r8
063b4cb5 mov       0x30(%rsp),%r9
063b4cba mov       0x30(%r9),%ebp
063b4cbe mov       0x34(%r9),%edi
063b4cc2 mov       0x38(%r9),%bl
063b4cc6 mov       (%r9),%rsi
063b4cc9 mov       8(%r9),%r11
063b4ccd mov       0x10(%r9),%r10
063b4cd1 mov       0x18(%r9),%r9
063b4cd5 mov       %ebp,0x30(%rcx)
063b4cd8 mov       %edi,0x34(%rcx)
063b4cdb mov       %bl,0x38(%rcx)
063b4cde mov       %rsi,(%rcx)
063b4ce1 mov       %r11,8(%rcx)
063b4ce5 mov       %r10,0x10(%rcx)
063b4ce9 mov       %r9,0x18(%rcx)
063b4ced mov       %r8,0x20(%rcx)
063b4cf1 mov       %rdx,0x28(%rcx)
063b4cf5 add       $0x88,%rsp
063b4cfc pop       %rbx
063b4cfd pop       %rbp
063b4cfe pop       %rdi
063b4cff pop       %rsi
063b4d00 ret

core::fmt::Formatter::pad_integral:
063b4d10 sub       $0x288,%rsp
063b4d17 mov       %r9,0xE0(%rsp)
063b4d1f mov       %r8,0xE8(%rsp)
063b4d27 mov       %dl,%al
063b4d29 mov       %rcx,%r10
063b4d2c mov       %r10,0xF0(%rsp)
063b4d34 mov       0x2B8(%rsp),%rdx
063b4d3c mov       %rdx,0xF8(%rsp)
063b4d44 mov       0x2B0(%rsp),%rcx
063b4d4c mov       %rcx,0x100(%rsp)
063b4d54 mov       %al,0x10E(%rsp)
063b4d5b mov       %r10,0x168(%rsp)
063b4d63 and       $1,%al
063b4d65 mov       %al,0x177(%rsp)
063b4d6c mov       %r8,0x178(%rsp)
063b4d74 mov       %r9,0x180(%rsp)
063b4d7c mov       %rcx,0x188(%rsp)
063b4d84 mov       %rdx,0x190(%rsp)
063b4d8c call      0x0000`0000`063B`D700
063b4d91 mov       %rax,0x110(%rsp)
063b4d99 mov       0x10E(%rsp),%al
063b4da0 movl      $0x11`0000,0x11C(%rsp)
063b4dab xor       $0xFF,%al
063b4dad test      $1,%al
063b4daf jne       0x0000`0000`063B`4DC7
063b4db1 mov       0xF0(%rsp),%rcx
063b4db9 call      0x0000`0000`063B`5E30
063b4dbe mov       %al,0xDF(%rsp)
063b4dc5 jmp       0x0000`0000`063B`4E2F
063b4dc7 movl      $0x2D,0x11C(%rsp)
063b4dd2 mov       0x110(%rsp),%rax
063b4dda add       $1,%rax
063b4dde mov       %rax,0xD0(%rsp)
063b4de6 setb      %al
063b4de9 test      $1,%al
063b4deb jne       0x0000`0000`063B`4DFF
063b4ded mov       0xD0(%rsp),%rax
063b4df5 mov       %rax,0x110(%rsp)
063b4dfd jmp       0x0000`0000`063B`4E19
063b4dff lea       0x63C`D720,%rcx
063b4e06 lea       0x63C`D978,%r8
063b4e0d mov       $0x1C,%edx
063b4e12 call      0x0000`0000`063B`2030
063b4e17 ud2
063b4e19 mov       0xF0(%rsp),%rcx
063b4e21 call      0x0000`0000`063B`5E50
063b4e26 mov       %al,0xCF(%rsp)
063b4e2d jmp       0x0000`0000`063B`4E8E
063b4e2f mov       0xDF(%rsp),%al
063b4e36 test      $1,%al
063b4e38 jne       0x0000`0000`063B`4E3C
063b4e3a jmp       0x0000`0000`063B`4E19
063b4e3c movl      $0x2B,0x11C(%rsp)
063b4e47 mov       0x110(%rsp),%rax
063b4e4f add       $1,%rax
063b4e53 mov       %rax,0xC0(%rsp)
063b4e5b setb      %al
063b4e5e test      $1,%al
063b4e60 jne       0x0000`0000`063B`4E74
063b4e62 mov       0xC0(%rsp),%rax
063b4e6a mov       %rax,0x110(%rsp)
063b4e72 jmp       0x0000`0000`063B`4E19
063b4e74 lea       0x63C`D720,%rcx
063b4e7b lea       0x63C`D990,%r8
063b4e82 mov       $0x1C,%edx
063b4e87 call      0x0000`0000`063B`2030
063b4e8c ud2
063b4e8e mov       0xCF(%rsp),%al
063b4e95 test      $1,%al
063b4e97 jne       0x0000`0000`063B`4EAC
063b4e99 jmp       0x0000`0000`063B`4E9B
063b4e9b movq      $0,0x120(%rsp)
063b4ea7 jmp       0x0000`0000`063B`4F59
063b4eac mov       0xE0(%rsp),%rdx
063b4eb4 mov       0xE8(%rsp),%rcx
063b4ebc call      0x0000`0000`063B`DAE0
063b4ec1 mov       %rax,0xB0(%rsp)
063b4ec9 mov       %rdx,0xB8(%rsp)
063b4ed1 mov       0xB8(%rsp),%rdx
063b4ed9 mov       0xB0(%rsp),%rcx
063b4ee1 call      0x0000`0000`063B`B5F0
063b4ee6 mov       %rax,0xA8(%rsp)
063b4eee mov       0xA8(%rsp),%rax
063b4ef6 add       0x110(%rsp),%rax
063b4efe mov       %rax,0xA0(%rsp)
063b4f06 setb      %al
063b4f09 test      $1,%al
063b4f0b jne       0x0000`0000`063B`4F3F
063b4f0d mov       0xE0(%rsp),%rax
063b4f15 mov       0xE8(%rsp),%rcx
063b4f1d mov       0xA0(%rsp),%rdx
063b4f25 mov       %rdx,0x110(%rsp)
063b4f2d mov       %rcx,0x120(%rsp)
063b4f35 mov       %rax,0x128(%rsp)
063b4f3d jmp       0x0000`0000`063B`4F59
063b4f3f lea       0x63C`D720,%rcx
063b4f46 lea       0x63C`D9A8,%r8
063b4f4d mov       $0x1C,%edx
063b4f52 call      0x0000`0000`063B`2030
063b4f57 ud2
063b4f59 mov       0xF0(%rsp),%rax
063b4f61 mov       (%rax),%rax
063b4f64 test      %rax,%rax
063b4f67 je        0x0000`0000`063B`4F6F
063b4f69 jmp       0x0000`0000`063B`4F6B
063b4f6b jmp       0x0000`0000`063B`4F9F
063b4f6d ud2
063b4f6f mov       0xF0(%rsp),%rcx
063b4f77 mov       0x11C(%rsp),%edx
063b4f7e mov       0x120(%rsp),%r8
063b4f86 mov       0x128(%rsp),%r9
063b4f8e call      0x0000`0000`063B`55D0
063b4f93 mov       %al,0x9F(%rsp)
063b4f9a jmp       0x0000`0000`063B`5554
063b4f9f mov       0xF0(%rsp),%rcx
063b4fa7 mov       %rcx,%rax
063b4faa add       $8,%rax
063b4fae mov       %rax,0x218(%rsp)
063b4fb6 mov       0x110(%rsp),%rax
063b4fbe cmp       8(%rcx),%rax
063b4fc2 jae       0x0000`0000`063B`4FEC
063b4fc4 mov       0xF0(%rsp),%rcx
063b4fcc mov       %rcx,%rax
063b4fcf add       $8,%rax
063b4fd3 mov       %rax,0x228(%rsp)
063b4fdb call      0x0000`0000`063B`5E70
063b4fe0 mov       %al,0x9E(%rsp)
063b4fe7 jmp       0x0000`0000`063B`50A4
063b4fec mov       0xF0(%rsp),%rcx
063b4ff4 mov       8(%rcx),%rax
063b4ff8 mov       %rax,0x220(%rsp)
063b5000 mov       0x11C(%rsp),%edx
063b5007 mov       0x120(%rsp),%r8
063b500f mov       0x128(%rsp),%r9
063b5017 call      0x0000`0000`063B`55D0
063b501c mov       %al,0x9D(%rsp)
063b5023 mov       0x9D(%rsp),%cl
063b502a and       $1,%cl
063b502d call      0x0000`0000`063B`CEE0
063b5032 and       $1,%al
063b5034 mov       %al,0x135(%rsp)
063b503b movzbl    0x135(%rsp),%eax
063b5043 test      $1,%al
063b5045 je        0x0000`0000`063B`504D
063b5047 jmp       0x0000`0000`063B`5049
063b5049 jmp       0x0000`0000`063B`507B
063b504b ud2
063b504d mov       0xF8(%rsp),%r8
063b5055 mov       0x100(%rsp),%rdx
063b505d mov       0xF0(%rsp),%rax
063b5065 mov       0x20(%rax),%rcx
063b5069 mov       0x28(%rax),%rax
063b506d callq     *0x18(%rax)
063b5070 and       $1,%al
063b5072 mov       %al,0x10F(%rsp)
063b5079 jmp       0x0000`0000`063B`5090
063b507b lea       0x63C`D9C0,%rcx
063b5082 call      0x0000`0000`063B`CF60
063b5087 and       $1,%al
063b5089 mov       %al,0x10F(%rsp)
063b5090 mov       0x10F(%rsp),%al
063b5097 and       $1,%al
063b5099 movzbl    %al,%eax
063b509c add       $0x288,%rsp
063b50a3 ret
063b50a4 mov       0x9E(%rsp),%al
063b50ab test      $1,%al
063b50ad jne       0x0000`0000`063B`50E5
063b50af jmp       0x0000`0000`063B`50B1
063b50b1 mov       0xF0(%rsp),%rax
063b50b9 mov       8(%rax),%rax
063b50bd mov       %rax,0x260(%rsp)
063b50c5 sub       0x110(%rsp),%rax
063b50cd mov       %rax,0x90(%rsp)
063b50d5 setb      %al
063b50d8 test      $1,%al
063b50da jne       0x0000`0000`063B`53BA
063b50e0 jmp       0x0000`0000`063B`538A
063b50e5 mov       0xF0(%rsp),%rcx
063b50ed mov       8(%rcx),%rax
063b50f1 mov       %rax,0x80(%rsp)
063b50f9 mov       %rax,0x230(%rsp)
063b5101 add       $0x34,%rcx
063b5105 mov       $0x30,%edx
063b510a call      0x0000`0000`063B`9500
063b510f mov       %eax,0x8C(%rsp)
063b5116 mov       %eax,0x238(%rsp)
063b511d mov       0xF0(%rsp),%rcx
063b5125 add       $0x38,%rcx
063b5129 movb      $1,0x136(%rsp)
063b5131 mov       0x136(%rsp),%dl
063b5138 call      0x0000`0000`063B`94C0
063b513d mov       %al,0x7F(%rsp)
063b5141 mov       %al,0x23F(%rsp)
063b5148 mov       0xF0(%rsp),%rcx
063b5150 mov       0x11C(%rsp),%edx
063b5157 mov       0x120(%rsp),%r8
063b515f mov       0x128(%rsp),%r9
063b5167 call      0x0000`0000`063B`55D0
063b516c mov       %al,0x7E(%rsp)
063b5170 mov       0x7E(%rsp),%cl
063b5174 and       $1,%cl
063b5177 call      0x0000`0000`063B`CEE0
063b517c and       $1,%al
063b517e mov       %al,0x137(%rsp)
063b5185 movzbl    0x137(%rsp),%eax
063b518d test      $1,%al
063b518f je        0x0000`0000`063B`5197
063b5191 jmp       0x0000`0000`063B`5193
063b5193 jmp       0x0000`0000`063B`51B5
063b5195 ud2
063b5197 mov       0x80(%rsp),%rax
063b519f sub       0x110(%rsp),%rax
063b51a7 mov       %rax,0x70(%rsp)
063b51ac setb      %al
063b51af test      $1,%al
063b51b1 jne       0x0000`0000`063B`51FC
063b51b3 jmp       0x0000`0000`063B`51CF
063b51b5 lea       0x63C`D9D8,%rcx
063b51bc call      0x0000`0000`063B`CF60
063b51c1 and       $1,%al
063b51c3 mov       %al,0x10F(%rsp)
063b51ca jmp       0x0000`0000`063B`5090
063b51cf mov       0x70(%rsp),%rdx
063b51d4 mov       0xF0(%rsp),%rcx
063b51dc movb      $1,0x14D(%rsp)
063b51e4 mov       0x14D(%rsp),%r8b
063b51ec call      0x0000`0000`063B`5B20
063b51f1 mov       %rax,0x60(%rsp)
063b51f6 mov       %edx,0x6C(%rsp)
063b51fa jmp       0x0000`0000`063B`5216
063b51fc lea       0x63C`D740,%rcx
063b5203 lea       0x63C`D9F0,%r8
063b520a mov       $0x21,%edx
063b520f call      0x0000`0000`063B`2030
063b5214 ud2
063b5216 mov       0x6C(%rsp),%edx
063b521a mov       0x60(%rsp),%rcx
063b521f call      0x0000`0000`063B`CE00
063b5224 mov       %edx,0x140(%rsp)
063b522b mov       %rax,0x138(%rsp)
063b5233 mov       0x140(%rsp),%eax
063b523a add       $0xFFEF`0000,%eax
063b523f sete      %al
063b5242 movzbl    %al,%eax
063b5245 jne       0x0000`0000`063B`524D
063b5247 jmp       0x0000`0000`063B`5249
063b5249 jmp       0x0000`0000`063B`52AC
063b524b ud2
063b524d mov       0xF8(%rsp),%r8
063b5255 mov       0x100(%rsp),%rdx
063b525d mov       0xF0(%rsp),%rax
063b5265 mov       0x138(%rsp),%r9
063b526d mov       %r9,0x50(%rsp)
063b5272 mov       0x140(%rsp),%ecx
063b5279 mov       %ecx,0x58(%rsp)
063b527d mov       %r9,0x240(%rsp)
063b5285 mov       %ecx,0x248(%rsp)
063b528c mov       %r9,0x250(%rsp)
063b5294 mov       %ecx,0x258(%rsp)
063b529b mov       0x20(%rax),%rcx
063b529f mov       0x28(%rax),%rax
063b52a3 callq     *0x18(%rax)
063b52a6 mov       %al,0x5F(%rsp)
063b52aa jmp       0x0000`0000`063B`52C6
063b52ac lea       0x63C`DA08,%rcx
063b52b3 call      0x0000`0000`063B`CF60
063b52b8 and       $1,%al
063b52ba mov       %al,0x10F(%rsp)
063b52c1 jmp       0x0000`0000`063B`5090
063b52c6 mov       0x5F(%rsp),%cl
063b52ca and       $1,%cl
063b52cd call      0x0000`0000`063B`CEE0
063b52d2 and       $1,%al
063b52d4 mov       %al,0x14E(%rsp)
063b52db movzbl    0x14E(%rsp),%eax
063b52e3 test      $1,%al
063b52e5 je        0x0000`0000`063B`52ED
063b52e7 jmp       0x0000`0000`063B`52E9
063b52e9 jmp       0x0000`0000`063B`5309
063b52eb ud2
063b52ed mov       0xF0(%rsp),%r8
063b52f5 mov       0x58(%rsp),%edx
063b52f9 mov       0x50(%rsp),%rcx
063b52fe call      0x0000`0000`063B`4B30
063b5303 mov       %al,0x4F(%rsp)
063b5307 jmp       0x0000`0000`063B`5323
063b5309 lea       0x63C`DA20,%rcx
063b5310 call      0x0000`0000`063B`CF60
063b5315 and       $1,%al
063b5317 mov       %al,0x10F(%rsp)
063b531e jmp       0x0000`0000`063B`5090
063b5323 mov       0x4F(%rsp),%cl
063b5327 and       $1,%cl
063b532a call      0x0000`0000`063B`CEE0
063b532f and       $1,%al
063b5331 mov       %al,0x14F(%rsp)
063b5338 movzbl    0x14F(%rsp),%eax
063b5340 test      $1,%al
063b5342 je        0x0000`0000`063B`534A
063b5344 jmp       0x0000`0000`063B`5346
063b5346 jmp       0x0000`0000`063B`5370
063b5348 ud2
063b534a mov       0xF0(%rsp),%rax
063b5352 mov       0x7F(%rsp),%cl
063b5356 mov       0x8C(%rsp),%edx
063b535d mov       %edx,0x34(%rax)
063b5360 mov       %cl,0x38(%rax)
063b5363 movb      $0,0x10F(%rsp)
063b536b jmp       0x0000`0000`063B`5090
063b5370 lea       0x63C`DA38,%rcx
063b5377 call      0x0000`0000`063B`CF60
063b537c and       $1,%al
063b537e mov       %al,0x10F(%rsp)
063b5385 jmp       0x0000`0000`063B`5090
063b538a mov       0x90(%rsp),%rdx
063b5392 mov       0xF0(%rsp),%rcx
063b539a movb      $1,0x165(%rsp)
063b53a2 mov       0x165(%rsp),%r8b
063b53aa call      0x0000`0000`063B`5B20
063b53af mov       %rax,0x40(%rsp)
063b53b4 mov       %edx,0x48(%rsp)
063b53b8 jmp       0x0000`0000`063B`53D4
063b53ba lea       0x63C`D740,%rcx
063b53c1 lea       0x63C`DA50,%r8
063b53c8 mov       $0x21,%edx
063b53cd call      0x0000`0000`063B`2030
063b53d2 ud2
063b53d4 mov       0x48(%rsp),%edx
063b53d8 mov       0x40(%rsp),%rcx
063b53dd call      0x0000`0000`063B`CE00
063b53e2 mov       %edx,0x158(%rsp)
063b53e9 mov       %rax,0x150(%rsp)
063b53f1 mov       0x158(%rsp),%eax
063b53f8 add       $0xFFEF`0000,%eax
063b53fd sete      %al
063b5400 movzbl    %al,%eax
063b5403 jne       0x0000`0000`063B`540B
063b5405 jmp       0x0000`0000`063B`5407
063b5407 jmp       0x0000`0000`063B`546B
063b5409 ud2
063b540b mov       0xF0(%rsp),%rcx
063b5413 mov       0x150(%rsp),%rdx
063b541b mov       %rdx,0x30(%rsp)
063b5420 mov       0x158(%rsp),%eax
063b5427 mov       %eax,0x38(%rsp)
063b542b mov       %rdx,0x268(%rsp)
063b5433 mov       %eax,0x270(%rsp)
063b543a mov       %rdx,0x278(%rsp)
063b5442 mov       %eax,0x280(%rsp)
063b5449 mov       0x11C(%rsp),%edx
063b5450 mov       0x120(%rsp),%r8
063b5458 mov       0x128(%rsp),%r9
063b5460 call      0x0000`0000`063B`55D0
063b5465 mov       %al,0x3F(%rsp)
063b5469 jmp       0x0000`0000`063B`5485
063b546b lea       0x63C`DA68,%rcx
063b5472 call      0x0000`0000`063B`CF60
063b5477 and       $1,%al
063b5479 mov       %al,0x10F(%rsp)
063b5480 jmp       0x0000`0000`063B`5090
063b5485 mov       0x3F(%rsp),%cl
063b5489 and       $1,%cl
063b548c call      0x0000`0000`063B`CEE0
063b5491 and       $1,%al
063b5493 mov       %al,0x166(%rsp)
063b549a movzbl    0x166(%rsp),%eax
063b54a2 test      $1,%al
063b54a4 je        0x0000`0000`063B`54AC
063b54a6 jmp       0x0000`0000`063B`54A8
063b54a8 jmp       0x0000`0000`063B`54D5
063b54aa ud2
063b54ac mov       0xF8(%rsp),%r8
063b54b4 mov       0x100(%rsp),%rdx
063b54bc mov       0xF0(%rsp),%rax
063b54c4 mov       0x20(%rax),%rcx
063b54c8 mov       0x28(%rax),%rax
063b54cc callq     *0x18(%rax)
063b54cf mov       %al,0x2F(%rsp)
063b54d3 jmp       0x0000`0000`063B`54EF
063b54d5 lea       0x63C`DA80,%rcx
063b54dc call      0x0000`0000`063B`CF60
063b54e1 and       $1,%al
063b54e3 mov       %al,0x10F(%rsp)
063b54ea jmp       0x0000`0000`063B`5090
063b54ef mov       0x2F(%rsp),%cl
063b54f3 and       $1,%cl
063b54f6 call      0x0000`0000`063B`CEE0
063b54fb and       $1,%al
063b54fd mov       %al,0x167(%rsp)
063b5504 movzbl    0x167(%rsp),%eax
063b550c test      $1,%al
063b550e je        0x0000`0000`063B`5516
063b5510 jmp       0x0000`0000`063B`5512
063b5512 jmp       0x0000`0000`063B`553A
063b5514 ud2
063b5516 mov       0xF0(%rsp),%r8
063b551e mov       0x38(%rsp),%edx
063b5522 mov       0x30(%rsp),%rcx
063b5527 call      0x0000`0000`063B`4B30
063b552c and       $1,%al
063b552e mov       %al,0x10F(%rsp)
063b5535 jmp       0x0000`0000`063B`5090
063b553a lea       0x63C`DA98,%rcx
063b5541 call      0x0000`0000`063B`CF60
063b5546 and       $1,%al
063b5548 mov       %al,0x10F(%rsp)
063b554f jmp       0x0000`0000`063B`5090
063b5554 mov       0x9F(%rsp),%cl
063b555b and       $1,%cl
063b555e call      0x0000`0000`063B`CEE0
063b5563 and       $1,%al
063b5565 mov       %al,0x134(%rsp)
063b556c movzbl    0x134(%rsp),%eax
063b5574 test      $1,%al
063b5576 je        0x0000`0000`063B`557E
063b5578 jmp       0x0000`0000`063B`557A
063b557a jmp       0x0000`0000`063B`55AF
063b557c ud2
063b557e mov       0xF8(%rsp),%r8
063b5586 mov       0x100(%rsp),%rdx
063b558e mov       0xF0(%rsp),%rax
063b5596 mov       0x20(%rax),%rcx
063b559a mov       0x28(%rax),%rax
063b559e callq     *0x18(%rax)
063b55a1 and       $1,%al
063b55a3 mov       %al,0x10F(%rsp)
063b55aa jmp       0x0000`0000`063B`5090
063b55af lea       0x63C`DAB0,%rcx
063b55b6 call      0x0000`0000`063B`CF60
063b55bb and       $1,%al
063b55bd mov       %al,0x10F(%rsp)
063b55c4 jmp       0x0000`0000`063B`5090

core::fmt::impl$9::pad_integral::write_prefix:
063b55d0 sub       $0x78,%rsp
063b55d4 mov       %rcx,0x28(%rsp)
063b55d9 mov       %edx,0x34(%rsp)
063b55dd mov       %r8,0x38(%rsp)
063b55e2 mov       %r9,0x40(%rsp)
063b55e7 mov       %rcx,0x50(%rsp)
063b55ec mov       0x34(%rsp),%edx
063b55f0 sub       $0x11`0000,%edx
063b55f6 mov       $1,%eax
063b55fb xor       %ecx,%ecx
063b55fd cmp       $0,%edx
063b5600 cmove     %rcx,%rax
063b5604 cmp       $1,%rax
063b5608 jne       0x0000`0000`063B`5628
063b560a mov       0x28(%rsp),%rax
063b560f mov       0x34(%rsp),%edx
063b5613 mov       %edx,0x64(%rsp)
063b5617 mov       0x20(%rax),%rcx
063b561b mov       0x28(%rax),%rax
063b561f callq     *0x20(%rax)
063b5622 mov       %al,0x27(%rsp)
063b5626 jmp       0x0000`0000`063B`5641
063b5628 mov       $1,%eax
063b562d xor       %ecx,%ecx
063b562f cmpq      $0,0x38(%rsp)
063b5635 cmove     %rcx,%rax
063b5639 cmp       $1,%rax
063b563d je        0x0000`0000`063B`5682
063b563f jmp       0x0000`0000`063B`56AE
063b5641 mov       0x27(%rsp),%cl
063b5645 and       $1,%cl
063b5648 call      0x0000`0000`063B`CEE0
063b564d and       $1,%al
063b564f mov       %al,0x4F(%rsp)
063b5653 movzbl    0x4F(%rsp),%eax
063b5658 test      $1,%al
063b565a je        0x0000`0000`063B`5628
063b565c jmp       0x0000`0000`063B`565E
063b565e jmp       0x0000`0000`063B`5662
063b5660 ud2
063b5662 lea       0x63C`DAC8,%rcx
063b5669 call      0x0000`0000`063B`CF60
063b566e and       $1,%al
063b5670 mov       %al,0x4E(%rsp)
063b5674 mov       0x4E(%rsp),%al
063b5678 and       $1,%al
063b567a movzbl    %al,%eax
063b567d add       $0x78,%rsp
063b5681 ret
063b5682 mov       0x28(%rsp),%rax
063b5687 mov       0x38(%rsp),%rdx
063b568c mov       0x40(%rsp),%r8
063b5691 mov       %rdx,0x68(%rsp)
063b5696 mov       %r8,0x70(%rsp)
063b569b mov       0x20(%rax),%rcx
063b569f mov       0x28(%rax),%rax
063b56a3 callq     *0x18(%rax)
063b56a6 and       $1,%al
063b56a8 mov       %al,0x4E(%rsp)
063b56ac jmp       0x0000`0000`063B`5674
063b56ae movb      $0,0x4E(%rsp)
063b56b3 jmp       0x0000`0000`063B`5674

core::fmt::Formatter::pad:
063b56c0 sub       $0x178,%rsp
063b56c7 mov       %rcx,0x90(%rsp)
063b56cf mov       %rdx,0xA0(%rsp)
063b56d7 mov       %r8,0xA8(%rsp)
063b56df mov       %rcx,0x118(%rsp)
063b56e7 call      0x0000`0000`063B`16C0
063b56ec mov       %al,0x9F(%rsp)
063b56f3 mov       0x9F(%rsp),%al
063b56fa test      $1,%al
063b56fc jne       0x0000`0000`063B`570A
063b56fe jmp       0x0000`0000`063B`5700
063b5700 movb      $0,0xB7(%rsp)
063b5708 jmp       0x0000`0000`063B`5732
063b570a mov       0x90(%rsp),%rcx
063b5712 add       $0x10,%rcx
063b5716 call      0x0000`0000`063B`16C0
063b571b mov       %al,0x8F(%rsp)
063b5722 mov       0x8F(%rsp),%al
063b5729 and       $1,%al
063b572b mov       %al,0xB7(%rsp)
063b5732 testb     $1,0xB7(%rsp)
063b573a jne       0x0000`0000`063B`574D
063b573c mov       0x90(%rsp),%rax
063b5744 cmpq      $1,0x10(%rax)
063b5749 je        0x0000`0000`063B`578D
063b574b jmp       0x0000`0000`063B`57C8
063b574d mov       0x90(%rsp),%rax
063b5755 mov       0x20(%rax),%rcx
063b5759 mov       0x28(%rax),%rax
063b575d mov       0xA0(%rsp),%rdx
063b5765 mov       0xA8(%rsp),%r8
063b576d callq     *0x18(%rax)
063b5770 and       $1,%al
063b5772 mov       %al,0xB6(%rsp)
063b5779 mov       0xB6(%rsp),%al
063b5780 and       $1,%al
063b5782 movzbl    %al,%eax
063b5785 add       $0x178,%rsp
063b578c ret
063b578d mov       0x90(%rsp),%rax
063b5795 mov       0x18(%rax),%rax
063b5799 mov       %rax,0x80(%rsp)
063b57a1 mov       %rax,0x138(%rsp)
063b57a9 mov       0xA0(%rsp),%rdx
063b57b1 mov       0xA8(%rsp),%r8
063b57b9 lea       0xD8(%rsp),%rcx
063b57c1 call      0x0000`0000`063B`DB60
063b57c6 jmp       0x0000`0000`063B`5803
063b57c8 mov       0xA0(%rsp),%rcx
063b57d0 mov       0xA8(%rsp),%rax
063b57d8 mov       %rcx,0xB8(%rsp)
063b57e0 mov       %rax,0xC0(%rsp)
063b57e8 mov       0x90(%rsp),%rax
063b57f0 mov       (%rax),%rax
063b57f3 test      %rax,%rax
063b57f6 je        0x0000`0000`063B`58E4
063b57fc jmp       0x0000`0000`063B`57FE
063b57fe jmp       0x0000`0000`063B`5915
063b5803 mov       0x80(%rsp),%rdx
063b580b lea       0xD8(%rsp),%rcx
063b5813 call      0x0000`0000`063B`A020
063b5818 mov       %edx,0xD0(%rsp)
063b581f mov       %rax,0xC8(%rsp)
063b5827 mov       0xD0(%rsp),%edx
063b582e sub       $0x11`0000,%edx
063b5834 mov       $1,%eax
063b5839 xor       %ecx,%ecx
063b583b cmp       $0,%edx
063b583e cmove     %rcx,%rax
063b5842 cmp       $1,%rax
063b5846 jne       0x0000`0000`063B`5889
063b5848 mov       0xC8(%rsp),%rax
063b5850 mov       %rax,0x140(%rsp)
063b5858 mov       0xA0(%rsp),%rcx
063b5860 mov       0xA8(%rsp),%rdx
063b5868 mov       %rax,0xF0(%rsp)
063b5870 mov       0xF0(%rsp),%r8
063b5878 call      0x0000`0000`063B`DA90
063b587d mov       %rax,0x70(%rsp)
063b5882 mov       %rdx,0x78(%rsp)
063b5887 jmp       0x0000`0000`063B`58AE
063b5889 mov       0xA0(%rsp),%rcx
063b5891 mov       0xA8(%rsp),%rax
063b5899 mov       %rcx,0xB8(%rsp)
063b58a1 mov       %rax,0xC0(%rsp)
063b58a9 jmp       0x0000`0000`063B`57E8
063b58ae mov       0x78(%rsp),%rdx
063b58b3 mov       0x70(%rsp),%rcx
063b58b8 mov       0xA0(%rsp),%r8
063b58c0 mov       0xA8(%rsp),%r9
063b58c8 call      0x0000`0000`063B`1830
063b58cd mov       %rdx,0xC0(%rsp)
063b58d5 mov       %rax,0xB8(%rsp)
063b58dd jmp       0x0000`0000`063B`57E8
063b58e2 ud2
063b58e4 mov       0x90(%rsp),%rax
063b58ec mov       0x20(%rax),%rcx
063b58f0 mov       0x28(%rax),%rax
063b58f4 mov       0xB8(%rsp),%rdx
063b58fc mov       0xC0(%rsp),%r8
063b5904 callq     *0x18(%rax)
063b5907 and       $1,%al
063b5909 mov       %al,0xB6(%rsp)
063b5910 jmp       0x0000`0000`063B`5779
063b5915 mov       0x90(%rsp),%rax
063b591d mov       8(%rax),%rax
063b5921 mov       %rax,0x58(%rsp)
063b5926 mov       %rax,0x148(%rsp)
063b592e mov       0xB8(%rsp),%rcx
063b5936 mov       0xC0(%rsp),%rdx
063b593e call      0x0000`0000`063B`DAE0
063b5943 mov       %rax,0x60(%rsp)
063b5948 mov       %rdx,0x68(%rsp)
063b594d mov       0x68(%rsp),%rdx
063b5952 mov       0x60(%rsp),%rcx
063b5957 call      0x0000`0000`063B`B5F0
063b595c mov       %rax,0x50(%rsp)
063b5961 mov       %rax,0x150(%rsp)
063b5969 mov       0x50(%rsp),%rax
063b596e mov       0x58(%rsp),%rcx
063b5973 cmp       %rcx,%rax
063b5976 jae       0x0000`0000`063B`599B
063b5978 mov       0x50(%rsp),%rcx
063b597d mov       0x58(%rsp),%rax
063b5982 movb      $0,0xFF(%rsp)
063b598a sub       %rcx,%rax
063b598d mov       %rax,0x48(%rsp)
063b5992 setb      %al
063b5995 test      $1,%al
063b5997 jne       0x0000`0000`063B`59F1
063b5999 jmp       0x0000`0000`063B`59CC
063b599b mov       0x90(%rsp),%rax
063b59a3 mov       0x20(%rax),%rcx
063b59a7 mov       0x28(%rax),%rax
063b59ab mov       0xB8(%rsp),%rdx
063b59b3 mov       0xC0(%rsp),%r8
063b59bb callq     *0x18(%rax)
063b59be and       $1,%al
063b59c0 mov       %al,0xB6(%rsp)
063b59c7 jmp       0x0000`0000`063B`5779
063b59cc mov       0x48(%rsp),%rdx
063b59d1 mov       0x90(%rsp),%rcx
063b59d9 mov       0xFF(%rsp),%r8b
063b59e1 call      0x0000`0000`063B`5B20
063b59e6 mov       %rax,0x38(%rsp)
063b59eb mov       %edx,0x44(%rsp)
063b59ef jmp       0x0000`0000`063B`5A0B
063b59f1 lea       0x63C`D740,%rcx
063b59f8 lea       0x63C`DAE0,%r8
063b59ff mov       $0x21,%edx
063b5a04 call      0x0000`0000`063B`2030
063b5a09 ud2
063b5a0b mov       0x44(%rsp),%edx
063b5a0f mov       0x38(%rsp),%rcx
063b5a14 call      0x0000`0000`063B`CE00
063b5a19 mov       %edx,0x108(%rsp)
063b5a20 mov       %rax,0x100(%rsp)
063b5a28 mov       0x108(%rsp),%eax
063b5a2f add       $0xFFEF`0000,%eax
063b5a34 sete      %al
063b5a37 movzbl    %al,%eax
063b5a3a jne       0x0000`0000`063B`5A42
063b5a3c jmp       0x0000`0000`063B`5A3E
063b5a3e jmp       0x0000`0000`063B`5AA1
063b5a40 ud2
063b5a42 mov       0x90(%rsp),%rax
063b5a4a mov       0x100(%rsp),%rdx
063b5a52 mov       %rdx,0x28(%rsp)
063b5a57 mov       0x108(%rsp),%ecx
063b5a5e mov       %ecx,0x30(%rsp)
063b5a62 mov       %rdx,0x158(%rsp)
063b5a6a mov       %ecx,0x160(%rsp)
063b5a71 mov       %rdx,0x168(%rsp)
063b5a79 mov       %ecx,0x170(%rsp)
063b5a80 mov       0x20(%rax),%rcx
063b5a84 mov       0x28(%rax),%rax
063b5a88 mov       0xB8(%rsp),%rdx
063b5a90 mov       0xC0(%rsp),%r8
063b5a98 callq     *0x18(%rax)
063b5a9b mov       %al,0x37(%rsp)
063b5a9f jmp       0x0000`0000`063B`5ABB
063b5aa1 lea       0x63C`DAF8,%rcx
063b5aa8 call      0x0000`0000`063B`CF60
063b5aad and       $1,%al
063b5aaf mov       %al,0xB6(%rsp)
063b5ab6 jmp       0x0000`0000`063B`5779
063b5abb mov       0x37(%rsp),%cl
063b5abf and       $1,%cl
063b5ac2 call      0x0000`0000`063B`CEE0
063b5ac7 and       $1,%al
063b5ac9 mov       %al,0x117(%rsp)
063b5ad0 movzbl    0x117(%rsp),%eax
063b5ad8 test      $1,%al
063b5ada je        0x0000`0000`063B`5AE2
063b5adc jmp       0x0000`0000`063B`5ADE
063b5ade jmp       0x0000`0000`063B`5B06
063b5ae0 ud2
063b5ae2 mov       0x90(%rsp),%r8
063b5aea mov       0x30(%rsp),%edx
063b5aee mov       0x28(%rsp),%rcx
063b5af3 call      0x0000`0000`063B`4B30
063b5af8 and       $1,%al
063b5afa mov       %al,0xB6(%rsp)
063b5b01 jmp       0x0000`0000`063B`5779
063b5b06 lea       0x63C`DB10,%rcx
063b5b0d call      0x0000`0000`063B`CF60
063b5b12 and       $1,%al
063b5b14 mov       %al,0xB6(%rsp)
063b5b1b jmp       0x0000`0000`063B`5779

core::fmt::Formatter::padding:
063b5b20 sub       $0x118,%rsp
063b5b27 mov       %r8b,0x6F(%rsp)
063b5b2c mov       %rdx,0x70(%rsp)
063b5b31 mov       %rcx,0x78(%rsp)
063b5b36 mov       %rcx,0xE0(%rsp)
063b5b3e mov       %rdx,0xE8(%rsp)
063b5b46 mov       %r8b,0xF7(%rsp)
063b5b4e movzbl    0x38(%rcx),%eax
063b5b52 cmp       $3,%rax
063b5b56 jne       0x0000`0000`063B`5B65
063b5b58 mov       0x6F(%rsp),%al
063b5b5c mov       %al,0x97(%rsp)
063b5b63 jmp       0x0000`0000`063B`5B74
063b5b65 mov       0x78(%rsp),%rax
063b5b6a mov       0x38(%rax),%al
063b5b6d mov       %al,0x97(%rsp)
063b5b74 movzbl    0x97(%rsp),%eax
063b5b7c mov       %rax,0x60(%rsp)
063b5b81 mov       0x60(%rsp),%rax
063b5b86 lea       0x63B`5D78,%rcx
063b5b8d movslq    (%rcx,%rax,4),%rax
063b5b91 add       %rcx,%rax
063b5b94 jmp       *%rax
063b5b96 ud2
063b5b98 mov       0x70(%rsp),%rax
063b5b9d movq      $0,0x98(%rsp)
063b5ba9 mov       %rax,0xA0(%rsp)
063b5bb1 jmp       0x0000`0000`063B`5C29
063b5bb3 mov       0x70(%rsp),%rax
063b5bb8 mov       %rax,0x98(%rsp)
063b5bc0 movq      $0,0xA0(%rsp)
063b5bcc jmp       0x0000`0000`063B`5C29
063b5bce mov       0x70(%rsp),%rax
063b5bd3 mov       %rax,%rcx
063b5bd6 shr       $1,%rcx
063b5bda mov       %rcx,0x50(%rsp)
063b5bdf add       $1,%rax
063b5be3 mov       %rax,0x58(%rsp)
063b5be8 setb      %al
063b5beb test      $1,%al
063b5bed jne       0x0000`0000`063B`5C0F
063b5bef mov       0x50(%rsp),%rcx
063b5bf4 mov       0x58(%rsp),%rax
063b5bf9 shr       $1,%rax
063b5bfd mov       %rcx,0x98(%rsp)
063b5c05 mov       %rax,0xA0(%rsp)
063b5c0d jmp       0x0000`0000`063B`5C29
063b5c0f lea       0x63C`D720,%rcx
063b5c16 lea       0x63C`DB28,%r8
063b5c1d mov       $0x1C,%edx
063b5c22 call      0x0000`0000`063B`2030
063b5c27 ud2
063b5c29 mov       0x98(%rsp),%rax
063b5c31 mov       %rax,0x108(%rsp)
063b5c39 mov       0xA0(%rsp),%rcx
063b5c41 mov       %rcx,0x38(%rsp)
063b5c46 mov       %rcx,0x110(%rsp)
063b5c4e movq      $0,0xA8(%rsp)
063b5c5a mov       %rax,0xB0(%rsp)
063b5c62 mov       0xA8(%rsp),%rcx
063b5c6a mov       0xB0(%rsp),%rdx
063b5c72 call      0x0000`0000`063B`15F0
063b5c77 mov       %rax,0x40(%rsp)
063b5c7c mov       %rdx,0x48(%rsp)
063b5c81 mov       0x48(%rsp),%rax
063b5c86 mov       0x40(%rsp),%rcx
063b5c8b mov       %rcx,0xB8(%rsp)
063b5c93 mov       %rax,0xC0(%rsp)
063b5c9b lea       0xB8(%rsp),%rcx
063b5ca3 call      0x0000`0000`063B`15C0
063b5ca8 mov       %rdx,0xD0(%rsp)
063b5cb0 mov       %rax,0xC8(%rsp)
063b5cb8 mov       0xC8(%rsp),%rax
063b5cc0 test      %rax,%rax
063b5cc3 je        0x0000`0000`063B`5CCB
063b5cc5 jmp       0x0000`0000`063B`5CC7
063b5cc7 jmp       0x0000`0000`063B`5CE8
063b5cc9 ud2
063b5ccb mov       0x38(%rsp),%rdx
063b5cd0 mov       0x78(%rsp),%rax
063b5cd5 mov       0x34(%rax),%ecx
063b5cd8 call      0x0000`0000`063B`4B00
063b5cdd mov       %rax,0x28(%rsp)
063b5ce2 mov       %edx,0x34(%rsp)
063b5ce6 jmp       0x0000`0000`063B`5D5C
063b5ce8 mov       0x78(%rsp),%rdx
063b5ced mov       0x20(%rdx),%rcx
063b5cf1 mov       0x28(%rdx),%rax
063b5cf5 mov       0x34(%rdx),%edx
063b5cf8 callq     *0x20(%rax)
063b5cfb mov       %al,0x27(%rsp)
063b5cff mov       0x27(%rsp),%cl
063b5d03 and       $1,%cl
063b5d06 call      0x0000`0000`063B`CEE0
063b5d0b and       $1,%al
063b5d0d mov       %al,0xDF(%rsp)
063b5d14 movzbl    0xDF(%rsp),%eax
063b5d1c test      $1,%al
063b5d1e je        0x0000`0000`063B`5C9B
063b5d24 jmp       0x0000`0000`063B`5D26
063b5d26 jmp       0x0000`0000`063B`5D2A
063b5d28 ud2
063b5d2a lea       0x63C`DB40,%rcx
063b5d31 call      0x0000`0000`063B`CF80
063b5d36 mov       %edx,0x88(%rsp)
063b5d3d mov       %rax,0x80(%rsp)
063b5d45 mov       0x80(%rsp),%rax
063b5d4d mov       0x88(%rsp),%edx
063b5d54 add       $0x118,%rsp
063b5d5b ret
063b5d5c mov       0x34(%rsp),%eax
063b5d60 mov       0x28(%rsp),%rcx
063b5d65 mov       %rcx,0x80(%rsp)
063b5d6d mov       %eax,0x88(%rsp)
063b5d74 jmp       0x0000`0000`063B`5D45

core::fmt::Formatter::write_str:
063b5d90 sub       $0x48,%rsp
063b5d94 mov       %rcx,%rax
063b5d97 mov       %rax,0x30(%rsp)
063b5d9c mov       %rdx,0x38(%rsp)
063b5da1 mov       %r8,0x40(%rsp)
063b5da6 mov       0x20(%rax),%rcx
063b5daa mov       0x28(%rax),%rax
063b5dae callq     *0x18(%rax)
063b5db1 mov       %al,0x2F(%rsp)
063b5db5 mov       0x2F(%rsp),%al
063b5db9 and       $1,%al
063b5dbb movzbl    %al,%eax
063b5dbe add       $0x48,%rsp
063b5dc2 ret

core::fmt::Formatter::write_fmt:
063b5dd0 sub       $0x78,%rsp
063b5dd4 mov       %rcx,0x70(%rsp)
063b5dd9 mov       0x20(%rcx),%rax
063b5ddd mov       %rax,0x28(%rsp)
063b5de2 mov       0x28(%rcx),%rax
063b5de6 mov       %rax,0x30(%rsp)
063b5deb lea       0x40(%rsp),%rcx
063b5df0 mov       $0x30,%r8d
063b5df6 call      0x0000`0000`063B`BDE0
063b5dfb mov       0x28(%rsp),%rcx
063b5e00 mov       0x30(%rsp),%rdx
063b5e05 lea       0x40(%rsp),%r8
063b5e0a call      0x0000`0000`063B`4320
063b5e0f mov       %al,0x3F(%rsp)
063b5e13 mov       0x3F(%rsp),%al
063b5e17 and       $1,%al
063b5e19 movzbl    %al,%eax
063b5e1c add       $0x78,%rsp
063b5e20 ret

core::fmt::Formatter::sign_plus:
063b5e30 push      %rax
063b5e31 mov       %rcx,(%rsp)
063b5e35 mov       0x30(%rcx),%eax
063b5e38 and       $1,%eax
063b5e3b cmp       $0,%eax
063b5e3e setne     %al
063b5e41 and       $1,%al
063b5e43 movzbl    %al,%eax
063b5e46 pop       %rcx
063b5e47 ret

core::fmt::Formatter::alternate:
063b5e50 push      %rax
063b5e51 mov       %rcx,(%rsp)
063b5e55 mov       0x30(%rcx),%eax
063b5e58 and       $4,%eax
063b5e5b cmp       $0,%eax
063b5e5e setne     %al
063b5e61 and       $1,%al
063b5e63 movzbl    %al,%eax
063b5e66 pop       %rcx
063b5e67 ret

core::fmt::Formatter::sign_aware_zero_pad:
063b5e70 push      %rax
063b5e71 mov       %rcx,(%rsp)
063b5e75 mov       0x30(%rcx),%eax
063b5e78 and       $8,%eax
063b5e7b cmp       $0,%eax
063b5e7e setne     %al
063b5e81 and       $1,%al
063b5e83 movzbl    %al,%eax
063b5e86 pop       %rcx
063b5e87 ret

core::fmt::Formatter::debug_lower_hex:
063b5e90 push      %rax
063b5e91 mov       %rcx,(%rsp)
063b5e95 mov       0x30(%rcx),%eax
063b5e98 and       $0x10,%eax
063b5e9b cmp       $0,%eax
063b5e9e setne     %al
063b5ea1 and       $1,%al
063b5ea3 movzbl    %al,%eax
063b5ea6 pop       %rcx
063b5ea7 ret

core::fmt::Formatter::debug_upper_hex:
063b5eb0 push      %rax
063b5eb1 mov       %rcx,(%rsp)
063b5eb5 mov       0x30(%rcx),%eax
063b5eb8 and       $0x20,%eax
063b5ebb cmp       $0,%eax
063b5ebe setne     %al
063b5ec1 and       $1,%al
063b5ec3 movzbl    %al,%eax
063b5ec6 pop       %rcx
063b5ec7 ret

core::fmt::Formatter::debug_struct:
063b5ed0 sub       $0x48,%rsp
063b5ed4 mov       %rcx,%rax
063b5ed7 mov       %rax,0x28(%rsp)
063b5edc mov       %rdx,0x30(%rsp)
063b5ee1 mov       %r8,0x38(%rsp)
063b5ee6 mov       %r9,0x40(%rsp)
063b5eeb call      0x0000`0000`063C`2CB0
063b5ef0 mov       0x28(%rsp),%rax
063b5ef5 add       $0x48,%rsp
063b5ef9 ret

core::fmt::Formatter::debug_tuple:
063b5f00 sub       $0x48,%rsp
063b5f04 mov       %rcx,%rax
063b5f07 mov       %rax,0x28(%rsp)
063b5f0c mov       %rdx,0x30(%rsp)
063b5f11 mov       %r8,0x38(%rsp)
063b5f16 mov       %r9,0x40(%rsp)
063b5f1b call      0x0000`0000`063C`3270
063b5f20 mov       0x28(%rsp),%rax
063b5f25 add       $0x48,%rsp
063b5f29 ret

core::fmt::impl$10::write_char:
063b5f30 sub       $0x38,%rsp
063b5f34 mov       %rcx,%rax
063b5f37 mov       %rax,0x28(%rsp)
063b5f3c mov       %edx,0x34(%rsp)
063b5f40 mov       0x20(%rax),%rcx
063b5f44 mov       0x28(%rax),%rax
063b5f48 callq     *0x20(%rax)
063b5f4b mov       %al,0x27(%rsp)
063b5f4f mov       0x27(%rsp),%al
063b5f53 and       $1,%al
063b5f55 movzbl    %al,%eax
063b5f58 add       $0x38,%rsp
063b5f5c ret

core::fmt::impl$17::fmt:
063b5f60 sub       $0x48,%rsp
063b5f64 mov       %r8,0x20(%rsp)
063b5f69 mov       %rdx,%r8
063b5f6c mov       %rcx,%rdx
063b5f6f mov       0x20(%rsp),%rcx
063b5f74 mov       %rdx,0x30(%rsp)
063b5f79 mov       %r8,0x38(%rsp)
063b5f7e mov       %rcx,0x40(%rsp)
063b5f83 call      0x0000`0000`063B`56C0
063b5f88 mov       %al,0x2F(%rsp)
063b5f8c mov       0x2F(%rsp),%al
063b5f90 and       $1,%al
063b5f92 movzbl    %al,%eax
063b5f95 add       $0x48,%rsp
063b5f99 ret

core::fmt::impl$18::fmt:
063b5fa0 sub       $0xC8,%rsp
063b5fa7 mov       %rdx,0x28(%rsp)
063b5fac mov       %rcx,%rax
063b5faf mov       0x28(%rsp),%rcx
063b5fb4 mov       %rax,0x30(%rsp)
063b5fb9 mov       %rax,0x98(%rsp)
063b5fc1 mov       %rcx,0xA0(%rsp)
063b5fc9 mov       $0x27,%edx
063b5fce call      0x0000`0000`063B`5F30
063b5fd3 mov       %al,0x3D(%rsp)
063b5fd7 mov       0x3D(%rsp),%cl
063b5fdb and       $1,%cl
063b5fde call      0x0000`0000`063B`CEE0
063b5fe3 and       $1,%al
063b5fe5 mov       %al,0x3F(%rsp)
063b5fe9 movzbl    0x3F(%rsp),%eax
063b5fee test      $1,%al
063b5ff0 je        0x0000`0000`063B`5FF8
063b5ff2 jmp       0x0000`0000`063B`5FF4
063b5ff4 jmp       0x0000`0000`063B`602B
063b5ff6 ud2
063b5ff8 mov       0x30(%rsp),%rax
063b5ffd mov       (%rax),%edx
063b5fff movb      $1,0x70(%rsp)
063b6004 movb      $1,0x71(%rsp)
063b6009 movb      $0,0x72(%rsp)
063b600e movzbl    0x72(%rsp),%eax
063b6013 shl       $0x10,%eax
063b6016 movzwl    0x70(%rsp),%r8d
063b601c or        %eax,%r8d
063b601f lea       0x58(%rsp),%rcx
063b6024 call      0x0000`0000`063B`9650
063b6029 jmp       0x0000`0000`063B`604E
063b602b lea       0x63C`DB58,%rcx
063b6032 call      0x0000`0000`063B`CF60
063b6037 and       $1,%al
063b6039 mov       %al,0x3E(%rsp)
063b603d mov       0x3E(%rsp),%al
063b6041 and       $1,%al
063b6043 movzbl    %al,%eax
063b6046 add       $0xC8,%rsp
063b604d ret
063b604e lea       0x40(%rsp),%rcx
063b6053 lea       0x58(%rsp),%rdx
063b6058 call      0x0000`0000`063C`81B0
063b605d mov       0x40(%rsp),%rax
063b6062 mov       %rax,0x78(%rsp)
063b6067 mov       0x48(%rsp),%rax
063b606c mov       %rax,0x80(%rsp)
063b6074 mov       0x50(%rsp),%rax
063b6079 mov       %rax,0x88(%rsp)
063b6081 lea       0x78(%rsp),%rcx
063b6086 call      0x0000`0000`063C`8190
063b608b mov       %eax,0x90(%rsp)
063b6092 mov       0x90(%rsp),%eax
063b6099 add       $0xFFEF`0000,%eax
063b609e setne     %al
063b60a1 movzbl    %al,%eax
063b60a4 je        0x0000`0000`063B`60AC
063b60a6 jmp       0x0000`0000`063B`60A8
063b60a8 jmp       0x0000`0000`063B`60C6
063b60aa ud2
063b60ac mov       0x28(%rsp),%rcx
063b60b1 mov       $0x27,%edx
063b60b6 call      0x0000`0000`063B`5F30
063b60bb and       $1,%al
063b60bd mov       %al,0x3E(%rsp)
063b60c1 jmp       0x0000`0000`063B`603D
063b60c6 mov       0x28(%rsp),%rcx
063b60cb mov       0x90(%rsp),%edx
063b60d2 mov       %edx,0xC4(%rsp)
063b60d9 call      0x0000`0000`063B`5F30
063b60de mov       %al,0x27(%rsp)
063b60e2 mov       0x27(%rsp),%cl
063b60e6 and       $1,%cl
063b60e9 call      0x0000`0000`063B`CEE0
063b60ee and       $1,%al
063b60f0 mov       %al,0x97(%rsp)
063b60f7 movzbl    0x97(%rsp),%eax
063b60ff test      $1,%al
063b6101 je        0x0000`0000`063B`6081
063b6107 jmp       0x0000`0000`063B`6109
063b6109 jmp       0x0000`0000`063B`610D
063b610b ud2
063b610d lea       0x63C`DB70,%rcx
063b6114 call      0x0000`0000`063B`CF60
063b6119 and       $1,%al
063b611b mov       %al,0x3E(%rsp)
063b611f jmp       0x0000`0000`063B`603D

core::fmt::impl$20::fmt<tuple$<> >:
063b6130 sub       $0x38,%rsp
063b6134 mov       %rcx,0x28(%rsp)
063b6139 mov       %rdx,0x30(%rsp)
063b613e mov       (%rcx),%rcx
063b6141 call      0x0000`0000`063B`6160
063b6146 mov       %al,0x27(%rsp)
063b614a mov       0x27(%rsp),%al
063b614e and       $1,%al
063b6150 movzbl    %al,%eax
063b6153 add       $0x38,%rsp
063b6157 ret

core::fmt::impl$20::fmt::inner:
063b6160 sub       $0x98,%rsp
063b6167 mov       %rdx,0x30(%rsp)
063b616c mov       %rcx,%rax
063b616f mov       0x30(%rsp),%rcx
063b6174 mov       %rax,0x38(%rsp)
063b6179 mov       %rax,0x70(%rsp)
063b617e mov       %rcx,0x78(%rsp)
063b6183 mov       (%rcx),%rdx
063b6186 mov       %rdx,0x40(%rsp)
063b618b mov       8(%rcx),%rax
063b618f mov       %rax,0x48(%rsp)
063b6194 mov       %rdx,0x80(%rsp)
063b619c mov       %rax,0x88(%rsp)
063b61a4 mov       0x30(%rcx),%eax
063b61a7 mov       %eax,0x50(%rsp)
063b61ab mov       %eax,0x90(%rsp)
063b61b2 call      0x0000`0000`063B`5E50
063b61b7 mov       %al,0x57(%rsp)
063b61bb mov       0x57(%rsp),%al
063b61bf test      $1,%al
063b61c1 jne       0x0000`0000`063B`61F6
063b61c3 jmp       0x0000`0000`063B`61C5
063b61c5 mov       0x30(%rsp),%rdx
063b61ca mov       0x38(%rsp),%rax
063b61cf mov       0x30(%rdx),%ecx
063b61d2 or        $4,%ecx
063b61d5 mov       %ecx,0x30(%rdx)
063b61d8 mov       %rax,0x68(%rsp)
063b61dd lea       0x68(%rsp),%rcx
063b61e2 call      0x0000`0000`063B`0DD0
063b61e7 mov       %al,0x2F(%rsp)
063b61eb and       $1,%al
063b61ed mov       %al,0x97(%rsp)
063b61f4 jmp       0x0000`0000`063B`6241
063b61f6 mov       0x30(%rsp),%rcx
063b61fb mov       0x30(%rcx),%eax
063b61fe or        $8,%eax
063b6201 mov       %eax,0x30(%rcx)
063b6204 call      0x0000`0000`063B`16C0
063b6209 mov       %al,0x2E(%rsp)
063b620d mov       0x2E(%rsp),%al
063b6211 test      $1,%al
063b6213 jne       0x0000`0000`063B`6217
063b6215 jmp       0x0000`0000`063B`61C5
063b6217 mov       0x30(%rsp),%rax
063b621c movq      $0x12,0x60(%rsp)
063b6225 movq      $1,0x58(%rsp)
063b622e mov       0x58(%rsp),%rdx
063b6233 mov       0x60(%rsp),%rcx
063b6238 mov       %rdx,(%rax)
063b623b mov       %rcx,8(%rax)
063b623f jmp       0x0000`0000`063B`61C5
063b6241 mov       0x2F(%rsp),%al
063b6245 mov       0x30(%rsp),%rcx
063b624a mov       0x50(%rsp),%edx
063b624e mov       0x48(%rsp),%r8
063b6253 mov       0x40(%rsp),%r9
063b6258 mov       %r9,(%rcx)
063b625b mov       %r8,8(%rcx)
063b625f mov       %edx,0x30(%rcx)
063b6262 and       $1,%al
063b6264 movzbl    %al,%eax
063b6267 add       $0x98,%rsp
063b626e ret

core::fmt::impl$24::fmt<tuple$<> >:
063b6270 sub       $0x38,%rsp
063b6274 mov       %rcx,0x28(%rsp)
063b6279 mov       %rdx,0x30(%rsp)
063b627e call      0x0000`0000`063B`6130
063b6283 mov       %al,0x27(%rsp)
063b6287 mov       0x27(%rsp),%al
063b628b and       $1,%al
063b628d movzbl    %al,%eax
063b6290 add       $0x38,%rsp
063b6294 ret

core::fmt::impl$27::fmt:
063b62a0 sub       $0x48,%rsp
063b62a4 mov       %rdx,0x28(%rsp)
063b62a9 mov       %rcx,%rax
063b62ac mov       0x28(%rsp),%rcx
063b62b1 mov       %rax,0x38(%rsp)
063b62b6 mov       %rcx,0x40(%rsp)
063b62bb lea       0x63C`DB88,%rdx
063b62c2 mov       $2,%r8d
063b62c8 call      0x0000`0000`063B`56C0
063b62cd mov       %al,0x37(%rsp)
063b62d1 mov       0x37(%rsp),%al
063b62d5 and       $1,%al
063b62d7 movzbl    %al,%eax
063b62da add       $0x48,%rsp
063b62de ret

core::slice::impl$0::get_unchecked<core::fmt::ArgumentV1,usize>:
063b62e0 sub       $0x48,%rsp
063b62e4 mov       %r8,0x20(%rsp)
063b62e9 mov       %rdx,%r8
063b62ec mov       %rcx,%rdx
063b62ef mov       0x20(%rsp),%rcx
063b62f4 mov       %rdx,0x30(%rsp)
063b62f9 mov       %r8,0x38(%rsp)
063b62fe mov       %rcx,0x40(%rsp)
063b6303 call      0x0000`0000`063B`A660
063b6308 mov       %rax,0x28(%rsp)
063b630d mov       0x28(%rsp),%rax
063b6312 add       $0x48,%rsp
063b6316 ret

core::slice::impl$0::as_ptr<core::fmt::ArgumentV1>:
063b6320 sub       $0x10,%rsp
063b6324 mov       %rcx,%rax
063b6327 mov       %rax,(%rsp)
063b632b mov       %rdx,8(%rsp)
063b6330 add       $0x10,%rsp
063b6334 ret

core::slice::impl$0::iter<core::fmt::ArgumentV1>:
063b6340 sub       $0x48,%rsp
063b6344 mov       %rcx,0x38(%rsp)
063b6349 mov       %rdx,0x40(%rsp)
063b634e call      0x0000`0000`063C`5270
063b6353 mov       %rax,0x28(%rsp)
063b6358 mov       %rdx,0x30(%rsp)
063b635d mov       0x30(%rsp),%rdx
063b6362 mov       0x28(%rsp),%rax
063b6367 add       $0x48,%rsp
063b636b ret

core::str::converts::from_utf8_unchecked:
063b6370 sub       $0x30,%rsp
063b6374 mov       %rcx,0x10(%rsp)
063b6379 mov       %rdx,0x18(%rsp)
063b637e mov       %rcx,0x20(%rsp)
063b6383 mov       %rdx,0x28(%rsp)
063b6388 mov       0x20(%rsp),%rax
063b638d mov       %rax,(%rsp)
063b6391 mov       0x28(%rsp),%rax
063b6396 mov       %rax,8(%rsp)
063b639b mov       8(%rsp),%rdx
063b63a0 mov       (%rsp),%rax
063b63a4 add       $0x30,%rsp
063b63a8 ret

core::str::converts::from_utf8_unchecked_mut:
063b63b0 sub       $0x10,%rsp
063b63b4 mov       %rcx,%rax
063b63b7 mov       %rax,(%rsp)
063b63bb mov       %rdx,8(%rsp)
063b63c0 add       $0x10,%rsp
063b63c4 ret

core::str::traits::impl$4::index<core::ops::range::RangeFrom<usize> >:
063b63d0 sub       $0x58,%rsp
063b63d4 mov       %r8,0x28(%rsp)
063b63d9 mov       %rdx,%r8
063b63dc mov       %rcx,%rdx
063b63df mov       0x28(%rsp),%rcx
063b63e4 mov       %rdx,0x40(%rsp)
063b63e9 mov       %r8,0x48(%rsp)
063b63ee mov       %rcx,0x50(%rsp)
063b63f3 call      0x0000`0000`063B`36B0
063b63f8 mov       %rax,0x30(%rsp)
063b63fd mov       %rdx,0x38(%rsp)
063b6402 mov       0x38(%rsp),%rdx
063b6407 mov       0x30(%rsp),%rax
063b640c add       $0x58,%rsp
063b6410 ret

core::str::traits::impl$4::index<core::ops::range::Range<usize> >:
063b6420 sub       $0x68,%rsp
063b6424 mov       %r9,0x28(%rsp)
063b6429 mov       %r8,0x30(%rsp)
063b642e mov       %rdx,%r9
063b6431 mov       0x28(%rsp),%rdx
063b6436 mov       %rcx,%r8
063b6439 mov       0x30(%rsp),%rcx
063b643e mov       0x90(%rsp),%rax
063b6446 mov       %r8,0x48(%rsp)
063b644b mov       %r9,0x50(%rsp)
063b6450 mov       %rcx,0x58(%rsp)
063b6455 mov       %rdx,0x60(%rsp)
063b645a mov       %rax,0x20(%rsp)
063b645f call      0x0000`0000`063B`3250
063b6464 mov       %rax,0x38(%rsp)
063b6469 mov       %rdx,0x40(%rsp)
063b646e mov       0x40(%rsp),%rdx
063b6473 mov       0x38(%rsp),%rax
063b6478 add       $0x68,%rsp
063b647c ret

core::str::traits::impl$4::index<core::ops::range::RangeTo<usize> >:
063b6480 sub       $0x58,%rsp
063b6484 mov       %r8,0x28(%rsp)
063b6489 mov       %rdx,%r8
063b648c mov       %rcx,%rdx
063b648f mov       0x28(%rsp),%rcx
063b6494 mov       %rdx,0x40(%rsp)
063b6499 mov       %r8,0x48(%rsp)
063b649e mov       %rcx,0x50(%rsp)
063b64a3 call      0x0000`0000`063B`3450
063b64a8 mov       %rax,0x30(%rsp)
063b64ad mov       %rdx,0x38(%rsp)
063b64b2 mov       0x38(%rsp),%rdx
063b64b7 mov       0x30(%rsp),%rax
063b64bc add       $0x58,%rsp
063b64c0 ret

core::fmt::impl$37::fmt:
063b64d0 sub       $0x48,%rsp
063b64d4 mov       %rdx,0x28(%rsp)
063b64d9 mov       %rcx,%rax
063b64dc mov       0x28(%rsp),%rcx
063b64e1 mov       %rax,0x38(%rsp)
063b64e6 mov       %rcx,0x40(%rsp)
063b64eb lea       0x63C`DB8A,%rdx
063b64f2 mov       $5,%r8d
063b64f8 call      0x0000`0000`063B`5D90
063b64fd mov       %al,0x37(%rsp)
063b6501 mov       0x37(%rsp),%al
063b6505 and       $1,%al
063b6507 movzbl    %al,%eax
063b650a add       $0x48,%rsp
063b650e ret

core::fmt::ArgumentV1::new_display<usize>:
063b6510 sub       $0x38,%rsp
063b6514 mov       %rcx,0x30(%rsp)
063b6519 lea       0x63C`6C30,%rdx
063b6520 call      0x0000`0000`063B`3E80
063b6525 mov       %rax,0x20(%rsp)
063b652a mov       %rdx,0x28(%rsp)
063b652f mov       0x28(%rsp),%rdx
063b6534 mov       0x20(%rsp),%rax
063b6539 add       $0x38,%rsp
063b653d ret

core::fmt::ArgumentV1::new_display<u8>:
063b6540 sub       $0x38,%rsp
063b6544 mov       %rcx,0x30(%rsp)
063b6549 lea       0x63C`6AF0,%rdx
063b6550 call      0x0000`0000`063B`4060
063b6555 mov       %rax,0x20(%rsp)
063b655a mov       %rdx,0x28(%rsp)
063b655f mov       0x28(%rsp),%rdx
063b6564 mov       0x20(%rsp),%rax
063b6569 add       $0x38,%rsp
063b656d ret

core::fmt::ArgumentV1::new_display<ref$<core::fmt::Arguments> >:
063b6570 sub       $0x38,%rsp
063b6574 mov       %rcx,0x30(%rsp)
063b6579 lea       0x63B`6780,%rdx
063b6580 call      0x0000`0000`063B`3FA0
063b6585 mov       %rax,0x20(%rsp)
063b658a mov       %rdx,0x28(%rsp)
063b658f mov       0x28(%rsp),%rdx
063b6594 mov       0x20(%rsp),%rax
063b6599 add       $0x38,%rsp
063b659d ret

core::fmt::ArgumentV1::new_display<u32>:
063b65a0 sub       $0x38,%rsp
063b65a4 mov       %rcx,0x30(%rsp)
063b65a9 lea       0x63C`6B90,%rdx
063b65b0 call      0x0000`0000`063B`40C0
063b65b5 mov       %rax,0x20(%rsp)
063b65ba mov       %rdx,0x28(%rsp)
063b65bf mov       0x28(%rsp),%rdx
063b65c4 mov       0x20(%rsp),%rax
063b65c9 add       $0x38,%rsp
063b65cd ret

core::fmt::ArgumentV1::new_display<core::fmt::Arguments>:
063b65d0 sub       $0x38,%rsp
063b65d4 mov       %rcx,0x30(%rsp)
063b65d9 lea       0x63B`42C0,%rdx
063b65e0 call      0x0000`0000`063B`3F40
063b65e5 mov       %rax,0x20(%rsp)
063b65ea mov       %rdx,0x28(%rsp)
063b65ef mov       0x28(%rsp),%rdx
063b65f4 mov       0x20(%rsp),%rax
063b65f9 add       $0x38,%rsp
063b65fd ret

core::fmt::ArgumentV1::new_display<str>:
063b6600 sub       $0x38,%rsp
063b6604 mov       %rcx,0x30(%rsp)
063b6609 lea       0x63B`67B0,%rdx
063b6610 call      0x0000`0000`063B`3E20
063b6615 mov       %rax,0x20(%rsp)
063b661a mov       %rdx,0x28(%rsp)
063b661f mov       0x28(%rsp),%rdx
063b6624 mov       0x20(%rsp),%rax
063b6629 add       $0x38,%rsp
063b662d ret

core::fmt::ArgumentV1::new_debug<core::ops::range::Range<usize> >:
063b6630 sub       $0x38,%rsp
063b6634 mov       %rcx,0x30(%rsp)
063b6639 lea       0x63B`1310,%rdx
063b6640 call      0x0000`0000`063B`3EE0
063b6645 mov       %rax,0x20(%rsp)
063b664a mov       %rdx,0x28(%rsp)
063b664f mov       0x28(%rsp),%rdx
063b6654 mov       0x20(%rsp),%rax
063b6659 add       $0x38,%rsp
063b665d ret

core::fmt::ArgumentV1::new_debug<char>:
063b6660 sub       $0x38,%rsp
063b6664 mov       %rcx,0x30(%rsp)
063b6669 lea       0x63B`5FA0,%rdx
063b6670 call      0x0000`0000`063B`3DC0
063b6675 mov       %rax,0x20(%rsp)
063b667a mov       %rdx,0x28(%rsp)
063b667f mov       0x28(%rsp),%rdx
063b6684 mov       0x20(%rsp),%rax
063b6689 add       $0x38,%rsp
063b668d ret

core::fmt::ArgumentV1::new_debug<ref$<dyn$<core::fmt::Debug> > >:
063b6690 sub       $0x38,%rsp
063b6694 mov       %rcx,0x30(%rsp)
063b6699 lea       0x63B`6720,%rdx
063b66a0 call      0x0000`0000`063B`4000
063b66a5 mov       %rax,0x20(%rsp)
063b66aa mov       %rdx,0x28(%rsp)
063b66af mov       0x28(%rsp),%rdx
063b66b4 mov       0x20(%rsp),%rax
063b66b9 add       $0x38,%rsp
063b66bd ret

core::fmt::ArgumentV1::new_upper_hex<u32>:
063b66c0 sub       $0x38,%rsp
063b66c4 mov       %rcx,0x30(%rsp)
063b66c9 lea       0x63B`0E50,%rdx
063b66d0 call      0x0000`0000`063B`40C0
063b66d5 mov       %rax,0x20(%rsp)
063b66da mov       %rdx,0x28(%rsp)
063b66df mov       0x28(%rsp),%rdx
063b66e4 mov       0x20(%rsp),%rax
063b66e9 add       $0x38,%rsp
063b66ed ret

core::fmt::impl$52::fmt<tuple$<> >:
063b66f0 sub       $0x38,%rsp
063b66f4 mov       %rcx,0x28(%rsp)
063b66f9 mov       %rdx,0x30(%rsp)
063b66fe mov       (%rcx),%rcx
063b6701 call      0x0000`0000`063B`62A0
063b6706 mov       %al,0x27(%rsp)
063b670a mov       0x27(%rsp),%al
063b670e and       $1,%al
063b6710 movzbl    %al,%eax
063b6713 add       $0x38,%rsp
063b6717 ret

core::fmt::impl$52::fmt<dyn$<core::fmt::Debug> >:
063b6720 sub       $0x38,%rsp
063b6724 mov       %rcx,%rax
063b6727 mov       %rax,0x28(%rsp)
063b672c mov       %rdx,0x30(%rsp)
063b6731 mov       (%rax),%rcx
063b6734 mov       8(%rax),%rax
063b6738 callq     *0x18(%rax)
063b673b mov       %al,0x27(%rsp)
063b673f mov       0x27(%rsp),%al
063b6743 and       $1,%al
063b6745 movzbl    %al,%eax
063b6748 add       $0x38,%rsp
063b674c ret

core::fmt::impl$52::fmt<usize>:
063b6750 sub       $0x38,%rsp
063b6754 mov       %rcx,0x28(%rsp)
063b6759 mov       %rdx,0x30(%rsp)
063b675e mov       (%rcx),%rcx
063b6761 call      0x0000`0000`063B`0E90
063b6766 mov       %al,0x27(%rsp)
063b676a mov       0x27(%rsp),%al
063b676e and       $1,%al
063b6770 movzbl    %al,%eax
063b6773 add       $0x38,%rsp
063b6777 ret

core::fmt::impl$54::fmt<core::fmt::Arguments>:
063b6780 sub       $0x38,%rsp
063b6784 mov       %rcx,0x28(%rsp)
063b6789 mov       %rdx,0x30(%rsp)
063b678e mov       (%rcx),%rcx
063b6791 call      0x0000`0000`063B`42C0
063b6796 mov       %al,0x27(%rsp)
063b679a mov       0x27(%rsp),%al
063b679e and       $1,%al
063b67a0 movzbl    %al,%eax
063b67a3 add       $0x38,%rsp
063b67a7 ret

core::fmt::impl$54::fmt<str>:
063b67b0 sub       $0x38,%rsp
063b67b4 mov       %rdx,%r8
063b67b7 mov       %rcx,%rax
063b67ba mov       %rax,0x28(%rsp)
063b67bf mov       %r8,0x30(%rsp)
063b67c4 mov       (%rax),%rcx
063b67c7 mov       8(%rax),%rdx
063b67cb call      0x0000`0000`063B`5F60
063b67d0 mov       %al,0x27(%rsp)
063b67d4 mov       0x27(%rsp),%al
063b67d8 and       $1,%al
063b67da movzbl    %al,%eax
063b67dd add       $0x38,%rsp
063b67e1 ret

compiler_builtins::int::udiv::__udivti3:
063b67f0 sub       $0x78,%rsp
063b67f4 mov       %r8,%rax
063b67f7 mov       %rdx,0x30(%rsp)
063b67fc mov       %rcx,%rdx
063b67ff mov       0x30(%rsp),%rcx
063b6804 mov       %rdx,0x38(%rsp)
063b6809 mov       %rdx,0x40(%rsp)
063b680e mov       (%rcx),%rdx
063b6811 mov       8(%rcx),%r8
063b6815 mov       (%rax),%r9
063b6818 mov       8(%rax),%rcx
063b681c mov       %rsp,%rax
063b681f mov       %rcx,0x20(%rax)
063b6823 lea       0x58(%rsp),%rcx
063b6828 call      0x0000`0000`063C`A200
063b682d mov       0x58(%rsp),%rax
063b6832 mov       %rax,0x48(%rsp)
063b6837 mov       0x60(%rsp),%rax
063b683c mov       %rax,0x50(%rsp)
063b6841 mov       0x40(%rsp),%rax
063b6846 mov       0x38(%rsp),%rcx
063b684b mov       0x50(%rsp),%rdx
063b6850 mov       0x48(%rsp),%r8
063b6855 mov       %r8,(%rcx)
063b6858 mov       %rdx,8(%rcx)
063b685c add       $0x78,%rsp
063b6860 ret

compiler_builtins::int::udiv::__udivti3::__udivti3:
063b6870 sub       $0x58,%rsp
063b6874 mov       %r8,0x28(%rsp)
063b6879 mov       %rdx,%rax
063b687c mov       0x28(%rsp),%rdx
063b6881 mov       %rcx,%r8
063b6884 mov       %r8,0x30(%rsp)
063b6889 mov       (%rax),%r8
063b688c mov       8(%rax),%r9
063b6890 mov       (%rdx),%rax
063b6893 mov       8(%rdx),%rdx
063b6897 mov       %r9,0x40(%rsp)
063b689c mov       %r8,0x38(%rsp)
063b68a1 mov       %rdx,0x50(%rsp)
063b68a6 mov       %rax,0x48(%rsp)
063b68ab lea       0x38(%rsp),%rdx
063b68b0 lea       0x48(%rsp),%r8
063b68b5 call      0x0000`0000`063B`67F0
063b68ba mov       0x30(%rsp),%rax
063b68bf add       $0x58,%rsp
063b68c3 ret

enum$<core::option::Option<uefi::table::system::SystemTable<uefi::table::system::Boot> >, 1, 18446744073709551615, Some>::as_ref<uefi::table::system::SystemTable<uefi::table::system::Boot> >:
063b68d0 sub       $0x20,%rsp
063b68d4 mov       %rcx,(%rsp)
063b68d8 mov       %rcx,0x10(%rsp)
063b68dd mov       (%rcx),%rax
063b68e0 test      %rax,%rax
063b68e3 setne     %al
063b68e6 movzbl    %al,%eax
063b68e9 je        0x0000`0000`063B`68F1
063b68eb jmp       0x0000`0000`063B`68ED
063b68ed jmp       0x0000`0000`063B`68FC
063b68ef ud2
063b68f1 movq      $0,8(%rsp)
063b68fa jmp       0x0000`0000`063B`690A
063b68fc mov       (%rsp),%rax
063b6900 mov       %rax,0x18(%rsp)
063b6905 mov       %rax,8(%rsp)
063b690a mov       8(%rsp),%rax
063b690f add       $0x20,%rsp
063b6913 ret

enum$<core::option::Option<uefi::logger::Logger> >::as_ref<uefi::logger::Logger>:
063b6920 sub       $0x20,%rsp
063b6924 mov       %rcx,(%rsp)
063b6928 mov       %rcx,0x10(%rsp)
063b692d mov       (%rcx),%rax
063b6930 test      %rax,%rax
063b6933 je        0x0000`0000`063B`693B
063b6935 jmp       0x0000`0000`063B`6937
063b6937 jmp       0x0000`0000`063B`6946
063b6939 ud2
063b693b movq      $0,8(%rsp)
063b6944 jmp       0x0000`0000`063B`6958
063b6946 mov       (%rsp),%rax
063b694a add       $8,%rax
063b694e mov       %rax,0x18(%rsp)
063b6953 mov       %rax,8(%rsp)
063b6958 mov       8(%rsp),%rax
063b695d add       $0x20,%rsp
063b6961 ret

enum$<core::option::Option<ref$<uefi::logger::Logger> >, 1, 18446744073709551615, Some>::unwrap<ref$<uefi::logger::Logger> >:
063b6970 sub       $0x38,%rsp
063b6974 mov       %rdx,0x20(%rsp)
063b6979 mov       %rcx,0x28(%rsp)
063b697e mov       0x28(%rsp),%rax
063b6983 test      %rax,%rax
063b6986 setne     %al
063b6989 movzbl    %al,%eax
063b698c je        0x0000`0000`063B`6994
063b698e jmp       0x0000`0000`063B`6990
063b6990 jmp       0x0000`0000`063B`69AC
063b6992 ud2
063b6994 mov       0x20(%rsp),%r8
063b6999 lea       0x63C`DB8F,%rcx
063b69a0 mov       $0x2B,%edx
063b69a5 call      0x0000`0000`063B`2030
063b69aa ud2
063b69ac mov       0x28(%rsp),%rax
063b69b1 mov       %rax,0x30(%rsp)
063b69b6 add       $0x38,%rsp
063b69ba ret

enum$<core::option::Option<uefi::table::system::SystemTable<uefi::table::system::Boot> >, 1, 18446744073709551615, Some>::is_some<uefi::table::system::SystemTable<uefi::table::system::Boot> >:
063b69c0 sub       $0x10,%rsp
063b69c4 mov       %rcx,%rdx
063b69c7 mov       %rdx,8(%rsp)
063b69cc mov       $1,%eax
063b69d1 xor       %ecx,%ecx
063b69d3 cmpq      $0,(%rdx)
063b69d7 cmove     %rcx,%rax
063b69db cmp       $1,%rax
063b69df jne       0x0000`0000`063B`69E8
063b69e1 movb      $1,7(%rsp)
063b69e6 jmp       0x0000`0000`063B`69ED
063b69e8 movb      $0,7(%rsp)
063b69ed mov       7(%rsp),%al
063b69f1 and       $1,%al
063b69f3 movzbl    %al,%eax
063b69f6 add       $0x10,%rsp
063b69fa ret

core::fmt::Write::write_char<uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output> >:
063b6a00 sub       $0x68,%rsp
063b6a04 mov       %edx,0x3C(%rsp)
063b6a08 mov       %rcx,0x30(%rsp)
063b6a0d mov       %rcx,0x58(%rsp)
063b6a12 mov       %edx,0x64(%rsp)
063b6a16 lea       0x54(%rsp),%rcx
063b6a1b xor       %edx,%edx
063b6a1d mov       $4,%r8d
063b6a23 call      0x0000`0000`063B`BE10
063b6a28 mov       0x3C(%rsp),%ecx
063b6a2c lea       0x54(%rsp),%rdx
063b6a31 mov       $4,%r8d
063b6a37 call      0x0000`0000`063C`1CC0
063b6a3c mov       %rax,0x40(%rsp)
063b6a41 mov       %rdx,0x48(%rsp)
063b6a46 mov       0x48(%rsp),%r8
063b6a4b mov       0x40(%rsp),%rdx
063b6a50 mov       0x30(%rsp),%rcx
063b6a55 call      0x0000`0000`063B`6F40
063b6a5a mov       %al,0x2F(%rsp)
063b6a5e mov       0x2F(%rsp),%al
063b6a62 and       $1,%al
063b6a64 movzbl    %al,%eax
063b6a67 add       $0x68,%rsp
063b6a6b ret

core::fmt::Write::write_fmt<uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output> >:
063b6a70 sub       $0x68,%rsp
063b6a74 mov       %rcx,0x30(%rsp)
063b6a79 lea       0x30(%rsp),%rax
063b6a7e mov       %rax,0x20(%rsp)
063b6a83 lea       0x38(%rsp),%rcx
063b6a88 mov       $0x30,%r8d
063b6a8e call      0x0000`0000`063B`BDE0
063b6a93 mov       0x20(%rsp),%rcx
063b6a98 lea       0x63C`DBC0,%rdx
063b6a9f lea       0x38(%rsp),%r8
063b6aa4 call      0x0000`0000`063B`4320
063b6aa9 mov       %al,0x2F(%rsp)
063b6aad mov       0x2F(%rsp),%al
063b6ab1 and       $1,%al
063b6ab3 movzbl    %al,%eax
063b6ab6 add       $0x68,%rsp
063b6aba ret

core::slice::index::impl$0::index<u16,core::ops::range::RangeToInclusive<usize> >:
063b6ac0 sub       $0x58,%rsp
063b6ac4 mov       %r8,0x28(%rsp)
063b6ac9 mov       %rdx,%r8
063b6acc mov       %rcx,%rdx
063b6acf mov       0x28(%rsp),%rcx
063b6ad4 mov       %rdx,0x40(%rsp)
063b6ad9 mov       %r8,0x48(%rsp)
063b6ade mov       %rcx,0x50(%rsp)
063b6ae3 call      0x0000`0000`063B`DF30
063b6ae8 mov       %rax,0x30(%rsp)
063b6aed mov       %rdx,0x38(%rsp)
063b6af2 mov       0x38(%rsp),%rdx
063b6af7 mov       0x30(%rsp),%rax
063b6afc add       $0x58,%rsp
063b6b00 ret

core::fmt::impl$0::write_char<uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output> >:
063b6b10 sub       $0x38,%rsp
063b6b14 mov       %rcx,0x28(%rsp)
063b6b19 mov       %edx,0x34(%rsp)
063b6b1d mov       (%rcx),%rcx
063b6b20 call      0x0000`0000`063B`6A00
063b6b25 mov       %al,0x27(%rsp)
063b6b29 mov       0x27(%rsp),%al
063b6b2d and       $1,%al
063b6b2f movzbl    %al,%eax
063b6b32 add       $0x38,%rsp
063b6b36 ret

core::fmt::impl$0::write_fmt<uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output> >:
063b6b40 sub       $0x68,%rsp
063b6b44 mov       %rcx,0x60(%rsp)
063b6b49 mov       (%rcx),%rax
063b6b4c mov       %rax,0x20(%rsp)
063b6b51 lea       0x30(%rsp),%rcx
063b6b56 mov       $0x30,%r8d
063b6b5c call      0x0000`0000`063B`BDE0
063b6b61 mov       0x20(%rsp),%rcx
063b6b66 lea       0x30(%rsp),%rdx
063b6b6b call      0x0000`0000`063B`6A70
063b6b70 mov       %al,0x2F(%rsp)
063b6b74 mov       0x2F(%rsp),%al
063b6b78 and       $1,%al
063b6b7a movzbl    %al,%eax
063b6b7d add       $0x68,%rsp
063b6b81 ret

core::fmt::impl$0::write_str<uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output> >:
063b6b90 sub       $0x48,%rsp
063b6b94 mov       %rcx,0x30(%rsp)
063b6b99 mov       %rdx,0x38(%rsp)
063b6b9e mov       %r8,0x40(%rsp)
063b6ba3 mov       (%rcx),%rcx
063b6ba6 call      0x0000`0000`063B`6F40
063b6bab mov       %al,0x2F(%rsp)
063b6baf mov       0x2F(%rsp),%al
063b6bb3 and       $1,%al
063b6bb5 movzbl    %al,%eax
063b6bb8 add       $0x48,%rsp
063b6bbc ret

uefi::result::error::Error<tuple$<> >::new<tuple$<> >:
063b6bc0 sub       $0x18,%rsp
063b6bc4 mov       %rcx,8(%rsp)
063b6bc9 mov       %rcx,(%rsp)
063b6bcd mov       (%rsp),%rax
063b6bd1 add       $0x18,%rsp
063b6bd5 ret

uefi::result::error::impl$1::from:
063b6be0 sub       $0x10,%rsp
063b6be4 mov       %rcx,8(%rsp)
063b6be9 mov       %rcx,(%rsp)
063b6bed mov       (%rsp),%rax
063b6bf1 add       $0x10,%rsp
063b6bf5 ret

uefi::table::system::SystemTable<uefi::table::system::Boot>::stdout:
063b6c00 sub       $0x18,%rsp
063b6c04 mov       %rcx,8(%rsp)
063b6c09 mov       (%rcx),%rax
063b6c0c mov       0x40(%rax),%rax
063b6c10 mov       %rax,(%rsp)
063b6c14 mov       %rax,0x10(%rsp)
063b6c19 mov       (%rsp),%rax
063b6c1d add       $0x18,%rsp
063b6c21 ret

uefi::table::system::SystemTable<uefi::table::system::Boot>::runtime_services:
063b6c30 push      %rax
063b6c31 mov       %rcx,(%rsp)
063b6c35 mov       (%rcx),%rax
063b6c38 mov       0x58(%rax),%rax
063b6c3c pop       %rcx
063b6c3d ret

uefi::table::system::SystemTable<uefi::table::system::Boot>::boot_services:
063b6c40 push      %rax
063b6c41 mov       %rcx,(%rsp)
063b6c45 mov       (%rcx),%rax
063b6c48 mov       0x60(%rax),%rax
063b6c4c pop       %rcx
063b6c4d ret

uefi::table::system::SystemTable<uefi::table::system::Boot>::unsafe_clone:
063b6c50 sub       $0x10,%rsp
063b6c54 mov       %rcx,8(%rsp)
063b6c59 mov       (%rcx),%rax
063b6c5c mov       %rax,(%rsp)
063b6c60 mov       (%rsp),%rax
063b6c64 add       $0x10,%rsp
063b6c68 ret

uefi::logger::Logger::new:
063b6c70 sub       $0x38,%rsp
063b6c74 mov       %rcx,0x30(%rsp)
063b6c79 call      0x0000`0000`063B`BFB0
063b6c7e mov       %rax,0x20(%rsp)
063b6c83 mov       0x20(%rsp),%rax
063b6c88 mov       %rax,0x28(%rsp)
063b6c8d mov       0x28(%rsp),%rax
063b6c92 add       $0x38,%rsp
063b6c96 ret

uefi::logger::Logger::disable:
063b6ca0 sub       $0x10,%rsp
063b6ca4 mov       %rcx,8(%rsp)
063b6ca9 movq      $0,(%rsp)
063b6cb1 mov       (%rsp),%rax
063b6cb5 mov       %rax,(%rcx)
063b6cb8 add       $0x10,%rsp
063b6cbc ret

uefi::logger::impl$1::enabled:
063b6cc0 sub       $0x38,%rsp
063b6cc4 mov       %rcx,0x28(%rsp)
063b6cc9 mov       %rdx,0x30(%rsp)
063b6cce call      0x0000`0000`063C`20A0
063b6cd3 mov       %al,0x27(%rsp)
063b6cd7 mov       0x27(%rsp),%al
063b6cdb and       $1,%al
063b6cdd movzbl    %al,%eax
063b6ce0 add       $0x38,%rsp
063b6ce4 ret

uefi::logger::impl$1::log:
063b6cf0 sub       $0xB8,%rsp
063b6cf7 mov       %rdx,%rax
063b6cfa mov       %rax,0x80(%rsp)
063b6d02 mov       %rcx,%rdx
063b6d05 mov       %rdx,0x88(%rsp)
063b6d0d mov       %rdx,0x98(%rsp)
063b6d15 mov       %rax,0xA0(%rsp)
063b6d1d mov       $1,%eax
063b6d22 xor       %ecx,%ecx
063b6d24 cmpq      $0,(%rdx)
063b6d28 cmove     %rcx,%rax
063b6d2c cmp       $1,%rax
063b6d30 jne       0x0000`0000`063B`6D59
063b6d32 mov       0x88(%rsp),%rax
063b6d3a mov       (%rax),%rax
063b6d3d mov       %rax,0x90(%rsp)
063b6d45 lea       0x90(%rsp),%rcx
063b6d4d call      0x0000`0000`063B`C050
063b6d52 mov       %rax,0x78(%rsp)
063b6d57 jmp       0x0000`0000`063B`6D61
063b6d59 add       $0xB8,%rsp
063b6d60 ret
063b6d61 mov       0x80(%rsp),%rcx
063b6d69 mov       0x78(%rsp),%rax
063b6d6e mov       %rax,0xA8(%rsp)
063b6d76 call      0x0000`0000`063B`E520
063b6d7b mov       %rax,0x70(%rsp)
063b6d80 mov       0x80(%rsp),%rcx
063b6d88 call      0x0000`0000`063B`E480
063b6d8d mov       %rax,0x68(%rsp)
063b6d92 mov       0x80(%rsp),%rcx
063b6d9a call      0x0000`0000`063B`E490
063b6d9f mov       %rax,0x58(%rsp)
063b6da4 mov       %rdx,0x60(%rsp)
063b6da9 mov       0x60(%rsp),%rdx
063b6dae mov       0x58(%rsp),%rcx
063b6db3 lea       0x63C`DBF0,%r8
063b6dba mov       $0xE,%r9d
063b6dc0 call      0x0000`0000`063B`1830
063b6dc5 mov       %rax,0x48(%rsp)
063b6dca mov       %rdx,0x50(%rsp)
063b6dcf mov       0x80(%rsp),%rcx
063b6dd7 call      0x0000`0000`063B`E510
063b6ddc mov       %eax,0x40(%rsp)
063b6de0 mov       %edx,0x44(%rsp)
063b6de4 mov       0x44(%rsp),%edx
063b6de8 mov       0x40(%rsp),%ecx
063b6dec xor       %r8d,%r8d
063b6def call      0x0000`0000`063B`18D0
063b6df4 mov       %eax,0x3C(%rsp)
063b6df8 mov       0x3C(%rsp),%eax
063b6dfc mov       0x50(%rsp),%r10
063b6e01 mov       0x48(%rsp),%r9
063b6e06 mov       0x68(%rsp),%r8
063b6e0b mov       0x70(%rsp),%rdx
063b6e10 mov       0x78(%rsp),%rcx
063b6e15 mov       %r10,0x20(%rsp)
063b6e1a mov       %eax,0x28(%rsp)
063b6e1e call      0x0000`0000`063B`6E60
063b6e23 mov       %al,0x3B(%rsp)
063b6e27 and       $1,%al
063b6e29 mov       %al,0xB7(%rsp)
063b6e30 mov       0x3B(%rsp),%cl
063b6e34 and       $1,%cl
063b6e37 lea       0x63C`DC60,%rdx
063b6e3e call      0x0000`0000`063A`C720
063b6e43 jmp       0x0000`0000`063B`6D59

uefi::logger::impl$1::flush:
063b6e50 push      %rax
063b6e51 mov       %rcx,(%rsp)
063b6e55 pop       %rax
063b6e56 ret

uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output>::write<uefi::proto::console::text::output::Output>:
063b6e60 sub       $0xD8,%rsp
063b6e67 mov       %r8,0x30(%rsp)
063b6e6c mov       %rdx,%r8
063b6e6f mov       %rcx,%r10
063b6e72 mov       0x30(%rsp),%rcx
063b6e77 mov       0x108(%rsp),%eax
063b6e7e mov       0x100(%rsp),%rdx
063b6e86 mov       %r10,0xB0(%rsp)
063b6e8e mov       %r8,0xB8(%rsp)
063b6e96 mov       %rcx,0xC0(%rsp)
063b6e9e mov       %r9,0xC8(%rsp)
063b6ea6 mov       %rdx,0xD0(%rsp)
063b6eae mov       %r10,0x48(%rsp)
063b6eb3 mov       %r8,0x50(%rsp)
063b6eb8 movb      $1,0x6C(%rsp)
063b6ebd mov       %r9,0x58(%rsp)
063b6ec2 mov       %rdx,0x60(%rsp)
063b6ec7 mov       %eax,0x68(%rsp)
063b6ecb call      0x0000`0000`063B`65D0
063b6ed0 mov       %rax,0x38(%rsp)
063b6ed5 mov       %rdx,0x40(%rsp)
063b6eda mov       0x40(%rsp),%rax
063b6edf mov       0x38(%rsp),%rcx
063b6ee4 mov       %rcx,0xA0(%rsp)
063b6eec mov       %rax,0xA8(%rsp)
063b6ef4 lea       0xA0(%rsp),%r9
063b6efc lea       0x70(%rsp),%rcx
063b6f01 lea       0x63C`DC80,%rdx
063b6f08 mov       $2,%r8d
063b6f0e movq      $1,0x20(%rsp)
063b6f17 call      0x0000`0000`063B`8A80
063b6f1c lea       0x48(%rsp),%rcx
063b6f21 lea       0x70(%rsp),%rdx
063b6f26 call      0x0000`0000`063B`6A70
063b6f2b mov       %al,0x2F(%rsp)
063b6f2f mov       0x2F(%rsp),%al
063b6f33 and       $1,%al
063b6f35 movzbl    %al,%eax
063b6f38 add       $0xD8,%rsp
063b6f3f ret

uefi::logger::impl$5::write_str<uefi::proto::console::text::output::Output>:
063b6f40 sub       $0x408,%rsp
063b6f47 mov       %r8,0xE8(%rsp)
063b6f4f mov       %rdx,0xF0(%rsp)
063b6f57 mov       %rcx,0xF8(%rsp)
063b6f5f mov       %rcx,0x3B0(%rsp)
063b6f67 mov       %rdx,0x3B8(%rsp)
063b6f6f mov       %r8,0x3C0(%rsp)
063b6f77 lea       0x108(%rsp),%rcx
063b6f7f call      0x0000`0000`063B`EAF0
063b6f84 lea       0x108(%rsp),%rcx
063b6f8c call      0x0000`0000`063C`21D0
063b6f91 mov       %rax,0xD8(%rsp)
063b6f99 mov       %rdx,0xE0(%rsp)
063b6fa1 mov       0xE0(%rsp),%rdx
063b6fa9 mov       0xD8(%rsp),%rcx
063b6fb1 lea       0x63C`DC78,%r8
063b6fb8 xor       %eax,%eax
063b6fba mov       %eax,%r9d
063b6fbd call      0x0000`0000`063B`1830
063b6fc2 mov       %rdx,0x158(%rsp)
063b6fca mov       %rax,0x150(%rsp)
063b6fd2 mov       0xF8(%rsp),%rax
063b6fda testb     $1,0x24(%rax)
063b6fde jne       0x0000`0000`063B`7015
063b6fe0 mov       0xF8(%rsp),%rax
063b6fe8 mov       (%rax),%rax
063b6feb mov       %rax,0xC0(%rsp)
063b6ff3 lea       0x150(%rsp),%rcx
063b6ffb call      0x0000`0000`063B`6600
063b7000 mov       %rax,0xC8(%rsp)
063b7008 mov       %rdx,0xD0(%rsp)
063b7010 jmp       0x0000`0000`063B`71AD
063b7015 mov       0xF8(%rsp),%rcx
063b701d mov       (%rcx),%rax
063b7020 mov       %rax,0xA8(%rsp)
063b7028 add       $8,%rcx
063b702c call      0x0000`0000`063B`8980
063b7031 mov       %rax,0xB0(%rsp)
063b7039 mov       %rdx,0xB8(%rsp)
063b7041 mov       0xF8(%rsp),%rcx
063b7049 add       $0x10,%rcx
063b704d call      0x0000`0000`063B`6600
063b7052 mov       %rax,0x98(%rsp)
063b705a mov       %rdx,0xA0(%rsp)
063b7062 mov       0xF8(%rsp),%rcx
063b706a add       $0x20,%rcx
063b706e call      0x0000`0000`063B`65A0
063b7073 mov       %rax,0x88(%rsp)
063b707b mov       %rdx,0x90(%rsp)
063b7083 mov       0x90(%rsp),%rax
063b708b mov       0x88(%rsp),%rcx
063b7093 mov       0xA0(%rsp),%rdx
063b709b mov       0x98(%rsp),%r8
063b70a3 mov       0xB8(%rsp),%r9
063b70ab mov       0xB0(%rsp),%r10
063b70b3 mov       %r10,0x198(%rsp)
063b70bb mov       %r9,0x1A0(%rsp)
063b70c3 mov       %r8,0x1A8(%rsp)
063b70cb mov       %rdx,0x1B0(%rsp)
063b70d3 mov       %rcx,0x1B8(%rsp)
063b70db mov       %rax,0x1C0(%rsp)
063b70e3 lea       0x198(%rsp),%rax
063b70eb mov       %rax,0x80(%rsp)
063b70f3 mov       0x80(%rsp),%r9
063b70fb lea       0x168(%rsp),%rcx
063b7103 lea       0x63C`DCA8,%rdx
063b710a mov       $4,%r8d
063b7110 lea       0x63C`DCE8,%rax
063b7117 movq      $3,0x20(%rsp)
063b7120 mov       %rax,0x28(%rsp)
063b7125 movq      $3,0x30(%rsp)
063b712e call      0x0000`0000`063B`8A10
063b7133 mov       0xA8(%rsp),%rcx
063b713b lea       0x168(%rsp),%rdx
063b7143 call      0x0000`0000`063B`C140
063b7148 mov       %al,0x7F(%rsp)
063b714c mov       0x7F(%rsp),%cl
063b7150 and       $1,%cl
063b7153 call      0x0000`0000`063B`CEE0
063b7158 and       $1,%al
063b715a mov       %al,0x167(%rsp)
063b7161 movzbl    0x167(%rsp),%eax
063b7169 test      $1,%al
063b716b je        0x0000`0000`063B`7173
063b716d jmp       0x0000`0000`063B`716F
063b716f jmp       0x0000`0000`063B`7184
063b7171 ud2
063b7173 mov       0xF8(%rsp),%rax
063b717b movb      $0,0x24(%rax)
063b717f jmp       0x0000`0000`063B`6FE0
063b7184 lea       0x63C`DD90,%rcx
063b718b call      0x0000`0000`063B`CF60
063b7190 and       $1,%al
063b7192 mov       %al,0x107(%rsp)
063b7199 mov       0x107(%rsp),%al
063b71a0 and       $1,%al
063b71a2 movzbl    %al,%eax
063b71a5 add       $0x408,%rsp
063b71ac ret
063b71ad mov       0xD0(%rsp),%rax
063b71b5 mov       0xC8(%rsp),%rcx
063b71bd mov       %rcx,0x200(%rsp)
063b71c5 mov       %rax,0x208(%rsp)
063b71cd lea       0x200(%rsp),%r9
063b71d5 lea       0x1D0(%rsp),%rcx
063b71dd lea       0x63C`DDA8,%rdx
063b71e4 mov       $1,%r8d
063b71ea movq      $1,0x20(%rsp)
063b71f3 call      0x0000`0000`063B`8A80
063b71f8 mov       0xC0(%rsp),%rcx
063b7200 lea       0x1D0(%rsp),%rdx
063b7208 call      0x0000`0000`063B`C140
063b720d mov       %al,0x7E(%rsp)
063b7211 mov       0x7E(%rsp),%cl
063b7215 and       $1,%cl
063b7218 call      0x0000`0000`063B`CEE0
063b721d and       $1,%al
063b721f mov       %al,0x1CF(%rsp)
063b7226 movzbl    0x1CF(%rsp),%eax
063b722e test      $1,%al
063b7230 je        0x0000`0000`063B`7238
063b7232 jmp       0x0000`0000`063B`7234
063b7234 jmp       0x0000`0000`063B`726A
063b7236 ud2
063b7238 lea       0x258(%rsp),%rcx
063b7240 lea       0x108(%rsp),%rdx
063b7248 mov       $0x48,%r8d
063b724e call      0x0000`0000`063B`BDE0
063b7253 lea       0x210(%rsp),%rcx
063b725b lea       0x258(%rsp),%rdx
063b7263 call      0x0000`0000`063C`2160
063b7268 jmp       0x0000`0000`063B`7284
063b726a lea       0x63C`DDB8,%rcx
063b7271 call      0x0000`0000`063B`CF60
063b7276 and       $1,%al
063b7278 mov       %al,0x107(%rsp)
063b727f jmp       0x0000`0000`063B`7199
063b7284 lea       0x2A0(%rsp),%rcx
063b728c lea       0x210(%rsp),%rdx
063b7294 mov       $0x48,%r8d
063b729a call      0x0000`0000`063B`BDE0
063b729f lea       0x2A0(%rsp),%rcx
063b72a7 call      0x0000`0000`063C`21D0
063b72ac mov       %rdx,0x2F0(%rsp)
063b72b4 mov       %rax,0x2E8(%rsp)
063b72bc mov       0x2E8(%rsp),%rax
063b72c4 test      %rax,%rax
063b72c7 setne     %al
063b72ca movzbl    %al,%eax
063b72cd je        0x0000`0000`063B`72D5
063b72cf jmp       0x0000`0000`063B`72D1
063b72d1 jmp       0x0000`0000`063B`72FF
063b72d3 ud2
063b72d5 mov       0xE8(%rsp),%rdx
063b72dd mov       0xF0(%rsp),%rcx
063b72e5 call      0x0000`0000`063B`EA70
063b72ea mov       %rdx,0x370(%rsp)
063b72f2 mov       %rax,0x368(%rsp)
063b72fa jmp       0x0000`0000`063B`7413
063b72ff mov       0xF8(%rsp),%rcx
063b7307 mov       0x2E8(%rsp),%rdx
063b730f mov       0x2F0(%rsp),%rax
063b7317 mov       %rdx,0x2F8(%rsp)
063b731f mov       %rax,0x300(%rsp)
063b7327 mov       (%rcx),%rax
063b732a mov       %rax,0x60(%rsp)
063b732f add       $8,%rcx
063b7333 call      0x0000`0000`063B`8980
063b7338 mov       %rax,0x68(%rsp)
063b733d mov       %rdx,0x70(%rsp)
063b7342 lea       0x2F8(%rsp),%rcx
063b734a call      0x0000`0000`063B`6600
063b734f mov       %rax,0x50(%rsp)
063b7354 mov       %rdx,0x58(%rsp)
063b7359 mov       0x58(%rsp),%rax
063b735e mov       0x50(%rsp),%rcx
063b7363 mov       0x70(%rsp),%rdx
063b7368 mov       0x68(%rsp),%r8
063b736d mov       %r8,0x340(%rsp)
063b7375 mov       %rdx,0x348(%rsp)
063b737d mov       %rcx,0x350(%rsp)
063b7385 mov       %rax,0x358(%rsp)
063b738d lea       0x340(%rsp),%r9
063b7395 lea       0x310(%rsp),%rcx
063b739d lea       0x63C`DDD0,%rdx
063b73a4 mov       $2,%r8d
063b73aa movq      $2,0x20(%rsp)
063b73b3 call      0x0000`0000`063B`8A80
063b73b8 mov       0x60(%rsp),%rcx
063b73bd lea       0x310(%rsp),%rdx
063b73c5 call      0x0000`0000`063B`C140
063b73ca mov       %al,0x4F(%rsp)
063b73ce mov       0x4F(%rsp),%cl
063b73d2 and       $1,%cl
063b73d5 call      0x0000`0000`063B`CEE0
063b73da and       $1,%al
063b73dc mov       %al,0x30F(%rsp)
063b73e3 movzbl    0x30F(%rsp),%eax
063b73eb test      $1,%al
063b73ed je        0x0000`0000`063B`729F
063b73f3 jmp       0x0000`0000`063B`73F5
063b73f5 jmp       0x0000`0000`063B`73F9
063b73f7 ud2
063b73f9 lea       0x63C`DDF0,%rcx
063b7400 call      0x0000`0000`063B`CF60
063b7405 and       $1,%al
063b7407 mov       %al,0x107(%rsp)
063b740e jmp       0x0000`0000`063B`7199
063b7413 lea       0x368(%rsp),%rcx
063b741b call      0x0000`0000`063C`2220
063b7420 mov       %eax,0x364(%rsp)
063b7427 mov       0x364(%rsp),%edx
063b742e sub       $0x11`0000,%edx
063b7434 mov       $1,%eax
063b7439 xor       %ecx,%ecx
063b743b cmp       $0,%edx
063b743e cmove     %rcx,%rax
063b7442 cmp       $1,%rax
063b7446 jne       0x0000`0000`063B`7452
063b7448 cmpl      $0xA,0x364(%rsp)
063b7450 je        0x0000`0000`063B`745F
063b7452 movb      $0,0x107(%rsp)
063b745a jmp       0x0000`0000`063B`7199
063b745f mov       0xF8(%rsp),%rax
063b7467 mov       (%rax),%rax
063b746a mov       %rax,0x40(%rsp)
063b746f lea       0x380(%rsp),%rcx
063b7477 lea       0x63C`DE08,%rdx
063b747e mov       $1,%r8d
063b7484 lea       0x63C`DC78,%r9
063b748b xor       %eax,%eax
063b748d movq      $0,0x20(%rsp)
063b7496 call      0x0000`0000`063B`8A80
063b749b mov       0x40(%rsp),%rcx
063b74a0 lea       0x380(%rsp),%rdx
063b74a8 call      0x0000`0000`063B`C140
063b74ad mov       %al,0x3F(%rsp)
063b74b1 mov       0x3F(%rsp),%cl
063b74b5 and       $1,%cl
063b74b8 call      0x0000`0000`063B`CEE0
063b74bd and       $1,%al
063b74bf mov       %al,0x37F(%rsp)
063b74c6 movzbl    0x37F(%rsp),%eax
063b74ce test      $1,%al
063b74d0 je        0x0000`0000`063B`74D8
063b74d2 jmp       0x0000`0000`063B`74D4
063b74d4 jmp       0x0000`0000`063B`74E9
063b74d6 ud2
063b74d8 mov       0xF8(%rsp),%rax
063b74e0 movb      $1,0x24(%rax)
063b74e4 jmp       0x0000`0000`063B`7452
063b74e9 lea       0x63C`DE18,%rcx
063b74f0 call      0x0000`0000`063B`CF60
063b74f5 and       $1,%al
063b74f7 mov       %al,0x107(%rsp)
063b74fe jmp       0x0000`0000`063B`7199

uefi::result::error::impl$3::fmt<tuple$<> >:
063b7510 sub       $0x88,%rsp
063b7517 mov       %rcx,0x30(%rsp)
063b751c mov       %rcx,0x60(%rsp)
063b7521 mov       %rdx,0x68(%rsp)
063b7526 mov       %rcx,0x70(%rsp)
063b752b mov       %rcx,0x38(%rsp)
063b7530 mov       %rcx,0x78(%rsp)
063b7535 lea       0x40(%rsp),%rcx
063b753a lea       0x63C`DE30,%r8
063b7541 mov       $5,%r9d
063b7547 call      0x0000`0000`063B`5ED0
063b754c mov       0x30(%rsp),%rax
063b7551 lea       0x40(%rsp),%rcx
063b7556 mov       %rcx,0x80(%rsp)
063b755e mov       %rax,0x50(%rsp)
063b7563 lea       0x50(%rsp),%r9
063b7568 lea       0x40(%rsp),%rcx
063b756d lea       0x63C`DE35,%rdx
063b7574 mov       $6,%r8d
063b757a lea       0x63C`DE40,%rax
063b7581 mov       %rax,0x20(%rsp)
063b7586 call      0x0000`0000`063C`2D30
063b758b mov       0x38(%rsp),%rax
063b7590 mov       %rax,0x58(%rsp)
063b7595 lea       0x58(%rsp),%r9
063b759a lea       0x40(%rsp),%rcx
063b759f lea       0x63C`DE60,%rdx
063b75a6 mov       $4,%r8d
063b75ac lea       0x63C`DE68,%rax
063b75b3 mov       %rax,0x20(%rsp)
063b75b8 call      0x0000`0000`063C`2D30
063b75bd lea       0x40(%rsp),%rcx
063b75c2 call      0x0000`0000`063C`3160
063b75c7 mov       %al,0x2F(%rsp)
063b75cb mov       0x2F(%rsp),%al
063b75cf and       $1,%al
063b75d1 movzbl    %al,%eax
063b75d4 add       $0x88,%rsp
063b75db ret

core::fmt::impl$52::fmt<uefi::result::status::Status>:
063b75e0 sub       $0x38,%rsp
063b75e4 mov       %rcx,0x28(%rsp)
063b75e9 mov       %rdx,0x30(%rsp)
063b75ee mov       (%rcx),%rcx
063b75f1 call      0x0000`0000`063B`7810
063b75f6 mov       %al,0x27(%rsp)
063b75fa mov       0x27(%rsp),%al
063b75fe and       $1,%al
063b7600 movzbl    %al,%eax
063b7603 add       $0x38,%rsp
063b7607 ret

core::convert::impl$3::into<uefi::result::status::Status,uefi::result::error::Error<tuple$<> > >:
063b7610 sub       $0x38,%rsp
063b7614 mov       %rcx,0x30(%rsp)
063b7619 call      0x0000`0000`063B`6BE0
063b761e mov       %rax,0x28(%rsp)
063b7623 mov       0x28(%rsp),%rax
063b7628 add       $0x38,%rsp
063b762c ret

core::convert::impl$3::into<uefi::result::status::Status,enum$<core::result::Result<tuple$<>,uefi::result::error::Error<tuple$<> > > > >:
063b7630 sub       $0x38,%rsp
063b7634 mov       %rcx,0x30(%rsp)
063b7639 call      0x0000`0000`063A`CC80
063b763e mov       %rax,0x20(%rsp)
063b7643 mov       %rdx,0x28(%rsp)
063b7648 mov       0x28(%rsp),%rdx
063b764d mov       0x20(%rsp),%rax
063b7652 add       $0x38,%rsp
063b7656 ret

uefi::result::status::Status::is_success:
063b7660 sub       $0x38,%rsp
063b7664 mov       %rcx,0x30(%rsp)
063b7669 lea       0x30(%rsp),%rcx
063b766e lea       0x63C`DE88,%rdx
063b7675 call      0x0000`0000`063B`8950
063b767a mov       %al,0x2F(%rsp)
063b767e mov       0x2F(%rsp),%al
063b7682 and       $1,%al
063b7684 movzbl    %al,%eax
063b7687 add       $0x38,%rsp
063b768b ret

uefi::result::status::Status::into_with_val<uefi::data_types::Event,uefi::table::boot::impl$0::create_event::closure_env$0>:
063b7690 sub       $0x68,%rsp
063b7694 mov       %r8,0x30(%rsp)
063b7699 mov       %rdx,0x38(%rsp)
063b769e mov       %rcx,%rax
063b76a1 mov       0x38(%rsp),%rcx
063b76a6 mov       %rax,0x40(%rsp)
063b76ab mov       %rax,0x48(%rsp)
063b76b0 mov       %rcx,0x58(%rsp)
063b76b5 mov       %r8,0x60(%rsp)
063b76ba movb      $0,0x57(%rsp)
063b76bf movb      $1,0x57(%rsp)
063b76c4 call      0x0000`0000`063B`7660
063b76c9 mov       %al,0x56(%rsp)
063b76cd mov       0x56(%rsp),%al
063b76d1 test      $1,%al
063b76d3 jne       0x0000`0000`063B`76E8
063b76d5 jmp       0x0000`0000`063B`76D7
063b76d7 mov       0x38(%rsp),%rcx
063b76dc call      0x0000`0000`063B`7610
063b76e1 mov       %rax,0x28(%rsp)
063b76e6 jmp       0x0000`0000`063B`771A
063b76e8 mov       0x30(%rsp),%rcx
063b76ed movb      $0,0x57(%rsp)
063b76f2 call      0x0000`0000`063B`8D80
063b76f7 mov       %rax,0x20(%rsp)
063b76fc mov       0x40(%rsp),%rax
063b7701 mov       0x20(%rsp),%rcx
063b7706 mov       %rcx,8(%rax)
063b770a movq      $0,(%rax)
063b7711 testb     $1,0x57(%rsp)
063b7716 jne       0x0000`0000`063B`773B
063b7718 jmp       0x0000`0000`063B`7731
063b771a mov       0x40(%rsp),%rax
063b771f mov       0x28(%rsp),%rcx
063b7724 mov       %rcx,8(%rax)
063b7728 movq      $1,(%rax)
063b772f jmp       0x0000`0000`063B`7711
063b7731 mov       0x48(%rsp),%rax
063b7736 add       $0x68,%rsp
063b773a ret
063b773b jmp       0x0000`0000`063B`7731

uefi::result::status::Status::into_with<tuple$<>,tuple$<>,uefi::result::status::impl$1::from::closure_env$0,uefi::result::status::impl$1::from::closure_env$1>:
063b7740 sub       $0x78,%rsp
063b7744 mov       %rcx,0x30(%rsp)
063b7749 mov       %rcx,0x60(%rsp)
063b774e movb      $0,0x5F(%rsp)
063b7753 movb      $0,0x5E(%rsp)
063b7758 movb      $1,0x5F(%rsp)
063b775d movb      $1,0x5E(%rsp)
063b7762 call      0x0000`0000`063B`7660
063b7767 mov       %al,0x3F(%rsp)
063b776b mov       0x3F(%rsp),%al
063b776f test      $1,%al
063b7771 jne       0x0000`0000`063B`7790
063b7773 jmp       0x0000`0000`063B`7775
063b7775 mov       0x30(%rsp),%rax
063b777a movb      $0,0x5E(%rsp)
063b777f mov       %rax,0x50(%rsp)
063b7784 mov       0x50(%rsp),%rcx
063b7789 call      0x0000`0000`063B`7800
063b778e jmp       0x0000`0000`063B`77AC
063b7790 movb      $0,0x5F(%rsp)
063b7795 call      0x0000`0000`063B`77F0
063b779a movq      $0,0x40(%rsp)
063b77a3 testb     $1,0x5E(%rsp)
063b77a8 jne       0x0000`0000`063B`77D9
063b77aa jmp       0x0000`0000`063B`77D0
063b77ac mov       0x30(%rsp),%rcx
063b77b1 call      0x0000`0000`063B`6BC0
063b77b6 mov       %rax,0x28(%rsp)
063b77bb mov       0x28(%rsp),%rax
063b77c0 mov       %rax,0x48(%rsp)
063b77c5 movq      $1,0x40(%rsp)
063b77ce jmp       0x0000`0000`063B`77A3
063b77d0 testb     $1,0x5F(%rsp)
063b77d5 jne       0x0000`0000`063B`77EA
063b77d7 jmp       0x0000`0000`063B`77DB
063b77d9 jmp       0x0000`0000`063B`77D0
063b77db mov       0x40(%rsp),%rax
063b77e0 mov       0x48(%rsp),%rdx
063b77e5 add       $0x78,%rsp
063b77e9 ret
063b77ea jmp       0x0000`0000`063B`77DB

uefi::result::status::impl$1::from::closure$0:
063b77f0 push      %rax
063b77f1 pop       %rax
063b77f2 ret

uefi::result::status::impl$1::from::closure$1:
063b7800 sub       $0x10,%rsp
063b7804 mov       %rcx,8(%rsp)
063b7809 add       $0x10,%rsp
063b780d ret

uefi::result::status::impl$8::fmt:
063b7810 sub       $0x888,%rsp
063b7817 mov       %rdx,0x50(%rsp)
063b781c mov       %rcx,0x58(%rsp)
063b7821 mov       %rcx,0x878(%rsp)
063b7829 mov       %rdx,0x880(%rsp)
063b7831 mov       (%rcx),%rax
063b7834 mov       %rax,0x60(%rsp)
063b7839 movabs    $0x8000`0000`0000`0001,%rcx
063b7843 sub       %rcx,%rax
063b7846 je        0x0000`0000`063B`7DC5
063b784c jmp       0x0000`0000`063B`784E
063b784e mov       0x60(%rsp),%rax
063b7853 movabs    $0x8000`0000`0000`0002,%rcx
063b785d sub       %rcx,%rax
063b7860 je        0x0000`0000`063B`7DF6
063b7866 jmp       0x0000`0000`063B`7868
063b7868 mov       0x60(%rsp),%rax
063b786d movabs    $0x8000`0000`0000`0003,%rcx
063b7877 sub       %rcx,%rax
063b787a je        0x0000`0000`063B`7E27
063b7880 jmp       0x0000`0000`063B`7882
063b7882 mov       0x60(%rsp),%rax
063b7887 movabs    $0x8000`0000`0000`0004,%rcx
063b7891 sub       %rcx,%rax
063b7894 je        0x0000`0000`063B`7E58
063b789a jmp       0x0000`0000`063B`789C
063b789c mov       0x60(%rsp),%rax
063b78a1 movabs    $0x8000`0000`0000`0005,%rcx
063b78ab sub       %rcx,%rax
063b78ae je        0x0000`0000`063B`7E89
063b78b4 jmp       0x0000`0000`063B`78B6
063b78b6 mov       0x60(%rsp),%rax
063b78bb movabs    $0x8000`0000`0000`0006,%rcx
063b78c5 sub       %rcx,%rax
063b78c8 je        0x0000`0000`063B`7EBA
063b78ce jmp       0x0000`0000`063B`78D0
063b78d0 mov       0x60(%rsp),%rax
063b78d5 movabs    $0x8000`0000`0000`0007,%rcx
063b78df sub       %rcx,%rax
063b78e2 je        0x0000`0000`063B`7EEB
063b78e8 jmp       0x0000`0000`063B`78EA
063b78ea mov       0x60(%rsp),%rax
063b78ef movabs    $0x8000`0000`0000`0008,%rcx
063b78f9 sub       %rcx,%rax
063b78fc je        0x0000`0000`063B`7F1C
063b7902 jmp       0x0000`0000`063B`7904
063b7904 mov       0x60(%rsp),%rax
063b7909 movabs    $0x8000`0000`0000`0009,%rcx
063b7913 sub       %rcx,%rax
063b7916 je        0x0000`0000`063B`7F4D
063b791c jmp       0x0000`0000`063B`791E
063b791e mov       0x60(%rsp),%rax
063b7923 movabs    $0x8000`0000`0000`000A,%rcx
063b792d sub       %rcx,%rax
063b7930 je        0x0000`0000`063B`7F7E
063b7936 jmp       0x0000`0000`063B`7938
063b7938 mov       0x60(%rsp),%rax
063b793d movabs    $0x8000`0000`0000`000B,%rcx
063b7947 sub       %rcx,%rax
063b794a je        0x0000`0000`063B`7FAF
063b7950 jmp       0x0000`0000`063B`7952
063b7952 mov       0x60(%rsp),%rax
063b7957 movabs    $0x8000`0000`0000`000C,%rcx
063b7961 sub       %rcx,%rax
063b7964 je        0x0000`0000`063B`7FE0
063b796a jmp       0x0000`0000`063B`796C
063b796c mov       0x60(%rsp),%rax
063b7971 movabs    $0x8000`0000`0000`000D,%rcx
063b797b sub       %rcx,%rax
063b797e je        0x0000`0000`063B`8011
063b7984 jmp       0x0000`0000`063B`7986
063b7986 mov       0x60(%rsp),%rax
063b798b movabs    $0x8000`0000`0000`000E,%rcx
063b7995 sub       %rcx,%rax
063b7998 je        0x0000`0000`063B`8042
063b799e jmp       0x0000`0000`063B`79A0
063b79a0 mov       0x60(%rsp),%rax
063b79a5 movabs    $0x8000`0000`0000`000F,%rcx
063b79af sub       %rcx,%rax
063b79b2 je        0x0000`0000`063B`8073
063b79b8 jmp       0x0000`0000`063B`79BA
063b79ba mov       0x60(%rsp),%rax
063b79bf movabs    $0x8000`0000`0000`0010,%rcx
063b79c9 sub       %rcx,%rax
063b79cc je        0x0000`0000`063B`80A4
063b79d2 jmp       0x0000`0000`063B`79D4
063b79d4 mov       0x60(%rsp),%rax
063b79d9 movabs    $0x8000`0000`0000`0011,%rcx
063b79e3 sub       %rcx,%rax
063b79e6 je        0x0000`0000`063B`80D5
063b79ec jmp       0x0000`0000`063B`79EE
063b79ee mov       0x60(%rsp),%rax
063b79f3 movabs    $0x8000`0000`0000`0012,%rcx
063b79fd sub       %rcx,%rax
063b7a00 je        0x0000`0000`063B`8106
063b7a06 jmp       0x0000`0000`063B`7A08
063b7a08 mov       0x60(%rsp),%rax
063b7a0d movabs    $0x8000`0000`0000`0013,%rcx
063b7a17 sub       %rcx,%rax
063b7a1a je        0x0000`0000`063B`8137
063b7a20 jmp       0x0000`0000`063B`7A22
063b7a22 mov       0x60(%rsp),%rax
063b7a27 movabs    $0x8000`0000`0000`0014,%rcx
063b7a31 sub       %rcx,%rax
063b7a34 je        0x0000`0000`063B`8168
063b7a3a jmp       0x0000`0000`063B`7A3C
063b7a3c mov       0x60(%rsp),%rax
063b7a41 movabs    $0x8000`0000`0000`0015,%rcx
063b7a4b sub       %rcx,%rax
063b7a4e je        0x0000`0000`063B`8199
063b7a54 jmp       0x0000`0000`063B`7A56
063b7a56 mov       0x60(%rsp),%rax
063b7a5b movabs    $0x8000`0000`0000`0016,%rcx
063b7a65 sub       %rcx,%rax
063b7a68 je        0x0000`0000`063B`81CA
063b7a6e jmp       0x0000`0000`063B`7A70
063b7a70 mov       0x60(%rsp),%rax
063b7a75 movabs    $0x8000`0000`0000`0017,%rcx
063b7a7f sub       %rcx,%rax
063b7a82 je        0x0000`0000`063B`81FB
063b7a88 jmp       0x0000`0000`063B`7A8A
063b7a8a mov       0x60(%rsp),%rax
063b7a8f movabs    $0x8000`0000`0000`0018,%rcx
063b7a99 sub       %rcx,%rax
063b7a9c je        0x0000`0000`063B`822C
063b7aa2 jmp       0x0000`0000`063B`7AA4
063b7aa4 mov       0x60(%rsp),%rax
063b7aa9 movabs    $0x8000`0000`0000`0019,%rcx
063b7ab3 sub       %rcx,%rax
063b7ab6 je        0x0000`0000`063B`825D
063b7abc jmp       0x0000`0000`063B`7ABE
063b7abe mov       0x60(%rsp),%rax
063b7ac3 movabs    $0x8000`0000`0000`001A,%rcx
063b7acd sub       %rcx,%rax
063b7ad0 je        0x0000`0000`063B`828E
063b7ad6 jmp       0x0000`0000`063B`7AD8
063b7ad8 mov       0x60(%rsp),%rax
063b7add movabs    $0x8000`0000`0000`001B,%rcx
063b7ae7 sub       %rcx,%rax
063b7aea je        0x0000`0000`063B`82BF
063b7af0 jmp       0x0000`0000`063B`7AF2
063b7af2 mov       0x60(%rsp),%rax
063b7af7 movabs    $0x8000`0000`0000`001C,%rcx
063b7b01 sub       %rcx,%rax
063b7b04 je        0x0000`0000`063B`82F0
063b7b0a jmp       0x0000`0000`063B`7B0C
063b7b0c mov       0x60(%rsp),%rax
063b7b11 movabs    $0x8000`0000`0000`001F,%rcx
063b7b1b sub       %rcx,%rax
063b7b1e je        0x0000`0000`063B`8321
063b7b24 jmp       0x0000`0000`063B`7B26
063b7b26 mov       0x60(%rsp),%rax
063b7b2b movabs    $0x8000`0000`0000`0020,%rcx
063b7b35 sub       %rcx,%rax
063b7b38 je        0x0000`0000`063B`8352
063b7b3e jmp       0x0000`0000`063B`7B40
063b7b40 mov       0x60(%rsp),%rax
063b7b45 movabs    $0x8000`0000`0000`0021,%rcx
063b7b4f sub       %rcx,%rax
063b7b52 je        0x0000`0000`063B`8383
063b7b58 jmp       0x0000`0000`063B`7B5A
063b7b5a mov       0x60(%rsp),%rax
063b7b5f movabs    $0x8000`0000`0000`0022,%rcx
063b7b69 sub       %rcx,%rax
063b7b6c je        0x0000`0000`063B`83B4
063b7b72 jmp       0x0000`0000`063B`7B74
063b7b74 mov       0x60(%rsp),%rax
063b7b79 movabs    $0x8000`0000`0000`0023,%rcx
063b7b83 sub       %rcx,%rax
063b7b86 je        0x0000`0000`063B`83E5
063b7b8c jmp       0x0000`0000`063B`7B8E
063b7b8e mov       0x60(%rsp),%rax
063b7b93 test      %rax,%rax
063b7b96 je        0x0000`0000`063B`7C40
063b7b9c jmp       0x0000`0000`063B`7B9E
063b7b9e mov       0x60(%rsp),%rax
063b7ba3 sub       $1,%rax
063b7ba7 je        0x0000`0000`063B`7C6E
063b7bad jmp       0x0000`0000`063B`7BAF
063b7baf mov       0x60(%rsp),%rax
063b7bb4 sub       $2,%rax
063b7bb8 je        0x0000`0000`063B`7C9F
063b7bbe jmp       0x0000`0000`063B`7BC0
063b7bc0 mov       0x60(%rsp),%rax
063b7bc5 sub       $3,%rax
063b7bc9 je        0x0000`0000`063B`7CD0
063b7bcf jmp       0x0000`0000`063B`7BD1
063b7bd1 mov       0x60(%rsp),%rax
063b7bd6 sub       $4,%rax
063b7bda je        0x0000`0000`063B`7D01
063b7be0 jmp       0x0000`0000`063B`7BE2
063b7be2 mov       0x60(%rsp),%rax
063b7be7 sub       $5,%rax
063b7beb je        0x0000`0000`063B`7D32
063b7bf1 jmp       0x0000`0000`063B`7BF3
063b7bf3 mov       0x60(%rsp),%rax
063b7bf8 sub       $6,%rax
063b7bfc je        0x0000`0000`063B`7D63
063b7c02 jmp       0x0000`0000`063B`7C04
063b7c04 mov       0x60(%rsp),%rax
063b7c09 sub       $7,%rax
063b7c0d je        0x0000`0000`063B`7D94
063b7c13 jmp       0x0000`0000`063B`7C15
063b7c15 mov       0x58(%rsp),%rax
063b7c1a mov       (%rax),%rax
063b7c1d mov       %rax,0x820(%rsp)
063b7c25 lea       0x63C`DED0,%rcx
063b7c2c call      0x0000`0000`063B`6600
063b7c31 mov       %rax,0x40(%rsp)
063b7c36 mov       %rdx,0x48(%rsp)
063b7c3b jmp       0x0000`0000`063B`8416
063b7c40 lea       0x70(%rsp),%rcx
063b7c45 lea       0x63C`E418,%rdx
063b7c4c mov       $1,%r8d
063b7c52 lea       0x63C`DE90,%r9
063b7c59 xor       %eax,%eax
063b7c5b movq      $0,0x20(%rsp)
063b7c64 call      0x0000`0000`063B`8A80
063b7c69 jmp       0x0000`0000`063B`8931
063b7c6e lea       0xA0(%rsp),%rcx
063b7c76 lea       0x63C`E400,%rdx
063b7c7d mov       $1,%r8d
063b7c83 lea       0x63C`DE90,%r9
063b7c8a xor       %eax,%eax
063b7c8c movq      $0,0x20(%rsp)
063b7c95 call      0x0000`0000`063B`8A80
063b7c9a jmp       0x0000`0000`063B`8914
063b7c9f lea       0xD0(%rsp),%rcx
063b7ca7 lea       0x63C`E3D8,%rdx
063b7cae mov       $1,%r8d
063b7cb4 lea       0x63C`DE90,%r9
063b7cbb xor       %eax,%eax
063b7cbd movq      $0,0x20(%rsp)
063b7cc6 call      0x0000`0000`063B`8A80
063b7ccb jmp       0x0000`0000`063B`88F7
063b7cd0 lea       0x100(%rsp),%rcx
063b7cd8 lea       0x63C`E3B0,%rdx
063b7cdf mov       $1,%r8d
063b7ce5 lea       0x63C`DE90,%r9
063b7cec xor       %eax,%eax
063b7cee movq      $0,0x20(%rsp)
063b7cf7 call      0x0000`0000`063B`8A80
063b7cfc jmp       0x0000`0000`063B`88DA
063b7d01 lea       0x130(%rsp),%rcx
063b7d09 lea       0x63C`E388,%rdx
063b7d10 mov       $1,%r8d
063b7d16 lea       0x63C`DE90,%r9
063b7d1d xor       %eax,%eax
063b7d1f movq      $0,0x20(%rsp)
063b7d28 call      0x0000`0000`063B`8A80
063b7d2d jmp       0x0000`0000`063B`88BD
063b7d32 lea       0x160(%rsp),%rcx
063b7d3a lea       0x63C`E360,%rdx
063b7d41 mov       $1,%r8d
063b7d47 lea       0x63C`DE90,%r9
063b7d4e xor       %eax,%eax
063b7d50 movq      $0,0x20(%rsp)
063b7d59 call      0x0000`0000`063B`8A80
063b7d5e jmp       0x0000`0000`063B`88A0
063b7d63 lea       0x190(%rsp),%rcx
063b7d6b lea       0x63C`E340,%rdx
063b7d72 mov       $1,%r8d
063b7d78 lea       0x63C`DE90,%r9
063b7d7f xor       %eax,%eax
063b7d81 movq      $0,0x20(%rsp)
063b7d8a call      0x0000`0000`063B`8A80
063b7d8f jmp       0x0000`0000`063B`8883
063b7d94 lea       0x1C0(%rsp),%rcx
063b7d9c lea       0x63C`E320,%rdx
063b7da3 mov       $1,%r8d
063b7da9 lea       0x63C`DE90,%r9
063b7db0 xor       %eax,%eax
063b7db2 movq      $0,0x20(%rsp)
063b7dbb call      0x0000`0000`063B`8A80
063b7dc0 jmp       0x0000`0000`063B`8866
063b7dc5 lea       0x1F0(%rsp),%rcx
063b7dcd lea       0x63C`E2F8,%rdx
063b7dd4 mov       $1,%r8d
063b7dda lea       0x63C`DE90,%r9
063b7de1 xor       %eax,%eax
063b7de3 movq      $0,0x20(%rsp)
063b7dec call      0x0000`0000`063B`8A80
063b7df1 jmp       0x0000`0000`063B`8849
063b7df6 lea       0x220(%rsp),%rcx
063b7dfe lea       0x63C`E2D8,%rdx
063b7e05 mov       $1,%r8d
063b7e0b lea       0x63C`DE90,%r9
063b7e12 xor       %eax,%eax
063b7e14 movq      $0,0x20(%rsp)
063b7e1d call      0x0000`0000`063B`8A80
063b7e22 jmp       0x0000`0000`063B`882C
063b7e27 lea       0x250(%rsp),%rcx
063b7e2f lea       0x63C`E2B0,%rdx
063b7e36 mov       $1,%r8d
063b7e3c lea       0x63C`DE90,%r9
063b7e43 xor       %eax,%eax
063b7e45 movq      $0,0x20(%rsp)
063b7e4e call      0x0000`0000`063B`8A80
063b7e53 jmp       0x0000`0000`063B`880F
063b7e58 lea       0x280(%rsp),%rcx
063b7e60 lea       0x63C`E290,%rdx
063b7e67 mov       $1,%r8d
063b7e6d lea       0x63C`DE90,%r9
063b7e74 xor       %eax,%eax
063b7e76 movq      $0,0x20(%rsp)
063b7e7f call      0x0000`0000`063B`8A80
063b7e84 jmp       0x0000`0000`063B`87F2
063b7e89 lea       0x2B0(%rsp),%rcx
063b7e91 lea       0x63C`E270,%rdx
063b7e98 mov       $1,%r8d
063b7e9e lea       0x63C`DE90,%r9
063b7ea5 xor       %eax,%eax
063b7ea7 movq      $0,0x20(%rsp)
063b7eb0 call      0x0000`0000`063B`8A80
063b7eb5 jmp       0x0000`0000`063B`87D5
063b7eba lea       0x2E0(%rsp),%rcx
063b7ec2 lea       0x63C`E250,%rdx
063b7ec9 mov       $1,%r8d
063b7ecf lea       0x63C`DE90,%r9
063b7ed6 xor       %eax,%eax
063b7ed8 movq      $0,0x20(%rsp)
063b7ee1 call      0x0000`0000`063B`8A80
063b7ee6 jmp       0x0000`0000`063B`87B8
063b7eeb lea       0x310(%rsp),%rcx
063b7ef3 lea       0x63C`E230,%rdx
063b7efa mov       $1,%r8d
063b7f00 lea       0x63C`DE90,%r9
063b7f07 xor       %eax,%eax
063b7f09 movq      $0,0x20(%rsp)
063b7f12 call      0x0000`0000`063B`8A80
063b7f17 jmp       0x0000`0000`063B`879B
063b7f1c lea       0x340(%rsp),%rcx
063b7f24 lea       0x63C`E210,%rdx
063b7f2b mov       $1,%r8d
063b7f31 lea       0x63C`DE90,%r9
063b7f38 xor       %eax,%eax
063b7f3a movq      $0,0x20(%rsp)
063b7f43 call      0x0000`0000`063B`8A80
063b7f48 jmp       0x0000`0000`063B`877E
063b7f4d lea       0x370(%rsp),%rcx
063b7f55 lea       0x63C`E1F0,%rdx
063b7f5c mov       $1,%r8d
063b7f62 lea       0x63C`DE90,%r9
063b7f69 xor       %eax,%eax
063b7f6b movq      $0,0x20(%rsp)
063b7f74 call      0x0000`0000`063B`8A80
063b7f79 jmp       0x0000`0000`063B`8761
063b7f7e lea       0x3A0(%rsp),%rcx
063b7f86 lea       0x63C`E1D0,%rdx
063b7f8d mov       $1,%r8d
063b7f93 lea       0x63C`DE90,%r9
063b7f9a xor       %eax,%eax
063b7f9c movq      $0,0x20(%rsp)
063b7fa5 call      0x0000`0000`063B`8A80
063b7faa jmp       0x0000`0000`063B`8744
063b7faf lea       0x3D0(%rsp),%rcx
063b7fb7 lea       0x63C`E1B0,%rdx
063b7fbe mov       $1,%r8d
063b7fc4 lea       0x63C`DE90,%r9
063b7fcb xor       %eax,%eax
063b7fcd movq      $0,0x20(%rsp)
063b7fd6 call      0x0000`0000`063B`8A80
063b7fdb jmp       0x0000`0000`063B`8727
063b7fe0 lea       0x400(%rsp),%rcx
063b7fe8 lea       0x63C`E190,%rdx
063b7fef mov       $1,%r8d
063b7ff5 lea       0x63C`DE90,%r9
063b7ffc xor       %eax,%eax
063b7ffe movq      $0,0x20(%rsp)
063b8007 call      0x0000`0000`063B`8A80
063b800c jmp       0x0000`0000`063B`870A
063b8011 lea       0x430(%rsp),%rcx
063b8019 lea       0x63C`E178,%rdx
063b8020 mov       $1,%r8d
063b8026 lea       0x63C`DE90,%r9
063b802d xor       %eax,%eax
063b802f movq      $0,0x20(%rsp)
063b8038 call      0x0000`0000`063B`8A80
063b803d jmp       0x0000`0000`063B`86ED
063b8042 lea       0x460(%rsp),%rcx
063b804a lea       0x63C`E158,%rdx
063b8051 mov       $1,%r8d
063b8057 lea       0x63C`DE90,%r9
063b805e xor       %eax,%eax
063b8060 movq      $0,0x20(%rsp)
063b8069 call      0x0000`0000`063B`8A80
063b806e jmp       0x0000`0000`063B`86D0
063b8073 lea       0x490(%rsp),%rcx
063b807b lea       0x63C`E138,%rdx
063b8082 mov       $1,%r8d
063b8088 lea       0x63C`DE90,%r9
063b808f xor       %eax,%eax
063b8091 movq      $0,0x20(%rsp)
063b809a call      0x0000`0000`063B`8A80
063b809f jmp       0x0000`0000`063B`86B3
063b80a4 lea       0x4C0(%rsp),%rcx
063b80ac lea       0x63C`E118,%rdx
063b80b3 mov       $1,%r8d
063b80b9 lea       0x63C`DE90,%r9
063b80c0 xor       %eax,%eax
063b80c2 movq      $0,0x20(%rsp)
063b80cb call      0x0000`0000`063B`8A80
063b80d0 jmp       0x0000`0000`063B`8696
063b80d5 lea       0x4F0(%rsp),%rcx
063b80dd lea       0x63C`E0F8,%rdx
063b80e4 mov       $1,%r8d
063b80ea lea       0x63C`DE90,%r9
063b80f1 xor       %eax,%eax
063b80f3 movq      $0,0x20(%rsp)
063b80fc call      0x0000`0000`063B`8A80
063b8101 jmp       0x0000`0000`063B`8679
063b8106 lea       0x520(%rsp),%rcx
063b810e lea       0x63C`E0D8,%rdx
063b8115 mov       $1,%r8d
063b811b lea       0x63C`DE90,%r9
063b8122 xor       %eax,%eax
063b8124 movq      $0,0x20(%rsp)
063b812d call      0x0000`0000`063B`8A80
063b8132 jmp       0x0000`0000`063B`865C
063b8137 lea       0x550(%rsp),%rcx
063b813f lea       0x63C`E0C0,%rdx
063b8146 mov       $1,%r8d
063b814c lea       0x63C`DE90,%r9
063b8153 xor       %eax,%eax
063b8155 movq      $0,0x20(%rsp)
063b815e call      0x0000`0000`063B`8A80
063b8163 jmp       0x0000`0000`063B`863F
063b8168 lea       0x580(%rsp),%rcx
063b8170 lea       0x63C`E0A0,%rdx
063b8177 mov       $1,%r8d
063b817d lea       0x63C`DE90,%r9
063b8184 xor       %eax,%eax
063b8186 movq      $0,0x20(%rsp)
063b818f call      0x0000`0000`063B`8A80
063b8194 jmp       0x0000`0000`063B`8622
063b8199 lea       0x5B0(%rsp),%rcx
063b81a1 lea       0x63C`E080,%rdx
063b81a8 mov       $1,%r8d
063b81ae lea       0x63C`DE90,%r9
063b81b5 xor       %eax,%eax
063b81b7 movq      $0,0x20(%rsp)
063b81c0 call      0x0000`0000`063B`8A80
063b81c5 jmp       0x0000`0000`063B`8605
063b81ca lea       0x5E0(%rsp),%rcx
063b81d2 lea       0x63C`E068,%rdx
063b81d9 mov       $1,%r8d
063b81df lea       0x63C`DE90,%r9
063b81e6 xor       %eax,%eax
063b81e8 movq      $0,0x20(%rsp)
063b81f1 call      0x0000`0000`063B`8A80
063b81f6 jmp       0x0000`0000`063B`85E8
063b81fb lea       0x610(%rsp),%rcx
063b8203 lea       0x63C`E048,%rdx
063b820a mov       $1,%r8d
063b8210 lea       0x63C`DE90,%r9
063b8217 xor       %eax,%eax
063b8219 movq      $0,0x20(%rsp)
063b8222 call      0x0000`0000`063B`8A80
063b8227 jmp       0x0000`0000`063B`85CB
063b822c lea       0x640(%rsp),%rcx
063b8234 lea       0x63C`E028,%rdx
063b823b mov       $1,%r8d
063b8241 lea       0x63C`DE90,%r9
063b8248 xor       %eax,%eax
063b824a movq      $0,0x20(%rsp)
063b8253 call      0x0000`0000`063B`8A80
063b8258 jmp       0x0000`0000`063B`85AE
063b825d lea       0x670(%rsp),%rcx
063b8265 lea       0x63C`E008,%rdx
063b826c mov       $1,%r8d
063b8272 lea       0x63C`DE90,%r9
063b8279 xor       %eax,%eax
063b827b movq      $0,0x20(%rsp)
063b8284 call      0x0000`0000`063B`8A80
063b8289 jmp       0x0000`0000`063B`8591
063b828e lea       0x6A0(%rsp),%rcx
063b8296 lea       0x63C`DFE0,%rdx
063b829d mov       $1,%r8d
063b82a3 lea       0x63C`DE90,%r9
063b82aa xor       %eax,%eax
063b82ac movq      $0,0x20(%rsp)
063b82b5 call      0x0000`0000`063B`8A80
063b82ba jmp       0x0000`0000`063B`8574
063b82bf lea       0x6D0(%rsp),%rcx
063b82c7 lea       0x63C`DFB8,%rdx
063b82ce mov       $1,%r8d
063b82d4 lea       0x63C`DE90,%r9
063b82db xor       %eax,%eax
063b82dd movq      $0,0x20(%rsp)
063b82e6 call      0x0000`0000`063B`8A80
063b82eb jmp       0x0000`0000`063B`8557
063b82f0 lea       0x700(%rsp),%rcx
063b82f8 lea       0x63C`DF98,%rdx
063b82ff mov       $1,%r8d
063b8305 lea       0x63C`DE90,%r9
063b830c xor       %eax,%eax
063b830e movq      $0,0x20(%rsp)
063b8317 call      0x0000`0000`063B`8A80
063b831c jmp       0x0000`0000`063B`853A
063b8321 lea       0x730(%rsp),%rcx
063b8329 lea       0x63C`DF78,%rdx
063b8330 mov       $1,%r8d
063b8336 lea       0x63C`DE90,%r9
063b833d xor       %eax,%eax
063b833f movq      $0,0x20(%rsp)
063b8348 call      0x0000`0000`063B`8A80
063b834d jmp       0x0000`0000`063B`851D
063b8352 lea       0x760(%rsp),%rcx
063b835a lea       0x63C`DF58,%rdx
063b8361 mov       $1,%r8d
063b8367 lea       0x63C`DE90,%r9
063b836e xor       %eax,%eax
063b8370 movq      $0,0x20(%rsp)
063b8379 call      0x0000`0000`063B`8A80
063b837e jmp       0x0000`0000`063B`8503
063b8383 lea       0x790(%rsp),%rcx
063b838b lea       0x63C`DF38,%rdx
063b8392 mov       $1,%r8d
063b8398 lea       0x63C`DE90,%r9
063b839f xor       %eax,%eax
063b83a1 movq      $0,0x20(%rsp)
063b83aa call      0x0000`0000`063B`8A80
063b83af jmp       0x0000`0000`063B`84E9
063b83b4 lea       0x7C0(%rsp),%rcx
063b83bc lea       0x63C`DF18,%rdx
063b83c3 mov       $1,%r8d
063b83c9 lea       0x63C`DE90,%r9
063b83d0 xor       %eax,%eax
063b83d2 movq      $0,0x20(%rsp)
063b83db call      0x0000`0000`063B`8A80
063b83e0 jmp       0x0000`0000`063B`84CF
063b83e5 lea       0x7F0(%rsp),%rcx
063b83ed lea       0x63C`DEF0,%rdx
063b83f4 mov       $1,%r8d
063b83fa lea       0x63C`DE90,%r9
063b8401 xor       %eax,%eax
063b8403 movq      $0,0x20(%rsp)
063b840c call      0x0000`0000`063B`8A80
063b8411 jmp       0x0000`0000`063B`84B5
063b8416 lea       0x820(%rsp),%rcx
063b841e call      0x0000`0000`063B`6510
063b8423 mov       %rax,0x30(%rsp)
063b8428 mov       %rdx,0x38(%rsp)
063b842d mov       0x38(%rsp),%rax
063b8432 mov       0x30(%rsp),%rcx
063b8437 mov       0x48(%rsp),%rdx
063b843c mov       0x40(%rsp),%r8
063b8441 mov       %r8,0x858(%rsp)
063b8449 mov       %rdx,0x860(%rsp)
063b8451 mov       %rcx,0x868(%rsp)
063b8459 mov       %rax,0x870(%rsp)
063b8461 lea       0x858(%rsp),%r9
063b8469 lea       0x828(%rsp),%rcx
063b8471 lea       0x63C`DE98,%rdx
063b8478 mov       $3,%r8d
063b847e movq      $2,0x20(%rsp)
063b8487 call      0x0000`0000`063B`8A80
063b848c mov       0x50(%rsp),%rcx
063b8491 lea       0x828(%rsp),%rdx
063b8499 call      0x0000`0000`063B`5DD0
063b849e and       $1,%al
063b84a0 mov       %al,0x6F(%rsp)
063b84a4 mov       0x6F(%rsp),%al
063b84a8 and       $1,%al
063b84aa movzbl    %al,%eax
063b84ad add       $0x888,%rsp
063b84b4 ret
063b84b5 mov       0x50(%rsp),%rcx
063b84ba lea       0x7F0(%rsp),%rdx
063b84c2 call      0x0000`0000`063B`5DD0
063b84c7 and       $1,%al
063b84c9 mov       %al,0x6F(%rsp)
063b84cd jmp       0x0000`0000`063B`84A4
063b84cf mov       0x50(%rsp),%rcx
063b84d4 lea       0x7C0(%rsp),%rdx
063b84dc call      0x0000`0000`063B`5DD0
063b84e1 and       $1,%al
063b84e3 mov       %al,0x6F(%rsp)
063b84e7 jmp       0x0000`0000`063B`84A4
063b84e9 mov       0x50(%rsp),%rcx
063b84ee lea       0x790(%rsp),%rdx
063b84f6 call      0x0000`0000`063B`5DD0
063b84fb and       $1,%al
063b84fd mov       %al,0x6F(%rsp)
063b8501 jmp       0x0000`0000`063B`84A4
063b8503 mov       0x50(%rsp),%rcx
063b8508 lea       0x760(%rsp),%rdx
063b8510 call      0x0000`0000`063B`5DD0
063b8515 and       $1,%al
063b8517 mov       %al,0x6F(%rsp)
063b851b jmp       0x0000`0000`063B`84A4
063b851d mov       0x50(%rsp),%rcx
063b8522 lea       0x730(%rsp),%rdx
063b852a call      0x0000`0000`063B`5DD0
063b852f and       $1,%al
063b8531 mov       %al,0x6F(%rsp)
063b8535 jmp       0x0000`0000`063B`84A4
063b853a mov       0x50(%rsp),%rcx
063b853f lea       0x700(%rsp),%rdx
063b8547 call      0x0000`0000`063B`5DD0
063b854c and       $1,%al
063b854e mov       %al,0x6F(%rsp)
063b8552 jmp       0x0000`0000`063B`84A4
063b8557 mov       0x50(%rsp),%rcx
063b855c lea       0x6D0(%rsp),%rdx
063b8564 call      0x0000`0000`063B`5DD0
063b8569 and       $1,%al
063b856b mov       %al,0x6F(%rsp)
063b856f jmp       0x0000`0000`063B`84A4
063b8574 mov       0x50(%rsp),%rcx
063b8579 lea       0x6A0(%rsp),%rdx
063b8581 call      0x0000`0000`063B`5DD0
063b8586 and       $1,%al
063b8588 mov       %al,0x6F(%rsp)
063b858c jmp       0x0000`0000`063B`84A4
063b8591 mov       0x50(%rsp),%rcx
063b8596 lea       0x670(%rsp),%rdx
063b859e call      0x0000`0000`063B`5DD0
063b85a3 and       $1,%al
063b85a5 mov       %al,0x6F(%rsp)
063b85a9 jmp       0x0000`0000`063B`84A4
063b85ae mov       0x50(%rsp),%rcx
063b85b3 lea       0x640(%rsp),%rdx
063b85bb call      0x0000`0000`063B`5DD0
063b85c0 and       $1,%al
063b85c2 mov       %al,0x6F(%rsp)
063b85c6 jmp       0x0000`0000`063B`84A4
063b85cb mov       0x50(%rsp),%rcx
063b85d0 lea       0x610(%rsp),%rdx
063b85d8 call      0x0000`0000`063B`5DD0
063b85dd and       $1,%al
063b85df mov       %al,0x6F(%rsp)
063b85e3 jmp       0x0000`0000`063B`84A4
063b85e8 mov       0x50(%rsp),%rcx
063b85ed lea       0x5E0(%rsp),%rdx
063b85f5 call      0x0000`0000`063B`5DD0
063b85fa and       $1,%al
063b85fc mov       %al,0x6F(%rsp)
063b8600 jmp       0x0000`0000`063B`84A4
063b8605 mov       0x50(%rsp),%rcx
063b860a lea       0x5B0(%rsp),%rdx
063b8612 call      0x0000`0000`063B`5DD0
063b8617 and       $1,%al
063b8619 mov       %al,0x6F(%rsp)
063b861d jmp       0x0000`0000`063B`84A4
063b8622 mov       0x50(%rsp),%rcx
063b8627 lea       0x580(%rsp),%rdx
063b862f call      0x0000`0000`063B`5DD0
063b8634 and       $1,%al
063b8636 mov       %al,0x6F(%rsp)
063b863a jmp       0x0000`0000`063B`84A4
063b863f mov       0x50(%rsp),%rcx
063b8644 lea       0x550(%rsp),%rdx
063b864c call      0x0000`0000`063B`5DD0
063b8651 and       $1,%al
063b8653 mov       %al,0x6F(%rsp)
063b8657 jmp       0x0000`0000`063B`84A4
063b865c mov       0x50(%rsp),%rcx
063b8661 lea       0x520(%rsp),%rdx
063b8669 call      0x0000`0000`063B`5DD0
063b866e and       $1,%al
063b8670 mov       %al,0x6F(%rsp)
063b8674 jmp       0x0000`0000`063B`84A4
063b8679 mov       0x50(%rsp),%rcx
063b867e lea       0x4F0(%rsp),%rdx
063b8686 call      0x0000`0000`063B`5DD0
063b868b and       $1,%al
063b868d mov       %al,0x6F(%rsp)
063b8691 jmp       0x0000`0000`063B`84A4
063b8696 mov       0x50(%rsp),%rcx
063b869b lea       0x4C0(%rsp),%rdx
063b86a3 call      0x0000`0000`063B`5DD0
063b86a8 and       $1,%al
063b86aa mov       %al,0x6F(%rsp)
063b86ae jmp       0x0000`0000`063B`84A4
063b86b3 mov       0x50(%rsp),%rcx
063b86b8 lea       0x490(%rsp),%rdx
063b86c0 call      0x0000`0000`063B`5DD0
063b86c5 and       $1,%al
063b86c7 mov       %al,0x6F(%rsp)
063b86cb jmp       0x0000`0000`063B`84A4
063b86d0 mov       0x50(%rsp),%rcx
063b86d5 lea       0x460(%rsp),%rdx
063b86dd call      0x0000`0000`063B`5DD0
063b86e2 and       $1,%al
063b86e4 mov       %al,0x6F(%rsp)
063b86e8 jmp       0x0000`0000`063B`84A4
063b86ed mov       0x50(%rsp),%rcx
063b86f2 lea       0x430(%rsp),%rdx
063b86fa call      0x0000`0000`063B`5DD0
063b86ff and       $1,%al
063b8701 mov       %al,0x6F(%rsp)
063b8705 jmp       0x0000`0000`063B`84A4
063b870a mov       0x50(%rsp),%rcx
063b870f lea       0x400(%rsp),%rdx
063b8717 call      0x0000`0000`063B`5DD0
063b871c and       $1,%al
063b871e mov       %al,0x6F(%rsp)
063b8722 jmp       0x0000`0000`063B`84A4
063b8727 mov       0x50(%rsp),%rcx
063b872c lea       0x3D0(%rsp),%rdx
063b8734 call      0x0000`0000`063B`5DD0
063b8739 and       $1,%al
063b873b mov       %al,0x6F(%rsp)
063b873f jmp       0x0000`0000`063B`84A4
063b8744 mov       0x50(%rsp),%rcx
063b8749 lea       0x3A0(%rsp),%rdx
063b8751 call      0x0000`0000`063B`5DD0
063b8756 and       $1,%al
063b8758 mov       %al,0x6F(%rsp)
063b875c jmp       0x0000`0000`063B`84A4
063b8761 mov       0x50(%rsp),%rcx
063b8766 lea       0x370(%rsp),%rdx
063b876e call      0x0000`0000`063B`5DD0
063b8773 and       $1,%al
063b8775 mov       %al,0x6F(%rsp)
063b8779 jmp       0x0000`0000`063B`84A4
063b877e mov       0x50(%rsp),%rcx
063b8783 lea       0x340(%rsp),%rdx
063b878b call      0x0000`0000`063B`5DD0
063b8790 and       $1,%al
063b8792 mov       %al,0x6F(%rsp)
063b8796 jmp       0x0000`0000`063B`84A4
063b879b mov       0x50(%rsp),%rcx
063b87a0 lea       0x310(%rsp),%rdx
063b87a8 call      0x0000`0000`063B`5DD0
063b87ad and       $1,%al
063b87af mov       %al,0x6F(%rsp)
063b87b3 jmp       0x0000`0000`063B`84A4
063b87b8 mov       0x50(%rsp),%rcx
063b87bd lea       0x2E0(%rsp),%rdx
063b87c5 call      0x0000`0000`063B`5DD0
063b87ca and       $1,%al
063b87cc mov       %al,0x6F(%rsp)
063b87d0 jmp       0x0000`0000`063B`84A4
063b87d5 mov       0x50(%rsp),%rcx
063b87da lea       0x2B0(%rsp),%rdx
063b87e2 call      0x0000`0000`063B`5DD0
063b87e7 and       $1,%al
063b87e9 mov       %al,0x6F(%rsp)
063b87ed jmp       0x0000`0000`063B`84A4
063b87f2 mov       0x50(%rsp),%rcx
063b87f7 lea       0x280(%rsp),%rdx
063b87ff call      0x0000`0000`063B`5DD0
063b8804 and       $1,%al
063b8806 mov       %al,0x6F(%rsp)
063b880a jmp       0x0000`0000`063B`84A4
063b880f mov       0x50(%rsp),%rcx
063b8814 lea       0x250(%rsp),%rdx
063b881c call      0x0000`0000`063B`5DD0
063b8821 and       $1,%al
063b8823 mov       %al,0x6F(%rsp)
063b8827 jmp       0x0000`0000`063B`84A4
063b882c mov       0x50(%rsp),%rcx
063b8831 lea       0x220(%rsp),%rdx
063b8839 call      0x0000`0000`063B`5DD0
063b883e and       $1,%al
063b8840 mov       %al,0x6F(%rsp)
063b8844 jmp       0x0000`0000`063B`84A4
063b8849 mov       0x50(%rsp),%rcx
063b884e lea       0x1F0(%rsp),%rdx
063b8856 call      0x0000`0000`063B`5DD0
063b885b and       $1,%al
063b885d mov       %al,0x6F(%rsp)
063b8861 jmp       0x0000`0000`063B`84A4
063b8866 mov       0x50(%rsp),%rcx
063b886b lea       0x1C0(%rsp),%rdx
063b8873 call      0x0000`0000`063B`5DD0
063b8878 and       $1,%al
063b887a mov       %al,0x6F(%rsp)
063b887e jmp       0x0000`0000`063B`84A4
063b8883 mov       0x50(%rsp),%rcx
063b8888 lea       0x190(%rsp),%rdx
063b8890 call      0x0000`0000`063B`5DD0
063b8895 and       $1,%al
063b8897 mov       %al,0x6F(%rsp)
063b889b jmp       0x0000`0000`063B`84A4
063b88a0 mov       0x50(%rsp),%rcx
063b88a5 lea       0x160(%rsp),%rdx
063b88ad call      0x0000`0000`063B`5DD0
063b88b2 and       $1,%al
063b88b4 mov       %al,0x6F(%rsp)
063b88b8 jmp       0x0000`0000`063B`84A4
063b88bd mov       0x50(%rsp),%rcx
063b88c2 lea       0x130(%rsp),%rdx
063b88ca call      0x0000`0000`063B`5DD0
063b88cf and       $1,%al
063b88d1 mov       %al,0x6F(%rsp)
063b88d5 jmp       0x0000`0000`063B`84A4
063b88da mov       0x50(%rsp),%rcx
063b88df lea       0x100(%rsp),%rdx
063b88e7 call      0x0000`0000`063B`5DD0
063b88ec and       $1,%al
063b88ee mov       %al,0x6F(%rsp)
063b88f2 jmp       0x0000`0000`063B`84A4
063b88f7 mov       0x50(%rsp),%rcx
063b88fc lea       0xD0(%rsp),%rdx
063b8904 call      0x0000`0000`063B`5DD0
063b8909 and       $1,%al
063b890b mov       %al,0x6F(%rsp)
063b890f jmp       0x0000`0000`063B`84A4
063b8914 mov       0x50(%rsp),%rcx
063b8919 lea       0xA0(%rsp),%rdx
063b8921 call      0x0000`0000`063B`5DD0
063b8926 and       $1,%al
063b8928 mov       %al,0x6F(%rsp)
063b892c jmp       0x0000`0000`063B`84A4
063b8931 mov       0x50(%rsp),%rcx
063b8936 lea       0x70(%rsp),%rdx
063b893b call      0x0000`0000`063B`5DD0
063b8940 and       $1,%al
063b8942 mov       %al,0x6F(%rsp)
063b8946 jmp       0x0000`0000`063B`84A4

uefi::result::status::impl$14::eq:
063b8950 sub       $0x20,%rsp
063b8954 mov       %rcx,(%rsp)
063b8958 mov       %rdx,8(%rsp)
063b895d mov       %rdx,0x10(%rsp)
063b8962 mov       %rcx,0x18(%rsp)
063b8967 mov       (%rcx),%rax
063b896a cmp       (%rdx),%rax
063b896d sete      %al
063b8970 and       $1,%al
063b8972 movzbl    %al,%eax
063b8975 add       $0x20,%rsp
063b8979 ret

core::fmt::ArgumentV1::new_display<enum$<log::Level> >:
063b8980 sub       $0x38,%rsp
063b8984 mov       %rcx,0x30(%rsp)
063b8989 lea       0x63A`CCC0,%rdx
063b8990 call      0x0000`0000`063B`89B0
063b8995 mov       %rax,0x20(%rsp)
063b899a mov       %rdx,0x28(%rsp)
063b899f mov       0x28(%rsp),%rdx
063b89a4 mov       0x20(%rsp),%rax
063b89a9 add       $0x38,%rsp
063b89ad ret

core::fmt::ArgumentV1::new<enum$<log::Level> >:
063b89b0 sub       $0x48,%rsp
063b89b4 mov       %rcx,8(%rsp)
063b89b9 mov       %rcx,0x28(%rsp)
063b89be mov       %rdx,0x30(%rsp)
063b89c3 mov       %rdx,0x38(%rsp)
063b89c8 mov       0x38(%rsp),%rax
063b89cd mov       %rax,0x10(%rsp)
063b89d2 mov       8(%rsp),%rax
063b89d7 mov       %rax,0x40(%rsp)
063b89dc mov       0x40(%rsp),%rax
063b89e1 mov       %rax,(%rsp)
063b89e5 mov       0x10(%rsp),%rax
063b89ea mov       (%rsp),%rcx
063b89ee mov       %rcx,0x18(%rsp)
063b89f3 mov       %rax,0x20(%rsp)
063b89f8 mov       0x18(%rsp),%rax
063b89fd mov       0x20(%rsp),%rdx
063b8a02 add       $0x48,%rsp
063b8a06 ret

core::fmt::Arguments::new_v1_formatted:
063b8a10 push      %rsi
063b8a11 sub       $0x48,%rsp
063b8a15 mov       %rdx,%r10
063b8a18 mov       %rcx,%rax
063b8a1b mov       0x88(%rsp),%r11
063b8a23 mov       0x80(%rsp),%rsi
063b8a2b mov       0x78(%rsp),%rdx
063b8a30 mov       %r10,0x10(%rsp)
063b8a35 mov       %r8,0x18(%rsp)
063b8a3a mov       %r9,0x20(%rsp)
063b8a3f mov       %rdx,0x28(%rsp)
063b8a44 mov       %rsi,0x30(%rsp)
063b8a49 mov       %r11,0x38(%rsp)
063b8a4e mov       %rsi,(%rsp)
063b8a52 mov       %r11,8(%rsp)
063b8a57 mov       %r10,(%rcx)
063b8a5a mov       %r8,8(%rcx)
063b8a5e mov       (%rsp),%r10
063b8a62 mov       8(%rsp),%r8
063b8a67 mov       %r10,0x10(%rcx)
063b8a6b mov       %r8,0x18(%rcx)
063b8a6f mov       %r9,0x20(%rcx)
063b8a73 mov       %rdx,0x28(%rcx)
063b8a77 add       $0x48,%rsp
063b8a7b pop       %rsi
063b8a7c ret

core::fmt::Arguments::new_v1:
063b8a80 sub       $0xC8,%rsp
063b8a87 mov       %r9,0x30(%rsp)
063b8a8c mov       %r8,0x38(%rsp)
063b8a91 mov       %rdx,0x40(%rsp)
063b8a96 mov       %rcx,0x48(%rsp)
063b8a9b mov       %rcx,0x50(%rsp)
063b8aa0 mov       0xF0(%rsp),%rax
063b8aa8 mov       %rax,0x58(%rsp)
063b8aad mov       %rdx,0xA8(%rsp)
063b8ab5 mov       %r8,0xB0(%rsp)
063b8abd mov       %r9,0xB8(%rsp)
063b8ac5 mov       %rax,0xC0(%rsp)
063b8acd cmp       %rax,%r8
063b8ad0 jb        0x0000`0000`063B`8AE9
063b8ad2 mov       0x58(%rsp),%rax
063b8ad7 add       $1,%rax
063b8adb mov       %rax,0x28(%rsp)
063b8ae0 setb      %al
063b8ae3 test      $1,%al
063b8ae5 jne       0x0000`0000`063B`8B13
063b8ae7 jmp       0x0000`0000`063B`8AFB
063b8ae9 movb      $1,0x67(%rsp)
063b8aee testb     $1,0x67(%rsp)
063b8af3 jne       0x0000`0000`063B`8B86
063b8af9 jmp       0x0000`0000`063B`8B2D
063b8afb mov       0x38(%rsp),%rax
063b8b00 mov       0x28(%rsp),%rcx
063b8b05 cmp       %rcx,%rax
063b8b08 seta      %al
063b8b0b and       $1,%al
063b8b0d mov       %al,0x67(%rsp)
063b8b11 jmp       0x0000`0000`063B`8AEE
063b8b13 lea       0x63C`E4C0,%rcx
063b8b1a lea       0x63C`E4A0,%r8
063b8b21 mov       $0x1C,%edx
063b8b26 call      0x0000`0000`063B`2030
063b8b2b ud2
063b8b2d mov       0x50(%rsp),%rax
063b8b32 mov       0x48(%rsp),%rcx
063b8b37 mov       0x58(%rsp),%rdx
063b8b3c mov       0x30(%rsp),%r8
063b8b41 mov       0x38(%rsp),%r9
063b8b46 mov       0x40(%rsp),%r10
063b8b4b movq      $0,0x98(%rsp)
063b8b57 mov       %r10,(%rcx)
063b8b5a mov       %r9,8(%rcx)
063b8b5e mov       0x98(%rsp),%r10
063b8b66 mov       0xA0(%rsp),%r9
063b8b6e mov       %r10,0x10(%rcx)
063b8b72 mov       %r9,0x18(%rcx)
063b8b76 mov       %r8,0x20(%rcx)
063b8b7a mov       %rdx,0x28(%rcx)
063b8b7e add       $0xC8,%rsp
063b8b85 ret
063b8b86 lea       0x68(%rsp),%rcx
063b8b8b lea       0x63C`E4E8,%rdx
063b8b92 mov       $1,%r8d
063b8b98 lea       0x63C`E4F8,%r9
063b8b9f xor       %eax,%eax
063b8ba1 movq      $0,0x20(%rsp)
063b8baa call      0x0000`0000`063B`8A80
063b8baf lea       0x63C`E4F8,%rdx
063b8bb6 lea       0x68(%rsp),%rcx
063b8bbb call      0x0000`0000`063B`2140
063b8bc0 ud2

core::ptr::const_ptr::impl$0::cast<u16,tuple$<> >:
063b8bd0 push      %rax
063b8bd1 mov       %rcx,%rax
063b8bd4 mov       %rax,(%rsp)
063b8bd8 pop       %rcx
063b8bd9 ret

core::ptr::const_ptr::impl$0::is_null<u64>:
063b8be0 sub       $0x38,%rsp
063b8be4 mov       %rcx,0x30(%rsp)
063b8be9 mov       %rcx,0x28(%rsp)
063b8bee mov       0x28(%rsp),%rcx
063b8bf3 xor       %eax,%eax
063b8bf5 mov       %eax,%edx
063b8bf7 call      0x0000`0000`063C`4900
063b8bfc mov       %al,0x27(%rsp)
063b8c00 mov       0x27(%rsp),%al
063b8c04 and       $1,%al
063b8c06 movzbl    %al,%eax
063b8c09 add       $0x38,%rsp
063b8c0d ret

core::ptr::const_ptr::impl$1::as_ptr<u16>:
063b8c10 sub       $0x10,%rsp
063b8c14 mov       %rcx,%rax
063b8c17 mov       %rax,(%rsp)
063b8c1b mov       %rdx,8(%rsp)
063b8c20 add       $0x10,%rsp
063b8c24 ret

uefi::alloc::init:
063b8c30 sub       $0x38,%rsp
063b8c34 mov       %rcx,0x30(%rsp)
063b8c39 call      0x0000`0000`063B`C000
063b8c3e mov       %rax,0x28(%rsp)
063b8c43 mov       0x28(%rsp),%rax
063b8c48 mov       %rax,0x63D`3040
063b8c4f add       $0x38,%rsp
063b8c53 ret

uefi::alloc::exit_boot_services:
063b8c60 push      %rax
063b8c61 movq      $0,(%rsp)
063b8c69 mov       (%rsp),%rax
063b8c6d mov       %rax,0x63D`3040
063b8c74 pop       %rax
063b8c75 ret

core::ptr::mut_ptr::impl$0::is_null<uefi::table::boot::BootServices>:
063b8c80 sub       $0x38,%rsp
063b8c84 mov       %rcx,0x30(%rsp)
063b8c89 mov       %rcx,0x28(%rsp)
063b8c8e mov       0x28(%rsp),%rcx
063b8c93 xor       %eax,%eax
063b8c95 mov       %eax,%edx
063b8c97 call      0x0000`0000`063B`FE00
063b8c9c mov       %al,0x27(%rsp)
063b8ca0 mov       0x27(%rsp),%al
063b8ca4 and       $1,%al
063b8ca6 movzbl    %al,%eax
063b8ca9 add       $0x38,%rsp
063b8cad ret

uefi::table::boot::BootServices::create_event:
063b8cb0 sub       $0xA8,%rsp
063b8cb7 mov       %r9,0x38(%rsp)
063b8cbc mov       %r8d,0x44(%rsp)
063b8cc1 mov       %rdx,0x48(%rsp)
063b8cc6 mov       %rcx,0x50(%rsp)
063b8ccb mov       %rcx,0x58(%rsp)
063b8cd0 mov       0xD8(%rsp),%rax
063b8cd8 mov       %rax,0x60(%rsp)
063b8cdd mov       0xD0(%rsp),%rax
063b8ce5 mov       %rax,0x68(%rsp)
063b8cea mov       %rdx,0x80(%rsp)
063b8cf2 mov       %r8d,0x8C(%rsp)
063b8cfa mov       %r9,0x90(%rsp)
063b8d02 mov       0xA0(%rsp),%rax
063b8d0a mov       %rax,0x70(%rsp)
063b8d0f mov       0x48(%rsp),%rax
063b8d14 mov       0x50(%rax),%rax
063b8d18 mov       %rax,0x30(%rsp)
063b8d1d lea       0x70(%rsp),%rax
063b8d22 mov       %rax,0x98(%rsp)
063b8d2a mov       0x30(%rsp),%rax
063b8d2f mov       0x60(%rsp),%r9
063b8d34 mov       0x68(%rsp),%r8
063b8d39 mov       0x38(%rsp),%rdx
063b8d3e mov       0x44(%rsp),%ecx
063b8d42 lea       0x70(%rsp),%r10
063b8d47 mov       %r10,0x20(%rsp)
063b8d4c call      *%rax
063b8d4e mov       %rax,0x28(%rsp)
063b8d53 mov       0x28(%rsp),%rdx
063b8d58 mov       0x50(%rsp),%rcx
063b8d5d mov       0x70(%rsp),%rax
063b8d62 mov       %rax,0x78(%rsp)
063b8d67 mov       0x78(%rsp),%r8
063b8d6c call      0x0000`0000`063B`7690
063b8d71 mov       0x58(%rsp),%rax
063b8d76 add       $0xA8,%rsp
063b8d7d ret

uefi::table::boot::impl$0::create_event::closure$0:
063b8d80 sub       $0x20,%rsp
063b8d84 mov       %rcx,(%rsp)
063b8d88 mov       %rcx,8(%rsp)
063b8d8d mov       %rcx,0x10(%rsp)
063b8d92 mov       %rcx,0x18(%rsp)
063b8d97 mov       (%rsp),%rax
063b8d9b add       $0x20,%rsp
063b8d9f ret

uefi::table::boot::BootServices::stall:
063b8da0 sub       $0xB8,%rsp
063b8da7 mov       %rdx,0x40(%rsp)
063b8dac mov       %rcx,%rax
063b8daf mov       0x40(%rsp),%rcx
063b8db4 mov       %rax,0x98(%rsp)
063b8dbc mov       %rcx,0xA0(%rsp)
063b8dc4 callq     *0xF8(%rax)
063b8dca mov       %rax,0x58(%rsp)
063b8dcf lea       0x58(%rsp),%rax
063b8dd4 mov       %rax,0x48(%rsp)
063b8dd9 lea       0x63C`E510,%rax
063b8de0 mov       %rax,0x50(%rsp)
063b8de5 mov       0x48(%rsp),%rcx
063b8dea mov       %rcx,0x28(%rsp)
063b8def mov       %rcx,0xA8(%rsp)
063b8df7 mov       0x50(%rsp),%rdx
063b8dfc mov       %rdx,0x30(%rsp)
063b8e01 mov       %rdx,0xB0(%rsp)
063b8e09 call      0x0000`0000`063B`8950
063b8e0e mov       %al,0x3F(%rsp)
063b8e12 mov       0x3F(%rsp),%al
063b8e16 xor       $0xFF,%al
063b8e18 test      $1,%al
063b8e1a jne       0x0000`0000`063B`8E24
063b8e1c add       $0xB8,%rsp
063b8e23 ret
063b8e24 mov       0x30(%rsp),%r8
063b8e29 mov       0x28(%rsp),%rdx
063b8e2e movb      $0,0x67(%rsp)
063b8e33 movq      $0,0x68(%rsp)
063b8e3c lea       0x63C`E578,%rcx
063b8e43 mov       %rsp,%rax
063b8e46 mov       %rcx,0x20(%rax)
063b8e4a xor       %eax,%eax
063b8e4c mov       %al,%cl
063b8e4e lea       0x68(%rsp),%r9
063b8e53 call      0x0000`0000`063B`E380
063b8e58 ud2

enum$<core::result::Result<uefi::data_types::Event,uefi::result::error::Error<tuple$<> > > >::map<uefi::data_types::Event,uefi::result::error::Error<tuple$<> >,tuple$<>,uefi_services::init::closure_env$0>:
063b8e60 sub       $0x68,%rsp
063b8e64 mov       %rcx,0x28(%rsp)
063b8e69 movb      $0,0x4F(%rsp)
063b8e6e movb      $1,0x4F(%rsp)
063b8e73 mov       (%rcx),%rax
063b8e76 test      %rax,%rax
063b8e79 je        0x0000`0000`063B`8E81
063b8e7b jmp       0x0000`0000`063B`8E7D
063b8e7d jmp       0x0000`0000`063B`8EA5
063b8e7f ud2
063b8e81 mov       0x28(%rsp),%rax
063b8e86 mov       8(%rax),%rax
063b8e8a mov       %rax,0x60(%rsp)
063b8e8f movb      $0,0x4F(%rsp)
063b8e94 mov       %rax,0x40(%rsp)
063b8e99 mov       0x40(%rsp),%rcx
063b8e9e call      0x0000`0000`063A`BF60
063b8ea3 jmp       0x0000`0000`063B`8ECA
063b8ea5 mov       0x28(%rsp),%rax
063b8eaa mov       8(%rax),%rax
063b8eae mov       %rax,0x58(%rsp)
063b8eb3 mov       %rax,0x38(%rsp)
063b8eb8 movq      $1,0x30(%rsp)
063b8ec1 testb     $1,0x4F(%rsp)
063b8ec6 jne       0x0000`0000`063B`8EE4
063b8ec8 jmp       0x0000`0000`063B`8ED5
063b8eca movq      $0,0x30(%rsp)
063b8ed3 jmp       0x0000`0000`063B`8EC1
063b8ed5 mov       0x30(%rsp),%rax
063b8eda mov       0x38(%rsp),%rdx
063b8edf add       $0x68,%rsp
063b8ee3 ret
063b8ee4 jmp       0x0000`0000`063B`8ED5

core::result::Result::unwrap<tuple$<>,log::SetLoggerError>:
063b8ef0 sub       $0x48,%rsp
063b8ef4 mov       %rdx,0x28(%rsp)
063b8ef9 and       $1,%cl
063b8efc mov       %cl,0x37(%rsp)
063b8f00 movzbl    0x37(%rsp),%eax
063b8f05 test      $1,%al
063b8f07 je        0x0000`0000`063B`8F0F
063b8f09 jmp       0x0000`0000`063B`8F0B
063b8f0b jmp       0x0000`0000`063B`8F14
063b8f0d ud2
063b8f0f add       $0x48,%rsp
063b8f13 ret
063b8f14 mov       0x28(%rsp),%rcx
063b8f19 mov       %rsp,%rax
063b8f1c mov       %rcx,0x20(%rax)
063b8f20 lea       0x63C`E590,%rcx
063b8f27 lea       0x63C`E5C0,%r9
063b8f2e mov       $0x2B,%edx
063b8f33 lea       0x38(%rsp),%r8
063b8f38 call      0x0000`0000`063B`CD40
063b8f3d ud2

log::set_max_level:
063b8f40 sub       $0x38,%rsp
063b8f44 mov       %rcx,%rdx
063b8f47 mov       %rdx,0x30(%rsp)
063b8f4c movb      $4,0x2F(%rsp)
063b8f51 mov       0x2F(%rsp),%r8b
063b8f56 mov       0x63D`3010,%rcx
063b8f5d call      0x0000`0000`063B`92A0
063b8f62 add       $0x38,%rsp
063b8f66 ret

log::impl$4::le:
063b8f70 sub       $0x10,%rsp
063b8f74 mov       %rcx,(%rsp)
063b8f78 mov       %rdx,8(%rsp)
063b8f7d mov       (%rcx),%rax
063b8f80 mov       (%rdx),%rcx
063b8f83 cmp       %rcx,%rax
063b8f86 setbe     %al
063b8f89 and       $1,%al
063b8f8b movzbl    %al,%eax
063b8f8e add       $0x10,%rsp
063b8f92 ret

core::ptr::const_ptr::impl$0::is_null<core::fmt::rt::v1::Argument>:
063b8fa0 sub       $0x38,%rsp
063b8fa4 mov       %rcx,0x30(%rsp)
063b8fa9 mov       %rcx,0x28(%rsp)
063b8fae mov       0x28(%rsp),%rcx
063b8fb3 xor       %eax,%eax
063b8fb5 mov       %eax,%edx
063b8fb7 call      0x0000`0000`063C`4900
063b8fbc mov       %al,0x27(%rsp)
063b8fc0 mov       0x27(%rsp),%al
063b8fc4 and       $1,%al
063b8fc6 movzbl    %al,%eax
063b8fc9 add       $0x38,%rsp
063b8fcd ret

core::ptr::mut_ptr::impl$0::is_null<core::fmt::rt::v1::Argument>:
063b8fd0 sub       $0x38,%rsp
063b8fd4 mov       %rcx,0x30(%rsp)
063b8fd9 mov       %rcx,0x28(%rsp)
063b8fde mov       0x28(%rsp),%rcx
063b8fe3 xor       %eax,%eax
063b8fe5 mov       %eax,%edx
063b8fe7 call      0x0000`0000`063B`FE00
063b8fec mov       %al,0x27(%rsp)
063b8ff0 mov       0x27(%rsp),%al
063b8ff4 and       $1,%al
063b8ff6 movzbl    %al,%eax
063b8ff9 add       $0x38,%rsp
063b8ffd ret

core::any::impl$0::type_id<core::panic::panic_info::impl$0::internal_constructor::NoPayload>:
063b9000 sub       $0x38,%rsp
063b9004 mov       %rcx,0x30(%rsp)
063b9009 call      0x0000`0000`063B`3CF0
063b900e mov       %rax,0x28(%rsp)
063b9013 mov       0x28(%rsp),%rax
063b9018 add       $0x38,%rsp
063b901c ret

core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> >::new<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> >:
063b9020 sub       $0x28,%rsp
063b9024 mov       %rcx,0x10(%rsp)
063b9029 mov       %rdx,0x18(%rsp)
063b902e mov       %rcx,(%rsp)
063b9032 mov       %rdx,8(%rsp)
063b9037 mov       (%rsp),%rax
063b903b mov       8(%rsp),%rdx
063b9040 add       $0x28,%rsp
063b9044 ret

core::iter::adapters::map::map_fold<ref$<u8>,usize,usize,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0>,core::iter::traits::accum::impl$48::sum::closure_env$0<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> > > >:
063b9050 ret

core::iter::adapters::map::map_fold::closure$0<ref$<u8>,usize,usize,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0>,core::iter::traits::accum::impl$48::sum::closure_env$0<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> > > >:
063b9060 sub       $0x78,%rsp
063b9064 mov       %rdx,0x30(%rsp)
063b9069 mov       %rcx,0x60(%rsp)
063b906e mov       %rdx,0x68(%rsp)
063b9073 mov       %r8,0x70(%rsp)
063b9078 mov       %rcx,%rax
063b907b mov       %rax,0x38(%rsp)
063b9080 mov       %r8,0x58(%rsp)
063b9085 mov       0x58(%rsp),%rdx
063b908a call      0x0000`0000`063C`4C70
063b908f mov       %rax,0x40(%rsp)
063b9094 mov       0x38(%rsp),%rcx
063b9099 mov       0x40(%rsp),%rax
063b909e mov       0x30(%rsp),%rdx
063b90a3 mov       %rdx,0x48(%rsp)
063b90a8 mov       %rax,0x50(%rsp)
063b90ad mov       0x48(%rsp),%rdx
063b90b2 mov       0x50(%rsp),%r8
063b90b7 call      0x0000`0000`063B`B9B0
063b90bc mov       %rax,0x28(%rsp)
063b90c1 mov       0x28(%rsp),%rax
063b90c6 add       $0x78,%rsp
063b90ca ret

core::iter::adapters::map::impl$2::fold<usize,core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0>,usize,core::iter::traits::accum::impl$48::sum::closure_env$0<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> > > >:
063b90d0 sub       $0x68,%rsp
063b90d4 mov       %r8,0x30(%rsp)
063b90d9 mov       %rdx,0x38(%rsp)
063b90de mov       %rcx,0x40(%rsp)
063b90e3 mov       %rcx,0x48(%rsp)
063b90e8 mov       %rdx,0x50(%rsp)
063b90ed mov       %r8,0x58(%rsp)
063b90f2 call      0x0000`0000`063B`9050
063b90f7 mov       0x30(%rsp),%r8
063b90fc mov       0x38(%rsp),%rdx
063b9101 mov       0x40(%rsp),%rcx
063b9106 call      0x0000`0000`063C`4D90
063b910b mov       %rax,0x28(%rsp)
063b9110 mov       0x28(%rsp),%rax
063b9115 add       $0x68,%rsp
063b9119 ret

core::iter::traits::iterator::Iterator::sum<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> >,usize>:
063b9120 sub       $0x38,%rsp
063b9124 mov       %rcx,0x28(%rsp)
063b9129 mov       %rdx,0x30(%rsp)
063b912e call      0x0000`0000`063B`B980
063b9133 mov       %rax,0x20(%rsp)
063b9138 mov       0x20(%rsp),%rax
063b913d add       $0x38,%rsp
063b9141 ret

core::panic::panic_info::PanicInfo::internal_constructor:
063b9150 sub       $0x18,%rsp
063b9154 mov       %rcx,%rax
063b9157 mov       %rdx,(%rsp)
063b915b mov       %r8,8(%rsp)
063b9160 mov       %r9b,%r10b
063b9163 and       $1,%r10b
063b9167 mov       %r10b,0x17(%rsp)
063b916c lea       0x63C`E5E0,%r10
063b9173 mov       %r10,(%rcx)
063b9176 lea       0x63C`E5E0,%r10
063b917d mov       %r10,8(%rcx)
063b9181 mov       %rdx,0x10(%rcx)
063b9185 mov       %r8,0x18(%rcx)
063b9189 and       $1,%r9b
063b918d mov       %r9b,0x20(%rcx)
063b9191 add       $0x18,%rsp
063b9195 ret

core::panic::panic_info::PanicInfo::message:
063b91a0 push      %rax
063b91a1 mov       %rcx,(%rsp)
063b91a5 mov       0x10(%rcx),%rax
063b91a9 pop       %rcx
063b91aa ret

core::panic::panic_info::PanicInfo::location:
063b91b0 sub       $0x10,%rsp
063b91b4 mov       %rcx,8(%rsp)
063b91b9 mov       0x18(%rcx),%rax
063b91bd mov       %rax,(%rsp)
063b91c1 mov       (%rsp),%rax
063b91c5 add       $0x10,%rsp
063b91c9 ret

core::slice::impl$0::as_ptr<core::fmt::rt::v1::Argument>:
063b91d0 sub       $0x10,%rsp
063b91d4 mov       %rcx,%rax
063b91d7 mov       %rax,(%rsp)
063b91db mov       %rdx,8(%rsp)
063b91e0 add       $0x10,%rsp
063b91e4 ret

core::slice::impl$0::iter<core::fmt::rt::v1::Argument>:
063b91f0 sub       $0x48,%rsp
063b91f4 mov       %rcx,0x38(%rsp)
063b91f9 mov       %rdx,0x40(%rsp)
063b91fe call      0x0000`0000`063C`5160
063b9203 mov       %rax,0x28(%rsp)
063b9208 mov       %rdx,0x30(%rsp)
063b920d mov       0x30(%rsp),%rdx
063b9212 mov       0x28(%rsp),%rax
063b9217 add       $0x48,%rsp
063b921b ret

core::iter::range::impl$37::forward_unchecked:
063b9220 sub       $0x30,%rsp
063b9224 mov       %rcx,8(%rsp)
063b9229 mov       %rdx,0x10(%rsp)
063b922e mov       %rcx,0x18(%rsp)
063b9233 mov       %rdx,0x20(%rsp)
063b9238 add       %rdx,%rcx
063b923b mov       %rcx,0x28(%rsp)
063b9240 mov       0x28(%rsp),%rax
063b9245 mov       %rax,(%rsp)
063b9249 mov       (%rsp),%rax
063b924d add       $0x30,%rsp
063b9251 ret

core::sync::atomic::AtomicUsize::load:
063b9260 sub       $0x58,%rsp
063b9264 mov       %dl,0x37(%rsp)
063b9268 mov       %rcx,0x40(%rsp)
063b926d mov       %dl,0x4F(%rsp)
063b9271 mov       %rcx,0x38(%rsp)
063b9276 mov       %rcx,0x50(%rsp)
063b927b mov       0x37(%rsp),%dl
063b927f mov       0x38(%rsp),%rcx
063b9284 call      0x0000`0000`063B`11C0
063b9289 mov       %rax,0x28(%rsp)
063b928e mov       0x28(%rsp),%rax
063b9293 add       $0x58,%rsp
063b9297 ret

core::sync::atomic::AtomicUsize::store:
063b92a0 sub       $0x58,%rsp
063b92a4 mov       %r8b,0x27(%rsp)
063b92a9 mov       %rdx,0x28(%rsp)
063b92ae mov       %rcx,0x38(%rsp)
063b92b3 mov       %rdx,0x40(%rsp)
063b92b8 mov       %r8b,0x4F(%rsp)
063b92bd mov       %rcx,0x30(%rsp)
063b92c2 mov       %rcx,0x50(%rsp)
063b92c7 mov       0x27(%rsp),%r8b
063b92cc mov       0x28(%rsp),%rdx
063b92d1 mov       0x30(%rsp),%rcx
063b92d6 call      0x0000`0000`063C`42A0
063b92db add       $0x58,%rsp
063b92df ret

core::hint::unreachable_unchecked:
063b92e0 ud2

core::mem::size_of_val<slice$<u8> >:
063b92f0 sub       $0x20,%rsp
063b92f4 mov       %rcx,8(%rsp)
063b92f9 mov       %rdx,0x10(%rsp)
063b92fe shl       $0,%rdx
063b9302 mov       %rdx,0x18(%rsp)
063b9307 mov       0x18(%rsp),%rax
063b930c mov       %rax,(%rsp)
063b9310 mov       (%rsp),%rax
063b9314 add       $0x20,%rsp
063b9318 ret

core::mem::swap<usize>:
063b9320 sub       $0x48,%rsp
063b9324 mov       %rdx,0x28(%rsp)
063b9329 mov       %rcx,0x30(%rsp)
063b932e mov       %rcx,0x38(%rsp)
063b9333 mov       %rdx,0x40(%rsp)
063b9338 jmp       0x0000`0000`063B`933A
063b933a mov       $8,%eax
063b933f cmp       $0,%rax
063b9343 sete      %al
063b9346 test      $1,%al
063b9348 jne       0x0000`0000`063B`935B
063b934a mov       $8,%eax
063b934f shr       $3,%rax
063b9353 cmp       $4,%rax
063b9357 ja        0x0000`0000`063B`9386
063b9359 jmp       0x0000`0000`063B`9375
063b935b lea       0x63C`E690,%rcx
063b9362 lea       0x63C`E678,%r8
063b9369 mov       $0x19,%edx
063b936e call      0x0000`0000`063B`2030
063b9373 ud2
063b9375 mov       0x28(%rsp),%rdx
063b937a mov       0x30(%rsp),%rcx
063b937f call      0x0000`0000`063B`9460
063b9384 jmp       0x0000`0000`063B`939B
063b9386 mov       0x28(%rsp),%rdx
063b938b mov       0x30(%rsp),%rcx
063b9390 mov       $1,%r8d
063b9396 call      0x0000`0000`063C`8CE0
063b939b add       $0x48,%rsp
063b939f ret

core::mem::swap_simple<core::mem::maybe_uninit::MaybeUninit<u8> >:
063b93a0 sub       $0x58,%rsp
063b93a4 mov       %rdx,0x28(%rsp)
063b93a9 mov       %rcx,0x30(%rsp)
063b93ae mov       %rcx,0x40(%rsp)
063b93b3 mov       %rdx,0x48(%rsp)
063b93b8 call      0x0000`0000`063C`94A0
063b93bd mov       %al,0x3F(%rsp)
063b93c1 mov       %al,0x56(%rsp)
063b93c5 mov       0x28(%rsp),%rcx
063b93ca call      0x0000`0000`063C`94A0
063b93cf mov       %al,0x27(%rsp)
063b93d3 mov       %al,0x57(%rsp)
063b93d7 mov       0x27(%rsp),%dl
063b93db mov       0x30(%rsp),%rcx
063b93e0 call      0x0000`0000`063C`9580
063b93e5 mov       0x3F(%rsp),%dl
063b93e9 mov       0x28(%rsp),%rcx
063b93ee call      0x0000`0000`063C`9580
063b93f3 add       $0x58,%rsp
063b93f7 ret

core::mem::swap_simple<core::mem::maybe_uninit::MaybeUninit<usize> >:
063b9400 sub       $0x68,%rsp
063b9404 mov       %rdx,0x30(%rsp)
063b9409 mov       %rcx,0x38(%rsp)
063b940e mov       %rcx,0x48(%rsp)
063b9413 mov       %rdx,0x50(%rsp)
063b9418 call      0x0000`0000`063C`93B0
063b941d mov       %rax,0x40(%rsp)
063b9422 mov       %rax,0x58(%rsp)
063b9427 mov       0x30(%rsp),%rcx
063b942c call      0x0000`0000`063C`93B0
063b9431 mov       %rax,0x28(%rsp)
063b9436 mov       %rax,0x60(%rsp)
063b943b mov       0x28(%rsp),%rdx
063b9440 mov       0x38(%rsp),%rcx
063b9445 call      0x0000`0000`063C`9560
063b944a mov       0x40(%rsp),%rdx
063b944f mov       0x30(%rsp),%rcx
063b9454 call      0x0000`0000`063C`9560
063b9459 add       $0x68,%rsp
063b945d ret

core::mem::swap_simple<usize>:
063b9460 sub       $0x68,%rsp
063b9464 mov       %rdx,0x30(%rsp)
063b9469 mov       %rcx,0x38(%rsp)
063b946e mov       %rcx,0x48(%rsp)
063b9473 mov       %rdx,0x50(%rsp)
063b9478 call      0x0000`0000`063C`94F0
063b947d mov       %rax,0x40(%rsp)
063b9482 mov       %rax,0x58(%rsp)
063b9487 mov       0x30(%rsp),%rcx
063b948c call      0x0000`0000`063C`94F0
063b9491 mov       %rax,0x28(%rsp)
063b9496 mov       %rax,0x60(%rsp)
063b949b mov       0x28(%rsp),%rdx
063b94a0 mov       0x38(%rsp),%rcx
063b94a5 call      0x0000`0000`063C`95A0
063b94aa mov       0x40(%rsp),%rdx
063b94af mov       0x30(%rsp),%rcx
063b94b4 call      0x0000`0000`063C`95A0
063b94b9 add       $0x68,%rsp
063b94bd ret

core::mem::replace<enum$<core::fmt::rt::v1::Alignment> >:
063b94c0 sub       $0x48,%rsp
063b94c4 mov       %dl,0x27(%rsp)
063b94c8 mov       %rcx,0x28(%rsp)
063b94cd mov       %rcx,0x38(%rsp)
063b94d2 mov       %dl,0x46(%rsp)
063b94d6 call      0x0000`0000`063C`9450
063b94db mov       %al,0x37(%rsp)
063b94df mov       %al,0x47(%rsp)
063b94e3 mov       0x27(%rsp),%dl
063b94e7 mov       0x28(%rsp),%rcx
063b94ec call      0x0000`0000`063C`95C0
063b94f1 mov       0x37(%rsp),%al
063b94f5 add       $0x48,%rsp
063b94f9 ret

core::mem::replace<char>:
063b9500 sub       $0x48,%rsp
063b9504 mov       %edx,0x24(%rsp)
063b9508 mov       %rcx,0x28(%rsp)
063b950d mov       %rcx,0x38(%rsp)
063b9512 mov       %edx,0x40(%rsp)
063b9516 call      0x0000`0000`063C`9400
063b951b mov       %eax,0x34(%rsp)
063b951f mov       %eax,0x44(%rsp)
063b9523 mov       0x24(%rsp),%edx
063b9527 mov       0x28(%rsp),%rcx
063b952c call      0x0000`0000`063C`9540
063b9531 mov       0x34(%rsp),%eax
063b9535 add       $0x48,%rsp
063b9539 ret

core::mem::replace<usize>:
063b9540 sub       $0x58,%rsp
063b9544 mov       %rdx,0x28(%rsp)
063b9549 mov       %rcx,0x30(%rsp)
063b954e mov       %rcx,0x40(%rsp)
063b9553 mov       %rdx,0x48(%rsp)
063b9558 call      0x0000`0000`063C`94F0
063b955d mov       %rax,0x38(%rsp)
063b9562 mov       %rax,0x50(%rsp)
063b9567 mov       0x28(%rsp),%rdx
063b956c mov       0x30(%rsp),%rcx
063b9571 call      0x0000`0000`063C`95A0
063b9576 mov       0x38(%rsp),%rax
063b957b add       $0x58,%rsp
063b957f ret

core::clone::impls::impl$3::clone<str>:
063b9580 push      %rax
063b9581 mov       %rcx,(%rsp)
063b9585 mov       (%rcx),%rax
063b9588 mov       8(%rcx),%rdx
063b958c pop       %rcx
063b958d ret

core::char::methods::impl$0::from_u32:
063b9590 sub       $0x28,%rsp
063b9594 mov       %ecx,0x24(%rsp)
063b9598 call      0x0000`0000`063B`C910
063b959d mov       %eax,0x20(%rsp)
063b95a1 mov       0x20(%rsp),%eax
063b95a5 add       $0x28,%rsp
063b95a9 ret

core::char::methods::impl$0::escape_unicode:
063b95b0 sub       $0x58,%rsp
063b95b4 mov       %edx,0x24(%rsp)
063b95b8 mov       %rcx,0x28(%rsp)
063b95bd mov       %rcx,0x30(%rsp)
063b95c2 mov       %edx,0x40(%rsp)
063b95c6 mov       %edx,0x44(%rsp)
063b95ca or        $1,%edx
063b95cd mov       %edx,0x50(%rsp)
063b95d1 bsr       %edx,%eax
063b95d4 mov       $0x3F,%ecx
063b95d9 cmove     %ecx,%eax
063b95dc xor       $0x1F,%eax
063b95df mov       %eax,0x54(%rsp)
063b95e3 mov       0x54(%rsp),%eax
063b95e7 mov       %eax,0x3C(%rsp)
063b95eb mov       0x3C(%rsp),%ecx
063b95ef mov       $0x1F,%eax
063b95f4 sub       %ecx,%eax
063b95f6 mov       %eax,0x20(%rsp)
063b95fa setb      %al
063b95fd test      $1,%al
063b95ff jne       0x0000`0000`063B`9631
063b9601 mov       0x30(%rsp),%rax
063b9606 mov       0x28(%rsp),%rcx
063b960b mov       0x24(%rsp),%r8d
063b9610 mov       0x20(%rsp),%edx
063b9614 mov       %edx,0x48(%rsp)
063b9618 shr       $2,%edx
063b961b mov       %edx,0x4C(%rsp)
063b961f mov       %edx,%edx
063b9621 mov       %r8d,8(%rcx)
063b9625 movb      $5,0xC(%rcx)
063b9629 mov       %rdx,(%rcx)
063b962c add       $0x58,%rsp
063b9630 ret
063b9631 lea       0x63C`E6D0,%rcx
063b9638 lea       0x63C`E778,%r8
063b963f mov       $0x21,%edx
063b9644 call      0x0000`0000`063B`2030
063b9649 ud2

core::char::methods::impl$0::escape_debug_ext:
063b9650 sub       $0xB8,%rsp
063b9657 mov       %edx,0x2C(%rsp)
063b965b mov       %rcx,0x30(%rsp)
063b9660 mov       %rcx,0x38(%rsp)
063b9665 mov       %r8w,%ax
063b9669 mov       %ax,0x44(%rsp)
063b966e shr       $0x10,%r8d
063b9672 mov       %r8b,%al
063b9675 mov       %al,0x46(%rsp)
063b9679 mov       0x46(%rsp),%al
063b967d mov       %al,0x42(%rsp)
063b9681 mov       0x44(%rsp),%ax
063b9686 mov       %ax,0x40(%rsp)
063b968b mov       %edx,0xB4(%rsp)
063b9692 sub       $9,%edx
063b9695 je        0x0000`0000`063B`96E0
063b9697 jmp       0x0000`0000`063B`9699
063b9699 mov       0x2C(%rsp),%eax
063b969d sub       $0xA,%eax
063b96a0 je        0x0000`0000`063B`9704
063b96a2 jmp       0x0000`0000`063B`96A4
063b96a4 mov       0x2C(%rsp),%eax
063b96a8 sub       $0xD,%eax
063b96ab je        0x0000`0000`063B`96F2
063b96ad jmp       0x0000`0000`063B`96AF
063b96af mov       0x2C(%rsp),%eax
063b96b3 sub       $0x22,%eax
063b96b6 je        0x0000`0000`063B`9728
063b96b8 jmp       0x0000`0000`063B`96BA
063b96ba mov       0x2C(%rsp),%eax
063b96be sub       $0x27,%eax
063b96c1 je        0x0000`0000`063B`9735
063b96c3 jmp       0x0000`0000`063B`96C5
063b96c5 mov       0x2C(%rsp),%eax
063b96c9 sub       $0x5C,%eax
063b96cc je        0x0000`0000`063B`9716
063b96ce jmp       0x0000`0000`063B`96D0
063b96d0 testb     $1,0x40(%rsp)
063b96d5 jne       0x0000`0000`063B`97FC
063b96db jmp       0x0000`0000`063B`97ED
063b96e0 movl      $0x74,0x4C(%rsp)
063b96e8 movl      $2,0x48(%rsp)
063b96f0 jmp       0x0000`0000`063B`974C
063b96f2 movl      $0x72,0x4C(%rsp)
063b96fa movl      $2,0x48(%rsp)
063b9702 jmp       0x0000`0000`063B`974C
063b9704 movl      $0x6E,0x4C(%rsp)
063b970c movl      $2,0x48(%rsp)
063b9714 jmp       0x0000`0000`063B`974C
063b9716 mov       0x2C(%rsp),%eax
063b971a mov       %eax,0x4C(%rsp)
063b971e movl      $2,0x48(%rsp)
063b9726 jmp       0x0000`0000`063B`974C
063b9728 testb     $1,0x42(%rsp)
063b972d jne       0x0000`0000`063B`97D8
063b9733 jmp       0x0000`0000`063B`96D0
063b9735 testb     $1,0x41(%rsp)
063b973a je        0x0000`0000`063B`96D0
063b973c mov       0x2C(%rsp),%eax
063b9740 mov       %eax,0x4C(%rsp)
063b9744 movl      $2,0x48(%rsp)
063b974c mov       0x38(%rsp),%rax
063b9751 mov       0x30(%rsp),%rcx
063b9756 mov       0x48(%rsp),%rdx
063b975b mov       %rdx,0x98(%rsp)
063b9763 mov       0x50(%rsp),%rdx
063b9768 mov       %rdx,0xA0(%rsp)
063b9770 mov       0x58(%rsp),%rdx
063b9775 mov       %rdx,0xA8(%rsp)
063b977d mov       0x98(%rsp),%rdx
063b9785 mov       %rdx,0x80(%rsp)
063b978d mov       0xA0(%rsp),%rdx
063b9795 mov       %rdx,0x88(%rsp)
063b979d mov       0xA8(%rsp),%rdx
063b97a5 mov       %rdx,0x90(%rsp)
063b97ad mov       0x80(%rsp),%rdx
063b97b5 mov       %rdx,(%rcx)
063b97b8 mov       0x88(%rsp),%rdx
063b97c0 mov       %rdx,8(%rcx)
063b97c4 mov       0x90(%rsp),%rdx
063b97cc mov       %rdx,0x10(%rcx)
063b97d0 add       $0xB8,%rsp
063b97d7 ret
063b97d8 mov       0x2C(%rsp),%eax
063b97dc mov       %eax,0x4C(%rsp)
063b97e0 movl      $2,0x48(%rsp)
063b97e8 jmp       0x0000`0000`063B`974C
063b97ed mov       0x2C(%rsp),%ecx
063b97f1 call      0x0000`0000`063C`5CD0
063b97f6 mov       %al,0x2B(%rsp)
063b97fa jmp       0x0000`0000`063B`9842
063b97fc mov       0x2C(%rsp),%ecx
063b9800 call      0x0000`0000`063B`9910
063b9805 mov       %al,0x2A(%rsp)
063b9809 mov       0x2A(%rsp),%al
063b980d test      $1,%al
063b980f jne       0x0000`0000`063B`9813
063b9811 jmp       0x0000`0000`063B`97ED
063b9813 mov       0x2C(%rsp),%edx
063b9817 lea       0x60(%rsp),%rcx
063b981c call      0x0000`0000`063B`95B0
063b9821 mov       0x60(%rsp),%rax
063b9826 mov       %rax,0x50(%rsp)
063b982b mov       0x68(%rsp),%rax
063b9830 mov       %rax,0x58(%rsp)
063b9835 movl      $3,0x48(%rsp)
063b983d jmp       0x0000`0000`063B`974C
063b9842 mov       0x2B(%rsp),%al
063b9846 test      $1,%al
063b9848 jne       0x0000`0000`063B`985C
063b984a jmp       0x0000`0000`063B`984C
063b984c mov       0x2C(%rsp),%edx
063b9850 lea       0x70(%rsp),%rcx
063b9855 call      0x0000`0000`063B`95B0
063b985a jmp       0x0000`0000`063B`9871
063b985c mov       0x2C(%rsp),%eax
063b9860 mov       %eax,0x4C(%rsp)
063b9864 movl      $1,0x48(%rsp)
063b986c jmp       0x0000`0000`063B`974C
063b9871 mov       0x70(%rsp),%rax
063b9876 mov       %rax,0x50(%rsp)
063b987b mov       0x78(%rsp),%rax
063b9880 mov       %rax,0x58(%rsp)
063b9885 movl      $3,0x48(%rsp)
063b988d jmp       0x0000`0000`063B`974C

core::char::methods::impl$0::len_utf8:
063b98a0 sub       $0x38,%rsp
063b98a4 mov       %ecx,0x34(%rsp)
063b98a8 call      0x0000`0000`063B`9930
063b98ad mov       %rax,0x28(%rsp)
063b98b2 mov       0x28(%rsp),%rax
063b98b7 add       $0x38,%rsp
063b98bb ret

core::char::methods::impl$0::encode_utf8:
063b98c0 sub       $0x58,%rsp
063b98c4 mov       %ecx,0x44(%rsp)
063b98c8 mov       %rdx,0x48(%rsp)
063b98cd mov       %r8,0x50(%rsp)
063b98d2 call      0x0000`0000`063B`99A0
063b98d7 mov       %rax,0x30(%rsp)
063b98dc mov       %rdx,0x38(%rsp)
063b98e1 mov       0x38(%rsp),%rdx
063b98e6 mov       0x30(%rsp),%rcx
063b98eb call      0x0000`0000`063B`63B0
063b98f0 mov       %rax,0x20(%rsp)
063b98f5 mov       %rdx,0x28(%rsp)
063b98fa mov       0x28(%rsp),%rdx
063b98ff mov       0x20(%rsp),%rax
063b9904 add       $0x58,%rsp
063b9908 ret

core::char::methods::impl$0::is_grapheme_extended:
063b9910 sub       $0x28,%rsp
063b9914 mov       %ecx,0x24(%rsp)
063b9918 call      0x0000`0000`063C`39A0
063b991d mov       %al,0x23(%rsp)
063b9921 mov       0x23(%rsp),%al
063b9925 and       $1,%al
063b9927 movzbl    %al,%eax
063b992a add       $0x28,%rsp
063b992e ret

core::char::methods::len_utf8:
063b9930 sub       $0x18,%rsp
063b9934 mov       %ecx,4(%rsp)
063b9938 mov       %ecx,0x14(%rsp)
063b993c cmp       $0x80,%ecx
063b9942 jb        0x0000`0000`063B`9951
063b9944 mov       4(%rsp),%eax
063b9948 cmp       $0x800,%eax
063b994d jb        0x0000`0000`063B`9971
063b994f jmp       0x0000`0000`063B`9964
063b9951 movq      $1,8(%rsp)
063b995a mov       8(%rsp),%rax
063b995f add       $0x18,%rsp
063b9963 ret
063b9964 mov       4(%rsp),%eax
063b9968 cmp       $0x1`0000,%eax
063b996d jb        0x0000`0000`063B`9987
063b996f jmp       0x0000`0000`063B`997C
063b9971 movq      $2,8(%rsp)
063b997a jmp       0x0000`0000`063B`995A
063b997c movq      $4,8(%rsp)
063b9985 jmp       0x0000`0000`063B`995A
063b9987 movq      $3,8(%rsp)
063b9990 jmp       0x0000`0000`063B`995A

core::char::methods::encode_utf8_raw:
063b99a0 sub       $0x1F8,%rsp
063b99a7 mov       %r8,0xF0(%rsp)
063b99af mov       %rdx,0xF8(%rsp)
063b99b7 mov       %ecx,0x104(%rsp)
063b99be mov       %rdx,0x198(%rsp)
063b99c6 mov       %r8,0x1A0(%rsp)
063b99ce mov       0x104(%rsp),%ecx
063b99d5 call      0x0000`0000`063B`9930
063b99da mov       %rax,0x108(%rsp)
063b99e2 mov       0xF0(%rsp),%rdx
063b99ea mov       0xF8(%rsp),%rcx
063b99f2 mov       0x108(%rsp),%rax
063b99fa mov       %rax,0xD8(%rsp)
063b9a02 lea       0x63C`E790,%r8
063b9a09 call      0x0000`0000`063B`A2B0
063b9a0e mov       %rax,0xE0(%rsp)
063b9a16 mov       %rdx,0xE8(%rsp)
063b9a1e mov       0xE8(%rsp),%rax
063b9a26 mov       0xE0(%rsp),%rcx
063b9a2e mov       0xD8(%rsp),%rdx
063b9a36 mov       %rdx,0x110(%rsp)
063b9a3e mov       %rcx,0x118(%rsp)
063b9a46 mov       %rax,0x120(%rsp)
063b9a4e mov       0x110(%rsp),%rax
063b9a56 add       $0xFFFF`FFFF`FFFF`FFFF,%rax
063b9a5a mov       %rax,0xD0(%rsp)
063b9a62 sub       $3,%rax
063b9a66 ja        0x0000`0000`063B`9A80
063b9a68 mov       0xD0(%rsp),%rax
063b9a70 lea       0x63B`9E34,%rcx
063b9a77 movslq    (%rcx,%rax,4),%rax
063b9a7b add       %rcx,%rax
063b9a7e jmp       *%rax
063b9a80 lea       0x108(%rsp),%rcx
063b9a88 call      0x0000`0000`063B`6510
063b9a8d mov       %rax,0xC0(%rsp)
063b9a95 mov       %rdx,0xC8(%rsp)
063b9a9d jmp       0x0000`0000`063B`9D5E
063b9aa2 cmpq      $1,0x120(%rsp)
063b9aab jae       0x0000`0000`063B`9D28
063b9ab1 jmp       0x0000`0000`063B`9A80
063b9ab3 cmpq      $2,0x120(%rsp)
063b9abc jae       0x0000`0000`063B`9CC2
063b9ac2 jmp       0x0000`0000`063B`9A80
063b9ac4 cmpq      $3,0x120(%rsp)
063b9acd jae       0x0000`0000`063B`9C24
063b9ad3 jmp       0x0000`0000`063B`9A80
063b9ad5 cmpq      $4,0x120(%rsp)
063b9ade jb        0x0000`0000`063B`9A80
063b9ae0 mov       0x118(%rsp),%rax
063b9ae8 mov       %rax,0x98(%rsp)
063b9af0 mov       %rax,0x1A8(%rsp)
063b9af8 mov       0x118(%rsp),%rax
063b9b00 add       $1,%rax
063b9b04 mov       %rax,0xA0(%rsp)
063b9b0c mov       %rax,0x1B0(%rsp)
063b9b14 mov       0x118(%rsp),%rax
063b9b1c add       $2,%rax
063b9b20 mov       %rax,0xA8(%rsp)
063b9b28 mov       %rax,0x1B8(%rsp)
063b9b30 mov       0x118(%rsp),%rax
063b9b38 add       $3,%rax
063b9b3c mov       %rax,0xB0(%rsp)
063b9b44 mov       %rax,0x1C0(%rsp)
063b9b4c mov       0x104(%rsp),%eax
063b9b53 shr       $0x12,%eax
063b9b56 mov       %eax,0xBC(%rsp)
063b9b5d mov       0x98(%rsp),%rax
063b9b65 mov       0xBC(%rsp),%ecx
063b9b6c and       $7,%ecx
063b9b6f or        $0xF0,%cl
063b9b72 mov       %cl,(%rax)
063b9b74 mov       0x104(%rsp),%eax
063b9b7b shr       $0xC,%eax
063b9b7e mov       %eax,0x94(%rsp)
063b9b85 mov       0xA0(%rsp),%rax
063b9b8d mov       0x94(%rsp),%ecx
063b9b94 and       $0x3F,%ecx
063b9b97 or        $0x80,%cl
063b9b9a mov       %cl,(%rax)
063b9b9c mov       0x104(%rsp),%eax
063b9ba3 shr       $6,%eax
063b9ba6 mov       %eax,0x90(%rsp)
063b9bad mov       0xB0(%rsp),%rax
063b9bb5 mov       0xA8(%rsp),%rcx
063b9bbd mov       0x90(%rsp),%edx
063b9bc4 and       $0x3F,%edx
063b9bc7 or        $0x80,%dl
063b9bca mov       %dl,(%rcx)
063b9bcc mov       0x104(%rsp),%ecx
063b9bd3 and       $0x3F,%ecx
063b9bd6 or        $0x80,%cl
063b9bd9 mov       %cl,(%rax)
063b9bdb mov       0xF0(%rsp),%rdx
063b9be3 mov       0xF8(%rsp),%rcx
063b9beb mov       0x108(%rsp),%rax
063b9bf3 mov       %rax,0x190(%rsp)
063b9bfb mov       0x190(%rsp),%r8
063b9c03 lea       0x63C`E7A8,%r9
063b9c0a call      0x0000`0000`063B`A260
063b9c0f mov       %rax,0x80(%rsp)
063b9c17 mov       %rdx,0x88(%rsp)
063b9c1f jmp       0x0000`0000`063B`9D46
063b9c24 mov       0x118(%rsp),%rax
063b9c2c mov       %rax,0x60(%rsp)
063b9c31 mov       %rax,0x1C8(%rsp)
063b9c39 mov       0x118(%rsp),%rax
063b9c41 add       $1,%rax
063b9c45 mov       %rax,0x68(%rsp)
063b9c4a mov       %rax,0x1D0(%rsp)
063b9c52 mov       0x118(%rsp),%rax
063b9c5a add       $2,%rax
063b9c5e mov       %rax,0x70(%rsp)
063b9c63 mov       %rax,0x1D8(%rsp)
063b9c6b mov       0x104(%rsp),%eax
063b9c72 shr       $0xC,%eax
063b9c75 mov       %eax,0x7C(%rsp)
063b9c79 mov       0x60(%rsp),%rax
063b9c7e mov       0x7C(%rsp),%ecx
063b9c82 and       $0xF,%ecx
063b9c85 or        $0xE0,%cl
063b9c88 mov       %cl,(%rax)
063b9c8a mov       0x104(%rsp),%eax
063b9c91 shr       $6,%eax
063b9c94 mov       %eax,0x5C(%rsp)
063b9c98 mov       0x70(%rsp),%rax
063b9c9d mov       0x68(%rsp),%rcx
063b9ca2 mov       0x5C(%rsp),%edx
063b9ca6 and       $0x3F,%edx
063b9ca9 or        $0x80,%dl
063b9cac mov       %dl,(%rcx)
063b9cae mov       0x104(%rsp),%ecx
063b9cb5 and       $0x3F,%ecx
063b9cb8 or        $0x80,%cl
063b9cbb mov       %cl,(%rax)
063b9cbd jmp       0x0000`0000`063B`9BDB
063b9cc2 mov       0x118(%rsp),%rax
063b9cca mov       %rax,0x48(%rsp)
063b9ccf mov       %rax,0x1E0(%rsp)
063b9cd7 mov       0x118(%rsp),%rax
063b9cdf add       $1,%rax
063b9ce3 mov       %rax,0x50(%rsp)
063b9ce8 mov       %rax,0x1E8(%rsp)
063b9cf0 mov       0x104(%rsp),%eax
063b9cf7 shr       $6,%eax
063b9cfa mov       %eax,0x58(%rsp)
063b9cfe mov       0x50(%rsp),%rax
063b9d03 mov       0x48(%rsp),%rcx
063b9d08 mov       0x58(%rsp),%edx
063b9d0c and       $0x1F,%edx
063b9d0f or        $0xC0,%dl
063b9d12 mov       %dl,(%rcx)
063b9d14 mov       0x104(%rsp),%ecx
063b9d1b and       $0x3F,%ecx
063b9d1e or        $0x80,%cl
063b9d21 mov       %cl,(%rax)
063b9d23 jmp       0x0000`0000`063B`9BDB
063b9d28 mov       0x118(%rsp),%rax
063b9d30 mov       %rax,0x1F0(%rsp)
063b9d38 mov       0x104(%rsp),%ecx
063b9d3f mov       %cl,(%rax)
063b9d41 jmp       0x0000`0000`063B`9BDB
063b9d46 mov       0x88(%rsp),%rdx
063b9d4e mov       0x80(%rsp),%rax
063b9d56 add       $0x1F8,%rsp
063b9d5d ret
063b9d5e lea       0x104(%rsp),%rcx
063b9d66 call      0x0000`0000`063B`66C0
063b9d6b mov       %rax,0x38(%rsp)
063b9d70 mov       %rdx,0x40(%rsp)
063b9d75 mov       0xF0(%rsp),%rax
063b9d7d mov       %rax,0x188(%rsp)
063b9d85 lea       0x188(%rsp),%rcx
063b9d8d call      0x0000`0000`063B`6510
063b9d92 mov       %rax,0x28(%rsp)
063b9d97 mov       %rdx,0x30(%rsp)
063b9d9c mov       0x30(%rsp),%rax
063b9da1 mov       0x28(%rsp),%rcx
063b9da6 mov       0x40(%rsp),%rdx
063b9dab mov       0x38(%rsp),%r8
063b9db0 mov       0xC8(%rsp),%r9
063b9db8 mov       0xC0(%rsp),%r10
063b9dc0 mov       %r10,0x158(%rsp)
063b9dc8 mov       %r9,0x160(%rsp)
063b9dd0 mov       %r8,0x168(%rsp)
063b9dd8 mov       %rdx,0x170(%rsp)
063b9de0 mov       %rcx,0x178(%rsp)
063b9de8 mov       %rax,0x180(%rsp)
063b9df0 lea       0x158(%rsp),%r9
063b9df8 lea       0x128(%rsp),%rcx
063b9e00 lea       0x63C`E800,%rdx
063b9e07 mov       $3,%r8d
063b9e0d movq      $3,0x20(%rsp)
063b9e16 call      0x0000`0000`063B`4170
063b9e1b lea       0x63C`E830,%rdx
063b9e22 lea       0x128(%rsp),%rcx
063b9e2a call      0x0000`0000`063B`2140
063b9e2f ud2

core::iter::adapters::rev::Rev<core::slice::iter::IterMut<core::mem::maybe_uninit::MaybeUninit<u8> > >::new<core::slice::iter::IterMut<core::mem::maybe_uninit::MaybeUninit<u8> > >:
063b9e50 sub       $0x20,%rsp
063b9e54 mov       %rcx,0x10(%rsp)
063b9e59 mov       %rdx,0x18(%rsp)
063b9e5e mov       %rcx,(%rsp)
063b9e62 mov       %rdx,8(%rsp)
063b9e67 mov       (%rsp),%rax
063b9e6b mov       8(%rsp),%rdx
063b9e70 add       $0x20,%rsp
063b9e74 ret

core::iter::adapters::rev::impl$1::next<core::slice::iter::IterMut<core::mem::maybe_uninit::MaybeUninit<u8> > >:
063b9e80 sub       $0x38,%rsp
063b9e84 mov       %rcx,0x30(%rsp)
063b9e89 call      0x0000`0000`063C`7CC0
063b9e8e mov       %rax,0x28(%rsp)
063b9e93 mov       0x28(%rsp),%rax
063b9e98 add       $0x38,%rsp
063b9e9c ret

core::iter::traits::collect::impl$0::into_iter<core::iter::adapters::rev::Rev<core::slice::iter::IterMut<core::mem::maybe_uninit::MaybeUninit<u8> > > >:
063b9ea0 sub       $0x10,%rsp
063b9ea4 mov       %rcx,%rax
063b9ea7 mov       %rax,(%rsp)
063b9eab mov       %rdx,8(%rsp)
063b9eb0 add       $0x10,%rsp
063b9eb4 ret

core::iter::traits::iterator::Iterator::advance_by<core::str::iter::CharIndices>:
063b9ec0 sub       $0xF8,%rsp
063b9ec7 mov       %rcx,0x40(%rsp)
063b9ecc mov       %rcx,0xC8(%rsp)
063b9ed4 mov       %rdx,0xD0(%rsp)
063b9edc movq      $0,0x68(%rsp)
063b9ee5 mov       %rdx,0x70(%rsp)
063b9eea mov       0x68(%rsp),%rcx
063b9eef mov       0x70(%rsp),%rdx
063b9ef4 call      0x0000`0000`063B`15F0
063b9ef9 mov       %rax,0x48(%rsp)
063b9efe mov       %rdx,0x50(%rsp)
063b9f03 mov       0x50(%rsp),%rax
063b9f08 mov       0x48(%rsp),%rcx
063b9f0d mov       %rcx,0x78(%rsp)
063b9f12 mov       %rax,0x80(%rsp)
063b9f1a lea       0x78(%rsp),%rcx
063b9f1f call      0x0000`0000`063B`15C0
063b9f24 mov       %rdx,0x90(%rsp)
063b9f2c mov       %rax,0x88(%rsp)
063b9f34 mov       0x88(%rsp),%rax
063b9f3c test      %rax,%rax
063b9f3f je        0x0000`0000`063B`9F47
063b9f41 jmp       0x0000`0000`063B`9F43
063b9f43 jmp       0x0000`0000`063B`9F55
063b9f45 ud2
063b9f47 movq      $0,0x58(%rsp)
063b9f50 jmp       0x0000`0000`063B`A00A
063b9f55 mov       0x40(%rsp),%rcx
063b9f5a mov       0x90(%rsp),%rax
063b9f62 mov       %rax,0x28(%rsp)
063b9f67 mov       %rax,0xD8(%rsp)
063b9f6f call      0x0000`0000`063B`B670
063b9f74 mov       %rax,0x30(%rsp)
063b9f79 mov       %edx,0x3C(%rsp)
063b9f7d mov       0x28(%rsp),%r9
063b9f82 mov       0x3C(%rsp),%r8d
063b9f87 mov       0x30(%rsp),%rdx
063b9f8c lea       0xB0(%rsp),%rcx
063b9f94 call      0x0000`0000`063B`1CB0
063b9f99 lea       0x98(%rsp),%rcx
063b9fa1 lea       0xB0(%rsp),%rdx
063b9fa9 call      0x0000`0000`063B`CE60
063b9fae mov       0x98(%rsp),%rax
063b9fb6 test      %rax,%rax
063b9fb9 je        0x0000`0000`063B`9FC1
063b9fbb jmp       0x0000`0000`063B`9FBD
063b9fbd jmp       0x0000`0000`063B`9FE4
063b9fbf ud2
063b9fc1 mov       0xA0(%rsp),%rcx
063b9fc9 mov       0xA8(%rsp),%eax
063b9fd0 mov       %rcx,0xE8(%rsp)
063b9fd8 mov       %eax,0xF0(%rsp)
063b9fdf jmp       0x0000`0000`063B`9F1A
063b9fe4 mov       0xA0(%rsp),%rcx
063b9fec mov       %rcx,0xE0(%rsp)
063b9ff4 lea       0x63C`E8D0,%rdx
063b9ffb call      0x0000`0000`063B`CF20
063ba000 mov       %rdx,0x60(%rsp)
063ba005 mov       %rax,0x58(%rsp)
063ba00a mov       0x58(%rsp),%rax
063ba00f mov       0x60(%rsp),%rdx
063ba014 add       $0xF8,%rsp
063ba01b ret

core::iter::traits::iterator::Iterator::nth<core::str::iter::CharIndices>:
063ba020 sub       $0x78,%rsp
063ba024 mov       %rcx,0x28(%rsp)
063ba029 mov       %rcx,0x58(%rsp)
063ba02e mov       %rdx,0x60(%rsp)
063ba033 call      0x0000`0000`063B`9EC0
063ba038 mov       %rax,0x30(%rsp)
063ba03d mov       %rdx,0x38(%rsp)
063ba042 mov       0x38(%rsp),%rdx
063ba047 mov       0x30(%rsp),%rcx
063ba04c call      0x0000`0000`063B`CB20
063ba051 mov       %al,0x27(%rsp)
063ba055 mov       0x27(%rsp),%cl
063ba059 and       $1,%cl
063ba05c call      0x0000`0000`063B`1E80
063ba061 and       $1,%al
063ba063 mov       %al,0x57(%rsp)
063ba067 movzbl    0x57(%rsp),%eax
063ba06c test      $1,%al
063ba06e je        0x0000`0000`063B`A076
063ba070 jmp       0x0000`0000`063B`A072
063ba072 jmp       0x0000`0000`063B`A08B
063ba074 ud2
063ba076 mov       0x28(%rsp),%rcx
063ba07b call      0x0000`0000`063B`B670
063ba080 mov       %edx,0x48(%rsp)
063ba084 mov       %rax,0x40(%rsp)
063ba089 jmp       0x0000`0000`063B`A099
063ba08b call      0x0000`0000`063B`1FF0
063ba090 mov       %edx,0x48(%rsp)
063ba094 mov       %rax,0x40(%rsp)
063ba099 mov       0x40(%rsp),%rax
063ba09e mov       0x48(%rsp),%edx
063ba0a2 add       $0x78,%rsp
063ba0a6 ret

core::panic::location::Location::caller:
063ba0b0 sub       $0x10,%rsp
063ba0b4 mov       %rcx,8(%rsp)
063ba0b9 mov       8(%rsp),%rax
063ba0be mov       %rax,(%rsp)
063ba0c2 mov       (%rsp),%rax
063ba0c6 add       $0x10,%rsp
063ba0ca ret

core::panic::location::Location::file:
063ba0d0 push      %rax
063ba0d1 mov       %rcx,(%rsp)
063ba0d5 mov       (%rcx),%rax
063ba0d8 mov       8(%rcx),%rdx
063ba0dc pop       %rcx
063ba0dd ret

core::panic::location::Location::line:
063ba0e0 push      %rax
063ba0e1 mov       %rcx,(%rsp)
063ba0e5 mov       0x10(%rcx),%eax
063ba0e8 pop       %rcx
063ba0e9 ret

core::panic::location::Location::column:
063ba0f0 push      %rax
063ba0f1 mov       %rcx,(%rsp)
063ba0f5 mov       0x14(%rcx),%eax
063ba0f8 pop       %rcx
063ba0f9 ret

core::slice::index::impl$0::index<u8,core::ops::range::Range<usize> >:
063ba100 sub       $0x68,%rsp
063ba104 mov       %r9,0x28(%rsp)
063ba109 mov       %r8,0x30(%rsp)
063ba10e mov       %rdx,%r9
063ba111 mov       0x28(%rsp),%rdx
063ba116 mov       %rcx,%r8
063ba119 mov       0x30(%rsp),%rcx
063ba11e mov       0x90(%rsp),%rax
063ba126 mov       %r8,0x48(%rsp)
063ba12b mov       %r9,0x50(%rsp)
063ba130 mov       %rcx,0x58(%rsp)
063ba135 mov       %rdx,0x60(%rsp)
063ba13a mov       %rax,0x20(%rsp)
063ba13f call      0x0000`0000`063B`29D0
063ba144 mov       %rax,0x38(%rsp)
063ba149 mov       %rdx,0x40(%rsp)
063ba14e mov       0x40(%rsp),%rdx
063ba153 mov       0x38(%rsp),%rax
063ba158 add       $0x68,%rsp
063ba15c ret

core::slice::index::impl$0::index<u8,core::ops::range::RangeFrom<usize> >:
063ba160 sub       $0x58,%rsp
063ba164 mov       %r8,0x28(%rsp)
063ba169 mov       %rdx,%r8
063ba16c mov       %rcx,%rdx
063ba16f mov       0x28(%rsp),%rcx
063ba174 mov       %rdx,0x40(%rsp)
063ba179 mov       %r8,0x48(%rsp)
063ba17e mov       %rcx,0x50(%rsp)
063ba183 call      0x0000`0000`063B`2EC0
063ba188 mov       %rax,0x30(%rsp)
063ba18d mov       %rdx,0x38(%rsp)
063ba192 mov       0x38(%rsp),%rdx
063ba197 mov       0x30(%rsp),%rax
063ba19c add       $0x58,%rsp
063ba1a0 ret

core::slice::index::impl$0::index<u8,core::ops::range::RangeInclusive<usize> >:
063ba1b0 sub       $0x58,%rsp
063ba1b4 mov       %r8,%rax
063ba1b7 mov       %rdx,%r8
063ba1ba mov       %rcx,%rdx
063ba1bd mov       %rdx,0x48(%rsp)
063ba1c2 mov       %r8,0x50(%rsp)
063ba1c7 mov       (%rax),%rcx
063ba1ca mov       %rcx,0x30(%rsp)
063ba1cf mov       8(%rax),%rcx
063ba1d3 mov       %rcx,0x38(%rsp)
063ba1d8 mov       0x10(%rax),%rax
063ba1dc mov       %rax,0x40(%rsp)
063ba1e1 lea       0x30(%rsp),%rcx
063ba1e6 call      0x0000`0000`063B`2F60
063ba1eb mov       %rax,0x20(%rsp)
063ba1f0 mov       %rdx,0x28(%rsp)
063ba1f5 mov       0x28(%rsp),%rdx
063ba1fa mov       0x20(%rsp),%rax
063ba1ff add       $0x58,%rsp
063ba203 ret

core::slice::index::impl$0::index<u8,core::ops::range::RangeTo<usize> >:
063ba210 sub       $0x58,%rsp
063ba214 mov       %r8,0x28(%rsp)
063ba219 mov       %rdx,%r8
063ba21c mov       %rcx,%rdx
063ba21f mov       0x28(%rsp),%rcx
063ba224 mov       %rdx,0x40(%rsp)
063ba229 mov       %r8,0x48(%rsp)
063ba22e mov       %rcx,0x50(%rsp)
063ba233 call      0x0000`0000`063B`2BD0
063ba238 mov       %rax,0x30(%rsp)
063ba23d mov       %rdx,0x38(%rsp)
063ba242 mov       0x38(%rsp),%rdx
063ba247 mov       0x30(%rsp),%rax
063ba24c add       $0x58,%rsp
063ba250 ret

core::slice::index::impl$1::index_mut<u8,core::ops::range::RangeTo<usize> >:
063ba260 sub       $0x58,%rsp
063ba264 mov       %r8,0x28(%rsp)
063ba269 mov       %rdx,%r8
063ba26c mov       %rcx,%rdx
063ba26f mov       0x28(%rsp),%rcx
063ba274 mov       %rdx,0x40(%rsp)
063ba279 mov       %r8,0x48(%rsp)
063ba27e mov       %rcx,0x50(%rsp)
063ba283 call      0x0000`0000`063B`2C30
063ba288 mov       %rax,0x30(%rsp)
063ba28d mov       %rdx,0x38(%rsp)
063ba292 mov       0x38(%rsp),%rdx
063ba297 mov       0x30(%rsp),%rax
063ba29c add       $0x58,%rsp
063ba2a0 ret

core::slice::index::impl$1::index_mut<u8,core::ops::range::RangeFull>:
063ba2b0 sub       $0x48,%rsp
063ba2b4 mov       %rcx,0x30(%rsp)
063ba2b9 mov       %rdx,0x38(%rsp)
063ba2be call      0x0000`0000`063B`2F40
063ba2c3 mov       %rax,0x20(%rsp)
063ba2c8 mov       %rdx,0x28(%rsp)
063ba2cd mov       0x28(%rsp),%rdx
063ba2d2 mov       0x20(%rsp),%rax
063ba2d7 add       $0x48,%rsp
063ba2db ret

core::slice::index::slice_start_index_len_fail:
063ba2e0 sub       $0xB8,%rsp
063ba2e7 mov       %r8,0x40(%rsp)
063ba2ec mov       %rcx,0x58(%rsp)
063ba2f1 mov       %rdx,0x60(%rsp)
063ba2f6 lea       0x58(%rsp),%rcx
063ba2fb call      0x0000`0000`063B`6510
063ba300 mov       %rax,0x48(%rsp)
063ba305 mov       %rdx,0x50(%rsp)
063ba30a lea       0x60(%rsp),%rcx
063ba30f call      0x0000`0000`063B`6510
063ba314 mov       %rax,0x30(%rsp)
063ba319 mov       %rdx,0x38(%rsp)
063ba31e mov       0x38(%rsp),%rax
063ba323 mov       0x30(%rsp),%rcx
063ba328 mov       0x50(%rsp),%rdx
063ba32d mov       0x48(%rsp),%r8
063ba332 mov       %r8,0x98(%rsp)
063ba33a mov       %rdx,0xA0(%rsp)
063ba342 mov       %rcx,0xA8(%rsp)
063ba34a mov       %rax,0xB0(%rsp)
063ba352 lea       0x98(%rsp),%r9
063ba35a lea       0x68(%rsp),%rcx
063ba35f lea       0x63C`E920,%rdx
063ba366 mov       $2,%r8d
063ba36c movq      $2,0x20(%rsp)
063ba375 call      0x0000`0000`063B`4170
063ba37a mov       0x40(%rsp),%rdx
063ba37f lea       0x68(%rsp),%rcx
063ba384 call      0x0000`0000`063B`2140
063ba389 ud2

core::slice::index::slice_end_index_len_fail:
063ba390 sub       $0xB8,%rsp
063ba397 mov       %r8,0x40(%rsp)
063ba39c mov       %rcx,0x58(%rsp)
063ba3a1 mov       %rdx,0x60(%rsp)
063ba3a6 lea       0x58(%rsp),%rcx
063ba3ab call      0x0000`0000`063B`6510
063ba3b0 mov       %rax,0x48(%rsp)
063ba3b5 mov       %rdx,0x50(%rsp)
063ba3ba lea       0x60(%rsp),%rcx
063ba3bf call      0x0000`0000`063B`6510
063ba3c4 mov       %rax,0x30(%rsp)
063ba3c9 mov       %rdx,0x38(%rsp)
063ba3ce mov       0x38(%rsp),%rax
063ba3d3 mov       0x30(%rsp),%rcx
063ba3d8 mov       0x50(%rsp),%rdx
063ba3dd mov       0x48(%rsp),%r8
063ba3e2 mov       %r8,0x98(%rsp)
063ba3ea mov       %rdx,0xA0(%rsp)
063ba3f2 mov       %rcx,0xA8(%rsp)
063ba3fa mov       %rax,0xB0(%rsp)
063ba402 lea       0x98(%rsp),%r9
063ba40a lea       0x68(%rsp),%rcx
063ba40f lea       0x63C`E950,%rdx
063ba416 mov       $2,%r8d
063ba41c movq      $2,0x20(%rsp)
063ba425 call      0x0000`0000`063B`4170
063ba42a mov       0x40(%rsp),%rdx
063ba42f lea       0x68(%rsp),%rcx
063ba434 call      0x0000`0000`063B`2140
063ba439 ud2

core::slice::index::slice_index_order_fail:
063ba440 sub       $0xB8,%rsp
063ba447 mov       %r8,0x40(%rsp)
063ba44c mov       %rcx,0x58(%rsp)
063ba451 mov       %rdx,0x60(%rsp)
063ba456 lea       0x58(%rsp),%rcx
063ba45b call      0x0000`0000`063B`6510
063ba460 mov       %rax,0x48(%rsp)
063ba465 mov       %rdx,0x50(%rsp)
063ba46a lea       0x60(%rsp),%rcx
063ba46f call      0x0000`0000`063B`6510
063ba474 mov       %rax,0x30(%rsp)
063ba479 mov       %rdx,0x38(%rsp)
063ba47e mov       0x38(%rsp),%rax
063ba483 mov       0x30(%rsp),%rcx
063ba488 mov       0x50(%rsp),%rdx
063ba48d mov       0x48(%rsp),%r8
063ba492 mov       %r8,0x98(%rsp)
063ba49a mov       %rdx,0xA0(%rsp)
063ba4a2 mov       %rcx,0xA8(%rsp)
063ba4aa mov       %rax,0xB0(%rsp)
063ba4b2 lea       0x98(%rsp),%r9
063ba4ba lea       0x68(%rsp),%rcx
063ba4bf lea       0x63C`E998,%rdx
063ba4c6 mov       $2,%r8d
063ba4cc movq      $2,0x20(%rsp)
063ba4d5 call      0x0000`0000`063B`4170
063ba4da mov       0x40(%rsp),%rdx
063ba4df lea       0x68(%rsp),%rcx
063ba4e4 call      0x0000`0000`063B`2140
063ba4e9 ud2

core::slice::index::slice_end_index_overflow_fail:
063ba4f0 sub       $0x68,%rsp
063ba4f4 mov       %rcx,0x30(%rsp)
063ba4f9 lea       0x38(%rsp),%rcx
063ba4fe lea       0x63C`E9E8,%rdx
063ba505 mov       $1,%r8d
063ba50b lea       0x63C`E6F8,%r9
063ba512 xor       %eax,%eax
063ba514 movq      $0,0x20(%rsp)
063ba51d call      0x0000`0000`063B`4170
063ba522 mov       0x30(%rsp),%rdx
063ba527 lea       0x38(%rsp),%rcx
063ba52c call      0x0000`0000`063B`2140
063ba531 ud2

core::slice::index::impl$2::get<str>:
063ba540 sub       $0x68,%rsp
063ba544 mov       %r8,0x30(%rsp)
063ba549 mov       %rdx,0x38(%rsp)
063ba54e mov       %rcx,0x40(%rsp)
063ba553 mov       %rcx,0x50(%rsp)
063ba558 mov       %rdx,0x58(%rsp)
063ba55d mov       %r8,0x60(%rsp)
063ba562 cmp       %r8,%rcx
063ba565 jb        0x0000`0000`063B`A572
063ba567 movq      $0,0x48(%rsp)
063ba570 jmp       0x0000`0000`063B`A595
063ba572 mov       0x30(%rsp),%r8
063ba577 mov       0x38(%rsp),%rdx
063ba57c mov       0x40(%rsp),%rcx
063ba581 call      0x0000`0000`063B`A6F0
063ba586 mov       %rax,0x28(%rsp)
063ba58b mov       0x28(%rsp),%rax
063ba590 mov       %rax,0x48(%rsp)
063ba595 mov       0x48(%rsp),%rax
063ba59a add       $0x68,%rsp
063ba59e ret

core::slice::index::impl$2::get<u8>:
063ba5a0 sub       $0x68,%rsp
063ba5a4 mov       %r8,0x30(%rsp)
063ba5a9 mov       %rdx,0x38(%rsp)
063ba5ae mov       %rcx,0x40(%rsp)
063ba5b3 mov       %rcx,0x50(%rsp)
063ba5b8 mov       %rdx,0x58(%rsp)
063ba5bd mov       %r8,0x60(%rsp)
063ba5c2 cmp       %r8,%rcx
063ba5c5 jb        0x0000`0000`063B`A5D2
063ba5c7 movq      $0,0x48(%rsp)
063ba5d0 jmp       0x0000`0000`063B`A5F5
063ba5d2 mov       0x30(%rsp),%r8
063ba5d7 mov       0x38(%rsp),%rdx
063ba5dc mov       0x40(%rsp),%rcx
063ba5e1 call      0x0000`0000`063B`A810
063ba5e6 mov       %rax,0x28(%rsp)
063ba5eb mov       0x28(%rsp),%rax
063ba5f0 mov       %rax,0x48(%rsp)
063ba5f5 mov       0x48(%rsp),%rax
063ba5fa add       $0x68,%rsp
063ba5fe ret

core::slice::index::impl$2::get<u32>:
063ba600 sub       $0x68,%rsp
063ba604 mov       %r8,0x30(%rsp)
063ba609 mov       %rdx,0x38(%rsp)
063ba60e mov       %rcx,0x40(%rsp)
063ba613 mov       %rcx,0x50(%rsp)
063ba618 mov       %rdx,0x58(%rsp)
063ba61d mov       %r8,0x60(%rsp)
063ba622 cmp       %r8,%rcx
063ba625 jb        0x0000`0000`063B`A632
063ba627 movq      $0,0x48(%rsp)
063ba630 jmp       0x0000`0000`063B`A655
063ba632 mov       0x30(%rsp),%r8
063ba637 mov       0x38(%rsp),%rdx
063ba63c mov       0x40(%rsp),%rcx
063ba641 call      0x0000`0000`063B`A780
063ba646 mov       %rax,0x28(%rsp)
063ba64b mov       0x28(%rsp),%rax
063ba650 mov       %rax,0x48(%rsp)
063ba655 mov       0x48(%rsp),%rax
063ba65a add       $0x68,%rsp
063ba65e ret

core::slice::index::impl$2::get_unchecked<core::fmt::ArgumentV1>:
063ba660 sub       $0x88,%rsp
063ba667 mov       %r8,0x28(%rsp)
063ba66c mov       %rdx,%rax
063ba66f mov       0x28(%rsp),%rdx
063ba674 mov       %rax,0x30(%rsp)
063ba679 mov       %rcx,%rax
063ba67c mov       0x30(%rsp),%rcx
063ba681 mov       %rax,0x38(%rsp)
063ba686 mov       %rax,0x48(%rsp)
063ba68b mov       %rcx,0x50(%rsp)
063ba690 mov       %rdx,0x58(%rsp)
063ba695 call      0x0000`0000`063B`3C90
063ba69a mov       %rax,0x40(%rsp)
063ba69f mov       0x40(%rsp),%rax
063ba6a4 mov       0x38(%rsp),%rcx
063ba6a9 mov       %rax,0x60(%rsp)
063ba6ae mov       %rcx,0x68(%rsp)
063ba6b3 mov       %rax,0x70(%rsp)
063ba6b8 mov       %rcx,0x78(%rsp)
063ba6bd shl       $4,%rcx
063ba6c1 add       %rcx,%rax
063ba6c4 mov       %rax,0x80(%rsp)
063ba6cc mov       0x80(%rsp),%rax
063ba6d4 mov       %rax,0x20(%rsp)
063ba6d9 mov       0x20(%rsp),%rax
063ba6de add       $0x88,%rsp
063ba6e5 ret

core::slice::index::impl$2::get_unchecked<str>:
063ba6f0 sub       $0x88,%rsp
063ba6f7 mov       %r8,0x28(%rsp)
063ba6fc mov       %rdx,%rax
063ba6ff mov       0x28(%rsp),%rdx
063ba704 mov       %rax,0x30(%rsp)
063ba709 mov       %rcx,%rax
063ba70c mov       0x30(%rsp),%rcx
063ba711 mov       %rax,0x38(%rsp)
063ba716 mov       %rax,0x48(%rsp)
063ba71b mov       %rcx,0x50(%rsp)
063ba720 mov       %rdx,0x58(%rsp)
063ba725 call      0x0000`0000`063C`4B00
063ba72a mov       %rax,0x40(%rsp)
063ba72f mov       0x40(%rsp),%rax
063ba734 mov       0x38(%rsp),%rcx
063ba739 mov       %rax,0x60(%rsp)
063ba73e mov       %rcx,0x68(%rsp)
063ba743 mov       %rax,0x70(%rsp)
063ba748 mov       %rcx,0x78(%rsp)
063ba74d shl       $4,%rcx
063ba751 add       %rcx,%rax
063ba754 mov       %rax,0x80(%rsp)
063ba75c mov       0x80(%rsp),%rax
063ba764 mov       %rax,0x20(%rsp)
063ba769 mov       0x20(%rsp),%rax
063ba76e add       $0x88,%rsp
063ba775 ret

core::slice::index::impl$2::get_unchecked<u32>:
063ba780 sub       $0x88,%rsp
063ba787 mov       %r8,0x28(%rsp)
063ba78c mov       %rdx,%rax
063ba78f mov       0x28(%rsp),%rdx
063ba794 mov       %rax,0x30(%rsp)
063ba799 mov       %rcx,%rax
063ba79c mov       0x30(%rsp),%rcx
063ba7a1 mov       %rax,0x38(%rsp)
063ba7a6 mov       %rax,0x48(%rsp)
063ba7ab mov       %rcx,0x50(%rsp)
063ba7b0 mov       %rdx,0x58(%rsp)
063ba7b5 call      0x0000`0000`063C`4B20
063ba7ba mov       %rax,0x40(%rsp)
063ba7bf mov       0x40(%rsp),%rax
063ba7c4 mov       0x38(%rsp),%rcx
063ba7c9 mov       %rax,0x60(%rsp)
063ba7ce mov       %rcx,0x68(%rsp)
063ba7d3 mov       %rax,0x70(%rsp)
063ba7d8 mov       %rcx,0x78(%rsp)
063ba7dd shl       $2,%rcx
063ba7e1 add       %rcx,%rax
063ba7e4 mov       %rax,0x80(%rsp)
063ba7ec mov       0x80(%rsp),%rax
063ba7f4 mov       %rax,0x20(%rsp)
063ba7f9 mov       0x20(%rsp),%rax
063ba7fe add       $0x88,%rsp
063ba805 ret

core::slice::index::impl$2::get_unchecked<u8>:
063ba810 sub       $0x88,%rsp
063ba817 mov       %r8,0x28(%rsp)
063ba81c mov       %rdx,%rax
063ba81f mov       0x28(%rsp),%rdx
063ba824 mov       %rax,0x30(%rsp)
063ba829 mov       %rcx,%rax
063ba82c mov       0x30(%rsp),%rcx
063ba831 mov       %rax,0x38(%rsp)
063ba836 mov       %rax,0x48(%rsp)
063ba83b mov       %rcx,0x50(%rsp)
063ba840 mov       %rdx,0x58(%rsp)
063ba845 call      0x0000`0000`063C`4B40
063ba84a mov       %rax,0x40(%rsp)
063ba84f mov       0x38(%rsp),%rcx
063ba854 mov       0x40(%rsp),%rax
063ba859 mov       %rax,0x60(%rsp)
063ba85e mov       %rcx,0x68(%rsp)
063ba863 mov       %rax,0x70(%rsp)
063ba868 mov       %rcx,0x78(%rsp)
063ba86d add       %rcx,%rax
063ba870 mov       %rax,0x80(%rsp)
063ba878 mov       0x80(%rsp),%rax
063ba880 mov       %rax,0x20(%rsp)
063ba885 mov       0x20(%rsp),%rax
063ba88a add       $0x88,%rsp
063ba891 ret

core::slice::raw::from_raw_parts<usize>:
063ba8a0 sub       $0x58,%rsp
063ba8a4 mov       %rdx,0x38(%rsp)
063ba8a9 mov       %rcx,0x40(%rsp)
063ba8ae mov       %rcx,0x48(%rsp)
063ba8b3 mov       %rdx,0x50(%rsp)
063ba8b8 call      0x0000`0000`063B`AAD0
063ba8bd mov       0x38(%rsp),%rdx
063ba8c2 mov       0x40(%rsp),%rcx
063ba8c7 call      0x0000`0000`063C`8BF0
063ba8cc mov       %rax,0x28(%rsp)
063ba8d1 mov       %rdx,0x30(%rsp)
063ba8d6 mov       0x30(%rsp),%rdx
063ba8db mov       0x28(%rsp),%rax
063ba8e0 add       $0x58,%rsp
063ba8e4 ret

core::slice::raw::from_raw_parts<array$<usize,4> >:
063ba8f0 sub       $0x58,%rsp
063ba8f4 mov       %rdx,0x38(%rsp)
063ba8f9 mov       %rcx,0x40(%rsp)
063ba8fe mov       %rcx,0x48(%rsp)
063ba903 mov       %rdx,0x50(%rsp)
063ba908 call      0x0000`0000`063B`A990
063ba90d mov       0x38(%rsp),%rdx
063ba912 mov       0x40(%rsp),%rcx
063ba917 call      0x0000`0000`063C`8B50
063ba91c mov       %rax,0x28(%rsp)
063ba921 mov       %rdx,0x30(%rsp)
063ba926 mov       0x30(%rsp),%rdx
063ba92b mov       0x28(%rsp),%rax
063ba930 add       $0x58,%rsp
063ba934 ret

core::slice::raw::from_raw_parts<u8>:
063ba940 sub       $0x58,%rsp
063ba944 mov       %rdx,0x38(%rsp)
063ba949 mov       %rcx,0x40(%rsp)
063ba94e mov       %rcx,0x48(%rsp)
063ba953 mov       %rdx,0x50(%rsp)
063ba958 call      0x0000`0000`063B`AA30
063ba95d mov       0x38(%rsp),%rdx
063ba962 mov       0x40(%rsp),%rcx
063ba967 call      0x0000`0000`063C`8BA0
063ba96c mov       %rax,0x28(%rsp)
063ba971 mov       %rdx,0x30(%rsp)
063ba976 mov       0x30(%rsp),%rdx
063ba97b mov       0x28(%rsp),%rax
063ba980 add       $0x58,%rsp
063ba984 ret

core::slice::raw::debug_check_data_len<array$<usize,4> >:
063ba990 sub       $0x88,%rsp
063ba997 mov       %rdx,0x38(%rsp)
063ba99c mov       %rcx,0x78(%rsp)
063ba9a1 mov       %rdx,0x80(%rsp)
063ba9a9 mov       %rcx,0x40(%rsp)
063ba9ae mov       0x40(%rsp),%rcx
063ba9b3 call      0x0000`0000`063C`2700
063ba9b8 jmp       0x0000`0000`063B`A9BA
063ba9ba mov       0x38(%rsp),%rdx
063ba9bf mov       $0x20,%ecx
063ba9c4 call      0x0000`0000`063C`8AF0
063ba9c9 mov       %rax,0x30(%rsp)
063ba9ce mov       0x30(%rsp),%rax
063ba9d3 movabs    $0x7FFF`FFFF`FFFF`FFFF,%rcx
063ba9dd cmp       %rcx,%rax
063ba9e0 setbe     %al
063ba9e3 xor       $0xFF,%al
063ba9e5 test      $1,%al
063ba9e7 jne       0x0000`0000`063B`A9F1
063ba9e9 add       $0x88,%rsp
063ba9f0 ret
063ba9f1 lea       0x48(%rsp),%rcx
063ba9f6 lea       0x63C`EA38,%rdx
063ba9fd mov       $1,%r8d
063baa03 lea       0x63C`E6F8,%r9
063baa0a xor       %eax,%eax
063baa0c movq      $0,0x20(%rsp)
063baa15 call      0x0000`0000`063B`4170
063baa1a lea       0x63C`EAC0,%rdx
063baa21 lea       0x48(%rsp),%rcx
063baa26 call      0x0000`0000`063B`2140
063baa2b ud2

core::slice::raw::debug_check_data_len<u8>:
063baa30 sub       $0x88,%rsp
063baa37 mov       %rdx,0x38(%rsp)
063baa3c mov       %rcx,0x78(%rsp)
063baa41 mov       %rdx,0x80(%rsp)
063baa49 mov       %rcx,0x40(%rsp)
063baa4e mov       0x40(%rsp),%rcx
063baa53 call      0x0000`0000`063C`2790
063baa58 jmp       0x0000`0000`063B`AA5A
063baa5a mov       0x38(%rsp),%rdx
063baa5f mov       $1,%ecx
063baa64 call      0x0000`0000`063C`8AF0
063baa69 mov       %rax,0x30(%rsp)
063baa6e mov       0x30(%rsp),%rax
063baa73 movabs    $0x7FFF`FFFF`FFFF`FFFF,%rcx
063baa7d cmp       %rcx,%rax
063baa80 setbe     %al
063baa83 xor       $0xFF,%al
063baa85 test      $1,%al
063baa87 jne       0x0000`0000`063B`AA91
063baa89 add       $0x88,%rsp
063baa90 ret
063baa91 lea       0x48(%rsp),%rcx
063baa96 lea       0x63C`EA38,%rdx
063baa9d mov       $1,%r8d
063baaa3 lea       0x63C`E6F8,%r9
063baaaa xor       %eax,%eax
063baaac movq      $0,0x20(%rsp)
063baab5 call      0x0000`0000`063B`4170
063baaba lea       0x63C`EAC0,%rdx
063baac1 lea       0x48(%rsp),%rcx
063baac6 call      0x0000`0000`063B`2140
063baacb ud2

core::slice::raw::debug_check_data_len<usize>:
063baad0 sub       $0x88,%rsp
063baad7 mov       %rdx,0x38(%rsp)
063baadc mov       %rcx,0x78(%rsp)
063baae1 mov       %rdx,0x80(%rsp)
063baae9 mov       %rcx,0x40(%rsp)
063baaee mov       0x40(%rsp),%rcx
063baaf3 call      0x0000`0000`063C`26C0
063baaf8 jmp       0x0000`0000`063B`AAFA
063baafa mov       0x38(%rsp),%rdx
063baaff mov       $8,%ecx
063bab04 call      0x0000`0000`063C`8AF0
063bab09 mov       %rax,0x30(%rsp)
063bab0e mov       0x30(%rsp),%rax
063bab13 movabs    $0x7FFF`FFFF`FFFF`FFFF,%rcx
063bab1d cmp       %rcx,%rax
063bab20 setbe     %al
063bab23 xor       $0xFF,%al
063bab25 test      $1,%al
063bab27 jne       0x0000`0000`063B`AB31
063bab29 add       $0x88,%rsp
063bab30 ret
063bab31 lea       0x48(%rsp),%rcx
063bab36 lea       0x63C`EA38,%rdx
063bab3d mov       $1,%r8d
063bab43 lea       0x63C`E6F8,%r9
063bab4a xor       %eax,%eax
063bab4c movq      $0,0x20(%rsp)
063bab55 call      0x0000`0000`063B`4170
063bab5a lea       0x63C`EAC0,%rdx
063bab61 lea       0x48(%rsp),%rcx
063bab66 call      0x0000`0000`063B`2140
063bab6b ud2

core::slice::raw::debug_check_data_len::rt_check<array$<usize,4> >:
063bab70 sub       $0x68,%rsp
063bab74 mov       %rcx,0x60(%rsp)
063bab79 call      0x0000`0000`063C`22F0
063bab7e mov       %al,0x2F(%rsp)
063bab82 mov       0x2F(%rsp),%al
063bab86 xor       $0xFF,%al
063bab88 test      $1,%al
063bab8a jne       0x0000`0000`063B`AB91
063bab8c add       $0x68,%rsp
063bab90 ret
063bab91 lea       0x30(%rsp),%rcx
063bab96 lea       0x63C`EB08,%rdx
063bab9d mov       $1,%r8d
063baba3 lea       0x63C`E6F8,%r9
063babaa xor       %eax,%eax
063babac movq      $0,0x20(%rsp)
063babb5 call      0x0000`0000`063B`4170
063babba lea       0x63C`EB18,%rdx
063babc1 lea       0x30(%rsp),%rcx
063babc6 call      0x0000`0000`063B`2140
063babcb ud2

core::slice::raw::debug_check_data_len::rt_check<usize>:
063babd0 sub       $0x68,%rsp
063babd4 mov       %rcx,0x60(%rsp)
063babd9 call      0x0000`0000`063C`2370
063babde mov       %al,0x2F(%rsp)
063babe2 mov       0x2F(%rsp),%al
063babe6 xor       $0xFF,%al
063babe8 test      $1,%al
063babea jne       0x0000`0000`063B`ABF1
063babec add       $0x68,%rsp
063babf0 ret
063babf1 lea       0x30(%rsp),%rcx
063babf6 lea       0x63C`EB08,%rdx
063babfd mov       $1,%r8d
063bac03 lea       0x63C`E6F8,%r9
063bac0a xor       %eax,%eax
063bac0c movq      $0,0x20(%rsp)
063bac15 call      0x0000`0000`063B`4170
063bac1a lea       0x63C`EB18,%rdx
063bac21 lea       0x30(%rsp),%rcx
063bac26 call      0x0000`0000`063B`2140
063bac2b ud2

core::slice::raw::debug_check_data_len::rt_check<u8>:
063bac30 sub       $0x68,%rsp
063bac34 mov       %rcx,0x60(%rsp)
063bac39 call      0x0000`0000`063C`2270
063bac3e mov       %al,0x2F(%rsp)
063bac42 mov       0x2F(%rsp),%al
063bac46 xor       $0xFF,%al
063bac48 test      $1,%al
063bac4a jne       0x0000`0000`063B`AC51
063bac4c add       $0x68,%rsp
063bac50 ret
063bac51 lea       0x30(%rsp),%rcx
063bac56 lea       0x63C`EB08,%rdx
063bac5d mov       $1,%r8d
063bac63 lea       0x63C`E6F8,%r9
063bac6a xor       %eax,%eax
063bac6c movq      $0,0x20(%rsp)
063bac75 call      0x0000`0000`063B`4170
063bac7a lea       0x63C`EB18,%rdx
063bac81 lea       0x30(%rsp),%rcx
063bac86 call      0x0000`0000`063B`2140
063bac8b ud2

core::str::count::count_chars:
063bac90 sub       $0x88,%rsp
063bac97 mov       %rdx,0x38(%rsp)
063bac9c mov       %rcx,0x40(%rsp)
063baca1 mov       %rcx,0x58(%rsp)
063baca6 mov       %rdx,0x60(%rsp)
063bacab call      0x0000`0000`063B`D700
063bacb0 mov       %rax,0x48(%rsp)
063bacb5 mov       0x48(%rsp),%rax
063bacba cmp       $0x20,%rax
063bacbe jb        0x0000`0000`063B`ACD6
063bacc0 mov       0x38(%rsp),%rdx
063bacc5 mov       0x40(%rsp),%rcx
063bacca call      0x0000`0000`063B`AD30
063baccf mov       %rax,0x50(%rsp)
063bacd4 jmp       0x0000`0000`063B`AD22
063bacd6 mov       0x38(%rsp),%rax
063bacdb mov       0x40(%rsp),%rcx
063bace0 mov       %rcx,0x68(%rsp)
063bace5 mov       %rax,0x70(%rsp)
063bacea mov       %rcx,0x78(%rsp)
063bacef mov       %rax,0x80(%rsp)
063bacf7 mov       0x78(%rsp),%rax
063bacfc mov       %rax,0x28(%rsp)
063bad01 mov       0x80(%rsp),%rax
063bad09 mov       %rax,0x30(%rsp)
063bad0e mov       0x30(%rsp),%rdx
063bad13 mov       0x28(%rsp),%rcx
063bad18 call      0x0000`0000`063B`B510
063bad1d mov       %rax,0x50(%rsp)
063bad22 mov       0x50(%rsp),%rax
063bad27 add       $0x88,%rsp
063bad2e ret

core::str::count::do_count_chars:
063bad30 sub       $0x318,%rsp
063bad37 mov       %rdx,0x110(%rsp)
063bad3f mov       %rcx,0x118(%rsp)
063bad47 mov       %rcx,0x248(%rsp)
063bad4f mov       %rdx,0x250(%rsp)
063bad57 mov       %rcx,0x2F8(%rsp)
063bad5f mov       %rdx,0x300(%rsp)
063bad67 mov       %rcx,0x308(%rsp)
063bad6f mov       %rdx,0x310(%rsp)
063bad77 mov       0x308(%rsp),%rax
063bad7f mov       %rax,0x120(%rsp)
063bad87 mov       0x310(%rsp),%rax
063bad8f mov       %rax,0x128(%rsp)
063bad97 mov       0x128(%rsp),%r8
063bad9f mov       0x120(%rsp),%rdx
063bada7 lea       0x138(%rsp),%rcx
063badaf call      0x0000`0000`063C`10D0
063badb4 mov       0x138(%rsp),%rcx
063badbc mov       %rcx,0xD8(%rsp)
063badc4 mov       0x140(%rsp),%rax
063badcc mov       %rax,0xE0(%rsp)
063badd4 mov       %rcx,0x258(%rsp)
063baddc mov       %rax,0x260(%rsp)
063bade4 mov       0x148(%rsp),%rcx
063badec mov       %rcx,0xE8(%rsp)
063badf4 mov       0x150(%rsp),%rdx
063badfc mov       %rdx,0xF0(%rsp)
063bae04 mov       %rcx,0x268(%rsp)
063bae0c mov       %rdx,0x270(%rsp)
063bae14 mov       0x158(%rsp),%r8
063bae1c mov       %r8,0xF8(%rsp)
063bae24 mov       0x160(%rsp),%rax
063bae2c mov       %rax,0x100(%rsp)
063bae34 mov       %r8,0x278(%rsp)
063bae3c mov       %rax,0x280(%rsp)
063bae44 call      0x0000`0000`063B`FE30
063bae49 mov       %al,0x10F(%rsp)
063bae50 mov       0x10F(%rsp),%al
063bae57 test      $1,%al
063bae59 jne       0x0000`0000`063B`AE77
063bae5b jmp       0x0000`0000`063B`AE5D
063bae5d mov       0xE0(%rsp),%rax
063bae65 cmp       $8,%rax
063bae69 seta      %al
063bae6c and       $1,%al
063bae6e mov       %al,0x16F(%rsp)
063bae75 jmp       0x0000`0000`063B`AE7F
063bae77 movb      $1,0x16F(%rsp)
063bae7f testb     $1,0x16F(%rsp)
063bae87 jne       0x0000`0000`063B`AEA3
063bae89 mov       0x100(%rsp),%rax
063bae91 cmp       $8,%rax
063bae95 seta      %al
063bae98 and       $1,%al
063bae9a mov       %al,0x16E(%rsp)
063baea1 jmp       0x0000`0000`063B`AEAB
063baea3 movb      $1,0x16E(%rsp)
063baeab mov       0x16E(%rsp),%al
063baeb2 and       $1,%al
063baeb4 mov       %al,0x28F(%rsp)
063baebb mov       0x28F(%rsp),%al
063baec2 mov       %al,0xD7(%rsp)
063baec9 mov       0xD7(%rsp),%al
063baed0 test      $1,%al
063baed2 jne       0x0000`0000`063B`AEF5
063baed4 jmp       0x0000`0000`063B`AED6
063baed6 mov       0xE0(%rsp),%rdx
063baede mov       0xD8(%rsp),%rcx
063baee6 call      0x0000`0000`063B`B510
063baeeb mov       %rax,0xC8(%rsp)
063baef3 jmp       0x0000`0000`063B`AF72
063baef5 mov       0x110(%rsp),%rax
063baefd mov       0x118(%rsp),%rcx
063baf05 mov       %rcx,0x2D8(%rsp)
063baf0d mov       %rax,0x2E0(%rsp)
063baf15 mov       %rcx,0x2E8(%rsp)
063baf1d mov       %rax,0x2F0(%rsp)
063baf25 mov       0x2E8(%rsp),%rax
063baf2d mov       %rax,0xB8(%rsp)
063baf35 mov       0x2F0(%rsp),%rax
063baf3d mov       %rax,0xC0(%rsp)
063baf45 mov       0xC0(%rsp),%rdx
063baf4d mov       0xB8(%rsp),%rcx
063baf55 call      0x0000`0000`063B`B510
063baf5a mov       %rax,0x130(%rsp)
063baf62 mov       0x130(%rsp),%rax
063baf6a add       $0x318,%rsp
063baf71 ret
063baf72 mov       0x100(%rsp),%rdx
063baf7a mov       0xF8(%rsp),%rcx
063baf82 call      0x0000`0000`063B`B510
063baf87 mov       %rax,0xB0(%rsp)
063baf8f mov       0xB0(%rsp),%rcx
063baf97 mov       0xC8(%rsp),%rax
063baf9f add       %rcx,%rax
063bafa2 mov       %rax,0xA8(%rsp)
063bafaa setb      %al
063bafad test      $1,%al
063bafaf jne       0x0000`0000`063B`AFE6
063bafb1 mov       0xF0(%rsp),%r8
063bafb9 mov       0xE8(%rsp),%rdx
063bafc1 mov       0xA8(%rsp),%rax
063bafc9 mov       %rax,0x170(%rsp)
063bafd1 lea       0x190(%rsp),%rcx
063bafd9 mov       $0xC0,%r9d
063bafdf call      0x0000`0000`063C`02A0
063bafe4 jmp       0x0000`0000`063B`B000
063bafe6 lea       0x63C`E6B0,%rcx
063bafed lea       0x63C`EBA8,%r8
063baff4 mov       $0x1C,%edx
063baff9 call      0x0000`0000`063B`2030
063baffe ud2
063bb000 lea       0x178(%rsp),%rcx
063bb008 lea       0x190(%rsp),%rdx
063bb010 call      0x0000`0000`063C`4CB0
063bb015 mov       0x178(%rsp),%rax
063bb01d mov       %rax,0x1A8(%rsp)
063bb025 mov       0x180(%rsp),%rax
063bb02d mov       %rax,0x1B0(%rsp)
063bb035 mov       0x188(%rsp),%rax
063bb03d mov       %rax,0x1B8(%rsp)
063bb045 lea       0x1A8(%rsp),%rcx
063bb04d call      0x0000`0000`063C`57A0
063bb052 mov       %rdx,0x1C8(%rsp)
063bb05a mov       %rax,0x1C0(%rsp)
063bb062 mov       0x1C0(%rsp),%rax
063bb06a test      %rax,%rax
063bb06d setne     %al
063bb070 movzbl    %al,%eax
063bb073 je        0x0000`0000`063B`B07B
063bb075 jmp       0x0000`0000`063B`B077
063bb077 jmp       0x0000`0000`063B`B090
063bb079 ud2
063bb07b mov       0x170(%rsp),%rax
063bb083 mov       %rax,0x130(%rsp)
063bb08b jmp       0x0000`0000`063B`AF62
063bb090 mov       0x1C0(%rsp),%rdx
063bb098 mov       0x1C8(%rsp),%r8
063bb0a0 mov       %rdx,0x290(%rsp)
063bb0a8 mov       %r8,0x298(%rsp)
063bb0b0 movq      $0,0x1D0(%rsp)
063bb0bc lea       0x1D8(%rsp),%rcx
063bb0c4 call      0x0000`0000`063C`0540
063bb0c9 mov       0x1D8(%rsp),%rcx
063bb0d1 mov       0x1E0(%rsp),%rdx
063bb0d9 mov       %rcx,0x2A0(%rsp)
063bb0e1 mov       %rdx,0x2A8(%rsp)
063bb0e9 mov       0x1E8(%rsp),%r8
063bb0f1 mov       %r8,0x88(%rsp)
063bb0f9 mov       0x1F0(%rsp),%rax
063bb101 mov       %rax,0x90(%rsp)
063bb109 mov       %r8,0x2B0(%rsp)
063bb111 mov       %rax,0x2B8(%rsp)
063bb119 call      0x0000`0000`063C`4F10
063bb11e mov       %rax,0x98(%rsp)
063bb126 mov       %rdx,0xA0(%rsp)
063bb12e mov       0xA0(%rsp),%rax
063bb136 mov       0x98(%rsp),%rcx
063bb13e mov       %rcx,0x1F8(%rsp)
063bb146 mov       %rax,0x200(%rsp)
063bb14e lea       0x1F8(%rsp),%rcx
063bb156 call      0x0000`0000`063C`6F10
063bb15b mov       %rax,0x208(%rsp)
063bb163 mov       0x208(%rsp),%rax
063bb16b test      %rax,%rax
063bb16e setne     %al
063bb171 movzbl    %al,%eax
063bb174 je        0x0000`0000`063B`B17C
063bb176 jmp       0x0000`0000`063B`B178
063bb178 jmp       0x0000`0000`063B`B196
063bb17a ud2
063bb17c mov       0x1D0(%rsp),%rcx
063bb184 call      0x0000`0000`063B`B450
063bb189 mov       %rax,0x80(%rsp)
063bb191 jmp       0x0000`0000`063B`B260
063bb196 mov       0x208(%rsp),%rcx
063bb19e mov       %rcx,0x2C0(%rsp)
063bb1a6 call      0x0000`0000`063B`C890
063bb1ab mov       %rax,0x70(%rsp)
063bb1b0 mov       %rdx,0x78(%rsp)
063bb1b5 mov       0x78(%rsp),%rax
063bb1ba mov       0x70(%rsp),%rcx
063bb1bf mov       %rcx,0x210(%rsp)
063bb1c7 mov       %rax,0x218(%rsp)
063bb1cf lea       0x210(%rsp),%rcx
063bb1d7 call      0x0000`0000`063C`7030
063bb1dc mov       %rax,0x220(%rsp)
063bb1e4 mov       0x220(%rsp),%rax
063bb1ec test      %rax,%rax
063bb1ef setne     %al
063bb1f2 movzbl    %al,%eax
063bb1f5 je        0x0000`0000`063B`B14E
063bb1fb jmp       0x0000`0000`063B`B1FD
063bb1fd jmp       0x0000`0000`063B`B201
063bb1ff ud2
063bb201 mov       0x220(%rsp),%rax
063bb209 mov       (%rax),%rcx
063bb20c mov       %rcx,0x2C8(%rsp)
063bb214 call      0x0000`0000`063B`B400
063bb219 mov       %rax,0x68(%rsp)
063bb21e mov       0x68(%rsp),%rax
063bb223 add       0x1D0(%rsp),%rax
063bb22b mov       %rax,0x60(%rsp)
063bb230 setb      %al
063bb233 test      $1,%al
063bb235 jne       0x0000`0000`063B`B246
063bb237 mov       0x60(%rsp),%rax
063bb23c mov       %rax,0x1D0(%rsp)
063bb244 jmp       0x0000`0000`063B`B1CF
063bb246 lea       0x63C`E6B0,%rcx
063bb24d lea       0x63C`EBC0,%r8
063bb254 mov       $0x1C,%edx
063bb259 call      0x0000`0000`063B`2030
063bb25e ud2
063bb260 mov       0x80(%rsp),%rax
063bb268 add       0x170(%rsp),%rax
063bb270 mov       %rax,0x58(%rsp)
063bb275 setb      %al
063bb278 test      $1,%al
063bb27a jne       0x0000`0000`063B`B2A4
063bb27c mov       0x90(%rsp),%rdx
063bb284 mov       0x88(%rsp),%rcx
063bb28c mov       0x58(%rsp),%rax
063bb291 mov       %rax,0x170(%rsp)
063bb299 call      0x0000`0000`063B`FE30
063bb29e mov       %al,0x57(%rsp)
063bb2a2 jmp       0x0000`0000`063B`B2BE
063bb2a4 lea       0x63C`E6B0,%rcx
063bb2ab lea       0x63C`EBD8,%r8
063bb2b2 mov       $0x1C,%edx
063bb2b7 call      0x0000`0000`063B`2030
063bb2bc ud2
063bb2be mov       0x57(%rsp),%al
063bb2c2 xor       $0xFF,%al
063bb2c4 test      $1,%al
063bb2c6 jne       0x0000`0000`063B`B2CD
063bb2c8 jmp       0x0000`0000`063B`B045
063bb2cd mov       0x90(%rsp),%rdx
063bb2d5 mov       0x88(%rsp),%rcx
063bb2dd movq      $0,0x228(%rsp)
063bb2e9 call      0x0000`0000`063C`4E80
063bb2ee mov       %rax,0x40(%rsp)
063bb2f3 mov       %rdx,0x48(%rsp)
063bb2f8 mov       0x48(%rsp),%rax
063bb2fd mov       0x40(%rsp),%rcx
063bb302 mov       %rcx,0x230(%rsp)
063bb30a mov       %rax,0x238(%rsp)
063bb312 lea       0x230(%rsp),%rcx
063bb31a call      0x0000`0000`063C`7030
063bb31f mov       %rax,0x240(%rsp)
063bb327 mov       0x240(%rsp),%rax
063bb32f test      %rax,%rax
063bb332 setne     %al
063bb335 movzbl    %al,%eax
063bb338 je        0x0000`0000`063B`B340
063bb33a jmp       0x0000`0000`063B`B33C
063bb33c jmp       0x0000`0000`063B`B354
063bb33e ud2
063bb340 mov       0x228(%rsp),%rcx
063bb348 call      0x0000`0000`063B`B450
063bb34d mov       %rax,0x38(%rsp)
063bb352 jmp       0x0000`0000`063B`B3B6
063bb354 mov       0x240(%rsp),%rax
063bb35c mov       (%rax),%rcx
063bb35f mov       %rcx,0x2D0(%rsp)
063bb367 call      0x0000`0000`063B`B400
063bb36c mov       %rax,0x30(%rsp)
063bb371 mov       0x30(%rsp),%rax
063bb376 add       0x228(%rsp),%rax
063bb37e mov       %rax,0x28(%rsp)
063bb383 setb      %al
063bb386 test      $1,%al
063bb388 jne       0x0000`0000`063B`B39C
063bb38a mov       0x28(%rsp),%rax
063bb38f mov       %rax,0x228(%rsp)
063bb397 jmp       0x0000`0000`063B`B312
063bb39c lea       0x63C`E6B0,%rcx
063bb3a3 lea       0x63C`EBF0,%r8
063bb3aa mov       $0x1C,%edx
063bb3af call      0x0000`0000`063B`2030
063bb3b4 ud2
063bb3b6 mov       0x38(%rsp),%rax
063bb3bb add       0x170(%rsp),%rax
063bb3c3 mov       %rax,0x20(%rsp)
063bb3c8 setb      %al
063bb3cb test      $1,%al
063bb3cd jne       0x0000`0000`063B`B3E1
063bb3cf mov       0x20(%rsp),%rax
063bb3d4 mov       %rax,0x170(%rsp)
063bb3dc jmp       0x0000`0000`063B`B07B
063bb3e1 lea       0x63C`E6B0,%rcx
063bb3e8 lea       0x63C`EC08,%r8
063bb3ef mov       $0x1C,%edx
063bb3f4 call      0x0000`0000`063B`2030
063bb3f9 ud2

core::str::count::contains_non_continuation_byte:
063bb400 sub       $0x20,%rsp
063bb404 mov       %rcx,%rax
063bb407 mov       %rax,8(%rsp)
063bb40c mov       %rax,0x18(%rsp)
063bb411 xor       $0xFFFF`FFFF`FFFF`FFFF,%rax
063bb415 shr       $7,%rax
063bb419 mov       %rax,0x10(%rsp)
063bb41e mov       8(%rsp),%rax
063bb423 shr       $6,%rax
063bb427 mov       %rax,(%rsp)
063bb42b mov       (%rsp),%rcx
063bb42f mov       0x10(%rsp),%rax
063bb434 or        %rcx,%rax
063bb437 movabs    $0x101`0101`0101`0101,%rcx
063bb441 and       %rcx,%rax
063bb444 add       $0x20,%rsp
063bb448 ret

core::str::count::sum_bytes_in_usize:
063bb450 sub       $0x68,%rsp
063bb454 mov       %rcx,0x48(%rsp)
063bb459 movabs    $0xFF`00FF`00FF`00FF,%rdx
063bb463 mov       %rcx,%rax
063bb466 and       %rdx,%rax
063bb469 mov       %rax,0x38(%rsp)
063bb46e shr       $8,%rcx
063bb472 mov       %rcx,0x40(%rsp)
063bb477 mov       0x38(%rsp),%rax
063bb47c mov       0x40(%rsp),%rcx
063bb481 movabs    $0xFF`00FF`00FF`00FF,%rdx
063bb48b and       %rdx,%rcx
063bb48e add       %rcx,%rax
063bb491 mov       %rax,0x30(%rsp)
063bb496 setb      %al
063bb499 test      $1,%al
063bb49b jne       0x0000`0000`063B`B4D0
063bb49d mov       0x30(%rsp),%rax
063bb4a2 mov       %rax,0x50(%rsp)
063bb4a7 mov       %rax,0x58(%rsp)
063bb4ac movabs    $0x1`0001`0001`0001,%rcx
063bb4b6 mov       %rcx,0x60(%rsp)
063bb4bb movabs    $0x1`0001`0001`0001,%rcx
063bb4c5 imul      %rcx,%rax
063bb4c9 mov       %rax,0x28(%rsp)
063bb4ce jmp       0x0000`0000`063B`B4EA
063bb4d0 lea       0x63C`E6B0,%rcx
063bb4d7 lea       0x63C`EC20,%r8
063bb4de mov       $0x1C,%edx
063bb4e3 call      0x0000`0000`063B`2030
063bb4e8 ud2
063bb4ea mov       0x28(%rsp),%rax
063bb4ef shr       $0x30,%rax
063bb4f3 mov       %rax,0x20(%rsp)
063bb4f8 mov       0x20(%rsp),%rax
063bb4fd add       $0x68,%rsp
063bb501 ret

core::str::count::char_count_general_case:
063bb510 sub       $0x58,%rsp
063bb514 mov       %rcx,0x48(%rsp)
063bb519 mov       %rdx,0x50(%rsp)
063bb51e call      0x0000`0000`063C`01E0
063bb523 mov       %rax,0x38(%rsp)
063bb528 mov       %rdx,0x40(%rsp)
063bb52d mov       0x40(%rsp),%rdx
063bb532 mov       0x38(%rsp),%rcx
063bb537 call      0x0000`0000`063C`4D00
063bb53c mov       %rax,0x28(%rsp)
063bb541 mov       %rdx,0x30(%rsp)
063bb546 mov       0x30(%rsp),%rdx
063bb54b mov       0x28(%rsp),%rcx
063bb550 call      0x0000`0000`063C`4C00
063bb555 mov       %rax,0x20(%rsp)
063bb55a mov       0x20(%rsp),%rax
063bb55f add       $0x58,%rsp
063bb563 ret

core::str::count::char_count_general_case::closure$0:
063bb570 sub       $0x48,%rsp
063bb574 mov       %rcx,0x30(%rsp)
063bb579 mov       %rdx,0x38(%rsp)
063bb57e mov       (%rdx),%rax
063bb581 mov       (%rax),%cl
063bb583 mov       %cl,0x47(%rsp)
063bb587 call      0x0000`0000`063B`3840
063bb58c mov       %al,0x2F(%rsp)
063bb590 mov       0x2F(%rsp),%al
063bb594 xor       $0xFF,%al
063bb596 and       $1,%al
063bb598 movzbl    %al,%eax
063bb59b add       $0x48,%rsp
063bb59f ret

core::str::iter::impl$0::next:
063bb5a0 sub       $0x38,%rsp
063bb5a4 mov       %rcx,0x30(%rsp)
063bb5a9 call      0x0000`0000`063B`3860
063bb5ae mov       %eax,0x28(%rsp)
063bb5b2 mov       %edx,0x2C(%rsp)
063bb5b6 mov       0x2C(%rsp),%edx
063bb5ba mov       0x28(%rsp),%ecx
063bb5be call      0x0000`0000`063B`1BB0
063bb5c3 mov       %eax,0x24(%rsp)
063bb5c7 mov       0x24(%rsp),%eax
063bb5cb add       $0x38,%rsp
063bb5cf ret

core::str::iter::impl$0::next::closure$0:
063bb5d0 sub       $0x38,%rsp
063bb5d4 mov       %ecx,0x34(%rsp)
063bb5d8 call      0x0000`0000`063B`C960
063bb5dd mov       %eax,0x2C(%rsp)
063bb5e1 mov       0x2C(%rsp),%eax
063bb5e5 add       $0x38,%rsp
063bb5e9 ret

core::str::iter::impl$0::count:
063bb5f0 sub       $0x48,%rsp
063bb5f4 mov       %rcx,0x38(%rsp)
063bb5f9 mov       %rdx,0x40(%rsp)
063bb5fe lea       0x38(%rsp),%rcx
063bb603 call      0x0000`0000`063B`B630
063bb608 mov       %rax,0x28(%rsp)
063bb60d mov       %rdx,0x30(%rsp)
063bb612 mov       0x30(%rsp),%rdx
063bb617 mov       0x28(%rsp),%rcx
063bb61c call      0x0000`0000`063B`AC90
063bb621 mov       %rax,0x20(%rsp)
063bb626 mov       0x20(%rsp),%rax
063bb62b add       $0x48,%rsp
063bb62f ret

core::str::iter::Chars::as_str:
063bb630 sub       $0x48,%rsp
063bb634 mov       %rcx,0x40(%rsp)
063bb639 call      0x0000`0000`063C`55A0
063bb63e mov       %rax,0x30(%rsp)
063bb643 mov       %rdx,0x38(%rsp)
063bb648 mov       0x38(%rsp),%rdx
063bb64d mov       0x30(%rsp),%rcx
063bb652 call      0x0000`0000`063B`6370
063bb657 mov       %rax,0x20(%rsp)
063bb65c mov       %rdx,0x28(%rsp)
063bb661 mov       0x28(%rsp),%rdx
063bb666 mov       0x20(%rsp),%rax
063bb66b add       $0x48,%rsp
063bb66f ret

core::str::iter::impl$5::next:
063bb670 sub       $0x138,%rsp
063bb677 mov       %rcx,0x60(%rsp)
063bb67c mov       %rcx,0xA0(%rsp)
063bb684 mov       %rcx,%rax
063bb687 add       $8,%rax
063bb68b mov       %rax,0x108(%rsp)
063bb693 mov       8(%rcx),%rcx
063bb697 mov       %rcx,0x58(%rsp)
063bb69c mov       %rcx,0x110(%rsp)
063bb6a4 call      0x0000`0000`063C`28D0
063bb6a9 mov       0x58(%rsp),%rcx
063bb6ae mov       %rax,%rdx
063bb6b1 mov       0x60(%rsp),%rax
063bb6b6 mov       %rdx,0x130(%rsp)
063bb6be movq      $1,0x118(%rsp)
063bb6ca mov       0x10(%rax),%rax
063bb6ce mov       %rax,0x68(%rsp)
063bb6d3 call      0x0000`0000`063C`28D0
063bb6d8 mov       %rax,%rcx
063bb6db mov       0x68(%rsp),%rax
063bb6e0 sub       %rcx,%rax
063bb6e3 mov       %rax,0x120(%rsp)
063bb6eb mov       0x120(%rsp),%rax
063bb6f3 mov       %rax,0x128(%rsp)
063bb6fb mov       %rax,0x100(%rsp)
063bb703 mov       0x100(%rsp),%rax
063bb70b mov       %rax,0x70(%rsp)
063bb710 mov       %rax,0xA8(%rsp)
063bb718 mov       0x60(%rsp),%rcx
063bb71d add       $8,%rcx
063bb721 call      0x0000`0000`063B`B5A0
063bb726 mov       %eax,0x8C(%rsp)
063bb72d mov       0x8C(%rsp),%eax
063bb734 add       $0xFFEF`0000,%eax
063bb739 setne     %al
063bb73c movzbl    %al,%eax
063bb73f je        0x0000`0000`063B`B747
063bb741 jmp       0x0000`0000`063B`B743
063bb743 jmp       0x0000`0000`063B`B757
063bb745 ud2
063bb747 movl      $0x11`0000,0x80(%rsp)
063bb752 jmp       0x0000`0000`063B`B8BC
063bb757 mov       0x60(%rsp),%rax
063bb75c mov       0x8C(%rsp),%ecx
063bb763 mov       %ecx,0x34(%rsp)
063bb767 mov       %ecx,0xB4(%rsp)
063bb76e mov       (%rax),%rcx
063bb771 mov       %rcx,0x38(%rsp)
063bb776 mov       %rcx,0xB8(%rsp)
063bb77e mov       %rax,%rcx
063bb781 add       $8,%rcx
063bb785 mov       %rcx,0xD0(%rsp)
063bb78d mov       8(%rax),%rcx
063bb791 mov       %rcx,0x40(%rsp)
063bb796 mov       %rcx,0xD8(%rsp)
063bb79e call      0x0000`0000`063C`28D0
063bb7a3 mov       0x40(%rsp),%rcx
063bb7a8 mov       %rax,%rdx
063bb7ab mov       0x60(%rsp),%rax
063bb7b0 mov       %rdx,0xF8(%rsp)
063bb7b8 movq      $1,0xE0(%rsp)
063bb7c4 mov       0x10(%rax),%rax
063bb7c8 mov       %rax,0x48(%rsp)
063bb7cd call      0x0000`0000`063C`28D0
063bb7d2 mov       %rax,%rcx
063bb7d5 mov       0x48(%rsp),%rax
063bb7da sub       %rcx,%rax
063bb7dd mov       %rax,0xE8(%rsp)
063bb7e5 mov       0xE8(%rsp),%rax
063bb7ed mov       %rax,0xF0(%rsp)
063bb7f5 mov       %rax,0xC8(%rsp)
063bb7fd mov       0xC8(%rsp),%rax
063bb805 mov       %rax,0x50(%rsp)
063bb80a mov       %rax,0xC0(%rsp)
063bb812 mov       0x50(%rsp),%rcx
063bb817 mov       0x70(%rsp),%rax
063bb81c sub       %rcx,%rax
063bb81f mov       %rax,0x28(%rsp)
063bb824 setb      %al
063bb827 test      $1,%al
063bb829 jne       0x0000`0000`063B`B846
063bb82b mov       0x60(%rsp),%rcx
063bb830 mov       0x28(%rsp),%rax
063bb835 add       (%rcx),%rax
063bb838 mov       %rax,0x20(%rsp)
063bb83d setb      %al
063bb840 test      $1,%al
063bb842 jne       0x0000`0000`063B`B8A2
063bb844 jmp       0x0000`0000`063B`B860
063bb846 lea       0x63C`E6D0,%rcx
063bb84d lea       0x63C`ECB0,%r8
063bb854 mov       $0x21,%edx
063bb859 call      0x0000`0000`063B`2030
063bb85e ud2
063bb860 mov       0x34(%rsp),%eax
063bb864 mov       0x38(%rsp),%rcx
063bb869 mov       0x60(%rsp),%rdx
063bb86e mov       0x20(%rsp),%r8
063bb873 mov       %r8,(%rdx)
063bb876 mov       %rcx,0x90(%rsp)
063bb87e mov       %eax,0x98(%rsp)
063bb885 mov       0x90(%rsp),%rcx
063bb88d mov       0x98(%rsp),%eax
063bb894 mov       %rcx,0x78(%rsp)
063bb899 mov       %eax,0x80(%rsp)
063bb8a0 jmp       0x0000`0000`063B`B8BC
063bb8a2 lea       0x63C`E6B0,%rcx
063bb8a9 lea       0x63C`ECC8,%r8
063bb8b0 mov       $0x1C,%edx
063bb8b5 call      0x0000`0000`063B`2030
063bb8ba ud2
063bb8bc mov       0x78(%rsp),%rax
063bb8c1 mov       0x80(%rsp),%edx
063bb8c8 add       $0x138,%rsp
063bb8cf ret

core::clone::impls::impl$5::clone:
063bb8d0 push      %rax
063bb8d1 mov       %rcx,(%rsp)
063bb8d5 mov       (%rcx),%rax
063bb8d8 pop       %rcx
063bb8d9 ret

core::clone::impls::impl$6::clone:
063bb8e0 push      %rax
063bb8e1 mov       %rcx,(%rsp)
063bb8e5 mov       (%rcx),%al
063bb8e7 pop       %rcx
063bb8e8 ret

core::ops::bit::impl$311::shl:
063bb8f0 sub       $0x38,%rsp
063bb8f4 mov       %edx,0x28(%rsp)
063bb8f8 mov       %ecx,%edx
063bb8fa mov       0x28(%rsp),%ecx
063bb8fe mov       %edx,0x30(%rsp)
063bb902 mov       %ecx,0x34(%rsp)
063bb906 mov       %ecx,%eax
063bb908 and       $0xFFFF`FFE0,%eax
063bb90b cmp       $0,%eax
063bb90e setne     %al
063bb911 and       $0x1F,%ecx
063bb914 shl       %cl,%edx
063bb916 mov       %edx,0x2C(%rsp)
063bb91a test      $1,%al
063bb91c jne       0x0000`0000`063B`B927
063bb91e mov       0x2C(%rsp),%eax
063bb922 add       $0x38,%rsp
063bb926 ret
063bb927 lea       0x63C`ED70,%rcx
063bb92e lea       0x63C`ED58,%r8
063bb935 mov       $0x23,%edx
063bb93a call      0x0000`0000`063B`2030
063bb93f ud2

core::ops::bit::impl$312::shl:
063bb950 sub       $0x38,%rsp
063bb954 mov       %rcx,0x28(%rsp)
063bb959 mov       %edx,0x34(%rsp)
063bb95d mov       (%rcx),%ecx
063bb95f call      0x0000`0000`063B`B8F0
063bb964 mov       %eax,0x24(%rsp)
063bb968 mov       0x24(%rsp),%eax
063bb96c add       $0x38,%rsp
063bb970 ret

core::iter::traits::accum::impl$48::sum<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> > >:
063bb980 sub       $0x38,%rsp
063bb984 mov       %rcx,0x28(%rsp)
063bb989 mov       %rdx,0x30(%rsp)
063bb98e xor       %eax,%eax
063bb990 mov       %eax,%r8d
063bb993 call      0x0000`0000`063B`90D0
063bb998 mov       %rax,0x20(%rsp)
063bb99d mov       0x20(%rsp),%rax
063bb9a2 add       $0x38,%rsp
063bb9a6 ret

core::iter::traits::accum::impl$48::sum::closure$0<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> > >:
063bb9b0 sub       $0x48,%rsp
063bb9b4 mov       %rcx,0x30(%rsp)
063bb9b9 mov       %rdx,0x38(%rsp)
063bb9be mov       %r8,0x40(%rsp)
063bb9c3 add       %r8,%rdx
063bb9c6 mov       %rdx,0x28(%rsp)
063bb9cb setb      %al
063bb9ce test      $1,%al
063bb9d0 jne       0x0000`0000`063B`B9DC
063bb9d2 mov       0x28(%rsp),%rax
063bb9d7 add       $0x48,%rsp
063bb9db ret
063bb9dc lea       0x63C`E6B0,%rcx
063bb9e3 lea       0x63C`EE18,%r8
063bb9ea mov       $0x1C,%edx
063bb9ef call      0x0000`0000`063B`2030
063bb9f4 ud2

core::fmt::Arguments::new_v1:
063bba00 sub       $0xC8,%rsp
063bba07 mov       %r9,0x30(%rsp)
063bba0c mov       %r8,0x38(%rsp)
063bba11 mov       %rdx,0x40(%rsp)
063bba16 mov       %rcx,0x48(%rsp)
063bba1b mov       %rcx,0x50(%rsp)
063bba20 mov       0xF0(%rsp),%rax
063bba28 mov       %rax,0x58(%rsp)
063bba2d mov       %rdx,0xA8(%rsp)
063bba35 mov       %r8,0xB0(%rsp)
063bba3d mov       %r9,0xB8(%rsp)
063bba45 mov       %rax,0xC0(%rsp)
063bba4d cmp       %rax,%r8
063bba50 jb        0x0000`0000`063B`BA69
063bba52 mov       0x58(%rsp),%rax
063bba57 add       $1,%rax
063bba5b mov       %rax,0x28(%rsp)
063bba60 setb      %al
063bba63 test      $1,%al
063bba65 jne       0x0000`0000`063B`BA93
063bba67 jmp       0x0000`0000`063B`BA7B
063bba69 movb      $1,0x67(%rsp)
063bba6e testb     $1,0x67(%rsp)
063bba73 jne       0x0000`0000`063B`BB06
063bba79 jmp       0x0000`0000`063B`BAAD
063bba7b mov       0x38(%rsp),%rax
063bba80 mov       0x28(%rsp),%rcx
063bba85 cmp       %rcx,%rax
063bba88 seta      %al
063bba8b and       $1,%al
063bba8d mov       %al,0x67(%rsp)
063bba91 jmp       0x0000`0000`063B`BA6E
063bba93 lea       0x63C`EEC0,%rcx
063bba9a lea       0x63C`EEA8,%r8
063bbaa1 mov       $0x1C,%edx
063bbaa6 call      0x0000`0000`063B`2030
063bbaab ud2
063bbaad mov       0x50(%rsp),%rax
063bbab2 mov       0x48(%rsp),%rcx
063bbab7 mov       0x58(%rsp),%rdx
063bbabc mov       0x30(%rsp),%r8
063bbac1 mov       0x38(%rsp),%r9
063bbac6 mov       0x40(%rsp),%r10
063bbacb movq      $0,0x98(%rsp)
063bbad7 mov       %r10,(%rcx)
063bbada mov       %r9,8(%rcx)
063bbade mov       0x98(%rsp),%r10
063bbae6 mov       0xA0(%rsp),%r9
063bbaee mov       %r10,0x10(%rcx)
063bbaf2 mov       %r9,0x18(%rcx)
063bbaf6 mov       %r8,0x20(%rcx)
063bbafa mov       %rdx,0x28(%rcx)
063bbafe add       $0xC8,%rsp
063bbb05 ret
063bbb06 lea       0x68(%rsp),%rcx
063bbb0b lea       0x63C`EEE8,%rdx
063bbb12 mov       $1,%r8d
063bbb18 lea       0x63C`EEF8,%r9
063bbb1f xor       %eax,%eax
063bbb21 movq      $0,0x20(%rsp)
063bbb2a call      0x0000`0000`063B`BA00
063bbb2f lea       0x63C`EEF8,%rdx
063bbb36 lea       0x68(%rsp),%rcx
063bbb3b call      0x0000`0000`063B`2140
063bbb40 ud2

core::iter::range::impl$3::next<u64>:
063bbb50 sub       $0x38,%rsp
063bbb54 mov       %rcx,0x30(%rsp)
063bbb59 call      0x0000`0000`063B`BBA0
063bbb5e mov       %rax,0x20(%rsp)
063bbb63 mov       %rdx,0x28(%rsp)
063bbb68 mov       0x28(%rsp),%rdx
063bbb6d mov       0x20(%rsp),%rax
063bbb72 add       $0x38,%rsp
063bbb76 ret

core::iter::traits::collect::impl$0::into_iter<core::ops::range::Range<u64> >:
063bbb80 sub       $0x10,%rsp
063bbb84 mov       %rcx,%rax
063bbb87 mov       %rax,(%rsp)
063bbb8b mov       %rdx,8(%rsp)
063bbb90 add       $0x10,%rsp
063bbb94 ret

core::iter::range::impl$2::spec_next<u64>:
063bbba0 sub       $0x68,%rsp
063bbba4 mov       %rcx,%rdx
063bbba7 mov       %rdx,0x38(%rsp)
063bbbac mov       %rdx,0x58(%rsp)
063bbbb1 mov       %rdx,%rcx
063bbbb4 add       $8,%rdx
063bbbb8 call      0x0000`0000`063C`AF10
063bbbbd mov       %al,0x47(%rsp)
063bbbc1 mov       0x47(%rsp),%al
063bbbc5 test      $1,%al
063bbbc7 jne       0x0000`0000`063B`BBD6
063bbbc9 jmp       0x0000`0000`063B`BBCB
063bbbcb movq      $0,0x48(%rsp)
063bbbd4 jmp       0x0000`0000`063B`BC25
063bbbd6 mov       0x38(%rsp),%rcx
063bbbdb call      0x0000`0000`063C`AF30
063bbbe0 mov       %rax,0x30(%rsp)
063bbbe5 mov       0x30(%rsp),%rcx
063bbbea mov       $1,%edx
063bbbef call      0x0000`0000`063C`AF40
063bbbf4 mov       %rax,0x28(%rsp)
063bbbf9 mov       %rax,0x60(%rsp)
063bbbfe mov       0x28(%rsp),%rdx
063bbc03 mov       0x38(%rsp),%rcx
063bbc08 call      0x0000`0000`063C`AF80
063bbc0d mov       %rax,0x20(%rsp)
063bbc12 mov       0x20(%rsp),%rax
063bbc17 mov       %rax,0x50(%rsp)
063bbc1c movq      $1,0x48(%rsp)
063bbc25 mov       0x48(%rsp),%rax
063bbc2a mov       0x50(%rsp),%rdx
063bbc2f add       $0x68,%rsp
063bbc33 ret

core::ptr::write_volatile<u64>:
063bbc40 sub       $0x48,%rsp
063bbc44 mov       %rdx,0x20(%rsp)
063bbc49 mov       %rcx,0x28(%rsp)
063bbc4e mov       %rcx,0x38(%rsp)
063bbc53 mov       %rdx,0x40(%rsp)
063bbc58 call      0x0000`0000`063C`AFC0
063bbc5d mov       %al,0x37(%rsp)
063bbc61 mov       0x37(%rsp),%al
063bbc65 xor       $0xFF,%al
063bbc67 test      $1,%al
063bbc69 jne       0x0000`0000`063B`BC7A
063bbc6b mov       0x28(%rsp),%rax
063bbc70 mov       0x20(%rsp),%rcx
063bbc75 mov       %rcx,(%rax)
063bbc78 jmp       0x0000`0000`063B`BC7E
063bbc7a ud2
063bbc7c ud2
063bbc7e add       $0x48,%rsp
063bbc82 ret

core::ptr::read<u64>:
063bbc90 sub       $0x40,%rsp
063bbc94 mov       %rcx,8(%rsp)
063bbc99 mov       %rcx,0x18(%rsp)
063bbc9e mov       0x30(%rsp),%rax
063bbca3 mov       %rax,0x10(%rsp)
063bbca8 lea       0x10(%rsp),%rax
063bbcad mov       %rax,0x20(%rsp)
063bbcb2 mov       8(%rsp),%rax
063bbcb7 mov       (%rax),%rax
063bbcba mov       %rax,0x10(%rsp)
063bbcbf mov       0x10(%rsp),%rax
063bbcc4 mov       %rax,(%rsp)
063bbcc8 mov       %rax,0x28(%rsp)
063bbccd mov       %rax,0x38(%rsp)
063bbcd2 mov       (%rsp),%rax
063bbcd6 add       $0x40,%rsp
063bbcda ret

uefi::table::runtime::RuntimeServices::reset:
063bbce0 sub       $0xA8,%rsp
063bbce7 mov       %r8,0x38(%rsp)
063bbcec mov       %edx,0x44(%rsp)
063bbcf0 mov       %rcx,0x48(%rsp)
063bbcf5 mov       0xD0(%rsp),%rax
063bbcfd mov       %r9,0x50(%rsp)
063bbd02 mov       %rax,0x58(%rsp)
063bbd07 mov       %rcx,0x70(%rsp)
063bbd0c mov       %edx,0x7C(%rsp)
063bbd10 mov       %r8,0x80(%rsp)
063bbd18 mov       0x50(%rsp),%rax
063bbd1d test      %rax,%rax
063bbd20 setne     %al
063bbd23 movzbl    %al,%eax
063bbd26 je        0x0000`0000`063B`BD2E
063bbd28 jmp       0x0000`0000`063B`BD2A
063bbd2a jmp       0x0000`0000`063B`BD30
063bbd2c ud2
063bbd2e jmp       0x0000`0000`063B`BD9D
063bbd30 mov       0x50(%rsp),%rcx
063bbd35 mov       0x58(%rsp),%rdx
063bbd3a mov       %rdx,0x28(%rsp)
063bbd3f mov       %rcx,0x88(%rsp)
063bbd47 mov       %rdx,0x90(%rsp)
063bbd4f call      0x0000`0000`063C`0180
063bbd54 mov       %rax,0x30(%rsp)
063bbd59 mov       0x30(%rsp),%rax
063bbd5e mov       0x28(%rsp),%rcx
063bbd63 mov       %rcx,0x60(%rsp)
063bbd68 mov       %rax,0x68(%rsp)
063bbd6d mov       0x38(%rsp),%rdx
063bbd72 mov       0x44(%rsp),%ecx
063bbd76 mov       0x48(%rsp),%rax
063bbd7b mov       0x60(%rsp),%r8
063bbd80 mov       %r8,0x98(%rsp)
063bbd88 mov       0x68(%rsp),%r9
063bbd8d mov       %r9,0xA0(%rsp)
063bbd95 mov       0x68(%rax),%rax
063bbd99 call      *%rax
063bbd9b ud2
063bbd9d movq      $0,0x60(%rsp)
063bbda6 movq      $0,0x68(%rsp)
063bbdaf jmp       0x0000`0000`063B`BD6D

core::ptr::drop_in_place<log::SetLoggerError>:
063bbdc0 push      %rax
063bbdc1 mov       %rcx,(%rsp)
063bbdc5 pop       %rax
063bbdc6 ret

core::ptr::drop_in_place<uefi::logger::Logger>:
063bbdd0 push      %rax
063bbdd1 mov       %rcx,(%rsp)
063bbdd5 pop       %rax
063bbdd6 ret

compiler_builtins::mem::memcpy::memcpy:
063bbde0 sub       $0x48,%rsp
063bbde4 mov       %rcx,0x30(%rsp)
063bbde9 mov       %rdx,0x38(%rsp)
063bbdee mov       %r8,0x40(%rsp)
063bbdf3 call      0x0000`0000`063C`9CF0
063bbdf8 mov       %rax,0x28(%rsp)
063bbdfd mov       0x28(%rsp),%rax
063bbe02 add       $0x48,%rsp
063bbe06 ret

compiler_builtins::mem::memset::memset:
063bbe10 sub       $0x48,%rsp
063bbe14 mov       %rcx,0x30(%rsp)
063bbe19 mov       %edx,0x3C(%rsp)
063bbe1d mov       %r8,0x40(%rsp)
063bbe22 call      0x0000`0000`063C`9D50
063bbe27 mov       %rax,0x28(%rsp)
063bbe2c mov       0x28(%rsp),%rax
063bbe31 add       $0x48,%rsp
063bbe35 ret

compiler_builtins::mem::memcmp::memcmp:
063bbe40 sub       $0x48,%rsp
063bbe44 mov       %rcx,0x30(%rsp)
063bbe49 mov       %rdx,0x38(%rsp)
063bbe4e mov       %r8,0x40(%rsp)
063bbe53 call      0x0000`0000`063C`9E00
063bbe58 mov       %eax,0x2C(%rsp)
063bbe5c mov       0x2C(%rsp),%eax
063bbe60 add       $0x48,%rsp
063bbe64 ret

core::iter::adapters::enumerate::impl$1::next<core::slice::iter::Iter<u16> >:
063bbe70 sub       $0x98,%rsp
063bbe77 mov       %rcx,0x38(%rsp)
063bbe7c mov       %rcx,0x70(%rsp)
063bbe81 call      0x0000`0000`063C`B150
063bbe86 mov       %rax,0x40(%rsp)
063bbe8b mov       0x40(%rsp),%rcx
063bbe90 call      0x0000`0000`063C`2190
063bbe95 mov       %rax,0x58(%rsp)
063bbe9a mov       0x58(%rsp),%rax
063bbe9f test      %rax,%rax
063bbea2 sete      %al
063bbea5 movzbl    %al,%eax
063bbea8 jne       0x0000`0000`063B`BEB0
063bbeaa jmp       0x0000`0000`063B`BEAC
063bbeac jmp       0x0000`0000`063B`BEF6
063bbeae ud2
063bbeb0 mov       0x38(%rsp),%rax
063bbeb5 mov       0x58(%rsp),%rcx
063bbeba mov       %rcx,0x20(%rsp)
063bbebf mov       %rcx,0x80(%rsp)
063bbec7 mov       %rcx,0x88(%rsp)
063bbecf mov       0x10(%rax),%rcx
063bbed3 mov       %rcx,0x28(%rsp)
063bbed8 mov       %rcx,0x90(%rsp)
063bbee0 mov       0x10(%rax),%rax
063bbee4 add       $1,%rax
063bbee8 mov       %rax,0x30(%rsp)
063bbeed setb      %al
063bbef0 test      $1,%al
063bbef2 jne       0x0000`0000`063B`BF4F
063bbef4 jmp       0x0000`0000`063B`BF17
063bbef6 call      0x0000`0000`063C`2200
063bbefb mov       %rdx,0x50(%rsp)
063bbf00 mov       %rax,0x48(%rsp)
063bbf05 mov       0x48(%rsp),%rax
063bbf0a mov       0x50(%rsp),%rdx
063bbf0f add       $0x98,%rsp
063bbf16 ret
063bbf17 mov       0x20(%rsp),%rax
063bbf1c mov       0x28(%rsp),%rcx
063bbf21 mov       0x38(%rsp),%rdx
063bbf26 mov       0x30(%rsp),%r8
063bbf2b mov       %r8,0x10(%rdx)
063bbf2f mov       %rcx,0x60(%rsp)
063bbf34 mov       %rax,0x68(%rsp)
063bbf39 mov       0x60(%rsp),%rcx
063bbf3e mov       0x68(%rsp),%rax
063bbf43 mov       %rcx,0x48(%rsp)
063bbf48 mov       %rax,0x50(%rsp)
063bbf4d jmp       0x0000`0000`063B`BF05
063bbf4f lea       0x63C`EFB0,%rcx
063bbf56 lea       0x63C`EF98,%r8
063bbf5d mov       $0x1C,%edx
063bbf62 call      0x0000`0000`063B`2030
063bbf67 ud2

core::ptr::non_null::NonNull<uefi::table::boot::BootServices>::new_unchecked<uefi::table::boot::BootServices>:
063bbf70 sub       $0x10,%rsp
063bbf74 mov       %rcx,8(%rsp)
063bbf79 mov       %rcx,(%rsp)
063bbf7d mov       (%rsp),%rax
063bbf81 add       $0x10,%rsp
063bbf85 ret

core::ptr::non_null::NonNull<uefi::proto::console::text::output::Output>::new_unchecked<uefi::proto::console::text::output::Output>:
063bbf90 sub       $0x10,%rsp
063bbf94 mov       %rcx,8(%rsp)
063bbf99 mov       %rcx,(%rsp)
063bbf9d mov       (%rsp),%rax
063bbfa1 add       $0x10,%rsp
063bbfa5 ret

core::ptr::non_null::NonNull<uefi::proto::console::text::output::Output>::new<uefi::proto::console::text::output::Output>:
063bbfb0 sub       $0x48,%rsp
063bbfb4 mov       %rcx,0x28(%rsp)
063bbfb9 mov       %rcx,0x40(%rsp)
063bbfbe call      0x0000`0000`063B`C190
063bbfc3 mov       %al,0x37(%rsp)
063bbfc7 mov       0x37(%rsp),%al
063bbfcb xor       $0xFF,%al
063bbfcd test      $1,%al
063bbfcf jne       0x0000`0000`063B`BFDC
063bbfd1 movq      $0,0x38(%rsp)
063bbfda jmp       0x0000`0000`063B`BFF5
063bbfdc mov       0x28(%rsp),%rcx
063bbfe1 call      0x0000`0000`063B`BF90
063bbfe6 mov       %rax,0x20(%rsp)
063bbfeb mov       0x20(%rsp),%rax
063bbff0 mov       %rax,0x38(%rsp)
063bbff5 mov       0x38(%rsp),%rax
063bbffa add       $0x48,%rsp
063bbffe ret

core::ptr::non_null::NonNull<uefi::table::boot::BootServices>::new<uefi::table::boot::BootServices>:
063bc000 sub       $0x48,%rsp
063bc004 mov       %rcx,0x28(%rsp)
063bc009 mov       %rcx,0x40(%rsp)
063bc00e call      0x0000`0000`063B`8C80
063bc013 mov       %al,0x37(%rsp)
063bc017 mov       0x37(%rsp),%al
063bc01b xor       $0xFF,%al
063bc01d test      $1,%al
063bc01f jne       0x0000`0000`063B`C02C
063bc021 movq      $0,0x38(%rsp)
063bc02a jmp       0x0000`0000`063B`C045
063bc02c mov       0x28(%rsp),%rcx
063bc031 call      0x0000`0000`063B`BF70
063bc036 mov       %rax,0x20(%rsp)
063bc03b mov       0x20(%rsp),%rax
063bc040 mov       %rax,0x38(%rsp)
063bc045 mov       0x38(%rsp),%rax
063bc04a add       $0x48,%rsp
063bc04e ret

core::ptr::non_null::NonNull<uefi::proto::console::text::output::Output>::as_mut<uefi::proto::console::text::output::Output>:
063bc050 sub       $0x38,%rsp
063bc054 mov       %rcx,0x30(%rsp)
063bc059 mov       (%rcx),%rcx
063bc05c call      0x0000`0000`063B`C070
063bc061 mov       %rax,0x28(%rsp)
063bc066 mov       0x28(%rsp),%rax
063bc06b add       $0x38,%rsp
063bc06f ret

core::ptr::non_null::NonNull<uefi::proto::console::text::output::Output>::as_ptr<uefi::proto::console::text::output::Output>:
063bc070 push      %rax
063bc071 mov       %rcx,%rax
063bc074 mov       %rax,(%rsp)
063bc078 pop       %rcx
063bc079 ret

core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<u16> >::new<core::slice::iter::Iter<u16> >:
063bc080 sub       $0x10,%rsp
063bc084 mov       %rcx,%rax
063bc087 mov       %rdx,(%rsp)
063bc08b mov       %r8,8(%rsp)
063bc090 mov       %rdx,(%rcx)
063bc093 mov       %r8,8(%rcx)
063bc097 movq      $0,0x10(%rcx)
063bc09f add       $0x10,%rsp
063bc0a3 ret

core::iter::traits::collect::impl$0::into_iter<core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<u16> > >:
063bc0b0 mov       %rcx,%rax
063bc0b3 mov       (%rdx),%r8
063bc0b6 mov       %r8,(%rcx)
063bc0b9 mov       8(%rdx),%r8
063bc0bd mov       %r8,8(%rcx)
063bc0c1 mov       0x10(%rdx),%rdx
063bc0c5 mov       %rdx,0x10(%rcx)
063bc0c9 ret

core::fmt::Write::write_char<uefi::proto::console::text::output::Output>:
063bc0d0 sub       $0x68,%rsp
063bc0d4 mov       %edx,0x3C(%rsp)
063bc0d8 mov       %rcx,0x30(%rsp)
063bc0dd mov       %rcx,0x58(%rsp)
063bc0e2 mov       %edx,0x64(%rsp)
063bc0e6 lea       0x54(%rsp),%rcx
063bc0eb xor       %edx,%edx
063bc0ed mov       $4,%r8d
063bc0f3 call      0x0000`0000`063B`BE10
063bc0f8 mov       0x3C(%rsp),%ecx
063bc0fc lea       0x54(%rsp),%rdx
063bc101 mov       $4,%r8d
063bc107 call      0x0000`0000`063C`1CC0
063bc10c mov       %rax,0x40(%rsp)
063bc111 mov       %rdx,0x48(%rsp)
063bc116 mov       0x48(%rsp),%r8
063bc11b mov       0x40(%rsp),%rdx
063bc120 mov       0x30(%rsp),%rcx
063bc125 call      0x0000`0000`063B`C2F0
063bc12a mov       %al,0x2F(%rsp)
063bc12e mov       0x2F(%rsp),%al
063bc132 and       $1,%al
063bc134 movzbl    %al,%eax
063bc137 add       $0x68,%rsp
063bc13b ret

core::fmt::Write::write_fmt<uefi::proto::console::text::output::Output>:
063bc140 sub       $0x68,%rsp
063bc144 mov       %rcx,0x30(%rsp)
063bc149 lea       0x30(%rsp),%rax
063bc14e mov       %rax,0x20(%rsp)
063bc153 lea       0x38(%rsp),%rcx
063bc158 mov       $0x30,%r8d
063bc15e call      0x0000`0000`063B`BDE0
063bc163 mov       0x20(%rsp),%rcx
063bc168 lea       0x63C`EFD0,%rdx
063bc16f lea       0x38(%rsp),%r8
063bc174 call      0x0000`0000`063B`4320
063bc179 mov       %al,0x2F(%rsp)
063bc17d mov       0x2F(%rsp),%al
063bc181 and       $1,%al
063bc183 movzbl    %al,%eax
063bc186 add       $0x68,%rsp
063bc18a ret

core::ptr::mut_ptr::impl$0::is_null<uefi::proto::console::text::output::Output>:
063bc190 sub       $0x38,%rsp
063bc194 mov       %rcx,0x30(%rsp)
063bc199 mov       %rcx,0x28(%rsp)
063bc19e mov       0x28(%rsp),%rcx
063bc1a3 xor       %eax,%eax
063bc1a5 mov       %eax,%edx
063bc1a7 call      0x0000`0000`063B`FE00
063bc1ac mov       %al,0x27(%rsp)
063bc1b0 mov       0x27(%rsp),%al
063bc1b4 and       $1,%al
063bc1b6 movzbl    %al,%eax
063bc1b9 add       $0x38,%rsp
063bc1bd ret

core::fmt::impl$0::write_char<uefi::proto::console::text::output::Output>:
063bc1c0 sub       $0x38,%rsp
063bc1c4 mov       %rcx,0x28(%rsp)
063bc1c9 mov       %edx,0x34(%rsp)
063bc1cd mov       (%rcx),%rcx
063bc1d0 call      0x0000`0000`063B`C0D0
063bc1d5 mov       %al,0x27(%rsp)
063bc1d9 mov       0x27(%rsp),%al
063bc1dd and       $1,%al
063bc1df movzbl    %al,%eax
063bc1e2 add       $0x38,%rsp
063bc1e6 ret

core::fmt::impl$0::write_fmt<uefi::proto::console::text::output::Output>:
063bc1f0 sub       $0x68,%rsp
063bc1f4 mov       %rcx,0x60(%rsp)
063bc1f9 mov       (%rcx),%rax
063bc1fc mov       %rax,0x20(%rsp)
063bc201 lea       0x30(%rsp),%rcx
063bc206 mov       $0x30,%r8d
063bc20c call      0x0000`0000`063B`BDE0
063bc211 mov       0x20(%rsp),%rcx
063bc216 lea       0x30(%rsp),%rdx
063bc21b call      0x0000`0000`063B`C140
063bc220 mov       %al,0x2F(%rsp)
063bc224 mov       0x2F(%rsp),%al
063bc228 and       $1,%al
063bc22a movzbl    %al,%eax
063bc22d add       $0x68,%rsp
063bc231 ret

core::fmt::impl$0::write_str<uefi::proto::console::text::output::Output>:
063bc240 sub       $0x48,%rsp
063bc244 mov       %rcx,0x30(%rsp)
063bc249 mov       %rdx,0x38(%rsp)
063bc24e mov       %r8,0x40(%rsp)
063bc253 mov       (%rcx),%rcx
063bc256 call      0x0000`0000`063B`C2F0
063bc25b mov       %al,0x2F(%rsp)
063bc25f mov       0x2F(%rsp),%al
063bc263 and       $1,%al
063bc265 movzbl    %al,%eax
063bc268 add       $0x48,%rsp
063bc26c ret

uefi::proto::console::text::output::Output::output_string:
063bc270 sub       $0x78,%rsp
063bc274 mov       %r8,0x38(%rsp)
063bc279 mov       %rdx,%rax
063bc27c mov       0x38(%rsp),%rdx
063bc281 mov       %rax,0x40(%rsp)
063bc286 mov       %rcx,%rax
063bc289 mov       0x40(%rsp),%rcx
063bc28e mov       %rax,0x48(%rsp)
063bc293 mov       %rax,0x60(%rsp)
063bc298 mov       %rcx,0x68(%rsp)
063bc29d mov       %rdx,0x70(%rsp)
063bc2a2 mov       8(%rax),%rax
063bc2a6 mov       %rax,0x50(%rsp)
063bc2ab call      0x0000`0000`063A`CC50
063bc2b0 mov       %rax,0x58(%rsp)
063bc2b5 mov       0x50(%rsp),%rax
063bc2ba mov       0x58(%rsp),%rdx
063bc2bf mov       0x48(%rsp),%rcx
063bc2c4 call      *%rax
063bc2c6 mov       %rax,0x30(%rsp)
063bc2cb mov       0x30(%rsp),%rcx
063bc2d0 call      0x0000`0000`063B`7630
063bc2d5 mov       %rax,0x20(%rsp)
063bc2da mov       %rdx,0x28(%rsp)
063bc2df mov       0x28(%rsp),%rdx
063bc2e4 mov       0x20(%rsp),%rax
063bc2e9 add       $0x78,%rsp
063bc2ed ret

uefi::proto::console::text::output::impl$1::write_str:
063bc2f0 sub       $0x1C8,%rsp
063bc2f7 mov       %r8,0x40(%rsp)
063bc2fc mov       %rdx,0x38(%rsp)
063bc301 mov       %rcx,0x30(%rsp)
063bc306 mov       %rcx,0x1A0(%rsp)
063bc30e mov       %rdx,0x1A8(%rsp)
063bc316 mov       %r8,0x1B0(%rsp)
063bc31e lea       0x4E(%rsp),%rcx
063bc323 xor       %edx,%edx
063bc325 mov       $0x102,%r8d
063bc32b call      0x0000`0000`063B`BE10
063bc330 mov       0x30(%rsp),%rax
063bc335 mov       0x38(%rsp),%rcx
063bc33a mov       0x40(%rsp),%rdx
063bc33f movq      $0,0x150(%rsp)
063bc34b mov       %rax,0x158(%rsp)
063bc353 lea       0x4E(%rsp),%rax
063bc358 mov       %rax,0x160(%rsp)
063bc360 lea       0x150(%rsp),%rax
063bc368 mov       %rax,0x168(%rsp)
063bc370 lea       0x158(%rsp),%rax
063bc378 mov       %rax,0x170(%rsp)
063bc380 lea       0x160(%rsp),%rax
063bc388 mov       %rax,0x178(%rsp)
063bc390 mov       0x178(%rsp),%r8
063bc398 call      0x0000`0000`063B`EC40
063bc39d mov       %al,0x4C(%rsp)
063bc3a1 mov       0x4C(%rsp),%cl
063bc3a5 call      0x0000`0000`063A`C770
063bc3aa mov       %al,0x2F(%rsp)
063bc3ae mov       0x2F(%rsp),%cl
063bc3b2 and       $1,%cl
063bc3b5 call      0x0000`0000`063B`CEE0
063bc3ba and       $1,%al
063bc3bc mov       %al,0x187(%rsp)
063bc3c3 movzbl    0x187(%rsp),%eax
063bc3cb test      $1,%al
063bc3cd je        0x0000`0000`063B`C3D5
063bc3cf jmp       0x0000`0000`063B`C3D1
063bc3d1 jmp       0x0000`0000`063B`C42B
063bc3d3 ud2
063bc3d5 lea       0x4E(%rsp),%rax
063bc3da mov       %rax,0x188(%rsp)
063bc3e2 movq      $0x81,0x190(%rsp)
063bc3ee lea       0x150(%rsp),%rax
063bc3f6 mov       %rax,0x198(%rsp)
063bc3fe mov       0x188(%rsp),%rdx
063bc406 mov       0x190(%rsp),%r8
063bc40e mov       0x198(%rsp),%r9
063bc416 lea       0x158(%rsp),%rcx
063bc41e call      0x0000`0000`063B`C450
063bc423 and       $1,%al
063bc425 mov       %al,0x4D(%rsp)
063bc429 jmp       0x0000`0000`063B`C43D
063bc42b lea       0x63C`F070,%rcx
063bc432 call      0x0000`0000`063B`CF60
063bc437 and       $1,%al
063bc439 mov       %al,0x4D(%rsp)
063bc43d mov       0x4D(%rsp),%al
063bc441 and       $1,%al
063bc443 movzbl    %al,%eax
063bc446 add       $0x1C8,%rsp
063bc44d ret

uefi::proto::console::text::output::impl$1::write_str::closure$0:
063bc450 sub       $0x118,%rsp
063bc457 mov       %r9,0x58(%rsp)
063bc45c mov       %r8,0x60(%rsp)
063bc461 mov       %rdx,0x68(%rsp)
063bc466 mov       %rcx,0x70(%rsp)
063bc46b mov       %rcx,0xB8(%rsp)
063bc473 mov       0xB8(%rsp),%rax
063bc47b mov       (%rax),%rax
063bc47e mov       %rax,0xC0(%rsp)
063bc486 mov       %rdx,0xC8(%rsp)
063bc48e mov       %r8,0xD0(%rsp)
063bc496 mov       %r9,0xD8(%rsp)
063bc49e mov       (%r9),%rax
063bc4a1 mov       %rax,0x78(%rsp)
063bc4a6 cmp       %r8,%rax
063bc4a9 setb      %al
063bc4ac test      $1,%al
063bc4ae jne       0x0000`0000`063B`C4B2
063bc4b0 jmp       0x0000`0000`063B`C4F8
063bc4b2 mov       0x60(%rsp),%rdx
063bc4b7 mov       0x68(%rsp),%rcx
063bc4bc mov       0x58(%rsp),%rax
063bc4c1 mov       0x78(%rsp),%r8
063bc4c6 movw      $0,(%rcx,%r8,2)
063bc4cd mov       (%rax),%rax
063bc4d0 mov       %rax,0x88(%rsp)
063bc4d8 mov       0x88(%rsp),%r8
063bc4e0 lea       0x63C`F0A0,%r9
063bc4e7 call      0x0000`0000`063B`6AC0
063bc4ec mov       %rax,0x48(%rsp)
063bc4f1 mov       %rdx,0x50(%rsp)
063bc4f6 jmp       0x0000`0000`063B`C510
063bc4f8 mov       0x60(%rsp),%rdx
063bc4fd mov       0x78(%rsp),%rcx
063bc502 lea       0x63C`F088,%r8
063bc509 call      0x0000`0000`063B`2090
063bc50e ud2
063bc510 mov       0x50(%rsp),%r8
063bc515 mov       0x48(%rsp),%rdx
063bc51a mov       0x58(%rsp),%rax
063bc51f mov       %rdx,0xE8(%rsp)
063bc527 mov       %r8,0xF0(%rsp)
063bc52f movq      $0,(%rax)
063bc536 lea       0xA0(%rsp),%rcx
063bc53e call      0x0000`0000`063A`C9B0
063bc543 lea       0xA0(%rsp),%rcx
063bc54b call      0x0000`0000`063A`C7E0
063bc550 mov       %rax,0x38(%rsp)
063bc555 mov       %rdx,0x40(%rsp)
063bc55a mov       0x40(%rsp),%rdx
063bc55f mov       0x38(%rsp),%rcx
063bc564 call      0x0000`0000`063A`C950
063bc569 mov       %rdx,0x98(%rsp)
063bc571 mov       %rax,0x90(%rsp)
063bc579 mov       0x90(%rsp),%rax
063bc581 test      %rax,%rax
063bc584 sete      %al
063bc587 movzbl    %al,%eax
063bc58a jne       0x0000`0000`063B`C592
063bc58c jmp       0x0000`0000`063B`C58E
063bc58e jmp       0x0000`0000`063B`C5DB
063bc590 ud2
063bc592 mov       0x70(%rsp),%rax
063bc597 mov       0x90(%rsp),%rdx
063bc59f mov       0x98(%rsp),%r8
063bc5a7 mov       %rdx,0xF8(%rsp)
063bc5af mov       %r8,0x100(%rsp)
063bc5b7 mov       %rdx,0x108(%rsp)
063bc5bf mov       %r8,0x110(%rsp)
063bc5c7 mov       (%rax),%rcx
063bc5ca call      0x0000`0000`063B`C270
063bc5cf mov       %rax,0x28(%rsp)
063bc5d4 mov       %rdx,0x30(%rsp)
063bc5d9 jmp       0x0000`0000`063B`C604
063bc5db lea       0x63C`F0B8,%rcx
063bc5e2 call      0x0000`0000`063B`CF60
063bc5e7 and       $1,%al
063bc5e9 mov       %al,0x87(%rsp)
063bc5f0 mov       0x87(%rsp),%al
063bc5f7 and       $1,%al
063bc5f9 movzbl    %al,%eax
063bc5fc add       $0x118,%rsp
063bc603 ret
063bc604 mov       0x30(%rsp),%rdx
063bc609 mov       0x28(%rsp),%rcx
063bc60e call      0x0000`0000`063A`C8E0
063bc613 and       $1,%al
063bc615 mov       %al,0x87(%rsp)
063bc61c jmp       0x0000`0000`063B`C5F0

uefi::proto::console::text::output::impl$1::write_str::closure$0::closure$0:
063bc620 sub       $0x18,%rsp
063bc624 mov       %rcx,8(%rsp)
063bc629 mov       %rdx,0x10(%rsp)
063bc62e add       $0x18,%rsp
063bc632 ret

uefi::proto::console::text::output::impl$1::write_str::closure$0::closure$1:
063bc640 sub       $0x10,%rsp
063bc644 mov       %rcx,8(%rsp)
063bc649 add       $0x10,%rsp
063bc64d ret

uefi::proto::console::text::output::impl$1::write_str::closure$1:
063bc650 sub       $0x98,%rsp
063bc657 mov       %dx,0x3E(%rsp)
063bc65c mov       %rcx,0x40(%rsp)
063bc661 mov       %rcx,0x70(%rsp)
063bc666 mov       0x70(%rsp),%rax
063bc66b mov       (%rax),%rax
063bc66e mov       %rax,0x78(%rsp)
063bc673 mov       0x70(%rsp),%rax
063bc678 mov       8(%rax),%rax
063bc67c mov       %rax,0x80(%rsp)
063bc684 mov       0x70(%rsp),%rax
063bc689 mov       0x10(%rax),%rax
063bc68d mov       %rax,0x88(%rsp)
063bc695 mov       %dx,0x96(%rsp)
063bc69d mov       8(%rcx),%rax
063bc6a1 mov       (%rax),%rax
063bc6a4 mov       %rax,0x48(%rsp)
063bc6a9 cmp       $0x81,%rax
063bc6af setb      %al
063bc6b2 test      $1,%al
063bc6b4 jne       0x0000`0000`063B`C6B8
063bc6b6 jmp       0x0000`0000`063B`C6E9
063bc6b8 mov       0x40(%rsp),%rax
063bc6bd mov       0x48(%rsp),%rdx
063bc6c2 mov       0x3E(%rsp),%r8w
063bc6c8 mov       (%rax),%rcx
063bc6cb mov       %r8w,(%rcx,%rdx,2)
063bc6d0 mov       8(%rax),%rax
063bc6d4 mov       (%rax),%rax
063bc6d7 add       $1,%rax
063bc6db mov       %rax,0x30(%rsp)
063bc6e0 setb      %al
063bc6e3 test      $1,%al
063bc6e5 jne       0x0000`0000`063B`C721
063bc6e7 jmp       0x0000`0000`063B`C701
063bc6e9 mov       0x48(%rsp),%rcx
063bc6ee lea       0x63C`F0D0,%r8
063bc6f5 mov       $0x81,%edx
063bc6fa call      0x0000`0000`063B`2090
063bc6ff ud2
063bc701 mov       0x40(%rsp),%rax
063bc706 mov       0x30(%rsp),%rdx
063bc70b mov       8(%rax),%rcx
063bc70f mov       %rdx,(%rcx)
063bc712 mov       8(%rax),%rax
063bc716 cmpq      $0x80,(%rax)
063bc71d je        0x0000`0000`063B`C742
063bc71f jmp       0x0000`0000`063B`C73B
063bc721 lea       0x63C`F100,%rcx
063bc728 lea       0x63C`F0E8,%r8
063bc72f mov       $0x1C,%edx
063bc734 call      0x0000`0000`063B`2030
063bc739 ud2
063bc73b movb      $2,0x57(%rsp)
063bc740 jmp       0x0000`0000`063B`C78D
063bc742 mov       0x40(%rsp),%rax
063bc747 mov       0x10(%rax),%rcx
063bc74b mov       (%rax),%rdx
063bc74e mov       8(%rax),%rax
063bc752 mov       %rdx,0x58(%rsp)
063bc757 movq      $0x81,0x60(%rsp)
063bc760 mov       %rax,0x68(%rsp)
063bc765 mov       0x58(%rsp),%rdx
063bc76a mov       0x60(%rsp),%r8
063bc76f mov       0x68(%rsp),%r9
063bc774 call      0x0000`0000`063B`C450
063bc779 mov       %al,0x2F(%rsp)
063bc77d mov       0x2F(%rsp),%cl
063bc781 and       $1,%cl
063bc784 call      0x0000`0000`063A`C880
063bc789 mov       %al,0x57(%rsp)
063bc78d mov       0x57(%rsp),%al
063bc791 add       $0x98,%rsp
063bc798 ret

uefi::proto::console::text::output::impl$1::write_str::closure$1::closure$0:
063bc7a0 sub       $0x18,%rsp
063bc7a4 movb      $0,7(%rsp)
063bc7a9 mov       7(%rsp),%al
063bc7ad and       $1,%al
063bc7af movzbl    %al,%eax
063bc7b2 add       $0x18,%rsp
063bc7b6 ret

uefi::proto::console::text::output::impl$1::write_str::closure$2:
063bc7c0 sub       $0x58,%rsp
063bc7c4 mov       %dx,0x26(%rsp)
063bc7c9 mov       %rcx,0x28(%rsp)
063bc7ce mov       %rcx,0x38(%rsp)
063bc7d3 mov       0x38(%rsp),%rax
063bc7d8 mov       (%rax),%rax
063bc7db mov       %rax,0x40(%rsp)
063bc7e0 mov       %dx,0x4E(%rsp)
063bc7e5 cmp       $0xA,%dx
063bc7e9 je        0x0000`0000`063B`C80D
063bc7eb mov       0x26(%rsp),%ax
063bc7f0 mov       0x28(%rsp),%rcx
063bc7f5 mov       (%rcx),%rcx
063bc7f8 mov       %ax,0x36(%rsp)
063bc7fd mov       0x36(%rsp),%dx
063bc802 call      0x0000`0000`063B`C650
063bc807 mov       %al,0x32(%rsp)
063bc80b jmp       0x0000`0000`063B`C86A
063bc80d mov       0x28(%rsp),%rax
063bc812 mov       (%rax),%rcx
063bc815 movw      $0xD,0x34(%rsp)
063bc81c mov       0x34(%rsp),%dx
063bc821 call      0x0000`0000`063B`C650
063bc826 mov       %al,0x25(%rsp)
063bc82a mov       0x25(%rsp),%cl
063bc82e call      0x0000`0000`063C`B2B0
063bc833 mov       %al,0x33(%rsp)
063bc837 mov       0x33(%rsp),%al
063bc83b add       $0xFE,%al
063bc83d setne     %al
063bc840 movzbl    %al,%eax
063bc843 je        0x0000`0000`063B`C7EB
063bc845 jmp       0x0000`0000`063B`C847
063bc847 jmp       0x0000`0000`063B`C84B
063bc849 ud2
063bc84b mov       0x33(%rsp),%cl
063bc84f mov       %cl,%al
063bc851 and       $1,%al
063bc853 mov       %al,0x57(%rsp)
063bc857 and       $1,%cl
063bc85a lea       0x63C`F120,%rdx
063bc861 call      0x0000`0000`063C`B270
063bc866 mov       %al,0x32(%rsp)
063bc86a mov       0x32(%rsp),%al
063bc86e add       $0x58,%rsp
063bc872 ret

uefi::proto::console::text::output::impl$1::write_str::closure$3:
063bc880 push      %rax
063bc881 and       $1,%cl
063bc884 mov       %cl,7(%rsp)
063bc888 pop       %rax
063bc889 ret

core::array::impl$13::into_iter<usize,4>:
063bc890 sub       $0x38,%rsp
063bc894 mov       %rcx,0x30(%rsp)
063bc899 mov       $4,%edx
063bc89e call      0x0000`0000`063C`0270
063bc8a3 mov       %rax,0x20(%rsp)
063bc8a8 mov       %rdx,0x28(%rsp)
063bc8ad mov       0x28(%rsp),%rdx
063bc8b2 mov       0x20(%rsp),%rax
063bc8b7 add       $0x38,%rsp
063bc8bb ret

core::array::impl$15::index<u8,core::ops::range::Range<usize>,4>:
063bc8c0 sub       $0x58,%rsp
063bc8c4 mov       %r9,%rax
063bc8c7 mov       %r8,%r9
063bc8ca mov       %rdx,%r8
063bc8cd mov       %rcx,0x40(%rsp)
063bc8d2 mov       %r8,0x48(%rsp)
063bc8d7 mov       %r9,0x50(%rsp)
063bc8dc mov       $4,%edx
063bc8e1 mov       %rax,0x20(%rsp)
063bc8e6 call      0x0000`0000`063B`A100
063bc8eb mov       %rax,0x30(%rsp)
063bc8f0 mov       %rdx,0x38(%rsp)
063bc8f5 mov       0x38(%rsp),%rdx
063bc8fa mov       0x30(%rsp),%rax
063bc8ff add       $0x58,%rsp
063bc903 ret

core::char::convert::from_u32:
063bc910 sub       $0x38,%rsp
063bc914 mov       %ecx,0x30(%rsp)
063bc918 call      0x0000`0000`063B`C990
063bc91d mov       %eax,0x2C(%rsp)
063bc921 mov       0x2C(%rsp),%eax
063bc925 add       $0xFFEF`0000,%eax
063bc92a sete      %al
063bc92d movzbl    %al,%eax
063bc930 jne       0x0000`0000`063B`C938
063bc932 jmp       0x0000`0000`063B`C934
063bc934 jmp       0x0000`0000`063B`C946
063bc936 ud2
063bc938 mov       0x2C(%rsp),%eax
063bc93c mov       %eax,0x34(%rsp)
063bc940 mov       %eax,0x28(%rsp)
063bc944 jmp       0x0000`0000`063B`C94E
063bc946 movl      $0x11`0000,0x28(%rsp)
063bc94e mov       0x28(%rsp),%eax
063bc952 add       $0x38,%rsp
063bc956 ret

core::char::convert::from_u32_unchecked:
063bc960 sub       $0x38,%rsp
063bc964 mov       %ecx,0x34(%rsp)
063bc968 call      0x0000`0000`063B`9590
063bc96d mov       %eax,0x30(%rsp)
063bc971 mov       0x30(%rsp),%ecx
063bc975 lea       0x63C`F1B8,%rdx
063bc97c call      0x0000`0000`063B`1740
063bc981 mov       %eax,0x2C(%rsp)
063bc985 mov       0x2C(%rsp),%eax
063bc989 add       $0x38,%rsp
063bc98d ret

core::char::convert::char_try_from_u32:
063bc990 sub       $0x20,%rsp
063bc994 mov       %ecx,%eax
063bc996 mov       %eax,4(%rsp)
063bc99a mov       %eax,0x10(%rsp)
063bc99e xor       $0xD800,%eax
063bc9a3 mov       %eax,0x18(%rsp)
063bc9a7 movl      $0x800,0x1C(%rsp)
063bc9af sub       $0x800,%eax
063bc9b4 mov       %eax,8(%rsp)
063bc9b8 mov       8(%rsp),%eax
063bc9bc cmp       $0x10`F800,%eax
063bc9c1 jae       0x0000`0000`063B`C9D4
063bc9c3 mov       4(%rsp),%eax
063bc9c7 mov       %eax,0x14(%rsp)
063bc9cb mov       0x14(%rsp),%eax
063bc9cf mov       %eax,(%rsp)
063bc9d2 jmp       0x0000`0000`063B`C9E5
063bc9d4 movl      $0x11`0000,0xC(%rsp)
063bc9dc mov       0xC(%rsp),%eax
063bc9e0 add       $0x20,%rsp
063bc9e4 ret
063bc9e5 mov       (%rsp),%eax
063bc9e8 mov       %eax,0xC(%rsp)
063bc9ec jmp       0x0000`0000`063B`C9DC

core::char::convert::from_digit:
063bc9f0 sub       $0x78,%rsp
063bc9f4 mov       %edx,0x2C(%rsp)
063bc9f8 mov       %ecx,0x30(%rsp)
063bc9fc mov       %ecx,0x6C(%rsp)
063bca00 mov       %edx,0x70(%rsp)
063bca04 cmp       $0x24,%edx
063bca07 ja        0x0000`0000`063B`CA17
063bca09 mov       0x30(%rsp),%eax
063bca0d mov       0x2C(%rsp),%ecx
063bca11 cmp       %ecx,%eax
063bca13 jb        0x0000`0000`063B`CA5D
063bca15 jmp       0x0000`0000`063B`CA53
063bca17 lea       0x38(%rsp),%rcx
063bca1c lea       0x63C`F200,%rdx
063bca23 mov       $1,%r8d
063bca29 lea       0x63C`F210,%r9
063bca30 xor       %eax,%eax
063bca32 movq      $0,0x20(%rsp)
063bca3b call      0x0000`0000`063B`4170
063bca40 lea       0x63C`F210,%rdx
063bca47 lea       0x38(%rsp),%rcx
063bca4c call      0x0000`0000`063B`2140
063bca51 ud2
063bca53 movl      $0x11`0000,0x34(%rsp)
063bca5b jmp       0x0000`0000`063B`CAB8
063bca5d mov       0x30(%rsp),%eax
063bca61 mov       %al,0x2B(%rsp)
063bca65 mov       %al,0x77(%rsp)
063bca69 cmp       $0xA,%al
063bca6b jb        0x0000`0000`063B`CA80
063bca6d mov       0x2B(%rsp),%al
063bca71 add       $0x61,%al
063bca73 mov       %al,0x2A(%rsp)
063bca77 setb      %al
063bca7a test      $1,%al
063bca7c jne       0x0000`0000`063B`CAD4
063bca7e jmp       0x0000`0000`063B`CAC1
063bca80 mov       0x2B(%rsp),%al
063bca84 add       $0x30,%al
063bca86 mov       %al,0x29(%rsp)
063bca8a setb      %al
063bca8d test      $1,%al
063bca8f jne       0x0000`0000`063B`CA9E
063bca91 mov       0x29(%rsp),%al
063bca95 movzbl    %al,%eax
063bca98 mov       %eax,0x34(%rsp)
063bca9c jmp       0x0000`0000`063B`CAB8
063bca9e lea       0x63C`F240,%rcx
063bcaa5 lea       0x63C`F228,%r8
063bcaac mov       $0x1C,%edx
063bcab1 call      0x0000`0000`063B`2030
063bcab6 ud2
063bcab8 mov       0x34(%rsp),%eax
063bcabc add       $0x78,%rsp
063bcac0 ret
063bcac1 mov       0x2A(%rsp),%al
063bcac5 sub       $0xA,%al
063bcac7 mov       %al,0x28(%rsp)
063bcacb setb      %al
063bcace test      $1,%al
063bcad0 jne       0x0000`0000`063B`CAFB
063bcad2 jmp       0x0000`0000`063B`CAEE
063bcad4 lea       0x63C`F240,%rcx
063bcadb lea       0x63C`F260,%r8
063bcae2 mov       $0x1C,%edx
063bcae7 call      0x0000`0000`063B`2030
063bcaec ud2
063bcaee mov       0x28(%rsp),%al
063bcaf2 movzbl    %al,%eax
063bcaf5 mov       %eax,0x34(%rsp)
063bcaf9 jmp       0x0000`0000`063B`CAB8
063bcafb lea       0x63C`F290,%rcx
063bcb02 lea       0x63C`F278,%r8
063bcb09 mov       $0x21,%edx
063bcb0e call      0x0000`0000`063B`2030
063bcb13 ud2

enum$<core::result::Result<tuple$<>,usize> >::ok<tuple$<>,usize>:
063bcb20 sub       $0x28,%rsp
063bcb24 mov       %rcx,(%rsp)
063bcb28 mov       %rdx,8(%rsp)
063bcb2d mov       (%rsp),%rax
063bcb31 test      %rax,%rax
063bcb34 je        0x0000`0000`063B`CB3C
063bcb36 jmp       0x0000`0000`063B`CB38
063bcb38 jmp       0x0000`0000`063B`CB43
063bcb3a ud2
063bcb3c movb      $1,0x17(%rsp)
063bcb41 jmp       0x0000`0000`063B`CB52
063bcb43 mov       8(%rsp),%rax
063bcb48 mov       %rax,0x20(%rsp)
063bcb4d movb      $0,0x17(%rsp)
063bcb52 mov       0x17(%rsp),%al
063bcb56 and       $1,%al
063bcb58 movzbl    %al,%eax
063bcb5b add       $0x28,%rsp
063bcb5f ret

core::result::Result::and_then<tuple$<>,core::fmt::Error,tuple$<>,core::fmt::builders::impl$3::finish::closure_env$0>:
063bcb60 sub       $0x58,%rsp
063bcb64 mov       %rdx,0x28(%rsp)
063bcb69 and       $1,%cl
063bcb6c mov       %cl,0x36(%rsp)
063bcb70 mov       %rdx,0x40(%rsp)
063bcb75 movb      $0,0x3F(%rsp)
063bcb7a movb      $1,0x3F(%rsp)
063bcb7f movzbl    0x36(%rsp),%eax
063bcb84 test      $1,%al
063bcb86 je        0x0000`0000`063B`CB8E
063bcb88 jmp       0x0000`0000`063B`CB8A
063bcb8a jmp       0x0000`0000`063B`CBA5
063bcb8c ud2
063bcb8e mov       0x28(%rsp),%rcx
063bcb93 movb      $0,0x3F(%rsp)
063bcb98 call      0x0000`0000`063C`31C0
063bcb9d and       $1,%al
063bcb9f mov       %al,0x37(%rsp)
063bcba3 jmp       0x0000`0000`063B`CBAA
063bcba5 movb      $1,0x37(%rsp)
063bcbaa testb     $1,0x3F(%rsp)
063bcbaf jne       0x0000`0000`063B`CBBF
063bcbb1 mov       0x37(%rsp),%al
063bcbb5 and       $1,%al
063bcbb7 movzbl    %al,%eax
063bcbba add       $0x58,%rsp
063bcbbe ret
063bcbbf jmp       0x0000`0000`063B`CBB1

core::result::Result::and_then<tuple$<>,core::fmt::Error,tuple$<>,core::fmt::builders::impl$3::field::closure_env$0>:
063bcbd0 sub       $0x78,%rsp
063bcbd4 mov       %rdx,0x28(%rsp)
063bcbd9 and       $1,%cl
063bcbdc mov       %cl,0x36(%rsp)
063bcbe0 movb      $0,0x67(%rsp)
063bcbe5 movb      $1,0x67(%rsp)
063bcbea movzbl    0x36(%rsp),%eax
063bcbef test      $1,%al
063bcbf1 je        0x0000`0000`063B`CBF9
063bcbf3 jmp       0x0000`0000`063B`CBF5
063bcbf5 jmp       0x0000`0000`063B`CC25
063bcbf7 ud2
063bcbf9 mov       0x28(%rsp),%rdx
063bcbfe movb      $0,0x67(%rsp)
063bcc03 lea       0x38(%rsp),%rcx
063bcc08 mov       $0x28,%r8d
063bcc0e call      0x0000`0000`063B`BDE0
063bcc13 lea       0x38(%rsp),%rcx
063bcc18 call      0x0000`0000`063C`2DB0
063bcc1d and       $1,%al
063bcc1f mov       %al,0x37(%rsp)
063bcc23 jmp       0x0000`0000`063B`CC2A
063bcc25 movb      $1,0x37(%rsp)
063bcc2a testb     $1,0x67(%rsp)
063bcc2f jne       0x0000`0000`063B`CC3F
063bcc31 mov       0x37(%rsp),%al
063bcc35 and       $1,%al
063bcc37 movzbl    %al,%eax
063bcc3a add       $0x78,%rsp
063bcc3e ret
063bcc3f jmp       0x0000`0000`063B`CC31

core::result::Result::and_then<tuple$<>,core::fmt::Error,tuple$<>,core::fmt::builders::impl$4::field::closure_env$0>:
063bcc50 sub       $0x68,%rsp
063bcc54 mov       %rdx,0x28(%rsp)
063bcc59 and       $1,%cl
063bcc5c mov       %cl,0x36(%rsp)
063bcc60 movb      $0,0x57(%rsp)
063bcc65 movb      $1,0x57(%rsp)
063bcc6a movzbl    0x36(%rsp),%eax
063bcc6f test      $1,%al
063bcc71 je        0x0000`0000`063B`CC79
063bcc73 jmp       0x0000`0000`063B`CC75
063bcc75 jmp       0x0000`0000`063B`CCAF
063bcc77 ud2
063bcc79 mov       0x28(%rsp),%rax
063bcc7e movb      $0,0x57(%rsp)
063bcc83 mov       (%rax),%rcx
063bcc86 mov       %rcx,0x38(%rsp)
063bcc8b mov       8(%rax),%rcx
063bcc8f mov       %rcx,0x40(%rsp)
063bcc94 mov       0x10(%rax),%rax
063bcc98 mov       %rax,0x48(%rsp)
063bcc9d lea       0x38(%rsp),%rcx
063bcca2 call      0x0000`0000`063C`33A0
063bcca7 and       $1,%al
063bcca9 mov       %al,0x37(%rsp)
063bccad jmp       0x0000`0000`063B`CCB4
063bccaf movb      $1,0x37(%rsp)
063bccb4 testb     $1,0x57(%rsp)
063bccb9 jne       0x0000`0000`063B`CCC9
063bccbb mov       0x37(%rsp),%al
063bccbf and       $1,%al
063bccc1 movzbl    %al,%eax
063bccc4 add       $0x68,%rsp
063bccc8 ret
063bccc9 jmp       0x0000`0000`063B`CCBB

core::result::Result::and_then<tuple$<>,core::fmt::Error,tuple$<>,core::fmt::builders::impl$4::finish::closure_env$0>:
063bccd0 sub       $0x58,%rsp
063bccd4 mov       %rdx,0x28(%rsp)
063bccd9 and       $1,%cl
063bccdc mov       %cl,0x36(%rsp)
063bcce0 mov       %rdx,0x40(%rsp)
063bcce5 movb      $0,0x3F(%rsp)
063bccea movb      $1,0x3F(%rsp)
063bccef movzbl    0x36(%rsp),%eax
063bccf4 test      $1,%al
063bccf6 je        0x0000`0000`063B`CCFE
063bccf8 jmp       0x0000`0000`063B`CCFA
063bccfa jmp       0x0000`0000`063B`CD15
063bccfc ud2
063bccfe mov       0x28(%rsp),%rcx
063bcd03 movb      $0,0x3F(%rsp)
063bcd08 call      0x0000`0000`063C`3630
063bcd0d and       $1,%al
063bcd0f mov       %al,0x37(%rsp)
063bcd13 jmp       0x0000`0000`063B`CD1A
063bcd15 movb      $1,0x37(%rsp)
063bcd1a testb     $1,0x3F(%rsp)
063bcd1f jne       0x0000`0000`063B`CD2F
063bcd21 mov       0x37(%rsp),%al
063bcd25 and       $1,%al
063bcd27 movzbl    %al,%eax
063bcd2a add       $0x58,%rsp
063bcd2e ret
063bcd2f jmp       0x0000`0000`063B`CD21

core::result::unwrap_failed:
063bcd40 sub       $0xC8,%rsp
063bcd47 mov       0xF0(%rsp),%rax
063bcd4f mov       %rax,0x40(%rsp)
063bcd54 mov       %rcx,0x58(%rsp)
063bcd59 mov       %rdx,0x60(%rsp)
063bcd5e mov       %r8,0x68(%rsp)
063bcd63 mov       %r9,0x70(%rsp)
063bcd68 lea       0x58(%rsp),%rcx
063bcd6d call      0x0000`0000`063B`6600
063bcd72 mov       %rax,0x48(%rsp)
063bcd77 mov       %rdx,0x50(%rsp)
063bcd7c lea       0x68(%rsp),%rcx
063bcd81 call      0x0000`0000`063B`6690
063bcd86 mov       %rax,0x30(%rsp)
063bcd8b mov       %rdx,0x38(%rsp)
063bcd90 mov       0x38(%rsp),%rax
063bcd95 mov       0x30(%rsp),%rcx
063bcd9a mov       0x50(%rsp),%rdx
063bcd9f mov       0x48(%rsp),%r8
063bcda4 mov       %r8,0xA8(%rsp)
063bcdac mov       %rdx,0xB0(%rsp)
063bcdb4 mov       %rcx,0xB8(%rsp)
063bcdbc mov       %rax,0xC0(%rsp)
063bcdc4 lea       0xA8(%rsp),%r9
063bcdcc lea       0x78(%rsp),%rcx
063bcdd1 lea       0x63C`F2B8,%rdx
063bcdd8 mov       $2,%r8d
063bcdde movq      $2,0x20(%rsp)
063bcde7 call      0x0000`0000`063B`4170
063bcdec mov       0x40(%rsp),%rdx
063bcdf1 lea       0x78(%rsp),%rcx
063bcdf6 call      0x0000`0000`063B`2140
063bcdfb ud2

core::result::impl$27::branch<core::fmt::PostPadding,core::fmt::Error>:
063bce00 sub       $0x40,%rsp
063bce04 mov       %rcx,(%rsp)
063bce08 mov       %edx,8(%rsp)
063bce0c mov       8(%rsp),%eax
063bce10 add       $0xFFEF`0000,%eax
063bce15 sete      %al
063bce18 movzbl    %al,%eax
063bce1b jne       0x0000`0000`063B`CE23
063bce1d jmp       0x0000`0000`063B`CE1F
063bce1f jmp       0x0000`0000`063B`CE3F
063bce21 ud2
063bce23 mov       (%rsp),%rcx
063bce27 mov       8(%rsp),%eax
063bce2b mov       %rcx,0x30(%rsp)
063bce30 mov       %eax,0x38(%rsp)
063bce34 mov       %rcx,0x10(%rsp)
063bce39 mov       %eax,0x18(%rsp)
063bce3d jmp       0x0000`0000`063B`CE47
063bce3f movl      $0x11`0000,0x18(%rsp)
063bce47 mov       0x10(%rsp),%rax
063bce4c mov       0x18(%rsp),%edx
063bce50 add       $0x40,%rsp
063bce54 ret

core::result::impl$27::branch<tuple$<usize,char>,usize>:
063bce60 sub       $0x38,%rsp
063bce64 mov       %rdx,(%rsp)
063bce68 mov       %rcx,8(%rsp)
063bce6d mov       %rcx,0x10(%rsp)
063bce72 mov       (%rdx),%rax
063bce75 test      %rax,%rax
063bce78 je        0x0000`0000`063B`CE80
063bce7a jmp       0x0000`0000`063B`CE7C
063bce7c jmp       0x0000`0000`063B`CEA9
063bce7e ud2
063bce80 mov       8(%rsp),%rax
063bce85 mov       (%rsp),%rcx
063bce89 mov       8(%rcx),%rdx
063bce8d mov       0x10(%rcx),%ecx
063bce90 mov       %rdx,0x28(%rsp)
063bce95 mov       %ecx,0x30(%rsp)
063bce99 mov       %rdx,8(%rax)
063bce9d mov       %ecx,0x10(%rax)
063bcea0 movq      $0,(%rax)
063bcea7 jmp       0x0000`0000`063B`CED0
063bcea9 mov       8(%rsp),%rax
063bceae mov       (%rsp),%rcx
063bceb2 mov       8(%rcx),%rcx
063bceb6 mov       %rcx,0x20(%rsp)
063bcebb mov       %rcx,0x18(%rsp)
063bcec0 mov       0x18(%rsp),%rcx
063bcec5 mov       %rcx,8(%rax)
063bcec9 movq      $1,(%rax)
063bced0 mov       0x10(%rsp),%rax
063bced5 add       $0x38,%rsp
063bced9 ret

core::result::impl$27::branch<tuple$<>,core::fmt::Error>:
063bcee0 sub       $0x20,%rsp
063bcee4 and       $1,%cl
063bcee7 mov       %cl,6(%rsp)
063bceeb movzbl    6(%rsp),%eax
063bcef0 test      $1,%al
063bcef2 je        0x0000`0000`063B`CEFA
063bcef4 jmp       0x0000`0000`063B`CEF6
063bcef6 jmp       0x0000`0000`063B`CF01
063bcef8 ud2
063bcefa movb      $0,7(%rsp)
063bceff jmp       0x0000`0000`063B`CF06
063bcf01 movb      $1,7(%rsp)
063bcf06 mov       7(%rsp),%al
063bcf0a and       $1,%al
063bcf0c movzbl    %al,%eax
063bcf0f add       $0x20,%rsp
063bcf13 ret

core::result::impl$28::from_residual<tuple$<>,usize,usize>:
063bcf20 sub       $0x48,%rsp
063bcf24 mov       %rcx,0x28(%rsp)
063bcf29 mov       0x28(%rsp),%rcx
063bcf2e mov       %rcx,0x40(%rsp)
063bcf33 call      0x0000`0000`063C`4BC0
063bcf38 mov       %rax,0x20(%rsp)
063bcf3d mov       0x20(%rsp),%rax
063bcf42 mov       %rax,0x38(%rsp)
063bcf47 movq      $1,0x30(%rsp)
063bcf50 mov       0x30(%rsp),%rax
063bcf55 mov       0x38(%rsp),%rdx
063bcf5a add       $0x48,%rsp
063bcf5e ret

core::result::impl$28::from_residual<tuple$<>,core::fmt::Error,core::fmt::Error>:
063bcf60 sub       $0x38,%rsp
063bcf64 call      0x0000`0000`063B`3CE0
063bcf69 movb      $1,0x27(%rsp)
063bcf6e mov       0x27(%rsp),%al
063bcf72 and       $1,%al
063bcf74 movzbl    %al,%eax
063bcf77 add       $0x38,%rsp
063bcf7b ret

core::result::impl$28::from_residual<core::fmt::PostPadding,core::fmt::Error,core::fmt::Error>:
063bcf80 sub       $0x48,%rsp
063bcf84 call      0x0000`0000`063B`3CE0
063bcf89 movl      $0x11`0000,0x30(%rsp)
063bcf91 mov       0x28(%rsp),%rax
063bcf96 mov       0x30(%rsp),%edx
063bcf9a add       $0x48,%rsp
063bcf9e ret

core::str::slice_error_fail:
063bcfa0 push      %rsi
063bcfa1 push      %rdi
063bcfa2 push      %rbx
063bcfa3 sub       $0x380,%rsp
063bcfaa mov       %rdx,0x170(%rsp)
063bcfb2 mov       %rcx,0x178(%rsp)
063bcfba mov       0x3C0(%rsp),%rax
063bcfc2 mov       %rax,0x180(%rsp)
063bcfca mov       %r8,0x190(%rsp)
063bcfd2 mov       %r9,0x198(%rsp)
063bcfda mov       %rcx,0x360(%rsp)
063bcfe2 mov       %rdx,0x368(%rsp)
063bcfea mov       $0x100,%r8d
063bcff0 call      0x0000`0000`063B`D870
063bcff5 mov       %rax,0x188(%rsp)
063bcffd mov       %rax,0x370(%rsp)
063bd005 mov       0x180(%rsp),%r9
063bd00d mov       0x170(%rsp),%rdx
063bd015 mov       0x178(%rsp),%rcx
063bd01d mov       0x188(%rsp),%rax
063bd025 mov       %rax,0x1B0(%rsp)
063bd02d mov       0x1B0(%rsp),%r8
063bd035 call      0x0000`0000`063B`6480
063bd03a mov       %rax,0x160(%rsp)
063bd042 mov       %rdx,0x168(%rsp)
063bd04a mov       0x170(%rsp),%rdx
063bd052 mov       0x178(%rsp),%rcx
063bd05a mov       0x168(%rsp),%rax
063bd062 mov       0x160(%rsp),%r8
063bd06a mov       %r8,0x1A0(%rsp)
063bd072 mov       %rax,0x1A8(%rsp)
063bd07a call      0x0000`0000`063B`D700
063bd07f mov       %rax,0x158(%rsp)
063bd087 mov       0x188(%rsp),%rax
063bd08f mov       0x158(%rsp),%rcx
063bd097 cmp       %rcx,%rax
063bd09a jb        0x0000`0000`063B`D0B9
063bd09c lea       0x63C`F210,%rax
063bd0a3 mov       %rax,0x1B8(%rsp)
063bd0ab movq      $0,0x1C0(%rsp)
063bd0b7 jmp       0x0000`0000`063B`D0D4
063bd0b9 lea       0x63C`F2D8,%rax
063bd0c0 mov       %rax,0x1B8(%rsp)
063bd0c8 movq      $5,0x1C0(%rsp)
063bd0d4 mov       0x170(%rsp),%rdx
063bd0dc mov       0x178(%rsp),%rcx
063bd0e4 mov       0x190(%rsp),%rax
063bd0ec mov       %rax,0x148(%rsp)
063bd0f4 call      0x0000`0000`063B`D700
063bd0f9 mov       %rax,0x150(%rsp)
063bd101 mov       0x148(%rsp),%rax
063bd109 mov       0x150(%rsp),%rcx
063bd111 cmp       %rcx,%rax
063bd114 ja        0x0000`0000`063B`D145
063bd116 mov       0x170(%rsp),%rdx
063bd11e mov       0x178(%rsp),%rcx
063bd126 mov       0x198(%rsp),%rax
063bd12e mov       %rax,0x138(%rsp)
063bd136 call      0x0000`0000`063B`D700
063bd13b mov       %rax,0x140(%rsp)
063bd143 jmp       0x0000`0000`063B`D159
063bd145 movb      $1,0x1CF(%rsp)
063bd14d testb     $1,0x1CF(%rsp)
063bd155 jne       0x0000`0000`063B`D19C
063bd157 jmp       0x0000`0000`063B`D17A
063bd159 mov       0x138(%rsp),%rax
063bd161 mov       0x140(%rsp),%rcx
063bd169 cmp       %rcx,%rax
063bd16c seta      %al
063bd16f and       $1,%al
063bd171 mov       %al,0x1CF(%rsp)
063bd178 jmp       0x0000`0000`063B`D14D
063bd17a mov       0x190(%rsp),%rax
063bd182 cmp       0x198(%rsp),%rax
063bd18a setbe     %al
063bd18d xor       $0xFF,%al
063bd18f test      $1,%al
063bd191 jne       0x0000`0000`063B`D322
063bd197 jmp       0x0000`0000`063B`D2F9
063bd19c mov       0x170(%rsp),%rdx
063bd1a4 mov       0x178(%rsp),%rcx
063bd1ac mov       0x190(%rsp),%rax
063bd1b4 mov       %rax,0x128(%rsp)
063bd1bc call      0x0000`0000`063B`D700
063bd1c1 mov       %rax,0x130(%rsp)
063bd1c9 mov       0x128(%rsp),%rax
063bd1d1 mov       0x130(%rsp),%rcx
063bd1d9 cmp       %rcx,%rax
063bd1dc ja        0x0000`0000`063B`D1F0
063bd1de mov       0x198(%rsp),%rax
063bd1e6 mov       %rax,0x1D0(%rsp)
063bd1ee jmp       0x0000`0000`063B`D200
063bd1f0 mov       0x190(%rsp),%rax
063bd1f8 mov       %rax,0x1D0(%rsp)
063bd200 lea       0x1D0(%rsp),%rcx
063bd208 call      0x0000`0000`063B`6510
063bd20d mov       %rax,0x118(%rsp)
063bd215 mov       %rdx,0x120(%rsp)
063bd21d lea       0x1A0(%rsp),%rcx
063bd225 call      0x0000`0000`063B`6600
063bd22a mov       %rax,0x108(%rsp)
063bd232 mov       %rdx,0x110(%rsp)
063bd23a lea       0x1B8(%rsp),%rcx
063bd242 call      0x0000`0000`063B`6600
063bd247 mov       %rax,0xF8(%rsp)
063bd24f mov       %rdx,0x100(%rsp)
063bd257 mov       0x100(%rsp),%rax
063bd25f mov       0xF8(%rsp),%rcx
063bd267 mov       0x110(%rsp),%rdx
063bd26f mov       0x108(%rsp),%r8
063bd277 mov       0x120(%rsp),%r9
063bd27f mov       0x118(%rsp),%r10
063bd287 mov       %r10,0x208(%rsp)
063bd28f mov       %r9,0x210(%rsp)
063bd297 mov       %r8,0x218(%rsp)
063bd29f mov       %rdx,0x220(%rsp)
063bd2a7 mov       %rcx,0x228(%rsp)
063bd2af mov       %rax,0x230(%rsp)
063bd2b7 lea       0x208(%rsp),%r9
063bd2bf lea       0x1D8(%rsp),%rcx
063bd2c7 lea       0x63C`F300,%rdx
063bd2ce mov       $3,%r8d
063bd2d4 movq      $3,0x20(%rsp)
063bd2dd call      0x0000`0000`063B`4170
063bd2e2 mov       0x180(%rsp),%rdx
063bd2ea lea       0x1D8(%rsp),%rcx
063bd2f2 call      0x0000`0000`063B`2140
063bd2f7 ud2
063bd2f9 mov       0x170(%rsp),%rdx
063bd301 mov       0x178(%rsp),%rcx
063bd309 mov       0x190(%rsp),%r8
063bd311 call      0x0000`0000`063B`D770
063bd316 mov       %al,0xF7(%rsp)
063bd31d jmp       0x0000`0000`063B`D458
063bd322 lea       0x190(%rsp),%rcx
063bd32a call      0x0000`0000`063B`6510
063bd32f mov       %rax,0xE0(%rsp)
063bd337 mov       %rdx,0xE8(%rsp)
063bd33f lea       0x198(%rsp),%rcx
063bd347 call      0x0000`0000`063B`6510
063bd34c mov       %rax,0xD0(%rsp)
063bd354 mov       %rdx,0xD8(%rsp)
063bd35c lea       0x1A0(%rsp),%rcx
063bd364 call      0x0000`0000`063B`6600
063bd369 mov       %rax,0xC0(%rsp)
063bd371 mov       %rdx,0xC8(%rsp)
063bd379 lea       0x1B8(%rsp),%rcx
063bd381 call      0x0000`0000`063B`6600
063bd386 mov       %rax,0xB0(%rsp)
063bd38e mov       %rdx,0xB8(%rsp)
063bd396 mov       0xB8(%rsp),%rax
063bd39e mov       0xB0(%rsp),%rcx
063bd3a6 mov       0xC8(%rsp),%rdx
063bd3ae mov       0xC0(%rsp),%r8
063bd3b6 mov       0xD8(%rsp),%r9
063bd3be mov       0xD0(%rsp),%r10
063bd3c6 mov       0xE8(%rsp),%r11
063bd3ce mov       0xE0(%rsp),%rsi
063bd3d6 mov       %rsi,0x268(%rsp)
063bd3de mov       %r11,0x270(%rsp)
063bd3e6 mov       %r10,0x278(%rsp)
063bd3ee mov       %r9,0x280(%rsp)
063bd3f6 mov       %r8,0x288(%rsp)
063bd3fe mov       %rdx,0x290(%rsp)
063bd406 mov       %rcx,0x298(%rsp)
063bd40e mov       %rax,0x2A0(%rsp)
063bd416 lea       0x268(%rsp),%r9
063bd41e lea       0x238(%rsp),%rcx
063bd426 lea       0x63C`F358,%rdx
063bd42d mov       $4,%r8d
063bd433 movq      $4,0x20(%rsp)
063bd43c call      0x0000`0000`063B`4170
063bd441 mov       0x180(%rsp),%rdx
063bd449 lea       0x238(%rsp),%rcx
063bd451 call      0x0000`0000`063B`2140
063bd456 ud2
063bd458 mov       0xF7(%rsp),%al
063bd45f xor       $0xFF,%al
063bd461 test      $1,%al
063bd463 jne       0x0000`0000`063B`D477
063bd465 mov       0x198(%rsp),%rax
063bd46d mov       %rax,0x2A8(%rsp)
063bd475 jmp       0x0000`0000`063B`D487
063bd477 mov       0x190(%rsp),%rax
063bd47f mov       %rax,0x2A8(%rsp)
063bd487 mov       0x170(%rsp),%rdx
063bd48f mov       0x178(%rsp),%rcx
063bd497 mov       0x2A8(%rsp),%r8
063bd49f call      0x0000`0000`063B`D870
063bd4a4 mov       %rax,0xA8(%rsp)
063bd4ac mov       %rax,0x378(%rsp)
063bd4b4 mov       0x180(%rsp),%r9
063bd4bc mov       0x170(%rsp),%rdx
063bd4c4 mov       0x178(%rsp),%rcx
063bd4cc mov       0xA8(%rsp),%rax
063bd4d4 mov       %rax,0x2C8(%rsp)
063bd4dc mov       0x2C8(%rsp),%r8
063bd4e4 call      0x0000`0000`063B`63D0
063bd4e9 mov       %rax,0x98(%rsp)
063bd4f1 mov       %rdx,0xA0(%rsp)
063bd4f9 mov       0xA0(%rsp),%rdx
063bd501 mov       0x98(%rsp),%rcx
063bd509 call      0x0000`0000`063B`DAE0
063bd50e mov       %rdx,0x2C0(%rsp)
063bd516 mov       %rax,0x2B8(%rsp)
063bd51e lea       0x2B8(%rsp),%rcx
063bd526 call      0x0000`0000`063B`B5A0
063bd52b mov       %eax,0x94(%rsp)
063bd532 mov       0x180(%rsp),%rdx
063bd53a mov       0x94(%rsp),%ecx
063bd541 call      0x0000`0000`063B`1740
063bd546 mov       %eax,0x2B4(%rsp)
063bd54d mov       0x2B4(%rsp),%ecx
063bd554 call      0x0000`0000`063B`98A0
063bd559 mov       %rax,0x88(%rsp)
063bd561 mov       0x88(%rsp),%rcx
063bd569 mov       0xA8(%rsp),%rax
063bd571 add       %rcx,%rax
063bd574 mov       %rax,0x80(%rsp)
063bd57c setb      %al
063bd57f test      $1,%al
063bd581 jne       0x0000`0000`063B`D5BC
063bd583 mov       0x80(%rsp),%rax
063bd58b mov       0xA8(%rsp),%rcx
063bd593 mov       %rcx,0x2D0(%rsp)
063bd59b mov       %rax,0x2D8(%rsp)
063bd5a3 lea       0x2A8(%rsp),%rcx
063bd5ab call      0x0000`0000`063B`6510
063bd5b0 mov       %rax,0x70(%rsp)
063bd5b5 mov       %rdx,0x78(%rsp)
063bd5ba jmp       0x0000`0000`063B`D5D7
063bd5bc mov       0x180(%rsp),%r8
063bd5c4 lea       0x63C`F240,%rcx
063bd5cb mov       $0x1C,%edx
063bd5d0 call      0x0000`0000`063B`2030
063bd5d5 ud2
063bd5d7 lea       0x2B4(%rsp),%rcx
063bd5df call      0x0000`0000`063B`6660
063bd5e4 mov       %rax,0x60(%rsp)
063bd5e9 mov       %rdx,0x68(%rsp)
063bd5ee lea       0x2D0(%rsp),%rcx
063bd5f6 call      0x0000`0000`063B`6630
063bd5fb mov       %rax,0x50(%rsp)
063bd600 mov       %rdx,0x58(%rsp)
063bd605 lea       0x1A0(%rsp),%rcx
063bd60d call      0x0000`0000`063B`6600
063bd612 mov       %rax,0x40(%rsp)
063bd617 mov       %rdx,0x48(%rsp)
063bd61c lea       0x1B8(%rsp),%rcx
063bd624 call      0x0000`0000`063B`6600
063bd629 mov       %rax,0x30(%rsp)
063bd62e mov       %rdx,0x38(%rsp)
063bd633 mov       0x38(%rsp),%rax
063bd638 mov       0x30(%rsp),%rcx
063bd63d mov       0x48(%rsp),%rdx
063bd642 mov       0x40(%rsp),%r8
063bd647 mov       0x58(%rsp),%r9
063bd64c mov       0x50(%rsp),%r10
063bd651 mov       0x68(%rsp),%r11
063bd656 mov       0x60(%rsp),%rsi
063bd65b mov       0x78(%rsp),%rdi
063bd660 mov       0x70(%rsp),%rbx
063bd665 mov       %rbx,0x310(%rsp)
063bd66d mov       %rdi,0x318(%rsp)
063bd675 mov       %rsi,0x320(%rsp)
063bd67d mov       %r11,0x328(%rsp)
063bd685 mov       %r10,0x330(%rsp)
063bd68d mov       %r9,0x338(%rsp)
063bd695 mov       %r8,0x340(%rsp)
063bd69d mov       %rdx,0x348(%rsp)
063bd6a5 mov       %rcx,0x350(%rsp)
063bd6ad mov       %rax,0x358(%rsp)
063bd6b5 lea       0x310(%rsp),%r9
063bd6bd lea       0x2E0(%rsp),%rcx
063bd6c5 lea       0x63C`F3D0,%rdx
063bd6cc mov       $5,%r8d
063bd6d2 movq      $5,0x20(%rsp)
063bd6db call      0x0000`0000`063B`4170
063bd6e0 mov       0x180(%rsp),%rdx
063bd6e8 lea       0x2E0(%rsp),%rcx
063bd6f0 call      0x0000`0000`063B`2140
063bd6f5 ud2

core::str::impl$0::len:
063bd700 sub       $0x38,%rsp
063bd704 mov       %rcx,8(%rsp)
063bd709 mov       %rdx,0x10(%rsp)
063bd70e mov       %rcx,0x18(%rsp)
063bd713 mov       %rdx,0x20(%rsp)
063bd718 mov       %rcx,0x28(%rsp)
063bd71d mov       %rdx,0x30(%rsp)
063bd722 mov       0x28(%rsp),%rax
063bd727 mov       0x30(%rsp),%rax
063bd72c mov       %rax,(%rsp)
063bd730 mov       (%rsp),%rax
063bd734 add       $0x38,%rsp
063bd738 ret

core::str::impl$0::is_empty:
063bd740 sub       $0x38,%rsp
063bd744 mov       %rcx,0x28(%rsp)
063bd749 mov       %rdx,0x30(%rsp)
063bd74e call      0x0000`0000`063B`D700
063bd753 mov       %rax,0x20(%rsp)
063bd758 mov       0x20(%rsp),%rax
063bd75d cmp       $0,%rax
063bd761 sete      %al
063bd764 and       $1,%al
063bd766 movzbl    %al,%eax
063bd769 add       $0x38,%rsp
063bd76d ret

core::str::impl$0::is_char_boundary:
063bd770 sub       $0xA8,%rsp
063bd777 mov       %r8,0x40(%rsp)
063bd77c mov       %rdx,0x48(%rsp)
063bd781 mov       %rcx,0x50(%rsp)
063bd786 mov       %rcx,0x68(%rsp)
063bd78b mov       %rdx,0x70(%rsp)
063bd790 mov       %r8,0x78(%rsp)
063bd795 cmp       $0,%r8
063bd799 jne       0x0000`0000`063B`D7A5
063bd79b movb      $1,0x5F(%rsp)
063bd7a0 jmp       0x0000`0000`063B`D847
063bd7a5 mov       0x48(%rsp),%rax
063bd7aa mov       0x50(%rsp),%rcx
063bd7af mov       %rcx,0x88(%rsp)
063bd7b7 mov       %rax,0x90(%rsp)
063bd7bf mov       %rcx,0x98(%rsp)
063bd7c7 mov       %rax,0xA0(%rsp)
063bd7cf mov       0x98(%rsp),%rax
063bd7d7 mov       %rax,0x30(%rsp)
063bd7dc mov       0xA0(%rsp),%rax
063bd7e4 mov       %rax,0x38(%rsp)
063bd7e9 mov       0x40(%rsp),%r8
063bd7ee mov       0x38(%rsp),%rdx
063bd7f3 mov       0x30(%rsp),%rcx
063bd7f8 call      0x0000`0000`063B`FE90
063bd7fd mov       %rax,0x60(%rsp)
063bd802 mov       0x60(%rsp),%rax
063bd807 test      %rax,%rax
063bd80a setne     %al
063bd80d movzbl    %al,%eax
063bd810 je        0x0000`0000`063B`D818
063bd812 jmp       0x0000`0000`063B`D814
063bd814 jmp       0x0000`0000`063B`D82E
063bd816 ud2
063bd818 mov       0x48(%rsp),%rdx
063bd81d mov       0x50(%rsp),%rcx
063bd822 call      0x0000`0000`063B`D700
063bd827 mov       %rax,0x28(%rsp)
063bd82c jmp       0x0000`0000`063B`D858
063bd82e mov       0x60(%rsp),%rax
063bd833 mov       (%rax),%cl
063bd835 mov       %cl,0x87(%rsp)
063bd83c call      0x0000`0000`063C`8950
063bd841 and       $1,%al
063bd843 mov       %al,0x5F(%rsp)
063bd847 mov       0x5F(%rsp),%al
063bd84b and       $1,%al
063bd84d movzbl    %al,%eax
063bd850 add       $0xA8,%rsp
063bd857 ret
063bd858 mov       0x40(%rsp),%rax
063bd85d mov       0x28(%rsp),%rcx
063bd862 cmp       %rcx,%rax
063bd865 sete      %al
063bd868 and       $1,%al
063bd86a mov       %al,0x5F(%rsp)
063bd86e jmp       0x0000`0000`063B`D847

core::str::impl$0::floor_char_boundary:
063bd870 sub       $0x128,%rsp
063bd877 mov       %r8,0x70(%rsp)
063bd87c mov       %rdx,0x78(%rsp)
063bd881 mov       %rcx,0x80(%rsp)
063bd889 mov       %rcx,0xC0(%rsp)
063bd891 mov       %rdx,0xC8(%rsp)
063bd899 mov       %r8,0xD0(%rsp)
063bd8a1 call      0x0000`0000`063B`D700
063bd8a6 mov       %rax,0x88(%rsp)
063bd8ae mov       0x70(%rsp),%rax
063bd8b3 mov       0x88(%rsp),%rcx
063bd8bb cmp       %rcx,%rax
063bd8be jae       0x0000`0000`063B`D902
063bd8c0 mov       0x70(%rsp),%rax
063bd8c5 mov       %rax,0x110(%rsp)
063bd8cd movq      $3,0x118(%rsp)
063bd8d9 xor       %ecx,%ecx
063bd8db sub       $3,%rax
063bd8df cmovb     %rcx,%rax
063bd8e3 mov       %rax,0x120(%rsp)
063bd8eb mov       0x120(%rsp),%rax
063bd8f3 mov       %rax,0x68(%rsp)
063bd8f8 mov       %rax,0xD8(%rsp)
063bd900 jmp       0x0000`0000`063B`D92C
063bd902 mov       0x78(%rsp),%rdx
063bd907 mov       0x80(%rsp),%rcx
063bd90f call      0x0000`0000`063B`D700
063bd914 mov       %rax,0x90(%rsp)
063bd91c mov       0x90(%rsp),%rax
063bd924 add       $0x128,%rsp
063bd92b ret
063bd92c mov       0x78(%rsp),%rax
063bd931 mov       0x80(%rsp),%rcx
063bd939 mov       %rcx,0xF0(%rsp)
063bd941 mov       %rax,0xF8(%rsp)
063bd949 mov       %rcx,0x100(%rsp)
063bd951 mov       %rax,0x108(%rsp)
063bd959 mov       0x100(%rsp),%rax
063bd961 mov       %rax,0x58(%rsp)
063bd966 mov       0x108(%rsp),%rax
063bd96e mov       %rax,0x60(%rsp)
063bd973 mov       0x70(%rsp),%r8
063bd978 mov       0x68(%rsp),%rdx
063bd97d lea       0xA8(%rsp),%rcx
063bd985 call      0x0000`0000`063B`1460
063bd98a mov       0x60(%rsp),%rdx
063bd98f mov       0x58(%rsp),%rcx
063bd994 lea       0xA8(%rsp),%r8
063bd99c lea       0x63C`F498,%r9
063bd9a3 call      0x0000`0000`063B`A1B0
063bd9a8 mov       %rax,0x48(%rsp)
063bd9ad mov       %rdx,0x50(%rsp)
063bd9b2 mov       0x50(%rsp),%rdx
063bd9b7 mov       0x48(%rsp),%rcx
063bd9bc call      0x0000`0000`063C`01E0
063bd9c1 mov       %rdx,0xA0(%rsp)
063bd9c9 mov       %rax,0x98(%rsp)
063bd9d1 lea       0x98(%rsp),%rcx
063bd9d9 call      0x0000`0000`063C`7990
063bd9de mov       %rax,0x38(%rsp)
063bd9e3 mov       %rdx,0x40(%rsp)
063bd9e8 mov       %rax,0xE0(%rsp)
063bd9f0 mov       %rdx,0xE8(%rsp)
063bd9f8 mov       0x40(%rsp),%rdx
063bd9fd mov       0x38(%rsp),%rcx
063bda02 lea       0x63C`F4B0,%r8
063bda09 call      0x0000`0000`063B`1A10
063bda0e mov       %rax,0x30(%rsp)
063bda13 mov       0x30(%rsp),%rcx
063bda18 mov       0x68(%rsp),%rax
063bda1d add       %rcx,%rax
063bda20 mov       %rax,0x28(%rsp)
063bda25 setb      %al
063bda28 test      $1,%al
063bda2a jne       0x0000`0000`063B`DA3E
063bda2c mov       0x28(%rsp),%rax
063bda31 mov       %rax,0x90(%rsp)
063bda39 jmp       0x0000`0000`063B`D91C
063bda3e lea       0x63C`F240,%rcx
063bda45 lea       0x63C`F4C8,%r8
063bda4c mov       $0x1C,%edx
063bda51 call      0x0000`0000`063B`2030
063bda56 ud2

core::str::impl$0::floor_char_boundary::closure$0:
063bda60 sub       $0x38,%rsp
063bda64 mov       %rcx,0x28(%rsp)
063bda69 mov       %rdx,0x30(%rsp)
063bda6e mov       (%rdx),%cl
063bda70 call      0x0000`0000`063C`8950
063bda75 mov       %al,0x27(%rsp)
063bda79 mov       0x27(%rsp),%al
063bda7d and       $1,%al
063bda7f movzbl    %al,%eax
063bda82 add       $0x38,%rsp
063bda86 ret

core::str::impl$0::get<core::ops::range::RangeTo<usize> >:
063bda90 sub       $0x58,%rsp
063bda94 mov       %r8,0x28(%rsp)
063bda99 mov       %rdx,%r8
063bda9c mov       %rcx,%rdx
063bda9f mov       0x28(%rsp),%rcx
063bdaa4 mov       %rdx,0x40(%rsp)
063bdaa9 mov       %r8,0x48(%rsp)
063bdaae mov       %rcx,0x50(%rsp)
063bdab3 call      0x0000`0000`063B`3330
063bdab8 mov       %rax,0x30(%rsp)
063bdabd mov       %rdx,0x38(%rsp)
063bdac2 mov       0x38(%rsp),%rdx
063bdac7 mov       0x30(%rsp),%rax
063bdacc add       $0x58,%rsp
063bdad0 ret

core::str::impl$0::chars:
063bdae0 sub       $0x88,%rsp
063bdae7 mov       %rcx,0x58(%rsp)
063bdaec mov       %rdx,0x60(%rsp)
063bdaf1 mov       %rcx,0x68(%rsp)
063bdaf6 mov       %rdx,0x70(%rsp)
063bdafb mov       %rcx,0x78(%rsp)
063bdb00 mov       %rdx,0x80(%rsp)
063bdb08 mov       0x78(%rsp),%rax
063bdb0d mov       %rax,0x38(%rsp)
063bdb12 mov       0x80(%rsp),%rax
063bdb1a mov       %rax,0x40(%rsp)
063bdb1f mov       0x40(%rsp),%rdx
063bdb24 mov       0x38(%rsp),%rcx
063bdb29 call      0x0000`0000`063C`01E0
063bdb2e mov       %rax,0x28(%rsp)
063bdb33 mov       %rdx,0x30(%rsp)
063bdb38 mov       0x30(%rsp),%rax
063bdb3d mov       0x28(%rsp),%rcx
063bdb42 mov       %rcx,0x48(%rsp)
063bdb47 mov       %rax,0x50(%rsp)
063bdb4c mov       0x48(%rsp),%rax
063bdb51 mov       0x50(%rsp),%rdx
063bdb56 add       $0x88,%rsp
063bdb5d ret

core::str::impl$0::char_indices:
063bdb60 sub       $0x68,%rsp
063bdb64 mov       %r8,0x28(%rsp)
063bdb69 mov       %rdx,%rax
063bdb6c mov       0x28(%rsp),%rdx
063bdb71 mov       %rax,0x30(%rsp)
063bdb76 mov       %rcx,%rax
063bdb79 mov       0x30(%rsp),%rcx
063bdb7e mov       %rax,0x38(%rsp)
063bdb83 mov       %rax,0x40(%rsp)
063bdb88 mov       %rcx,0x58(%rsp)
063bdb8d mov       %rdx,0x60(%rsp)
063bdb92 call      0x0000`0000`063B`DAE0
063bdb97 mov       %rax,0x48(%rsp)
063bdb9c mov       %rdx,0x50(%rsp)
063bdba1 mov       0x40(%rsp),%rax
063bdba6 mov       0x38(%rsp),%rcx
063bdbab mov       0x50(%rsp),%rdx
063bdbb0 mov       0x48(%rsp),%r8
063bdbb5 movq      $0,(%rcx)
063bdbbc mov       %r8,8(%rcx)
063bdbc0 mov       %rdx,0x10(%rcx)
063bdbc4 add       $0x68,%rsp
063bdbc8 ret

core::str::impl$0::find<char>:
063bdbd0 sub       $0x98,%rsp
063bdbd7 mov       %r8d,0x34(%rsp)
063bdbdc mov       %rdx,%r9
063bdbdf mov       0x34(%rsp),%edx
063bdbe3 mov       %rcx,%r8
063bdbe6 mov       %r8,0x80(%rsp)
063bdbee mov       %r9,0x88(%rsp)
063bdbf6 mov       %edx,0x94(%rsp)
063bdbfd lea       0x50(%rsp),%rcx
063bdc02 call      0x0000`0000`063C`AE20
063bdc07 lea       0x38(%rsp),%rcx
063bdc0c lea       0x50(%rsp),%rdx
063bdc11 call      0x0000`0000`063C`A970
063bdc16 lea       0x38(%rsp),%rcx
063bdc1b call      0x0000`0000`063B`1A80
063bdc20 mov       %rax,0x20(%rsp)
063bdc25 mov       %rdx,0x28(%rsp)
063bdc2a jmp       0x0000`0000`063B`DC2C
063bdc2c mov       0x28(%rsp),%rdx
063bdc31 mov       0x20(%rsp),%rax
063bdc36 add       $0x98,%rsp
063bdc3d ret

core::str::impl$0::find::closure$0<char>:
063bdc40 sub       $0x20,%rsp
063bdc44 mov       %rcx,%rax
063bdc47 mov       %rax,8(%rsp)
063bdc4c mov       %rdx,0x10(%rsp)
063bdc51 mov       %rax,0x18(%rsp)
063bdc56 add       $0x20,%rsp
063bdc5a ret

core::iter::adapters::map::impl$2::next<str,core::str::iter::SplitTerminator<char>,core::str::LinesAnyMap>:
063bdc60 sub       $0x58,%rsp
063bdc64 mov       %rcx,0x38(%rsp)
063bdc69 mov       %rcx,0x50(%rsp)
063bdc6e call      0x0000`0000`063C`1540
063bdc73 mov       %rax,0x40(%rsp)
063bdc78 mov       %rdx,0x48(%rsp)
063bdc7d mov       0x48(%rsp),%rdx
063bdc82 mov       0x40(%rsp),%rcx
063bdc87 mov       0x38(%rsp),%r8
063bdc8c call      0x0000`0000`063C`1F70
063bdc91 mov       %rax,0x28(%rsp)
063bdc96 mov       %rdx,0x30(%rsp)
063bdc9b mov       0x30(%rsp),%rdx
063bdca0 mov       0x28(%rsp),%rax
063bdca5 add       $0x58,%rsp
063bdca9 ret

core::slice::index::impl$3::get_unchecked<u16>:
063bdcb0 sub       $0xB8,%rsp
063bdcb7 mov       %r9,0x48(%rsp)
063bdcbc mov       %r8,0x58(%rsp)
063bdcc1 mov       %rdx,%rax
063bdcc4 mov       0x48(%rsp),%rdx
063bdcc9 mov       %rax,0x50(%rsp)
063bdcce mov       %rcx,%r8
063bdcd1 mov       0x58(%rsp),%rcx
063bdcd6 mov       %r8,0x60(%rsp)
063bdcdb mov       %r8,0x70(%rsp)
063bdce0 mov       %rax,0x78(%rsp)
063bdce5 mov       %rcx,0x80(%rsp)
063bdced mov       %rdx,0x88(%rsp)
063bdcf5 call      0x0000`0000`063B`8C10
063bdcfa mov       %rax,0x68(%rsp)
063bdcff mov       0x68(%rsp),%rax
063bdd04 mov       0x60(%rsp),%rcx
063bdd09 mov       %rax,0x90(%rsp)
063bdd11 mov       %rcx,0x98(%rsp)
063bdd19 mov       %rax,0xA0(%rsp)
063bdd21 mov       %rcx,0xA8(%rsp)
063bdd29 shl       $1,%rcx
063bdd2d add       %rcx,%rax
063bdd30 mov       %rax,0xB0(%rsp)
063bdd38 mov       0xB0(%rsp),%rax
063bdd40 mov       %rax,0x40(%rsp)
063bdd45 mov       0x60(%rsp),%rcx
063bdd4a mov       0x50(%rsp),%rax
063bdd4f sub       %rcx,%rax
063bdd52 mov       %rax,0x38(%rsp)
063bdd57 setb      %al
063bdd5a test      $1,%al
063bdd5c jne       0x0000`0000`063B`DD79
063bdd5e mov       0x38(%rsp),%rdx
063bdd63 mov       0x40(%rsp),%rcx
063bdd68 call      0x0000`0000`063B`E030
063bdd6d mov       %rax,0x28(%rsp)
063bdd72 mov       %rdx,0x30(%rsp)
063bdd77 jmp       0x0000`0000`063B`DD93
063bdd79 lea       0x63C`F580,%rcx
063bdd80 lea       0x63C`F560,%r8
063bdd87 mov       $0x21,%edx
063bdd8c call      0x0000`0000`063B`2030
063bdd91 ud2
063bdd93 mov       0x30(%rsp),%rdx
063bdd98 mov       0x28(%rsp),%rax
063bdd9d add       $0xB8,%rsp
063bdda4 ret

core::slice::index::impl$3::index<u16>:
063bddb0 sub       $0x78,%rsp
063bddb4 mov       %r9,0x30(%rsp)
063bddb9 mov       %r8,0x38(%rsp)
063bddbe mov       %rdx,0x40(%rsp)
063bddc3 mov       %rcx,0x48(%rsp)
063bddc8 mov       0xA0(%rsp),%rax
063bddd0 mov       %rax,0x50(%rsp)
063bddd5 mov       %rcx,0x58(%rsp)
063bddda mov       %rdx,0x60(%rsp)
063bdddf mov       %r8,0x68(%rsp)
063bdde4 mov       %r9,0x70(%rsp)
063bdde9 cmp       %rdx,%rcx
063bddec ja        0x0000`0000`063B`DDFF
063bddee mov       0x40(%rsp),%rax
063bddf3 mov       0x30(%rsp),%rcx
063bddf8 cmp       %rcx,%rax
063bddfb ja        0x0000`0000`063B`DE3A
063bddfd jmp       0x0000`0000`063B`DE15
063bddff mov       0x50(%rsp),%r8
063bde04 mov       0x40(%rsp),%rdx
063bde09 mov       0x48(%rsp),%rcx
063bde0e call      0x0000`0000`063B`A440
063bde13 ud2
063bde15 mov       0x30(%rsp),%r9
063bde1a mov       0x38(%rsp),%r8
063bde1f mov       0x40(%rsp),%rdx
063bde24 mov       0x48(%rsp),%rcx
063bde29 call      0x0000`0000`063B`DCB0
063bde2e mov       %rax,0x20(%rsp)
063bde33 mov       %rdx,0x28(%rsp)
063bde38 jmp       0x0000`0000`063B`DE50
063bde3a mov       0x50(%rsp),%r8
063bde3f mov       0x30(%rsp),%rdx
063bde44 mov       0x40(%rsp),%rcx
063bde49 call      0x0000`0000`063B`A390
063bde4e ud2
063bde50 mov       0x28(%rsp),%rdx
063bde55 mov       0x20(%rsp),%rax
063bde5a add       $0x78,%rsp
063bde5e ret

core::slice::index::impl$7::index<u16>:
063bde60 sub       $0x98,%rsp
063bde67 mov       %r9,0x48(%rsp)
063bde6c mov       %r8,0x50(%rsp)
063bde71 mov       %rdx,0x58(%rsp)
063bde76 mov       %rcx,0x60(%rsp)
063bde7b mov       %rdx,0x88(%rsp)
063bde83 mov       %r8,0x90(%rsp)
063bde8b call      0x0000`0000`063B`1480
063bde90 mov       %rax,0x68(%rsp)
063bde95 mov       0x68(%rsp),%rax
063bde9a cmpq      $0xFFFF`FFFF`FFFF`FFFF,(%rax)
063bde9e je        0x0000`0000`063B`DED8
063bdea0 mov       0x60(%rsp),%rax
063bdea5 mov       (%rax),%rcx
063bdea8 mov       %rcx,0x70(%rsp)
063bdead mov       8(%rax),%rcx
063bdeb1 mov       %rcx,0x78(%rsp)
063bdeb6 mov       0x10(%rax),%rax
063bdeba mov       %rax,0x80(%rsp)
063bdec2 lea       0x70(%rsp),%rcx
063bdec7 call      0x0000`0000`063B`DFA0
063bdecc mov       %rax,0x38(%rsp)
063bded1 mov       %rdx,0x40(%rsp)
063bded6 jmp       0x0000`0000`063B`DEE4
063bded8 mov       0x48(%rsp),%rcx
063bdedd call      0x0000`0000`063B`A4F0
063bdee2 ud2
063bdee4 mov       0x48(%rsp),%rax
063bdee9 mov       0x50(%rsp),%r9
063bdeee mov       0x58(%rsp),%r8
063bdef3 mov       0x40(%rsp),%rdx
063bdef8 mov       0x38(%rsp),%rcx
063bdefd mov       %rax,0x20(%rsp)
063bdf02 call      0x0000`0000`063B`DDB0
063bdf07 mov       %rax,0x28(%rsp)
063bdf0c mov       %rdx,0x30(%rsp)
063bdf11 mov       0x30(%rsp),%rdx
063bdf16 mov       0x28(%rsp),%rax
063bdf1b add       $0x98,%rsp
063bdf22 ret

core::slice::index::impl$8::index<u16>:
063bdf30 sub       $0x78,%rsp
063bdf34 mov       %r9,0x30(%rsp)
063bdf39 mov       %r8,%rax
063bdf3c mov       %rax,0x38(%rsp)
063bdf41 mov       %rdx,0x40(%rsp)
063bdf46 mov       %rcx,%r8
063bdf49 mov       %r8,0x60(%rsp)
063bdf4e mov       %rdx,0x68(%rsp)
063bdf53 mov       %rax,0x70(%rsp)
063bdf58 lea       0x48(%rsp),%rcx
063bdf5d xor       %eax,%eax
063bdf5f mov       %eax,%edx
063bdf61 call      0x0000`0000`063B`1460
063bdf66 mov       0x30(%rsp),%r9
063bdf6b mov       0x38(%rsp),%r8
063bdf70 mov       0x40(%rsp),%rdx
063bdf75 lea       0x48(%rsp),%rcx
063bdf7a call      0x0000`0000`063B`DE60
063bdf7f mov       %rax,0x20(%rsp)
063bdf84 mov       %rdx,0x28(%rsp)
063bdf89 mov       0x28(%rsp),%rdx
063bdf8e mov       0x20(%rsp),%rax
063bdf93 add       $0x78,%rsp
063bdf97 ret

core::ops::range::RangeInclusive<usize>::into_slice_range:
063bdfa0 sub       $0x58,%rsp
063bdfa4 mov       %rcx,0x28(%rsp)
063bdfa9 mov       8(%rcx),%rax
063bdfad add       $1,%rax
063bdfb1 mov       %rax,0x30(%rsp)
063bdfb6 setb      %al
063bdfb9 test      $1,%al
063bdfbb jne       0x0000`0000`063B`DFD4
063bdfbd mov       0x28(%rsp),%rax
063bdfc2 mov       0x30(%rsp),%rcx
063bdfc7 mov       %rcx,0x50(%rsp)
063bdfcc testb     $1,0x10(%rax)
063bdfd0 jne       0x0000`0000`063B`DFFD
063bdfd2 jmp       0x0000`0000`063B`DFEE
063bdfd4 lea       0x63C`F640,%rcx
063bdfdb lea       0x63C`F620,%r8
063bdfe2 mov       $0x1C,%edx
063bdfe7 call      0x0000`0000`063B`2030
063bdfec ud2
063bdfee mov       0x28(%rsp),%rax
063bdff3 mov       (%rax),%rax
063bdff6 mov       %rax,0x48(%rsp)
063bdffb jmp       0x0000`0000`063B`E007
063bdffd mov       0x30(%rsp),%rax
063be002 mov       %rax,0x48(%rsp)
063be007 mov       0x30(%rsp),%rax
063be00c mov       0x48(%rsp),%rcx
063be011 mov       %rcx,0x38(%rsp)
063be016 mov       %rax,0x40(%rsp)
063be01b mov       0x38(%rsp),%rax
063be020 mov       0x40(%rsp),%rdx
063be025 add       $0x58,%rsp
063be029 ret

core::ptr::slice_from_raw_parts<u16>:
063be030 sub       $0x58,%rsp
063be034 mov       %rdx,0x38(%rsp)
063be039 mov       %rcx,0x48(%rsp)
063be03e mov       %rdx,0x50(%rsp)
063be043 call      0x0000`0000`063B`8BD0
063be048 mov       %rax,0x40(%rsp)
063be04d mov       0x38(%rsp),%rdx
063be052 mov       0x40(%rsp),%rcx
063be057 call      0x0000`0000`063C`1570
063be05c mov       %rax,0x28(%rsp)
063be061 mov       %rdx,0x30(%rsp)
063be066 mov       0x30(%rsp),%rdx
063be06b mov       0x28(%rsp),%rax
063be070 add       $0x58,%rsp
063be074 ret

core::ptr::write<u64>:
063be080 sub       $0x10,%rsp
063be084 mov       %rdx,(%rsp)
063be088 mov       %rcx,8(%rsp)
063be08d mov       (%rsp),%rax
063be091 mov       %rax,(%rcx)
063be094 add       $0x10,%rsp
063be098 ret

core::str::traits::impl$7::get_unchecked:
063be0a0 sub       $0xD8,%rsp
063be0a7 mov       %r9,0x48(%rsp)
063be0ac mov       %r8,0x58(%rsp)
063be0b1 mov       %rdx,%rax
063be0b4 mov       0x48(%rsp),%rdx
063be0b9 mov       %rax,0x50(%rsp)
063be0be mov       %rcx,%r8
063be0c1 mov       0x58(%rsp),%rcx
063be0c6 mov       %r8,0x60(%rsp)
063be0cb mov       %r8,0x70(%rsp)
063be0d0 mov       %rax,0x78(%rsp)
063be0d5 mov       %rcx,0x80(%rsp)
063be0dd mov       %rdx,0x88(%rsp)
063be0e5 mov       %rcx,0x90(%rsp)
063be0ed mov       %rdx,0x98(%rsp)
063be0f5 call      0x0000`0000`063C`4B40
063be0fa mov       %rax,0x68(%rsp)
063be0ff mov       0x60(%rsp),%rcx
063be104 mov       0x68(%rsp),%rax
063be109 mov       %rax,0xB0(%rsp)
063be111 mov       %rcx,0xB8(%rsp)
063be119 mov       %rax,0xC0(%rsp)
063be121 mov       %rcx,0xC8(%rsp)
063be129 add       %rcx,%rax
063be12c mov       %rax,0xD0(%rsp)
063be134 mov       0xD0(%rsp),%rax
063be13c mov       %rax,0x40(%rsp)
063be141 mov       %rax,0xA0(%rsp)
063be149 mov       0x60(%rsp),%rcx
063be14e mov       0x50(%rsp),%rax
063be153 sub       %rcx,%rax
063be156 mov       %rax,0x38(%rsp)
063be15b setb      %al
063be15e test      $1,%al
063be160 jne       0x0000`0000`063B`E185
063be162 mov       0x38(%rsp),%rdx
063be167 mov       0x40(%rsp),%rcx
063be16c mov       %rdx,0xA8(%rsp)
063be174 call      0x0000`0000`063C`8BA0
063be179 mov       %rax,0x28(%rsp)
063be17e mov       %rdx,0x30(%rsp)
063be183 jmp       0x0000`0000`063B`E19F
063be185 lea       0x63C`F580,%rcx
063be18c lea       0x63C`F6D8,%r8
063be193 mov       $0x21,%edx
063be198 call      0x0000`0000`063B`2030
063be19d ud2
063be19f mov       0x30(%rsp),%rdx
063be1a4 mov       0x28(%rsp),%rax
063be1a9 add       $0xD8,%rsp
063be1b0 ret

core::str::converts::from_utf8_unchecked_mut:
063be1c0 sub       $0x10,%rsp
063be1c4 mov       %rcx,%rax
063be1c7 mov       %rax,(%rsp)
063be1cb mov       %rdx,8(%rsp)
063be1d0 add       $0x10,%rsp
063be1d4 ret

core::char::convert::char_try_from_u32:
063be1e0 sub       $0x20,%rsp
063be1e4 mov       %ecx,%eax
063be1e6 mov       %eax,4(%rsp)
063be1ea mov       %eax,0x10(%rsp)
063be1ee xor       $0xD800,%eax
063be1f3 mov       %eax,0x18(%rsp)
063be1f7 movl      $0x800,0x1C(%rsp)
063be1ff sub       $0x800,%eax
063be204 mov       %eax,8(%rsp)
063be208 mov       8(%rsp),%eax
063be20c cmp       $0x10`F800,%eax
063be211 jae       0x0000`0000`063B`E224
063be213 mov       4(%rsp),%eax
063be217 mov       %eax,0x14(%rsp)
063be21b mov       0x14(%rsp),%eax
063be21f mov       %eax,(%rsp)
063be222 jmp       0x0000`0000`063B`E235
063be224 movl      $0x11`0000,0xC(%rsp)
063be22c mov       0xC(%rsp),%eax
063be230 add       $0x20,%rsp
063be234 ret
063be235 mov       (%rsp),%eax
063be238 mov       %eax,0xC(%rsp)
063be23c jmp       0x0000`0000`063B`E22C

core::char::convert::from_u32_unchecked:
063be240 sub       $0x38,%rsp
063be244 mov       %ecx,0x34(%rsp)
063be248 call      0x0000`0000`063C`1D10
063be24d mov       %eax,0x30(%rsp)
063be251 mov       0x30(%rsp),%ecx
063be255 lea       0x63C`F770,%rdx
063be25c call      0x0000`0000`063B`1740
063be261 mov       %eax,0x2C(%rsp)
063be265 mov       0x2C(%rsp),%eax
063be269 add       $0x38,%rsp
063be26d ret

core::char::convert::impl$8::try_from:
063be270 sub       $0x28,%rsp
063be274 mov       %ecx,0x24(%rsp)
063be278 call      0x0000`0000`063B`E1E0
063be27d mov       %eax,0x20(%rsp)
063be281 mov       0x20(%rsp),%eax
063be285 add       $0x28,%rsp
063be289 ret

core::char::convert::from_u32:
063be290 sub       $0x38,%rsp
063be294 mov       %ecx,0x30(%rsp)
063be298 call      0x0000`0000`063B`E1E0
063be29d mov       %eax,0x2C(%rsp)
063be2a1 mov       0x2C(%rsp),%eax
063be2a5 add       $0xFFEF`0000,%eax
063be2aa sete      %al
063be2ad movzbl    %al,%eax
063be2b0 jne       0x0000`0000`063B`E2B8
063be2b2 jmp       0x0000`0000`063B`E2B4
063be2b4 jmp       0x0000`0000`063B`E2C6
063be2b6 ud2
063be2b8 mov       0x2C(%rsp),%eax
063be2bc mov       %eax,0x34(%rsp)
063be2c0 mov       %eax,0x28(%rsp)
063be2c4 jmp       0x0000`0000`063B`E2CE
063be2c6 movl      $0x11`0000,0x28(%rsp)
063be2ce mov       0x28(%rsp),%eax
063be2d2 add       $0x38,%rsp
063be2d6 ret

core::iter::traits::iterator::Iterator::enumerate<core::slice::iter::Iter<u16> >:
063be2e0 sub       $0x38,%rsp
063be2e4 mov       %rcx,%rax
063be2e7 mov       %rax,0x20(%rsp)
063be2ec mov       %rdx,0x28(%rsp)
063be2f1 mov       %r8,0x30(%rsp)
063be2f6 call      0x0000`0000`063B`C080
063be2fb mov       0x20(%rsp),%rax
063be300 add       $0x38,%rsp
063be304 ret

core::iter::adapters::map::Map<core::str::iter::SplitTerminator<char>,core::str::LinesAnyMap>::new<core::str::iter::SplitTerminator<char>,core::str::LinesAnyMap>:
063be310 sub       $0x88,%rsp
063be317 mov       %rcx,0x28(%rsp)
063be31c mov       %rcx,0x30(%rsp)
063be321 lea       0x38(%rsp),%rcx
063be326 mov       $0x48,%r8d
063be32c call      0x0000`0000`063B`BDE0
063be331 mov       0x28(%rsp),%rcx
063be336 lea       0x38(%rsp),%rdx
063be33b mov       $0x48,%r8d
063be341 call      0x0000`0000`063B`BDE0
063be346 mov       0x30(%rsp),%rax
063be34b add       $0x88,%rsp
063be352 ret

core::convert::num::impl$38::from:
063be360 push      %rax
063be361 mov       %cl,7(%rsp)
063be365 movzbl    %cl,%eax
063be368 pop       %rcx
063be369 ret

core::convert::num::impl$43::from:
063be370 push      %rax
063be371 mov       %cx,6(%rsp)
063be376 movzwl    %cx,%eax
063be379 pop       %rcx
063be37a ret

core::panicking::assert_failed<uefi::result::status::Status,uefi::result::status::Status>:
063be380 sub       $0x88,%rsp
063be387 mov       %rdx,%rax
063be38a mov       0xB0(%rsp),%rdx
063be392 mov       %rax,0x40(%rsp)
063be397 mov       %r8,0x48(%rsp)
063be39c mov       %cl,0x87(%rsp)
063be3a3 mov       0x28(%r9),%rax
063be3a7 mov       %rax,0x78(%rsp)
063be3ac mov       0x20(%r9),%rax
063be3b0 mov       %rax,0x70(%rsp)
063be3b5 mov       0x18(%r9),%rax
063be3b9 mov       %rax,0x68(%rsp)
063be3be mov       0x10(%r9),%rax
063be3c2 mov       %rax,0x60(%rsp)
063be3c7 mov       (%r9),%rax
063be3ca mov       8(%r9),%r8
063be3ce mov       %r8,0x58(%rsp)
063be3d3 mov       %rax,0x50(%rsp)
063be3d8 mov       %rsp,%rax
063be3db mov       %rdx,0x30(%rax)
063be3df lea       0x50(%rsp),%rdx
063be3e4 mov       %rdx,0x28(%rax)
063be3e8 lea       0x63C`F788,%r8
063be3ef mov       %r8,0x20(%rax)
063be3f3 lea       0x40(%rsp),%rdx
063be3f8 lea       0x48(%rsp),%r9
063be3fd call      0x0000`0000`063B`2220
063be402 ud2

enum$<log::MaybeStaticStr>::get:
063be410 sub       $0x40,%rsp
063be414 mov       %rcx,(%rsp)
063be418 mov       %rcx,0x18(%rsp)
063be41d mov       (%rcx),%rax
063be420 test      %rax,%rax
063be423 je        0x0000`0000`063B`E42B
063be425 jmp       0x0000`0000`063B`E427
063be427 jmp       0x0000`0000`063B`E44D
063be429 ud2
063be42b mov       (%rsp),%rax
063be42f mov       8(%rax),%rcx
063be433 mov       0x10(%rax),%rax
063be437 mov       %rcx,0x30(%rsp)
063be43c mov       %rax,0x38(%rsp)
063be441 mov       %rcx,8(%rsp)
063be446 mov       %rax,0x10(%rsp)
063be44b jmp       0x0000`0000`063B`E46D
063be44d mov       (%rsp),%rax
063be451 mov       8(%rax),%rcx
063be455 mov       0x10(%rax),%rax
063be459 mov       %rcx,0x20(%rsp)
063be45e mov       %rax,0x28(%rsp)
063be463 mov       %rcx,8(%rsp)
063be468 mov       %rax,0x10(%rsp)
063be46d mov       8(%rsp),%rax
063be472 mov       0x10(%rsp),%rdx
063be477 add       $0x40,%rsp
063be47b ret

log::Record::args:
063be480 push      %rax
063be481 mov       %rcx,%rax
063be484 mov       %rax,(%rsp)
063be488 add       $0x18,%rax
063be48c pop       %rcx
063be48d ret

log::Record::file:
063be490 sub       $0x58,%rsp
063be494 mov       %rcx,0x50(%rsp)
063be499 mov       0x60(%rcx),%rax
063be49d mov       %rax,0x38(%rsp)
063be4a2 mov       0x68(%rcx),%rax
063be4a6 mov       %rax,0x40(%rsp)
063be4ab mov       0x70(%rcx),%rax
063be4af mov       %rax,0x48(%rsp)
063be4b4 lea       0x38(%rsp),%rcx
063be4b9 call      0x0000`0000`063C`1E70
063be4be mov       %rax,0x28(%rsp)
063be4c3 mov       %rdx,0x30(%rsp)
063be4c8 mov       0x30(%rsp),%rdx
063be4cd mov       0x28(%rsp),%rax
063be4d2 add       $0x58,%rsp
063be4d6 ret

log::impl$19::file::closure$0:
063be4e0 sub       $0x38,%rsp
063be4e4 call      0x0000`0000`063B`E410
063be4e9 mov       %rax,0x20(%rsp)
063be4ee mov       %rdx,0x28(%rsp)
063be4f3 mov       0x28(%rsp),%rdx
063be4f8 mov       0x20(%rsp),%rax
063be4fd add       $0x38,%rsp
063be501 ret

log::Record::line:
063be510 push      %rax
063be511 mov       %rcx,(%rsp)
063be515 mov       0x78(%rcx),%eax
063be518 mov       0x7C(%rcx),%edx
063be51b pop       %rcx
063be51c ret

log::Record::level:
063be520 sub       $0x38,%rsp
063be524 mov       %rcx,0x30(%rsp)
063be529 call      0x0000`0000`063B`E540
063be52e mov       %rax,0x28(%rsp)
063be533 mov       0x28(%rsp),%rax
063be538 add       $0x38,%rsp
063be53c ret

log::Metadata::level:
063be540 push      %rax
063be541 mov       %rcx,(%rsp)
063be545 mov       (%rcx),%rax
063be548 pop       %rcx
063be549 ret

core::ops::function::impls::impl$4::call_once<tuple$<str>,core::str::LinesAnyMap>:
063be550 sub       $0x48,%rsp
063be554 mov       %rdx,0x30(%rsp)
063be559 mov       %r8,0x38(%rsp)
063be55e mov       %rcx,0x40(%rsp)
063be563 mov       0x30(%rsp),%rdx
063be568 mov       0x38(%rsp),%r8
063be56d call      0x0000`0000`063B`F650
063be572 mov       %rax,0x20(%rsp)
063be577 mov       %rdx,0x28(%rsp)
063be57c mov       0x28(%rsp),%rdx
063be581 mov       0x20(%rsp),%rax
063be586 add       $0x48,%rsp
063be58a ret

core::ptr::drop_in_place<ref_mut$<uefi::logger::DecoratedLog<uefi::proto::console::text::output::Output> > >:
063be590 push      %rax
063be591 mov       %rcx,(%rsp)
063be595 pop       %rax
063be596 ret

core::ptr::drop_in_place<ref$<tuple$<> > >:
063be5a0 push      %rax
063be5a1 mov       %rcx,(%rsp)
063be5a5 pop       %rax
063be5a6 ret

core::ptr::drop_in_place<core::fmt::Error>:
063be5b0 push      %rax
063be5b1 mov       %rcx,(%rsp)
063be5b5 pop       %rax
063be5b6 ret

core::ptr::drop_in_place<uefi::result::error::Error<tuple$<> > >:
063be5c0 push      %rax
063be5c1 mov       %rcx,(%rsp)
063be5c5 pop       %rax
063be5c6 ret

core::ptr::drop_in_place<ref$<uefi::result::status::Status> >:
063be5d0 push      %rax
063be5d1 mov       %rcx,(%rsp)
063be5d5 pop       %rax
063be5d6 ret

core::ptr::drop_in_place<ref_mut$<uefi::proto::console::text::output::Output> >:
063be5e0 push      %rax
063be5e1 mov       %rcx,(%rsp)
063be5e5 pop       %rax
063be5e6 ret

core::str::validations::utf8_first_byte:
063be5f0 sub       $0x28,%rsp
063be5f4 mov       %cl,0x21(%rsp)
063be5f8 mov       %cl,0x23(%rsp)
063be5fc mov       %edx,0x24(%rsp)
063be600 mov       %edx,%eax
063be602 and       $0xFFFF`FFF8,%eax
063be605 cmp       $0,%eax
063be608 setne     %al
063be60b mov       %dl,%cl
063be60d and       $7,%cl
063be610 mov       $0x7F,%dl
063be612 shr       %cl,%dl
063be614 mov       %dl,0x22(%rsp)
063be618 test      $1,%al
063be61a jne       0x0000`0000`063B`E62E
063be61c mov       0x22(%rsp),%cl
063be620 mov       0x21(%rsp),%al
063be624 and       %cl,%al
063be626 movzbl    %al,%eax
063be629 add       $0x28,%rsp
063be62d ret
063be62e lea       0x63C`F840,%rcx
063be635 lea       0x63C`F828,%r8
063be63c mov       $0x24,%edx
063be641 call      0x0000`0000`063B`2030
063be646 ud2

core::str::validations::utf8_is_cont_byte:
063be650 push      %rax
063be651 mov       %cl,7(%rsp)
063be655 cmp       $0xC0,%cl
063be658 setl      %al
063be65b and       $1,%al
063be65d movzbl    %al,%eax
063be660 pop       %rcx
063be661 ret

core::str::validations::utf8_acc_cont_byte:
063be670 sub       $0x10,%rsp
063be674 mov       %dl,3(%rsp)
063be678 mov       %ecx,8(%rsp)
063be67c mov       %dl,0xF(%rsp)
063be680 shl       $6,%ecx
063be683 mov       %ecx,4(%rsp)
063be687 mov       4(%rsp),%eax
063be68b mov       3(%rsp),%cl
063be68f and       $0x3F,%cl
063be692 movzbl    %cl,%ecx
063be695 or        %ecx,%eax
063be697 add       $0x10,%rsp
063be69b ret

core::str::validations::next_code_point_reverse<core::slice::iter::Iter<u8> >:
063be6a0 sub       $0xD8,%rsp
063be6a7 mov       %rcx,0x88(%rsp)
063be6af mov       %rcx,0xB0(%rsp)
063be6b7 call      0x0000`0000`063C`7BA0
063be6bc mov       %rax,0x90(%rsp)
063be6c4 mov       0x90(%rsp),%rcx
063be6cc call      0x0000`0000`063B`1F20
063be6d1 mov       %rax,0xA0(%rsp)
063be6d9 mov       0xA0(%rsp),%rax
063be6e1 test      %rax,%rax
063be6e4 sete      %al
063be6e7 movzbl    %al,%eax
063be6ea jne       0x0000`0000`063B`E6F2
063be6ec jmp       0x0000`0000`063B`E6EE
063be6ee jmp       0x0000`0000`063B`E719
063be6f0 ud2
063be6f2 mov       0xA0(%rsp),%rax
063be6fa mov       %rax,0x80(%rsp)
063be702 mov       %rax,0xC0(%rsp)
063be70a mov       %rax,0xC8(%rsp)
063be712 cmpb      $0x80,(%rax)
063be715 jb        0x0000`0000`063B`E772
063be717 jmp       0x0000`0000`063B`E742
063be719 call      0x0000`0000`063B`2010
063be71e mov       %edx,0x9C(%rsp)
063be725 mov       %eax,0x98(%rsp)
063be72c mov       0x98(%rsp),%eax
063be733 mov       0x9C(%rsp),%edx
063be73a add       $0xD8,%rsp
063be741 ret
063be742 mov       0x88(%rsp),%rcx
063be74a mov       0x80(%rsp),%rax
063be752 mov       (%rax),%al
063be754 mov       %al,0x77(%rsp)
063be758 mov       %al,0xD3(%rsp)
063be75f mov       %al,0xD4(%rsp)
063be766 call      0x0000`0000`063C`7BA0
063be76b mov       %rax,0x78(%rsp)
063be770 jmp       0x0000`0000`063B`E79A
063be772 mov       0x80(%rsp),%rax
063be77a mov       (%rax),%al
063be77c mov       %al,0xD2(%rsp)
063be783 movzbl    %al,%eax
063be786 mov       %eax,0x9C(%rsp)
063be78d movl      $1,0x98(%rsp)
063be798 jmp       0x0000`0000`063B`E72C
063be79a mov       0x78(%rsp),%rcx
063be79f lea       0x63C`F868,%rdx
063be7a6 call      0x0000`0000`063B`19A0
063be7ab mov       %rax,0x68(%rsp)
063be7b0 mov       0x68(%rsp),%rax
063be7b5 mov       (%rax),%cl
063be7b7 mov       %cl,0x63(%rsp)
063be7bb mov       %cl,0xD5(%rsp)
063be7c2 mov       $2,%edx
063be7c7 call      0x0000`0000`063B`E5F0
063be7cc mov       %eax,0x64(%rsp)
063be7d0 mov       0x63(%rsp),%cl
063be7d4 mov       0x64(%rsp),%eax
063be7d8 mov       %eax,0xAC(%rsp)
063be7df call      0x0000`0000`063B`E650
063be7e4 mov       %al,0x62(%rsp)
063be7e8 mov       0x62(%rsp),%al
063be7ec test      $1,%al
063be7ee jne       0x0000`0000`063B`E80B
063be7f0 jmp       0x0000`0000`063B`E7F2
063be7f2 mov       0x77(%rsp),%dl
063be7f6 mov       0xAC(%rsp),%ecx
063be7fd call      0x0000`0000`063B`E670
063be802 mov       %eax,0x5C(%rsp)
063be806 jmp       0x0000`0000`063B`E90E
063be80b mov       0x88(%rsp),%rcx
063be813 call      0x0000`0000`063C`7BA0
063be818 mov       %rax,0x50(%rsp)
063be81d mov       0x50(%rsp),%rcx
063be822 lea       0x63C`F880,%rdx
063be829 call      0x0000`0000`063B`19A0
063be82e mov       %rax,0x48(%rsp)
063be833 mov       0x48(%rsp),%rax
063be838 mov       (%rax),%cl
063be83a mov       %cl,0x43(%rsp)
063be83e mov       %cl,0xD6(%rsp)
063be845 mov       $3,%edx
063be84a call      0x0000`0000`063B`E5F0
063be84f mov       %eax,0x44(%rsp)
063be853 mov       0x43(%rsp),%cl
063be857 mov       0x44(%rsp),%eax
063be85b mov       %eax,0xAC(%rsp)
063be862 call      0x0000`0000`063B`E650
063be867 mov       %al,0x42(%rsp)
063be86b mov       0x42(%rsp),%al
063be86f test      $1,%al
063be871 jne       0x0000`0000`063B`E88B
063be873 jmp       0x0000`0000`063B`E875
063be875 mov       0x63(%rsp),%dl
063be879 mov       0xAC(%rsp),%ecx
063be880 call      0x0000`0000`063B`E670
063be885 mov       %eax,0x3C(%rsp)
063be889 jmp       0x0000`0000`063B`E8FE
063be88b mov       0x88(%rsp),%rcx
063be893 call      0x0000`0000`063C`7BA0
063be898 mov       %rax,0x30(%rsp)
063be89d mov       0x30(%rsp),%rcx
063be8a2 lea       0x63C`F898,%rdx
063be8a9 call      0x0000`0000`063B`19A0
063be8ae mov       %rax,0x28(%rsp)
063be8b3 mov       0x28(%rsp),%rax
063be8b8 mov       (%rax),%cl
063be8ba mov       %cl,0xD7(%rsp)
063be8c1 mov       $4,%edx
063be8c6 call      0x0000`0000`063B`E5F0
063be8cb mov       %eax,0x24(%rsp)
063be8cf mov       0x43(%rsp),%dl
063be8d3 mov       0x24(%rsp),%eax
063be8d7 mov       %eax,0xAC(%rsp)
063be8de mov       0xAC(%rsp),%ecx
063be8e5 call      0x0000`0000`063B`E670
063be8ea mov       %eax,0x20(%rsp)
063be8ee mov       0x20(%rsp),%eax
063be8f2 mov       %eax,0xAC(%rsp)
063be8f9 jmp       0x0000`0000`063B`E875
063be8fe mov       0x3C(%rsp),%eax
063be902 mov       %eax,0xAC(%rsp)
063be909 jmp       0x0000`0000`063B`E7F2
063be90e mov       0x5C(%rsp),%eax
063be912 mov       %eax,0xAC(%rsp)
063be919 mov       0xAC(%rsp),%eax
063be920 mov       %eax,0x9C(%rsp)
063be927 movl      $1,0x98(%rsp)
063be932 jmp       0x0000`0000`063B`E72C

core::str::impl$0::get_unchecked<core::ops::range::Range<usize> >:
063be940 sub       $0x68,%rsp
063be944 mov       %r9,0x28(%rsp)
063be949 mov       %r8,0x30(%rsp)
063be94e mov       %rdx,%r9
063be951 mov       0x28(%rsp),%rdx
063be956 mov       %rcx,%r8
063be959 mov       0x30(%rsp),%rcx
063be95e mov       %r8,0x48(%rsp)
063be963 mov       %r9,0x50(%rsp)
063be968 mov       %rcx,0x58(%rsp)
063be96d mov       %rdx,0x60(%rsp)
063be972 call      0x0000`0000`063B`E0A0
063be977 mov       %rax,0x38(%rsp)
063be97c mov       %rdx,0x40(%rsp)
063be981 mov       0x40(%rsp),%rdx
063be986 mov       0x38(%rsp),%rax
063be98b add       $0x68,%rsp
063be98f ret

core::str::impl$0::split_terminator<char>:
063be990 sub       $0xD8,%rsp
063be997 mov       %rcx,0x20(%rsp)
063be99c mov       %rcx,0x28(%rsp)
063be9a1 mov       %rdx,0xC0(%rsp)
063be9a9 mov       %r8,0xC8(%rsp)
063be9b1 mov       %r9d,0xD4(%rsp)
063be9b9 lea       0x78(%rsp),%rcx
063be9be call      0x0000`0000`063B`EB60
063be9c3 mov       0x78(%rsp),%rax
063be9c8 mov       %rax,0x30(%rsp)
063be9cd mov       0x80(%rsp),%rax
063be9d5 mov       %rax,0x38(%rsp)
063be9da lea       0x30(%rsp),%rcx
063be9df add       $0x10,%rcx
063be9e3 lea       0x78(%rsp),%rdx
063be9e8 add       $0x10,%rdx
063be9ec mov       $0x30,%r8d
063be9f2 call      0x0000`0000`063B`BDE0
063be9f7 mov       0x20(%rsp),%rcx
063be9fc movb      $0,0x70(%rsp)
063bea01 mov       0xB9(%rsp),%al
063bea08 and       $1,%al
063bea0a mov       %al,0x71(%rsp)
063bea0e lea       0x30(%rsp),%rdx
063bea13 mov       $0x48,%r8d
063bea19 call      0x0000`0000`063B`BDE0
063bea1e mov       0x28(%rsp),%rax
063bea23 add       $0xD8,%rsp
063bea2a ret

core::str::impl$0::len:
063bea30 sub       $0x38,%rsp
063bea34 mov       %rcx,8(%rsp)
063bea39 mov       %rdx,0x10(%rsp)
063bea3e mov       %rcx,0x18(%rsp)
063bea43 mov       %rdx,0x20(%rsp)
063bea48 mov       %rcx,0x28(%rsp)
063bea4d mov       %rdx,0x30(%rsp)
063bea52 mov       0x28(%rsp),%rax
063bea57 mov       0x30(%rsp),%rax
063bea5c mov       %rax,(%rsp)
063bea60 mov       (%rsp),%rax
063bea64 add       $0x38,%rsp
063bea68 ret

core::str::impl$0::chars:
063bea70 sub       $0x88,%rsp
063bea77 mov       %rcx,0x58(%rsp)
063bea7c mov       %rdx,0x60(%rsp)
063bea81 mov       %rcx,0x68(%rsp)
063bea86 mov       %rdx,0x70(%rsp)
063bea8b mov       %rcx,0x78(%rsp)
063bea90 mov       %rdx,0x80(%rsp)
063bea98 mov       0x78(%rsp),%rax
063bea9d mov       %rax,0x38(%rsp)
063beaa2 mov       0x80(%rsp),%rax
063beaaa mov       %rax,0x40(%rsp)
063beaaf mov       0x40(%rsp),%rdx
063beab4 mov       0x38(%rsp),%rcx
063beab9 call      0x0000`0000`063C`01E0
063beabe mov       %rax,0x28(%rsp)
063beac3 mov       %rdx,0x30(%rsp)
063beac8 mov       0x30(%rsp),%rax
063beacd mov       0x28(%rsp),%rcx
063bead2 mov       %rcx,0x48(%rsp)
063bead7 mov       %rax,0x50(%rsp)
063beadc mov       0x48(%rsp),%rax
063beae1 mov       0x50(%rsp),%rdx
063beae6 add       $0x88,%rsp
063beaed ret

core::str::impl$0::lines:
063beaf0 sub       $0xD8,%rsp
063beaf7 mov       %rcx,0x28(%rsp)
063beafc mov       %rcx,0x30(%rsp)
063beb01 mov       %rdx,0xC8(%rsp)
063beb09 mov       %r8,0xD0(%rsp)
063beb11 lea       0x80(%rsp),%rcx
063beb19 mov       $0xA,%r9d
063beb1f call      0x0000`0000`063B`E990
063beb24 lea       0x38(%rsp),%rcx
063beb29 lea       0x80(%rsp),%rdx
063beb31 call      0x0000`0000`063C`1DA0
063beb36 mov       0x28(%rsp),%rcx
063beb3b lea       0x38(%rsp),%rdx
063beb40 mov       $0x48,%r8d
063beb46 call      0x0000`0000`063B`BDE0
063beb4b mov       0x30(%rsp),%rax
063beb50 add       $0xD8,%rsp
063beb57 ret

core::str::impl$0::split<char>:
063beb60 sub       $0xE8,%rsp
063beb67 mov       %r9d,0x2C(%rsp)
063beb6c mov       %r8,0x30(%rsp)
063beb71 mov       %rdx,%rax
063beb74 mov       0x30(%rsp),%rdx
063beb79 mov       %rax,0x38(%rsp)
063beb7e mov       %rcx,%rax
063beb81 mov       0x38(%rsp),%rcx
063beb86 mov       %rax,0x40(%rsp)
063beb8b mov       %rax,0x48(%rsp)
063beb90 mov       %rcx,0xD0(%rsp)
063beb98 mov       %rdx,0xD8(%rsp)
063beba0 mov       %r9d,0xE4(%rsp)
063beba8 call      0x0000`0000`063B`EA30
063bebad mov       %rax,0x50(%rsp)
063bebb2 mov       0x30(%rsp),%r9
063bebb7 mov       0x38(%rsp),%r8
063bebbc mov       0x2C(%rsp),%edx
063bebc0 lea       0xA0(%rsp),%rcx
063bebc8 call      0x0000`0000`063B`F6D0
063bebcd mov       0x50(%rsp),%rax
063bebd2 movq      $0,0x58(%rsp)
063bebdb mov       %rax,0x60(%rsp)
063bebe0 lea       0x58(%rsp),%rcx
063bebe5 add       $0x10,%rcx
063bebe9 lea       0xA0(%rsp),%rdx
063bebf1 mov       $0x30,%r8d
063bebf7 call      0x0000`0000`063B`BDE0
063bebfc mov       0x40(%rsp),%rcx
063bec01 movb      $1,0x98(%rsp)
063bec09 movb      $0,0x99(%rsp)
063bec11 lea       0x58(%rsp),%rdx
063bec16 mov       $0x48,%r8d
063bec1c call      0x0000`0000`063B`BDE0
063bec21 mov       0x48(%rsp),%rax
063bec26 add       $0xE8,%rsp
063bec2d ret

core::hint::unreachable_unchecked:
063bec30 ud2

ucs2::encode_with<uefi::proto::console::text::output::impl$1::write_str::closure_env$2>:
063bec40 sub       $0x168,%rsp
063bec47 mov       %r8,0xE8(%rsp)
063bec4f mov       %rcx,0x108(%rsp)
063bec57 mov       %rdx,0x110(%rsp)
063bec5f mov       %rcx,0x148(%rsp)
063bec67 mov       %rdx,0x150(%rsp)
063bec6f mov       %rcx,0x158(%rsp)
063bec77 mov       %rdx,0x160(%rsp)
063bec7f mov       0x158(%rsp),%rcx
063bec87 mov       %rcx,0xD8(%rsp)
063bec8f mov       0x160(%rsp),%rax
063bec97 mov       %rax,0xE0(%rsp)
063bec9f mov       %rcx,0x120(%rsp)
063beca7 mov       %rax,0x128(%rsp)
063becaf mov       0xE0(%rsp),%rax
063becb7 mov       %rax,0x130(%rsp)
063becbf movq      $0,0xF8(%rsp)
063beccb mov       0xE0(%rsp),%rax
063becd3 cmp       %rax,0xF8(%rsp)
063becdb jb        0x0000`0000`063B`ECEA
063becdd movb      $2,0xF7(%rsp)
063bece5 jmp       0x0000`0000`063B`F43D
063becea mov       0xE0(%rsp),%rcx
063becf2 mov       0xF8(%rsp),%rax
063becfa mov       %rax,0xD0(%rsp)
063bed02 cmp       %rcx,%rax
063bed05 setb      %al
063bed08 test      $1,%al
063bed0a jne       0x0000`0000`063B`ED0E
063bed0c jmp       0x0000`0000`063B`ED29
063bed0e mov       0xD8(%rsp),%rax
063bed16 mov       0xD0(%rsp),%rcx
063bed1e mov       (%rax,%rcx),%al
063bed21 and       $0x80,%al
063bed23 cmp       $0,%al
063bed25 je        0x0000`0000`063B`ED47
063bed27 jmp       0x0000`0000`063B`ED72
063bed29 mov       0xE0(%rsp),%rdx
063bed31 mov       0xD0(%rsp),%rcx
063bed39 lea       0x63C`F928,%r8
063bed40 call      0x0000`0000`063B`2090
063bed45 ud2
063bed47 mov       0xE0(%rsp),%rcx
063bed4f mov       0xF8(%rsp),%rax
063bed57 mov       %rax,0xC8(%rsp)
063bed5f cmp       %rcx,%rax
063bed62 setb      %al
063bed65 test      $1,%al
063bed67 jne       0x0000`0000`063B`F357
063bed6d jmp       0x0000`0000`063B`F376
063bed72 mov       0xE0(%rsp),%rcx
063bed7a mov       0xF8(%rsp),%rax
063bed82 mov       %rax,0xC0(%rsp)
063bed8a cmp       %rcx,%rax
063bed8d setb      %al
063bed90 test      $1,%al
063bed92 jne       0x0000`0000`063B`ED96
063bed94 jmp       0x0000`0000`063B`EDB1
063bed96 mov       0xD8(%rsp),%rax
063bed9e mov       0xC0(%rsp),%rcx
063beda6 mov       (%rax,%rcx),%al
063beda9 and       $0xE0,%al
063bedab cmp       $0xC0,%al
063bedad je        0x0000`0000`063B`EDCF
063bedaf jmp       0x0000`0000`063B`EDF3
063bedb1 mov       0xE0(%rsp),%rdx
063bedb9 mov       0xC0(%rsp),%rcx
063bedc1 lea       0x63C`F940,%r8
063bedc8 call      0x0000`0000`063B`2090
063bedcd ud2
063bedcf mov       0xF8(%rsp),%rax
063bedd7 add       $1,%rax
063beddb mov       %rax,0xB8(%rsp)
063bede3 setb      %al
063bede6 test      $1,%al
063bede8 jne       0x0000`0000`063B`F1DF
063bedee jmp       0x0000`0000`063B`F1C8
063bedf3 mov       0xE0(%rsp),%rcx
063bedfb mov       0xF8(%rsp),%rax
063bee03 mov       %rax,0xB0(%rsp)
063bee0b cmp       %rcx,%rax
063bee0e setb      %al
063bee11 test      $1,%al
063bee13 jne       0x0000`0000`063B`EE17
063bee15 jmp       0x0000`0000`063B`EE32
063bee17 mov       0xD8(%rsp),%rax
063bee1f mov       0xB0(%rsp),%rcx
063bee27 mov       (%rax,%rcx),%al
063bee2a and       $0xF0,%al
063bee2c cmp       $0xE0,%al
063bee2e je        0x0000`0000`063B`EE50
063bee30 jmp       0x0000`0000`063B`EE71
063bee32 mov       0xE0(%rsp),%rdx
063bee3a mov       0xB0(%rsp),%rcx
063bee42 lea       0x63C`F958,%r8
063bee49 call      0x0000`0000`063B`2090
063bee4e ud2
063bee50 mov       0xF8(%rsp),%rax
063bee58 add       $2,%rax
063bee5c mov       %rax,0xA8(%rsp)
063bee64 setb      %al
063bee67 test      $1,%al
063bee69 jne       0x0000`0000`063B`EEFB
063bee6f jmp       0x0000`0000`063B`EEE4
063bee71 mov       0xE0(%rsp),%rcx
063bee79 mov       0xF8(%rsp),%rax
063bee81 mov       %rax,0xA0(%rsp)
063bee89 cmp       %rcx,%rax
063bee8c setb      %al
063bee8f test      $1,%al
063bee91 jne       0x0000`0000`063B`EE95
063bee93 jmp       0x0000`0000`063B`EEB0
063bee95 mov       0xD8(%rsp),%rax
063bee9d mov       0xA0(%rsp),%rcx
063beea5 mov       (%rax,%rcx),%al
063beea8 and       $0xF0,%al
063beeaa cmp       $0xF0,%al
063beeac je        0x0000`0000`063B`EECE
063beeae jmp       0x0000`0000`063B`EED8
063beeb0 mov       0xE0(%rsp),%rdx
063beeb8 mov       0xA0(%rsp),%rcx
063beec0 lea       0x63C`F970,%r8
063beec7 call      0x0000`0000`063B`2090
063beecc ud2
063beece movb      $1,0xF7(%rsp)
063beed6 jmp       0x0000`0000`063B`EEDF
063beed8 call      0x0000`0000`063B`EC30
063beedd ud2
063beedf jmp       0x0000`0000`063B`F43D
063beee4 mov       0xA8(%rsp),%rax
063beeec mov       0xE0(%rsp),%rcx
063beef4 cmp       %rcx,%rax
063beef7 jae       0x0000`0000`063B`EF32
063beef9 jmp       0x0000`0000`063B`EF15
063beefb lea       0x63C`F8B0,%rcx
063bef02 lea       0x63C`F988,%r8
063bef09 mov       $0x1C,%edx
063bef0e call      0x0000`0000`063B`2030
063bef13 ud2
063bef15 mov       0xF8(%rsp),%rax
063bef1d add       $1,%rax
063bef21 mov       %rax,0x98(%rsp)
063bef29 setb      %al
063bef2c test      $1,%al
063bef2e jne       0x0000`0000`063B`EF67
063bef30 jmp       0x0000`0000`063B`EF46
063bef32 movb      $1,0x104(%rsp)
063bef3a testb     $1,0x104(%rsp)
063bef42 jne       0x0000`0000`063B`EFA5
063bef44 jmp       0x0000`0000`063B`EF81
063bef46 mov       0x98(%rsp),%rax
063bef4e mov       0xE0(%rsp),%rcx
063bef56 cmp       %rcx,%rax
063bef59 setae     %al
063bef5c and       $1,%al
063bef5e mov       %al,0x104(%rsp)
063bef65 jmp       0x0000`0000`063B`EF3A
063bef67 lea       0x63C`F8B0,%rcx
063bef6e lea       0x63C`F9A0,%r8
063bef75 mov       $0x1C,%edx
063bef7a call      0x0000`0000`063B`2030
063bef7f ud2
063bef81 mov       0xE0(%rsp),%rcx
063bef89 mov       0xF8(%rsp),%rax
063bef91 mov       %rax,0x90(%rsp)
063bef99 cmp       %rcx,%rax
063bef9c setb      %al
063bef9f test      $1,%al
063befa1 jne       0x0000`0000`063B`EFAC
063befa3 jmp       0x0000`0000`063B`EFD9
063befa5 call      0x0000`0000`063B`EC30
063befaa ud2
063befac mov       0xD8(%rsp),%rax
063befb4 mov       0x90(%rsp),%rcx
063befbc mov       (%rax,%rcx),%cl
063befbf and       $0xF,%cl
063befc2 call      0x0000`0000`063B`E360
063befc7 mov       %ax,0x8E(%rsp)
063befcf mov       %ax,0x13C(%rsp)
063befd7 jmp       0x0000`0000`063B`EFF7
063befd9 mov       0xE0(%rsp),%rdx
063befe1 mov       0x90(%rsp),%rcx
063befe9 lea       0x63C`F9B8,%r8
063beff0 call      0x0000`0000`063B`2090
063beff5 ud2
063beff7 mov       0xF8(%rsp),%rax
063befff add       $1,%rax
063bf003 mov       %rax,0x80(%rsp)
063bf00b setb      %al
063bf00e test      $1,%al
063bf010 jne       0x0000`0000`063B`F02E
063bf012 mov       0x80(%rsp),%rax
063bf01a mov       0xE0(%rsp),%rcx
063bf022 cmp       %rcx,%rax
063bf025 setb      %al
063bf028 test      $1,%al
063bf02a jne       0x0000`0000`063B`F048
063bf02c jmp       0x0000`0000`063B`F072
063bf02e lea       0x63C`F8B0,%rcx
063bf035 lea       0x63C`F9D0,%r8
063bf03c mov       $0x1C,%edx
063bf041 call      0x0000`0000`063B`2030
063bf046 ud2
063bf048 mov       0xD8(%rsp),%rax
063bf050 mov       0x80(%rsp),%rcx
063bf058 mov       (%rax,%rcx),%cl
063bf05b and       $0x3F,%cl
063bf05e call      0x0000`0000`063B`E360
063bf063 mov       %ax,0x7E(%rsp)
063bf068 mov       %ax,0x13E(%rsp)
063bf070 jmp       0x0000`0000`063B`F090
063bf072 mov       0xE0(%rsp),%rdx
063bf07a mov       0x80(%rsp),%rcx
063bf082 lea       0x63C`F9E8,%r8
063bf089 call      0x0000`0000`063B`2090
063bf08e ud2
063bf090 mov       0xF8(%rsp),%rax
063bf098 add       $2,%rax
063bf09c mov       %rax,0x70(%rsp)
063bf0a1 setb      %al
063bf0a4 test      $1,%al
063bf0a6 jne       0x0000`0000`063B`F0C1
063bf0a8 mov       0x70(%rsp),%rax
063bf0ad mov       0xE0(%rsp),%rcx
063bf0b5 cmp       %rcx,%rax
063bf0b8 setb      %al
063bf0bb test      $1,%al
063bf0bd jne       0x0000`0000`063B`F0DB
063bf0bf jmp       0x0000`0000`063B`F102
063bf0c1 lea       0x63C`F8B0,%rcx
063bf0c8 lea       0x63C`FA00,%r8
063bf0cf mov       $0x1C,%edx
063bf0d4 call      0x0000`0000`063B`2030
063bf0d9 ud2
063bf0db mov       0xD8(%rsp),%rax
063bf0e3 mov       0x70(%rsp),%rcx
063bf0e8 mov       (%rax,%rcx),%cl
063bf0eb and       $0x3F,%cl
063bf0ee call      0x0000`0000`063B`E360
063bf0f3 mov       %ax,0x6E(%rsp)
063bf0f8 mov       %ax,0x140(%rsp)
063bf100 jmp       0x0000`0000`063B`F11D
063bf102 mov       0xE0(%rsp),%rdx
063bf10a mov       0x70(%rsp),%rcx
063bf10f lea       0x63C`FA18,%r8
063bf116 call      0x0000`0000`063B`2090
063bf11b ud2
063bf11d mov       0x8E(%rsp),%ax
063bf125 shl       $0xC,%ax
063bf129 mov       %ax,0x6C(%rsp)
063bf12e mov       0x7E(%rsp),%ax
063bf133 shl       $6,%ax
063bf137 mov       %ax,0x6A(%rsp)
063bf13c mov       0x6E(%rsp),%cx
063bf141 mov       0x6A(%rsp),%dx
063bf146 mov       0x6C(%rsp),%ax
063bf14b or        %dx,%ax
063bf14e or        %cx,%ax
063bf151 mov       %ax,0x102(%rsp)
063bf159 mov       0xF8(%rsp),%rax
063bf161 add       $3,%rax
063bf165 mov       %rax,0x60(%rsp)
063bf16a setb      %al
063bf16d test      $1,%al
063bf16f jne       0x0000`0000`063B`F180
063bf171 mov       0x60(%rsp),%rax
063bf176 mov       %rax,0xF8(%rsp)
063bf17e jmp       0x0000`0000`063B`F19A
063bf180 lea       0x63C`F8B0,%rcx
063bf187 lea       0x63C`FA30,%r8
063bf18e mov       $0x1C,%edx
063bf193 call      0x0000`0000`063B`2030
063bf198 ud2
063bf19a mov       0x102(%rsp),%ax
063bf1a2 mov       %ax,0x106(%rsp)
063bf1aa mov       0x106(%rsp),%dx
063bf1b2 lea       0xE8(%rsp),%rcx
063bf1ba call      0x0000`0000`063B`C7C0
063bf1bf mov       %al,0x5F(%rsp)
063bf1c3 jmp       0x0000`0000`063B`F3E5
063bf1c8 mov       0xB8(%rsp),%rax
063bf1d0 mov       0xE0(%rsp),%rcx
063bf1d8 cmp       %rcx,%rax
063bf1db jae       0x0000`0000`063B`F21A
063bf1dd jmp       0x0000`0000`063B`F1F9
063bf1df lea       0x63C`F8B0,%rcx
063bf1e6 lea       0x63C`FA48,%r8
063bf1ed mov       $0x1C,%edx
063bf1f2 call      0x0000`0000`063B`2030
063bf1f7 ud2
063bf1f9 mov       0xE0(%rsp),%rcx
063bf201 mov       0xF8(%rsp),%rax
063bf209 mov       %rax,0x50(%rsp)
063bf20e cmp       %rcx,%rax
063bf211 setb      %al
063bf214 test      $1,%al
063bf216 jne       0x0000`0000`063B`F221
063bf218 jmp       0x0000`0000`063B`F248
063bf21a call      0x0000`0000`063B`EC30
063bf21f ud2
063bf221 mov       0xD8(%rsp),%rax
063bf229 mov       0x50(%rsp),%rcx
063bf22e mov       (%rax,%rcx),%cl
063bf231 and       $0x1F,%cl
063bf234 call      0x0000`0000`063B`E360
063bf239 mov       %ax,0x4E(%rsp)
063bf23e mov       %ax,0x142(%rsp)
063bf246 jmp       0x0000`0000`063B`F263
063bf248 mov       0xE0(%rsp),%rdx
063bf250 mov       0x50(%rsp),%rcx
063bf255 lea       0x63C`FA60,%r8
063bf25c call      0x0000`0000`063B`2090
063bf261 ud2
063bf263 mov       0xF8(%rsp),%rax
063bf26b add       $1,%rax
063bf26f mov       %rax,0x40(%rsp)
063bf274 setb      %al
063bf277 test      $1,%al
063bf279 jne       0x0000`0000`063B`F294
063bf27b mov       0x40(%rsp),%rax
063bf280 mov       0xE0(%rsp),%rcx
063bf288 cmp       %rcx,%rax
063bf28b setb      %al
063bf28e test      $1,%al
063bf290 jne       0x0000`0000`063B`F2AE
063bf292 jmp       0x0000`0000`063B`F2D5
063bf294 lea       0x63C`F8B0,%rcx
063bf29b lea       0x63C`FA78,%r8
063bf2a2 mov       $0x1C,%edx
063bf2a7 call      0x0000`0000`063B`2030
063bf2ac ud2
063bf2ae mov       0xD8(%rsp),%rax
063bf2b6 mov       0x40(%rsp),%rcx
063bf2bb mov       (%rax,%rcx),%cl
063bf2be and       $0x3F,%cl
063bf2c1 call      0x0000`0000`063B`E360
063bf2c6 mov       %ax,0x3E(%rsp)
063bf2cb mov       %ax,0x144(%rsp)
063bf2d3 jmp       0x0000`0000`063B`F2F0
063bf2d5 mov       0xE0(%rsp),%rdx
063bf2dd mov       0x40(%rsp),%rcx
063bf2e2 lea       0x63C`FA90,%r8
063bf2e9 call      0x0000`0000`063B`2090
063bf2ee ud2
063bf2f0 mov       0x4E(%rsp),%ax
063bf2f5 shl       $6,%ax
063bf2f9 mov       %ax,0x3C(%rsp)
063bf2fe mov       0x3E(%rsp),%cx
063bf303 mov       0x3C(%rsp),%ax
063bf308 or        %cx,%ax
063bf30b mov       %ax,0x102(%rsp)
063bf313 mov       0xF8(%rsp),%rax
063bf31b add       $2,%rax
063bf31f mov       %rax,0x30(%rsp)
063bf324 setb      %al
063bf327 test      $1,%al
063bf329 jne       0x0000`0000`063B`F33D
063bf32b mov       0x30(%rsp),%rax
063bf330 mov       %rax,0xF8(%rsp)
063bf338 jmp       0x0000`0000`063B`F19A
063bf33d lea       0x63C`F8B0,%rcx
063bf344 lea       0x63C`FAA8,%r8
063bf34b mov       $0x1C,%edx
063bf350 call      0x0000`0000`063B`2030
063bf355 ud2
063bf357 mov       0xD8(%rsp),%rax
063bf35f mov       0xC8(%rsp),%rcx
063bf367 mov       (%rax,%rcx),%cl
063bf36a call      0x0000`0000`063B`E360
063bf36f mov       %ax,0x2E(%rsp)
063bf374 jmp       0x0000`0000`063B`F394
063bf376 mov       0xE0(%rsp),%rdx
063bf37e mov       0xC8(%rsp),%rcx
063bf386 lea       0x63C`FAC0,%r8
063bf38d call      0x0000`0000`063B`2090
063bf392 ud2
063bf394 mov       0x2E(%rsp),%ax
063bf399 mov       %ax,0x102(%rsp)
063bf3a1 mov       0xF8(%rsp),%rax
063bf3a9 add       $1,%rax
063bf3ad mov       %rax,0x20(%rsp)
063bf3b2 setb      %al
063bf3b5 test      $1,%al
063bf3b7 jne       0x0000`0000`063B`F3CB
063bf3b9 mov       0x20(%rsp),%rax
063bf3be mov       %rax,0xF8(%rsp)
063bf3c6 jmp       0x0000`0000`063B`F19A
063bf3cb lea       0x63C`F8B0,%rcx
063bf3d2 lea       0x63C`FAD8,%r8
063bf3d9 mov       $0x1C,%edx
063bf3de call      0x0000`0000`063B`2030
063bf3e3 ud2
063bf3e5 mov       0x5F(%rsp),%cl
063bf3e9 call      0x0000`0000`063C`B2B0
063bf3ee mov       %al,0x105(%rsp)
063bf3f5 mov       0x105(%rsp),%al
063bf3fc add       $0xFE,%al
063bf3fe setne     %al
063bf401 movzbl    %al,%eax
063bf404 je        0x0000`0000`063B`ECCB
063bf40a jmp       0x0000`0000`063B`F40C
063bf40c jmp       0x0000`0000`063B`F410
063bf40e ud2
063bf410 mov       0x105(%rsp),%cl
063bf417 mov       %cl,%al
063bf419 and       $1,%al
063bf41b mov       %al,0x147(%rsp)
063bf422 and       $1,%cl
063bf425 lea       0x63C`FAF0,%rdx
063bf42c call      0x0000`0000`063C`B270
063bf431 mov       %al,0xF7(%rsp)
063bf438 jmp       0x0000`0000`063B`EEDF
063bf43d mov       0xF7(%rsp),%al
063bf444 add       $0x168,%rsp
063bf44b ret

core::str::impl$4::call:
063bf450 sub       $0xE8,%rsp
063bf457 mov       %rdx,0x70(%rsp)
063bf45c mov       %r8,0x78(%rsp)
063bf461 mov       %rcx,0xA8(%rsp)
063bf469 mov       0x70(%rsp),%rcx
063bf46e mov       %rcx,0x58(%rsp)
063bf473 mov       0x78(%rsp),%rdx
063bf478 mov       %rdx,0x60(%rsp)
063bf47d mov       %rcx,0xB0(%rsp)
063bf485 mov       %rdx,0xB8(%rsp)
063bf48d call      0x0000`0000`063B`EA30
063bf492 mov       %rax,0x68(%rsp)
063bf497 mov       %rax,0xC0(%rsp)
063bf49f mov       0x68(%rsp),%rax
063bf4a4 cmp       $0,%rax
063bf4a8 ja        0x0000`0000`063B`F4B7
063bf4aa movb      $0,0x97(%rsp)
063bf4b2 jmp       0x0000`0000`063B`F574
063bf4b7 mov       0x60(%rsp),%rax
063bf4bc mov       0x58(%rsp),%rcx
063bf4c1 mov       %rcx,0xC8(%rsp)
063bf4c9 mov       %rax,0xD0(%rsp)
063bf4d1 mov       %rcx,0xD8(%rsp)
063bf4d9 mov       %rax,0xE0(%rsp)
063bf4e1 mov       0xD8(%rsp),%rax
063bf4e9 mov       %rax,0x48(%rsp)
063bf4ee mov       0xE0(%rsp),%rax
063bf4f6 mov       %rax,0x50(%rsp)
063bf4fb mov       0x68(%rsp),%rax
063bf500 sub       $1,%rax
063bf504 mov       %rax,0x40(%rsp)
063bf509 setb      %al
063bf50c test      $1,%al
063bf50e jne       0x0000`0000`063B`F526
063bf510 mov       0x40(%rsp),%rax
063bf515 mov       0x50(%rsp),%rcx
063bf51a cmp       %rcx,%rax
063bf51d setb      %al
063bf520 test      $1,%al
063bf522 jne       0x0000`0000`063B`F540
063bf524 jmp       0x0000`0000`063B`F55C
063bf526 lea       0x63C`FBA0,%rcx
063bf52d lea       0x63C`FB80,%r8
063bf534 mov       $0x21,%edx
063bf539 call      0x0000`0000`063B`2030
063bf53e ud2
063bf540 mov       0x48(%rsp),%rax
063bf545 mov       0x40(%rsp),%rcx
063bf54a cmpb      $0xD,(%rax,%rcx)
063bf54e sete      %al
063bf551 and       $1,%al
063bf553 mov       %al,0x97(%rsp)
063bf55a jmp       0x0000`0000`063B`F574
063bf55c mov       0x50(%rsp),%rdx
063bf561 mov       0x40(%rsp),%rcx
063bf566 lea       0x63C`FBC8,%r8
063bf56d call      0x0000`0000`063B`2090
063bf572 ud2
063bf574 testb     $1,0x97(%rsp)
063bf57c jne       0x0000`0000`063B`F59D
063bf57e mov       0x60(%rsp),%rax
063bf583 mov       0x58(%rsp),%rcx
063bf588 mov       %rcx,0x80(%rsp)
063bf590 mov       %rax,0x88(%rsp)
063bf598 jmp       0x0000`0000`063B`F636
063bf59d mov       0x68(%rsp),%rax
063bf5a2 sub       $1,%rax
063bf5a6 mov       %rax,0x38(%rsp)
063bf5ab setb      %al
063bf5ae test      $1,%al
063bf5b0 jne       0x0000`0000`063B`F602
063bf5b2 mov       0x60(%rsp),%rdx
063bf5b7 mov       0x58(%rsp),%rcx
063bf5bc mov       0x38(%rsp),%rax
063bf5c1 movq      $0,0x98(%rsp)
063bf5cd mov       %rax,0xA0(%rsp)
063bf5d5 mov       0x98(%rsp),%r8
063bf5dd mov       0xA0(%rsp),%r9
063bf5e5 lea       0x63C`FBF8,%rax
063bf5ec mov       %rax,0x20(%rsp)
063bf5f1 call      0x0000`0000`063B`6420
063bf5f6 mov       %rax,0x28(%rsp)
063bf5fb mov       %rdx,0x30(%rsp)
063bf600 jmp       0x0000`0000`063B`F61C
063bf602 lea       0x63C`FBA0,%rcx
063bf609 lea       0x63C`FBE0,%r8
063bf610 mov       $0x21,%edx
063bf615 call      0x0000`0000`063B`2030
063bf61a ud2
063bf61c mov       0x30(%rsp),%rax
063bf621 mov       0x28(%rsp),%rcx
063bf626 mov       %rcx,0x80(%rsp)
063bf62e mov       %rax,0x88(%rsp)
063bf636 mov       0x80(%rsp),%rax
063bf63e mov       0x88(%rsp),%rdx
063bf646 add       $0xE8,%rsp
063bf64d ret

core::str::impl$5::call_mut:
063bf650 sub       $0x68,%rsp
063bf654 mov       %rdx,0x30(%rsp)
063bf659 mov       %r8,0x38(%rsp)
063bf65e mov       %rcx,0x50(%rsp)
063bf663 mov       0x30(%rsp),%rdx
063bf668 mov       0x38(%rsp),%rax
063bf66d mov       %rdx,0x58(%rsp)
063bf672 mov       %rax,0x60(%rsp)
063bf677 mov       %rdx,0x40(%rsp)
063bf67c mov       %rax,0x48(%rsp)
063bf681 mov       0x40(%rsp),%rdx
063bf686 mov       0x48(%rsp),%r8
063bf68b call      0x0000`0000`063B`F450
063bf690 mov       %rax,0x20(%rsp)
063bf695 mov       %rdx,0x28(%rsp)
063bf69a mov       0x28(%rsp),%rdx
063bf69f mov       0x20(%rsp),%rax
063bf6a4 add       $0x68,%rsp
063bf6a8 ret

core::slice::impl$0::as_ptr<uefi::data_types::chars::Char16>:
063bf6b0 sub       $0x10,%rsp
063bf6b4 mov       %rcx,%rax
063bf6b7 mov       %rax,(%rsp)
063bf6bb mov       %rdx,8(%rsp)
063bf6c0 add       $0x10,%rsp
063bf6c4 ret

core::str::pattern::impl$3::into_searcher:
063bf6d0 push      %rsi
063bf6d1 sub       $0x90,%rsp
063bf6d8 mov       %r9,0x30(%rsp)
063bf6dd mov       %r8,0x38(%rsp)
063bf6e2 mov       %edx,0x54(%rsp)
063bf6e6 mov       %rcx,0x40(%rsp)
063bf6eb mov       %rcx,0x48(%rsp)
063bf6f0 mov       %edx,0x74(%rsp)
063bf6f4 mov       %r8,0x78(%rsp)
063bf6f9 mov       %r9,0x80(%rsp)
063bf701 lea       0x6C(%rsp),%rcx
063bf706 xor       %edx,%edx
063bf708 mov       $4,%r8d
063bf70e call      0x0000`0000`063B`BE10
063bf713 mov       0x54(%rsp),%ecx
063bf717 lea       0x6C(%rsp),%rdx
063bf71c mov       $4,%r8d
063bf722 call      0x0000`0000`063C`1CC0
063bf727 mov       %rax,0x58(%rsp)
063bf72c mov       %rdx,0x60(%rsp)
063bf731 mov       0x60(%rsp),%rdx
063bf736 mov       0x58(%rsp),%rcx
063bf73b call      0x0000`0000`063B`EA30
063bf740 mov       %rax,0x28(%rsp)
063bf745 mov       %rax,0x88(%rsp)
063bf74d mov       0x30(%rsp),%rdx
063bf752 mov       0x38(%rsp),%rcx
063bf757 call      0x0000`0000`063B`EA30
063bf75c mov       %rax,0x20(%rsp)
063bf761 mov       0x48(%rsp),%rax
063bf766 mov       0x40(%rsp),%rcx
063bf76b mov       0x28(%rsp),%rdx
063bf770 mov       0x54(%rsp),%r8d
063bf775 mov       0x20(%rsp),%r9
063bf77a mov       0x30(%rsp),%r10
063bf77f mov       0x38(%rsp),%r11
063bf784 mov       0x6C(%rsp),%esi
063bf788 mov       %esi,0x70(%rsp)
063bf78c mov       %r11,(%rcx)
063bf78f mov       %r10,8(%rcx)
063bf793 movq      $0,0x10(%rcx)
063bf79b mov       %r9,0x18(%rcx)
063bf79f mov       %r8d,0x28(%rcx)
063bf7a3 mov       %rdx,0x20(%rcx)
063bf7a7 mov       0x70(%rsp),%edx
063bf7ab mov       %edx,0x2C(%rcx)
063bf7ae add       $0x90,%rsp
063bf7b5 pop       %rsi
063bf7b6 ret

core::str::pattern::impl$0::next_match:
063bf7c0 sub       $0x1D8,%rsp
063bf7c7 mov       %rdx,0xA8(%rsp)
063bf7cf mov       %rcx,0xB0(%rsp)
063bf7d7 mov       %rcx,0xB8(%rsp)
063bf7df mov       %rdx,0x150(%rsp)
063bf7e7 mov       0xA8(%rsp),%rax
063bf7ef mov       (%rax),%rcx
063bf7f2 mov       8(%rax),%rax
063bf7f6 mov       %rcx,0x1B8(%rsp)
063bf7fe mov       %rax,0x1C0(%rsp)
063bf806 mov       %rcx,0x1C8(%rsp)
063bf80e mov       %rax,0x1D0(%rsp)
063bf816 mov       0x1C8(%rsp),%rax
063bf81e mov       %rax,0x98(%rsp)
063bf826 mov       0x1D0(%rsp),%rax
063bf82e mov       %rax,0xA0(%rsp)
063bf836 mov       0xA0(%rsp),%rdx
063bf83e mov       0x98(%rsp),%rcx
063bf846 mov       0xA8(%rsp),%rax
063bf84e mov       0x10(%rax),%r8
063bf852 mov       0x18(%rax),%rax
063bf856 mov       %r8,0xD0(%rsp)
063bf85e mov       %rax,0xD8(%rsp)
063bf866 mov       0xD0(%rsp),%r8
063bf86e mov       0xD8(%rsp),%r9
063bf876 call      0x0000`0000`063B`FF10
063bf87b mov       %rax,0x88(%rsp)
063bf883 mov       %rdx,0x90(%rsp)
063bf88b mov       0x90(%rsp),%rdx
063bf893 mov       0x88(%rsp),%rcx
063bf89b call      0x0000`0000`063B`1EC0
063bf8a0 mov       %rdx,0xC8(%rsp)
063bf8a8 mov       %rax,0xC0(%rsp)
063bf8b0 mov       0xC0(%rsp),%rax
063bf8b8 test      %rax,%rax
063bf8bb sete      %al
063bf8be movzbl    %al,%eax
063bf8c1 jne       0x0000`0000`063B`F8C9
063bf8c3 jmp       0x0000`0000`063B`F8C5
063bf8c5 jmp       0x0000`0000`063B`F930
063bf8c7 ud2
063bf8c9 mov       0xA8(%rsp),%rax
063bf8d1 mov       0xC0(%rsp),%rdx
063bf8d9 mov       %rdx,0x68(%rsp)
063bf8de mov       0xC8(%rsp),%rcx
063bf8e6 mov       %rcx,0x70(%rsp)
063bf8eb mov       %rdx,0x160(%rsp)
063bf8f3 mov       %rcx,0x168(%rsp)
063bf8fb mov       %rdx,0x170(%rsp)
063bf903 mov       %rcx,0x178(%rsp)
063bf90b mov       %rax,%rcx
063bf90e add       $0x2C,%rcx
063bf912 mov       %rcx,0x78(%rsp)
063bf917 mov       0x20(%rax),%rax
063bf91b sub       $1,%rax
063bf91f mov       %rax,0x80(%rsp)
063bf927 setb      %al
063bf92a test      $1,%al
063bf92c jne       0x0000`0000`063B`F96B
063bf92e jmp       0x0000`0000`063B`F94D
063bf930 mov       0xB0(%rsp),%rcx
063bf938 call      0x0000`0000`063B`1FA0
063bf93d mov       0xB8(%rsp),%rax
063bf945 add       $0x1D8,%rsp
063bf94c ret
063bf94d mov       0x80(%rsp),%r8
063bf955 mov       0x78(%rsp),%rcx
063bf95a mov       $4,%edx
063bf95f call      0x0000`0000`063C`0080
063bf964 mov       %rax,0x60(%rsp)
063bf969 jmp       0x0000`0000`063B`F985
063bf96b lea       0x63C`FCB0,%rcx
063bf972 lea       0x63C`FC90,%r8
063bf979 mov       $0x21,%edx
063bf97e call      0x0000`0000`063B`2030
063bf983 ud2
063bf985 mov       0x70(%rsp),%r8
063bf98a mov       0x68(%rsp),%rdx
063bf98f mov       0x60(%rsp),%rax
063bf994 mov       (%rax),%cl
063bf996 mov       %cl,0x187(%rsp)
063bf99d call      0x0000`0000`063C`1DE0
063bf9a2 mov       %rdx,0xE8(%rsp)
063bf9aa mov       %rax,0xE0(%rsp)
063bf9b2 cmpq      $1,0xE0(%rsp)
063bf9bb jne       0x0000`0000`063B`F9DF
063bf9bd mov       0xE8(%rsp),%rax
063bf9c5 mov       %rax,0x188(%rsp)
063bf9cd add       $1,%rax
063bf9d1 mov       %rax,0x58(%rsp)
063bf9d6 setb      %al
063bf9d9 test      $1,%al
063bf9db jne       0x0000`0000`063B`FA22
063bf9dd jmp       0x0000`0000`063B`FA03
063bf9df mov       0xB0(%rsp),%rax
063bf9e7 mov       0xA8(%rsp),%rcx
063bf9ef mov       0x18(%rcx),%rdx
063bf9f3 mov       %rdx,0x10(%rcx)
063bf9f7 movq      $0,(%rax)
063bf9fe jmp       0x0000`0000`063B`F93D
063bfa03 mov       0xA8(%rsp),%rcx
063bfa0b mov       0x58(%rsp),%rax
063bfa10 add       0x10(%rcx),%rax
063bfa14 mov       %rax,0x50(%rsp)
063bfa19 setb      %al
063bfa1c test      $1,%al
063bfa1e jne       0x0000`0000`063B`FA5C
063bfa20 jmp       0x0000`0000`063B`FA3C
063bfa22 lea       0x63C`FCF0,%rcx
063bfa29 lea       0x63C`FCD8,%r8
063bfa30 mov       $0x1C,%edx
063bfa35 call      0x0000`0000`063B`2030
063bfa3a ud2
063bfa3c mov       0xA8(%rsp),%rcx
063bfa44 mov       0x50(%rsp),%rax
063bfa49 mov       %rax,0x10(%rcx)
063bfa4d mov       0x10(%rcx),%rax
063bfa51 cmp       0x20(%rcx),%rax
063bfa55 jae       0x0000`0000`063B`FA76
063bfa57 jmp       0x0000`0000`063B`F7E7
063bfa5c lea       0x63C`FCF0,%rcx
063bfa63 lea       0x63C`FD10,%r8
063bfa6a mov       $0x1C,%edx
063bfa6f call      0x0000`0000`063B`2030
063bfa74 ud2
063bfa76 mov       0xA8(%rsp),%rcx
063bfa7e mov       0x10(%rcx),%rax
063bfa82 sub       0x20(%rcx),%rax
063bfa86 mov       %rax,0x48(%rsp)
063bfa8b setb      %al
063bfa8e test      $1,%al
063bfa90 jne       0x0000`0000`063B`FAEA
063bfa92 mov       0xA8(%rsp),%rax
063bfa9a mov       0x48(%rsp),%rcx
063bfa9f mov       %rcx,0x190(%rsp)
063bfaa7 mov       (%rax),%rcx
063bfaaa mov       8(%rax),%rax
063bfaae mov       %rcx,0x198(%rsp)
063bfab6 mov       %rax,0x1A0(%rsp)
063bfabe mov       %rcx,0x1A8(%rsp)
063bfac6 mov       %rax,0x1B0(%rsp)
063bface mov       0x1A8(%rsp),%rax
063bfad6 mov       %rax,0x38(%rsp)
063bfadb mov       0x1B0(%rsp),%rax
063bfae3 mov       %rax,0x40(%rsp)
063bfae8 jmp       0x0000`0000`063B`FB04
063bfaea lea       0x63C`FCB0,%rcx
063bfaf1 lea       0x63C`FD28,%r8
063bfaf8 mov       $0x21,%edx
063bfafd call      0x0000`0000`063B`2030
063bfb02 ud2
063bfb04 mov       0x40(%rsp),%rdx
063bfb09 mov       0x38(%rsp),%rcx
063bfb0e mov       0x48(%rsp),%r8
063bfb13 mov       0xA8(%rsp),%rax
063bfb1b mov       0x10(%rax),%rax
063bfb1f mov       %r8,0x100(%rsp)
063bfb27 mov       %rax,0x108(%rsp)
063bfb2f mov       0x100(%rsp),%r8
063bfb37 mov       0x108(%rsp),%r9
063bfb3f call      0x0000`0000`063B`FF10
063bfb44 mov       %rdx,0xF8(%rsp)
063bfb4c mov       %rax,0xF0(%rsp)
063bfb54 mov       $1,%eax
063bfb59 xor       %ecx,%ecx
063bfb5b cmpq      $0,0xF0(%rsp)
063bfb64 cmove     %rcx,%rax
063bfb68 cmp       $1,%rax
063bfb6c jne       0x0000`0000`063B`F7E7
063bfb72 mov       0xA8(%rsp),%rax
063bfb7a mov       0xF0(%rsp),%rdx
063bfb82 mov       0xF8(%rsp),%rcx
063bfb8a mov       %rdx,0x110(%rsp)
063bfb92 mov       %rcx,0x118(%rsp)
063bfb9a mov       %rax,%rcx
063bfb9d add       $0x2C,%rcx
063bfba1 mov       0x20(%rax),%rax
063bfba5 movq      $0,0x130(%rsp)
063bfbb1 mov       %rax,0x138(%rsp)
063bfbb9 mov       0x130(%rsp),%rdx
063bfbc1 mov       0x138(%rsp),%r8
063bfbc9 lea       0x63C`FD40,%r9
063bfbd0 call      0x0000`0000`063B`C8C0
063bfbd5 mov       %rax,0x28(%rsp)
063bfbda mov       %rdx,0x30(%rsp)
063bfbdf mov       0x30(%rsp),%rax
063bfbe4 mov       0x28(%rsp),%rcx
063bfbe9 mov       %rcx,0x120(%rsp)
063bfbf1 mov       %rax,0x128(%rsp)
063bfbf9 lea       0x110(%rsp),%rcx
063bfc01 lea       0x120(%rsp),%rdx
063bfc09 call      0x0000`0000`063C`4B80
063bfc0e mov       %al,0x27(%rsp)
063bfc12 mov       0x27(%rsp),%al
063bfc16 test      $1,%al
063bfc18 jne       0x0000`0000`063B`FC1F
063bfc1a jmp       0x0000`0000`063B`F7E7
063bfc1f mov       0xB0(%rsp),%rax
063bfc27 mov       0x48(%rsp),%rdx
063bfc2c mov       0xA8(%rsp),%rcx
063bfc34 mov       0x10(%rcx),%rcx
063bfc38 mov       %rdx,0x140(%rsp)
063bfc40 mov       %rcx,0x148(%rsp)
063bfc48 mov       0x140(%rsp),%rdx
063bfc50 mov       0x148(%rsp),%rcx
063bfc58 mov       %rdx,8(%rax)
063bfc5c mov       %rcx,0x10(%rax)
063bfc60 movq      $1,(%rax)
063bfc67 jmp       0x0000`0000`063B`F93D

core::str::pattern::impl$0::haystack:
063bfc70 push      %rax
063bfc71 mov       %rcx,(%rsp)
063bfc75 mov       (%rcx),%rax
063bfc78 mov       8(%rcx),%rdx
063bfc7c pop       %rcx
063bfc7d ret

uefi::data_types::chars::impl$6::try_from:
063bfc80 sub       $0x18,%rsp
063bfc84 mov       %ecx,4(%rsp)
063bfc88 mov       %ecx,0x10(%rsp)
063bfc8c mov       %ecx,0x14(%rsp)
063bfc90 cmp       $0xFFFF,%ecx
063bfc96 jbe       0x0000`0000`063B`FCA1
063bfc98 movw      $1,8(%rsp)
063bfc9f jmp       0x0000`0000`063B`FCBB
063bfca1 mov       4(%rsp),%eax
063bfca5 mov       %ax,0xE(%rsp)
063bfcaa mov       0xE(%rsp),%ax
063bfcaf mov       %ax,0xA(%rsp)
063bfcb4 movw      $0,8(%rsp)
063bfcbb mov       8(%rsp),%ax
063bfcc0 mov       0xA(%rsp),%dx
063bfcc5 add       $0x18,%rsp
063bfcc9 ret

uefi::data_types::chars::impl$8::try_from:
063bfcd0 sub       $0x38,%rsp
063bfcd4 mov       %cx,0x32(%rsp)
063bfcd9 call      0x0000`0000`063B`E370
063bfcde mov       %eax,0x24(%rsp)
063bfce2 mov       0x24(%rsp),%ecx
063bfce6 call      0x0000`0000`063C`20E0
063bfceb mov       %eax,0x2C(%rsp)
063bfcef mov       0x2C(%rsp),%edx
063bfcf3 sub       $0x11`0000,%edx
063bfcf9 xor       %eax,%eax
063bfcfb mov       $1,%ecx
063bfd00 cmp       $0,%edx
063bfd03 cmove     %rcx,%rax
063bfd07 cmp       $0,%rax
063bfd0b jne       0x0000`0000`063B`FD26
063bfd0d mov       0x2C(%rsp),%ecx
063bfd11 mov       %ecx,0x34(%rsp)
063bfd15 call      0x0000`0000`063C`2100
063bfd1a mov       %dx,0x2A(%rsp)
063bfd1f mov       %ax,0x28(%rsp)
063bfd24 jmp       0x0000`0000`063B`FD2D
063bfd26 movw      $1,0x28(%rsp)
063bfd2d mov       0x28(%rsp),%ax
063bfd32 mov       0x2A(%rsp),%dx
063bfd37 add       $0x38,%rsp
063bfd3b ret

core::ptr::mut_ptr::impl$0::is_null<usize>:
063bfd40 sub       $0x38,%rsp
063bfd44 mov       %rcx,0x30(%rsp)
063bfd49 mov       %rcx,0x28(%rsp)
063bfd4e mov       0x28(%rsp),%rcx
063bfd53 xor       %eax,%eax
063bfd55 mov       %eax,%edx
063bfd57 call      0x0000`0000`063B`FE00
063bfd5c mov       %al,0x27(%rsp)
063bfd60 mov       0x27(%rsp),%al
063bfd64 and       $1,%al
063bfd66 movzbl    %al,%eax
063bfd69 add       $0x38,%rsp
063bfd6d ret

core::ptr::mut_ptr::impl$0::is_null<u8>:
063bfd70 sub       $0x38,%rsp
063bfd74 mov       %rcx,0x28(%rsp)
063bfd79 mov       %rcx,0x30(%rsp)
063bfd7e mov       0x28(%rsp),%rcx
063bfd83 xor       %eax,%eax
063bfd85 mov       %eax,%edx
063bfd87 call      0x0000`0000`063B`FE00
063bfd8c mov       %al,0x27(%rsp)
063bfd90 mov       0x27(%rsp),%al
063bfd94 and       $1,%al
063bfd96 movzbl    %al,%eax
063bfd99 add       $0x38,%rsp
063bfd9d ret

core::ptr::mut_ptr::impl$0::is_null<array$<usize,4> >:
063bfda0 sub       $0x38,%rsp
063bfda4 mov       %rcx,0x30(%rsp)
063bfda9 mov       %rcx,0x28(%rsp)
063bfdae mov       0x28(%rsp),%rcx
063bfdb3 xor       %eax,%eax
063bfdb5 mov       %eax,%edx
063bfdb7 call      0x0000`0000`063B`FE00
063bfdbc mov       %al,0x27(%rsp)
063bfdc0 mov       0x27(%rsp),%al
063bfdc4 and       $1,%al
063bfdc6 movzbl    %al,%eax
063bfdc9 add       $0x38,%rsp
063bfdcd ret

core::ptr::mut_ptr::impl$0::is_null<tuple$<u8,u8> >:
063bfdd0 sub       $0x38,%rsp
063bfdd4 mov       %rcx,0x30(%rsp)
063bfdd9 mov       %rcx,0x28(%rsp)
063bfdde mov       0x28(%rsp),%rcx
063bfde3 xor       %eax,%eax
063bfde5 mov       %eax,%edx
063bfde7 call      0x0000`0000`063B`FE00
063bfdec mov       %al,0x27(%rsp)
063bfdf0 mov       0x27(%rsp),%al
063bfdf4 and       $1,%al
063bfdf6 movzbl    %al,%eax
063bfdf9 add       $0x38,%rsp
063bfdfd ret

core::ptr::mut_ptr::impl$0::guaranteed_eq<u8>:
063bfe00 sub       $0x20,%rsp
063bfe04 mov       %rcx,8(%rsp)
063bfe09 mov       %rdx,0x10(%rsp)
063bfe0e cmp       %rdx,%rcx
063bfe11 sete      %al
063bfe14 and       $1,%al
063bfe16 mov       %al,0x1F(%rsp)
063bfe1a mov       0x1F(%rsp),%al
063bfe1e mov       %al,7(%rsp)
063bfe22 mov       7(%rsp),%al
063bfe26 and       $1,%al
063bfe28 movzbl    %al,%eax
063bfe2b add       $0x20,%rsp
063bfe2f ret

core::slice::impl$0::is_empty<usize>:
063bfe30 sub       $0x10,%rsp
063bfe34 mov       %rcx,(%rsp)
063bfe38 mov       %rdx,8(%rsp)
063bfe3d cmp       $0,%rdx
063bfe41 sete      %al
063bfe44 and       $1,%al
063bfe46 movzbl    %al,%eax
063bfe49 add       $0x10,%rsp
063bfe4d ret

core::slice::impl$0::get<u32,usize>:
063bfe50 sub       $0x48,%rsp
063bfe54 mov       %r8,0x20(%rsp)
063bfe59 mov       %rdx,%r8
063bfe5c mov       %rcx,%rdx
063bfe5f mov       0x20(%rsp),%rcx
063bfe64 mov       %rdx,0x30(%rsp)
063bfe69 mov       %r8,0x38(%rsp)
063bfe6e mov       %rcx,0x40(%rsp)
063bfe73 call      0x0000`0000`063B`A600
063bfe78 mov       %rax,0x28(%rsp)
063bfe7d mov       0x28(%rsp),%rax
063bfe82 add       $0x48,%rsp
063bfe86 ret

core::slice::impl$0::get<u8,usize>:
063bfe90 sub       $0x48,%rsp
063bfe94 mov       %r8,0x20(%rsp)
063bfe99 mov       %rdx,%r8
063bfe9c mov       %rcx,%rdx
063bfe9f mov       0x20(%rsp),%rcx
063bfea4 mov       %rdx,0x30(%rsp)
063bfea9 mov       %r8,0x38(%rsp)
063bfeae mov       %rcx,0x40(%rsp)
063bfeb3 call      0x0000`0000`063B`A5A0
063bfeb8 mov       %rax,0x28(%rsp)
063bfebd mov       0x28(%rsp),%rax
063bfec2 add       $0x48,%rsp
063bfec6 ret

core::slice::impl$0::get<str,usize>:
063bfed0 sub       $0x48,%rsp
063bfed4 mov       %r8,0x20(%rsp)
063bfed9 mov       %rdx,%r8
063bfedc mov       %rcx,%rdx
063bfedf mov       0x20(%rsp),%rcx
063bfee4 mov       %rdx,0x30(%rsp)
063bfee9 mov       %r8,0x38(%rsp)
063bfeee mov       %rcx,0x40(%rsp)
063bfef3 call      0x0000`0000`063B`A540
063bfef8 mov       %rax,0x28(%rsp)
063bfefd mov       0x28(%rsp),%rax
063bff02 add       $0x48,%rsp
063bff06 ret

core::slice::impl$0::get<u8,core::ops::range::Range<usize> >:
063bff10 sub       $0x68,%rsp
063bff14 mov       %r9,0x28(%rsp)
063bff19 mov       %r8,0x30(%rsp)
063bff1e mov       %rdx,%r9
063bff21 mov       0x28(%rsp),%rdx
063bff26 mov       %rcx,%r8
063bff29 mov       0x30(%rsp),%rcx
063bff2e mov       %r8,0x48(%rsp)
063bff33 mov       %r9,0x50(%rsp)
063bff38 mov       %rcx,0x58(%rsp)
063bff3d mov       %rdx,0x60(%rsp)
063bff42 call      0x0000`0000`063B`2530
063bff47 mov       %rax,0x38(%rsp)
063bff4c mov       %rdx,0x40(%rsp)
063bff51 mov       0x40(%rsp),%rdx
063bff56 mov       0x38(%rsp),%rax
063bff5b add       $0x68,%rsp
063bff5f ret

core::slice::impl$0::get_unchecked<u8,core::ops::range::RangeTo<usize> >:
063bff60 sub       $0x58,%rsp
063bff64 mov       %r8,0x28(%rsp)
063bff69 mov       %rdx,%r8
063bff6c mov       %rcx,%rdx
063bff6f mov       0x28(%rsp),%rcx
063bff74 mov       %rdx,0x40(%rsp)
063bff79 mov       %r8,0x48(%rsp)
063bff7e mov       %rcx,0x50(%rsp)
063bff83 call      0x0000`0000`063B`2B80
063bff88 mov       %rax,0x30(%rsp)
063bff8d mov       %rdx,0x38(%rsp)
063bff92 mov       0x38(%rsp),%rdx
063bff97 mov       0x30(%rsp),%rax
063bff9c add       $0x58,%rsp
063bffa0 ret

core::slice::impl$0::get_unchecked<str,usize>:
063bffb0 sub       $0x48,%rsp
063bffb4 mov       %r8,0x20(%rsp)
063bffb9 mov       %rdx,%r8
063bffbc mov       %rcx,%rdx
063bffbf mov       0x20(%rsp),%rcx
063bffc4 mov       %rdx,0x30(%rsp)
063bffc9 mov       %r8,0x38(%rsp)
063bffce mov       %rcx,0x40(%rsp)
063bffd3 call      0x0000`0000`063B`A6F0
063bffd8 mov       %rax,0x28(%rsp)
063bffdd mov       0x28(%rsp),%rax
063bffe2 add       $0x48,%rsp
063bffe6 ret

core::slice::impl$0::get_unchecked<u32,usize>:
063bfff0 sub       $0x48,%rsp
063bfff4 mov       %r8,0x20(%rsp)
063bfff9 mov       %rdx,%r8
063bfffc mov       %rcx,%rdx
063bffff mov       0x20(%rsp),%rcx
063c0004 mov       %rdx,0x30(%rsp)
063c0009 mov       %r8,0x38(%rsp)
063c000e mov       %rcx,0x40(%rsp)
063c0013 call      0x0000`0000`063B`A780
063c0018 mov       %rax,0x28(%rsp)
063c001d mov       0x28(%rsp),%rax
063c0022 add       $0x48,%rsp
063c0026 ret

core::slice::impl$0::get_unchecked<usize,core::ops::range::RangeTo<usize> >:
063c0030 sub       $0x58,%rsp
063c0034 mov       %r8,0x28(%rsp)
063c0039 mov       %rdx,%r8
063c003c mov       %rcx,%rdx
063c003f mov       0x28(%rsp),%rcx
063c0044 mov       %rdx,0x40(%rsp)
063c0049 mov       %r8,0x48(%rsp)
063c004e mov       %rcx,0x50(%rsp)
063c0053 call      0x0000`0000`063B`2B30
063c0058 mov       %rax,0x30(%rsp)
063c005d mov       %rdx,0x38(%rsp)
063c0062 mov       0x38(%rsp),%rdx
063c0067 mov       0x30(%rsp),%rax
063c006c add       $0x58,%rsp
063c0070 ret

core::slice::impl$0::get_unchecked<u8,usize>:
063c0080 sub       $0x48,%rsp
063c0084 mov       %r8,0x20(%rsp)
063c0089 mov       %rdx,%r8
063c008c mov       %rcx,%rdx
063c008f mov       0x20(%rsp),%rcx
063c0094 mov       %rdx,0x30(%rsp)
063c0099 mov       %r8,0x38(%rsp)
063c009e mov       %rcx,0x40(%rsp)
063c00a3 call      0x0000`0000`063B`A810
063c00a8 mov       %rax,0x28(%rsp)
063c00ad mov       0x28(%rsp),%rax
063c00b2 add       $0x48,%rsp
063c00b6 ret

core::slice::impl$0::get_unchecked<usize,core::ops::range::RangeFrom<usize> >:
063c00c0 sub       $0x58,%rsp
063c00c4 mov       %r8,0x28(%rsp)
063c00c9 mov       %rdx,%r8
063c00cc mov       %rcx,%rdx
063c00cf mov       0x28(%rsp),%rcx
063c00d4 mov       %rdx,0x40(%rsp)
063c00d9 mov       %r8,0x48(%rsp)
063c00de mov       %rcx,0x50(%rsp)
063c00e3 call      0x0000`0000`063B`2D20
063c00e8 mov       %rax,0x30(%rsp)
063c00ed mov       %rdx,0x38(%rsp)
063c00f2 mov       0x38(%rsp),%rdx
063c00f7 mov       0x30(%rsp),%rax
063c00fc add       $0x58,%rsp
063c0100 ret

core::slice::impl$0::get_unchecked<u8,core::ops::range::RangeFrom<usize> >:
063c0110 sub       $0x58,%rsp
063c0114 mov       %r8,0x28(%rsp)
063c0119 mov       %rdx,%r8
063c011c mov       %rcx,%rdx
063c011f mov       0x28(%rsp),%rcx
063c0124 mov       %rdx,0x40(%rsp)
063c0129 mov       %r8,0x48(%rsp)
063c012e mov       %rcx,0x50(%rsp)
063c0133 call      0x0000`0000`063B`2C90
063c0138 mov       %rax,0x30(%rsp)
063c013d mov       %rdx,0x38(%rsp)
063c0142 mov       0x38(%rsp),%rdx
063c0147 mov       0x30(%rsp),%rax
063c014c add       $0x58,%rsp
063c0150 ret

core::slice::impl$0::as_ptr<tuple$<u8,u8> >:
063c0160 sub       $0x10,%rsp
063c0164 mov       %rcx,%rax
063c0167 mov       %rax,(%rsp)
063c016b mov       %rdx,8(%rsp)
063c0170 add       $0x10,%rsp
063c0174 ret

core::slice::impl$0::as_ptr<u8>:
063c0180 sub       $0x10,%rsp
063c0184 mov       %rcx,%rax
063c0187 mov       %rax,(%rsp)
063c018b mov       %rdx,8(%rsp)
063c0190 add       $0x10,%rsp
063c0194 ret

core::slice::impl$0::as_ptr<usize>:
063c01a0 sub       $0x10,%rsp
063c01a4 mov       %rcx,%rax
063c01a7 mov       %rax,(%rsp)
063c01ab mov       %rdx,8(%rsp)
063c01b0 add       $0x10,%rsp
063c01b4 ret

core::slice::impl$0::as_ptr<array$<usize,4> >:
063c01c0 sub       $0x10,%rsp
063c01c4 mov       %rcx,%rax
063c01c7 mov       %rax,(%rsp)
063c01cb mov       %rdx,8(%rsp)
063c01d0 add       $0x10,%rsp
063c01d4 ret

core::slice::impl$0::iter<u8>:
063c01e0 sub       $0x48,%rsp
063c01e4 mov       %rcx,0x38(%rsp)
063c01e9 mov       %rdx,0x40(%rsp)
063c01ee call      0x0000`0000`063C`5490
063c01f3 mov       %rax,0x28(%rsp)
063c01f8 mov       %rdx,0x30(%rsp)
063c01fd mov       0x30(%rsp),%rdx
063c0202 mov       0x28(%rsp),%rax
063c0207 add       $0x48,%rsp
063c020b ret

core::slice::impl$0::iter<tuple$<u8,u8> >:
063c0210 sub       $0x48,%rsp
063c0214 mov       %rcx,0x38(%rsp)
063c0219 mov       %rdx,0x40(%rsp)
063c021e call      0x0000`0000`063C`4F40
063c0223 mov       %rax,0x28(%rsp)
063c0228 mov       %rdx,0x30(%rsp)
063c022d mov       0x30(%rsp),%rdx
063c0232 mov       0x28(%rsp),%rax
063c0237 add       $0x48,%rsp
063c023b ret

core::slice::impl$0::iter<array$<usize,4> >:
063c0240 sub       $0x48,%rsp
063c0244 mov       %rcx,0x38(%rsp)
063c0249 mov       %rdx,0x40(%rsp)
063c024e call      0x0000`0000`063C`5050
063c0253 mov       %rax,0x28(%rsp)
063c0258 mov       %rdx,0x30(%rsp)
063c025d mov       0x30(%rsp),%rdx
063c0262 mov       0x28(%rsp),%rax
063c0267 add       $0x48,%rsp
063c026b ret

core::slice::impl$0::iter<usize>:
063c0270 sub       $0x48,%rsp
063c0274 mov       %rcx,0x38(%rsp)
063c0279 mov       %rdx,0x40(%rsp)
063c027e call      0x0000`0000`063C`5380
063c0283 mov       %rax,0x28(%rsp)
063c0288 mov       %rdx,0x30(%rsp)
063c028d mov       0x30(%rsp),%rdx
063c0292 mov       0x28(%rsp),%rax
063c0297 add       $0x48,%rsp
063c029b ret

core::slice::impl$0::chunks<usize>:
063c02a0 sub       $0xC8,%rsp
063c02a7 mov       %r8,0x28(%rsp)
063c02ac mov       %rdx,0x30(%rsp)
063c02b1 mov       %rcx,0x38(%rsp)
063c02b6 mov       %rcx,0x40(%rsp)
063c02bb mov       %r9,0x58(%rsp)
063c02c0 mov       %rdx,0xA8(%rsp)
063c02c8 mov       %r8,0xB0(%rsp)
063c02d0 lea       0x58(%rsp),%rax
063c02d5 mov       %rax,0x60(%rsp)
063c02da lea       0x63C`FD58,%rax
063c02e1 mov       %rax,0x68(%rsp)
063c02e6 mov       0x60(%rsp),%rax
063c02eb mov       %rax,0x48(%rsp)
063c02f0 mov       %rax,0xB8(%rsp)
063c02f8 mov       0x68(%rsp),%rcx
063c02fd mov       %rcx,0x50(%rsp)
063c0302 mov       %rcx,0xC0(%rsp)
063c030a mov       (%rax),%rax
063c030d cmp       (%rcx),%rax
063c0310 je        0x0000`0000`063C`032D
063c0312 mov       0x28(%rsp),%r8
063c0317 mov       0x30(%rsp),%rdx
063c031c mov       0x38(%rsp),%rcx
063c0321 mov       0x58(%rsp),%r9
063c0326 call      0x0000`0000`063C`5770
063c032b jmp       0x0000`0000`063C`0361
063c032d mov       0x50(%rsp),%r8
063c0332 mov       0x48(%rsp),%rdx
063c0337 movb      $1,0x77(%rsp)
063c033c movq      $0,0x78(%rsp)
063c0345 lea       0x63C`FDD8,%rcx
063c034c mov       %rsp,%rax
063c034f mov       %rcx,0x20(%rax)
063c0353 mov       $1,%cl
063c0355 lea       0x78(%rsp),%r9
063c035a call      0x0000`0000`063B`2190
063c035f ud2
063c0361 mov       0x40(%rsp),%rax
063c0366 add       $0xC8,%rsp
063c036d ret

core::slice::impl$0::as_chunks_unchecked<usize,4>:
063c0370 sub       $0x158,%rsp
063c0377 mov       %rdx,0x60(%rsp)
063c037c mov       %rcx,0x68(%rsp)
063c0381 mov       %rcx,0x118(%rsp)
063c0389 mov       %rdx,0x120(%rsp)
063c0391 lea       0x63C`FDF0,%rax
063c0398 mov       %rax,0x80(%rsp)
063c03a0 lea       0x63C`FD58,%rax
063c03a7 mov       %rax,0x88(%rsp)
063c03af mov       0x80(%rsp),%rax
063c03b7 mov       %rax,0x70(%rsp)
063c03bc mov       %rax,0x128(%rsp)
063c03c4 mov       0x88(%rsp),%rcx
063c03cc mov       %rcx,0x78(%rsp)
063c03d1 mov       %rcx,0x130(%rsp)
063c03d9 mov       (%rax),%rax
063c03dc cmp       (%rcx),%rax
063c03df je        0x0000`0000`063C`03E3
063c03e1 jmp       0x0000`0000`063C`0420
063c03e3 mov       0x78(%rsp),%r8
063c03e8 mov       0x70(%rsp),%rdx
063c03ed movb      $1,0x97(%rsp)
063c03f5 movq      $0,0x98(%rsp)
063c0401 lea       0x63C`FDF8,%rcx
063c0408 mov       %rsp,%rax
063c040b mov       %rcx,0x20(%rax)
063c040f mov       $1,%cl
063c0411 lea       0x98(%rsp),%r9
063c0419 call      0x0000`0000`063B`2190
063c041e ud2
063c0420 mov       0x60(%rsp),%rax
063c0425 and       $3,%rax
063c0429 mov       %rax,0xD8(%rsp)
063c0431 lea       0xD8(%rsp),%rax
063c0439 mov       %rax,0xC8(%rsp)
063c0441 lea       0x63C`FD58,%rax
063c0448 mov       %rax,0xD0(%rsp)
063c0450 mov       0xC8(%rsp),%rax
063c0458 mov       %rax,0x50(%rsp)
063c045d mov       %rax,0x138(%rsp)
063c0465 mov       0xD0(%rsp),%rcx
063c046d mov       %rcx,0x58(%rsp)
063c0472 mov       %rcx,0x140(%rsp)
063c047a mov       (%rax),%rax
063c047d cmp       (%rcx),%rax
063c0480 sete      %al
063c0483 xor       $0xFF,%al
063c0485 test      $1,%al
063c0487 jne       0x0000`0000`063C`04B1
063c0489 mov       0x60(%rsp),%rax
063c048e shr       $2,%rax
063c0492 mov       %rax,0x148(%rsp)
063c049a mov       0x148(%rsp),%rax
063c04a2 mov       %rax,0x48(%rsp)
063c04a7 mov       %rax,0x150(%rsp)
063c04af jmp       0x0000`0000`063C`04F0
063c04b1 mov       0x58(%rsp),%r8
063c04b6 mov       0x50(%rsp),%rdx
063c04bb movb      $0,0xE7(%rsp)
063c04c3 movq      $0,0xE8(%rsp)
063c04cf lea       0x63C`FE10,%rcx
063c04d6 mov       %rsp,%rax
063c04d9 mov       %rcx,0x20(%rax)
063c04dd xor       %eax,%eax
063c04df mov       %al,%cl
063c04e1 lea       0xE8(%rsp),%r9
063c04e9 call      0x0000`0000`063B`2190
063c04ee ud2
063c04f0 mov       0x60(%rsp),%rdx
063c04f5 mov       0x68(%rsp),%rcx
063c04fa call      0x0000`0000`063C`01A0
063c04ff mov       %rax,0x40(%rsp)
063c0504 mov       0x40(%rsp),%rcx
063c0509 call      0x0000`0000`063C`48D0
063c050e mov       %rax,0x38(%rsp)
063c0513 mov       0x48(%rsp),%rdx
063c0518 mov       0x38(%rsp),%rcx
063c051d call      0x0000`0000`063B`A8F0
063c0522 mov       %rax,0x28(%rsp)
063c0527 mov       %rdx,0x30(%rsp)
063c052c mov       0x30(%rsp),%rdx
063c0531 mov       0x28(%rsp),%rax
063c0536 add       $0x158,%rsp
063c053d ret

core::slice::impl$0::as_chunks<usize,4>:
063c0540 sub       $0x148,%rsp
063c0547 mov       %r8,0x58(%rsp)
063c054c mov       %rdx,0x60(%rsp)
063c0551 mov       %rcx,0x68(%rsp)
063c0556 mov       %rcx,0x70(%rsp)
063c055b mov       %rdx,0xF0(%rsp)
063c0563 mov       %r8,0xF8(%rsp)
063c056b lea       0x63C`FDF0,%rax
063c0572 mov       %rax,0x88(%rsp)
063c057a lea       0x63C`FD58,%rax
063c0581 mov       %rax,0x90(%rsp)
063c0589 mov       0x88(%rsp),%rax
063c0591 mov       %rax,0x78(%rsp)
063c0596 mov       %rax,0x100(%rsp)
063c059e mov       0x90(%rsp),%rcx
063c05a6 mov       %rcx,0x80(%rsp)
063c05ae mov       %rcx,0x108(%rsp)
063c05b6 mov       (%rax),%rax
063c05b9 cmp       (%rcx),%rax
063c05bc je        0x0000`0000`063C`05C0
063c05be jmp       0x0000`0000`063C`0600
063c05c0 mov       0x80(%rsp),%r8
063c05c8 mov       0x78(%rsp),%rdx
063c05cd movb      $1,0x9F(%rsp)
063c05d5 movq      $0,0xA0(%rsp)
063c05e1 lea       0x63C`FE28,%rcx
063c05e8 mov       %rsp,%rax
063c05eb mov       %rcx,0x20(%rax)
063c05ef mov       $1,%cl
063c05f1 lea       0xA0(%rsp),%r9
063c05f9 call      0x0000`0000`063B`2190
063c05fe ud2
063c0600 mov       0x58(%rsp),%rax
063c0605 shr       $2,%rax
063c0609 mov       %rax,0x110(%rsp)
063c0611 mov       $4,%ecx
063c0616 mul       %rcx
063c0619 mov       %rax,0x50(%rsp)
063c061e seto      %al
063c0621 test      $1,%al
063c0623 jne       0x0000`0000`063C`064F
063c0625 mov       0x50(%rsp),%r9
063c062a mov       0x58(%rsp),%r8
063c062f mov       0x60(%rsp),%rdx
063c0634 lea       0xD0(%rsp),%rcx
063c063c lea       0x63C`FE88,%rax
063c0643 mov       %rax,0x20(%rsp)
063c0648 call      0x0000`0000`063C`07A0
063c064d jmp       0x0000`0000`063C`0669
063c064f lea       0x63C`FE60,%rcx
063c0656 lea       0x63C`FE40,%r8
063c065d mov       $0x21,%edx
063c0662 call      0x0000`0000`063B`2030
063c0667 ud2
063c0669 mov       0xD0(%rsp),%rcx
063c0671 mov       0xD8(%rsp),%rdx
063c0679 mov       %rcx,0x118(%rsp)
063c0681 mov       %rdx,0x120(%rsp)
063c0689 mov       0xE0(%rsp),%r8
063c0691 mov       %r8,0x30(%rsp)
063c0696 mov       0xE8(%rsp),%rax
063c069e mov       %rax,0x38(%rsp)
063c06a3 mov       %r8,0x128(%rsp)
063c06ab mov       %rax,0x130(%rsp)
063c06b3 call      0x0000`0000`063C`0370
063c06b8 mov       %rax,0x40(%rsp)
063c06bd mov       %rdx,0x48(%rsp)
063c06c2 mov       %rax,0x138(%rsp)
063c06ca mov       %rdx,0x140(%rsp)
063c06d2 mov       0x70(%rsp),%rax
063c06d7 mov       0x68(%rsp),%rcx
063c06dc mov       0x38(%rsp),%rdx
063c06e1 mov       0x30(%rsp),%r8
063c06e6 mov       0x48(%rsp),%r9
063c06eb mov       0x40(%rsp),%r10
063c06f0 mov       %r10,(%rcx)
063c06f3 mov       %r9,8(%rcx)
063c06f7 mov       %r8,0x10(%rcx)
063c06fb mov       %rdx,0x18(%rcx)
063c06ff add       $0x148,%rsp
063c0706 ret

core::slice::impl$0::split_at<u8>:
063c0710 sub       $0x68,%rsp
063c0714 mov       %r9,0x20(%rsp)
063c0719 mov       %r8,0x28(%rsp)
063c071e mov       %rdx,0x30(%rsp)
063c0723 mov       %rcx,0x38(%rsp)
063c0728 mov       %rcx,0x40(%rsp)
063c072d mov       0x90(%rsp),%rax
063c0735 mov       %rax,0x48(%rsp)
063c073a mov       %rdx,0x50(%rsp)
063c073f mov       %r8,0x58(%rsp)
063c0744 mov       %r9,0x60(%rsp)
063c0749 cmp       %r8,%r9
063c074c setbe     %al
063c074f xor       $0xFF,%al
063c0751 test      $1,%al
063c0753 jne       0x0000`0000`063C`0770
063c0755 mov       0x20(%rsp),%r9
063c075a mov       0x28(%rsp),%r8
063c075f mov       0x30(%rsp),%rdx
063c0764 mov       0x38(%rsp),%rcx
063c0769 call      0x0000`0000`063C`0830
063c076e jmp       0x0000`0000`063C`0788
063c0770 mov       0x48(%rsp),%r8
063c0775 lea       0x63C`FEA0,%rcx
063c077c mov       $0x23,%edx
063c0781 call      0x0000`0000`063B`2030
063c0786 ud2
063c0788 mov       0x40(%rsp),%rax
063c078d add       $0x68,%rsp
063c0791 ret

core::slice::impl$0::split_at<usize>:
063c07a0 sub       $0x68,%rsp
063c07a4 mov       %r9,0x20(%rsp)
063c07a9 mov       %r8,0x28(%rsp)
063c07ae mov       %rdx,0x30(%rsp)
063c07b3 mov       %rcx,0x38(%rsp)
063c07b8 mov       %rcx,0x40(%rsp)
063c07bd mov       0x90(%rsp),%rax
063c07c5 mov       %rax,0x48(%rsp)
063c07ca mov       %rdx,0x50(%rsp)
063c07cf mov       %r8,0x58(%rsp)
063c07d4 mov       %r9,0x60(%rsp)
063c07d9 cmp       %r8,%r9
063c07dc setbe     %al
063c07df xor       $0xFF,%al
063c07e1 test      $1,%al
063c07e3 jne       0x0000`0000`063C`0800
063c07e5 mov       0x20(%rsp),%r9
063c07ea mov       0x28(%rsp),%r8
063c07ef mov       0x30(%rsp),%rdx
063c07f4 mov       0x38(%rsp),%rcx
063c07f9 call      0x0000`0000`063C`08F0
063c07fe jmp       0x0000`0000`063C`0818
063c0800 mov       0x48(%rsp),%r8
063c0805 lea       0x63C`FEA0,%rcx
063c080c mov       $0x23,%edx
063c0811 call      0x0000`0000`063B`2030
063c0816 ud2
063c0818 mov       0x40(%rsp),%rax
063c081d add       $0x68,%rsp
063c0821 ret

core::slice::impl$0::split_at_unchecked<u8>:
063c0830 sub       $0x98,%rsp
063c0837 mov       %r9,0x38(%rsp)
063c083c mov       %r8,0x40(%rsp)
063c0841 mov       %rdx,%rax
063c0844 mov       0x40(%rsp),%rdx
063c0849 mov       %rax,0x48(%rsp)
063c084e mov       %rcx,%rax
063c0851 mov       0x48(%rsp),%rcx
063c0856 mov       %rax,0x50(%rsp)
063c085b mov       %rax,0x58(%rsp)
063c0860 mov       %rcx,0x80(%rsp)
063c0868 mov       %rdx,0x88(%rsp)
063c0870 mov       %r9,0x90(%rsp)
063c0878 mov       %r9,0x70(%rsp)
063c087d mov       0x70(%rsp),%r8
063c0882 call      0x0000`0000`063B`FF60
063c0887 mov       %rax,0x60(%rsp)
063c088c mov       %rdx,0x68(%rsp)
063c0891 mov       0x40(%rsp),%rdx
063c0896 mov       0x48(%rsp),%rcx
063c089b mov       0x38(%rsp),%rax
063c08a0 mov       %rax,0x78(%rsp)
063c08a5 mov       0x78(%rsp),%r8
063c08aa call      0x0000`0000`063C`0110
063c08af mov       %rax,0x28(%rsp)
063c08b4 mov       %rdx,0x30(%rsp)
063c08b9 mov       0x58(%rsp),%rax
063c08be mov       0x50(%rsp),%rcx
063c08c3 mov       0x30(%rsp),%rdx
063c08c8 mov       0x28(%rsp),%r8
063c08cd mov       0x68(%rsp),%r9
063c08d2 mov       0x60(%rsp),%r10
063c08d7 mov       %r10,(%rcx)
063c08da mov       %r9,8(%rcx)
063c08de mov       %r8,0x10(%rcx)
063c08e2 mov       %rdx,0x18(%rcx)
063c08e6 add       $0x98,%rsp
063c08ed ret

core::slice::impl$0::split_at_unchecked<usize>:
063c08f0 sub       $0x98,%rsp
063c08f7 mov       %r9,0x38(%rsp)
063c08fc mov       %r8,0x40(%rsp)
063c0901 mov       %rdx,%rax
063c0904 mov       0x40(%rsp),%rdx
063c0909 mov       %rax,0x48(%rsp)
063c090e mov       %rcx,%rax
063c0911 mov       0x48(%rsp),%rcx
063c0916 mov       %rax,0x50(%rsp)
063c091b mov       %rax,0x58(%rsp)
063c0920 mov       %rcx,0x80(%rsp)
063c0928 mov       %rdx,0x88(%rsp)
063c0930 mov       %r9,0x90(%rsp)
063c0938 mov       %r9,0x70(%rsp)
063c093d mov       0x70(%rsp),%r8
063c0942 call      0x0000`0000`063C`0030
063c0947 mov       %rax,0x60(%rsp)
063c094c mov       %rdx,0x68(%rsp)
063c0951 mov       0x40(%rsp),%rdx
063c0956 mov       0x48(%rsp),%rcx
063c095b mov       0x38(%rsp),%rax
063c0960 mov       %rax,0x78(%rsp)
063c0965 mov       0x78(%rsp),%r8
063c096a call      0x0000`0000`063C`00C0
063c096f mov       %rax,0x28(%rsp)
063c0974 mov       %rdx,0x30(%rsp)
063c0979 mov       0x58(%rsp),%rax
063c097e mov       0x50(%rsp),%rcx
063c0983 mov       0x30(%rsp),%rdx
063c0988 mov       0x28(%rsp),%r8
063c098d mov       0x68(%rsp),%r9
063c0992 mov       0x60(%rsp),%r10
063c0997 mov       %r10,(%rcx)
063c099a mov       %r9,8(%rcx)
063c099e mov       %r8,0x10(%rcx)
063c09a2 mov       %rdx,0x18(%rcx)
063c09a6 add       $0x98,%rsp
063c09ad ret

core::slice::impl$0::binary_search_by<u32,core::slice::impl$0::binary_search_by_key::closure_env$0<u32,u32,core::unicode::unicode_data::skip_search::closure_env$0<32,707> > >:
063c09b0 sub       $0xB8,%rsp
063c09b7 mov       %rdx,0x48(%rsp)
063c09bc mov       %rcx,0x50(%rsp)
063c09c1 mov       %r8,0x58(%rsp)
063c09c6 mov       %r9,0x60(%rsp)
063c09cb mov       %rcx,0xA0(%rsp)
063c09d3 mov       %rdx,0xA8(%rsp)
063c09db mov       %rdx,0x78(%rsp)
063c09e0 movq      $0,0x80(%rsp)
063c09ec mov       0x78(%rsp),%rax
063c09f1 mov       %rax,0x88(%rsp)
063c09f9 mov       0x80(%rsp),%rax
063c0a01 cmp       0x88(%rsp),%rax
063c0a09 jb        0x0000`0000`063C`0A26
063c0a0b mov       0x80(%rsp),%rax
063c0a13 mov       %rax,0x70(%rsp)
063c0a18 movq      $1,0x68(%rsp)
063c0a21 jmp       0x0000`0000`063C`0B98
063c0a26 mov       0x80(%rsp),%rax
063c0a2e mov       0x78(%rsp),%rcx
063c0a33 shr       $1,%rcx
063c0a37 add       %rcx,%rax
063c0a3a mov       %rax,0x40(%rsp)
063c0a3f setb      %al
063c0a42 test      $1,%al
063c0a44 jne       0x0000`0000`063C`0A69
063c0a46 mov       0x40(%rsp),%r8
063c0a4b mov       0x48(%rsp),%rdx
063c0a50 mov       0x50(%rsp),%rcx
063c0a55 mov       %r8,0xB0(%rsp)
063c0a5d call      0x0000`0000`063B`FFF0
063c0a62 mov       %rax,0x38(%rsp)
063c0a67 jmp       0x0000`0000`063C`0A83
063c0a69 lea       0x63C`FEE0,%rcx
063c0a70 lea       0x63C`FEC8,%r8
063c0a77 mov       $0x1C,%edx
063c0a7c call      0x0000`0000`063B`2030
063c0a81 ud2
063c0a83 mov       0x38(%rsp),%rax
063c0a88 mov       %rax,0x98(%rsp)
063c0a90 mov       0x98(%rsp),%rdx
063c0a98 lea       0x58(%rsp),%rcx
063c0a9d call      0x0000`0000`063C`0C00
063c0aa2 mov       %al,0x97(%rsp)
063c0aa9 lea       0x97(%rsp),%rcx
063c0ab1 lea       0x63C`FEFC,%rdx
063c0ab8 call      0x0000`0000`063B`12D0
063c0abd mov       %al,0x37(%rsp)
063c0ac1 mov       0x37(%rsp),%al
063c0ac5 test      $1,%al
063c0ac7 jne       0x0000`0000`063C`0AE5
063c0ac9 jmp       0x0000`0000`063C`0ACB
063c0acb lea       0x97(%rsp),%rcx
063c0ad3 lea       0x63C`FF18,%rdx
063c0ada call      0x0000`0000`063B`12D0
063c0adf mov       %al,0x36(%rsp)
063c0ae3 jmp       0x0000`0000`063C`0B41
063c0ae5 mov       0x40(%rsp),%rax
063c0aea add       $1,%rax
063c0aee mov       %rax,0x28(%rsp)
063c0af3 setb      %al
063c0af6 test      $1,%al
063c0af8 jne       0x0000`0000`063C`0B09
063c0afa mov       0x28(%rsp),%rax
063c0aff mov       %rax,0x80(%rsp)
063c0b07 jmp       0x0000`0000`063C`0B23
063c0b09 lea       0x63C`FEE0,%rcx
063c0b10 lea       0x63C`FF00,%r8
063c0b17 mov       $0x1C,%edx
063c0b1c call      0x0000`0000`063B`2030
063c0b21 ud2
063c0b23 mov       0x88(%rsp),%rax
063c0b2b sub       0x80(%rsp),%rax
063c0b33 mov       %rax,0x20(%rsp)
063c0b38 setb      %al
063c0b3b test      $1,%al
063c0b3d jne       0x0000`0000`063C`0B6B
063c0b3f jmp       0x0000`0000`063C`0B5C
063c0b41 mov       0x36(%rsp),%al
063c0b45 test      $1,%al
063c0b47 jne       0x0000`0000`063C`0B4D
063c0b49 jmp       0x0000`0000`063C`0B4B
063c0b4b jmp       0x0000`0000`063C`0B85
063c0b4d mov       0x40(%rsp),%rax
063c0b52 mov       %rax,0x88(%rsp)
063c0b5a jmp       0x0000`0000`063C`0B23
063c0b5c mov       0x20(%rsp),%rax
063c0b61 mov       %rax,0x78(%rsp)
063c0b66 jmp       0x0000`0000`063C`09F9
063c0b6b lea       0x63C`FF40,%rcx
063c0b72 lea       0x63C`FF20,%r8
063c0b79 mov       $0x21,%edx
063c0b7e call      0x0000`0000`063B`2030
063c0b83 ud2
063c0b85 mov       0x40(%rsp),%rax
063c0b8a mov       %rax,0x70(%rsp)
063c0b8f movq      $0,0x68(%rsp)
063c0b98 mov       0x68(%rsp),%rax
063c0b9d mov       0x70(%rsp),%rdx
063c0ba2 add       $0xB8,%rsp
063c0ba9 ret

core::slice::impl$0::binary_search_by_key<u32,u32,core::unicode::unicode_data::skip_search::closure_env$0<32,707> >:
063c0bb0 sub       $0x68,%rsp
063c0bb4 mov       %rcx,0x50(%rsp)
063c0bb9 mov       %rdx,0x58(%rsp)
063c0bbe mov       %r8,0x60(%rsp)
063c0bc3 lea       0x38(%rsp),%rax
063c0bc8 mov       %rax,0x40(%rsp)
063c0bcd mov       %r8,0x48(%rsp)
063c0bd2 mov       0x40(%rsp),%r8
063c0bd7 mov       0x48(%rsp),%r9
063c0bdc call      0x0000`0000`063C`09B0
063c0be1 mov       %rax,0x28(%rsp)
063c0be6 mov       %rdx,0x30(%rsp)
063c0beb jmp       0x0000`0000`063C`0BED
063c0bed mov       0x30(%rsp),%rdx
063c0bf2 mov       0x28(%rsp),%rax
063c0bf7 add       $0x68,%rsp
063c0bfb ret

core::slice::impl$0::binary_search_by_key::closure$0<u32,u32,core::unicode::unicode_data::skip_search::closure_env$0<32,707> >:
063c0c00 sub       $0x68,%rsp
063c0c04 mov       %rcx,0x30(%rsp)
063c0c09 mov       %rcx,0x48(%rsp)
063c0c0e mov       0x48(%rsp),%rax
063c0c13 mov       (%rax),%rax
063c0c16 mov       %rax,0x50(%rsp)
063c0c1b mov       0x48(%rsp),%rax
063c0c20 mov       8(%rax),%rax
063c0c24 mov       %rax,0x58(%rsp)
063c0c29 mov       %rdx,0x60(%rsp)
063c0c2e mov       (%rcx),%rcx
063c0c31 mov       %rdx,0x40(%rsp)
063c0c36 mov       0x40(%rsp),%rdx
063c0c3b call      0x0000`0000`063C`1450
063c0c40 mov       %eax,0x3C(%rsp)
063c0c44 mov       0x30(%rsp),%rax
063c0c49 mov       8(%rax),%rdx
063c0c4d lea       0x3C(%rsp),%rcx
063c0c52 call      0x0000`0000`063C`6060
063c0c57 mov       %al,0x2F(%rsp)
063c0c5b jmp       0x0000`0000`063C`0C5D
063c0c5d mov       0x2F(%rsp),%al
063c0c61 add       $0x68,%rsp
063c0c65 ret

core::slice::impl$0::align_to_offsets<u8,usize>:
063c0c70 sub       $0x98,%rsp
063c0c77 mov       %rdx,0x48(%rsp)
063c0c7c mov       %rcx,0x60(%rsp)
063c0c81 mov       %rdx,0x68(%rsp)
063c0c86 jmp       0x0000`0000`063C`0C88
063c0c88 mov       $1,%ecx
063c0c8d mov       $8,%edx
063c0c92 call      0x0000`0000`063C`0E10
063c0c97 mov       %rax,0x40(%rsp)
063c0c9c mov       %rax,0x70(%rsp)
063c0ca1 jmp       0x0000`0000`063C`0CA3
063c0ca3 mov       0x40(%rsp),%rax
063c0ca8 cmp       $0,%rax
063c0cac sete      %al
063c0caf test      $1,%al
063c0cb1 jne       0x0000`0000`063C`0CCE
063c0cb3 mov       0x40(%rsp),%rcx
063c0cb8 mov       $8,%eax
063c0cbd xor       %edx,%edx
063c0cbf div       %rcx
063c0cc2 mov       %rax,0x38(%rsp)
063c0cc7 mov       %rax,0x78(%rsp)
063c0ccc jmp       0x0000`0000`063C`0CE8
063c0cce lea       0x63C`FF80,%rcx
063c0cd5 lea       0x63C`FF68,%r8
063c0cdc mov       $0x19,%edx
063c0ce1 call      0x0000`0000`063B`2030
063c0ce6 ud2
063c0ce8 mov       0x40(%rsp),%rax
063c0ced cmp       $0,%rax
063c0cf1 sete      %al
063c0cf4 test      $1,%al
063c0cf6 jne       0x0000`0000`063C`0D29
063c0cf8 mov       0x40(%rsp),%rcx
063c0cfd mov       $1,%eax
063c0d02 xor       %edx,%edx
063c0d04 div       %rcx
063c0d07 mov       %rax,%rcx
063c0d0a mov       0x38(%rsp),%rax
063c0d0f mov       %rcx,0x30(%rsp)
063c0d14 mov       %rcx,0x80(%rsp)
063c0d1c cmp       $0,%rax
063c0d20 sete      %al
063c0d23 test      $1,%al
063c0d25 jne       0x0000`0000`063C`0D68
063c0d27 jmp       0x0000`0000`063C`0D43
063c0d29 lea       0x63C`FF80,%rcx
063c0d30 lea       0x63C`FFA0,%r8
063c0d37 mov       $0x19,%edx
063c0d3c call      0x0000`0000`063B`2030
063c0d41 ud2
063c0d43 mov       0x30(%rsp),%rcx
063c0d48 mov       0x38(%rsp),%r8
063c0d4d mov       0x48(%rsp),%rax
063c0d52 xor       %edx,%edx
063c0d54 div       %r8
063c0d57 mul       %rcx
063c0d5a mov       %rax,0x28(%rsp)
063c0d5f seto      %al
063c0d62 test      $1,%al
063c0d64 jne       0x0000`0000`063C`0DA1
063c0d66 jmp       0x0000`0000`063C`0D82
063c0d68 lea       0x63C`FF80,%rcx
063c0d6f lea       0x63C`FFB8,%r8
063c0d76 mov       $0x19,%edx
063c0d7b call      0x0000`0000`063B`2030
063c0d80 ud2
063c0d82 mov       0x38(%rsp),%rax
063c0d87 mov       0x28(%rsp),%rcx
063c0d8c mov       %rcx,0x88(%rsp)
063c0d94 cmp       $0,%rax
063c0d98 sete      %al
063c0d9b test      $1,%al
063c0d9d jne       0x0000`0000`063C`0DF3
063c0d9f jmp       0x0000`0000`063C`0DBB
063c0da1 lea       0x63C`FE60,%rcx
063c0da8 lea       0x63C`FFB8,%r8
063c0daf mov       $0x21,%edx
063c0db4 call      0x0000`0000`063B`2030
063c0db9 ud2
063c0dbb mov       0x38(%rsp),%rcx
063c0dc0 mov       0x48(%rsp),%rax
063c0dc5 xor       %edx,%edx
063c0dc7 div       %rcx
063c0dca mov       0x28(%rsp),%rax
063c0dcf mov       %rdx,0x90(%rsp)
063c0dd7 mov       %rax,0x50(%rsp)
063c0ddc mov       %rdx,0x58(%rsp)
063c0de1 mov       0x50(%rsp),%rax
063c0de6 mov       0x58(%rsp),%rdx
063c0deb add       $0x98,%rsp
063c0df2 ret
063c0df3 lea       0x63C`FFF0,%rcx
063c0dfa lea       0x63C`FFD0,%r8
063c0e01 mov       $0x39,%edx
063c0e06 call      0x0000`0000`063B`2030
063c0e0b ud2

core::slice::impl$0::align_to_offsets::gcd:
063c0e10 sub       $0xE8,%rsp
063c0e17 mov       %rdx,0x70(%rsp)
063c0e1c mov       %rcx,0x78(%rsp)
063c0e21 mov       %rcx,0xB0(%rsp)
063c0e29 mov       %rdx,0xB8(%rsp)
063c0e31 cmp       $0,%rcx
063c0e35 jne       0x0000`0000`063C`0E49
063c0e37 mov       0x70(%rsp),%rax
063c0e3c mov       %rax,0x80(%rsp)
063c0e44 jmp       0x0000`0000`063C`10B4
063c0e49 mov       0x70(%rsp),%rax
063c0e4e cmp       $0,%rax
063c0e52 jne       0x0000`0000`063C`0E66
063c0e54 mov       0x78(%rsp),%rax
063c0e59 mov       %rax,0x80(%rsp)
063c0e61 jmp       0x0000`0000`063C`10B4
063c0e66 mov       0x78(%rsp),%rax
063c0e6b bsf       %rax,%rax
063c0e6f mov       %rax,0xC0(%rsp)
063c0e77 mov       0xC0(%rsp),%rax
063c0e7f mov       %rax,0x68(%rsp)
063c0e84 mov       0x70(%rsp),%rax
063c0e89 bsf       %rax,%rax
063c0e8d mov       %rax,0xC8(%rsp)
063c0e95 mov       0xC8(%rsp),%rax
063c0e9d mov       %rax,0x60(%rsp)
063c0ea2 mov       0x60(%rsp),%rax
063c0ea7 mov       0x68(%rsp),%rcx
063c0eac mov       %rcx,0x90(%rsp)
063c0eb4 mov       %rax,0x98(%rsp)
063c0ebc mov       0x90(%rsp),%rcx
063c0ec4 mov       %rcx,0x50(%rsp)
063c0ec9 mov       %rcx,0xD0(%rsp)
063c0ed1 mov       0x98(%rsp),%rax
063c0ed9 mov       %rax,0x88(%rsp)
063c0ee1 mov       0x88(%rsp),%rdx
063c0ee9 call      0x0000`0000`063B`10C0
063c0eee mov       %rax,0x58(%rsp)
063c0ef3 mov       %rax,0xD8(%rsp)
063c0efb mov       0x78(%rsp),%rdx
063c0f00 mov       0x50(%rsp),%rcx
063c0f05 mov       %rcx,%rax
063c0f08 and       $0xFFFF`FFFF`FFFF`FFC0,%rax
063c0f0c cmp       $0,%rax
063c0f10 setne     %al
063c0f13 and       $0x3F,%rcx
063c0f17 shr       %cl,%rdx
063c0f1a mov       %rdx,0x48(%rsp)
063c0f1f test      $1,%al
063c0f21 jne       0x0000`0000`063C`0F3F
063c0f23 mov       0x70(%rsp),%rax
063c0f28 mov       0x48(%rsp),%rcx
063c0f2d mov       %rcx,0xA0(%rsp)
063c0f35 mov       %rax,0xA8(%rsp)
063c0f3d jmp       0x0000`0000`063C`0F59
063c0f3f lea       0x63D`0050,%rcx
063c0f46 lea       0x63D`0030,%r8
063c0f4d mov       $0x24,%edx
063c0f52 call      0x0000`0000`063B`2030
063c0f57 ud2
063c0f59 mov       0x88(%rsp),%rcx
063c0f61 mov       0xA8(%rsp),%rdx
063c0f69 mov       %rcx,%rax
063c0f6c and       $0xFFFF`FFFF`FFFF`FFC0,%rax
063c0f70 cmp       $0,%rax
063c0f74 setne     %al
063c0f77 and       $0x3F,%rcx
063c0f7b shr       %cl,%rdx
063c0f7e mov       %rdx,0x40(%rsp)
063c0f83 test      $1,%al
063c0f85 jne       0x0000`0000`063C`0FA8
063c0f87 mov       0x40(%rsp),%rax
063c0f8c mov       %rax,0xA8(%rsp)
063c0f94 mov       0xA0(%rsp),%rax
063c0f9c cmp       0xA8(%rsp),%rax
063c0fa4 ja        0x0000`0000`063C`0FE0
063c0fa6 jmp       0x0000`0000`063C`0FC2
063c0fa8 lea       0x63D`0050,%rcx
063c0faf lea       0x63D`0078,%r8
063c0fb6 mov       $0x24,%edx
063c0fbb call      0x0000`0000`063B`2030
063c0fc0 ud2
063c0fc2 mov       0xA8(%rsp),%rax
063c0fca sub       0xA0(%rsp),%rax
063c0fd2 mov       %rax,0x38(%rsp)
063c0fd7 setb      %al
063c0fda test      $1,%al
063c0fdc jne       0x0000`0000`063C`1011
063c0fde jmp       0x0000`0000`063C`0FF7
063c0fe0 lea       0xA0(%rsp),%rcx
063c0fe8 lea       0xA8(%rsp),%rdx
063c0ff0 call      0x0000`0000`063B`9320
063c0ff5 jmp       0x0000`0000`063C`0FC2
063c0ff7 mov       0x38(%rsp),%rax
063c0ffc mov       %rax,0xA8(%rsp)
063c1004 cmpq      $0,0xA8(%rsp)
063c100d je        0x0000`0000`063C`102B
063c100f jmp       0x0000`0000`063C`1058
063c1011 lea       0x63C`FF40,%rcx
063c1018 lea       0x63D`0090,%r8
063c101f mov       $0x21,%edx
063c1024 call      0x0000`0000`063B`2030
063c1029 ud2
063c102b mov       0x58(%rsp),%rcx
063c1030 mov       0xA0(%rsp),%rdx
063c1038 mov       %rcx,%rax
063c103b and       $0xFFFF`FFFF`FFFF`FFC0,%rax
063c103f cmp       $0,%rax
063c1043 setne     %al
063c1046 and       $0x3F,%rcx
063c104a shl       %cl,%rdx
063c104d mov       %rdx,0x30(%rsp)
063c1052 test      $1,%al
063c1054 jne       0x0000`0000`063C`109A
063c1056 jmp       0x0000`0000`063C`108B
063c1058 mov       0xA8(%rsp),%rax
063c1060 bsf       %rax,%rax
063c1064 mov       %rax,0xE0(%rsp)
063c106c mov       0xE0(%rsp),%rax
063c1074 mov       %rax,0x28(%rsp)
063c1079 mov       0x28(%rsp),%rax
063c107e mov       %rax,0x88(%rsp)
063c1086 jmp       0x0000`0000`063C`0F59
063c108b mov       0x30(%rsp),%rax
063c1090 mov       %rax,0x80(%rsp)
063c1098 jmp       0x0000`0000`063C`10B4
063c109a lea       0x63D`00C0,%rcx
063c10a1 lea       0x63D`00A8,%r8
063c10a8 mov       $0x23,%edx
063c10ad call      0x0000`0000`063B`2030
063c10b2 ud2
063c10b4 mov       0x80(%rsp),%rax
063c10bc add       $0xE8,%rsp
063c10c3 ret

core::slice::impl$0::align_to<u8,usize>:
063c10d0 sub       $0x168,%rsp
063c10d7 mov       %r8,0xA8(%rsp)
063c10df mov       %rdx,0xB0(%rsp)
063c10e7 mov       %rcx,0xB8(%rsp)
063c10ef mov       %rcx,0xC0(%rsp)
063c10f7 mov       %rdx,0xF0(%rsp)
063c10ff mov       %r8,0xF8(%rsp)
063c1107 mov       $8,%eax
063c110c cmp       $0,%rax
063c1110 jne       0x0000`0000`063C`111C
063c1112 movb      $1,0xCF(%rsp)
063c111a jmp       0x0000`0000`063C`1133
063c111c jmp       0x0000`0000`063C`111E
063c111e mov       $1,%eax
063c1123 cmp       $0,%rax
063c1127 sete      %al
063c112a and       $1,%al
063c112c mov       %al,0xCF(%rsp)
063c1133 testb     $1,0xCF(%rsp)
063c113b jne       0x0000`0000`063C`1164
063c113d mov       0xA8(%rsp),%rdx
063c1145 mov       0xB0(%rsp),%rcx
063c114d call      0x0000`0000`063C`0180
063c1152 mov       %rax,0xA0(%rsp)
063c115a mov       %rax,0x100(%rsp)
063c1162 jmp       0x0000`0000`063C`11B9
063c1164 mov       0xB8(%rsp),%rax
063c116c mov       0xA8(%rsp),%rcx
063c1174 mov       0xB0(%rsp),%rdx
063c117c mov       %rdx,(%rax)
063c117f mov       %rcx,8(%rax)
063c1183 lea       0x63D`00E8,%rcx
063c118a mov       %rcx,0x10(%rax)
063c118e movq      $0,0x18(%rax)
063c1196 lea       0x63D`00E8,%rcx
063c119d mov       %rcx,0x20(%rax)
063c11a1 movq      $0,0x28(%rax)
063c11a9 mov       0xC0(%rsp),%rax
063c11b1 add       $0x168,%rsp
063c11b8 ret
063c11b9 jmp       0x0000`0000`063C`11BB
063c11bb mov       0xA0(%rsp),%rcx
063c11c3 mov       $8,%edx
063c11c8 call      0x0000`0000`063C`9630
063c11cd mov       %rax,0x98(%rsp)
063c11d5 mov       %rax,0x108(%rsp)
063c11dd mov       0x98(%rsp),%rax
063c11e5 mov       0xA8(%rsp),%rcx
063c11ed cmp       %rcx,%rax
063c11f0 ja        0x0000`0000`063C`1225
063c11f2 mov       0x98(%rsp),%r9
063c11fa mov       0xA8(%rsp),%r8
063c1202 mov       0xB0(%rsp),%rdx
063c120a lea       0xD0(%rsp),%rcx
063c1212 lea       0x63D`00E8,%rax
063c1219 mov       %rax,0x20(%rsp)
063c121e call      0x0000`0000`063C`0710
063c1223 jmp       0x0000`0000`063C`126F
063c1225 mov       0xB8(%rsp),%rax
063c122d mov       0xA8(%rsp),%rcx
063c1235 mov       0xB0(%rsp),%rdx
063c123d mov       %rdx,(%rax)
063c1240 mov       %rcx,8(%rax)
063c1244 lea       0x63D`00E8,%rcx
063c124b mov       %rcx,0x10(%rax)
063c124f movq      $0,0x18(%rax)
063c1257 lea       0x63D`00E8,%rcx
063c125e mov       %rcx,0x20(%rax)
063c1262 movq      $0,0x28(%rax)
063c126a jmp       0x0000`0000`063C`11A9
063c126f mov       0xD0(%rsp),%rcx
063c1277 mov       %rcx,0x68(%rsp)
063c127c mov       0xD8(%rsp),%rax
063c1284 mov       %rax,0x70(%rsp)
063c1289 mov       %rcx,0x110(%rsp)
063c1291 mov       %rax,0x118(%rsp)
063c1299 mov       0xE0(%rsp),%rcx
063c12a1 mov       %rcx,0x78(%rsp)
063c12a6 mov       0xE8(%rsp),%rdx
063c12ae mov       %rdx,0x80(%rsp)
063c12b6 mov       %rcx,0x120(%rsp)
063c12be mov       %rdx,0x128(%rsp)
063c12c6 call      0x0000`0000`063C`0C70
063c12cb mov       %rax,0x88(%rsp)
063c12d3 mov       %rdx,0x90(%rsp)
063c12db mov       0x80(%rsp),%rdx
063c12e3 mov       0x78(%rsp),%rcx
063c12e8 mov       0x90(%rsp),%rax
063c12f0 mov       0x88(%rsp),%r8
063c12f8 mov       %r8,0x130(%rsp)
063c1300 mov       %rax,0x138(%rsp)
063c1308 call      0x0000`0000`063C`0180
063c130d mov       %rax,0x60(%rsp)
063c1312 mov       0x88(%rsp),%rdx
063c131a mov       0x60(%rsp),%rcx
063c131f call      0x0000`0000`063B`A8A0
063c1324 mov       %rax,0x50(%rsp)
063c1329 mov       %rdx,0x58(%rsp)
063c132e mov       0x80(%rsp),%rdx
063c1336 mov       0x78(%rsp),%rcx
063c133b call      0x0000`0000`063C`0180
063c1340 mov       %rax,0x48(%rsp)
063c1345 mov       0x90(%rsp),%rcx
063c134d mov       0x80(%rsp),%rax
063c1355 sub       %rcx,%rax
063c1358 mov       %rax,0x40(%rsp)
063c135d setb      %al
063c1360 test      $1,%al
063c1362 jne       0x0000`0000`063C`13A8
063c1364 mov       0x40(%rsp),%rcx
063c1369 mov       0x48(%rsp),%rax
063c136e mov       %rax,0x140(%rsp)
063c1376 mov       %rcx,0x148(%rsp)
063c137e mov       %rax,0x150(%rsp)
063c1386 mov       %rcx,0x158(%rsp)
063c138e add       %rcx,%rax
063c1391 mov       %rax,0x160(%rsp)
063c1399 mov       0x160(%rsp),%rax
063c13a1 mov       %rax,0x38(%rsp)
063c13a6 jmp       0x0000`0000`063C`13C2
063c13a8 lea       0x63C`FF40,%rcx
063c13af lea       0x63D`0100,%r8
063c13b6 mov       $0x21,%edx
063c13bb call      0x0000`0000`063B`2030
063c13c0 ud2
063c13c2 mov       0x90(%rsp),%rdx
063c13ca mov       0x38(%rsp),%rcx
063c13cf call      0x0000`0000`063B`A940
063c13d4 mov       %rax,0x28(%rsp)
063c13d9 mov       %rdx,0x30(%rsp)
063c13de mov       0xB8(%rsp),%rax
063c13e6 mov       0x30(%rsp),%rcx
063c13eb mov       0x28(%rsp),%rdx
063c13f0 mov       0x58(%rsp),%r8
063c13f5 mov       0x50(%rsp),%r9
063c13fa mov       0x70(%rsp),%r10
063c13ff mov       0x68(%rsp),%r11
063c1404 mov       %r11,(%rax)
063c1407 mov       %r10,8(%rax)
063c140b mov       %r9,0x10(%rax)
063c140f mov       %r8,0x18(%rax)
063c1413 mov       %rdx,0x20(%rax)
063c1417 mov       %rcx,0x28(%rax)
063c141b jmp       0x0000`0000`063C`11A9

core::unicode::unicode_data::decode_prefix_sum:
063c1420 push      %rax
063c1421 mov       %ecx,%eax
063c1423 mov       %eax,4(%rsp)
063c1427 and       $0x1F`FFFF,%eax
063c142c pop       %rcx
063c142d ret

core::unicode::unicode_data::decode_length:
063c1430 push      %rax
063c1431 mov       %ecx,4(%rsp)
063c1435 shr       $0x15,%ecx
063c1438 mov       %ecx,(%rsp)
063c143b mov       (%rsp),%eax
063c143e mov       %eax,%eax
063c1440 pop       %rcx
063c1441 ret

core::unicode::unicode_data::skip_search::closure$0<32,707>:
063c1450 sub       $0x48,%rsp
063c1454 mov       %rdx,0x28(%rsp)
063c1459 mov       %rcx,%rax
063c145c mov       0x28(%rsp),%rcx
063c1461 mov       %rax,0x38(%rsp)
063c1466 mov       %rcx,0x40(%rsp)
063c146b mov       $0xB,%edx
063c1470 call      0x0000`0000`063B`B950
063c1475 mov       %eax,0x34(%rsp)
063c1479 mov       0x34(%rsp),%eax
063c147d add       $0x48,%rsp
063c1481 ret

core::unicode::unicode_data::skip_search::closure$1<32,707>:
063c1490 sub       $0x48,%rsp
063c1494 mov       %rdx,0x28(%rsp)
063c1499 mov       %rcx,0x30(%rsp)
063c149e mov       %rcx,0x38(%rsp)
063c14a3 mov       %rdx,0x40(%rsp)
063c14a8 cmp       $0x20,%rdx
063c14ac setb      %al
063c14af test      $1,%al
063c14b1 jne       0x0000`0000`063C`14B5
063c14b3 jmp       0x0000`0000`063C`14CD
063c14b5 mov       0x30(%rsp),%rax
063c14ba mov       0x28(%rsp),%rcx
063c14bf mov       (%rax,%rcx,4),%ecx
063c14c2 call      0x0000`0000`063C`1420
063c14c7 mov       %eax,0x24(%rsp)
063c14cb jmp       0x0000`0000`063C`14E5
063c14cd mov       0x28(%rsp),%rcx
063c14d2 lea       0x63D`01A0,%r8
063c14d9 mov       $0x20,%edx
063c14de call      0x0000`0000`063B`2090
063c14e3 ud2
063c14e5 mov       0x24(%rsp),%eax
063c14e9 add       $0x48,%rsp
063c14ed ret

core::slice::impl$0::iter<u16>:
063c14f0 sub       $0x48,%rsp
063c14f4 mov       %rcx,0x38(%rsp)
063c14f9 mov       %rdx,0x40(%rsp)
063c14fe call      0x0000`0000`063C`B040
063c1503 mov       %rax,0x28(%rsp)
063c1508 mov       %rdx,0x30(%rsp)
063c150d mov       0x30(%rsp),%rdx
063c1512 mov       0x28(%rsp),%rax
063c1517 add       $0x48,%rsp
063c151b ret

core::slice::impl$0::as_ptr<u16>:
063c1520 sub       $0x10,%rsp
063c1524 mov       %rcx,%rax
063c1527 mov       %rax,(%rsp)
063c152b mov       %rdx,8(%rsp)
063c1530 add       $0x10,%rsp
063c1534 ret

core::str::iter::impl$70::next<char>:
063c1540 sub       $0x38,%rsp
063c1544 mov       %rcx,0x30(%rsp)
063c1549 call      0x0000`0000`063C`15B0
063c154e mov       %rax,0x20(%rsp)
063c1553 mov       %rdx,0x28(%rsp)
063c1558 mov       0x28(%rsp),%rdx
063c155d mov       0x20(%rsp),%rax
063c1562 add       $0x38,%rsp
063c1566 ret

core::ptr::metadata::from_raw_parts<slice$<u16> >:
063c1570 sub       $0x30,%rsp
063c1574 mov       %rcx,0x20(%rsp)
063c1579 mov       %rdx,0x28(%rsp)
063c157e mov       %rcx,0x10(%rsp)
063c1583 mov       %rdx,0x18(%rsp)
063c1588 mov       0x10(%rsp),%rcx
063c158d mov       0x18(%rsp),%rax
063c1592 mov       %rcx,(%rsp)
063c1596 mov       %rax,8(%rsp)
063c159b mov       (%rsp),%rax
063c159f mov       8(%rsp),%rdx
063c15a4 add       $0x30,%rsp
063c15a8 ret

core::str::iter::SplitInternal<char>::next<char>:
063c15b0 sub       $0xC8,%rsp
063c15b7 mov       %rcx,0x50(%rsp)
063c15bc mov       %rcx,0x90(%rsp)
063c15c4 testb     $1,0x41(%rcx)
063c15c8 jne       0x0000`0000`063C`15F4
063c15ca mov       0x50(%rsp),%rcx
063c15cf add       $0x10,%rcx
063c15d3 call      0x0000`0000`063B`FC70
063c15d8 mov       %rax,0x40(%rsp)
063c15dd mov       %rdx,0x48(%rsp)
063c15e2 mov       %rax,0x98(%rsp)
063c15ea mov       %rdx,0xA0(%rsp)
063c15f2 jmp       0x0000`0000`063C`160F
063c15f4 movq      $0,0x58(%rsp)
063c15fd mov       0x58(%rsp),%rax
063c1602 mov       0x60(%rsp),%rdx
063c1607 add       $0xC8,%rsp
063c160e ret
063c160f mov       0x50(%rsp),%rdx
063c1614 add       $0x10,%rdx
063c1618 lea       0x68(%rsp),%rcx
063c161d call      0x0000`0000`063B`F7C0
063c1622 mov       0x68(%rsp),%rax
063c1627 test      %rax,%rax
063c162a je        0x0000`0000`063C`1632
063c162c jmp       0x0000`0000`063C`162E
063c162e jmp       0x0000`0000`063C`1648
063c1630 ud2
063c1632 mov       0x50(%rsp),%rcx
063c1637 call      0x0000`0000`063C`16E0
063c163c mov       %rdx,0x60(%rsp)
063c1641 mov       %rax,0x58(%rsp)
063c1646 jmp       0x0000`0000`063C`15FD
063c1648 mov       0x48(%rsp),%rdx
063c164d mov       0x40(%rsp),%rcx
063c1652 mov       0x50(%rsp),%r8
063c1657 mov       0x70(%rsp),%rax
063c165c mov       %rax,0xA8(%rsp)
063c1664 mov       0x78(%rsp),%r9
063c1669 mov       %r9,0x28(%rsp)
063c166e mov       %r9,0xB0(%rsp)
063c1676 mov       (%r8),%r8
063c1679 mov       %r8,0x80(%rsp)
063c1681 mov       %rax,0x88(%rsp)
063c1689 mov       0x80(%rsp),%r8
063c1691 mov       0x88(%rsp),%r9
063c1699 call      0x0000`0000`063B`E940
063c169e mov       %rax,0x30(%rsp)
063c16a3 mov       %rdx,0x38(%rsp)
063c16a8 mov       %rax,0xB8(%rsp)
063c16b0 mov       %rdx,0xC0(%rsp)
063c16b8 mov       0x38(%rsp),%rax
063c16bd mov       0x30(%rsp),%rcx
063c16c2 mov       0x50(%rsp),%rdx
063c16c7 mov       0x28(%rsp),%r8
063c16cc mov       %r8,(%rdx)
063c16cf mov       %rcx,0x58(%rsp)
063c16d4 mov       %rax,0x60(%rsp)
063c16d9 jmp       0x0000`0000`063C`15FD

core::str::iter::SplitInternal<char>::get_end<char>:
063c16e0 sub       $0x98,%rsp
063c16e7 mov       %rcx,0x50(%rsp)
063c16ec mov       %rcx,0x80(%rsp)
063c16f4 mov       0x41(%rcx),%al
063c16f7 xor       $0xFF,%al
063c16f9 test      $1,%al
063c16fb jne       0x0000`0000`063C`1704
063c16fd movb      $0,0x6E(%rsp)
063c1702 jmp       0x0000`0000`063C`1768
063c1704 mov       0x50(%rsp),%rax
063c1709 testb     $1,0x40(%rax)
063c170d jne       0x0000`0000`063C`1729
063c170f mov       0x50(%rsp),%rcx
063c1714 mov       8(%rcx),%rax
063c1718 sub       (%rcx),%rax
063c171b mov       %rax,0x48(%rsp)
063c1720 setb      %al
063c1723 test      $1,%al
063c1725 jne       0x0000`0000`063C`174E
063c1727 jmp       0x0000`0000`063C`173A
063c1729 movb      $1,0x6F(%rsp)
063c172e mov       0x6F(%rsp),%al
063c1732 and       $1,%al
063c1734 mov       %al,0x6E(%rsp)
063c1738 jmp       0x0000`0000`063C`1768
063c173a mov       0x48(%rsp),%rax
063c173f cmp       $0,%rax
063c1743 seta      %al
063c1746 and       $1,%al
063c1748 mov       %al,0x6F(%rsp)
063c174c jmp       0x0000`0000`063C`172E
063c174e lea       0x63D`0250,%rcx
063c1755 lea       0x63D`0230,%r8
063c175c mov       $0x21,%edx
063c1761 call      0x0000`0000`063B`2030
063c1766 ud2
063c1768 testb     $1,0x6E(%rsp)
063c176d jne       0x0000`0000`063C`177A
063c176f movq      $0,0x58(%rsp)
063c1778 jmp       0x0000`0000`063C`17F3
063c177a mov       0x50(%rsp),%rcx
063c177f movb      $1,0x41(%rcx)
063c1783 add       $0x10,%rcx
063c1787 call      0x0000`0000`063B`FC70
063c178c mov       %rax,0x38(%rsp)
063c1791 mov       %rdx,0x40(%rsp)
063c1796 mov       0x40(%rsp),%rdx
063c179b mov       0x38(%rsp),%rcx
063c17a0 mov       0x50(%rsp),%rax
063c17a5 mov       (%rax),%r8
063c17a8 mov       8(%rax),%rax
063c17ac mov       %r8,0x70(%rsp)
063c17b1 mov       %rax,0x78(%rsp)
063c17b6 mov       0x70(%rsp),%r8
063c17bb mov       0x78(%rsp),%r9
063c17c0 call      0x0000`0000`063B`E940
063c17c5 mov       %rax,0x28(%rsp)
063c17ca mov       %rdx,0x30(%rsp)
063c17cf mov       %rax,0x88(%rsp)
063c17d7 mov       %rdx,0x90(%rsp)
063c17df mov       0x30(%rsp),%rax
063c17e4 mov       0x28(%rsp),%rcx
063c17e9 mov       %rcx,0x58(%rsp)
063c17ee mov       %rax,0x60(%rsp)
063c17f3 mov       0x58(%rsp),%rax
063c17f8 mov       0x60(%rsp),%rdx
063c17fd add       $0x98,%rsp
063c1804 ret

core::char::methods::encode_utf8_raw:
063c1810 sub       $0x1F8,%rsp
063c1817 mov       %r8,0xF0(%rsp)
063c181f mov       %rdx,0xF8(%rsp)
063c1827 mov       %ecx,0x104(%rsp)
063c182e mov       %rdx,0x198(%rsp)
063c1836 mov       %r8,0x1A0(%rsp)
063c183e mov       0x104(%rsp),%ecx
063c1845 call      0x0000`0000`063C`1D30
063c184a mov       %rax,0x108(%rsp)
063c1852 mov       0xF0(%rsp),%rdx
063c185a mov       0xF8(%rsp),%rcx
063c1862 mov       0x108(%rsp),%rax
063c186a mov       %rax,0xD8(%rsp)
063c1872 lea       0x63D`02F0,%r8
063c1879 call      0x0000`0000`063B`A2B0
063c187e mov       %rax,0xE0(%rsp)
063c1886 mov       %rdx,0xE8(%rsp)
063c188e mov       0xE8(%rsp),%rax
063c1896 mov       0xE0(%rsp),%rcx
063c189e mov       0xD8(%rsp),%rdx
063c18a6 mov       %rdx,0x110(%rsp)
063c18ae mov       %rcx,0x118(%rsp)
063c18b6 mov       %rax,0x120(%rsp)
063c18be mov       0x110(%rsp),%rax
063c18c6 add       $0xFFFF`FFFF`FFFF`FFFF,%rax
063c18ca mov       %rax,0xD0(%rsp)
063c18d2 sub       $3,%rax
063c18d6 ja        0x0000`0000`063C`18F0
063c18d8 mov       0xD0(%rsp),%rax
063c18e0 lea       0x63C`1CA4,%rcx
063c18e7 movslq    (%rcx,%rax,4),%rax
063c18eb add       %rcx,%rax
063c18ee jmp       *%rax
063c18f0 lea       0x108(%rsp),%rcx
063c18f8 call      0x0000`0000`063B`6510
063c18fd mov       %rax,0xC0(%rsp)
063c1905 mov       %rdx,0xC8(%rsp)
063c190d jmp       0x0000`0000`063C`1BCE
063c1912 cmpq      $1,0x120(%rsp)
063c191b jae       0x0000`0000`063C`1B98
063c1921 jmp       0x0000`0000`063C`18F0
063c1923 cmpq      $2,0x120(%rsp)
063c192c jae       0x0000`0000`063C`1B32
063c1932 jmp       0x0000`0000`063C`18F0
063c1934 cmpq      $3,0x120(%rsp)
063c193d jae       0x0000`0000`063C`1A94
063c1943 jmp       0x0000`0000`063C`18F0
063c1945 cmpq      $4,0x120(%rsp)
063c194e jb        0x0000`0000`063C`18F0
063c1950 mov       0x118(%rsp),%rax
063c1958 mov       %rax,0x98(%rsp)
063c1960 mov       %rax,0x1A8(%rsp)
063c1968 mov       0x118(%rsp),%rax
063c1970 add       $1,%rax
063c1974 mov       %rax,0xA0(%rsp)
063c197c mov       %rax,0x1B0(%rsp)
063c1984 mov       0x118(%rsp),%rax
063c198c add       $2,%rax
063c1990 mov       %rax,0xA8(%rsp)
063c1998 mov       %rax,0x1B8(%rsp)
063c19a0 mov       0x118(%rsp),%rax
063c19a8 add       $3,%rax
063c19ac mov       %rax,0xB0(%rsp)
063c19b4 mov       %rax,0x1C0(%rsp)
063c19bc mov       0x104(%rsp),%eax
063c19c3 shr       $0x12,%eax
063c19c6 mov       %eax,0xBC(%rsp)
063c19cd mov       0x98(%rsp),%rax
063c19d5 mov       0xBC(%rsp),%ecx
063c19dc and       $7,%ecx
063c19df or        $0xF0,%cl
063c19e2 mov       %cl,(%rax)
063c19e4 mov       0x104(%rsp),%eax
063c19eb shr       $0xC,%eax
063c19ee mov       %eax,0x94(%rsp)
063c19f5 mov       0xA0(%rsp),%rax
063c19fd mov       0x94(%rsp),%ecx
063c1a04 and       $0x3F,%ecx
063c1a07 or        $0x80,%cl
063c1a0a mov       %cl,(%rax)
063c1a0c mov       0x104(%rsp),%eax
063c1a13 shr       $6,%eax
063c1a16 mov       %eax,0x90(%rsp)
063c1a1d mov       0xB0(%rsp),%rax
063c1a25 mov       0xA8(%rsp),%rcx
063c1a2d mov       0x90(%rsp),%edx
063c1a34 and       $0x3F,%edx
063c1a37 or        $0x80,%dl
063c1a3a mov       %dl,(%rcx)
063c1a3c mov       0x104(%rsp),%ecx
063c1a43 and       $0x3F,%ecx
063c1a46 or        $0x80,%cl
063c1a49 mov       %cl,(%rax)
063c1a4b mov       0xF0(%rsp),%rdx
063c1a53 mov       0xF8(%rsp),%rcx
063c1a5b mov       0x108(%rsp),%rax
063c1a63 mov       %rax,0x190(%rsp)
063c1a6b mov       0x190(%rsp),%r8
063c1a73 lea       0x63D`0308,%r9
063c1a7a call      0x0000`0000`063B`A260
063c1a7f mov       %rax,0x80(%rsp)
063c1a87 mov       %rdx,0x88(%rsp)
063c1a8f jmp       0x0000`0000`063C`1BB6
063c1a94 mov       0x118(%rsp),%rax
063c1a9c mov       %rax,0x60(%rsp)
063c1aa1 mov       %rax,0x1C8(%rsp)
063c1aa9 mov       0x118(%rsp),%rax
063c1ab1 add       $1,%rax
063c1ab5 mov       %rax,0x68(%rsp)
063c1aba mov       %rax,0x1D0(%rsp)
063c1ac2 mov       0x118(%rsp),%rax
063c1aca add       $2,%rax
063c1ace mov       %rax,0x70(%rsp)
063c1ad3 mov       %rax,0x1D8(%rsp)
063c1adb mov       0x104(%rsp),%eax
063c1ae2 shr       $0xC,%eax
063c1ae5 mov       %eax,0x7C(%rsp)
063c1ae9 mov       0x60(%rsp),%rax
063c1aee mov       0x7C(%rsp),%ecx
063c1af2 and       $0xF,%ecx
063c1af5 or        $0xE0,%cl
063c1af8 mov       %cl,(%rax)
063c1afa mov       0x104(%rsp),%eax
063c1b01 shr       $6,%eax
063c1b04 mov       %eax,0x5C(%rsp)
063c1b08 mov       0x70(%rsp),%rax
063c1b0d mov       0x68(%rsp),%rcx
063c1b12 mov       0x5C(%rsp),%edx
063c1b16 and       $0x3F,%edx
063c1b19 or        $0x80,%dl
063c1b1c mov       %dl,(%rcx)
063c1b1e mov       0x104(%rsp),%ecx
063c1b25 and       $0x3F,%ecx
063c1b28 or        $0x80,%cl
063c1b2b mov       %cl,(%rax)
063c1b2d jmp       0x0000`0000`063C`1A4B
063c1b32 mov       0x118(%rsp),%rax
063c1b3a mov       %rax,0x48(%rsp)
063c1b3f mov       %rax,0x1E0(%rsp)
063c1b47 mov       0x118(%rsp),%rax
063c1b4f add       $1,%rax
063c1b53 mov       %rax,0x50(%rsp)
063c1b58 mov       %rax,0x1E8(%rsp)
063c1b60 mov       0x104(%rsp),%eax
063c1b67 shr       $6,%eax
063c1b6a mov       %eax,0x58(%rsp)
063c1b6e mov       0x50(%rsp),%rax
063c1b73 mov       0x48(%rsp),%rcx
063c1b78 mov       0x58(%rsp),%edx
063c1b7c and       $0x1F,%edx
063c1b7f or        $0xC0,%dl
063c1b82 mov       %dl,(%rcx)
063c1b84 mov       0x104(%rsp),%ecx
063c1b8b and       $0x3F,%ecx
063c1b8e or        $0x80,%cl
063c1b91 mov       %cl,(%rax)
063c1b93 jmp       0x0000`0000`063C`1A4B
063c1b98 mov       0x118(%rsp),%rax
063c1ba0 mov       %rax,0x1F0(%rsp)
063c1ba8 mov       0x104(%rsp),%ecx
063c1baf mov       %cl,(%rax)
063c1bb1 jmp       0x0000`0000`063C`1A4B
063c1bb6 mov       0x88(%rsp),%rdx
063c1bbe mov       0x80(%rsp),%rax
063c1bc6 add       $0x1F8,%rsp
063c1bcd ret
063c1bce lea       0x104(%rsp),%rcx
063c1bd6 call      0x0000`0000`063B`66C0
063c1bdb mov       %rax,0x38(%rsp)
063c1be0 mov       %rdx,0x40(%rsp)
063c1be5 mov       0xF0(%rsp),%rax
063c1bed mov       %rax,0x188(%rsp)
063c1bf5 lea       0x188(%rsp),%rcx
063c1bfd call      0x0000`0000`063B`6510
063c1c02 mov       %rax,0x28(%rsp)
063c1c07 mov       %rdx,0x30(%rsp)
063c1c0c mov       0x30(%rsp),%rax
063c1c11 mov       0x28(%rsp),%rcx
063c1c16 mov       0x40(%rsp),%rdx
063c1c1b mov       0x38(%rsp),%r8
063c1c20 mov       0xC8(%rsp),%r9
063c1c28 mov       0xC0(%rsp),%r10
063c1c30 mov       %r10,0x158(%rsp)
063c1c38 mov       %r9,0x160(%rsp)
063c1c40 mov       %r8,0x168(%rsp)
063c1c48 mov       %rdx,0x170(%rsp)
063c1c50 mov       %rcx,0x178(%rsp)
063c1c58 mov       %rax,0x180(%rsp)
063c1c60 lea       0x158(%rsp),%r9
063c1c68 lea       0x128(%rsp),%rcx
063c1c70 lea       0x63D`0360,%rdx
063c1c77 mov       $3,%r8d
063c1c7d movq      $3,0x20(%rsp)
063c1c86 call      0x0000`0000`063B`8A80
063c1c8b lea       0x63D`0390,%rdx
063c1c92 lea       0x128(%rsp),%rcx
063c1c9a call      0x0000`0000`063B`2140
063c1c9f ud2

core::char::methods::impl$0::encode_utf8:
063c1cc0 sub       $0x58,%rsp
063c1cc4 mov       %ecx,0x44(%rsp)
063c1cc8 mov       %rdx,0x48(%rsp)
063c1ccd mov       %r8,0x50(%rsp)
063c1cd2 call      0x0000`0000`063C`1810
063c1cd7 mov       %rax,0x30(%rsp)
063c1cdc mov       %rdx,0x38(%rsp)
063c1ce1 mov       0x38(%rsp),%rdx
063c1ce6 mov       0x30(%rsp),%rcx
063c1ceb call      0x0000`0000`063B`E1C0
063c1cf0 mov       %rax,0x20(%rsp)
063c1cf5 mov       %rdx,0x28(%rsp)
063c1cfa mov       0x28(%rsp),%rdx
063c1cff mov       0x20(%rsp),%rax
063c1d04 add       $0x58,%rsp
063c1d08 ret

core::char::methods::impl$0::from_u32:
063c1d10 sub       $0x28,%rsp
063c1d14 mov       %ecx,0x24(%rsp)
063c1d18 call      0x0000`0000`063B`E290
063c1d1d mov       %eax,0x20(%rsp)
063c1d21 mov       0x20(%rsp),%eax
063c1d25 add       $0x28,%rsp
063c1d29 ret

core::char::methods::len_utf8:
063c1d30 sub       $0x18,%rsp
063c1d34 mov       %ecx,4(%rsp)
063c1d38 mov       %ecx,0x14(%rsp)
063c1d3c cmp       $0x80,%ecx
063c1d42 jb        0x0000`0000`063C`1D51
063c1d44 mov       4(%rsp),%eax
063c1d48 cmp       $0x800,%eax
063c1d4d jb        0x0000`0000`063C`1D71
063c1d4f jmp       0x0000`0000`063C`1D64
063c1d51 movq      $1,8(%rsp)
063c1d5a mov       8(%rsp),%rax
063c1d5f add       $0x18,%rsp
063c1d63 ret
063c1d64 mov       4(%rsp),%eax
063c1d68 cmp       $0x1`0000,%eax
063c1d6d jb        0x0000`0000`063C`1D87
063c1d6f jmp       0x0000`0000`063C`1D7C
063c1d71 movq      $2,8(%rsp)
063c1d7a jmp       0x0000`0000`063C`1D5A
063c1d7c movq      $4,8(%rsp)
063c1d85 jmp       0x0000`0000`063C`1D5A
063c1d87 movq      $3,8(%rsp)
063c1d90 jmp       0x0000`0000`063C`1D5A

core::iter::traits::iterator::Iterator::map<core::str::iter::SplitTerminator<char>,str,core::str::LinesAnyMap>:
063c1da0 sub       $0x88,%rsp
063c1da7 mov       %rcx,0x30(%rsp)
063c1dac mov       %rcx,0x28(%rsp)
063c1db1 lea       0x38(%rsp),%rcx
063c1db6 mov       $0x48,%r8d
063c1dbc call      0x0000`0000`063B`BDE0
063c1dc1 mov       0x30(%rsp),%rcx
063c1dc6 lea       0x38(%rsp),%rdx
063c1dcb call      0x0000`0000`063B`E310
063c1dd0 mov       0x28(%rsp),%rax
063c1dd5 add       $0x88,%rsp
063c1ddc ret

core::slice::memchr::memchr:
063c1de0 sub       $0x78,%rsp
063c1de4 mov       %r8,0x28(%rsp)
063c1de9 mov       %rdx,0x30(%rsp)
063c1dee mov       %cl,0x3F(%rsp)
063c1df2 mov       %rdx,0x68(%rsp)
063c1df7 mov       %r8,0x70(%rsp)
063c1dfc cmp       $0x10,%r8
063c1e00 jb        0x0000`0000`063C`1E21
063c1e02 mov       0x28(%rsp),%r8
063c1e07 mov       0x30(%rsp),%rdx
063c1e0c mov       0x3F(%rsp),%cl
063c1e10 call      0x0000`0000`063C`8350
063c1e15 mov       %rdx,0x48(%rsp)
063c1e1a mov       %rax,0x40(%rsp)
063c1e1f jmp       0x0000`0000`063C`1E5D
063c1e21 mov       0x28(%rsp),%rdx
063c1e26 mov       0x30(%rsp),%rcx
063c1e2b call      0x0000`0000`063C`01E0
063c1e30 mov       %rdx,0x58(%rsp)
063c1e35 mov       %rax,0x50(%rsp)
063c1e3a lea       0x3F(%rsp),%rax
063c1e3f mov       %rax,0x60(%rsp)
063c1e44 mov       0x60(%rsp),%rdx
063c1e49 lea       0x50(%rsp),%rcx
063c1e4e call      0x0000`0000`063C`7590
063c1e53 mov       %rdx,0x48(%rsp)
063c1e58 mov       %rax,0x40(%rsp)
063c1e5d mov       0x40(%rsp),%rax
063c1e62 mov       0x48(%rsp),%rdx
063c1e67 add       $0x78,%rsp
063c1e6b ret

enum$<core::option::Option<enum$<log::MaybeStaticStr> >, 0, 1, Some>::map<enum$<log::MaybeStaticStr>,str,log::impl$19::file::closure_env$0>:
063c1e70 sub       $0xA8,%rsp
063c1e77 mov       %rcx,0x38(%rsp)
063c1e7c movb      $0,0x9F(%rsp)
063c1e84 movb      $1,0x9F(%rsp)
063c1e8c mov       (%rcx),%rax
063c1e8f add       $0xFFFF`FFFF`FFFF`FFFE,%rax
063c1e93 setne     %al
063c1e96 movzbl    %al,%eax
063c1e99 je        0x0000`0000`063C`1EA1
063c1e9b jmp       0x0000`0000`063C`1E9D
063c1e9d jmp       0x0000`0000`063C`1EAF
063c1e9f ud2
063c1ea1 movq      $0,0x40(%rsp)
063c1eaa jmp       0x0000`0000`063C`1F4C
063c1eaf mov       0x38(%rsp),%rax
063c1eb4 mov       (%rax),%rcx
063c1eb7 mov       %rcx,0x50(%rsp)
063c1ebc mov       8(%rax),%rcx
063c1ec0 mov       %rcx,0x58(%rsp)
063c1ec5 mov       0x10(%rax),%rax
063c1ec9 mov       %rax,0x60(%rsp)
063c1ece movb      $0,0x9F(%rsp)
063c1ed6 mov       0x50(%rsp),%rax
063c1edb mov       %rax,0x80(%rsp)
063c1ee3 mov       0x58(%rsp),%rax
063c1ee8 mov       %rax,0x88(%rsp)
063c1ef0 mov       0x60(%rsp),%rax
063c1ef5 mov       %rax,0x90(%rsp)
063c1efd mov       0x80(%rsp),%rax
063c1f05 mov       %rax,0x68(%rsp)
063c1f0a mov       0x88(%rsp),%rax
063c1f12 mov       %rax,0x70(%rsp)
063c1f17 mov       0x90(%rsp),%rax
063c1f1f mov       %rax,0x78(%rsp)
063c1f24 lea       0x68(%rsp),%rcx
063c1f29 call      0x0000`0000`063B`E4E0
063c1f2e mov       %rax,0x28(%rsp)
063c1f33 mov       %rdx,0x30(%rsp)
063c1f38 mov       0x30(%rsp),%rax
063c1f3d mov       0x28(%rsp),%rcx
063c1f42 mov       %rcx,0x40(%rsp)
063c1f47 mov       %rax,0x48(%rsp)
063c1f4c testb     $1,0x9F(%rsp)
063c1f54 jne       0x0000`0000`063C`1F68
063c1f56 mov       0x40(%rsp),%rax
063c1f5b mov       0x48(%rsp),%rdx
063c1f60 add       $0xA8,%rsp
063c1f67 ret
063c1f68 jmp       0x0000`0000`063C`1F56

enum$<core::option::Option<str>, 1, 18446744073709551615, Some>::map<str,str,ref_mut$<core::str::LinesAnyMap> >:
063c1f70 sub       $0x88,%rsp
063c1f77 mov       %r8,0x30(%rsp)
063c1f7c mov       %rcx,0x38(%rsp)
063c1f81 mov       %rdx,0x40(%rsp)
063c1f86 mov       %r8,0x70(%rsp)
063c1f8b movb      $0,0x6F(%rsp)
063c1f90 movb      $1,0x6F(%rsp)
063c1f95 mov       0x38(%rsp),%rax
063c1f9a test      %rax,%rax
063c1f9d setne     %al
063c1fa0 movzbl    %al,%eax
063c1fa3 je        0x0000`0000`063C`1FAB
063c1fa5 jmp       0x0000`0000`063C`1FA7
063c1fa7 jmp       0x0000`0000`063C`1FB6
063c1fa9 ud2
063c1fab movq      $0,0x48(%rsp)
063c1fb4 jmp       0x0000`0000`063C`200E
063c1fb6 mov       0x30(%rsp),%rcx
063c1fbb mov       0x38(%rsp),%rdx
063c1fc0 mov       0x40(%rsp),%rax
063c1fc5 mov       %rdx,0x78(%rsp)
063c1fca mov       %rax,0x80(%rsp)
063c1fd2 movb      $0,0x6F(%rsp)
063c1fd7 mov       %rdx,0x58(%rsp)
063c1fdc mov       %rax,0x60(%rsp)
063c1fe1 mov       0x58(%rsp),%rdx
063c1fe6 mov       0x60(%rsp),%r8
063c1feb call      0x0000`0000`063B`E550
063c1ff0 mov       %rax,0x20(%rsp)
063c1ff5 mov       %rdx,0x28(%rsp)
063c1ffa mov       0x28(%rsp),%rax
063c1fff mov       0x20(%rsp),%rcx
063c2004 mov       %rcx,0x48(%rsp)
063c2009 mov       %rax,0x50(%rsp)
063c200e testb     $1,0x6F(%rsp)
063c2013 jne       0x0000`0000`063C`2027
063c2015 mov       0x48(%rsp),%rax
063c201a mov       0x50(%rsp),%rdx
063c201f add       $0x88,%rsp
063c2026 ret
063c2027 jmp       0x0000`0000`063C`2015

enum$<core::option::Option<u32> >::map<u32,char,core::str::iter::impl$2::next_back::closure_env$0>:
063c2030 sub       $0x48,%rsp
063c2034 mov       %ecx,0x28(%rsp)
063c2038 mov       %edx,0x2C(%rsp)
063c203c movb      $0,0x3F(%rsp)
063c2041 movb      $1,0x3F(%rsp)
063c2046 mov       0x28(%rsp),%eax
063c204a test      %rax,%rax
063c204d je        0x0000`0000`063C`2055
063c204f jmp       0x0000`0000`063C`2051
063c2051 jmp       0x0000`0000`063C`205F
063c2053 ud2
063c2055 movl      $0x11`0000,0x34(%rsp)
063c205d jmp       0x0000`0000`063C`2085
063c205f mov       0x2C(%rsp),%eax
063c2063 mov       %eax,0x44(%rsp)
063c2067 movb      $0,0x3F(%rsp)
063c206c mov       %eax,0x38(%rsp)
063c2070 mov       0x38(%rsp),%ecx
063c2074 call      0x0000`0000`063C`2250
063c2079 mov       %eax,0x24(%rsp)
063c207d mov       0x24(%rsp),%eax
063c2081 mov       %eax,0x34(%rsp)
063c2085 testb     $1,0x3F(%rsp)
063c208a jne       0x0000`0000`063C`2095
063c208c mov       0x34(%rsp),%eax
063c2090 add       $0x48,%rsp
063c2094 ret
063c2095 jmp       0x0000`0000`063C`208C

enum$<core::option::Option<core::ptr::non_null::NonNull<uefi::proto::console::text::output::Output> >, 1, 18446744073709551615, Some>::is_some<core::ptr::non_null::NonNull<uefi::proto::console::text::output::Output> >:
063c20a0 sub       $0x10,%rsp
063c20a4 mov       %rcx,%rdx
063c20a7 mov       %rdx,8(%rsp)
063c20ac mov       $1,%eax
063c20b1 xor       %ecx,%ecx
063c20b3 cmpq      $0,(%rdx)
063c20b7 cmove     %rcx,%rax
063c20bb cmp       $1,%rax
063c20bf jne       0x0000`0000`063C`20C8
063c20c1 movb      $1,7(%rsp)
063c20c6 jmp       0x0000`0000`063C`20CD
063c20c8 movb      $0,7(%rsp)
063c20cd mov       7(%rsp),%al
063c20d1 and       $1,%al
063c20d3 movzbl    %al,%eax
063c20d6 add       $0x10,%rsp
063c20da ret

core::convert::impl$6::try_into<u32,char>:
063c20e0 sub       $0x28,%rsp
063c20e4 mov       %ecx,0x24(%rsp)
063c20e8 call      0x0000`0000`063B`E270
063c20ed mov       %eax,0x20(%rsp)
063c20f1 mov       0x20(%rsp),%eax
063c20f5 add       $0x28,%rsp
063c20f9 ret

core::convert::impl$6::try_into<char,uefi::data_types::chars::Char16>:
063c2100 sub       $0x28,%rsp
063c2104 mov       %ecx,0x24(%rsp)
063c2108 call      0x0000`0000`063B`FC80
063c210d mov       %ax,0x20(%rsp)
063c2112 mov       %dx,0x22(%rsp)
063c2117 mov       0x22(%rsp),%dx
063c211c mov       0x20(%rsp),%ax
063c2121 add       $0x28,%rsp
063c2125 ret

core::convert::impl$6::try_into<u16,uefi::data_types::chars::Char16>:
063c2130 sub       $0x28,%rsp
063c2134 mov       %cx,0x26(%rsp)
063c2139 call      0x0000`0000`063B`FCD0
063c213e mov       %ax,0x22(%rsp)
063c2143 mov       %dx,0x24(%rsp)
063c2148 mov       0x24(%rsp),%dx
063c214d mov       0x22(%rsp),%ax
063c2152 add       $0x28,%rsp
063c2156 ret

core::iter::traits::collect::impl$0::into_iter<core::str::iter::Lines>:
063c2160 sub       $0x28,%rsp
063c2164 mov       %rcx,%rax
063c2167 mov       %rax,0x20(%rsp)
063c216c mov       $0x48,%r8d
063c2172 call      0x0000`0000`063B`BDE0
063c2177 mov       0x20(%rsp),%rax
063c217c add       $0x28,%rsp
063c2180 ret

core::option::impl$35::branch<ref$<u16> >:
063c2190 sub       $0x18,%rsp
063c2194 mov       %rcx,(%rsp)
063c2198 mov       (%rsp),%rax
063c219c test      %rax,%rax
063c219f setne     %al
063c21a2 movzbl    %al,%eax
063c21a5 je        0x0000`0000`063C`21AD
063c21a7 jmp       0x0000`0000`063C`21A9
063c21a9 jmp       0x0000`0000`063C`21B8
063c21ab ud2
063c21ad movq      $0,8(%rsp)
063c21b6 jmp       0x0000`0000`063C`21C6
063c21b8 mov       (%rsp),%rax
063c21bc mov       %rax,0x10(%rsp)
063c21c1 mov       %rax,8(%rsp)
063c21c6 mov       8(%rsp),%rax
063c21cb add       $0x18,%rsp
063c21cf ret

core::str::iter::impl$30::next:
063c21d0 sub       $0x38,%rsp
063c21d4 mov       %rcx,0x30(%rsp)
063c21d9 call      0x0000`0000`063B`DC60
063c21de mov       %rax,0x20(%rsp)
063c21e3 mov       %rdx,0x28(%rsp)
063c21e8 mov       0x28(%rsp),%rdx
063c21ed mov       0x20(%rsp),%rax
063c21f2 add       $0x38,%rsp
063c21f6 ret

core::option::impl$36::from_residual<tuple$<usize,ref$<u16> > >:
063c2200 sub       $0x18,%rsp
063c2204 movq      $0,8(%rsp)
063c220d mov       (%rsp),%rax
063c2211 mov       8(%rsp),%rdx
063c2216 add       $0x18,%rsp
063c221a ret

core::str::iter::impl$2::next_back:
063c2220 sub       $0x38,%rsp
063c2224 mov       %rcx,0x30(%rsp)
063c2229 call      0x0000`0000`063B`E6A0
063c222e mov       %eax,0x28(%rsp)
063c2232 mov       %edx,0x2C(%rsp)
063c2236 mov       0x2C(%rsp),%edx
063c223a mov       0x28(%rsp),%ecx
063c223e call      0x0000`0000`063C`2030
063c2243 mov       %eax,0x24(%rsp)
063c2247 mov       0x24(%rsp),%eax
063c224b add       $0x38,%rsp
063c224f ret

core::str::iter::impl$2::next_back::closure$0:
063c2250 sub       $0x38,%rsp
063c2254 mov       %ecx,0x34(%rsp)
063c2258 call      0x0000`0000`063B`E240
063c225d mov       %eax,0x2C(%rsp)
063c2261 mov       0x2C(%rsp),%eax
063c2265 add       $0x38,%rsp
063c2269 ret

core::intrinsics::is_aligned_and_not_null<u8>:
063c2270 sub       $0x38,%rsp
063c2274 mov       %rcx,0x20(%rsp)
063c2279 mov       %rcx,0x30(%rsp)
063c227e call      0x0000`0000`063C`4830
063c2283 mov       %al,0x2E(%rsp)
063c2287 mov       0x2E(%rsp),%al
063c228b xor       $0xFF,%al
063c228d test      $1,%al
063c228f jne       0x0000`0000`063C`2298
063c2291 movb      $0,0x2F(%rsp)
063c2296 jmp       0x0000`0000`063C`22DA
063c2298 mov       $1,%eax
063c229d cmp       $0,%rax
063c22a1 sete      %al
063c22a4 test      $1,%al
063c22a6 jne       0x0000`0000`063C`22C0
063c22a8 mov       0x20(%rsp),%rax
063c22ad and       $0,%rax
063c22b1 cmp       $0,%rax
063c22b5 sete      %al
063c22b8 and       $1,%al
063c22ba mov       %al,0x2F(%rsp)
063c22be jmp       0x0000`0000`063C`22DA
063c22c0 lea       0x63D`0490,%rcx
063c22c7 lea       0x63D`0470,%r8
063c22ce mov       $0x39,%edx
063c22d3 call      0x0000`0000`063B`2030
063c22d8 ud2
063c22da mov       0x2F(%rsp),%al
063c22de and       $1,%al
063c22e0 movzbl    %al,%eax
063c22e3 add       $0x38,%rsp
063c22e7 ret

core::intrinsics::is_aligned_and_not_null<array$<usize,4> >:
063c22f0 sub       $0x38,%rsp
063c22f4 mov       %rcx,0x20(%rsp)
063c22f9 mov       %rcx,0x30(%rsp)
063c22fe call      0x0000`0000`063C`4890
063c2303 mov       %al,0x2E(%rsp)
063c2307 mov       0x2E(%rsp),%al
063c230b xor       $0xFF,%al
063c230d test      $1,%al
063c230f jne       0x0000`0000`063C`2318
063c2311 movb      $0,0x2F(%rsp)
063c2316 jmp       0x0000`0000`063C`235A
063c2318 mov       $8,%eax
063c231d cmp       $0,%rax
063c2321 sete      %al
063c2324 test      $1,%al
063c2326 jne       0x0000`0000`063C`2340
063c2328 mov       0x20(%rsp),%rax
063c232d and       $7,%rax
063c2331 cmp       $0,%rax
063c2335 sete      %al
063c2338 and       $1,%al
063c233a mov       %al,0x2F(%rsp)
063c233e jmp       0x0000`0000`063C`235A
063c2340 lea       0x63D`0490,%rcx
063c2347 lea       0x63D`0470,%r8
063c234e mov       $0x39,%edx
063c2353 call      0x0000`0000`063B`2030
063c2358 ud2
063c235a mov       0x2F(%rsp),%al
063c235e and       $1,%al
063c2360 movzbl    %al,%eax
063c2363 add       $0x38,%rsp
063c2367 ret

core::intrinsics::is_aligned_and_not_null<usize>:
063c2370 sub       $0x38,%rsp
063c2374 mov       %rcx,0x20(%rsp)
063c2379 mov       %rcx,0x30(%rsp)
063c237e call      0x0000`0000`063C`4800
063c2383 mov       %al,0x2E(%rsp)
063c2387 mov       0x2E(%rsp),%al
063c238b xor       $0xFF,%al
063c238d test      $1,%al
063c238f jne       0x0000`0000`063C`2398
063c2391 movb      $0,0x2F(%rsp)
063c2396 jmp       0x0000`0000`063C`23DA
063c2398 mov       $8,%eax
063c239d cmp       $0,%rax
063c23a1 sete      %al
063c23a4 test      $1,%al
063c23a6 jne       0x0000`0000`063C`23C0
063c23a8 mov       0x20(%rsp),%rax
063c23ad and       $7,%rax
063c23b1 cmp       $0,%rax
063c23b5 sete      %al
063c23b8 and       $1,%al
063c23ba mov       %al,0x2F(%rsp)
063c23be jmp       0x0000`0000`063C`23DA
063c23c0 lea       0x63D`0490,%rcx
063c23c7 lea       0x63D`0470,%r8
063c23ce mov       $0x39,%edx
063c23d3 call      0x0000`0000`063B`2030
063c23d8 ud2
063c23da mov       0x2F(%rsp),%al
063c23de and       $1,%al
063c23e0 movzbl    %al,%eax
063c23e3 add       $0x38,%rsp
063c23e7 ret

core::intrinsics::is_nonoverlapping<u8>:
063c23f0 sub       $0x98,%rsp
063c23f7 mov       %r8,0x48(%rsp)
063c23fc mov       %rdx,0x50(%rsp)
063c2401 mov       %rcx,0x58(%rsp)
063c2406 mov       %rcx,0x68(%rsp)
063c240b mov       %rdx,0x70(%rsp)
063c2410 mov       %r8,0x78(%rsp)
063c2415 mov       %rcx,0x80(%rsp)
063c241d mov       %rdx,0x88(%rsp)
063c2425 mov       0x48(%rsp),%rdx
063c242a mov       $1,%ecx
063c242f call      0x0000`0000`063C`8A30
063c2434 mov       %rax,0x38(%rsp)
063c2439 mov       %rdx,0x40(%rsp)
063c243e mov       0x40(%rsp),%rdx
063c2443 mov       0x38(%rsp),%rcx
063c2448 lea       0x63D`04D0,%r8
063c244f call      0x0000`0000`063B`1790
063c2454 mov       %rax,0x30(%rsp)
063c2459 mov       %rax,0x90(%rsp)
063c2461 mov       0x58(%rsp),%rax
063c2466 mov       0x50(%rsp),%rcx
063c246b cmp       %rcx,%rax
063c246e ja        0x0000`0000`063C`248B
063c2470 mov       0x58(%rsp),%rcx
063c2475 mov       0x50(%rsp),%rax
063c247a sub       %rcx,%rax
063c247d mov       %rax,0x28(%rsp)
063c2482 setb      %al
063c2485 test      $1,%al
063c2487 jne       0x0000`0000`063C`24F0
063c2489 jmp       0x0000`0000`063C`24E4
063c248b mov       0x50(%rsp),%rcx
063c2490 mov       0x58(%rsp),%rax
063c2495 sub       %rcx,%rax
063c2498 mov       %rax,0x20(%rsp)
063c249d setb      %al
063c24a0 test      $1,%al
063c24a2 jne       0x0000`0000`063C`24B0
063c24a4 mov       0x20(%rsp),%rax
063c24a9 mov       %rax,0x60(%rsp)
063c24ae jmp       0x0000`0000`063C`24CA
063c24b0 lea       0x63D`03D0,%rcx
063c24b7 lea       0x63D`04E8,%r8
063c24be mov       $0x21,%edx
063c24c3 call      0x0000`0000`063B`2030
063c24c8 ud2
063c24ca mov       0x30(%rsp),%rax
063c24cf cmp       %rax,0x60(%rsp)
063c24d4 setae     %al
063c24d7 and       $1,%al
063c24d9 movzbl    %al,%eax
063c24dc add       $0x98,%rsp
063c24e3 ret
063c24e4 mov       0x28(%rsp),%rax
063c24e9 mov       %rax,0x60(%rsp)
063c24ee jmp       0x0000`0000`063C`24CA
063c24f0 lea       0x63D`03D0,%rcx
063c24f7 lea       0x63D`0500,%r8
063c24fe mov       $0x21,%edx
063c2503 call      0x0000`0000`063B`2030
063c2508 ud2

core::intrinsics::copy_nonoverlapping<u8>:
063c2510 sub       $0x68,%rsp
063c2514 mov       %r8,0x20(%rsp)
063c2519 mov       %rdx,0x28(%rsp)
063c251e mov       %rcx,0x30(%rsp)
063c2523 mov       %rcx,0x50(%rsp)
063c2528 mov       %rdx,0x58(%rsp)
063c252d mov       %r8,0x60(%rsp)
063c2532 mov       %rcx,0x38(%rsp)
063c2537 mov       %rdx,0x40(%rsp)
063c253c mov       %r8,0x48(%rsp)
063c2541 lea       0x38(%rsp),%rcx
063c2546 call      0x0000`0000`063C`2720
063c254b mov       0x30(%rsp),%rdx
063c2550 mov       0x28(%rsp),%rcx
063c2555 mov       0x20(%rsp),%r8
063c255a shl       $0,%r8
063c255e call      0x0000`0000`063B`BDE0
063c2563 add       $0x68,%rsp
063c2567 ret

core::intrinsics::copy_nonoverlapping::runtime_check<u8>:
063c2570 sub       $0x68,%rsp
063c2574 mov       %r8,0x30(%rsp)
063c2579 mov       %rdx,0x38(%rsp)
063c257e mov       %rcx,0x40(%rsp)
063c2583 mov       %rcx,0x50(%rsp)
063c2588 mov       %rdx,0x58(%rsp)
063c258d mov       %r8,0x60(%rsp)
063c2592 call      0x0000`0000`063C`2270
063c2597 mov       %al,0x4D(%rsp)
063c259b mov       0x4D(%rsp),%al
063c259f xor       $0xFF,%al
063c25a1 test      $1,%al
063c25a3 jne       0x0000`0000`063C`25B5
063c25a5 mov       0x38(%rsp),%rcx
063c25aa call      0x0000`0000`063C`2270
063c25af mov       %al,0x2F(%rsp)
063c25b3 jmp       0x0000`0000`063C`25C3
063c25b5 movb      $1,0x4F(%rsp)
063c25ba testb     $1,0x4F(%rsp)
063c25bf jne       0x0000`0000`063C`25EB
063c25c1 jmp       0x0000`0000`063C`25D1
063c25c3 mov       0x2F(%rsp),%al
063c25c7 xor       $0xFF,%al
063c25c9 and       $1,%al
063c25cb mov       %al,0x4F(%rsp)
063c25cf jmp       0x0000`0000`063C`25BA
063c25d1 mov       0x30(%rsp),%r8
063c25d6 mov       0x38(%rsp),%rdx
063c25db mov       0x40(%rsp),%rcx
063c25e0 call      0x0000`0000`063C`23F0
063c25e5 mov       %al,0x2E(%rsp)
063c25e9 jmp       0x0000`0000`063C`25F9
063c25eb movb      $1,0x4E(%rsp)
063c25f0 testb     $1,0x4E(%rsp)
063c25f5 jne       0x0000`0000`063C`260C
063c25f7 jmp       0x0000`0000`063C`2607
063c25f9 mov       0x2E(%rsp),%al
063c25fd xor       $0xFF,%al
063c25ff and       $1,%al
063c2601 mov       %al,0x4E(%rsp)
063c2605 jmp       0x0000`0000`063C`25F0
063c2607 add       $0x68,%rsp
063c260b ret
063c260c ud2
063c260e ud2

core::intrinsics::write_bytes<u8>:
063c2610 sub       $0x58,%rsp
063c2614 mov       %r8,0x20(%rsp)
063c2619 mov       %dl,0x2F(%rsp)
063c261d mov       %rcx,0x30(%rsp)
063c2622 mov       %rcx,0x40(%rsp)
063c2627 mov       %dl,0x4F(%rsp)
063c262b mov       %r8,0x50(%rsp)
063c2630 mov       %rcx,0x38(%rsp)
063c2635 mov       0x38(%rsp),%rcx
063c263a call      0x0000`0000`063C`26E0
063c263f mov       0x2F(%rsp),%dl
063c2643 mov       0x30(%rsp),%rcx
063c2648 mov       0x20(%rsp),%r8
063c264d shl       $0,%r8
063c2651 call      0x0000`0000`063B`BE10
063c2656 add       $0x58,%rsp
063c265a ret

core::intrinsics::write_bytes::runtime_check<u8>:
063c2660 sub       $0x68,%rsp
063c2664 mov       %rcx,0x60(%rsp)
063c2669 call      0x0000`0000`063C`2270
063c266e mov       %al,0x2F(%rsp)
063c2672 mov       0x2F(%rsp),%al
063c2676 xor       $0xFF,%al
063c2678 test      $1,%al
063c267a jne       0x0000`0000`063C`2681
063c267c add       $0x68,%rsp
063c2680 ret
063c2681 lea       0x30(%rsp),%rcx
063c2686 lea       0x63D`0548,%rdx
063c268d mov       $1,%r8d
063c2693 lea       0x63D`0558,%r9
063c269a xor       %eax,%eax
063c269c movq      $0,0x20(%rsp)
063c26a5 call      0x0000`0000`063B`4170
063c26aa lea       0x63D`0558,%rdx
063c26b1 lea       0x30(%rsp),%rcx
063c26b6 call      0x0000`0000`063B`2140
063c26bb ud2

core::intrinsics::const_eval_select<tuple$<ptr_const$<usize> >,void (*)(ptr_const$<usize>),void (*)(ptr_const$<usize>),tuple$<> >:
063c26c0 sub       $0x38,%rsp
063c26c4 mov       %rcx,0x20(%rsp)
063c26c9 call      0x0000`0000`063B`0FF0
063c26ce jmp       0x0000`0000`063C`26D0
063c26d0 add       $0x38,%rsp
063c26d4 ret

core::intrinsics::const_eval_select<tuple$<ptr_mut$<u8> >,void (*)(ptr_mut$<u8>),void (*)(ptr_mut$<u8>),tuple$<> >:
063c26e0 sub       $0x38,%rsp
063c26e4 mov       %rcx,0x20(%rsp)
063c26e9 call      0x0000`0000`063B`0FA0
063c26ee jmp       0x0000`0000`063C`26F0
063c26f0 add       $0x38,%rsp
063c26f4 ret

core::intrinsics::const_eval_select<tuple$<ptr_const$<array$<usize,4> > >,void (*)(ptr_const$<array$<usize,4> >),void (*)(ptr_const$<array$<usize,4> >),tuple$<> >:
063c2700 sub       $0x38,%rsp
063c2704 mov       %rcx,0x20(%rsp)
063c2709 call      0x0000`0000`063B`0F60
063c270e jmp       0x0000`0000`063C`2710
063c2710 add       $0x38,%rsp
063c2714 ret

core::intrinsics::const_eval_select<tuple$<ptr_const$<u8>,ptr_mut$<u8>,usize>,void (*)(ptr_const$<u8>,ptr_mut$<u8>,usize),void (*)(ptr_const$<u8>,ptr_mut$<u8>,usize),tuple$<> >:
063c2720 sub       $0x48,%rsp
063c2724 mov       (%rcx),%rax
063c2727 mov       %rax,0x20(%rsp)
063c272c mov       8(%rcx),%rax
063c2730 mov       %rax,0x28(%rsp)
063c2735 mov       0x10(%rcx),%rax
063c2739 mov       %rax,0x30(%rsp)
063c273e mov       0x20(%rsp),%rcx
063c2743 mov       0x28(%rsp),%rdx
063c2748 mov       0x30(%rsp),%r8
063c274d call      0x0000`0000`063B`0FC0
063c2752 jmp       0x0000`0000`063C`2754
063c2754 add       $0x48,%rsp
063c2758 ret

core::intrinsics::const_eval_select<tuple$<ptr_const$<u8>,usize>,usize (*)(ptr_const$<u8>,usize),usize (*)(ptr_const$<u8>,usize),usize>:
063c2760 sub       $0x48,%rsp
063c2764 mov       %rcx,0x28(%rsp)
063c2769 mov       %rdx,0x30(%rsp)
063c276e call      0x0000`0000`063B`0F30
063c2773 mov       %rax,0x20(%rsp)
063c2778 jmp       0x0000`0000`063C`277A
063c277a mov       0x20(%rsp),%rax
063c277f add       $0x48,%rsp
063c2783 ret

core::intrinsics::const_eval_select<tuple$<ptr_const$<u8> >,void (*)(ptr_const$<u8>),void (*)(ptr_const$<u8>),tuple$<> >:
063c2790 sub       $0x38,%rsp
063c2794 mov       %rcx,0x20(%rsp)
063c2799 call      0x0000`0000`063B`0F80
063c279e jmp       0x0000`0000`063C`27A0
063c27a0 add       $0x38,%rsp
063c27a4 ret

core::ptr::non_null::NonNull<core::mem::maybe_uninit::MaybeUninit<u8> >::new_unchecked<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c27b0 sub       $0x10,%rsp
063c27b4 mov       %rcx,8(%rsp)
063c27b9 mov       %rcx,(%rsp)
063c27bd mov       (%rsp),%rax
063c27c1 add       $0x10,%rsp
063c27c5 ret

core::ptr::non_null::NonNull<core::fmt::rt::v1::Argument>::new_unchecked<core::fmt::rt::v1::Argument>:
063c27d0 sub       $0x10,%rsp
063c27d4 mov       %rcx,8(%rsp)
063c27d9 mov       %rcx,(%rsp)
063c27dd mov       (%rsp),%rax
063c27e1 add       $0x10,%rsp
063c27e5 ret

core::ptr::non_null::NonNull<usize>::new_unchecked<usize>:
063c27f0 sub       $0x10,%rsp
063c27f4 mov       %rcx,8(%rsp)
063c27f9 mov       %rcx,(%rsp)
063c27fd mov       (%rsp),%rax
063c2801 add       $0x10,%rsp
063c2805 ret

core::ptr::non_null::NonNull<u8>::new_unchecked<u8>:
063c2810 sub       $0x10,%rsp
063c2814 mov       %rcx,8(%rsp)
063c2819 mov       %rcx,(%rsp)
063c281d mov       (%rsp),%rax
063c2821 add       $0x10,%rsp
063c2825 ret

core::ptr::non_null::NonNull<array$<usize,4> >::new_unchecked<array$<usize,4> >:
063c2830 sub       $0x10,%rsp
063c2834 mov       %rcx,8(%rsp)
063c2839 mov       %rcx,(%rsp)
063c283d mov       (%rsp),%rax
063c2841 add       $0x10,%rsp
063c2845 ret

core::ptr::non_null::NonNull<core::fmt::ArgumentV1>::new_unchecked<core::fmt::ArgumentV1>:
063c2850 sub       $0x10,%rsp
063c2854 mov       %rcx,8(%rsp)
063c2859 mov       %rcx,(%rsp)
063c285d mov       (%rsp),%rax
063c2861 add       $0x10,%rsp
063c2865 ret

core::ptr::non_null::NonNull<tuple$<u8,u8> >::new_unchecked<tuple$<u8,u8> >:
063c2870 sub       $0x10,%rsp
063c2874 mov       %rcx,8(%rsp)
063c2879 mov       %rcx,(%rsp)
063c287d mov       (%rsp),%rax
063c2881 add       $0x10,%rsp
063c2885 ret

core::ptr::non_null::NonNull<core::fmt::rt::v1::Argument>::as_ptr<core::fmt::rt::v1::Argument>:
063c2890 push      %rax
063c2891 mov       %rcx,%rax
063c2894 mov       %rax,(%rsp)
063c2898 pop       %rcx
063c2899 ret

core::ptr::non_null::NonNull<tuple$<u8,u8> >::as_ptr<tuple$<u8,u8> >:
063c28a0 push      %rax
063c28a1 mov       %rcx,%rax
063c28a4 mov       %rax,(%rsp)
063c28a8 pop       %rcx
063c28a9 ret

core::ptr::non_null::NonNull<usize>::as_ptr<usize>:
063c28b0 push      %rax
063c28b1 mov       %rcx,%rax
063c28b4 mov       %rax,(%rsp)
063c28b8 pop       %rcx
063c28b9 ret

core::ptr::non_null::NonNull<array$<usize,4> >::as_ptr<array$<usize,4> >:
063c28c0 push      %rax
063c28c1 mov       %rcx,%rax
063c28c4 mov       %rax,(%rsp)
063c28c8 pop       %rcx
063c28c9 ret

core::ptr::non_null::NonNull<u8>::as_ptr<u8>:
063c28d0 push      %rax
063c28d1 mov       %rcx,%rax
063c28d4 mov       %rax,(%rsp)
063c28d8 pop       %rcx
063c28d9 ret

core::ptr::non_null::NonNull<core::mem::maybe_uninit::MaybeUninit<u8> >::as_ptr<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c28e0 push      %rax
063c28e1 mov       %rcx,%rax
063c28e4 mov       %rax,(%rsp)
063c28e8 pop       %rcx
063c28e9 ret

core::ptr::non_null::NonNull<core::fmt::ArgumentV1>::as_ptr<core::fmt::ArgumentV1>:
063c28f0 push      %rax
063c28f1 mov       %rcx,%rax
063c28f4 mov       %rax,(%rsp)
063c28f8 pop       %rcx
063c28f9 ret

core::iter::adapters::cloned::Cloned<core::slice::iter::Iter<u8> >::new<core::slice::iter::Iter<u8> >:
063c2900 sub       $0x20,%rsp
063c2904 mov       %rcx,0x10(%rsp)
063c2909 mov       %rdx,0x18(%rsp)
063c290e mov       %rcx,(%rsp)
063c2912 mov       %rdx,8(%rsp)
063c2917 mov       (%rsp),%rax
063c291b mov       8(%rsp),%rdx
063c2920 add       $0x20,%rsp
063c2924 ret

core::iter::adapters::cloned::impl$1::next<core::slice::iter::Iter<u8>,u8>:
063c2930 sub       $0x38,%rsp
063c2934 mov       %rcx,0x30(%rsp)
063c2939 call      0x0000`0000`063C`6DF0
063c293e mov       %rax,0x28(%rsp)
063c2943 mov       0x28(%rsp),%rcx
063c2948 call      0x0000`0000`063B`1DE0
063c294d mov       %al,0x26(%rsp)
063c2951 mov       %dl,0x27(%rsp)
063c2955 mov       0x27(%rsp),%dl
063c2959 mov       0x26(%rsp),%al
063c295d and       $1,%al
063c295f add       $0x38,%rsp
063c2963 ret

core::fmt::builders::impl$0::default:
063c2970 push      %rax
063c2971 movb      $1,7(%rsp)
063c2976 mov       7(%rsp),%al
063c297a and       $1,%al
063c297c movzbl    %al,%eax
063c297f pop       %rcx
063c2980 ret

core::fmt::builders::PadAdapter::wrap:
063c2990 sub       $0x58,%rsp
063c2994 mov       %rcx,%rax
063c2997 mov       %rax,0x28(%rsp)
063c299c mov       %rdx,0x40(%rsp)
063c29a1 mov       %r8,0x48(%rsp)
063c29a6 mov       %r9,0x50(%rsp)
063c29ab mov       %r8,0x30(%rsp)
063c29b0 mov       %r9,0x38(%rsp)
063c29b5 mov       0x30(%rsp),%r8
063c29ba mov       0x38(%rsp),%r9
063c29bf call      0x0000`0000`063B`4C30
063c29c4 mov       0x28(%rsp),%rax
063c29c9 add       $0x58,%rsp
063c29cd ret

core::fmt::builders::impl$1::wrap::closure$0:
063c29d0 sub       $0x68,%rsp
063c29d4 mov       %rcx,0x40(%rsp)
063c29d9 mov       %rdx,0x48(%rsp)
063c29de lea       0x40(%rsp),%rax
063c29e3 add       $8,%rax
063c29e7 mov       %rax,0x50(%rsp)
063c29ec mov       %r8,0x58(%rsp)
063c29f1 mov       %r9,0x60(%rsp)
063c29f6 mov       %r8,0x28(%rsp)
063c29fb mov       %r9,0x30(%rsp)
063c2a00 mov       %rdx,0x38(%rsp)
063c2a05 lea       0x28(%rsp),%rdx
063c2a0a call      0x0000`0000`063B`1D50
063c2a0f mov       %rax,0x20(%rsp)
063c2a14 mov       0x20(%rsp),%rax
063c2a19 lea       0x63D`0570,%rdx
063c2a20 add       $0x68,%rsp
063c2a24 ret

core::fmt::builders::impl$2::write_str:
063c2a30 sub       $0xE8,%rsp
063c2a37 mov       %rcx,0x68(%rsp)
063c2a3c mov       %rdx,0x70(%rsp)
063c2a41 mov       %r8,0x78(%rsp)
063c2a46 mov       %rcx,0xB8(%rsp)
063c2a4e mov       0x70(%rsp),%rcx
063c2a53 mov       0x78(%rsp),%rdx
063c2a58 call      0x0000`0000`063B`D740
063c2a5d mov       %al,0x67(%rsp)
063c2a61 mov       0x67(%rsp),%al
063c2a65 xor       $0xFF,%al
063c2a67 test      $1,%al
063c2a69 jne       0x0000`0000`063C`2A78
063c2a6b movb      $0,0x86(%rsp)
063c2a73 jmp       0x0000`0000`063C`2B09
063c2a78 mov       0x68(%rsp),%rax
063c2a7d mov       0x10(%rax),%rax
063c2a81 testb     $1,(%rax)
063c2a84 jne       0x0000`0000`063C`2AAD
063c2a86 mov       0x70(%rsp),%rcx
063c2a8b mov       0x78(%rsp),%rdx
063c2a90 mov       $0xA,%r8d
063c2a96 call      0x0000`0000`063B`DBD0
063c2a9b mov       %rdx,0x98(%rsp)
063c2aa3 mov       %rax,0x90(%rsp)
063c2aab jmp       0x0000`0000`063C`2B1D
063c2aad mov       0x68(%rsp),%rax
063c2ab2 mov       (%rax),%rcx
063c2ab5 mov       8(%rax),%rax
063c2ab9 lea       0x63D`05A0,%rdx
063c2ac0 mov       $4,%r8d
063c2ac6 callq     *0x18(%rax)
063c2ac9 mov       %al,0x66(%rsp)
063c2acd mov       0x66(%rsp),%cl
063c2ad1 and       $1,%cl
063c2ad4 call      0x0000`0000`063B`CEE0
063c2ad9 and       $1,%al
063c2adb mov       %al,0x87(%rsp)
063c2ae2 movzbl    0x87(%rsp),%eax
063c2aea test      $1,%al
063c2aec je        0x0000`0000`063C`2A86
063c2aee jmp       0x0000`0000`063C`2AF0
063c2af0 jmp       0x0000`0000`063C`2AF4
063c2af2 ud2
063c2af4 lea       0x63D`0620,%rcx
063c2afb call      0x0000`0000`063B`CF60
063c2b00 and       $1,%al
063c2b02 mov       %al,0x86(%rsp)
063c2b09 mov       0x86(%rsp),%al
063c2b10 and       $1,%al
063c2b12 movzbl    %al,%eax
063c2b15 add       $0xE8,%rsp
063c2b1c ret
063c2b1d mov       0x90(%rsp),%rax
063c2b25 test      %rax,%rax
063c2b28 je        0x0000`0000`063C`2B30
063c2b2a jmp       0x0000`0000`063C`2B2C
063c2b2c jmp       0x0000`0000`063C`2B55
063c2b2e ud2
063c2b30 mov       0x68(%rsp),%rax
063c2b35 mov       0x10(%rax),%rax
063c2b39 movb      $0,(%rax)
063c2b3c mov       0x70(%rsp),%rcx
063c2b41 mov       0x78(%rsp),%rdx
063c2b46 call      0x0000`0000`063B`D700
063c2b4b mov       %rax,0x88(%rsp)
063c2b53 jmp       0x0000`0000`063C`2BAA
063c2b55 mov       0x68(%rsp),%rcx
063c2b5a mov       0x98(%rsp),%rax
063c2b62 mov       %rax,0xE0(%rsp)
063c2b6a mov       0x10(%rcx),%rcx
063c2b6e movb      $1,(%rcx)
063c2b71 add       $1,%rax
063c2b75 mov       %rax,0x58(%rsp)
063c2b7a setb      %al
063c2b7d test      $1,%al
063c2b7f jne       0x0000`0000`063C`2B90
063c2b81 mov       0x58(%rsp),%rax
063c2b86 mov       %rax,0x88(%rsp)
063c2b8e jmp       0x0000`0000`063C`2BAA
063c2b90 lea       0x63D`03B0,%rcx
063c2b97 lea       0x63D`0638,%r8
063c2b9e mov       $0x1C,%edx
063c2ba3 call      0x0000`0000`063B`2030
063c2ba8 ud2
063c2baa mov       0x68(%rsp),%rax
063c2baf mov       (%rax),%rcx
063c2bb2 mov       %rcx,0x38(%rsp)
063c2bb7 mov       8(%rax),%rax
063c2bbb mov       %rax,0x40(%rsp)
063c2bc0 mov       0x70(%rsp),%rcx
063c2bc5 mov       0x78(%rsp),%rdx
063c2bca mov       0x88(%rsp),%rax
063c2bd2 mov       %rax,0xA8(%rsp)
063c2bda mov       0xA8(%rsp),%r8
063c2be2 lea       0x63D`0650,%r9
063c2be9 call      0x0000`0000`063B`6480
063c2bee mov       %rax,0x48(%rsp)
063c2bf3 mov       %rdx,0x50(%rsp)
063c2bf8 mov       0x40(%rsp),%rax
063c2bfd mov       0x50(%rsp),%r8
063c2c02 mov       0x48(%rsp),%rdx
063c2c07 mov       0x38(%rsp),%rcx
063c2c0c callq     *0x18(%rax)
063c2c0f mov       %al,0x37(%rsp)
063c2c13 mov       0x37(%rsp),%cl
063c2c17 and       $1,%cl
063c2c1a call      0x0000`0000`063B`CEE0
063c2c1f and       $1,%al
063c2c21 mov       %al,0xA7(%rsp)
063c2c28 movzbl    0xA7(%rsp),%eax
063c2c30 test      $1,%al
063c2c32 je        0x0000`0000`063C`2C3A
063c2c34 jmp       0x0000`0000`063C`2C36
063c2c36 jmp       0x0000`0000`063C`2C74
063c2c38 ud2
063c2c3a mov       0x70(%rsp),%rcx
063c2c3f mov       0x78(%rsp),%rdx
063c2c44 mov       0x88(%rsp),%rax
063c2c4c mov       %rax,0xB0(%rsp)
063c2c54 mov       0xB0(%rsp),%r8
063c2c5c lea       0x63D`0680,%r9
063c2c63 call      0x0000`0000`063B`63D0
063c2c68 mov       %rax,0x20(%rsp)
063c2c6d mov       %rdx,0x28(%rsp)
063c2c72 jmp       0x0000`0000`063C`2C8E
063c2c74 lea       0x63D`0668,%rcx
063c2c7b call      0x0000`0000`063B`CF60
063c2c80 and       $1,%al
063c2c82 mov       %al,0x86(%rsp)
063c2c89 jmp       0x0000`0000`063C`2B09
063c2c8e mov       0x28(%rsp),%rax
063c2c93 mov       0x20(%rsp),%rcx
063c2c98 mov       %rcx,0x70(%rsp)
063c2c9d mov       %rax,0x78(%rsp)
063c2ca2 jmp       0x0000`0000`063C`2A4E

core::fmt::builders::debug_struct_new:
063c2cb0 sub       $0x78,%rsp
063c2cb4 mov       %r9,0x28(%rsp)
063c2cb9 mov       %r8,%rax
063c2cbc mov       0x28(%rsp),%r8
063c2cc1 mov       %rax,0x30(%rsp)
063c2cc6 mov       %rdx,%rax
063c2cc9 mov       0x30(%rsp),%rdx
063c2cce mov       %rax,0x38(%rsp)
063c2cd3 mov       %rcx,%rax
063c2cd6 mov       0x38(%rsp),%rcx
063c2cdb mov       %rax,0x40(%rsp)
063c2ce0 mov       %rax,0x48(%rsp)
063c2ce5 mov       %rcx,0x58(%rsp)
063c2cea mov       %rdx,0x60(%rsp)
063c2cef mov       %r8,0x68(%rsp)
063c2cf4 call      0x0000`0000`063B`5D90
063c2cf9 mov       %al,0x57(%rsp)
063c2cfd and       $1,%al
063c2cff mov       %al,0x77(%rsp)
063c2d03 mov       0x48(%rsp),%rax
063c2d08 mov       0x40(%rsp),%rcx
063c2d0d mov       0x57(%rsp),%dl
063c2d11 mov       0x38(%rsp),%r8
063c2d16 mov       %r8,(%rcx)
063c2d19 and       $1,%dl
063c2d1c mov       %dl,8(%rcx)
063c2d1f movb      $0,9(%rcx)
063c2d23 add       $0x78,%rsp
063c2d27 ret

core::fmt::builders::DebugStruct::field:
063c2d30 sub       $0x88,%rsp
063c2d37 mov       %rcx,%r10
063c2d3a mov       %r10,0x28(%rsp)
063c2d3f mov       0xB0(%rsp),%rax
063c2d47 mov       %r10,0x60(%rsp)
063c2d4c mov       %rdx,0x68(%rsp)
063c2d51 mov       %r8,0x70(%rsp)
063c2d56 mov       %r9,0x78(%rsp)
063c2d5b mov       %rax,0x80(%rsp)
063c2d63 mov       8(%r10),%cl
063c2d67 mov       %r10,0x38(%rsp)
063c2d6c mov       %rdx,0x40(%rsp)
063c2d71 mov       %r8,0x48(%rsp)
063c2d76 mov       %r9,0x50(%rsp)
063c2d7b mov       %rax,0x58(%rsp)
063c2d80 lea       0x38(%rsp),%rdx
063c2d85 and       $1,%cl
063c2d88 call      0x0000`0000`063B`CBD0
063c2d8d mov       %al,0x37(%rsp)
063c2d91 mov       0x28(%rsp),%rax
063c2d96 mov       0x37(%rsp),%cl
063c2d9a and       $1,%cl
063c2d9d mov       %cl,8(%rax)
063c2da0 movb      $1,9(%rax)
063c2da4 add       $0x88,%rsp
063c2dab ret

core::fmt::builders::impl$3::field::closure$0:
063c2db0 sub       $0x158,%rsp
063c2db7 mov       %rcx,0x30(%rsp)
063c2dbc mov       8(%rcx),%rax
063c2dc0 mov       %rax,0xC0(%rsp)
063c2dc8 mov       0x18(%rcx),%rax
063c2dcc mov       %rax,0xD0(%rsp)
063c2dd4 mov       (%rcx),%rcx
063c2dd7 call      0x0000`0000`063C`3240
063c2ddc mov       %al,0x3D(%rsp)
063c2de0 mov       0x3D(%rsp),%al
063c2de4 test      $1,%al
063c2de6 jne       0x0000`0000`063C`2E01
063c2de8 jmp       0x0000`0000`063C`2DEA
063c2dea mov       0x30(%rsp),%rax
063c2def mov       (%rax),%rax
063c2df2 testb     $1,9(%rax)
063c2df6 jne       0x0000`0000`063C`2FF8
063c2dfc jmp       0x0000`0000`063C`2FDB
063c2e01 mov       0x30(%rsp),%rax
063c2e06 mov       (%rax),%rax
063c2e09 mov       9(%rax),%al
063c2e0c xor       $0xFF,%al
063c2e0e test      $1,%al
063c2e10 jne       0x0000`0000`063C`2E28
063c2e12 movq      $0,0x40(%rsp)
063c2e1b call      0x0000`0000`063C`2970
063c2e20 and       $1,%al
063c2e22 mov       %al,0x5F(%rsp)
063c2e26 jmp       0x0000`0000`063C`2E8D
063c2e28 mov       0x30(%rsp),%rax
063c2e2d mov       (%rax),%rax
063c2e30 mov       (%rax),%rcx
063c2e33 lea       0x63D`0698,%rdx
063c2e3a mov       $3,%r8d
063c2e40 call      0x0000`0000`063B`5D90
063c2e45 mov       %al,0x2F(%rsp)
063c2e49 mov       0x2F(%rsp),%cl
063c2e4d and       $1,%cl
063c2e50 call      0x0000`0000`063B`CEE0
063c2e55 and       $1,%al
063c2e57 mov       %al,0x3F(%rsp)
063c2e5b movzbl    0x3F(%rsp),%eax
063c2e60 test      $1,%al
063c2e62 je        0x0000`0000`063C`2E12
063c2e64 jmp       0x0000`0000`063C`2E66
063c2e66 jmp       0x0000`0000`063C`2E6A
063c2e68 ud2
063c2e6a lea       0x63D`06A0,%rcx
063c2e71 call      0x0000`0000`063B`CF60
063c2e76 and       $1,%al
063c2e78 mov       %al,0x3E(%rsp)
063c2e7c mov       0x3E(%rsp),%al
063c2e80 and       $1,%al
063c2e82 movzbl    %al,%eax
063c2e85 add       $0x158,%rsp
063c2e8c ret
063c2e8d mov       0x30(%rsp),%rax
063c2e92 mov       (%rax),%rax
063c2e95 mov       (%rax),%rdx
063c2e98 lea       0x60(%rsp),%rcx
063c2e9d lea       0x40(%rsp),%r8
063c2ea2 lea       0x5F(%rsp),%r9
063c2ea7 call      0x0000`0000`063C`2990
063c2eac mov       0x30(%rsp),%rax
063c2eb1 mov       8(%rax),%rdx
063c2eb5 mov       0x10(%rax),%r8
063c2eb9 lea       0x60(%rsp),%rcx
063c2ebe call      0x0000`0000`063B`5D90
063c2ec3 mov       %al,0x2E(%rsp)
063c2ec7 mov       0x2E(%rsp),%cl
063c2ecb and       $1,%cl
063c2ece call      0x0000`0000`063B`CEE0
063c2ed3 and       $1,%al
063c2ed5 mov       %al,0xA5(%rsp)
063c2edc movzbl    0xA5(%rsp),%eax
063c2ee4 test      $1,%al
063c2ee6 je        0x0000`0000`063C`2EEE
063c2ee8 jmp       0x0000`0000`063C`2EEA
063c2eea jmp       0x0000`0000`063C`2F0B
063c2eec ud2
063c2eee lea       0x60(%rsp),%rcx
063c2ef3 lea       0x63D`06D0,%rdx
063c2efa mov       $2,%r8d
063c2f00 call      0x0000`0000`063B`5D90
063c2f05 mov       %al,0x2D(%rsp)
063c2f09 jmp       0x0000`0000`063C`2F22
063c2f0b lea       0x63D`06B8,%rcx
063c2f12 call      0x0000`0000`063B`CF60
063c2f17 and       $1,%al
063c2f19 mov       %al,0x3E(%rsp)
063c2f1d jmp       0x0000`0000`063C`2E7C
063c2f22 mov       0x2D(%rsp),%cl
063c2f26 and       $1,%cl
063c2f29 call      0x0000`0000`063B`CEE0
063c2f2e and       $1,%al
063c2f30 mov       %al,0xA6(%rsp)
063c2f37 movzbl    0xA6(%rsp),%eax
063c2f3f test      $1,%al
063c2f41 je        0x0000`0000`063C`2F49
063c2f43 jmp       0x0000`0000`063C`2F45
063c2f45 jmp       0x0000`0000`063C`2F64
063c2f47 ud2
063c2f49 mov       0x30(%rsp),%rax
063c2f4e mov       0x18(%rax),%rcx
063c2f52 mov       0x20(%rax),%rax
063c2f56 lea       0x60(%rsp),%rdx
063c2f5b callq     *0x18(%rax)
063c2f5e mov       %al,0x2C(%rsp)
063c2f62 jmp       0x0000`0000`063C`2F7B
063c2f64 lea       0x63D`06D8,%rcx
063c2f6b call      0x0000`0000`063B`CF60
063c2f70 and       $1,%al
063c2f72 mov       %al,0x3E(%rsp)
063c2f76 jmp       0x0000`0000`063C`2E7C
063c2f7b mov       0x2C(%rsp),%cl
063c2f7f and       $1,%cl
063c2f82 call      0x0000`0000`063B`CEE0
063c2f87 and       $1,%al
063c2f89 mov       %al,0xA7(%rsp)
063c2f90 movzbl    0xA7(%rsp),%eax
063c2f98 test      $1,%al
063c2f9a je        0x0000`0000`063C`2FA2
063c2f9c jmp       0x0000`0000`063C`2F9E
063c2f9e jmp       0x0000`0000`063C`2FC4
063c2fa0 ud2
063c2fa2 lea       0x60(%rsp),%rcx
063c2fa7 lea       0x63D`0708,%rdx
063c2fae mov       $2,%r8d
063c2fb4 call      0x0000`0000`063B`5D90
063c2fb9 and       $1,%al
063c2fbb mov       %al,0x3E(%rsp)
063c2fbf jmp       0x0000`0000`063C`2E7C
063c2fc4 lea       0x63D`06F0,%rcx
063c2fcb call      0x0000`0000`063B`CF60
063c2fd0 and       $1,%al
063c2fd2 mov       %al,0x3E(%rsp)
063c2fd6 jmp       0x0000`0000`063C`2E7C
063c2fdb lea       0x63D`070C,%rax
063c2fe2 mov       %rax,0xA8(%rsp)
063c2fea movq      $3,0xB0(%rsp)
063c2ff6 jmp       0x0000`0000`063C`3013
063c2ff8 lea       0x63D`070A,%rax
063c2fff mov       %rax,0xA8(%rsp)
063c3007 movq      $2,0xB0(%rsp)
063c3013 mov       0x30(%rsp),%rax
063c3018 mov       (%rax),%rax
063c301b mov       (%rax),%rcx
063c301e mov       0xA8(%rsp),%rdx
063c3026 mov       0xB0(%rsp),%r8
063c302e call      0x0000`0000`063B`5D90
063c3033 mov       %al,0x2B(%rsp)
063c3037 mov       0x2B(%rsp),%cl
063c303b and       $1,%cl
063c303e call      0x0000`0000`063B`CEE0
063c3043 and       $1,%al
063c3045 mov       %al,0xBD(%rsp)
063c304c movzbl    0xBD(%rsp),%eax
063c3054 test      $1,%al
063c3056 je        0x0000`0000`063C`305E
063c3058 jmp       0x0000`0000`063C`305A
063c305a jmp       0x0000`0000`063C`307C
063c305c ud2
063c305e mov       0x30(%rsp),%rax
063c3063 mov       (%rax),%rcx
063c3066 mov       (%rcx),%rcx
063c3069 mov       8(%rax),%rdx
063c306d mov       0x10(%rax),%r8
063c3071 call      0x0000`0000`063B`5D90
063c3076 mov       %al,0x2A(%rsp)
063c307a jmp       0x0000`0000`063C`3093
063c307c lea       0x63D`0710,%rcx
063c3083 call      0x0000`0000`063B`CF60
063c3088 and       $1,%al
063c308a mov       %al,0x3E(%rsp)
063c308e jmp       0x0000`0000`063C`2E7C
063c3093 mov       0x2A(%rsp),%cl
063c3097 and       $1,%cl
063c309a call      0x0000`0000`063B`CEE0
063c309f and       $1,%al
063c30a1 mov       %al,0xBE(%rsp)
063c30a8 movzbl    0xBE(%rsp),%eax
063c30b0 test      $1,%al
063c30b2 je        0x0000`0000`063C`30BA
063c30b4 jmp       0x0000`0000`063C`30B6
063c30b6 jmp       0x0000`0000`063C`30DD
063c30b8 ud2
063c30ba mov       0x30(%rsp),%rax
063c30bf mov       (%rax),%rax
063c30c2 mov       (%rax),%rcx
063c30c5 lea       0x63D`06D0,%rdx
063c30cc mov       $2,%r8d
063c30d2 call      0x0000`0000`063B`5D90
063c30d7 mov       %al,0x29(%rsp)
063c30db jmp       0x0000`0000`063C`30F4
063c30dd lea       0x63D`0728,%rcx
063c30e4 call      0x0000`0000`063B`CF60
063c30e9 and       $1,%al
063c30eb mov       %al,0x3E(%rsp)
063c30ef jmp       0x0000`0000`063C`2E7C
063c30f4 mov       0x29(%rsp),%cl
063c30f8 and       $1,%cl
063c30fb call      0x0000`0000`063B`CEE0
063c3100 and       $1,%al
063c3102 mov       %al,0xBF(%rsp)
063c3109 movzbl    0xBF(%rsp),%eax
063c3111 test      $1,%al
063c3113 je        0x0000`0000`063C`311B
063c3115 jmp       0x0000`0000`063C`3117
063c3117 jmp       0x0000`0000`063C`313C
063c3119 ud2
063c311b mov       0x30(%rsp),%rdx
063c3120 mov       0x18(%rdx),%rcx
063c3124 mov       0x20(%rdx),%rax
063c3128 mov       (%rdx),%rdx
063c312b mov       (%rdx),%rdx
063c312e callq     *0x18(%rax)
063c3131 and       $1,%al
063c3133 mov       %al,0x3E(%rsp)
063c3137 jmp       0x0000`0000`063C`2E7C
063c313c lea       0x63D`0740,%rcx
063c3143 call      0x0000`0000`063B`CF60
063c3148 and       $1,%al
063c314a mov       %al,0x3E(%rsp)
063c314e jmp       0x0000`0000`063C`2E7C

core::fmt::builders::DebugStruct::finish:
063c3160 sub       $0x48,%rsp
063c3164 mov       %rcx,0x30(%rsp)
063c3169 mov       %rcx,0x40(%rsp)
063c316e testb     $1,9(%rcx)
063c3172 jne       0x0000`0000`063C`3186
063c3174 mov       0x30(%rsp),%rax
063c3179 mov       8(%rax),%al
063c317c and       $1,%al
063c317e movzbl    %al,%eax
063c3181 add       $0x48,%rsp
063c3185 ret
063c3186 mov       0x30(%rsp),%rax
063c318b mov       8(%rax),%cl
063c318e mov       %rax,0x38(%rsp)
063c3193 mov       0x38(%rsp),%rdx
063c3198 and       $1,%cl
063c319b call      0x0000`0000`063B`CB60
063c31a0 mov       %al,0x2F(%rsp)
063c31a4 mov       0x30(%rsp),%rax
063c31a9 mov       0x2F(%rsp),%cl
063c31ad and       $1,%cl
063c31b0 mov       %cl,8(%rax)
063c31b3 jmp       0x0000`0000`063C`3174

core::fmt::builders::impl$3::finish::closure$0:
063c31c0 sub       $0x48,%rsp
063c31c4 mov       %rcx,0x28(%rsp)
063c31c9 mov       %rcx,0x38(%rsp)
063c31ce call      0x0000`0000`063C`3240
063c31d3 mov       %al,0x36(%rsp)
063c31d7 mov       0x36(%rsp),%al
063c31db test      $1,%al
063c31dd jne       0x0000`0000`063C`3203
063c31df jmp       0x0000`0000`063C`31E1
063c31e1 mov       0x28(%rsp),%rax
063c31e6 mov       (%rax),%rcx
063c31e9 lea       0x63D`0759,%rdx
063c31f0 mov       $2,%r8d
063c31f6 call      0x0000`0000`063B`5D90
063c31fb and       $1,%al
063c31fd mov       %al,0x37(%rsp)
063c3201 jmp       0x0000`0000`063C`3223
063c3203 mov       0x28(%rsp),%rax
063c3208 mov       (%rax),%rcx
063c320b lea       0x63D`0758,%rdx
063c3212 mov       $1,%r8d
063c3218 call      0x0000`0000`063B`5D90
063c321d and       $1,%al
063c321f mov       %al,0x37(%rsp)
063c3223 mov       0x37(%rsp),%al
063c3227 and       $1,%al
063c3229 movzbl    %al,%eax
063c322c add       $0x48,%rsp
063c3230 ret

core::fmt::builders::DebugStruct::is_pretty:
063c3240 sub       $0x38,%rsp
063c3244 mov       %rcx,0x30(%rsp)
063c3249 mov       (%rcx),%rcx
063c324c call      0x0000`0000`063B`5E50
063c3251 mov       %al,0x2F(%rsp)
063c3255 mov       0x2F(%rsp),%al
063c3259 and       $1,%al
063c325b movzbl    %al,%eax
063c325e add       $0x38,%rsp
063c3262 ret

core::fmt::builders::debug_tuple_new:
063c3270 sub       $0x78,%rsp
063c3274 mov       %r9,0x28(%rsp)
063c3279 mov       %r8,%rax
063c327c mov       0x28(%rsp),%r8
063c3281 mov       %rax,0x30(%rsp)
063c3286 mov       %rdx,%rax
063c3289 mov       0x30(%rsp),%rdx
063c328e mov       %rax,0x38(%rsp)
063c3293 mov       %rcx,%rax
063c3296 mov       0x38(%rsp),%rcx
063c329b mov       %rax,0x40(%rsp)
063c32a0 mov       %rax,0x48(%rsp)
063c32a5 mov       %rcx,0x58(%rsp)
063c32aa mov       %rdx,0x60(%rsp)
063c32af mov       %r8,0x68(%rsp)
063c32b4 call      0x0000`0000`063B`5D90
063c32b9 mov       %al,0x57(%rsp)
063c32bd and       $1,%al
063c32bf mov       %al,0x77(%rsp)
063c32c3 mov       0x28(%rsp),%rdx
063c32c8 mov       0x30(%rsp),%rcx
063c32cd call      0x0000`0000`063B`D740
063c32d2 mov       %al,0x27(%rsp)
063c32d6 mov       0x48(%rsp),%rax
063c32db mov       0x40(%rsp),%rcx
063c32e0 mov       0x27(%rsp),%dl
063c32e4 mov       0x57(%rsp),%r8b
063c32e9 mov       0x38(%rsp),%r9
063c32ee mov       %r9,(%rcx)
063c32f1 and       $1,%r8b
063c32f5 mov       %r8b,0x10(%rcx)
063c32f9 movq      $0,8(%rcx)
063c3301 and       $1,%dl
063c3304 mov       %dl,0x11(%rcx)
063c3307 add       $0x78,%rsp
063c330b ret

core::fmt::builders::DebugTuple::field:
063c3310 sub       $0x68,%rsp
063c3314 mov       %rcx,%rax
063c3317 mov       %rax,0x28(%rsp)
063c331c mov       %rax,0x50(%rsp)
063c3321 mov       %rdx,0x58(%rsp)
063c3326 mov       %r8,0x60(%rsp)
063c332b mov       0x10(%rax),%cl
063c332e mov       %rax,0x38(%rsp)
063c3333 mov       %rdx,0x40(%rsp)
063c3338 mov       %r8,0x48(%rsp)
063c333d lea       0x38(%rsp),%rdx
063c3342 and       $1,%cl
063c3345 call      0x0000`0000`063B`CC50
063c334a mov       %al,0x37(%rsp)
063c334e mov       0x28(%rsp),%rax
063c3353 mov       0x37(%rsp),%cl
063c3357 and       $1,%cl
063c335a mov       %cl,0x10(%rax)
063c335d mov       8(%rax),%rax
063c3361 add       $1,%rax
063c3365 mov       %rax,0x20(%rsp)
063c336a setb      %al
063c336d test      $1,%al
063c336f jne       0x0000`0000`063C`3384
063c3371 mov       0x28(%rsp),%rax
063c3376 mov       0x20(%rsp),%rcx
063c337b mov       %rcx,8(%rax)
063c337f add       $0x68,%rsp
063c3383 ret
063c3384 lea       0x63D`03B0,%rcx
063c338b lea       0x63D`0760,%r8
063c3392 mov       $0x1C,%edx
063c3397 call      0x0000`0000`063B`2030
063c339c ud2

core::fmt::builders::impl$4::field::closure$0:
063c33a0 sub       $0x108,%rsp
063c33a7 mov       %rcx,0x30(%rsp)
063c33ac mov       8(%rcx),%rax
063c33b0 mov       %rax,0xC0(%rsp)
063c33b8 mov       (%rcx),%rcx
063c33bb call      0x0000`0000`063C`3710
063c33c0 mov       %al,0x3D(%rsp)
063c33c4 mov       0x3D(%rsp),%al
063c33c8 test      $1,%al
063c33ca jne       0x0000`0000`063C`33E6
063c33cc jmp       0x0000`0000`063C`33CE
063c33ce mov       0x30(%rsp),%rax
063c33d3 mov       (%rax),%rax
063c33d6 cmpq      $0,8(%rax)
063c33db je        0x0000`0000`063C`350A
063c33e1 jmp       0x0000`0000`063C`3527
063c33e6 mov       0x30(%rsp),%rax
063c33eb mov       (%rax),%rax
063c33ee cmpq      $0,8(%rax)
063c33f3 jne       0x0000`0000`063C`3418
063c33f5 mov       0x30(%rsp),%rax
063c33fa mov       (%rax),%rax
063c33fd mov       (%rax),%rcx
063c3400 lea       0x63D`0778,%rdx
063c3407 mov       $2,%r8d
063c340d call      0x0000`0000`063B`5D90
063c3412 mov       %al,0x2F(%rsp)
063c3416 jmp       0x0000`0000`063C`342E
063c3418 movq      $0,0x40(%rsp)
063c3421 call      0x0000`0000`063C`2970
063c3426 and       $1,%al
063c3428 mov       %al,0x5F(%rsp)
063c342c jmp       0x0000`0000`063C`3472
063c342e mov       0x2F(%rsp),%cl
063c3432 and       $1,%cl
063c3435 call      0x0000`0000`063B`CEE0
063c343a and       $1,%al
063c343c mov       %al,0x3F(%rsp)
063c3440 movzbl    0x3F(%rsp),%eax
063c3445 test      $1,%al
063c3447 je        0x0000`0000`063C`3418
063c3449 jmp       0x0000`0000`063C`344B
063c344b jmp       0x0000`0000`063C`344F
063c344d ud2
063c344f lea       0x63D`0780,%rcx
063c3456 call      0x0000`0000`063B`CF60
063c345b and       $1,%al
063c345d mov       %al,0x3E(%rsp)
063c3461 mov       0x3E(%rsp),%al
063c3465 and       $1,%al
063c3467 movzbl    %al,%eax
063c346a add       $0x108,%rsp
063c3471 ret
063c3472 mov       0x30(%rsp),%rax
063c3477 mov       (%rax),%rax
063c347a mov       (%rax),%rdx
063c347d lea       0x60(%rsp),%rcx
063c3482 lea       0x40(%rsp),%r8
063c3487 lea       0x5F(%rsp),%r9
063c348c call      0x0000`0000`063C`2990
063c3491 mov       0x30(%rsp),%rax
063c3496 mov       8(%rax),%rcx
063c349a mov       0x10(%rax),%rax
063c349e lea       0x60(%rsp),%rdx
063c34a3 callq     *0x18(%rax)
063c34a6 mov       %al,0x2E(%rsp)
063c34aa mov       0x2E(%rsp),%cl
063c34ae and       $1,%cl
063c34b1 call      0x0000`0000`063B`CEE0
063c34b6 and       $1,%al
063c34b8 mov       %al,0xA7(%rsp)
063c34bf movzbl    0xA7(%rsp),%eax
063c34c7 test      $1,%al
063c34c9 je        0x0000`0000`063C`34D1
063c34cb jmp       0x0000`0000`063C`34CD
063c34cd jmp       0x0000`0000`063C`34F3
063c34cf ud2
063c34d1 lea       0x60(%rsp),%rcx
063c34d6 lea       0x63D`0708,%rdx
063c34dd mov       $2,%r8d
063c34e3 call      0x0000`0000`063B`5D90
063c34e8 and       $1,%al
063c34ea mov       %al,0x3E(%rsp)
063c34ee jmp       0x0000`0000`063C`3461
063c34f3 lea       0x63D`0798,%rcx
063c34fa call      0x0000`0000`063B`CF60
063c34ff and       $1,%al
063c3501 mov       %al,0x3E(%rsp)
063c3505 jmp       0x0000`0000`063C`3461
063c350a lea       0x63D`07B0,%rax
063c3511 mov       %rax,0xA8(%rsp)
063c3519 movq      $1,0xB0(%rsp)
063c3525 jmp       0x0000`0000`063C`3542
063c3527 lea       0x63D`070A,%rax
063c352e mov       %rax,0xA8(%rsp)
063c3536 movq      $2,0xB0(%rsp)
063c3542 mov       0x30(%rsp),%rax
063c3547 mov       (%rax),%rax
063c354a mov       (%rax),%rcx
063c354d mov       0xA8(%rsp),%rdx
063c3555 mov       0xB0(%rsp),%r8
063c355d call      0x0000`0000`063B`5D90
063c3562 mov       %al,0x2D(%rsp)
063c3566 mov       0x2D(%rsp),%cl
063c356a and       $1,%cl
063c356d call      0x0000`0000`063B`CEE0
063c3572 and       $1,%al
063c3574 mov       %al,0xBF(%rsp)
063c357b movzbl    0xBF(%rsp),%eax
063c3583 test      $1,%al
063c3585 je        0x0000`0000`063C`358D
063c3587 jmp       0x0000`0000`063C`3589
063c3589 jmp       0x0000`0000`063C`35AE
063c358b ud2
063c358d mov       0x30(%rsp),%rdx
063c3592 mov       8(%rdx),%rcx
063c3596 mov       0x10(%rdx),%rax
063c359a mov       (%rdx),%rdx
063c359d mov       (%rdx),%rdx
063c35a0 callq     *0x18(%rax)
063c35a3 and       $1,%al
063c35a5 mov       %al,0x3E(%rsp)
063c35a9 jmp       0x0000`0000`063C`3461
063c35ae lea       0x63D`07B8,%rcx
063c35b5 call      0x0000`0000`063B`CF60
063c35ba and       $1,%al
063c35bc mov       %al,0x3E(%rsp)
063c35c0 jmp       0x0000`0000`063C`3461

core::fmt::builders::DebugTuple::finish:
063c35d0 sub       $0x48,%rsp
063c35d4 mov       %rcx,0x30(%rsp)
063c35d9 mov       %rcx,0x40(%rsp)
063c35de cmpq      $0,8(%rcx)
063c35e3 ja        0x0000`0000`063C`35F7
063c35e5 mov       0x30(%rsp),%rax
063c35ea mov       0x10(%rax),%al
063c35ed and       $1,%al
063c35ef movzbl    %al,%eax
063c35f2 add       $0x48,%rsp
063c35f6 ret
063c35f7 mov       0x30(%rsp),%rax
063c35fc mov       0x10(%rax),%cl
063c35ff mov       %rax,0x38(%rsp)
063c3604 mov       0x38(%rsp),%rdx
063c3609 and       $1,%cl
063c360c call      0x0000`0000`063B`CCD0
063c3611 mov       %al,0x2F(%rsp)
063c3615 mov       0x30(%rsp),%rax
063c361a mov       0x2F(%rsp),%cl
063c361e and       $1,%cl
063c3621 mov       %cl,0x10(%rax)
063c3624 jmp       0x0000`0000`063C`35E5

core::fmt::builders::impl$4::finish::closure$0:
063c3630 sub       $0x58,%rsp
063c3634 mov       %rcx,0x28(%rsp)
063c3639 mov       %rcx,0x38(%rsp)
063c363e cmpq      $1,8(%rcx)
063c3643 jne       0x0000`0000`063C`3655
063c3645 mov       0x28(%rsp),%rax
063c364a mov       0x11(%rax),%al
063c364d and       $1,%al
063c364f mov       %al,0x36(%rsp)
063c3653 jmp       0x0000`0000`063C`365A
063c3655 movb      $0,0x36(%rsp)
063c365a testb     $1,0x36(%rsp)
063c365f jne       0x0000`0000`063C`3668
063c3661 movb      $0,0x35(%rsp)
063c3666 jmp       0x0000`0000`063C`3682
063c3668 mov       0x28(%rsp),%rcx
063c366d call      0x0000`0000`063C`3710
063c3672 mov       %al,0x27(%rsp)
063c3676 mov       0x27(%rsp),%al
063c367a xor       $0xFF,%al
063c367c and       $1,%al
063c367e mov       %al,0x35(%rsp)
063c3682 testb     $1,0x35(%rsp)
063c3687 jne       0x0000`0000`063C`36AB
063c3689 mov       0x28(%rsp),%rax
063c368e mov       (%rax),%rcx
063c3691 lea       0x63D`07F0,%rdx
063c3698 mov       $1,%r8d
063c369e call      0x0000`0000`063B`5D90
063c36a3 and       $1,%al
063c36a5 mov       %al,0x34(%rsp)
063c36a9 jmp       0x0000`0000`063C`36FC
063c36ab mov       0x28(%rsp),%rax
063c36b0 mov       (%rax),%rcx
063c36b3 lea       0x63D`07D0,%rdx
063c36ba mov       $1,%r8d
063c36c0 call      0x0000`0000`063B`5D90
063c36c5 mov       %al,0x26(%rsp)
063c36c9 mov       0x26(%rsp),%cl
063c36cd and       $1,%cl
063c36d0 call      0x0000`0000`063B`CEE0
063c36d5 and       $1,%al
063c36d7 mov       %al,0x37(%rsp)
063c36db movzbl    0x37(%rsp),%eax
063c36e0 test      $1,%al
063c36e2 je        0x0000`0000`063C`3689
063c36e4 jmp       0x0000`0000`063C`36E6
063c36e6 jmp       0x0000`0000`063C`36EA
063c36e8 ud2
063c36ea lea       0x63D`07D8,%rcx
063c36f1 call      0x0000`0000`063B`CF60
063c36f6 and       $1,%al
063c36f8 mov       %al,0x34(%rsp)
063c36fc mov       0x34(%rsp),%al
063c3700 and       $1,%al
063c3702 movzbl    %al,%eax
063c3705 add       $0x58,%rsp
063c3709 ret

core::fmt::builders::DebugTuple::is_pretty:
063c3710 sub       $0x38,%rsp
063c3714 mov       %rcx,0x30(%rsp)
063c3719 mov       (%rcx),%rcx
063c371c call      0x0000`0000`063B`5E50
063c3721 mov       %al,0x2F(%rsp)
063c3725 mov       0x2F(%rsp),%al
063c3729 and       $1,%al
063c372b movzbl    %al,%eax
063c372e add       $0x38,%rsp
063c3732 ret

core::fmt::Write::write_char<core::fmt::builders::PadAdapter>:
063c3740 sub       $0x68,%rsp
063c3744 mov       %edx,0x3C(%rsp)
063c3748 mov       %rcx,0x30(%rsp)
063c374d mov       %rcx,0x58(%rsp)
063c3752 mov       %edx,0x64(%rsp)
063c3756 lea       0x54(%rsp),%rcx
063c375b xor       %edx,%edx
063c375d mov       $4,%r8d
063c3763 call      0x0000`0000`063B`BE10
063c3768 mov       0x3C(%rsp),%ecx
063c376c lea       0x54(%rsp),%rdx
063c3771 mov       $4,%r8d
063c3777 call      0x0000`0000`063B`98C0
063c377c mov       %rax,0x40(%rsp)
063c3781 mov       %rdx,0x48(%rsp)
063c3786 mov       0x48(%rsp),%r8
063c378b mov       0x40(%rsp),%rdx
063c3790 mov       0x30(%rsp),%rcx
063c3795 call      0x0000`0000`063C`2A30
063c379a mov       %al,0x2F(%rsp)
063c379e mov       0x2F(%rsp),%al
063c37a2 and       $1,%al
063c37a4 movzbl    %al,%eax
063c37a7 add       $0x68,%rsp
063c37ab ret

core::fmt::Write::write_fmt<core::fmt::builders::PadAdapter>:
063c37b0 sub       $0x68,%rsp
063c37b4 mov       %rcx,0x30(%rsp)
063c37b9 lea       0x30(%rsp),%rax
063c37be mov       %rax,0x20(%rsp)
063c37c3 lea       0x38(%rsp),%rcx
063c37c8 mov       $0x30,%r8d
063c37ce call      0x0000`0000`063B`BDE0
063c37d3 mov       0x20(%rsp),%rcx
063c37d8 lea       0x63D`07F8,%rdx
063c37df lea       0x38(%rsp),%r8
063c37e4 call      0x0000`0000`063B`4320
063c37e9 mov       %al,0x2F(%rsp)
063c37ed mov       0x2F(%rsp),%al
063c37f1 and       $1,%al
063c37f3 movzbl    %al,%eax
063c37f6 add       $0x68,%rsp
063c37fa ret

core::fmt::impl$0::write_str<core::fmt::builders::PadAdapter>:
063c3800 sub       $0x48,%rsp
063c3804 mov       %rcx,0x30(%rsp)
063c3809 mov       %rdx,0x38(%rsp)
063c380e mov       %r8,0x40(%rsp)
063c3813 mov       (%rcx),%rcx
063c3816 call      0x0000`0000`063C`2A30
063c381b mov       %al,0x2F(%rsp)
063c381f mov       0x2F(%rsp),%al
063c3823 and       $1,%al
063c3825 movzbl    %al,%eax
063c3828 add       $0x48,%rsp
063c382c ret

core::fmt::impl$0::write_char<core::fmt::builders::PadAdapter>:
063c3830 sub       $0x38,%rsp
063c3834 mov       %rcx,0x28(%rsp)
063c3839 mov       %edx,0x34(%rsp)
063c383d mov       (%rcx),%rcx
063c3840 call      0x0000`0000`063C`3740
063c3845 mov       %al,0x27(%rsp)
063c3849 mov       0x27(%rsp),%al
063c384d and       $1,%al
063c384f movzbl    %al,%eax
063c3852 add       $0x38,%rsp
063c3856 ret

core::fmt::impl$0::write_fmt<core::fmt::builders::PadAdapter>:
063c3860 sub       $0x68,%rsp
063c3864 mov       %rcx,0x60(%rsp)
063c3869 mov       (%rcx),%rax
063c386c mov       %rax,0x20(%rsp)
063c3871 lea       0x30(%rsp),%rcx
063c3876 mov       $0x30,%r8d
063c387c call      0x0000`0000`063B`BDE0
063c3881 mov       0x20(%rsp),%rcx
063c3886 lea       0x30(%rsp),%rdx
063c388b call      0x0000`0000`063C`37B0
063c3890 mov       %al,0x2F(%rsp)
063c3894 mov       0x2F(%rsp),%al
063c3898 and       $1,%al
063c389a movzbl    %al,%eax
063c389d add       $0x68,%rsp
063c38a1 ret

core::slice::cmp::impl$0::eq<u8,u8>:
063c38b0 sub       $0x48,%rsp
063c38b4 mov       %rcx,0x28(%rsp)
063c38b9 mov       %rdx,0x30(%rsp)
063c38be mov       %r8,0x38(%rsp)
063c38c3 mov       %r9,0x40(%rsp)
063c38c8 call      0x0000`0000`063C`38E0
063c38cd mov       %al,0x27(%rsp)
063c38d1 mov       0x27(%rsp),%al
063c38d5 and       $1,%al
063c38d7 movzbl    %al,%eax
063c38da add       $0x48,%rsp
063c38de ret

core::slice::cmp::impl$5::equal<u8,u8>:
063c38e0 sub       $0x98,%rsp
063c38e7 mov       %r9,0x48(%rsp)
063c38ec mov       %r8,0x50(%rsp)
063c38f1 mov       %rdx,0x58(%rsp)
063c38f6 mov       %rcx,0x60(%rsp)
063c38fb mov       %rcx,0x70(%rsp)
063c3900 mov       %rdx,0x78(%rsp)
063c3905 mov       %r8,0x80(%rsp)
063c390d mov       %r9,0x88(%rsp)
063c3915 cmp       %r9,%rdx
063c3918 jne       0x0000`0000`063C`3938
063c391a mov       0x58(%rsp),%rdx
063c391f mov       0x60(%rsp),%rcx
063c3924 call      0x0000`0000`063B`92F0
063c3929 mov       %rax,0x40(%rsp)
063c392e mov       %rax,0x90(%rsp)
063c3936 jmp       0x0000`0000`063C`394E
063c3938 movb      $0,0x6F(%rsp)
063c393d mov       0x6F(%rsp),%al
063c3941 and       $1,%al
063c3943 movzbl    %al,%eax
063c3946 add       $0x98,%rsp
063c394d ret
063c394e mov       0x58(%rsp),%rdx
063c3953 mov       0x60(%rsp),%rcx
063c3958 call      0x0000`0000`063C`0180
063c395d mov       %rax,0x38(%rsp)
063c3962 mov       0x48(%rsp),%rdx
063c3967 mov       0x50(%rsp),%rcx
063c396c call      0x0000`0000`063C`0180
063c3971 mov       %rax,0x30(%rsp)
063c3976 mov       0x40(%rsp),%r8
063c397b mov       0x30(%rsp),%rdx
063c3980 mov       0x38(%rsp),%rcx
063c3985 call      0x0000`0000`063B`BE40
063c398a mov       %eax,0x2C(%rsp)
063c398e mov       0x2C(%rsp),%eax
063c3992 cmp       $0,%eax
063c3995 sete      %al
063c3998 and       $1,%al
063c399a mov       %al,0x6F(%rsp)
063c399e jmp       0x0000`0000`063C`393D

core::unicode::unicode_data::grapheme_extend::lookup:
063c39a0 sub       $0x138,%rsp
063c39a7 mov       %ecx,%eax
063c39a9 mov       %eax,0x78(%rsp)
063c39ad mov       %eax,0x7C(%rsp)
063c39b1 mov       %eax,0xFC(%rsp)
063c39b8 lea       0x63D`09A0,%rcx
063c39bf mov       %rcx,0x100(%rsp)
063c39c7 lea       0x63D`0A20,%rdx
063c39ce mov       %rdx,0x108(%rsp)
063c39d6 shl       $0xB,%eax
063c39d9 mov       %eax,0x9C(%rsp)
063c39e0 mov       $0x20,%edx
063c39e5 lea       0x9C(%rsp),%r8
063c39ed call      0x0000`0000`063C`0BB0
063c39f2 mov       %rdx,0x90(%rsp)
063c39fa mov       %rax,0x88(%rsp)
063c3a02 mov       0x88(%rsp),%rax
063c3a0a test      %rax,%rax
063c3a0d je        0x0000`0000`063C`3A15
063c3a0f jmp       0x0000`0000`063C`3A11
063c3a11 jmp       0x0000`0000`063C`3A37
063c3a13 ud2
063c3a15 mov       0x90(%rsp),%rax
063c3a1d mov       %rax,0x118(%rsp)
063c3a25 add       $1,%rax
063c3a29 mov       %rax,0x70(%rsp)
063c3a2e setb      %al
063c3a31 test      $1,%al
063c3a33 jne       0x0000`0000`063C`3A78
063c3a35 jmp       0x0000`0000`063C`3A69
063c3a37 mov       0x90(%rsp),%rax
063c3a3f mov       %rax,0x110(%rsp)
063c3a47 mov       %rax,0x80(%rsp)
063c3a4f mov       0x80(%rsp),%rax
063c3a57 mov       %rax,0x68(%rsp)
063c3a5c cmp       $0x20,%rax
063c3a60 setb      %al
063c3a63 test      $1,%al
063c3a65 jne       0x0000`0000`063C`3A92
063c3a67 jmp       0x0000`0000`063C`3AC8
063c3a69 mov       0x70(%rsp),%rax
063c3a6e mov       %rax,0x80(%rsp)
063c3a76 jmp       0x0000`0000`063C`3A4F
063c3a78 lea       0x63D`03B0,%rcx
063c3a7f lea       0x63D`08B0,%r8
063c3a86 mov       $0x1C,%edx
063c3a8b call      0x0000`0000`063B`2030
063c3a90 ud2
063c3a92 mov       0x68(%rsp),%rcx
063c3a97 lea       0x63D`09A0,%rax
063c3a9e mov       (%rax,%rcx,4),%ecx
063c3aa1 call      0x0000`0000`063C`1430
063c3aa6 mov       %rax,0xA0(%rsp)
063c3aae mov       0x80(%rsp),%rax
063c3ab6 add       $1,%rax
063c3aba mov       %rax,0x60(%rsp)
063c3abf setb      %al
063c3ac2 test      $1,%al
063c3ac4 jne       0x0000`0000`063C`3B1A
063c3ac6 jmp       0x0000`0000`063C`3AE0
063c3ac8 mov       0x68(%rsp),%rcx
063c3acd lea       0x63D`08C8,%r8
063c3ad4 mov       $0x20,%edx
063c3ad9 call      0x0000`0000`063B`2090
063c3ade ud2
063c3ae0 mov       0x60(%rsp),%r8
063c3ae5 lea       0x63D`09A0,%rcx
063c3aec mov       $0x20,%edx
063c3af1 call      0x0000`0000`063B`FE50
063c3af6 mov       %rax,0xB0(%rsp)
063c3afe mov       $1,%eax
063c3b03 xor       %ecx,%ecx
063c3b05 cmpq      $0,0xB0(%rsp)
063c3b0e cmove     %rcx,%rax
063c3b12 cmp       $1,%rax
063c3b16 je        0x0000`0000`063C`3B34
063c3b18 jmp       0x0000`0000`063C`3B68
063c3b1a lea       0x63D`03B0,%rcx
063c3b21 lea       0x63D`08E0,%r8
063c3b28 mov       $0x1C,%edx
063c3b2d call      0x0000`0000`063B`2030
063c3b32 ud2
063c3b34 mov       0xB0(%rsp),%rax
063c3b3c mov       %rax,0x120(%rsp)
063c3b44 mov       (%rax),%ecx
063c3b46 call      0x0000`0000`063C`1430
063c3b4b sub       0xA0(%rsp),%rax
063c3b53 mov       %rax,0x58(%rsp)
063c3b58 setb      %al
063c3b5b test      $1,%al
063c3b5d jne       0x0000`0000`063C`3C10
063c3b63 jmp       0x0000`0000`063C`3C01
063c3b68 mov       $0x2C3,%eax
063c3b6d sub       0xA0(%rsp),%rax
063c3b75 mov       %rax,0x50(%rsp)
063c3b7a setb      %al
063c3b7d test      $1,%al
063c3b7f jne       0x0000`0000`063C`3B90
063c3b81 mov       0x50(%rsp),%rax
063c3b86 mov       %rax,0xA8(%rsp)
063c3b8e jmp       0x0000`0000`063C`3BAA
063c3b90 lea       0x63D`03D0,%rcx
063c3b97 lea       0x63D`08F8,%r8
063c3b9e mov       $0x21,%edx
063c3ba3 call      0x0000`0000`063B`2030
063c3ba8 ud2
063c3baa mov       0x80(%rsp),%rcx
063c3bb2 mov       $1,%edx
063c3bb7 call      0x0000`0000`063C`8970
063c3bbc mov       %rax,%rcx
063c3bbf lea       0x63D`09A0,%rax
063c3bc6 mov       %rax,0xB8(%rsp)
063c3bce mov       0xB8(%rsp),%r8
063c3bd6 call      0x0000`0000`063B`1C20
063c3bdb mov       %eax,%ecx
063c3bdd xor       %r8d,%r8d
063c3be0 call      0x0000`0000`063B`18D0
063c3be5 mov       %eax,%ecx
063c3be7 mov       0x78(%rsp),%eax
063c3beb mov       %ecx,0x12C(%rsp)
063c3bf2 sub       %ecx,%eax
063c3bf4 mov       %eax,0x4C(%rsp)
063c3bf8 setb      %al
063c3bfb test      $1,%al
063c3bfd jne       0x0000`0000`063C`3C5A
063c3bff jmp       0x0000`0000`063C`3C2A
063c3c01 mov       0x58(%rsp),%rax
063c3c06 mov       %rax,0xA8(%rsp)
063c3c0e jmp       0x0000`0000`063C`3BAA
063c3c10 lea       0x63D`03D0,%rcx
063c3c17 lea       0x63D`0910,%r8
063c3c1e mov       $0x21,%edx
063c3c23 call      0x0000`0000`063B`2030
063c3c28 ud2
063c3c2a mov       0x4C(%rsp),%eax
063c3c2e mov       %eax,0x130(%rsp)
063c3c35 movl      $0,0xC4(%rsp)
063c3c40 mov       0xA8(%rsp),%rax
063c3c48 sub       $1,%rax
063c3c4c mov       %rax,0x40(%rsp)
063c3c51 setb      %al
063c3c54 test      $1,%al
063c3c56 jne       0x0000`0000`063C`3CB4
063c3c58 jmp       0x0000`0000`063C`3C74
063c3c5a lea       0x63D`03D0,%rcx
063c3c61 lea       0x63D`0928,%r8
063c3c68 mov       $0x21,%edx
063c3c6d call      0x0000`0000`063B`2030
063c3c72 ud2
063c3c74 mov       0x40(%rsp),%rax
063c3c79 movq      $0,0xC8(%rsp)
063c3c85 mov       %rax,0xD0(%rsp)
063c3c8d mov       0xC8(%rsp),%rcx
063c3c95 mov       0xD0(%rsp),%rdx
063c3c9d call      0x0000`0000`063B`15F0
063c3ca2 mov       %rax,0xD8(%rsp)
063c3caa mov       %rdx,0xE0(%rsp)
063c3cb2 jmp       0x0000`0000`063C`3CCE
063c3cb4 lea       0x63D`03D0,%rcx
063c3cbb lea       0x63D`0940,%r8
063c3cc2 mov       $0x21,%edx
063c3cc7 call      0x0000`0000`063B`2030
063c3ccc ud2
063c3cce lea       0xD8(%rsp),%rcx
063c3cd6 call      0x0000`0000`063B`15C0
063c3cdb mov       %rdx,0xF0(%rsp)
063c3ce3 mov       %rax,0xE8(%rsp)
063c3ceb mov       0xE8(%rsp),%rax
063c3cf3 test      %rax,%rax
063c3cf6 je        0x0000`0000`063C`3DDB
063c3cfc jmp       0x0000`0000`063C`3CFE
063c3cfe jmp       0x0000`0000`063C`3D02
063c3d00 ud2
063c3d02 mov       0xA0(%rsp),%rax
063c3d0a mov       %rax,0x38(%rsp)
063c3d0f cmp       $0x2C3,%rax
063c3d15 setb      %al
063c3d18 test      $1,%al
063c3d1a jne       0x0000`0000`063C`3D1E
063c3d1c jmp       0x0000`0000`063C`3D4B
063c3d1e mov       0x38(%rsp),%rcx
063c3d23 lea       0x63D`0A20,%rax
063c3d2a mov       (%rax,%rcx),%al
063c3d2d mov       %al,0x137(%rsp)
063c3d34 movzbl    %al,%eax
063c3d37 add       0xC4(%rsp),%eax
063c3d3e mov       %eax,0x34(%rsp)
063c3d42 setb      %al
063c3d45 test      $1,%al
063c3d47 jne       0x0000`0000`063C`3D7D
063c3d49 jmp       0x0000`0000`063C`3D63
063c3d4b mov       0x38(%rsp),%rcx
063c3d50 lea       0x63D`0958,%r8
063c3d57 mov       $0x2C3,%edx
063c3d5c call      0x0000`0000`063B`2090
063c3d61 ud2
063c3d63 mov       0x4C(%rsp),%eax
063c3d67 mov       0x34(%rsp),%ecx
063c3d6b mov       %ecx,0xC4(%rsp)
063c3d72 cmp       %eax,0xC4(%rsp)
063c3d79 ja        0x0000`0000`063C`3DDB
063c3d7b jmp       0x0000`0000`063C`3D97
063c3d7d lea       0x63D`03B0,%rcx
063c3d84 lea       0x63D`0970,%r8
063c3d8b mov       $0x1C,%edx
063c3d90 call      0x0000`0000`063B`2030
063c3d95 ud2
063c3d97 mov       0xA0(%rsp),%rax
063c3d9f add       $1,%rax
063c3da3 mov       %rax,0x28(%rsp)
063c3da8 setb      %al
063c3dab test      $1,%al
063c3dad jne       0x0000`0000`063C`3DC1
063c3daf mov       0x28(%rsp),%rax
063c3db4 mov       %rax,0xA0(%rsp)
063c3dbc jmp       0x0000`0000`063C`3CCE
063c3dc1 lea       0x63D`03B0,%rcx
063c3dc8 lea       0x63D`0988,%r8
063c3dcf mov       $0x1C,%edx
063c3dd4 call      0x0000`0000`063B`2030
063c3dd9 ud2
063c3ddb mov       0xA0(%rsp),%rax
063c3de3 and       $1,%rax
063c3de7 cmp       $1,%rax
063c3deb sete      %al
063c3dee mov       %al,0x27(%rsp)
063c3df2 mov       0x27(%rsp),%al
063c3df6 and       $1,%al
063c3df8 movzbl    %al,%eax
063c3dfb add       $0x138,%rsp
063c3e02 ret

core::ops::function::FnOnce::call_once<enum$<log::MaybeStaticStr> (*)(str),tuple$<str> >:
063c3e10 sub       $0x48,%rsp
063c3e14 mov       %rcx,%rax
063c3e17 mov       %rax,0x28(%rsp)
063c3e1c mov       %rdx,0x30(%rsp)
063c3e21 mov       %r8,0x38(%rsp)
063c3e26 mov       0x30(%rsp),%rdx
063c3e2b mov       0x38(%rsp),%r8
063c3e30 call      0x0000`0000`063A`D5A0
063c3e35 mov       0x28(%rsp),%rax
063c3e3a add       $0x48,%rsp
063c3e3e ret

core::ptr::drop_in_place<ref$<tuple$<> > >:
063c3e40 push      %rax
063c3e41 mov       %rcx,(%rsp)
063c3e45 pop       %rax
063c3e46 ret

core::ptr::drop_in_place<log::NopLogger>:
063c3e50 push      %rax
063c3e51 mov       %rcx,(%rsp)
063c3e55 pop       %rax
063c3e56 ret

enum$<core::option::Option<str>, 1, 18446744073709551615, Some>::map<str,enum$<log::MaybeStaticStr>,enum$<log::MaybeStaticStr> (*)(str)>:
063c3e60 sub       $0x88,%rsp
063c3e67 mov       %rcx,0x20(%rsp)
063c3e6c mov       %rcx,0x28(%rsp)
063c3e71 mov       %rdx,0x30(%rsp)
063c3e76 mov       %r8,0x38(%rsp)
063c3e7b movb      $0,0x6F(%rsp)
063c3e80 movb      $1,0x6F(%rsp)
063c3e85 mov       0x30(%rsp),%rax
063c3e8a test      %rax,%rax
063c3e8d setne     %al
063c3e90 movzbl    %al,%eax
063c3e93 je        0x0000`0000`063C`3E9B
063c3e95 jmp       0x0000`0000`063C`3E97
063c3e97 jmp       0x0000`0000`063C`3EA9
063c3e99 ud2
063c3e9b mov       0x20(%rsp),%rax
063c3ea0 movq      $2,(%rax)
063c3ea7 jmp       0x0000`0000`063C`3F02
063c3ea9 mov       0x30(%rsp),%rcx
063c3eae mov       0x38(%rsp),%rax
063c3eb3 mov       %rcx,0x78(%rsp)
063c3eb8 mov       %rax,0x80(%rsp)
063c3ec0 movb      $0,0x6F(%rsp)
063c3ec5 mov       %rcx,0x58(%rsp)
063c3eca mov       %rax,0x60(%rsp)
063c3ecf mov       0x58(%rsp),%rdx
063c3ed4 mov       0x60(%rsp),%r8
063c3ed9 lea       0x40(%rsp),%rcx
063c3ede call      0x0000`0000`063C`3E10
063c3ee3 mov       0x20(%rsp),%rax
063c3ee8 mov       0x40(%rsp),%rcx
063c3eed mov       %rcx,(%rax)
063c3ef0 mov       0x48(%rsp),%rcx
063c3ef5 mov       %rcx,8(%rax)
063c3ef9 mov       0x50(%rsp),%rcx
063c3efe mov       %rcx,0x10(%rax)
063c3f02 testb     $1,0x6F(%rsp)
063c3f07 jne       0x0000`0000`063C`3F16
063c3f09 mov       0x28(%rsp),%rax
063c3f0e add       $0x88,%rsp
063c3f15 ret
063c3f16 jmp       0x0000`0000`063C`3F09

core::option::impl$5::clone<u32>:
063c3f20 sub       $0x48,%rsp
063c3f24 mov       %rcx,0x28(%rsp)
063c3f29 mov       %rcx,0x38(%rsp)
063c3f2e mov       (%rcx),%eax
063c3f30 test      %rax,%rax
063c3f33 je        0x0000`0000`063C`3F3B
063c3f35 jmp       0x0000`0000`063C`3F37
063c3f37 jmp       0x0000`0000`063C`3F45
063c3f39 ud2
063c3f3b movl      $0,0x30(%rsp)
063c3f43 jmp       0x0000`0000`063C`3F6C
063c3f45 mov       0x28(%rsp),%rcx
063c3f4a add       $4,%rcx
063c3f4e mov       %rcx,0x40(%rsp)
063c3f53 call      0x0000`0000`063C`4010
063c3f58 mov       %eax,0x24(%rsp)
063c3f5c mov       0x24(%rsp),%eax
063c3f60 mov       %eax,0x34(%rsp)
063c3f64 movl      $1,0x30(%rsp)
063c3f6c mov       0x30(%rsp),%eax
063c3f70 mov       0x34(%rsp),%edx
063c3f74 add       $0x48,%rsp
063c3f78 ret

core::option::impl$5::clone<enum$<log::MaybeStaticStr> >:
063c3f80 sub       $0x68,%rsp
063c3f84 mov       %rdx,0x28(%rsp)
063c3f89 mov       %rcx,0x30(%rsp)
063c3f8e mov       %rcx,0x38(%rsp)
063c3f93 mov       %rdx,0x58(%rsp)
063c3f98 mov       (%rdx),%rax
063c3f9b add       $0xFFFF`FFFF`FFFF`FFFE,%rax
063c3f9f setne     %al
063c3fa2 movzbl    %al,%eax
063c3fa5 je        0x0000`0000`063C`3FAD
063c3fa7 jmp       0x0000`0000`063C`3FA9
063c3fa9 jmp       0x0000`0000`063C`3FBB
063c3fab ud2
063c3fad mov       0x30(%rsp),%rax
063c3fb2 movq      $2,(%rax)
063c3fb9 jmp       0x0000`0000`063C`3FEE
063c3fbb mov       0x28(%rsp),%rdx
063c3fc0 mov       %rdx,0x60(%rsp)
063c3fc5 lea       0x40(%rsp),%rcx
063c3fca call      0x0000`0000`063A`D5D0
063c3fcf mov       0x30(%rsp),%rax
063c3fd4 mov       0x40(%rsp),%rcx
063c3fd9 mov       %rcx,(%rax)
063c3fdc mov       0x48(%rsp),%rcx
063c3fe1 mov       %rcx,8(%rax)
063c3fe5 mov       0x50(%rsp),%rcx
063c3fea mov       %rcx,0x10(%rax)
063c3fee mov       0x38(%rsp),%rax
063c3ff3 add       $0x68,%rsp
063c3ff7 ret

core::hint::spin_loop:
063c4000 ret

core::clone::impls::impl$8::clone:
063c4010 push      %rax
063c4011 mov       %rcx,(%rsp)
063c4015 mov       (%rcx),%eax
063c4017 pop       %rcx
063c4018 ret

core::fmt::Arguments::new_v1:
063c4020 sub       $0xC8,%rsp
063c4027 mov       %r9,0x30(%rsp)
063c402c mov       %r8,0x38(%rsp)
063c4031 mov       %rdx,0x40(%rsp)
063c4036 mov       %rcx,0x48(%rsp)
063c403b mov       %rcx,0x50(%rsp)
063c4040 mov       0xF0(%rsp),%rax
063c4048 mov       %rax,0x58(%rsp)
063c404d mov       %rdx,0xA8(%rsp)
063c4055 mov       %r8,0xB0(%rsp)
063c405d mov       %r9,0xB8(%rsp)
063c4065 mov       %rax,0xC0(%rsp)
063c406d cmp       %rax,%r8
063c4070 jb        0x0000`0000`063C`4089
063c4072 mov       0x58(%rsp),%rax
063c4077 add       $1,%rax
063c407b mov       %rax,0x28(%rsp)
063c4080 setb      %al
063c4083 test      $1,%al
063c4085 jne       0x0000`0000`063C`40B3
063c4087 jmp       0x0000`0000`063C`409B
063c4089 movb      $1,0x67(%rsp)
063c408e testb     $1,0x67(%rsp)
063c4093 jne       0x0000`0000`063C`4126
063c4099 jmp       0x0000`0000`063C`40CD
063c409b mov       0x38(%rsp),%rax
063c40a0 mov       0x28(%rsp),%rcx
063c40a5 cmp       %rcx,%rax
063c40a8 seta      %al
063c40ab and       $1,%al
063c40ad mov       %al,0x67(%rsp)
063c40b1 jmp       0x0000`0000`063C`408E
063c40b3 lea       0x63D`0D80,%rcx
063c40ba lea       0x63D`0D60,%r8
063c40c1 mov       $0x1C,%edx
063c40c6 call      0x0000`0000`063B`2030
063c40cb ud2
063c40cd mov       0x50(%rsp),%rax
063c40d2 mov       0x48(%rsp),%rcx
063c40d7 mov       0x58(%rsp),%rdx
063c40dc mov       0x30(%rsp),%r8
063c40e1 mov       0x38(%rsp),%r9
063c40e6 mov       0x40(%rsp),%r10
063c40eb movq      $0,0x98(%rsp)
063c40f7 mov       %r10,(%rcx)
063c40fa mov       %r9,8(%rcx)
063c40fe mov       0x98(%rsp),%r10
063c4106 mov       0xA0(%rsp),%r9
063c410e mov       %r10,0x10(%rcx)
063c4112 mov       %r9,0x18(%rcx)
063c4116 mov       %r8,0x20(%rcx)
063c411a mov       %rdx,0x28(%rcx)
063c411e add       $0xC8,%rsp
063c4125 ret
063c4126 lea       0x68(%rsp),%rcx
063c412b lea       0x63D`0DA8,%rdx
063c4132 mov       $1,%r8d
063c4138 lea       0x63D`0DB8,%r9
063c413f xor       %eax,%eax
063c4141 movq      $0,0x20(%rsp)
063c414a call      0x0000`0000`063C`4020
063c414f lea       0x63D`0DB8,%rdx
063c4156 lea       0x68(%rsp),%rcx
063c415b call      0x0000`0000`063B`2140
063c4160 ud2

core::fmt::impl$51::clone:
063c4170 sub       $0x38,%rsp
063c4174 mov       %rcx,%rax
063c4177 mov       %rax,0x28(%rsp)
063c417c mov       %rdx,0x30(%rsp)
063c4181 mov       $0x30,%r8d
063c4187 call      0x0000`0000`063B`BDE0
063c418c mov       0x28(%rsp),%rax
063c4191 add       $0x38,%rsp
063c4195 ret

core::sync::atomic::AtomicUsize::compare_exchange:
063c41a0 sub       $0x88,%rsp
063c41a7 mov       %r9b,0x3F(%rsp)
063c41ac mov       %r8,0x40(%rsp)
063c41b1 mov       %rdx,0x48(%rsp)
063c41b6 mov       0xB0(%rsp),%al
063c41bd mov       %al,0x57(%rsp)
063c41c1 mov       %rcx,0x60(%rsp)
063c41c6 mov       %rdx,0x68(%rsp)
063c41cb mov       %r8,0x70(%rsp)
063c41d0 mov       %r9b,0x7F(%rsp)
063c41d5 mov       %rcx,0x58(%rsp)
063c41da mov       %rcx,0x80(%rsp)
063c41e2 mov       0x57(%rsp),%al
063c41e6 mov       0x3F(%rsp),%r9b
063c41eb mov       0x40(%rsp),%r8
063c41f0 mov       0x48(%rsp),%rdx
063c41f5 mov       0x58(%rsp),%rcx
063c41fa mov       %al,0x20(%rsp)
063c41fe call      0x0000`0000`063C`43C0
063c4203 mov       %rax,0x28(%rsp)
063c4208 mov       %rdx,0x30(%rsp)
063c420d mov       0x30(%rsp),%rdx
063c4212 mov       0x28(%rsp),%rax
063c4217 add       $0x88,%rsp
063c421e ret

core::sync::atomic::AtomicUsize::load:
063c4220 sub       $0x58,%rsp
063c4224 mov       %dl,0x37(%rsp)
063c4228 mov       %rcx,0x40(%rsp)
063c422d mov       %dl,0x4F(%rsp)
063c4231 mov       %rcx,0x38(%rsp)
063c4236 mov       %rcx,0x50(%rsp)
063c423b mov       0x37(%rsp),%dl
063c423f mov       0x38(%rsp),%rcx
063c4244 call      0x0000`0000`063B`11C0
063c4249 mov       %rax,0x28(%rsp)
063c424e mov       0x28(%rsp),%rax
063c4253 add       $0x58,%rsp
063c4257 ret

core::sync::atomic::AtomicUsize::store:
063c4260 sub       $0x58,%rsp
063c4264 mov       %r8b,0x27(%rsp)
063c4269 mov       %rdx,0x28(%rsp)
063c426e mov       %rcx,0x38(%rsp)
063c4273 mov       %rdx,0x40(%rsp)
063c4278 mov       %r8b,0x4F(%rsp)
063c427d mov       %rcx,0x30(%rsp)
063c4282 mov       %rcx,0x50(%rsp)
063c4287 mov       0x27(%rsp),%r8b
063c428c mov       0x28(%rsp),%rdx
063c4291 mov       0x30(%rsp),%rcx
063c4296 call      0x0000`0000`063C`42A0
063c429b add       $0x58,%rsp
063c429f ret

core::sync::atomic::atomic_store<usize>:
063c42a0 sub       $0xB8,%rsp
063c42a7 mov       %rdx,0x28(%rsp)
063c42ac mov       %rcx,0x30(%rsp)
063c42b1 mov       %r8b,0x47(%rsp)
063c42b6 mov       %rcx,0xA8(%rsp)
063c42be mov       %rdx,0xB0(%rsp)
063c42c6 movzbl    0x47(%rsp),%eax
063c42cb mov       %rax,0x38(%rsp)
063c42d0 mov       0x38(%rsp),%rax
063c42d5 lea       0x63C`4398,%rcx
063c42dc movslq    (%rcx,%rax,4),%rax
063c42e0 add       %rcx,%rax
063c42e3 jmp       *%rax
063c42e5 ud2
063c42e7 mov       0x30(%rsp),%rax
063c42ec mov       0x28(%rsp),%rcx
063c42f1 mov       %rcx,(%rax)
063c42f4 jmp       0x0000`0000`063C`4368
063c42f6 mov       0x30(%rsp),%rax
063c42fb mov       0x28(%rsp),%rcx
063c4300 mov       %rcx,(%rax)
063c4303 jmp       0x0000`0000`063C`4368
063c4305 lea       0x48(%rsp),%rcx
063c430a lea       0x63D`0EE0,%rdx
063c4311 mov       $1,%r8d
063c4317 lea       0x63D`0E18,%r9
063c431e xor       %eax,%eax
063c4320 movq      $0,0x20(%rsp)
063c4329 call      0x0000`0000`063C`4020
063c432e jmp       0x0000`0000`063C`4383
063c4330 lea       0x78(%rsp),%rcx
063c4335 lea       0x63D`0E08,%rdx
063c433c mov       $1,%r8d
063c4342 lea       0x63D`0E18,%r9
063c4349 xor       %eax,%eax
063c434b movq      $0,0x20(%rsp)
063c4354 call      0x0000`0000`063C`4020
063c4359 jmp       0x0000`0000`063C`4370
063c435b mov       0x30(%rsp),%rcx
063c4360 mov       0x28(%rsp),%rax
063c4365 xchg      %rax,(%rcx)
063c4368 add       $0xB8,%rsp
063c436f ret
063c4370 lea       0x63D`0E98,%rdx
063c4377 lea       0x78(%rsp),%rcx
063c437c call      0x0000`0000`063B`2140
063c4381 ud2
063c4383 lea       0x63D`0EF0,%rdx
063c438a lea       0x48(%rsp),%rcx
063c438f call      0x0000`0000`063B`2140
063c4394 ud2

core::sync::atomic::spin_loop_hint:
063c43b0 sub       $0x28,%rsp
063c43b4 call      0x0000`0000`063C`4000
063c43b9 add       $0x28,%rsp
063c43bd ret

core::sync::atomic::atomic_compare_exchange<usize>:
063c43c0 sub       $0x158,%rsp
063c43c7 mov       %r8,0x50(%rsp)
063c43cc mov       %rdx,0x58(%rsp)
063c43d1 mov       %rcx,0x60(%rsp)
063c43d6 mov       0x180(%rsp),%al
063c43dd mov       %rcx,0x128(%rsp)
063c43e5 mov       %rdx,0x130(%rsp)
063c43ed mov       %r8,0x138(%rsp)
063c43f5 mov       %r9b,0x147(%rsp)
063c43fd mov       %r9b,0x90(%rsp)
063c4405 mov       %al,0x91(%rsp)
063c440c movzbl    0x90(%rsp),%eax
063c4414 mov       %rax,0x68(%rsp)
063c4419 mov       0x68(%rsp),%rax
063c441e lea       0x63C`47EC,%rcx
063c4425 movslq    (%rcx,%rax,4),%rax
063c4429 add       %rcx,%rax
063c442c jmp       *%rax
063c442e ud2
063c4430 movzbl    0x91(%rsp),%eax
063c4438 cmp       $0,%rax
063c443c je        0x0000`0000`063C`46B6
063c4442 jmp       0x0000`0000`063C`44E2
063c4447 movzbl    0x91(%rsp),%eax
063c444f cmp       $0,%rax
063c4453 je        0x0000`0000`063C`4686
063c4459 jmp       0x0000`0000`063C`44E2
063c445e movzbl    0x91(%rsp),%eax
063c4466 mov       %rax,0x48(%rsp)
063c446b test      %rax,%rax
063c446e je        0x0000`0000`063C`4626
063c4474 jmp       0x0000`0000`063C`4476
063c4476 mov       0x48(%rsp),%rax
063c447b sub       $2,%rax
063c447f je        0x0000`0000`063C`4656
063c4485 jmp       0x0000`0000`063C`44E2
063c4487 movzbl    0x91(%rsp),%eax
063c448f mov       %rax,0x40(%rsp)
063c4494 test      %rax,%rax
063c4497 je        0x0000`0000`063C`45C9
063c449d jmp       0x0000`0000`063C`449F
063c449f mov       0x40(%rsp),%rax
063c44a4 sub       $2,%rax
063c44a8 je        0x0000`0000`063C`45F6
063c44ae jmp       0x0000`0000`063C`44E2
063c44b0 movzbl    0x91(%rsp),%eax
063c44b8 mov       %rax,0x38(%rsp)
063c44bd test      %rax,%rax
063c44c0 je        0x0000`0000`063C`450F
063c44c2 jmp       0x0000`0000`063C`44C4
063c44c4 mov       0x38(%rsp),%rax
063c44c9 sub       $2,%rax
063c44cd je        0x0000`0000`063C`453C
063c44cf jmp       0x0000`0000`063C`44D1
063c44d1 mov       0x38(%rsp),%rax
063c44d6 sub       $4,%rax
063c44da je        0x0000`0000`063C`4569
063c44e0 jmp       0x0000`0000`063C`44E2
063c44e2 movzbl    0x91(%rsp),%eax
063c44ea mov       %rax,0x30(%rsp)
063c44ef sub       $1,%rax
063c44f3 je        0x0000`0000`063C`4714
063c44f9 jmp       0x0000`0000`063C`44FB
063c44fb mov       0x30(%rsp),%rax
063c4500 sub       $3,%rax
063c4504 je        0x0000`0000`063C`4742
063c450a jmp       0x0000`0000`063C`46E6
063c450f mov       0x60(%rsp),%rcx
063c4514 mov       0x50(%rsp),%rdx
063c4519 mov       0x58(%rsp),%rax
063c451e lock cmpxchg %rdx,(%rcx)
063c4523 mov       %rax,%rcx
063c4526 sete      %al
063c4529 and       $1,%al
063c452b mov       %rcx,0x80(%rsp)
063c4533 mov       %al,0x88(%rsp)
063c453a jmp       0x0000`0000`063C`4594
063c453c mov       0x60(%rsp),%rcx
063c4541 mov       0x50(%rsp),%rdx
063c4546 mov       0x58(%rsp),%rax
063c454b lock cmpxchg %rdx,(%rcx)
063c4550 mov       %rax,%rcx
063c4553 sete      %al
063c4556 and       $1,%al
063c4558 mov       %rcx,0x80(%rsp)
063c4560 mov       %al,0x88(%rsp)
063c4567 jmp       0x0000`0000`063C`4594
063c4569 mov       0x60(%rsp),%rcx
063c456e mov       0x50(%rsp),%rdx
063c4573 mov       0x58(%rsp),%rax
063c4578 lock cmpxchg %rdx,(%rcx)
063c457d mov       %rax,%rcx
063c4580 sete      %al
063c4583 and       $1,%al
063c4585 mov       %rcx,0x80(%rsp)
063c458d mov       %al,0x88(%rsp)
063c4594 mov       0x80(%rsp),%rax
063c459c mov       %rax,0x28(%rsp)
063c45a1 mov       %rax,0x148(%rsp)
063c45a9 mov       0x88(%rsp),%al
063c45b0 mov       %al,%cl
063c45b2 and       $1,%cl
063c45b5 mov       %cl,0x157(%rsp)
063c45bc test      $1,%al
063c45be jne       0x0000`0000`063C`47C7
063c45c4 jmp       0x0000`0000`063C`47B2
063c45c9 mov       0x60(%rsp),%rcx
063c45ce mov       0x50(%rsp),%rdx
063c45d3 mov       0x58(%rsp),%rax
063c45d8 lock cmpxchg %rdx,(%rcx)
063c45dd mov       %rax,%rcx
063c45e0 sete      %al
063c45e3 and       $1,%al
063c45e5 mov       %rcx,0x80(%rsp)
063c45ed mov       %al,0x88(%rsp)
063c45f4 jmp       0x0000`0000`063C`4594
063c45f6 mov       0x60(%rsp),%rcx
063c45fb mov       0x50(%rsp),%rdx
063c4600 mov       0x58(%rsp),%rax
063c4605 lock cmpxchg %rdx,(%rcx)
063c460a mov       %rax,%rcx
063c460d sete      %al
063c4610 and       $1,%al
063c4612 mov       %rcx,0x80(%rsp)
063c461a mov       %al,0x88(%rsp)
063c4621 jmp       0x0000`0000`063C`4594
063c4626 mov       0x60(%rsp),%rcx
063c462b mov       0x50(%rsp),%rdx
063c4630 mov       0x58(%rsp),%rax
063c4635 lock cmpxchg %rdx,(%rcx)
063c463a mov       %rax,%rcx
063c463d sete      %al
063c4640 and       $1,%al
063c4642 mov       %rcx,0x80(%rsp)
063c464a mov       %al,0x88(%rsp)
063c4651 jmp       0x0000`0000`063C`4594
063c4656 mov       0x60(%rsp),%rcx
063c465b mov       0x50(%rsp),%rdx
063c4660 mov       0x58(%rsp),%rax
063c4665 lock cmpxchg %rdx,(%rcx)
063c466a mov       %rax,%rcx
063c466d sete      %al
063c4670 and       $1,%al
063c4672 mov       %rcx,0x80(%rsp)
063c467a mov       %al,0x88(%rsp)
063c4681 jmp       0x0000`0000`063C`4594
063c4686 mov       0x60(%rsp),%rcx
063c468b mov       0x50(%rsp),%rdx
063c4690 mov       0x58(%rsp),%rax
063c4695 lock cmpxchg %rdx,(%rcx)
063c469a mov       %rax,%rcx
063c469d sete      %al
063c46a0 and       $1,%al
063c46a2 mov       %rcx,0x80(%rsp)
063c46aa mov       %al,0x88(%rsp)
063c46b1 jmp       0x0000`0000`063C`4594
063c46b6 mov       0x60(%rsp),%rcx
063c46bb mov       0x50(%rsp),%rdx
063c46c0 mov       0x58(%rsp),%rax
063c46c5 lock cmpxchg %rdx,(%rcx)
063c46ca mov       %rax,%rcx
063c46cd sete      %al
063c46d0 and       $1,%al
063c46d2 mov       %rcx,0x80(%rsp)
063c46da mov       %al,0x88(%rsp)
063c46e1 jmp       0x0000`0000`063C`4594
063c46e6 lea       0xF8(%rsp),%rcx
063c46ee lea       0x63D`0F48,%rdx
063c46f5 mov       $1,%r8d
063c46fb lea       0x63D`0E18,%r9
063c4702 xor       %eax,%eax
063c4704 movq      $0,0x20(%rsp)
063c470d call      0x0000`0000`063C`4020
063c4712 jmp       0x0000`0000`063C`4770
063c4714 lea       0xC8(%rsp),%rcx
063c471c lea       0x63D`1010,%rdx
063c4723 mov       $1,%r8d
063c4729 lea       0x63D`0E18,%r9
063c4730 xor       %eax,%eax
063c4732 movq      $0,0x20(%rsp)
063c473b call      0x0000`0000`063C`4020
063c4740 jmp       0x0000`0000`063C`479C
063c4742 lea       0x98(%rsp),%rcx
063c474a lea       0x63D`0FB0,%rdx
063c4751 mov       $1,%r8d
063c4757 lea       0x63D`0E18,%r9
063c475e xor       %eax,%eax
063c4760 movq      $0,0x20(%rsp)
063c4769 call      0x0000`0000`063C`4020
063c476e jmp       0x0000`0000`063C`4786
063c4770 lea       0x63D`0F58,%rdx
063c4777 lea       0xF8(%rsp),%rcx
063c477f call      0x0000`0000`063B`2140
063c4784 ud2
063c4786 lea       0x63D`0FC0,%rdx
063c478d lea       0x98(%rsp),%rcx
063c4795 call      0x0000`0000`063B`2140
063c479a ud2
063c479c lea       0x63D`1020,%rdx
063c47a3 lea       0xC8(%rsp),%rcx
063c47ab call      0x0000`0000`063B`2140
063c47b0 ud2
063c47b2 mov       0x28(%rsp),%rax
063c47b7 mov       %rax,0x78(%rsp)
063c47bc movq      $1,0x70(%rsp)
063c47c5 jmp       0x0000`0000`063C`47DA
063c47c7 mov       0x28(%rsp),%rax
063c47cc mov       %rax,0x78(%rsp)
063c47d1 movq      $0,0x70(%rsp)
063c47da mov       0x70(%rsp),%rax
063c47df mov       0x78(%rsp),%rdx
063c47e4 add       $0x158,%rsp
063c47eb ret

core::ptr::const_ptr::impl$0::is_null<usize>:
063c4800 sub       $0x38,%rsp
063c4804 mov       %rcx,0x30(%rsp)
063c4809 mov       %rcx,0x28(%rsp)
063c480e mov       0x28(%rsp),%rcx
063c4813 xor       %eax,%eax
063c4815 mov       %eax,%edx
063c4817 call      0x0000`0000`063C`4900
063c481c mov       %al,0x27(%rsp)
063c4820 mov       0x27(%rsp),%al
063c4824 and       $1,%al
063c4826 movzbl    %al,%eax
063c4829 add       $0x38,%rsp
063c482d ret

core::ptr::const_ptr::impl$0::is_null<u8>:
063c4830 sub       $0x38,%rsp
063c4834 mov       %rcx,0x28(%rsp)
063c4839 mov       %rcx,0x30(%rsp)
063c483e mov       0x28(%rsp),%rcx
063c4843 xor       %eax,%eax
063c4845 mov       %eax,%edx
063c4847 call      0x0000`0000`063C`4900
063c484c mov       %al,0x27(%rsp)
063c4850 mov       0x27(%rsp),%al
063c4854 and       $1,%al
063c4856 movzbl    %al,%eax
063c4859 add       $0x38,%rsp
063c485d ret

core::ptr::const_ptr::impl$0::is_null<tuple$<u8,u8> >:
063c4860 sub       $0x38,%rsp
063c4864 mov       %rcx,0x30(%rsp)
063c4869 mov       %rcx,0x28(%rsp)
063c486e mov       0x28(%rsp),%rcx
063c4873 xor       %eax,%eax
063c4875 mov       %eax,%edx
063c4877 call      0x0000`0000`063C`4900
063c487c mov       %al,0x27(%rsp)
063c4880 mov       0x27(%rsp),%al
063c4884 and       $1,%al
063c4886 movzbl    %al,%eax
063c4889 add       $0x38,%rsp
063c488d ret

core::ptr::const_ptr::impl$0::is_null<array$<usize,4> >:
063c4890 sub       $0x38,%rsp
063c4894 mov       %rcx,0x30(%rsp)
063c4899 mov       %rcx,0x28(%rsp)
063c489e mov       0x28(%rsp),%rcx
063c48a3 xor       %eax,%eax
063c48a5 mov       %eax,%edx
063c48a7 call      0x0000`0000`063C`4900
063c48ac mov       %al,0x27(%rsp)
063c48b0 mov       0x27(%rsp),%al
063c48b4 and       $1,%al
063c48b6 movzbl    %al,%eax
063c48b9 add       $0x38,%rsp
063c48bd ret

core::ptr::const_ptr::impl$0::cast<u8,tuple$<> >:
063c48c0 push      %rax
063c48c1 mov       %rcx,%rax
063c48c4 mov       %rax,(%rsp)
063c48c8 pop       %rcx
063c48c9 ret

core::ptr::const_ptr::impl$0::cast<usize,array$<usize,4> >:
063c48d0 push      %rax
063c48d1 mov       %rcx,%rax
063c48d4 mov       %rax,(%rsp)
063c48d8 pop       %rcx
063c48d9 ret

core::ptr::const_ptr::impl$0::cast<usize,tuple$<> >:
063c48e0 push      %rax
063c48e1 mov       %rcx,%rax
063c48e4 mov       %rax,(%rsp)
063c48e8 pop       %rcx
063c48e9 ret

core::ptr::const_ptr::impl$0::cast<array$<usize,4>,tuple$<> >:
063c48f0 push      %rax
063c48f1 mov       %rcx,%rax
063c48f4 mov       %rax,(%rsp)
063c48f8 pop       %rcx
063c48f9 ret

core::ptr::const_ptr::impl$0::guaranteed_eq<u8>:
063c4900 sub       $0x20,%rsp
063c4904 mov       %rcx,8(%rsp)
063c4909 mov       %rdx,0x10(%rsp)
063c490e cmp       %rdx,%rcx
063c4911 sete      %al
063c4914 and       $1,%al
063c4916 mov       %al,0x1F(%rsp)
063c491a mov       0x1F(%rsp),%al
063c491e mov       %al,7(%rsp)
063c4922 mov       7(%rsp),%al
063c4926 and       $1,%al
063c4928 movzbl    %al,%eax
063c492b add       $0x20,%rsp
063c492f ret

core::ptr::const_ptr::impl$0::align_offset<u8>:
063c4930 sub       $0xB8,%rsp
063c4937 mov       %rdx,0x38(%rsp)
063c493c mov       %rcx,%rax
063c493f mov       0x38(%rsp),%rcx
063c4944 mov       %rax,0x40(%rsp)
063c4949 mov       %rax,0x90(%rsp)
063c4951 mov       %rcx,0x98(%rsp)
063c4959 mov       %rcx,0xA0(%rsp)
063c4961 mov       %rcx,0xA8(%rsp)
063c4969 mov       %rcx,%rax
063c496c shr       $1,%rax
063c496f movabs    $0x5555`5555`5555`5555,%rdx
063c4979 and       %rdx,%rax
063c497c sub       %rax,%rcx
063c497f movabs    $0x3333`3333`3333`3333,%rdx
063c4989 mov       %rcx,%rax
063c498c and       %rdx,%rax
063c498f shr       $2,%rcx
063c4993 and       %rdx,%rcx
063c4996 add       %rcx,%rax
063c4999 mov       %rax,%rcx
063c499c shr       $4,%rcx
063c49a0 add       %rcx,%rax
063c49a3 movabs    $0xF0F`0F0F`0F0F`0F0F,%rcx
063c49ad and       %rcx,%rax
063c49b0 movabs    $0x101`0101`0101`0101,%rcx
063c49ba imul      %rcx,%rax
063c49be shr       $0x38,%rax
063c49c2 mov       %rax,0xB0(%rsp)
063c49ca mov       0xB0(%rsp),%rax
063c49d2 cmp       $1,%eax
063c49d5 sete      %al
063c49d8 mov       %al,0x4F(%rsp)
063c49dc mov       0x4F(%rsp),%al
063c49e0 xor       $0xFF,%al
063c49e2 test      $1,%al
063c49e4 jne       0x0000`0000`063C`4A1C
063c49e6 mov       0x38(%rsp),%rax
063c49eb mov       0x40(%rsp),%rcx
063c49f0 mov       %rcx,0x80(%rsp)
063c49f8 mov       %rax,0x88(%rsp)
063c4a00 mov       0x80(%rsp),%rcx
063c4a08 mov       0x88(%rsp),%rdx
063c4a10 call      0x0000`0000`063C`2760
063c4a15 mov       %rax,0x30(%rsp)
063c4a1a jmp       0x0000`0000`063C`4A58
063c4a1c lea       0x50(%rsp),%rcx
063c4a21 lea       0x63D`1068,%rdx
063c4a28 mov       $1,%r8d
063c4a2e lea       0x63D`1078,%r9
063c4a35 xor       %eax,%eax
063c4a37 movq      $0,0x20(%rsp)
063c4a40 call      0x0000`0000`063B`4170
063c4a45 lea       0x63D`10F8,%rdx
063c4a4c lea       0x50(%rsp),%rcx
063c4a51 call      0x0000`0000`063B`2140
063c4a56 ud2
063c4a58 mov       0x30(%rsp),%rax
063c4a5d add       $0xB8,%rsp
063c4a64 ret

core::ptr::const_ptr::impl$0::align_offset::rt_impl<u8>:
063c4a70 sub       $0x38,%rsp
063c4a74 mov       %rcx,0x28(%rsp)
063c4a79 mov       %rdx,0x30(%rsp)
063c4a7e call      0x0000`0000`063C`9630
063c4a83 mov       %rax,0x20(%rsp)
063c4a88 mov       0x20(%rsp),%rax
063c4a8d add       $0x38,%rsp
063c4a91 ret

core::ptr::const_ptr::impl$1::len<u8>:
063c4aa0 sub       $0x38,%rsp
063c4aa4 mov       %rcx,0x28(%rsp)
063c4aa9 mov       %rdx,0x30(%rsp)
063c4aae call      0x0000`0000`063B`3A90
063c4ab3 mov       %rax,0x20(%rsp)
063c4ab8 mov       0x20(%rsp),%rax
063c4abd add       $0x38,%rsp
063c4ac1 ret

core::ptr::const_ptr::impl$1::len<usize>:
063c4ad0 sub       $0x38,%rsp
063c4ad4 mov       %rcx,0x28(%rsp)
063c4ad9 mov       %rdx,0x30(%rsp)
063c4ade call      0x0000`0000`063B`3AC0
063c4ae3 mov       %rax,0x20(%rsp)
063c4ae8 mov       0x20(%rsp),%rax
063c4aed add       $0x38,%rsp
063c4af1 ret

core::ptr::const_ptr::impl$1::as_ptr<str>:
063c4b00 sub       $0x10,%rsp
063c4b04 mov       %rcx,%rax
063c4b07 mov       %rax,(%rsp)
063c4b0b mov       %rdx,8(%rsp)
063c4b10 add       $0x10,%rsp
063c4b14 ret

core::ptr::const_ptr::impl$1::as_ptr<u32>:
063c4b20 sub       $0x10,%rsp
063c4b24 mov       %rcx,%rax
063c4b27 mov       %rax,(%rsp)
063c4b2b mov       %rdx,8(%rsp)
063c4b30 add       $0x10,%rsp
063c4b34 ret

core::ptr::const_ptr::impl$1::as_ptr<u8>:
063c4b40 sub       $0x10,%rsp
063c4b44 mov       %rcx,%rax
063c4b47 mov       %rax,(%rsp)
063c4b4b mov       %rdx,8(%rsp)
063c4b50 add       $0x10,%rsp
063c4b54 ret

core::ptr::const_ptr::impl$1::as_ptr<usize>:
063c4b60 sub       $0x10,%rsp
063c4b64 mov       %rcx,%rax
063c4b67 mov       %rax,(%rsp)
063c4b6b mov       %rdx,8(%rsp)
063c4b70 add       $0x10,%rsp
063c4b74 ret

core::cmp::impls::impl$9::eq<slice$<u8>,slice$<u8> >:
063c4b80 sub       $0x38,%rsp
063c4b84 mov       %rdx,%rax
063c4b87 mov       %rcx,%rdx
063c4b8a mov       %rdx,0x28(%rsp)
063c4b8f mov       %rax,0x30(%rsp)
063c4b94 mov       (%rdx),%rcx
063c4b97 mov       8(%rdx),%rdx
063c4b9b mov       (%rax),%r8
063c4b9e mov       8(%rax),%r9
063c4ba2 call      0x0000`0000`063C`38B0
063c4ba7 mov       %al,0x27(%rsp)
063c4bab mov       0x27(%rsp),%al
063c4baf and       $1,%al
063c4bb1 movzbl    %al,%eax
063c4bb4 add       $0x38,%rsp
063c4bb8 ret

core::convert::impl$4::from<usize>:
063c4bc0 push      %rax
063c4bc1 mov       %rcx,%rax
063c4bc4 mov       %rax,(%rsp)
063c4bc8 pop       %rcx
063c4bc9 ret

core::iter::adapters::filter::Filter<core::slice::iter::Iter<u8>,core::str::count::char_count_general_case::closure_env$0>::new<core::slice::iter::Iter<u8>,core::str::count::char_count_general_case::closure_env$0>:
063c4bd0 sub       $0x28,%rsp
063c4bd4 mov       %rcx,0x10(%rsp)
063c4bd9 mov       %rdx,0x18(%rsp)
063c4bde mov       %rcx,(%rsp)
063c4be2 mov       %rdx,8(%rsp)
063c4be7 mov       (%rsp),%rax
063c4beb mov       8(%rsp),%rdx
063c4bf0 add       $0x28,%rsp
063c4bf4 ret

core::iter::adapters::filter::impl$2::count<core::slice::iter::Iter<u8>,core::str::count::char_count_general_case::closure_env$0>:
063c4c00 sub       $0x58,%rsp
063c4c04 mov       %rdx,0x38(%rsp)
063c4c09 mov       %rcx,0x40(%rsp)
063c4c0e mov       %rcx,0x48(%rsp)
063c4c13 mov       %rdx,0x50(%rsp)
063c4c18 call      0x0000`0000`063C`4C60
063c4c1d mov       0x38(%rsp),%rdx
063c4c22 mov       0x40(%rsp),%rcx
063c4c27 call      0x0000`0000`063C`4CD0
063c4c2c mov       %rax,0x28(%rsp)
063c4c31 mov       %rdx,0x30(%rsp)
063c4c36 mov       0x30(%rsp),%rdx
063c4c3b mov       0x28(%rsp),%rcx
063c4c40 call      0x0000`0000`063B`9120
063c4c45 mov       %rax,0x20(%rsp)
063c4c4a mov       0x20(%rsp),%rax
063c4c4f add       $0x58,%rsp
063c4c53 ret

core::iter::adapters::filter::impl$2::count::to_usize<ref$<u8>,core::str::count::char_count_general_case::closure_env$0>:
063c4c60 ret

core::iter::adapters::filter::impl$2::count::to_usize::closure$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0>:
063c4c70 sub       $0x48,%rsp
063c4c74 mov       %rdx,0x30(%rsp)
063c4c79 mov       %rcx,0x40(%rsp)
063c4c7e lea       0x30(%rsp),%rax
063c4c83 mov       %rax,0x38(%rsp)
063c4c88 mov       0x38(%rsp),%rdx
063c4c8d call      0x0000`0000`063B`B570
063c4c92 mov       %al,0x2F(%rsp)
063c4c96 mov       0x2F(%rsp),%al
063c4c9a and       $1,%al
063c4c9c movzbl    %al,%eax
063c4c9f mov       %rax,0x20(%rsp)
063c4ca4 mov       0x20(%rsp),%rax
063c4ca9 add       $0x48,%rsp
063c4cad ret

core::iter::traits::collect::impl$0::into_iter<core::slice::iter::Chunks<usize> >:
063c4cb0 mov       %rcx,%rax
063c4cb3 mov       (%rdx),%r8
063c4cb6 mov       %r8,(%rcx)
063c4cb9 mov       8(%rdx),%r8
063c4cbd mov       %r8,8(%rcx)
063c4cc1 mov       0x10(%rdx),%rdx
063c4cc5 mov       %rdx,0x10(%rcx)
063c4cc9 ret

core::iter::traits::iterator::Iterator::map<core::slice::iter::Iter<u8>,usize,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> >:
063c4cd0 sub       $0x48,%rsp
063c4cd4 mov       %rcx,0x30(%rsp)
063c4cd9 mov       %rdx,0x38(%rsp)
063c4cde call      0x0000`0000`063B`9020
063c4ce3 mov       %rax,0x20(%rsp)
063c4ce8 mov       %rdx,0x28(%rsp)
063c4ced mov       0x28(%rsp),%rdx
063c4cf2 mov       0x20(%rsp),%rax
063c4cf7 add       $0x48,%rsp
063c4cfb ret

core::iter::traits::iterator::Iterator::filter<core::slice::iter::Iter<u8>,core::str::count::char_count_general_case::closure_env$0>:
063c4d00 sub       $0x48,%rsp
063c4d04 mov       %rcx,0x30(%rsp)
063c4d09 mov       %rdx,0x38(%rsp)
063c4d0e call      0x0000`0000`063C`4BD0
063c4d13 mov       %rax,0x20(%rsp)
063c4d18 mov       %rdx,0x28(%rsp)
063c4d1d mov       0x28(%rsp),%rdx
063c4d22 mov       0x20(%rsp),%rax
063c4d27 add       $0x48,%rsp
063c4d2b ret

core::iter::traits::iterator::Iterator::enumerate<core::slice::iter::Iter<core::fmt::rt::v1::Argument> >:
063c4d30 sub       $0x38,%rsp
063c4d34 mov       %rcx,%rax
063c4d37 mov       %rax,0x20(%rsp)
063c4d3c mov       %rdx,0x28(%rsp)
063c4d41 mov       %r8,0x30(%rsp)
063c4d46 call      0x0000`0000`063C`9A40
063c4d4b mov       0x20(%rsp),%rax
063c4d50 add       $0x38,%rsp
063c4d54 ret

core::iter::traits::iterator::Iterator::enumerate<core::slice::iter::Iter<core::fmt::ArgumentV1> >:
063c4d60 sub       $0x38,%rsp
063c4d64 mov       %rcx,%rax
063c4d67 mov       %rax,0x20(%rsp)
063c4d6c mov       %rdx,0x28(%rsp)
063c4d71 mov       %r8,0x30(%rsp)
063c4d76 call      0x0000`0000`063C`9A70
063c4d7b mov       0x20(%rsp),%rax
063c4d80 add       $0x38,%rsp
063c4d84 ret

core::iter::traits::iterator::Iterator::fold<core::slice::iter::Iter<u8>,usize,core::iter::adapters::map::map_fold::closure_env$0<ref$<u8>,usize,usize,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0>,core::iter::traits::accum::impl$48::sum::closure_env$0<core::iter::adapters::map::Map<core::slice::iter::Iter<u8>,core::iter::adapters::filter::impl$2::count::to_usize::closure_env$0<ref$<u8>,core::str::count::char_count_general_case::closure_env$0> > > > >:
063c4d90 sub       $0x78,%rsp
063c4d94 mov       %rcx,0x30(%rsp)
063c4d99 mov       %rdx,0x38(%rsp)
063c4d9e mov       %r8,0x68(%rsp)
063c4da3 mov       %r8,0x48(%rsp)
063c4da8 lea       0x30(%rsp),%rcx
063c4dad call      0x0000`0000`063C`6DF0
063c4db2 mov       %rax,0x50(%rsp)
063c4db7 mov       $1,%eax
063c4dbc xor       %ecx,%ecx
063c4dbe cmpq      $0,0x50(%rsp)
063c4dc4 cmove     %rcx,%rax
063c4dc8 cmp       $1,%rax
063c4dcc jne       0x0000`0000`063C`4E02
063c4dce mov       0x50(%rsp),%rax
063c4dd3 mov       %rax,0x70(%rsp)
063c4dd8 mov       0x48(%rsp),%rcx
063c4ddd mov       %rcx,0x58(%rsp)
063c4de2 mov       %rax,0x60(%rsp)
063c4de7 mov       0x58(%rsp),%rdx
063c4dec mov       0x60(%rsp),%r8
063c4df1 lea       0x40(%rsp),%rcx
063c4df6 call      0x0000`0000`063B`9060
063c4dfb mov       %rax,0x28(%rsp)
063c4e00 jmp       0x0000`0000`063C`4E12
063c4e02 jmp       0x0000`0000`063C`4E04
063c4e04 jmp       0x0000`0000`063C`4E06
063c4e06 jmp       0x0000`0000`063C`4E08
063c4e08 mov       0x48(%rsp),%rax
063c4e0d add       $0x78,%rsp
063c4e11 ret
063c4e12 mov       0x28(%rsp),%rax
063c4e17 mov       %rax,0x48(%rsp)
063c4e1c jmp       0x0000`0000`063C`4DA8

core::iter::traits::iterator::Iterator::rev<core::slice::iter::IterMut<core::mem::maybe_uninit::MaybeUninit<u8> > >:
063c4e20 sub       $0x48,%rsp
063c4e24 mov       %rcx,0x38(%rsp)
063c4e29 mov       %rdx,0x40(%rsp)
063c4e2e call      0x0000`0000`063B`9E50
063c4e33 mov       %rax,0x28(%rsp)
063c4e38 mov       %rdx,0x30(%rsp)
063c4e3d mov       0x30(%rsp),%rdx
063c4e42 mov       0x28(%rsp),%rax
063c4e47 add       $0x48,%rsp
063c4e4b ret

core::iter::traits::iterator::Iterator::cloned<core::slice::iter::Iter<u8>,u8>:
063c4e50 sub       $0x48,%rsp
063c4e54 mov       %rcx,0x38(%rsp)
063c4e59 mov       %rdx,0x40(%rsp)
063c4e5e call      0x0000`0000`063C`2900
063c4e63 mov       %rax,0x28(%rsp)
063c4e68 mov       %rdx,0x30(%rsp)
063c4e6d mov       0x30(%rsp),%rdx
063c4e72 mov       0x28(%rsp),%rax
063c4e77 add       $0x48,%rsp
063c4e7b ret

core::slice::iter::impl$0::into_iter<usize>:
063c4e80 sub       $0x48,%rsp
063c4e84 mov       %rcx,0x38(%rsp)
063c4e89 mov       %rdx,0x40(%rsp)
063c4e8e call      0x0000`0000`063C`0270
063c4e93 mov       %rax,0x28(%rsp)
063c4e98 mov       %rdx,0x30(%rsp)
063c4e9d mov       0x30(%rsp),%rdx
063c4ea2 mov       0x28(%rsp),%rax
063c4ea7 add       $0x48,%rsp
063c4eab ret

core::slice::iter::impl$0::into_iter<u8>:
063c4eb0 sub       $0x48,%rsp
063c4eb4 mov       %rcx,0x38(%rsp)
063c4eb9 mov       %rdx,0x40(%rsp)
063c4ebe call      0x0000`0000`063C`01E0
063c4ec3 mov       %rax,0x28(%rsp)
063c4ec8 mov       %rdx,0x30(%rsp)
063c4ecd mov       0x30(%rsp),%rdx
063c4ed2 mov       0x28(%rsp),%rax
063c4ed7 add       $0x48,%rsp
063c4edb ret

core::slice::iter::impl$0::into_iter<tuple$<u8,u8> >:
063c4ee0 sub       $0x48,%rsp
063c4ee4 mov       %rcx,0x38(%rsp)
063c4ee9 mov       %rdx,0x40(%rsp)
063c4eee call      0x0000`0000`063C`0210
063c4ef3 mov       %rax,0x28(%rsp)
063c4ef8 mov       %rdx,0x30(%rsp)
063c4efd mov       0x30(%rsp),%rdx
063c4f02 mov       0x28(%rsp),%rax
063c4f07 add       $0x48,%rsp
063c4f0b ret

core::slice::iter::impl$0::into_iter<array$<usize,4> >:
063c4f10 sub       $0x48,%rsp
063c4f14 mov       %rcx,0x38(%rsp)
063c4f19 mov       %rdx,0x40(%rsp)
063c4f1e call      0x0000`0000`063C`0240
063c4f23 mov       %rax,0x28(%rsp)
063c4f28 mov       %rdx,0x30(%rsp)
063c4f2d mov       0x30(%rsp),%rdx
063c4f32 mov       0x28(%rsp),%rax
063c4f37 add       $0x48,%rsp
063c4f3b ret

core::slice::iter::Iter<tuple$<u8,u8> >::new<tuple$<u8,u8> >:
063c4f40 sub       $0xC8,%rsp
063c4f47 mov       %rdx,0x38(%rsp)
063c4f4c mov       %rcx,0x60(%rsp)
063c4f51 mov       %rdx,0x68(%rsp)
063c4f56 call      0x0000`0000`063C`0160
063c4f5b mov       %rax,0x40(%rsp)
063c4f60 mov       %rax,0x70(%rsp)
063c4f65 mov       0x40(%rsp),%rcx
063c4f6a call      0x0000`0000`063C`4860
063c4f6f jmp       0x0000`0000`063C`4F71
063c4f71 mov       $2,%eax
063c4f76 cmp       $0,%rax
063c4f7a jne       0x0000`0000`063C`4FC0
063c4f7c mov       0x38(%rsp),%rcx
063c4f81 mov       0x40(%rsp),%rax
063c4f86 mov       %rax,0xA0(%rsp)
063c4f8e mov       %rcx,0xA8(%rsp)
063c4f96 mov       %rax,0xB0(%rsp)
063c4f9e mov       %rcx,0xB8(%rsp)
063c4fa6 add       %rcx,%rax
063c4fa9 mov       %rax,0xC0(%rsp)
063c4fb1 mov       0xC0(%rsp),%rax
063c4fb9 mov       %rax,0x30(%rsp)
063c4fbe jmp       0x0000`0000`063C`5014
063c4fc0 mov       0x40(%rsp),%rax
063c4fc5 mov       0x38(%rsp),%rcx
063c4fca mov       %rax,0x78(%rsp)
063c4fcf mov       %rcx,0x80(%rsp)
063c4fd7 mov       %rax,0x88(%rsp)
063c4fdf mov       %rcx,0x90(%rsp)
063c4fe7 shl       $1,%rcx
063c4feb add       %rcx,%rax
063c4fee mov       %rax,0x98(%rsp)
063c4ff6 mov       0x98(%rsp),%rax
063c4ffe mov       %rax,0x58(%rsp)
063c5003 mov       0x40(%rsp),%rcx
063c5008 call      0x0000`0000`063C`2870
063c500d mov       %rax,0x28(%rsp)
063c5012 jmp       0x0000`0000`063C`5020
063c5014 mov       0x30(%rsp),%rax
063c5019 mov       %rax,0x58(%rsp)
063c501e jmp       0x0000`0000`063C`5003
063c5020 mov       0x28(%rsp),%rcx
063c5025 mov       0x58(%rsp),%rax
063c502a mov       %rcx,0x48(%rsp)
063c502f mov       %rax,0x50(%rsp)
063c5034 mov       0x48(%rsp),%rax
063c5039 mov       0x50(%rsp),%rdx
063c503e add       $0xC8,%rsp
063c5045 ret

core::slice::iter::Iter<array$<usize,4> >::new<array$<usize,4> >:
063c5050 sub       $0xC8,%rsp
063c5057 mov       %rdx,0x38(%rsp)
063c505c mov       %rcx,0x60(%rsp)
063c5061 mov       %rdx,0x68(%rsp)
063c5066 call      0x0000`0000`063C`01C0
063c506b mov       %rax,0x40(%rsp)
063c5070 mov       %rax,0x70(%rsp)
063c5075 mov       0x40(%rsp),%rcx
063c507a call      0x0000`0000`063C`4890
063c507f jmp       0x0000`0000`063C`5081
063c5081 mov       $0x20,%eax
063c5086 cmp       $0,%rax
063c508a jne       0x0000`0000`063C`50D0
063c508c mov       0x38(%rsp),%rcx
063c5091 mov       0x40(%rsp),%rax
063c5096 mov       %rax,0xA0(%rsp)
063c509e mov       %rcx,0xA8(%rsp)
063c50a6 mov       %rax,0xB0(%rsp)
063c50ae mov       %rcx,0xB8(%rsp)
063c50b6 add       %rcx,%rax
063c50b9 mov       %rax,0xC0(%rsp)
063c50c1 mov       0xC0(%rsp),%rax
063c50c9 mov       %rax,0x30(%rsp)
063c50ce jmp       0x0000`0000`063C`5124
063c50d0 mov       0x40(%rsp),%rax
063c50d5 mov       0x38(%rsp),%rcx
063c50da mov       %rax,0x78(%rsp)
063c50df mov       %rcx,0x80(%rsp)
063c50e7 mov       %rax,0x88(%rsp)
063c50ef mov       %rcx,0x90(%rsp)
063c50f7 shl       $5,%rcx
063c50fb add       %rcx,%rax
063c50fe mov       %rax,0x98(%rsp)
063c5106 mov       0x98(%rsp),%rax
063c510e mov       %rax,0x58(%rsp)
063c5113 mov       0x40(%rsp),%rcx
063c5118 call      0x0000`0000`063C`2830
063c511d mov       %rax,0x28(%rsp)
063c5122 jmp       0x0000`0000`063C`5130
063c5124 mov       0x30(%rsp),%rax
063c5129 mov       %rax,0x58(%rsp)
063c512e jmp       0x0000`0000`063C`5113
063c5130 mov       0x28(%rsp),%rcx
063c5135 mov       0x58(%rsp),%rax
063c513a mov       %rcx,0x48(%rsp)
063c513f mov       %rax,0x50(%rsp)
063c5144 mov       0x48(%rsp),%rax
063c5149 mov       0x50(%rsp),%rdx
063c514e add       $0xC8,%rsp
063c5155 ret

core::slice::iter::Iter<core::fmt::rt::v1::Argument>::new<core::fmt::rt::v1::Argument>:
063c5160 sub       $0xC8,%rsp
063c5167 mov       %rdx,0x38(%rsp)
063c516c mov       %rcx,0x60(%rsp)
063c5171 mov       %rdx,0x68(%rsp)
063c5176 call      0x0000`0000`063B`91D0
063c517b mov       %rax,0x40(%rsp)
063c5180 mov       %rax,0x70(%rsp)
063c5185 mov       0x40(%rsp),%rcx
063c518a call      0x0000`0000`063B`8FA0
063c518f jmp       0x0000`0000`063C`5191
063c5191 mov       $0x38,%eax
063c5196 cmp       $0,%rax
063c519a jne       0x0000`0000`063C`51E0
063c519c mov       0x38(%rsp),%rcx
063c51a1 mov       0x40(%rsp),%rax
063c51a6 mov       %rax,0xA0(%rsp)
063c51ae mov       %rcx,0xA8(%rsp)
063c51b6 mov       %rax,0xB0(%rsp)
063c51be mov       %rcx,0xB8(%rsp)
063c51c6 add       %rcx,%rax
063c51c9 mov       %rax,0xC0(%rsp)
063c51d1 mov       0xC0(%rsp),%rax
063c51d9 mov       %rax,0x30(%rsp)
063c51de jmp       0x0000`0000`063C`5234
063c51e0 mov       0x40(%rsp),%rax
063c51e5 mov       0x38(%rsp),%rcx
063c51ea mov       %rax,0x78(%rsp)
063c51ef mov       %rcx,0x80(%rsp)
063c51f7 mov       %rax,0x88(%rsp)
063c51ff mov       %rcx,0x90(%rsp)
063c5207 imul      $0x38,%rcx
063c520b add       %rcx,%rax
063c520e mov       %rax,0x98(%rsp)
063c5216 mov       0x98(%rsp),%rax
063c521e mov       %rax,0x58(%rsp)
063c5223 mov       0x40(%rsp),%rcx
063c5228 call      0x0000`0000`063C`27D0
063c522d mov       %rax,0x28(%rsp)
063c5232 jmp       0x0000`0000`063C`5240
063c5234 mov       0x30(%rsp),%rax
063c5239 mov       %rax,0x58(%rsp)
063c523e jmp       0x0000`0000`063C`5223
063c5240 mov       0x28(%rsp),%rcx
063c5245 mov       0x58(%rsp),%rax
063c524a mov       %rcx,0x48(%rsp)
063c524f mov       %rax,0x50(%rsp)
063c5254 mov       0x48(%rsp),%rax
063c5259 mov       0x50(%rsp),%rdx
063c525e add       $0xC8,%rsp
063c5265 ret

core::slice::iter::Iter<core::fmt::ArgumentV1>::new<core::fmt::ArgumentV1>:
063c5270 sub       $0xC8,%rsp
063c5277 mov       %rdx,0x38(%rsp)
063c527c mov       %rcx,0x60(%rsp)
063c5281 mov       %rdx,0x68(%rsp)
063c5286 call      0x0000`0000`063B`6320
063c528b mov       %rax,0x40(%rsp)
063c5290 mov       %rax,0x70(%rsp)
063c5295 mov       0x40(%rsp),%rcx
063c529a call      0x0000`0000`063B`3C60
063c529f jmp       0x0000`0000`063C`52A1
063c52a1 mov       $0x10,%eax
063c52a6 cmp       $0,%rax
063c52aa jne       0x0000`0000`063C`52F0
063c52ac mov       0x38(%rsp),%rcx
063c52b1 mov       0x40(%rsp),%rax
063c52b6 mov       %rax,0xA0(%rsp)
063c52be mov       %rcx,0xA8(%rsp)
063c52c6 mov       %rax,0xB0(%rsp)
063c52ce mov       %rcx,0xB8(%rsp)
063c52d6 add       %rcx,%rax
063c52d9 mov       %rax,0xC0(%rsp)
063c52e1 mov       0xC0(%rsp),%rax
063c52e9 mov       %rax,0x30(%rsp)
063c52ee jmp       0x0000`0000`063C`5344
063c52f0 mov       0x40(%rsp),%rax
063c52f5 mov       0x38(%rsp),%rcx
063c52fa mov       %rax,0x78(%rsp)
063c52ff mov       %rcx,0x80(%rsp)
063c5307 mov       %rax,0x88(%rsp)
063c530f mov       %rcx,0x90(%rsp)
063c5317 shl       $4,%rcx
063c531b add       %rcx,%rax
063c531e mov       %rax,0x98(%rsp)
063c5326 mov       0x98(%rsp),%rax
063c532e mov       %rax,0x58(%rsp)
063c5333 mov       0x40(%rsp),%rcx
063c5338 call      0x0000`0000`063C`2850
063c533d mov       %rax,0x28(%rsp)
063c5342 jmp       0x0000`0000`063C`5350
063c5344 mov       0x30(%rsp),%rax
063c5349 mov       %rax,0x58(%rsp)
063c534e jmp       0x0000`0000`063C`5333
063c5350 mov       0x28(%rsp),%rcx
063c5355 mov       0x58(%rsp),%rax
063c535a mov       %rcx,0x48(%rsp)
063c535f mov       %rax,0x50(%rsp)
063c5364 mov       0x48(%rsp),%rax
063c5369 mov       0x50(%rsp),%rdx
063c536e add       $0xC8,%rsp
063c5375 ret

core::slice::iter::Iter<usize>::new<usize>:
063c5380 sub       $0xC8,%rsp
063c5387 mov       %rdx,0x38(%rsp)
063c538c mov       %rcx,0x60(%rsp)
063c5391 mov       %rdx,0x68(%rsp)
063c5396 call      0x0000`0000`063C`01A0
063c539b mov       %rax,0x40(%rsp)
063c53a0 mov       %rax,0x70(%rsp)
063c53a5 mov       0x40(%rsp),%rcx
063c53aa call      0x0000`0000`063C`4800
063c53af jmp       0x0000`0000`063C`53B1
063c53b1 mov       $8,%eax
063c53b6 cmp       $0,%rax
063c53ba jne       0x0000`0000`063C`5400
063c53bc mov       0x38(%rsp),%rcx
063c53c1 mov       0x40(%rsp),%rax
063c53c6 mov       %rax,0xA0(%rsp)
063c53ce mov       %rcx,0xA8(%rsp)
063c53d6 mov       %rax,0xB0(%rsp)
063c53de mov       %rcx,0xB8(%rsp)
063c53e6 add       %rcx,%rax
063c53e9 mov       %rax,0xC0(%rsp)
063c53f1 mov       0xC0(%rsp),%rax
063c53f9 mov       %rax,0x30(%rsp)
063c53fe jmp       0x0000`0000`063C`5454
063c5400 mov       0x40(%rsp),%rax
063c5405 mov       0x38(%rsp),%rcx
063c540a mov       %rax,0x78(%rsp)
063c540f mov       %rcx,0x80(%rsp)
063c5417 mov       %rax,0x88(%rsp)
063c541f mov       %rcx,0x90(%rsp)
063c5427 shl       $3,%rcx
063c542b add       %rcx,%rax
063c542e mov       %rax,0x98(%rsp)
063c5436 mov       0x98(%rsp),%rax
063c543e mov       %rax,0x58(%rsp)
063c5443 mov       0x40(%rsp),%rcx
063c5448 call      0x0000`0000`063C`27F0
063c544d mov       %rax,0x28(%rsp)
063c5452 jmp       0x0000`0000`063C`5460
063c5454 mov       0x30(%rsp),%rax
063c5459 mov       %rax,0x58(%rsp)
063c545e jmp       0x0000`0000`063C`5443
063c5460 mov       0x28(%rsp),%rcx
063c5465 mov       0x58(%rsp),%rax
063c546a mov       %rcx,0x48(%rsp)
063c546f mov       %rax,0x50(%rsp)
063c5474 mov       0x48(%rsp),%rax
063c5479 mov       0x50(%rsp),%rdx
063c547e add       $0xC8,%rsp
063c5485 ret

core::slice::iter::Iter<u8>::new<u8>:
063c5490 sub       $0xC8,%rsp
063c5497 mov       %rdx,0x38(%rsp)
063c549c mov       %rcx,0x60(%rsp)
063c54a1 mov       %rdx,0x68(%rsp)
063c54a6 call      0x0000`0000`063C`0180
063c54ab mov       %rax,0x40(%rsp)
063c54b0 mov       %rax,0x70(%rsp)
063c54b5 mov       0x40(%rsp),%rcx
063c54ba call      0x0000`0000`063C`4830
063c54bf jmp       0x0000`0000`063C`54C1
063c54c1 mov       $1,%eax
063c54c6 cmp       $0,%rax
063c54ca jne       0x0000`0000`063C`5510
063c54cc mov       0x38(%rsp),%rcx
063c54d1 mov       0x40(%rsp),%rax
063c54d6 mov       %rax,0xA0(%rsp)
063c54de mov       %rcx,0xA8(%rsp)
063c54e6 mov       %rax,0xB0(%rsp)
063c54ee mov       %rcx,0xB8(%rsp)
063c54f6 add       %rcx,%rax
063c54f9 mov       %rax,0xC0(%rsp)
063c5501 mov       0xC0(%rsp),%rax
063c5509 mov       %rax,0x30(%rsp)
063c550e jmp       0x0000`0000`063C`5560
063c5510 mov       0x38(%rsp),%rcx
063c5515 mov       0x40(%rsp),%rax
063c551a mov       %rax,0x78(%rsp)
063c551f mov       %rcx,0x80(%rsp)
063c5527 mov       %rax,0x88(%rsp)
063c552f mov       %rcx,0x90(%rsp)
063c5537 add       %rcx,%rax
063c553a mov       %rax,0x98(%rsp)
063c5542 mov       0x98(%rsp),%rax
063c554a mov       %rax,0x58(%rsp)
063c554f mov       0x40(%rsp),%rcx
063c5554 call      0x0000`0000`063C`2810
063c5559 mov       %rax,0x28(%rsp)
063c555e jmp       0x0000`0000`063C`556C
063c5560 mov       0x30(%rsp),%rax
063c5565 mov       %rax,0x58(%rsp)
063c556a jmp       0x0000`0000`063C`554F
063c556c mov       0x28(%rsp),%rcx
063c5571 mov       0x58(%rsp),%rax
063c5576 mov       %rcx,0x48(%rsp)
063c557b mov       %rax,0x50(%rsp)
063c5580 mov       0x48(%rsp),%rax
063c5585 mov       0x50(%rsp),%rdx
063c558a add       $0xC8,%rsp
063c5591 ret

core::slice::iter::Iter<u8>::as_slice<u8>:
063c55a0 sub       $0x98,%rsp
063c55a7 mov       %rcx,0x30(%rsp)
063c55ac mov       %rcx,0x58(%rsp)
063c55b1 mov       %rcx,0x68(%rsp)
063c55b6 mov       (%rcx),%rcx
063c55b9 call      0x0000`0000`063C`28D0
063c55be mov       0x30(%rsp),%rcx
063c55c3 mov       %rax,0x38(%rsp)
063c55c8 mov       (%rcx),%rcx
063c55cb mov       %rcx,0x28(%rsp)
063c55d0 mov       %rcx,0x70(%rsp)
063c55d5 call      0x0000`0000`063C`28D0
063c55da mov       0x28(%rsp),%rcx
063c55df mov       %rax,%rdx
063c55e2 mov       0x30(%rsp),%rax
063c55e7 mov       %rdx,0x90(%rsp)
063c55ef movq      $1,0x78(%rsp)
063c55f8 mov       8(%rax),%rax
063c55fc mov       %rax,0x40(%rsp)
063c5601 call      0x0000`0000`063C`28D0
063c5606 mov       0x38(%rsp),%rcx
063c560b mov       %rax,%rdx
063c560e mov       0x40(%rsp),%rax
063c5613 sub       %rdx,%rax
063c5616 mov       %rax,0x80(%rsp)
063c561e mov       0x80(%rsp),%rax
063c5626 mov       %rax,0x88(%rsp)
063c562e mov       %rax,0x60(%rsp)
063c5633 mov       0x60(%rsp),%rdx
063c5638 call      0x0000`0000`063B`A940
063c563d mov       %rax,0x48(%rsp)
063c5642 mov       %rdx,0x50(%rsp)
063c5647 mov       0x50(%rsp),%rdx
063c564c mov       0x48(%rsp),%rax
063c5651 add       $0x98,%rsp
063c5658 ret

core::slice::iter::IterMut<core::mem::maybe_uninit::MaybeUninit<u8> >::new<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c5660 sub       $0xC8,%rsp
063c5667 mov       %rdx,0x38(%rsp)
063c566c mov       %rcx,0x60(%rsp)
063c5671 mov       %rdx,0x68(%rsp)
063c5676 call      0x0000`0000`063C`8900
063c567b mov       %rax,0x40(%rsp)
063c5680 mov       %rax,0x70(%rsp)
063c5685 mov       0x40(%rsp),%rcx
063c568a call      0x0000`0000`063C`7E40
063c568f jmp       0x0000`0000`063C`5691
063c5691 mov       $1,%eax
063c5696 cmp       $0,%rax
063c569a jne       0x0000`0000`063C`56E0
063c569c mov       0x38(%rsp),%rcx
063c56a1 mov       0x40(%rsp),%rax
063c56a6 mov       %rax,0xA0(%rsp)
063c56ae mov       %rcx,0xA8(%rsp)
063c56b6 mov       %rax,0xB0(%rsp)
063c56be mov       %rcx,0xB8(%rsp)
063c56c6 add       %rcx,%rax
063c56c9 mov       %rax,0xC0(%rsp)
063c56d1 mov       0xC0(%rsp),%rax
063c56d9 mov       %rax,0x30(%rsp)
063c56de jmp       0x0000`0000`063C`5730
063c56e0 mov       0x38(%rsp),%rcx
063c56e5 mov       0x40(%rsp),%rax
063c56ea mov       %rax,0x78(%rsp)
063c56ef mov       %rcx,0x80(%rsp)
063c56f7 mov       %rax,0x88(%rsp)
063c56ff mov       %rcx,0x90(%rsp)
063c5707 add       %rcx,%rax
063c570a mov       %rax,0x98(%rsp)
063c5712 mov       0x98(%rsp),%rax
063c571a mov       %rax,0x58(%rsp)
063c571f mov       0x40(%rsp),%rcx
063c5724 call      0x0000`0000`063C`27B0
063c5729 mov       %rax,0x28(%rsp)
063c572e jmp       0x0000`0000`063C`573C
063c5730 mov       0x30(%rsp),%rax
063c5735 mov       %rax,0x58(%rsp)
063c573a jmp       0x0000`0000`063C`571F
063c573c mov       0x28(%rsp),%rcx
063c5741 mov       0x58(%rsp),%rax
063c5746 mov       %rcx,0x48(%rsp)
063c574b mov       %rax,0x50(%rsp)
063c5750 mov       0x48(%rsp),%rax
063c5755 mov       0x50(%rsp),%rdx
063c575a add       $0xC8,%rsp
063c5761 ret

core::slice::iter::Chunks<usize>::new<usize>:
063c5770 sub       $0x18,%rsp
063c5774 mov       %rcx,%rax
063c5777 mov       %rdx,(%rsp)
063c577b mov       %r8,8(%rsp)
063c5780 mov       %r9,0x10(%rsp)
063c5785 mov       %rdx,(%rcx)
063c5788 mov       %r8,8(%rcx)
063c578c mov       %r9,0x10(%rcx)
063c5790 add       $0x18,%rsp
063c5794 ret

core::slice::iter::impl$70::next<usize>:
063c57a0 sub       $0xA8,%rsp
063c57a7 mov       %rcx,%rax
063c57aa mov       %rax,0x38(%rsp)
063c57af mov       %rax,0x78(%rsp)
063c57b4 mov       (%rax),%rcx
063c57b7 mov       8(%rax),%rdx
063c57bb call      0x0000`0000`063B`FE30
063c57c0 mov       %al,0x47(%rsp)
063c57c4 mov       0x47(%rsp),%al
063c57c8 test      $1,%al
063c57ca jne       0x0000`0000`063C`57EF
063c57cc jmp       0x0000`0000`063C`57CE
063c57ce mov       0x38(%rsp),%rax
063c57d3 mov       8(%rax),%rcx
063c57d7 mov       0x10(%rax),%rdx
063c57db call      0x0000`0000`063B`10F0
063c57e0 mov       %rax,0x30(%rsp)
063c57e5 mov       %rax,0x80(%rsp)
063c57ed jmp       0x0000`0000`063C`580A
063c57ef movq      $0,0x48(%rsp)
063c57f8 mov       0x48(%rsp),%rax
063c57fd mov       0x50(%rsp),%rdx
063c5802 add       $0xA8,%rsp
063c5809 ret
063c580a mov       0x30(%rsp),%r9
063c580f mov       0x38(%rsp),%rax
063c5814 mov       (%rax),%rdx
063c5817 mov       8(%rax),%r8
063c581b lea       0x58(%rsp),%rcx
063c5820 lea       0x63D`1190,%rax
063c5827 mov       %rax,0x20(%rsp)
063c582c call      0x0000`0000`063C`07A0
063c5831 mov       0x38(%rsp),%rdx
063c5836 mov       0x58(%rsp),%rcx
063c583b mov       0x60(%rsp),%rax
063c5840 mov       %rcx,0x88(%rsp)
063c5848 mov       %rax,0x90(%rsp)
063c5850 mov       0x68(%rsp),%r9
063c5855 mov       0x70(%rsp),%r8
063c585a mov       %r9,0x98(%rsp)
063c5862 mov       %r8,0xA0(%rsp)
063c586a mov       %r9,(%rdx)
063c586d mov       %r8,8(%rdx)
063c5871 mov       %rcx,0x48(%rsp)
063c5876 mov       %rax,0x50(%rsp)
063c587b jmp       0x0000`0000`063C`57F8

core::unicode::printable::check:
063c5880 sub       $0x198,%rsp
063c5887 mov       %r9,0x98(%rsp)
063c588f mov       %r8,%r10
063c5892 mov       %r10,0xA0(%rsp)
063c589a mov       %rdx,%r11
063c589d mov       %r11,0xA8(%rsp)
063c58a5 mov       %cx,0xB6(%rsp)
063c58ad mov       0x1D0(%rsp),%rax
063c58b5 mov       %rax,0xB8(%rsp)
063c58bd mov       0x1C8(%rsp),%rdx
063c58c5 mov       %rdx,0xC0(%rsp)
063c58cd mov       0x1C0(%rsp),%r8
063c58d5 mov       %r8,0xC8(%rsp)
063c58dd mov       %cx,0x14E(%rsp)
063c58e5 mov       %r11,0x150(%rsp)
063c58ed mov       %r10,0x158(%rsp)
063c58f5 mov       %r9,0x160(%rsp)
063c58fd mov       %r8,0x168(%rsp)
063c5905 mov       %rdx,0x170(%rsp)
063c590d mov       %rax,0x178(%rsp)
063c5915 shr       $8,%cx
063c5919 mov       %cx,0xD4(%rsp)
063c5921 mov       0xA0(%rsp),%rdx
063c5929 mov       0xA8(%rsp),%rcx
063c5931 mov       0xD4(%rsp),%ax
063c5939 mov       %al,0x87(%rsp)
063c5940 mov       %al,0x185(%rsp)
063c5947 movq      $0,0xD8(%rsp)
063c5953 call      0x0000`0000`063C`4EE0
063c5958 mov       %rax,0x88(%rsp)
063c5960 mov       %rdx,0x90(%rsp)
063c5968 mov       0x90(%rsp),%rax
063c5970 mov       0x88(%rsp),%rcx
063c5978 mov       %rcx,0xE0(%rsp)
063c5980 mov       %rax,0xE8(%rsp)
063c5988 lea       0xE0(%rsp),%rcx
063c5990 call      0x0000`0000`063C`7150
063c5995 mov       %rax,0xF0(%rsp)
063c599d mov       0xF0(%rsp),%rax
063c59a5 test      %rax,%rax
063c59a8 setne     %al
063c59ab movzbl    %al,%eax
063c59ae je        0x0000`0000`063C`59B6
063c59b0 jmp       0x0000`0000`063C`59B2
063c59b2 jmp       0x0000`0000`063C`59EC
063c59b4 ud2
063c59b6 mov       0xB8(%rsp),%rdx
063c59be mov       0xC0(%rsp),%rcx
063c59c6 mov       0xB6(%rsp),%ax
063c59ce movzwl    %ax,%eax
063c59d1 mov       %eax,0x124(%rsp)
063c59d8 call      0x0000`0000`063C`01E0
063c59dd mov       %rax,0x70(%rsp)
063c59e2 mov       %rdx,0x78(%rsp)
063c59e7 jmp       0x0000`0000`063C`5B81
063c59ec mov       0xF0(%rsp),%rax
063c59f4 mov       (%rax),%al
063c59f6 mov       %al,0x67(%rsp)
063c59fa mov       %al,0x186(%rsp)
063c5a01 mov       0xF0(%rsp),%rax
063c5a09 mov       1(%rax),%cl
063c5a0c mov       %cl,0x187(%rsp)
063c5a13 mov       0xD8(%rsp),%rax
063c5a1b movzbl    %cl,%ecx
063c5a1e add       %rcx,%rax
063c5a21 mov       %rax,0x68(%rsp)
063c5a26 setb      %al
063c5a29 test      $1,%al
063c5a2b jne       0x0000`0000`063C`5A4B
063c5a2d mov       0x87(%rsp),%al
063c5a34 mov       0x67(%rsp),%cl
063c5a38 mov       0x68(%rsp),%rdx
063c5a3d mov       %rdx,0x188(%rsp)
063c5a45 cmp       %cl,%al
063c5a47 je        0x0000`0000`063C`5A7D
063c5a49 jmp       0x0000`0000`063C`5A65
063c5a4b lea       0x63D`1240,%rcx
063c5a52 lea       0x63D`1228,%r8
063c5a59 mov       $0x1C,%edx
063c5a5e call      0x0000`0000`063B`2030
063c5a63 ud2
063c5a65 mov       0x87(%rsp),%al
063c5a6c mov       0x67(%rsp),%cl
063c5a70 cmp       %cl,%al
063c5a72 jb        0x0000`0000`063C`59B6
063c5a78 jmp       0x0000`0000`063C`5B36
063c5a7d mov       0xC8(%rsp),%rdx
063c5a85 mov       0x98(%rsp),%rcx
063c5a8d mov       0x68(%rsp),%rax
063c5a92 mov       0xD8(%rsp),%r8
063c5a9a mov       %r8,0xF8(%rsp)
063c5aa2 mov       %rax,0x100(%rsp)
063c5aaa mov       0xF8(%rsp),%r8
063c5ab2 mov       0x100(%rsp),%r9
063c5aba lea       0x63D`1260,%rax
063c5ac1 mov       %rax,0x20(%rsp)
063c5ac6 call      0x0000`0000`063B`A100
063c5acb mov       %rax,0x50(%rsp)
063c5ad0 mov       %rdx,0x58(%rsp)
063c5ad5 mov       0x58(%rsp),%rdx
063c5ada mov       0x50(%rsp),%rcx
063c5adf call      0x0000`0000`063C`4EB0
063c5ae4 mov       %rax,0x40(%rsp)
063c5ae9 mov       %rdx,0x48(%rsp)
063c5aee mov       0x48(%rsp),%rax
063c5af3 mov       0x40(%rsp),%rcx
063c5af8 mov       %rcx,0x108(%rsp)
063c5b00 mov       %rax,0x110(%rsp)
063c5b08 lea       0x108(%rsp),%rcx
063c5b10 call      0x0000`0000`063C`6DF0
063c5b15 mov       %rax,0x118(%rsp)
063c5b1d mov       0x118(%rsp),%rax
063c5b25 test      %rax,%rax
063c5b28 setne     %al
063c5b2b movzbl    %al,%eax
063c5b2e je        0x0000`0000`063C`5B36
063c5b30 jmp       0x0000`0000`063C`5B32
063c5b32 jmp       0x0000`0000`063C`5B48
063c5b34 ud2
063c5b36 mov       0x68(%rsp),%rax
063c5b3b mov       %rax,0xD8(%rsp)
063c5b43 jmp       0x0000`0000`063C`5988
063c5b48 mov       0xB6(%rsp),%cx
063c5b50 mov       0x118(%rsp),%rax
063c5b58 mov       (%rax),%al
063c5b5a mov       %al,0x196(%rsp)
063c5b61 cmp       %cl,%al
063c5b63 jne       0x0000`0000`063C`5B08
063c5b65 movb      $0,0xD7(%rsp)
063c5b6d mov       0xD7(%rsp),%al
063c5b74 and       $1,%al
063c5b76 movzbl    %al,%eax
063c5b79 add       $0x198,%rsp
063c5b80 ret
063c5b81 mov       0x78(%rsp),%rdx
063c5b86 mov       0x70(%rsp),%rcx
063c5b8b call      0x0000`0000`063C`4E50
063c5b90 mov       %rdx,0x130(%rsp)
063c5b98 mov       %rax,0x128(%rsp)
063c5ba0 movb      $1,0x13F(%rsp)
063c5ba8 lea       0x128(%rsp),%rcx
063c5bb0 call      0x0000`0000`063C`2930
063c5bb5 mov       %dl,0x141(%rsp)
063c5bbc mov       %al,0x140(%rsp)
063c5bc3 mov       0x140(%rsp),%al
063c5bca and       $1,%al
063c5bcc movzbl    %al,%eax
063c5bcf cmp       $1,%rax
063c5bd3 jne       0x0000`0000`063C`5BEF
063c5bd5 mov       0x141(%rsp),%al
063c5bdc mov       %al,0x3F(%rsp)
063c5be0 mov       %al,0x197(%rsp)
063c5be7 and       $0x80,%al
063c5be9 cmp       $0,%al
063c5beb je        0x0000`0000`063C`5C04
063c5bed jmp       0x0000`0000`063C`5C14
063c5bef mov       0x13F(%rsp),%al
063c5bf6 and       $1,%al
063c5bf8 mov       %al,0xD7(%rsp)
063c5bff jmp       0x0000`0000`063C`5B6D
063c5c04 mov       0x3F(%rsp),%al
063c5c08 movzbl    %al,%eax
063c5c0b mov       %eax,0x148(%rsp)
063c5c12 jmp       0x0000`0000`063C`5C68
063c5c14 mov       0x3F(%rsp),%al
063c5c18 and       $0x7F,%al
063c5c1a movzbl    %al,%eax
063c5c1d shl       $8,%eax
063c5c20 mov       %eax,0x38(%rsp)
063c5c24 lea       0x128(%rsp),%rcx
063c5c2c call      0x0000`0000`063C`2930
063c5c31 mov       %al,0x36(%rsp)
063c5c35 mov       %dl,0x37(%rsp)
063c5c39 mov       0x37(%rsp),%dl
063c5c3d mov       0x36(%rsp),%cl
063c5c41 and       $1,%cl
063c5c44 lea       0x63D`1278,%r8
063c5c4b call      0x0000`0000`063B`17E0
063c5c50 mov       %al,0x35(%rsp)
063c5c54 mov       0x38(%rsp),%eax
063c5c58 mov       0x35(%rsp),%cl
063c5c5c movzbl    %cl,%ecx
063c5c5f or        %ecx,%eax
063c5c61 mov       %eax,0x148(%rsp)
063c5c68 mov       0x148(%rsp),%ecx
063c5c6f mov       0x124(%rsp),%eax
063c5c76 sub       %ecx,%eax
063c5c78 mov       %eax,0x30(%rsp)
063c5c7c seto      %al
063c5c7f test      $1,%al
063c5c81 jne       0x0000`0000`063C`5C9E
063c5c83 mov       0x30(%rsp),%eax
063c5c87 mov       %eax,0x124(%rsp)
063c5c8e cmpl      $0,0x124(%rsp)
063c5c96 jl        0x0000`0000`063C`5BEF
063c5c9c jmp       0x0000`0000`063C`5CB8
063c5c9e lea       0x63D`12B0,%rcx
063c5ca5 lea       0x63D`1290,%r8
063c5cac mov       $0x21,%edx
063c5cb1 call      0x0000`0000`063B`2030
063c5cb6 ud2
063c5cb8 mov       0x13F(%rsp),%al
063c5cbf xor       $0xFF,%al
063c5cc1 and       $1,%al
063c5cc3 mov       %al,0x13F(%rsp)
063c5cca jmp       0x0000`0000`063C`5BA8

core::unicode::printable::is_printable:
063c5cd0 sub       $0x58,%rsp
063c5cd4 mov       %ecx,0x3C(%rsp)
063c5cd8 mov       %ecx,0x4C(%rsp)
063c5cdc mov       %ecx,0x50(%rsp)
063c5ce0 mov       %cx,%ax
063c5ce3 mov       %ax,0x40(%rsp)
063c5ce8 mov       %ax,0x56(%rsp)
063c5ced cmp       $0x1`0000,%ecx
063c5cf3 jb        0x0000`0000`063C`5D02
063c5cf5 mov       0x3C(%rsp),%eax
063c5cf9 cmp       $0x2`0000,%eax
063c5cfe jb        0x0000`0000`063C`5D62
063c5d00 jmp       0x0000`0000`063C`5D53
063c5d02 mov       0x40(%rsp),%cx
063c5d07 mov       0x63D`1328,%rdx
063c5d0e mov       0x63D`1330,%r8
063c5d15 lea       0x63D`1338,%r9
063c5d1c lea       0x63D`1458,%rax
063c5d23 movq      $0x120,0x20(%rsp)
063c5d2c mov       %rax,0x28(%rsp)
063c5d31 movq      $0x12F,0x30(%rsp)
063c5d3a call      0x0000`0000`063C`5880
063c5d3f and       $1,%al
063c5d41 mov       %al,0x43(%rsp)
063c5d45 mov       0x43(%rsp),%al
063c5d49 and       $1,%al
063c5d4b movzbl    %al,%eax
063c5d4e add       $0x58,%rsp
063c5d52 ret
063c5d53 mov       0x3C(%rsp),%ecx
063c5d57 mov       $0x2`A6E0,%eax
063c5d5c cmp       %ecx,%eax
063c5d5e jbe       0x0000`0000`063C`5DAE
063c5d60 jmp       0x0000`0000`063C`5DA7
063c5d62 mov       0x40(%rsp),%cx
063c5d67 mov       0x63D`15E0,%rdx
063c5d6e mov       0x63D`15E8,%r8
063c5d75 lea       0x63D`15F0,%r9
063c5d7c lea       0x63D`16B0,%rax
063c5d83 movq      $0xC0,0x20(%rsp)
063c5d8c mov       %rax,0x28(%rsp)
063c5d91 movq      $0x1B6,0x30(%rsp)
063c5d9a call      0x0000`0000`063C`5880
063c5d9f and       $1,%al
063c5da1 mov       %al,0x43(%rsp)
063c5da5 jmp       0x0000`0000`063C`5D45
063c5da7 movb      $0,0x44(%rsp)
063c5dac jmp       0x0000`0000`063C`5DC0
063c5dae mov       0x3C(%rsp),%eax
063c5db2 cmp       $0x2`A700,%eax
063c5db7 setb      %al
063c5dba and       $1,%al
063c5dbc mov       %al,0x44(%rsp)
063c5dc0 testb     $1,0x44(%rsp)
063c5dc5 jne       0x0000`0000`063C`5DD6
063c5dc7 mov       0x3C(%rsp),%ecx
063c5dcb mov       $0x2`B739,%eax
063c5dd0 cmp       %ecx,%eax
063c5dd2 jbe       0x0000`0000`063C`5DE7
063c5dd4 jmp       0x0000`0000`063C`5DE0
063c5dd6 movb      $0,0x43(%rsp)
063c5ddb jmp       0x0000`0000`063C`5D45
063c5de0 movb      $0,0x45(%rsp)
063c5de5 jmp       0x0000`0000`063C`5DF9
063c5de7 mov       0x3C(%rsp),%eax
063c5deb cmp       $0x2`B740,%eax
063c5df0 setb      %al
063c5df3 and       $1,%al
063c5df5 mov       %al,0x45(%rsp)
063c5df9 testb     $1,0x45(%rsp)
063c5dfe jne       0x0000`0000`063C`5E0F
063c5e00 mov       0x3C(%rsp),%ecx
063c5e04 mov       $0x2`B81E,%eax
063c5e09 cmp       %ecx,%eax
063c5e0b jbe       0x0000`0000`063C`5E20
063c5e0d jmp       0x0000`0000`063C`5E19
063c5e0f movb      $0,0x43(%rsp)
063c5e14 jmp       0x0000`0000`063C`5D45
063c5e19 movb      $0,0x46(%rsp)
063c5e1e jmp       0x0000`0000`063C`5E32
063c5e20 mov       0x3C(%rsp),%eax
063c5e24 cmp       $0x2`B820,%eax
063c5e29 setb      %al
063c5e2c and       $1,%al
063c5e2e mov       %al,0x46(%rsp)
063c5e32 testb     $1,0x46(%rsp)
063c5e37 jne       0x0000`0000`063C`5E48
063c5e39 mov       0x3C(%rsp),%ecx
063c5e3d mov       $0x2`CEA2,%eax
063c5e42 cmp       %ecx,%eax
063c5e44 jbe       0x0000`0000`063C`5E59
063c5e46 jmp       0x0000`0000`063C`5E52
063c5e48 movb      $0,0x43(%rsp)
063c5e4d jmp       0x0000`0000`063C`5D45
063c5e52 movb      $0,0x47(%rsp)
063c5e57 jmp       0x0000`0000`063C`5E6B
063c5e59 mov       0x3C(%rsp),%eax
063c5e5d cmp       $0x2`CEB0,%eax
063c5e62 setb      %al
063c5e65 and       $1,%al
063c5e67 mov       %al,0x47(%rsp)
063c5e6b testb     $1,0x47(%rsp)
063c5e70 jne       0x0000`0000`063C`5E81
063c5e72 mov       0x3C(%rsp),%ecx
063c5e76 mov       $0x2`EBE1,%eax
063c5e7b cmp       %ecx,%eax
063c5e7d jbe       0x0000`0000`063C`5E92
063c5e7f jmp       0x0000`0000`063C`5E8B
063c5e81 movb      $0,0x43(%rsp)
063c5e86 jmp       0x0000`0000`063C`5D45
063c5e8b movb      $0,0x48(%rsp)
063c5e90 jmp       0x0000`0000`063C`5EA4
063c5e92 mov       0x3C(%rsp),%eax
063c5e96 cmp       $0x2`F800,%eax
063c5e9b setb      %al
063c5e9e and       $1,%al
063c5ea0 mov       %al,0x48(%rsp)
063c5ea4 testb     $1,0x48(%rsp)
063c5ea9 jne       0x0000`0000`063C`5EBA
063c5eab mov       0x3C(%rsp),%ecx
063c5eaf mov       $0x2`FA1E,%eax
063c5eb4 cmp       %ecx,%eax
063c5eb6 jbe       0x0000`0000`063C`5ECB
063c5eb8 jmp       0x0000`0000`063C`5EC4
063c5eba movb      $0,0x43(%rsp)
063c5ebf jmp       0x0000`0000`063C`5D45
063c5ec4 movb      $0,0x49(%rsp)
063c5ec9 jmp       0x0000`0000`063C`5EDD
063c5ecb mov       0x3C(%rsp),%eax
063c5ecf cmp       $0x3`0000,%eax
063c5ed4 setb      %al
063c5ed7 and       $1,%al
063c5ed9 mov       %al,0x49(%rsp)
063c5edd testb     $1,0x49(%rsp)
063c5ee2 jne       0x0000`0000`063C`5EF3
063c5ee4 mov       0x3C(%rsp),%ecx
063c5ee8 mov       $0x3`134B,%eax
063c5eed cmp       %ecx,%eax
063c5eef jbe       0x0000`0000`063C`5F04
063c5ef1 jmp       0x0000`0000`063C`5EFD
063c5ef3 movb      $0,0x43(%rsp)
063c5ef8 jmp       0x0000`0000`063C`5D45
063c5efd movb      $0,0x4A(%rsp)
063c5f02 jmp       0x0000`0000`063C`5F16
063c5f04 mov       0x3C(%rsp),%eax
063c5f08 cmp       $0xE`0100,%eax
063c5f0d setb      %al
063c5f10 and       $1,%al
063c5f12 mov       %al,0x4A(%rsp)
063c5f16 testb     $1,0x4A(%rsp)
063c5f1b jne       0x0000`0000`063C`5F2C
063c5f1d mov       0x3C(%rsp),%ecx
063c5f21 mov       $0xE`01F0,%eax
063c5f26 cmp       %ecx,%eax
063c5f28 jbe       0x0000`0000`063C`5F3D
063c5f2a jmp       0x0000`0000`063C`5F36
063c5f2c movb      $0,0x43(%rsp)
063c5f31 jmp       0x0000`0000`063C`5D45
063c5f36 movb      $0,0x4B(%rsp)
063c5f3b jmp       0x0000`0000`063C`5F4F
063c5f3d mov       0x3C(%rsp),%eax
063c5f41 cmp       $0x11`0000,%eax
063c5f46 setb      %al
063c5f49 and       $1,%al
063c5f4b mov       %al,0x4B(%rsp)
063c5f4f testb     $1,0x4B(%rsp)
063c5f54 jne       0x0000`0000`063C`5F60
063c5f56 movb      $1,0x43(%rsp)
063c5f5b jmp       0x0000`0000`063C`5D45
063c5f60 movb      $0,0x43(%rsp)
063c5f65 jmp       0x0000`0000`063C`5D45

core::cmp::impls::impl$21::eq:
063c5f70 sub       $0x10,%rsp
063c5f74 mov       %rcx,(%rsp)
063c5f78 mov       %rdx,8(%rsp)
063c5f7d mov       (%rcx),%rax
063c5f80 cmp       (%rdx),%rax
063c5f83 sete      %al
063c5f86 and       $1,%al
063c5f88 movzbl    %al,%eax
063c5f8b add       $0x10,%rsp
063c5f8f ret

core::cmp::impls::impl$24::eq:
063c5f90 sub       $0x10,%rsp
063c5f94 mov       %rcx,(%rsp)
063c5f98 mov       %rdx,8(%rsp)
063c5f9d mov       (%rcx),%eax
063c5f9f cmp       (%rdx),%eax
063c5fa1 sete      %al
063c5fa4 and       $1,%al
063c5fa6 movzbl    %al,%eax
063c5fa9 add       $0x10,%rsp
063c5fad ret

core::cmp::impls::impl$54::lt:
063c5fb0 sub       $0x10,%rsp
063c5fb4 mov       %rcx,(%rsp)
063c5fb8 mov       %rdx,8(%rsp)
063c5fbd mov       (%rcx),%rax
063c5fc0 cmp       (%rdx),%rax
063c5fc3 setb      %al
063c5fc6 and       $1,%al
063c5fc8 movzbl    %al,%eax
063c5fcb add       $0x10,%rsp
063c5fcf ret

core::cmp::impls::impl$54::ge:
063c5fd0 sub       $0x10,%rsp
063c5fd4 mov       %rcx,(%rsp)
063c5fd8 mov       %rdx,8(%rsp)
063c5fdd mov       (%rcx),%rax
063c5fe0 cmp       (%rdx),%rax
063c5fe3 setae     %al
063c5fe6 and       $1,%al
063c5fe8 movzbl    %al,%eax
063c5feb add       $0x10,%rsp
063c5fef ret

core::cmp::impls::impl$55::cmp:
063c5ff0 sub       $0x28,%rsp
063c5ff4 mov       %rdx,(%rsp)
063c5ff8 mov       %rcx,8(%rsp)
063c5ffd mov       %rcx,0x18(%rsp)
063c6002 mov       %rdx,0x20(%rsp)
063c6007 mov       (%rcx),%rax
063c600a cmp       (%rdx),%rax
063c600d jb        0x0000`0000`063C`6022
063c600f mov       (%rsp),%rcx
063c6013 mov       8(%rsp),%rax
063c6018 mov       (%rax),%rax
063c601b cmp       (%rcx),%rax
063c601e je        0x0000`0000`063C`6037
063c6020 jmp       0x0000`0000`063C`6030
063c6022 movb      $0xFF,0x17(%rsp)
063c6027 mov       0x17(%rsp),%al
063c602b add       $0x28,%rsp
063c602f ret
063c6030 movb      $1,0x17(%rsp)
063c6035 jmp       0x0000`0000`063C`6027
063c6037 movb      $0,0x17(%rsp)
063c603c jmp       0x0000`0000`063C`6027

core::cmp::impls::impl$60::ge:
063c6040 sub       $0x10,%rsp
063c6044 mov       %rcx,(%rsp)
063c6048 mov       %rdx,8(%rsp)
063c604d mov       (%rcx),%eax
063c604f cmp       (%rdx),%eax
063c6051 setae     %al
063c6054 and       $1,%al
063c6056 movzbl    %al,%eax
063c6059 add       $0x10,%rsp
063c605d ret

core::cmp::impls::impl$61::cmp:
063c6060 sub       $0x28,%rsp
063c6064 mov       %rdx,(%rsp)
063c6068 mov       %rcx,8(%rsp)
063c606d mov       %rcx,0x18(%rsp)
063c6072 mov       %rdx,0x20(%rsp)
063c6077 mov       (%rcx),%eax
063c6079 cmp       (%rdx),%eax
063c607b jb        0x0000`0000`063C`608E
063c607d mov       (%rsp),%rcx
063c6081 mov       8(%rsp),%rax
063c6086 mov       (%rax),%eax
063c6088 cmp       (%rcx),%eax
063c608a je        0x0000`0000`063C`60A3
063c608c jmp       0x0000`0000`063C`609C
063c608e movb      $0xFF,0x17(%rsp)
063c6093 mov       0x17(%rsp),%al
063c6097 add       $0x28,%rsp
063c609b ret
063c609c movb      $1,0x17(%rsp)
063c60a1 jmp       0x0000`0000`063C`6093
063c60a3 movb      $0,0x17(%rsp)
063c60a8 jmp       0x0000`0000`063C`6093

core::ops::arith::impl$56::sub:
063c60b0 sub       $0x38,%rsp
063c60b4 mov       %rcx,0x28(%rsp)
063c60b9 mov       %rdx,0x30(%rsp)
063c60be sub       %rdx,%rcx
063c60c1 mov       %rcx,0x20(%rsp)
063c60c6 setb      %al
063c60c9 test      $1,%al
063c60cb jne       0x0000`0000`063C`60D7
063c60cd mov       0x20(%rsp),%rax
063c60d2 add       $0x38,%rsp
063c60d6 ret
063c60d7 lea       0x63D`12B0,%rcx
063c60de lea       0x63D`18E0,%r8
063c60e5 mov       $0x21,%edx
063c60ea call      0x0000`0000`063B`2030
063c60ef ud2

core::ops::arith::impl$59::sub:
063c6100 sub       $0x38,%rsp
063c6104 mov       %ecx,0x30(%rsp)
063c6108 mov       %edx,0x34(%rsp)
063c610c sub       %edx,%ecx
063c610e mov       %ecx,0x2C(%rsp)
063c6112 setb      %al
063c6115 test      $1,%al
063c6117 jne       0x0000`0000`063C`6122
063c6119 mov       0x2C(%rsp),%eax
063c611d add       $0x38,%rsp
063c6121 ret
063c6122 lea       0x63D`12B0,%rcx
063c6129 lea       0x63D`18E0,%r8
063c6130 mov       $0x21,%edx
063c6135 call      0x0000`0000`063B`2030
063c613a ud2

core::ops::arith::impl$168::div:
063c6140 sub       $0x48,%rsp
063c6144 mov       %rdx,0x28(%rsp)
063c6149 mov       %rcx,0x30(%rsp)
063c614e mov       %rcx,0x38(%rsp)
063c6153 mov       %rdx,0x40(%rsp)
063c6158 cmp       $0,%rdx
063c615c sete      %al
063c615f test      $1,%al
063c6161 jne       0x0000`0000`063C`6177
063c6163 mov       0x28(%rsp),%rcx
063c6168 mov       0x30(%rsp),%rax
063c616d xor       %edx,%edx
063c616f div       %rcx
063c6172 add       $0x48,%rsp
063c6176 ret
063c6177 lea       0x63D`1910,%rcx
063c617e lea       0x63D`18F8,%r8
063c6185 mov       $0x19,%edx
063c618a call      0x0000`0000`063B`2030
063c618f ud2

core::ops::arith::impl$171::div:
063c61a0 sub       $0x38,%rsp
063c61a4 mov       %edx,0x28(%rsp)
063c61a8 mov       %ecx,0x2C(%rsp)
063c61ac mov       %ecx,0x30(%rsp)
063c61b0 mov       %edx,0x34(%rsp)
063c61b4 cmp       $0,%edx
063c61b7 sete      %al
063c61ba test      $1,%al
063c61bc jne       0x0000`0000`063C`61CF
063c61be mov       0x28(%rsp),%ecx
063c61c2 mov       0x2C(%rsp),%eax
063c61c6 xor       %edx,%edx
063c61c8 div       %ecx
063c61ca add       $0x38,%rsp
063c61ce ret
063c61cf lea       0x63D`1910,%rcx
063c61d6 lea       0x63D`18F8,%r8
063c61dd mov       $0x19,%edx
063c61e2 call      0x0000`0000`063B`2030
063c61e7 ud2

core::ops::arith::impl$224::rem:
063c61f0 sub       $0x48,%rsp
063c61f4 mov       %rdx,0x28(%rsp)
063c61f9 mov       %rcx,0x30(%rsp)
063c61fe mov       %rcx,0x38(%rsp)
063c6203 mov       %rdx,0x40(%rsp)
063c6208 cmp       $0,%rdx
063c620c sete      %al
063c620f test      $1,%al
063c6211 jne       0x0000`0000`063C`622A
063c6213 mov       0x28(%rsp),%rcx
063c6218 mov       0x30(%rsp),%rax
063c621d xor       %edx,%edx
063c621f div       %rcx
063c6222 mov       %rdx,%rax
063c6225 add       $0x48,%rsp
063c6229 ret
063c622a lea       0x63D`1950,%rcx
063c6231 lea       0x63D`1930,%r8
063c6238 mov       $0x39,%edx
063c623d call      0x0000`0000`063B`2030
063c6242 ud2

core::ops::arith::impl$227::rem:
063c6250 sub       $0x38,%rsp
063c6254 mov       %edx,0x28(%rsp)
063c6258 mov       %ecx,0x2C(%rsp)
063c625c mov       %ecx,0x30(%rsp)
063c6260 mov       %edx,0x34(%rsp)
063c6264 cmp       $0,%edx
063c6267 sete      %al
063c626a test      $1,%al
063c626c jne       0x0000`0000`063C`6281
063c626e mov       0x28(%rsp),%ecx
063c6272 mov       0x2C(%rsp),%eax
063c6276 xor       %edx,%edx
063c6278 div       %ecx
063c627a mov       %edx,%eax
063c627c add       $0x38,%rsp
063c6280 ret
063c6281 lea       0x63D`1950,%rcx
063c6288 lea       0x63D`1930,%r8
063c628f mov       $0x39,%edx
063c6294 call      0x0000`0000`063B`2030
063c6299 ud2

core::fmt::num::imp::fmt_u64:
063c62a0 sub       $0x2D8,%rsp
063c62a7 mov       %r8,0x128(%rsp)
063c62af mov       %dl,0x136(%rsp)
063c62b6 mov       %rcx,0x138(%rsp)
063c62be and       $1,%dl
063c62c1 mov       %dl,0x17F(%rsp)
063c62c8 mov       %r8,0x180(%rsp)
063c62d0 mov       0x1D7(%rsp),%al
063c62d7 mov       %al,0x137(%rsp)
063c62de mov       0x137(%rsp),%dl
063c62e5 lea       0x141(%rsp),%rcx
063c62ed mov       $0x27,%r8d
063c62f3 call      0x0000`0000`063B`BE10
063c62f8 movq      $0x27,0x168(%rsp)
063c6304 lea       0x141(%rsp),%rcx
063c630c mov       %rcx,0x1D8(%rsp)
063c6314 movq      $0x27,0x1E0(%rsp)
063c6320 mov       $0x27,%edx
063c6325 call      0x0000`0000`063C`8900
063c632a mov       %rax,0x120(%rsp)
063c6332 mov       %rax,0x188(%rsp)
063c633a mov       0x63C`CB48,%rcx
063c6341 mov       $0xC8,%edx
063c6346 call      0x0000`0000`063C`0180
063c634b mov       %rax,0x118(%rsp)
063c6353 mov       %rax,0x190(%rsp)
063c635b jmp       0x0000`0000`063C`635D
063c635d mov       $8,%eax
063c6362 cmp       $2,%rax
063c6366 setae     %al
063c6369 xor       $0xFF,%al
063c636b test      $1,%al
063c636d jne       0x0000`0000`063C`637F
063c636f cmpq      $0x2710,0x138(%rsp)
063c637b jae       0x0000`0000`063C`63BD
063c637d jmp       0x0000`0000`063C`6399
063c637f lea       0x63D`1989,%rcx
063c6386 lea       0x63D`1A38,%r8
063c638d mov       $0x33,%edx
063c6392 call      0x0000`0000`063B`2030
063c6397 ud2
063c6399 mov       0x138(%rsp),%rax
063c63a1 mov       %rax,0x170(%rsp)
063c63a9 cmpq      $0x64,0x170(%rsp)
063c63b2 jge       0x0000`0000`063C`6682
063c63b8 jmp       0x0000`0000`063C`666E
063c63bd mov       0x138(%rsp),%rax
063c63c5 mov       $0x2710,%ecx
063c63ca xor       %edx,%edx
063c63cc div       %rcx
063c63cf mov       %rdx,0x110(%rsp)
063c63d7 mov       %rdx,0x198(%rsp)
063c63df mov       0x138(%rsp),%rax
063c63e7 mov       $0x2710,%ecx
063c63ec xor       %edx,%edx
063c63ee div       %rcx
063c63f1 mov       0x110(%rsp),%rdx
063c63f9 mov       %rax,0x138(%rsp)
063c6401 movabs    $0x8000`0000`0000`0000,%rax
063c640b cmp       %rax,%rdx
063c640e sete      %al
063c6411 and       $0,%al
063c6413 test      $1,%al
063c6415 jne       0x0000`0000`063C`6437
063c6417 mov       0x110(%rsp),%rax
063c641f mov       $0x64,%ecx
063c6424 cqto
063c6426 idiv      %rcx
063c6429 shl       $1,%rax
063c642d mov       %rax,0x108(%rsp)
063c6435 jmp       0x0000`0000`063C`6451
063c6437 lea       0x63D`1A50,%rcx
063c643e lea       0x63D`1A38,%r8
063c6445 mov       $0x1F,%edx
063c644a call      0x0000`0000`063B`2030
063c644f ud2
063c6451 mov       0x110(%rsp),%rax
063c6459 mov       0x108(%rsp),%rcx
063c6461 mov       %rcx,0x1A0(%rsp)
063c6469 movabs    $0x8000`0000`0000`0000,%rcx
063c6473 cmp       %rcx,%rax
063c6476 sete      %al
063c6479 and       $0,%al
063c647b test      $1,%al
063c647d jne       0x0000`0000`063C`649F
063c647f mov       0x110(%rsp),%rax
063c6487 mov       $0x64,%ecx
063c648c cqto
063c648e idiv      %rcx
063c6491 shl       $1,%rdx
063c6495 mov       %rdx,0x100(%rsp)
063c649d jmp       0x0000`0000`063C`64B9
063c649f lea       0x63D`1A70,%rcx
063c64a6 lea       0x63D`1A38,%r8
063c64ad mov       $0x30,%edx
063c64b2 call      0x0000`0000`063B`2030
063c64b7 ud2
063c64b9 mov       0x100(%rsp),%rax
063c64c1 mov       %rax,0x1A8(%rsp)
063c64c9 mov       0x168(%rsp),%rax
063c64d1 sub       $4,%rax
063c64d5 mov       %rax,0xF8(%rsp)
063c64dd seto      %al
063c64e0 test      $1,%al
063c64e2 jne       0x0000`0000`063C`6531
063c64e4 mov       0x108(%rsp),%rcx
063c64ec mov       0x118(%rsp),%rax
063c64f4 mov       0xF8(%rsp),%rdx
063c64fc mov       %rdx,0x168(%rsp)
063c6504 mov       %rax,0x230(%rsp)
063c650c mov       %rcx,0x238(%rsp)
063c6514 add       %rcx,%rax
063c6517 mov       %rax,0x240(%rsp)
063c651f mov       0x240(%rsp),%rax
063c6527 mov       %rax,0xF0(%rsp)
063c652f jmp       0x0000`0000`063C`654B
063c6531 lea       0x63D`12B0,%rcx
063c6538 lea       0x63D`1A38,%r8
063c653f mov       $0x21,%edx
063c6544 call      0x0000`0000`063B`2030
063c6549 ud2
063c654b mov       0x120(%rsp),%rax
063c6553 mov       0x168(%rsp),%rcx
063c655b mov       %rax,0x2C0(%rsp)
063c6563 mov       %rcx,0x2C8(%rsp)
063c656b add       %rcx,%rax
063c656e mov       %rax,0x2D0(%rsp)
063c6576 mov       0x2D0(%rsp),%rax
063c657e mov       %rax,0xE8(%rsp)
063c6586 mov       0xE8(%rsp),%rdx
063c658e mov       0xF0(%rsp),%rcx
063c6596 mov       $2,%r8d
063c659c call      0x0000`0000`063C`2510
063c65a1 mov       0x100(%rsp),%rcx
063c65a9 mov       0x118(%rsp),%rax
063c65b1 mov       %rax,0x218(%rsp)
063c65b9 mov       %rcx,0x220(%rsp)
063c65c1 add       %rcx,%rax
063c65c4 mov       %rax,0x228(%rsp)
063c65cc mov       0x228(%rsp),%rax
063c65d4 mov       %rax,0xE0(%rsp)
063c65dc mov       0x168(%rsp),%rax
063c65e4 add       $2,%rax
063c65e8 mov       %rax,0xD8(%rsp)
063c65f0 seto      %al
063c65f3 test      $1,%al
063c65f5 jne       0x0000`0000`063C`6634
063c65f7 mov       0xD8(%rsp),%rcx
063c65ff mov       0x120(%rsp),%rax
063c6607 mov       %rax,0x2A8(%rsp)
063c660f mov       %rcx,0x2B0(%rsp)
063c6617 add       %rcx,%rax
063c661a mov       %rax,0x2B8(%rsp)
063c6622 mov       0x2B8(%rsp),%rax
063c662a mov       %rax,0xD0(%rsp)
063c6632 jmp       0x0000`0000`063C`664E
063c6634 lea       0x63D`1240,%rcx
063c663b lea       0x63D`1A38,%r8
063c6642 mov       $0x1C,%edx
063c6647 call      0x0000`0000`063B`2030
063c664c ud2
063c664e mov       0xD0(%rsp),%rdx
063c6656 mov       0xE0(%rsp),%rcx
063c665e mov       $2,%r8d
063c6664 call      0x0000`0000`063C`2510
063c6669 jmp       0x0000`0000`063C`636F
063c666e cmpq      $0xA,0x170(%rsp)
063c6677 jl        0x0000`0000`063C`6839
063c667d jmp       0x0000`0000`063C`6820
063c6682 mov       0x170(%rsp),%rax
063c668a mov       %rax,0xC8(%rsp)
063c6692 movabs    $0x8000`0000`0000`0000,%rcx
063c669c cmp       %rcx,%rax
063c669f sete      %al
063c66a2 and       $0,%al
063c66a4 test      $1,%al
063c66a6 jne       0x0000`0000`063C`66C8
063c66a8 mov       0xC8(%rsp),%rax
063c66b0 mov       $0x64,%ecx
063c66b5 cqto
063c66b7 idiv      %rcx
063c66ba shl       $1,%rdx
063c66be mov       %rdx,0xC0(%rsp)
063c66c6 jmp       0x0000`0000`063C`66E2
063c66c8 lea       0x63D`1A70,%rcx
063c66cf lea       0x63D`1A38,%r8
063c66d6 mov       $0x30,%edx
063c66db call      0x0000`0000`063B`2030
063c66e0 ud2
063c66e2 mov       0xC0(%rsp),%rax
063c66ea mov       %rax,0x1B0(%rsp)
063c66f2 movabs    $0x8000`0000`0000`0000,%rax
063c66fc cmp       %rax,0x170(%rsp)
063c6704 sete      %al
063c6707 and       $0,%al
063c6709 test      $1,%al
063c670b jne       0x0000`0000`063C`6744
063c670d mov       0x170(%rsp),%rax
063c6715 mov       $0x64,%ecx
063c671a cqto
063c671c idiv      %rcx
063c671f mov       %rax,0x170(%rsp)
063c6727 mov       0x168(%rsp),%rax
063c672f sub       $2,%rax
063c6733 mov       %rax,0xB8(%rsp)
063c673b seto      %al
063c673e test      $1,%al
063c6740 jne       0x0000`0000`063C`67AB
063c6742 jmp       0x0000`0000`063C`675E
063c6744 lea       0x63D`1A50,%rcx
063c674b lea       0x63D`1A38,%r8
063c6752 mov       $0x1F,%edx
063c6757 call      0x0000`0000`063B`2030
063c675c ud2
063c675e mov       0xC0(%rsp),%rcx
063c6766 mov       0x118(%rsp),%rax
063c676e mov       0xB8(%rsp),%rdx
063c6776 mov       %rdx,0x168(%rsp)
063c677e mov       %rax,0x200(%rsp)
063c6786 mov       %rcx,0x208(%rsp)
063c678e add       %rcx,%rax
063c6791 mov       %rax,0x210(%rsp)
063c6799 mov       0x210(%rsp),%rax
063c67a1 mov       %rax,0xB0(%rsp)
063c67a9 jmp       0x0000`0000`063C`67C5
063c67ab lea       0x63D`12B0,%rcx
063c67b2 lea       0x63D`1A38,%r8
063c67b9 mov       $0x21,%edx
063c67be call      0x0000`0000`063B`2030
063c67c3 ud2
063c67c5 mov       0x120(%rsp),%rax
063c67cd mov       0x168(%rsp),%rcx
063c67d5 mov       %rax,0x290(%rsp)
063c67dd mov       %rcx,0x298(%rsp)
063c67e5 add       %rcx,%rax
063c67e8 mov       %rax,0x2A0(%rsp)
063c67f0 mov       0x2A0(%rsp),%rax
063c67f8 mov       %rax,0xA8(%rsp)
063c6800 mov       0xA8(%rsp),%rdx
063c6808 mov       0xB0(%rsp),%rcx
063c6810 mov       $2,%r8d
063c6816 call      0x0000`0000`063C`2510
063c681b jmp       0x0000`0000`063C`666E
063c6820 mov       0x170(%rsp),%rax
063c6828 shl       $1,%rax
063c682c mov       %rax,0xA0(%rsp)
063c6834 jmp       0x0000`0000`063C`693F
063c6839 mov       0x168(%rsp),%rax
063c6841 dec       %rax
063c6844 mov       %rax,0x98(%rsp)
063c684c seto      %al
063c684f test      $1,%al
063c6851 jne       0x0000`0000`063C`687D
063c6853 mov       0x98(%rsp),%rax
063c685b mov       %rax,0x168(%rsp)
063c6863 mov       0x170(%rsp),%rax
063c686b add       $0x30,%al
063c686d mov       %al,0x97(%rsp)
063c6874 setb      %al
063c6877 test      $1,%al
063c6879 jne       0x0000`0000`063C`68D4
063c687b jmp       0x0000`0000`063C`6897
063c687d lea       0x63D`12B0,%rcx
063c6884 lea       0x63D`1A38,%r8
063c688b mov       $0x21,%edx
063c6890 call      0x0000`0000`063B`2030
063c6895 ud2
063c6897 mov       0x120(%rsp),%rax
063c689f mov       0x168(%rsp),%rcx
063c68a7 mov       %rax,0x278(%rsp)
063c68af mov       %rcx,0x280(%rsp)
063c68b7 add       %rcx,%rax
063c68ba mov       %rax,0x288(%rsp)
063c68c2 mov       0x288(%rsp),%rax
063c68ca mov       %rax,0x88(%rsp)
063c68d2 jmp       0x0000`0000`063C`68EE
063c68d4 lea       0x63D`1240,%rcx
063c68db lea       0x63D`1A38,%r8
063c68e2 mov       $0x1C,%edx
063c68e7 call      0x0000`0000`063B`2030
063c68ec ud2
063c68ee mov       0x88(%rsp),%rax
063c68f6 mov       0x97(%rsp),%cl
063c68fd mov       %cl,(%rax)
063c68ff mov       0x120(%rsp),%rax
063c6907 mov       0x168(%rsp),%rcx
063c690f mov       %rax,0x248(%rsp)
063c6917 mov       %rcx,0x250(%rsp)
063c691f add       %rcx,%rax
063c6922 mov       %rax,0x258(%rsp)
063c692a mov       0x258(%rsp),%rax
063c6932 mov       %rax,0x80(%rsp)
063c693a jmp       0x0000`0000`063C`6A1A
063c693f mov       0xA0(%rsp),%rax
063c6947 mov       %rax,0x1B8(%rsp)
063c694f mov       0x168(%rsp),%rax
063c6957 sub       $2,%rax
063c695b mov       %rax,0x78(%rsp)
063c6960 seto      %al
063c6963 test      $1,%al
063c6965 jne       0x0000`0000`063C`69AE
063c6967 mov       0xA0(%rsp),%rcx
063c696f mov       0x118(%rsp),%rax
063c6977 mov       0x78(%rsp),%rdx
063c697c mov       %rdx,0x168(%rsp)
063c6984 mov       %rax,0x1E8(%rsp)
063c698c mov       %rcx,0x1F0(%rsp)
063c6994 add       %rcx,%rax
063c6997 mov       %rax,0x1F8(%rsp)
063c699f mov       0x1F8(%rsp),%rax
063c69a7 mov       %rax,0x70(%rsp)
063c69ac jmp       0x0000`0000`063C`69C8
063c69ae lea       0x63D`12B0,%rcx
063c69b5 lea       0x63D`1A38,%r8
063c69bc mov       $0x21,%edx
063c69c1 call      0x0000`0000`063B`2030
063c69c6 ud2
063c69c8 mov       0x120(%rsp),%rax
063c69d0 mov       0x168(%rsp),%rcx
063c69d8 mov       %rax,0x260(%rsp)
063c69e0 mov       %rcx,0x268(%rsp)
063c69e8 add       %rcx,%rax
063c69eb mov       %rax,0x270(%rsp)
063c69f3 mov       0x270(%rsp),%rax
063c69fb mov       %rax,0x68(%rsp)
063c6a00 mov       0x68(%rsp),%rdx
063c6a05 mov       0x70(%rsp),%rcx
063c6a0a mov       $2,%r8d
063c6a10 call      0x0000`0000`063C`2510
063c6a15 jmp       0x0000`0000`063C`68FF
063c6a1a mov       $0x27,%eax
063c6a1f sub       0x168(%rsp),%rax
063c6a27 mov       %rax,0x60(%rsp)
063c6a2c setb      %al
063c6a2f test      $1,%al
063c6a31 jne       0x0000`0000`063C`6A51
063c6a33 mov       0x60(%rsp),%rdx
063c6a38 mov       0x80(%rsp),%rcx
063c6a40 call      0x0000`0000`063B`A940
063c6a45 mov       %rax,0x50(%rsp)
063c6a4a mov       %rdx,0x58(%rsp)
063c6a4f jmp       0x0000`0000`063C`6A6B
063c6a51 lea       0x63D`12B0,%rcx
063c6a58 lea       0x63D`1A38,%r8
063c6a5f mov       $0x21,%edx
063c6a64 call      0x0000`0000`063B`2030
063c6a69 ud2
063c6a6b mov       0x58(%rsp),%rdx
063c6a70 mov       0x50(%rsp),%rcx
063c6a75 call      0x0000`0000`063B`6370
063c6a7a mov       %rax,0x40(%rsp)
063c6a7f mov       %rdx,0x48(%rsp)
063c6a84 mov       %rax,0x1C0(%rsp)
063c6a8c mov       %rdx,0x1C8(%rsp)
063c6a94 mov       0x128(%rsp),%rcx
063c6a9c mov       0x136(%rsp),%dl
063c6aa3 mov       0x40(%rsp),%r8
063c6aa8 mov       0x48(%rsp),%r9
063c6aad mov       %rsp,%rax
063c6ab0 mov       %r9,0x28(%rax)
063c6ab4 mov       %r8,0x20(%rax)
063c6ab8 and       $1,%dl
063c6abb lea       0x63D`1078,%r8
063c6ac2 xor       %eax,%eax
063c6ac4 mov       %eax,%r9d
063c6ac7 call      0x0000`0000`063B`4D10
063c6acc mov       %al,0x3F(%rsp)
063c6ad0 mov       0x3F(%rsp),%al
063c6ad4 and       $1,%al
063c6ad6 movzbl    %al,%eax
063c6ad9 add       $0x2D8,%rsp
063c6ae0 ret

core::fmt::num::imp::impl$1::fmt:
063c6af0 sub       $0x78,%rsp
063c6af4 mov       %rdx,0x30(%rsp)
063c6af9 mov       %rcx,0x38(%rsp)
063c6afe mov       %rcx,0x50(%rsp)
063c6b03 mov       %rdx,0x58(%rsp)
063c6b08 cmpb      $0,(%rcx)
063c6b0b setae     %al
063c6b0e mov       %al,0x47(%rsp)
063c6b12 mov       %al,%cl
063c6b14 and       $1,%cl
063c6b17 mov       %cl,0x67(%rsp)
063c6b1b test      $1,%al
063c6b1d jne       0x0000`0000`063C`6B30
063c6b1f mov       0x38(%rsp),%rcx
063c6b24 call      0x0000`0000`063B`0A20
063c6b29 mov       %rax,0x28(%rsp)
063c6b2e jmp       0x0000`0000`063C`6B5B
063c6b30 mov       0x38(%rsp),%rcx
063c6b35 call      0x0000`0000`063B`0A20
063c6b3a mov       %rax,0x48(%rsp)
063c6b3f mov       0x30(%rsp),%r8
063c6b44 mov       0x47(%rsp),%dl
063c6b48 mov       0x48(%rsp),%rcx
063c6b4d and       $1,%dl
063c6b50 call      0x0000`0000`063C`62A0
063c6b55 mov       %al,0x27(%rsp)
063c6b59 jmp       0x0000`0000`063C`6B7D
063c6b5b mov       0x28(%rsp),%rax
063c6b60 xor       $0xFFFF`FFFF`FFFF`FFFF,%rax
063c6b64 mov       %rax,0x68(%rsp)
063c6b69 movq      $1,0x70(%rsp)
063c6b72 add       $1,%rax
063c6b76 mov       %rax,0x48(%rsp)
063c6b7b jmp       0x0000`0000`063C`6B3F
063c6b7d mov       0x27(%rsp),%al
063c6b81 and       $1,%al
063c6b83 movzbl    %al,%eax
063c6b86 add       $0x78,%rsp
063c6b8a ret

core::fmt::num::imp::impl$5::fmt:
063c6b90 sub       $0x78,%rsp
063c6b94 mov       %rdx,0x30(%rsp)
063c6b99 mov       %rcx,0x38(%rsp)
063c6b9e mov       %rcx,0x50(%rsp)
063c6ba3 mov       %rdx,0x58(%rsp)
063c6ba8 cmpl      $0,(%rcx)
063c6bab setae     %al
063c6bae mov       %al,0x47(%rsp)
063c6bb2 mov       %al,%cl
063c6bb4 and       $1,%cl
063c6bb7 mov       %cl,0x67(%rsp)
063c6bbb test      $1,%al
063c6bbd jne       0x0000`0000`063C`6BD0
063c6bbf mov       0x38(%rsp),%rcx
063c6bc4 call      0x0000`0000`063B`0A60
063c6bc9 mov       %rax,0x28(%rsp)
063c6bce jmp       0x0000`0000`063C`6BFB
063c6bd0 mov       0x38(%rsp),%rcx
063c6bd5 call      0x0000`0000`063B`0A60
063c6bda mov       %rax,0x48(%rsp)
063c6bdf mov       0x30(%rsp),%r8
063c6be4 mov       0x47(%rsp),%dl
063c6be8 mov       0x48(%rsp),%rcx
063c6bed and       $1,%dl
063c6bf0 call      0x0000`0000`063C`62A0
063c6bf5 mov       %al,0x27(%rsp)
063c6bf9 jmp       0x0000`0000`063C`6C1D
063c6bfb mov       0x28(%rsp),%rax
063c6c00 xor       $0xFFFF`FFFF`FFFF`FFFF,%rax
063c6c04 mov       %rax,0x68(%rsp)
063c6c09 movq      $1,0x70(%rsp)
063c6c12 add       $1,%rax
063c6c16 mov       %rax,0x48(%rsp)
063c6c1b jmp       0x0000`0000`063C`6BDF
063c6c1d mov       0x27(%rsp),%al
063c6c21 and       $1,%al
063c6c23 movzbl    %al,%eax
063c6c26 add       $0x78,%rsp
063c6c2a ret

core::fmt::num::imp::impl$8::fmt:
063c6c30 sub       $0x78,%rsp
063c6c34 mov       %rdx,0x30(%rsp)
063c6c39 mov       %rcx,0x38(%rsp)
063c6c3e mov       %rcx,0x50(%rsp)
063c6c43 mov       %rdx,0x58(%rsp)
063c6c48 cmpq      $0,(%rcx)
063c6c4c setae     %al
063c6c4f mov       %al,0x47(%rsp)
063c6c53 mov       %al,%cl
063c6c55 and       $1,%cl
063c6c58 mov       %cl,0x67(%rsp)
063c6c5c test      $1,%al
063c6c5e jne       0x0000`0000`063C`6C71
063c6c60 mov       0x38(%rsp),%rcx
063c6c65 call      0x0000`0000`063B`0AA0
063c6c6a mov       %rax,0x28(%rsp)
063c6c6f jmp       0x0000`0000`063C`6C9C
063c6c71 mov       0x38(%rsp),%rcx
063c6c76 call      0x0000`0000`063B`0AA0
063c6c7b mov       %rax,0x48(%rsp)
063c6c80 mov       0x30(%rsp),%r8
063c6c85 mov       0x47(%rsp),%dl
063c6c89 mov       0x48(%rsp),%rcx
063c6c8e and       $1,%dl
063c6c91 call      0x0000`0000`063C`62A0
063c6c96 mov       %al,0x27(%rsp)
063c6c9a jmp       0x0000`0000`063C`6CBE
063c6c9c mov       0x28(%rsp),%rax
063c6ca1 xor       $0xFFFF`FFFF`FFFF`FFFF,%rax
063c6ca5 mov       %rax,0x68(%rsp)
063c6caa movq      $1,0x70(%rsp)
063c6cb3 add       $1,%rax
063c6cb7 mov       %rax,0x48(%rsp)
063c6cbc jmp       0x0000`0000`063C`6C80
063c6cbe mov       0x27(%rsp),%al
063c6cc2 and       $1,%al
063c6cc4 movzbl    %al,%eax
063c6cc7 add       $0x78,%rsp
063c6ccb ret

core::slice::iter::impl$173::next<core::fmt::ArgumentV1>:
063c6cd0 sub       $0x98,%rsp
063c6cd7 mov       %rcx,0x40(%rsp)
063c6cdc mov       %rcx,0x58(%rsp)
063c6ce1 mov       (%rcx),%rcx
063c6ce4 call      0x0000`0000`063C`28F0
063c6ce9 mov       %rax,0x48(%rsp)
063c6cee mov       0x48(%rsp),%rcx
063c6cf3 call      0x0000`0000`063B`3CB0
063c6cf8 jmp       0x0000`0000`063C`6CFA
063c6cfa mov       $0x10,%eax
063c6cff cmp       $0,%rax
063c6d03 jne       0x0000`0000`063C`6D19
063c6d05 mov       0x40(%rsp),%rax
063c6d0a mov       (%rax),%rcx
063c6d0d call      0x0000`0000`063C`28F0
063c6d12 mov       %rax,0x38(%rsp)
063c6d17 jmp       0x0000`0000`063C`6D29
063c6d19 mov       0x40(%rsp),%rax
063c6d1e mov       8(%rax),%rcx
063c6d22 call      0x0000`0000`063B`3C60
063c6d27 jmp       0x0000`0000`063C`6D05
063c6d29 mov       0x38(%rsp),%rax
063c6d2e mov       0x40(%rsp),%rcx
063c6d33 cmp       8(%rcx),%rax
063c6d37 je        0x0000`0000`063C`6DC0
063c6d3d mov       0x40(%rsp),%rax
063c6d42 mov       %rax,0x68(%rsp)
063c6d47 movq      $1,0x70(%rsp)
063c6d50 mov       (%rax),%rcx
063c6d53 call      0x0000`0000`063C`28F0
063c6d58 mov       %rax,%rcx
063c6d5b mov       0x40(%rsp),%rax
063c6d60 mov       %rcx,0x28(%rsp)
063c6d65 mov       %rcx,0x78(%rsp)
063c6d6a mov       (%rax),%rcx
063c6d6d call      0x0000`0000`063C`28F0
063c6d72 mov       %rax,0x80(%rsp)
063c6d7a movq      $1,0x88(%rsp)
063c6d86 add       $0x10,%rax
063c6d8a mov       %rax,0x90(%rsp)
063c6d92 mov       0x90(%rsp),%rcx
063c6d9a call      0x0000`0000`063C`2850
063c6d9f mov       0x40(%rsp),%rcx
063c6da4 mov       %rax,%rdx
063c6da7 mov       0x28(%rsp),%rax
063c6dac mov       %rdx,(%rcx)
063c6daf mov       %rax,0x60(%rsp)
063c6db4 mov       0x60(%rsp),%rax
063c6db9 mov       %rax,0x30(%rsp)
063c6dbe jmp       0x0000`0000`063C`6DD6
063c6dc0 movq      $0,0x50(%rsp)
063c6dc9 mov       0x50(%rsp),%rax
063c6dce add       $0x98,%rsp
063c6dd5 ret
063c6dd6 mov       0x30(%rsp),%rax
063c6ddb mov       %rax,0x50(%rsp)
063c6de0 jmp       0x0000`0000`063C`6DC9

core::slice::iter::impl$173::next<u8>:
063c6df0 sub       $0x98,%rsp
063c6df7 mov       %rcx,0x40(%rsp)
063c6dfc mov       %rcx,0x58(%rsp)
063c6e01 mov       (%rcx),%rcx
063c6e04 call      0x0000`0000`063C`28D0
063c6e09 mov       %rax,0x48(%rsp)
063c6e0e mov       0x48(%rsp),%rcx
063c6e13 call      0x0000`0000`063B`FD70
063c6e18 jmp       0x0000`0000`063C`6E1A
063c6e1a mov       $1,%eax
063c6e1f cmp       $0,%rax
063c6e23 jne       0x0000`0000`063C`6E39
063c6e25 mov       0x40(%rsp),%rax
063c6e2a mov       (%rax),%rcx
063c6e2d call      0x0000`0000`063C`28D0
063c6e32 mov       %rax,0x38(%rsp)
063c6e37 jmp       0x0000`0000`063C`6E49
063c6e39 mov       0x40(%rsp),%rax
063c6e3e mov       8(%rax),%rcx
063c6e42 call      0x0000`0000`063C`4830
063c6e47 jmp       0x0000`0000`063C`6E25
063c6e49 mov       0x38(%rsp),%rax
063c6e4e mov       0x40(%rsp),%rcx
063c6e53 cmp       8(%rcx),%rax
063c6e57 je        0x0000`0000`063C`6EE0
063c6e5d mov       0x40(%rsp),%rax
063c6e62 mov       %rax,0x68(%rsp)
063c6e67 movq      $1,0x70(%rsp)
063c6e70 mov       (%rax),%rcx
063c6e73 call      0x0000`0000`063C`28D0
063c6e78 mov       %rax,%rcx
063c6e7b mov       0x40(%rsp),%rax
063c6e80 mov       %rcx,0x28(%rsp)
063c6e85 mov       %rcx,0x78(%rsp)
063c6e8a mov       (%rax),%rcx
063c6e8d call      0x0000`0000`063C`28D0
063c6e92 mov       %rax,0x80(%rsp)
063c6e9a movq      $1,0x88(%rsp)
063c6ea6 add       $1,%rax
063c6eaa mov       %rax,0x90(%rsp)
063c6eb2 mov       0x90(%rsp),%rcx
063c6eba call      0x0000`0000`063C`2810
063c6ebf mov       0x40(%rsp),%rcx
063c6ec4 mov       %rax,%rdx
063c6ec7 mov       0x28(%rsp),%rax
063c6ecc mov       %rdx,(%rcx)
063c6ecf mov       %rax,0x60(%rsp)
063c6ed4 mov       0x60(%rsp),%rax
063c6ed9 mov       %rax,0x30(%rsp)
063c6ede jmp       0x0000`0000`063C`6EF6
063c6ee0 movq      $0,0x50(%rsp)
063c6ee9 mov       0x50(%rsp),%rax
063c6eee add       $0x98,%rsp
063c6ef5 ret
063c6ef6 mov       0x30(%rsp),%rax
063c6efb mov       %rax,0x50(%rsp)
063c6f00 jmp       0x0000`0000`063C`6EE9

core::slice::iter::impl$173::next<array$<usize,4> >:
063c6f10 sub       $0x98,%rsp
063c6f17 mov       %rcx,0x40(%rsp)
063c6f1c mov       %rcx,0x58(%rsp)
063c6f21 mov       (%rcx),%rcx
063c6f24 call      0x0000`0000`063C`28C0
063c6f29 mov       %rax,0x48(%rsp)
063c6f2e mov       0x48(%rsp),%rcx
063c6f33 call      0x0000`0000`063B`FDA0
063c6f38 jmp       0x0000`0000`063C`6F3A
063c6f3a mov       $0x20,%eax
063c6f3f cmp       $0,%rax
063c6f43 jne       0x0000`0000`063C`6F59
063c6f45 mov       0x40(%rsp),%rax
063c6f4a mov       (%rax),%rcx
063c6f4d call      0x0000`0000`063C`28C0
063c6f52 mov       %rax,0x38(%rsp)
063c6f57 jmp       0x0000`0000`063C`6F69
063c6f59 mov       0x40(%rsp),%rax
063c6f5e mov       8(%rax),%rcx
063c6f62 call      0x0000`0000`063C`4890
063c6f67 jmp       0x0000`0000`063C`6F45
063c6f69 mov       0x38(%rsp),%rax
063c6f6e mov       0x40(%rsp),%rcx
063c6f73 cmp       8(%rcx),%rax
063c6f77 je        0x0000`0000`063C`7000
063c6f7d mov       0x40(%rsp),%rax
063c6f82 mov       %rax,0x68(%rsp)
063c6f87 movq      $1,0x70(%rsp)
063c6f90 mov       (%rax),%rcx
063c6f93 call      0x0000`0000`063C`28C0
063c6f98 mov       %rax,%rcx
063c6f9b mov       0x40(%rsp),%rax
063c6fa0 mov       %rcx,0x28(%rsp)
063c6fa5 mov       %rcx,0x78(%rsp)
063c6faa mov       (%rax),%rcx
063c6fad call      0x0000`0000`063C`28C0
063c6fb2 mov       %rax,0x80(%rsp)
063c6fba movq      $1,0x88(%rsp)
063c6fc6 add       $0x20,%rax
063c6fca mov       %rax,0x90(%rsp)
063c6fd2 mov       0x90(%rsp),%rcx
063c6fda call      0x0000`0000`063C`2830
063c6fdf mov       0x40(%rsp),%rcx
063c6fe4 mov       %rax,%rdx
063c6fe7 mov       0x28(%rsp),%rax
063c6fec mov       %rdx,(%rcx)
063c6fef mov       %rax,0x60(%rsp)
063c6ff4 mov       0x60(%rsp),%rax
063c6ff9 mov       %rax,0x30(%rsp)
063c6ffe jmp       0x0000`0000`063C`7016
063c7000 movq      $0,0x50(%rsp)
063c7009 mov       0x50(%rsp),%rax
063c700e add       $0x98,%rsp
063c7015 ret
063c7016 mov       0x30(%rsp),%rax
063c701b mov       %rax,0x50(%rsp)
063c7020 jmp       0x0000`0000`063C`7009

core::slice::iter::impl$173::next<usize>:
063c7030 sub       $0x98,%rsp
063c7037 mov       %rcx,0x40(%rsp)
063c703c mov       %rcx,0x58(%rsp)
063c7041 mov       (%rcx),%rcx
063c7044 call      0x0000`0000`063C`28B0
063c7049 mov       %rax,0x48(%rsp)
063c704e mov       0x48(%rsp),%rcx
063c7053 call      0x0000`0000`063B`FD40
063c7058 jmp       0x0000`0000`063C`705A
063c705a mov       $8,%eax
063c705f cmp       $0,%rax
063c7063 jne       0x0000`0000`063C`7079
063c7065 mov       0x40(%rsp),%rax
063c706a mov       (%rax),%rcx
063c706d call      0x0000`0000`063C`28B0
063c7072 mov       %rax,0x38(%rsp)
063c7077 jmp       0x0000`0000`063C`7089
063c7079 mov       0x40(%rsp),%rax
063c707e mov       8(%rax),%rcx
063c7082 call      0x0000`0000`063C`4800
063c7087 jmp       0x0000`0000`063C`7065
063c7089 mov       0x38(%rsp),%rax
063c708e mov       0x40(%rsp),%rcx
063c7093 cmp       8(%rcx),%rax
063c7097 je        0x0000`0000`063C`7120
063c709d mov       0x40(%rsp),%rax
063c70a2 mov       %rax,0x68(%rsp)
063c70a7 movq      $1,0x70(%rsp)
063c70b0 mov       (%rax),%rcx
063c70b3 call      0x0000`0000`063C`28B0
063c70b8 mov       %rax,%rcx
063c70bb mov       0x40(%rsp),%rax
063c70c0 mov       %rcx,0x28(%rsp)
063c70c5 mov       %rcx,0x78(%rsp)
063c70ca mov       (%rax),%rcx
063c70cd call      0x0000`0000`063C`28B0
063c70d2 mov       %rax,0x80(%rsp)
063c70da movq      $1,0x88(%rsp)
063c70e6 add       $8,%rax
063c70ea mov       %rax,0x90(%rsp)
063c70f2 mov       0x90(%rsp),%rcx
063c70fa call      0x0000`0000`063C`27F0
063c70ff mov       0x40(%rsp),%rcx
063c7104 mov       %rax,%rdx
063c7107 mov       0x28(%rsp),%rax
063c710c mov       %rdx,(%rcx)
063c710f mov       %rax,0x60(%rsp)
063c7114 mov       0x60(%rsp),%rax
063c7119 mov       %rax,0x30(%rsp)
063c711e jmp       0x0000`0000`063C`7136
063c7120 movq      $0,0x50(%rsp)
063c7129 mov       0x50(%rsp),%rax
063c712e add       $0x98,%rsp
063c7135 ret
063c7136 mov       0x30(%rsp),%rax
063c713b mov       %rax,0x50(%rsp)
063c7140 jmp       0x0000`0000`063C`7129

core::slice::iter::impl$173::next<tuple$<u8,u8> >:
063c7150 sub       $0x98,%rsp
063c7157 mov       %rcx,0x40(%rsp)
063c715c mov       %rcx,0x58(%rsp)
063c7161 mov       (%rcx),%rcx
063c7164 call      0x0000`0000`063C`28A0
063c7169 mov       %rax,0x48(%rsp)
063c716e mov       0x48(%rsp),%rcx
063c7173 call      0x0000`0000`063B`FDD0
063c7178 jmp       0x0000`0000`063C`717A
063c717a mov       $2,%eax
063c717f cmp       $0,%rax
063c7183 jne       0x0000`0000`063C`7199
063c7185 mov       0x40(%rsp),%rax
063c718a mov       (%rax),%rcx
063c718d call      0x0000`0000`063C`28A0
063c7192 mov       %rax,0x38(%rsp)
063c7197 jmp       0x0000`0000`063C`71A9
063c7199 mov       0x40(%rsp),%rax
063c719e mov       8(%rax),%rcx
063c71a2 call      0x0000`0000`063C`4860
063c71a7 jmp       0x0000`0000`063C`7185
063c71a9 mov       0x38(%rsp),%rax
063c71ae mov       0x40(%rsp),%rcx
063c71b3 cmp       8(%rcx),%rax
063c71b7 je        0x0000`0000`063C`7240
063c71bd mov       0x40(%rsp),%rax
063c71c2 mov       %rax,0x68(%rsp)
063c71c7 movq      $1,0x70(%rsp)
063c71d0 mov       (%rax),%rcx
063c71d3 call      0x0000`0000`063C`28A0
063c71d8 mov       %rax,%rcx
063c71db mov       0x40(%rsp),%rax
063c71e0 mov       %rcx,0x28(%rsp)
063c71e5 mov       %rcx,0x78(%rsp)
063c71ea mov       (%rax),%rcx
063c71ed call      0x0000`0000`063C`28A0
063c71f2 mov       %rax,0x80(%rsp)
063c71fa movq      $1,0x88(%rsp)
063c7206 add       $2,%rax
063c720a mov       %rax,0x90(%rsp)
063c7212 mov       0x90(%rsp),%rcx
063c721a call      0x0000`0000`063C`2870
063c721f mov       0x40(%rsp),%rcx
063c7224 mov       %rax,%rdx
063c7227 mov       0x28(%rsp),%rax
063c722c mov       %rdx,(%rcx)
063c722f mov       %rax,0x60(%rsp)
063c7234 mov       0x60(%rsp),%rax
063c7239 mov       %rax,0x30(%rsp)
063c723e jmp       0x0000`0000`063C`7256
063c7240 movq      $0,0x50(%rsp)
063c7249 mov       0x50(%rsp),%rax
063c724e add       $0x98,%rsp
063c7255 ret
063c7256 mov       0x30(%rsp),%rax
063c725b mov       %rax,0x50(%rsp)
063c7260 jmp       0x0000`0000`063C`7249

core::slice::iter::impl$173::next<core::fmt::rt::v1::Argument>:
063c7270 sub       $0x98,%rsp
063c7277 mov       %rcx,0x40(%rsp)
063c727c mov       %rcx,0x58(%rsp)
063c7281 mov       (%rcx),%rcx
063c7284 call      0x0000`0000`063C`2890
063c7289 mov       %rax,0x48(%rsp)
063c728e mov       0x48(%rsp),%rcx
063c7293 call      0x0000`0000`063B`8FD0
063c7298 jmp       0x0000`0000`063C`729A
063c729a mov       $0x38,%eax
063c729f cmp       $0,%rax
063c72a3 jne       0x0000`0000`063C`72B9
063c72a5 mov       0x40(%rsp),%rax
063c72aa mov       (%rax),%rcx
063c72ad call      0x0000`0000`063C`2890
063c72b2 mov       %rax,0x38(%rsp)
063c72b7 jmp       0x0000`0000`063C`72C9
063c72b9 mov       0x40(%rsp),%rax
063c72be mov       8(%rax),%rcx
063c72c2 call      0x0000`0000`063B`8FA0
063c72c7 jmp       0x0000`0000`063C`72A5
063c72c9 mov       0x38(%rsp),%rax
063c72ce mov       0x40(%rsp),%rcx
063c72d3 cmp       8(%rcx),%rax
063c72d7 je        0x0000`0000`063C`7360
063c72dd mov       0x40(%rsp),%rax
063c72e2 mov       %rax,0x68(%rsp)
063c72e7 movq      $1,0x70(%rsp)
063c72f0 mov       (%rax),%rcx
063c72f3 call      0x0000`0000`063C`2890
063c72f8 mov       %rax,%rcx
063c72fb mov       0x40(%rsp),%rax
063c7300 mov       %rcx,0x28(%rsp)
063c7305 mov       %rcx,0x78(%rsp)
063c730a mov       (%rax),%rcx
063c730d call      0x0000`0000`063C`2890
063c7312 mov       %rax,0x80(%rsp)
063c731a movq      $1,0x88(%rsp)
063c7326 add       $0x38,%rax
063c732a mov       %rax,0x90(%rsp)
063c7332 mov       0x90(%rsp),%rcx
063c733a call      0x0000`0000`063C`27D0
063c733f mov       0x40(%rsp),%rcx
063c7344 mov       %rax,%rdx
063c7347 mov       0x28(%rsp),%rax
063c734c mov       %rdx,(%rcx)
063c734f mov       %rax,0x60(%rsp)
063c7354 mov       0x60(%rsp),%rax
063c7359 mov       %rax,0x30(%rsp)
063c735e jmp       0x0000`0000`063C`7376
063c7360 movq      $0,0x50(%rsp)
063c7369 mov       0x50(%rsp),%rax
063c736e add       $0x98,%rsp
063c7375 ret
063c7376 mov       0x30(%rsp),%rax
063c737b mov       %rax,0x50(%rsp)
063c7380 jmp       0x0000`0000`063C`7369

core::slice::iter::impl$173::position<u8,core::slice::memchr::memchr_general_case::closure_env$0>:
063c7390 sub       $0xF8,%rsp
063c7397 mov       %rcx,0x60(%rsp)
063c739c mov       %rdx,0x78(%rsp)
063c73a1 mov       %rcx,0xB0(%rsp)
063c73a9 mov       (%rcx),%rcx
063c73ac mov       %rcx,0x68(%rsp)
063c73b1 mov       %rcx,0xB8(%rsp)
063c73b9 call      0x0000`0000`063C`28D0
063c73be mov       %rax,0x70(%rsp)
063c73c3 mov       0x70(%rsp),%rax
063c73c8 mov       %rax,0xE0(%rsp)
063c73d0 movq      $1,0xC0(%rsp)
063c73dc mov       $1,%eax
063c73e1 cmp       $0,%rax
063c73e5 jne       0x0000`0000`063C`7406
063c73e7 mov       0x68(%rsp),%rcx
063c73ec mov       0x60(%rsp),%rax
063c73f1 mov       8(%rax),%rax
063c73f5 mov       %rax,0x50(%rsp)
063c73fa call      0x0000`0000`063C`28D0
063c73ff mov       %rax,0x58(%rsp)
063c7404 jmp       0x0000`0000`063C`746C
063c7406 mov       0x68(%rsp),%rcx
063c740b mov       0x60(%rsp),%rax
063c7410 mov       8(%rax),%rax
063c7414 mov       %rax,0x40(%rsp)
063c7419 call      0x0000`0000`063C`28D0
063c741e mov       %rax,0x48(%rsp)
063c7423 mov       0x48(%rsp),%rcx
063c7428 mov       0x40(%rsp),%rax
063c742d sub       %rcx,%rax
063c7430 mov       %rax,0xC8(%rsp)
063c7438 mov       0xC8(%rsp),%rax
063c7440 mov       %rax,0x38(%rsp)
063c7445 mov       %rax,0xD0(%rsp)
063c744d mov       0x38(%rsp),%rax
063c7452 shr       $0,%rax
063c7456 mov       %rax,0x90(%rsp)
063c745e movq      $0,0x98(%rsp)
063c746a jmp       0x0000`0000`063C`7493
063c746c mov       0x58(%rsp),%rcx
063c7471 mov       0x50(%rsp),%rax
063c7476 mov       %rax,0xE8(%rsp)
063c747e mov       %rcx,0xF0(%rsp)
063c7486 sub       %rcx,%rax
063c7489 mov       %rax,0x90(%rsp)
063c7491 jmp       0x0000`0000`063C`745E
063c7493 mov       0x60(%rsp),%rcx
063c7498 call      0x0000`0000`063C`6DF0
063c749d mov       %rax,0xA0(%rsp)
063c74a5 mov       $1,%eax
063c74aa xor       %ecx,%ecx
063c74ac cmpq      $0,0xA0(%rsp)
063c74b5 cmove     %rcx,%rax
063c74b9 cmp       $1,%rax
063c74bd jne       0x0000`0000`063C`74EF
063c74bf mov       0xA0(%rsp),%rax
063c74c7 mov       %rax,0xD8(%rsp)
063c74cf mov       %rax,0xA8(%rsp)
063c74d7 mov       0xA8(%rsp),%rdx
063c74df lea       0x78(%rsp),%rcx
063c74e4 call      0x0000`0000`063C`87E0
063c74e9 mov       %al,0x37(%rsp)
063c74ed jmp       0x0000`0000`063C`7513
063c74ef movq      $0,0x80(%rsp)
063c74fb mov       0x80(%rsp),%rax
063c7503 mov       0x88(%rsp),%rdx
063c750b add       $0xF8,%rsp
063c7512 ret
063c7513 mov       0x37(%rsp),%al
063c7517 test      $1,%al
063c7519 jne       0x0000`0000`063C`7537
063c751b jmp       0x0000`0000`063C`751D
063c751d mov       0x98(%rsp),%rax
063c7525 add       $1,%rax
063c7529 mov       %rax,0x28(%rsp)
063c752e setb      %al
063c7531 test      $1,%al
063c7533 jne       0x0000`0000`063C`756F
063c7535 jmp       0x0000`0000`063C`755D
063c7537 mov       0x98(%rsp),%rax
063c753f mov       0x98(%rsp),%rax
063c7547 mov       %rax,0x88(%rsp)
063c754f movq      $1,0x80(%rsp)
063c755b jmp       0x0000`0000`063C`74FB
063c755d mov       0x28(%rsp),%rax
063c7562 mov       %rax,0x98(%rsp)
063c756a jmp       0x0000`0000`063C`7493
063c756f lea       0x63D`1240,%rcx
063c7576 lea       0x63D`1AA0,%r8
063c757d mov       $0x1C,%edx
063c7582 call      0x0000`0000`063B`2030
063c7587 ud2

core::slice::iter::impl$173::position<u8,core::slice::memchr::memchr::closure_env$0>:
063c7590 sub       $0xF8,%rsp
063c7597 mov       %rcx,0x60(%rsp)
063c759c mov       %rdx,0x78(%rsp)
063c75a1 mov       %rcx,0xB0(%rsp)
063c75a9 mov       (%rcx),%rcx
063c75ac mov       %rcx,0x68(%rsp)
063c75b1 mov       %rcx,0xB8(%rsp)
063c75b9 call      0x0000`0000`063C`28D0
063c75be mov       %rax,0x70(%rsp)
063c75c3 mov       0x70(%rsp),%rax
063c75c8 mov       %rax,0xE0(%rsp)
063c75d0 movq      $1,0xC0(%rsp)
063c75dc mov       $1,%eax
063c75e1 cmp       $0,%rax
063c75e5 jne       0x0000`0000`063C`7606
063c75e7 mov       0x68(%rsp),%rcx
063c75ec mov       0x60(%rsp),%rax
063c75f1 mov       8(%rax),%rax
063c75f5 mov       %rax,0x50(%rsp)
063c75fa call      0x0000`0000`063C`28D0
063c75ff mov       %rax,0x58(%rsp)
063c7604 jmp       0x0000`0000`063C`766C
063c7606 mov       0x68(%rsp),%rcx
063c760b mov       0x60(%rsp),%rax
063c7610 mov       8(%rax),%rax
063c7614 mov       %rax,0x40(%rsp)
063c7619 call      0x0000`0000`063C`28D0
063c761e mov       %rax,0x48(%rsp)
063c7623 mov       0x48(%rsp),%rcx
063c7628 mov       0x40(%rsp),%rax
063c762d sub       %rcx,%rax
063c7630 mov       %rax,0xC8(%rsp)
063c7638 mov       0xC8(%rsp),%rax
063c7640 mov       %rax,0x38(%rsp)
063c7645 mov       %rax,0xD0(%rsp)
063c764d mov       0x38(%rsp),%rax
063c7652 shr       $0,%rax
063c7656 mov       %rax,0x90(%rsp)
063c765e movq      $0,0x98(%rsp)
063c766a jmp       0x0000`0000`063C`7693
063c766c mov       0x58(%rsp),%rcx
063c7671 mov       0x50(%rsp),%rax
063c7676 mov       %rax,0xE8(%rsp)
063c767e mov       %rcx,0xF0(%rsp)
063c7686 sub       %rcx,%rax
063c7689 mov       %rax,0x90(%rsp)
063c7691 jmp       0x0000`0000`063C`765E
063c7693 mov       0x60(%rsp),%rcx
063c7698 call      0x0000`0000`063C`6DF0
063c769d mov       %rax,0xA0(%rsp)
063c76a5 mov       $1,%eax
063c76aa xor       %ecx,%ecx
063c76ac cmpq      $0,0xA0(%rsp)
063c76b5 cmove     %rcx,%rax
063c76b9 cmp       $1,%rax
063c76bd jne       0x0000`0000`063C`76EF
063c76bf mov       0xA0(%rsp),%rax
063c76c7 mov       %rax,0xD8(%rsp)
063c76cf mov       %rax,0xA8(%rsp)
063c76d7 mov       0xA8(%rsp),%rdx
063c76df lea       0x78(%rsp),%rcx
063c76e4 call      0x0000`0000`063C`8320
063c76e9 mov       %al,0x37(%rsp)
063c76ed jmp       0x0000`0000`063C`7713
063c76ef movq      $0,0x80(%rsp)
063c76fb mov       0x80(%rsp),%rax
063c7703 mov       0x88(%rsp),%rdx
063c770b add       $0xF8,%rsp
063c7712 ret
063c7713 mov       0x37(%rsp),%al
063c7717 test      $1,%al
063c7719 jne       0x0000`0000`063C`7737
063c771b jmp       0x0000`0000`063C`771D
063c771d mov       0x98(%rsp),%rax
063c7725 add       $1,%rax
063c7729 mov       %rax,0x28(%rsp)
063c772e setb      %al
063c7731 test      $1,%al
063c7733 jne       0x0000`0000`063C`776F
063c7735 jmp       0x0000`0000`063C`775D
063c7737 mov       0x98(%rsp),%rax
063c773f mov       0x98(%rsp),%rax
063c7747 mov       %rax,0x88(%rsp)
063c774f movq      $1,0x80(%rsp)
063c775b jmp       0x0000`0000`063C`76FB
063c775d mov       0x28(%rsp),%rax
063c7762 mov       %rax,0x98(%rsp)
063c776a jmp       0x0000`0000`063C`7693
063c776f lea       0x63D`1240,%rcx
063c7776 lea       0x63D`1AA0,%r8
063c777d mov       $0x1C,%edx
063c7782 call      0x0000`0000`063B`2030
063c7787 ud2

core::slice::iter::impl$173::position<u8,core::slice::memchr::memchr_general_case::closure_env$1>:
063c7790 sub       $0xF8,%rsp
063c7797 mov       %rcx,0x60(%rsp)
063c779c mov       %rdx,0x78(%rsp)
063c77a1 mov       %rcx,0xB0(%rsp)
063c77a9 mov       (%rcx),%rcx
063c77ac mov       %rcx,0x68(%rsp)
063c77b1 mov       %rcx,0xB8(%rsp)
063c77b9 call      0x0000`0000`063C`28D0
063c77be mov       %rax,0x70(%rsp)
063c77c3 mov       0x70(%rsp),%rax
063c77c8 mov       %rax,0xE0(%rsp)
063c77d0 movq      $1,0xC0(%rsp)
063c77dc mov       $1,%eax
063c77e1 cmp       $0,%rax
063c77e5 jne       0x0000`0000`063C`7806
063c77e7 mov       0x68(%rsp),%rcx
063c77ec mov       0x60(%rsp),%rax
063c77f1 mov       8(%rax),%rax
063c77f5 mov       %rax,0x50(%rsp)
063c77fa call      0x0000`0000`063C`28D0
063c77ff mov       %rax,0x58(%rsp)
063c7804 jmp       0x0000`0000`063C`786C
063c7806 mov       0x68(%rsp),%rcx
063c780b mov       0x60(%rsp),%rax
063c7810 mov       8(%rax),%rax
063c7814 mov       %rax,0x40(%rsp)
063c7819 call      0x0000`0000`063C`28D0
063c781e mov       %rax,0x48(%rsp)
063c7823 mov       0x48(%rsp),%rcx
063c7828 mov       0x40(%rsp),%rax
063c782d sub       %rcx,%rax
063c7830 mov       %rax,0xC8(%rsp)
063c7838 mov       0xC8(%rsp),%rax
063c7840 mov       %rax,0x38(%rsp)
063c7845 mov       %rax,0xD0(%rsp)
063c784d mov       0x38(%rsp),%rax
063c7852 shr       $0,%rax
063c7856 mov       %rax,0x90(%rsp)
063c785e movq      $0,0x98(%rsp)
063c786a jmp       0x0000`0000`063C`7893
063c786c mov       0x58(%rsp),%rcx
063c7871 mov       0x50(%rsp),%rax
063c7876 mov       %rax,0xE8(%rsp)
063c787e mov       %rcx,0xF0(%rsp)
063c7886 sub       %rcx,%rax
063c7889 mov       %rax,0x90(%rsp)
063c7891 jmp       0x0000`0000`063C`785E
063c7893 mov       0x60(%rsp),%rcx
063c7898 call      0x0000`0000`063C`6DF0
063c789d mov       %rax,0xA0(%rsp)
063c78a5 mov       $1,%eax
063c78aa xor       %ecx,%ecx
063c78ac cmpq      $0,0xA0(%rsp)
063c78b5 cmove     %rcx,%rax
063c78b9 cmp       $1,%rax
063c78bd jne       0x0000`0000`063C`78EF
063c78bf mov       0xA0(%rsp),%rax
063c78c7 mov       %rax,0xD8(%rsp)
063c78cf mov       %rax,0xA8(%rsp)
063c78d7 mov       0xA8(%rsp),%rdx
063c78df lea       0x78(%rsp),%rcx
063c78e4 call      0x0000`0000`063C`8810
063c78e9 mov       %al,0x37(%rsp)
063c78ed jmp       0x0000`0000`063C`7913
063c78ef movq      $0,0x80(%rsp)
063c78fb mov       0x80(%rsp),%rax
063c7903 mov       0x88(%rsp),%rdx
063c790b add       $0xF8,%rsp
063c7912 ret
063c7913 mov       0x37(%rsp),%al
063c7917 test      $1,%al
063c7919 jne       0x0000`0000`063C`7937
063c791b jmp       0x0000`0000`063C`791D
063c791d mov       0x98(%rsp),%rax
063c7925 add       $1,%rax
063c7929 mov       %rax,0x28(%rsp)
063c792e setb      %al
063c7931 test      $1,%al
063c7933 jne       0x0000`0000`063C`796F
063c7935 jmp       0x0000`0000`063C`795D
063c7937 mov       0x98(%rsp),%rax
063c793f mov       0x98(%rsp),%rax
063c7947 mov       %rax,0x88(%rsp)
063c794f movq      $1,0x80(%rsp)
063c795b jmp       0x0000`0000`063C`78FB
063c795d mov       0x28(%rsp),%rax
063c7962 mov       %rax,0x98(%rsp)
063c796a jmp       0x0000`0000`063C`7893
063c796f lea       0x63D`1240,%rcx
063c7976 lea       0x63D`1AA0,%r8
063c797d mov       $0x1C,%edx
063c7982 call      0x0000`0000`063B`2030
063c7987 ud2

core::slice::iter::impl$173::rposition<u8,core::str::impl$0::floor_char_boundary::closure_env$0>:
063c7990 sub       $0xF8,%rsp
063c7997 mov       %rcx,0x60(%rsp)
063c799c mov       %rcx,0xB0(%rsp)
063c79a4 mov       (%rcx),%rcx
063c79a7 mov       %rcx,0x68(%rsp)
063c79ac mov       %rcx,0xB8(%rsp)
063c79b4 call      0x0000`0000`063C`28D0
063c79b9 mov       %rax,0x70(%rsp)
063c79be mov       0x70(%rsp),%rax
063c79c3 mov       %rax,0xE0(%rsp)
063c79cb movq      $1,0xC0(%rsp)
063c79d7 mov       $1,%eax
063c79dc cmp       $0,%rax
063c79e0 jne       0x0000`0000`063C`7A01
063c79e2 mov       0x68(%rsp),%rcx
063c79e7 mov       0x60(%rsp),%rax
063c79ec mov       8(%rax),%rax
063c79f0 mov       %rax,0x50(%rsp)
063c79f5 call      0x0000`0000`063C`28D0
063c79fa mov       %rax,0x58(%rsp)
063c79ff jmp       0x0000`0000`063C`7A6B
063c7a01 mov       0x68(%rsp),%rcx
063c7a06 mov       0x60(%rsp),%rax
063c7a0b mov       8(%rax),%rax
063c7a0f mov       %rax,0x40(%rsp)
063c7a14 call      0x0000`0000`063C`28D0
063c7a19 mov       %rax,0x48(%rsp)
063c7a1e mov       0x48(%rsp),%rcx
063c7a23 mov       0x40(%rsp),%rax
063c7a28 sub       %rcx,%rax
063c7a2b mov       %rax,0xC8(%rsp)
063c7a33 mov       0xC8(%rsp),%rax
063c7a3b mov       %rax,0x38(%rsp)
063c7a40 mov       %rax,0xD0(%rsp)
063c7a48 mov       0x38(%rsp),%rax
063c7a4d shr       $0,%rax
063c7a51 mov       %rax,0x90(%rsp)
063c7a59 mov       0x90(%rsp),%rax
063c7a61 mov       %rax,0x98(%rsp)
063c7a69 jmp       0x0000`0000`063C`7A92
063c7a6b mov       0x58(%rsp),%rcx
063c7a70 mov       0x50(%rsp),%rax
063c7a75 mov       %rax,0xE8(%rsp)
063c7a7d mov       %rcx,0xF0(%rsp)
063c7a85 sub       %rcx,%rax
063c7a88 mov       %rax,0x90(%rsp)
063c7a90 jmp       0x0000`0000`063C`7A59
063c7a92 mov       0x60(%rsp),%rcx
063c7a97 call      0x0000`0000`063C`7BA0
063c7a9c mov       %rax,0xA0(%rsp)
063c7aa4 mov       $1,%eax
063c7aa9 xor       %ecx,%ecx
063c7aab cmpq      $0,0xA0(%rsp)
063c7ab4 cmove     %rcx,%rax
063c7ab8 cmp       $1,%rax
063c7abc jne       0x0000`0000`063C`7AED
063c7abe mov       0xA0(%rsp),%rax
063c7ac6 mov       %rax,0x28(%rsp)
063c7acb mov       %rax,0xD8(%rsp)
063c7ad3 mov       0x98(%rsp),%rax
063c7adb sub       $1,%rax
063c7adf mov       %rax,0x30(%rsp)
063c7ae4 setb      %al
063c7ae7 test      $1,%al
063c7ae9 jne       0x0000`0000`063C`7B45
063c7aeb jmp       0x0000`0000`063C`7B13
063c7aed jmp       0x0000`0000`063C`7AEF
063c7aef movq      $0,0x80(%rsp)
063c7afb mov       0x80(%rsp),%rax
063c7b03 mov       0x88(%rsp),%rdx
063c7b0b add       $0xF8,%rsp
063c7b12 ret
063c7b13 mov       0x28(%rsp),%rax
063c7b18 mov       0x30(%rsp),%rcx
063c7b1d mov       %rcx,0x98(%rsp)
063c7b25 mov       %rax,0xA8(%rsp)
063c7b2d mov       0xA8(%rsp),%rdx
063c7b35 lea       0x78(%rsp),%rcx
063c7b3a call      0x0000`0000`063B`DA60
063c7b3f mov       %al,0x27(%rsp)
063c7b43 jmp       0x0000`0000`063C`7B5F
063c7b45 lea       0x63D`12B0,%rcx
063c7b4c lea       0x63D`1AA0,%r8
063c7b53 mov       $0x21,%edx
063c7b58 call      0x0000`0000`063B`2030
063c7b5d ud2
063c7b5f mov       0x27(%rsp),%al
063c7b63 test      $1,%al
063c7b65 jne       0x0000`0000`063C`7B6E
063c7b67 jmp       0x0000`0000`063C`7B69
063c7b69 jmp       0x0000`0000`063C`7A92
063c7b6e mov       0x98(%rsp),%rax
063c7b76 mov       0x98(%rsp),%rax
063c7b7e mov       %rax,0x88(%rsp)
063c7b86 movq      $1,0x80(%rsp)
063c7b92 jmp       0x0000`0000`063C`7AFB

core::slice::iter::impl$174::next_back<u8>:
063c7ba0 sub       $0x88,%rsp
063c7ba7 mov       %rcx,0x38(%rsp)
063c7bac mov       %rcx,0x50(%rsp)
063c7bb1 mov       (%rcx),%rcx
063c7bb4 call      0x0000`0000`063C`28D0
063c7bb9 mov       %rax,0x40(%rsp)
063c7bbe mov       0x40(%rsp),%rcx
063c7bc3 call      0x0000`0000`063B`FD70
063c7bc8 jmp       0x0000`0000`063C`7BCA
063c7bca mov       $1,%eax
063c7bcf cmp       $0,%rax
063c7bd3 jne       0x0000`0000`063C`7BE9
063c7bd5 mov       0x38(%rsp),%rax
063c7bda mov       (%rax),%rcx
063c7bdd call      0x0000`0000`063C`28D0
063c7be2 mov       %rax,0x30(%rsp)
063c7be7 jmp       0x0000`0000`063C`7BF9
063c7be9 mov       0x38(%rsp),%rax
063c7bee mov       8(%rax),%rcx
063c7bf2 call      0x0000`0000`063C`4830
063c7bf7 jmp       0x0000`0000`063C`7BD5
063c7bf9 mov       0x30(%rsp),%rax
063c7bfe mov       0x38(%rsp),%rcx
063c7c03 cmp       8(%rcx),%rax
063c7c07 je        0x0000`0000`063C`7C90
063c7c0d mov       0x38(%rsp),%rax
063c7c12 mov       %rax,0x60(%rsp)
063c7c17 movq      $1,0x68(%rsp)
063c7c20 mov       8(%rax),%rax
063c7c24 mov       %rax,0x28(%rsp)
063c7c29 xor       %eax,%eax
063c7c2b test      $1,%al
063c7c2d jne       0x0000`0000`063C`7C31
063c7c2f jmp       0x0000`0000`063C`7C4B
063c7c31 lea       0x63D`1AC0,%rcx
063c7c38 lea       0x63D`1AA0,%r8
063c7c3f mov       $0x1F,%edx
063c7c44 call      0x0000`0000`063B`2030
063c7c49 ud2
063c7c4b mov       0x38(%rsp),%rax
063c7c50 mov       0x28(%rsp),%rcx
063c7c55 mov       %rcx,0x70(%rsp)
063c7c5a movq      $0xFFFF`FFFF`FFFF`FFFF,0x78(%rsp)
063c7c63 add       $0xFFFF`FFFF`FFFF`FFFF,%rcx
063c7c67 mov       %rcx,0x80(%rsp)
063c7c6f mov       0x80(%rsp),%rcx
063c7c77 mov       %rcx,8(%rax)
063c7c7b mov       8(%rax),%rax
063c7c7f mov       %rax,0x58(%rsp)
063c7c84 mov       0x58(%rsp),%rax
063c7c89 mov       %rax,0x20(%rsp)
063c7c8e jmp       0x0000`0000`063C`7CA6
063c7c90 movq      $0,0x48(%rsp)
063c7c99 mov       0x48(%rsp),%rax
063c7c9e add       $0x88,%rsp
063c7ca5 ret
063c7ca6 mov       0x20(%rsp),%rax
063c7cab mov       %rax,0x48(%rsp)
063c7cb0 jmp       0x0000`0000`063C`7C99

core::slice::iter::impl$180::next_back<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c7cc0 sub       $0x88,%rsp
063c7cc7 mov       %rcx,0x38(%rsp)
063c7ccc mov       %rcx,0x50(%rsp)
063c7cd1 mov       (%rcx),%rcx
063c7cd4 call      0x0000`0000`063C`28E0
063c7cd9 mov       %rax,0x40(%rsp)
063c7cde mov       0x40(%rsp),%rcx
063c7ce3 call      0x0000`0000`063C`7E40
063c7ce8 jmp       0x0000`0000`063C`7CEA
063c7cea mov       $1,%eax
063c7cef cmp       $0,%rax
063c7cf3 jne       0x0000`0000`063C`7D09
063c7cf5 mov       0x38(%rsp),%rax
063c7cfa mov       (%rax),%rcx
063c7cfd call      0x0000`0000`063C`28E0
063c7d02 mov       %rax,0x30(%rsp)
063c7d07 jmp       0x0000`0000`063C`7D19
063c7d09 mov       0x38(%rsp),%rax
063c7d0e mov       8(%rax),%rcx
063c7d12 call      0x0000`0000`063C`7E40
063c7d17 jmp       0x0000`0000`063C`7CF5
063c7d19 mov       0x30(%rsp),%rax
063c7d1e mov       0x38(%rsp),%rcx
063c7d23 cmp       8(%rcx),%rax
063c7d27 je        0x0000`0000`063C`7DB0
063c7d2d mov       0x38(%rsp),%rax
063c7d32 mov       %rax,0x60(%rsp)
063c7d37 movq      $1,0x68(%rsp)
063c7d40 mov       8(%rax),%rax
063c7d44 mov       %rax,0x28(%rsp)
063c7d49 xor       %eax,%eax
063c7d4b test      $1,%al
063c7d4d jne       0x0000`0000`063C`7D51
063c7d4f jmp       0x0000`0000`063C`7D6B
063c7d51 lea       0x63D`1AC0,%rcx
063c7d58 lea       0x63D`1AE0,%r8
063c7d5f mov       $0x1F,%edx
063c7d64 call      0x0000`0000`063B`2030
063c7d69 ud2
063c7d6b mov       0x38(%rsp),%rax
063c7d70 mov       0x28(%rsp),%rcx
063c7d75 mov       %rcx,0x70(%rsp)
063c7d7a movq      $0xFFFF`FFFF`FFFF`FFFF,0x78(%rsp)
063c7d83 add       $0xFFFF`FFFF`FFFF`FFFF,%rcx
063c7d87 mov       %rcx,0x80(%rsp)
063c7d8f mov       0x80(%rsp),%rcx
063c7d97 mov       %rcx,8(%rax)
063c7d9b mov       8(%rax),%rax
063c7d9f mov       %rax,0x58(%rsp)
063c7da4 mov       0x58(%rsp),%rax
063c7da9 mov       %rax,0x20(%rsp)
063c7dae jmp       0x0000`0000`063C`7DC6
063c7db0 movq      $0,0x48(%rsp)
063c7db9 mov       0x48(%rsp),%rax
063c7dbe add       $0x88,%rsp
063c7dc5 ret
063c7dc6 mov       0x20(%rsp),%rax
063c7dcb mov       %rax,0x48(%rsp)
063c7dd0 jmp       0x0000`0000`063C`7DB9

core::ptr::const_ptr::impl$0::cast<core::mem::maybe_uninit::MaybeUninit<u8>,tuple$<> >:
063c7de0 push      %rax
063c7de1 mov       %rcx,%rax
063c7de4 mov       %rax,(%rsp)
063c7de8 pop       %rcx
063c7de9 ret

core::ptr::const_ptr::impl$1::len<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c7df0 sub       $0x38,%rsp
063c7df4 mov       %rcx,0x28(%rsp)
063c7df9 mov       %rdx,0x30(%rsp)
063c7dfe call      0x0000`0000`063B`3AF0
063c7e03 mov       %rax,0x20(%rsp)
063c7e08 mov       0x20(%rsp),%rax
063c7e0d add       $0x38,%rsp
063c7e11 ret

core::ptr::const_ptr::impl$1::as_ptr<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c7e20 sub       $0x10,%rsp
063c7e24 mov       %rcx,%rax
063c7e27 mov       %rax,(%rsp)
063c7e2b mov       %rdx,8(%rsp)
063c7e30 add       $0x10,%rsp
063c7e34 ret

core::ptr::mut_ptr::impl$0::is_null<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c7e40 sub       $0x38,%rsp
063c7e44 mov       %rcx,0x28(%rsp)
063c7e49 mov       %rcx,0x30(%rsp)
063c7e4e mov       0x28(%rsp),%rcx
063c7e53 xor       %eax,%eax
063c7e55 mov       %eax,%edx
063c7e57 call      0x0000`0000`063B`FE00
063c7e5c mov       %al,0x27(%rsp)
063c7e60 mov       0x27(%rsp),%al
063c7e64 and       $1,%al
063c7e66 movzbl    %al,%eax
063c7e69 add       $0x38,%rsp
063c7e6d ret

core::array::impl$15::index<core::mem::maybe_uninit::MaybeUninit<u8>,core::ops::range::RangeFrom<usize>,128>:
063c7e70 sub       $0x48,%rsp
063c7e74 mov       %r8,%r9
063c7e77 mov       %rdx,%r8
063c7e7a mov       %rcx,0x38(%rsp)
063c7e7f mov       %r8,0x40(%rsp)
063c7e84 mov       $0x80,%edx
063c7e89 call      0x0000`0000`063C`8890
063c7e8e mov       %rax,0x28(%rsp)
063c7e93 mov       %rdx,0x30(%rsp)
063c7e98 mov       0x30(%rsp),%rdx
063c7e9d mov       0x28(%rsp),%rax
063c7ea2 add       $0x48,%rsp
063c7ea6 ret

core::char::impl$0::next:
063c7eb0 sub       $0x78,%rsp
063c7eb4 mov       %rcx,0x48(%rsp)
063c7eb9 mov       %rcx,0x68(%rsp)
063c7ebe movzbl    0xC(%rcx),%eax
063c7ec2 mov       %rax,0x50(%rsp)
063c7ec7 mov       0x50(%rsp),%rax
063c7ecc lea       0x63C`8080,%rcx
063c7ed3 movslq    (%rcx,%rax,4),%rax
063c7ed7 add       %rcx,%rax
063c7eda jmp       *%rax
063c7edc ud2
063c7ede movl      $0x11`0000,0x5C(%rsp)
063c7ee6 jmp       0x0000`0000`063C`7F7E
063c7eeb mov       0x48(%rsp),%rax
063c7ef0 movb      $0,0x67(%rsp)
063c7ef5 mov       0x67(%rsp),%cl
063c7ef9 mov       %cl,0xC(%rax)
063c7efc movl      $0x7D,0x5C(%rsp)
063c7f04 jmp       0x0000`0000`063C`7F7E
063c7f06 mov       0x48(%rsp),%rax
063c7f0b mov       8(%rax),%ecx
063c7f0e mov       %ecx,0x3C(%rsp)
063c7f12 mov       (%rax),%rax
063c7f15 mov       $4,%ecx
063c7f1a mul       %rcx
063c7f1d mov       %rax,0x40(%rsp)
063c7f22 seto      %al
063c7f25 test      $1,%al
063c7f27 jne       0x0000`0000`063C`7FAD
063c7f2d jmp       0x0000`0000`063C`7F87
063c7f2f mov       0x48(%rsp),%rax
063c7f34 movb      $2,0x65(%rsp)
063c7f39 mov       0x65(%rsp),%cl
063c7f3d mov       %cl,0xC(%rax)
063c7f40 movl      $0x7B,0x5C(%rsp)
063c7f48 jmp       0x0000`0000`063C`7F7E
063c7f4a mov       0x48(%rsp),%rax
063c7f4f movb      $3,0x64(%rsp)
063c7f54 mov       0x64(%rsp),%cl
063c7f58 mov       %cl,0xC(%rax)
063c7f5b movl      $0x75,0x5C(%rsp)
063c7f63 jmp       0x0000`0000`063C`7F7E
063c7f65 mov       0x48(%rsp),%rax
063c7f6a movb      $4,0x63(%rsp)
063c7f6f mov       0x63(%rsp),%cl
063c7f73 mov       %cl,0xC(%rax)
063c7f76 movl      $0x5C,0x5C(%rsp)
063c7f7e mov       0x5C(%rsp),%eax
063c7f82 add       $0x78,%rsp
063c7f86 ret
063c7f87 mov       0x3C(%rsp),%edx
063c7f8b mov       0x40(%rsp),%rcx
063c7f90 mov       %rcx,%rax
063c7f93 and       $0xFFFF`FFFF`FFFF`FFE0,%rax
063c7f97 cmp       $0,%rax
063c7f9b setne     %al
063c7f9e and       $0x1F,%ecx
063c7fa1 shr       %cl,%edx
063c7fa3 mov       %edx,0x38(%rsp)
063c7fa7 test      $1,%al
063c7fa9 jne       0x0000`0000`063C`7FE2
063c7fab jmp       0x0000`0000`063C`7FC7
063c7fad lea       0x63D`1B30,%rcx
063c7fb4 lea       0x63D`1C20,%r8
063c7fbb mov       $0x21,%edx
063c7fc0 call      0x0000`0000`063B`2030
063c7fc5 ud2
063c7fc7 mov       0x38(%rsp),%ecx
063c7fcb and       $0xF,%ecx
063c7fce mov       %ecx,0x70(%rsp)
063c7fd2 mov       $0x10,%edx
063c7fd7 call      0x0000`0000`063B`C9F0
063c7fdc mov       %eax,0x34(%rsp)
063c7fe0 jmp       0x0000`0000`063C`7FFC
063c7fe2 lea       0x63D`1B80,%rcx
063c7fe9 lea       0x63D`1C38,%r8
063c7ff0 mov       $0x24,%edx
063c7ff5 call      0x0000`0000`063B`2030
063c7ffa ud2
063c7ffc mov       0x34(%rsp),%ecx
063c8000 lea       0x63D`1C50,%rdx
063c8007 call      0x0000`0000`063B`1740
063c800c mov       %eax,0x30(%rsp)
063c8010 mov       %eax,0x74(%rsp)
063c8014 mov       0x48(%rsp),%rax
063c8019 cmpq      $0,(%rax)
063c801d jne       0x0000`0000`063C`8032
063c801f mov       0x48(%rsp),%rax
063c8024 movb      $1,0x66(%rsp)
063c8029 mov       0x66(%rsp),%cl
063c802d mov       %cl,0xC(%rax)
063c8030 jmp       0x0000`0000`063C`8073
063c8032 mov       0x48(%rsp),%rax
063c8037 mov       (%rax),%rax
063c803a sub       $1,%rax
063c803e mov       %rax,0x28(%rsp)
063c8043 setb      %al
063c8046 test      $1,%al
063c8048 jne       0x0000`0000`063C`8059
063c804a mov       0x48(%rsp),%rax
063c804f mov       0x28(%rsp),%rcx
063c8054 mov       %rcx,(%rax)
063c8057 jmp       0x0000`0000`063C`8073
063c8059 lea       0x63D`1B00,%rcx
063c8060 lea       0x63D`1C68,%r8
063c8067 mov       $0x21,%edx
063c806c call      0x0000`0000`063B`2030
063c8071 ud2
063c8073 mov       0x30(%rsp),%eax
063c8077 mov       %eax,0x5C(%rsp)
063c807b jmp       0x0000`0000`063C`7F7E

core::char::impl$4::next:
063c80a0 sub       $0x88,%rsp
063c80a7 mov       %rcx,0x28(%rsp)
063c80ac mov       %rcx,0x70(%rsp)
063c80b1 mov       (%rcx),%eax
063c80b3 mov       %rax,0x30(%rsp)
063c80b8 mov       0x30(%rsp),%rax
063c80bd lea       0x63C`8178,%rcx
063c80c4 movslq    (%rcx,%rax,4),%rax
063c80c8 add       %rcx,%rax
063c80cb jmp       *%rax
063c80cd ud2
063c80cf movl      $0x11`0000,0x3C(%rsp)
063c80d7 jmp       0x0000`0000`063C`8169
063c80dc mov       0x28(%rsp),%rcx
063c80e1 mov       4(%rcx),%eax
063c80e4 mov       %eax,0x84(%rsp)
063c80eb movl      $0,0x58(%rsp)
063c80f3 mov       0x58(%rsp),%rdx
063c80f8 mov       %rdx,(%rcx)
063c80fb mov       0x60(%rsp),%rdx
063c8100 mov       %rdx,8(%rcx)
063c8104 mov       0x68(%rsp),%rdx
063c8109 mov       %rdx,0x10(%rcx)
063c810d mov       %eax,0x3C(%rsp)
063c8111 jmp       0x0000`0000`063C`8169
063c8113 mov       0x28(%rsp),%rax
063c8118 mov       4(%rax),%ecx
063c811b mov       %ecx,0x80(%rsp)
063c8122 mov       %ecx,0x44(%rsp)
063c8126 movl      $1,0x40(%rsp)
063c812e mov       0x40(%rsp),%rcx
063c8133 mov       %rcx,(%rax)
063c8136 mov       0x48(%rsp),%rcx
063c813b mov       %rcx,8(%rax)
063c813f mov       0x50(%rsp),%rcx
063c8144 mov       %rcx,0x10(%rax)
063c8148 movl      $0x5C,0x3C(%rsp)
063c8150 jmp       0x0000`0000`063C`8169
063c8152 mov       0x28(%rsp),%rcx
063c8157 add       $8,%rcx
063c815b mov       %rcx,0x78(%rsp)
063c8160 call      0x0000`0000`063C`7EB0
063c8165 mov       %eax,0x3C(%rsp)
063c8169 mov       0x3C(%rsp),%eax
063c816d add       $0x88,%rsp
063c8174 ret

core::char::impl$8::next:
063c8190 sub       $0x38,%rsp
063c8194 mov       %rcx,0x30(%rsp)
063c8199 call      0x0000`0000`063C`80A0
063c819e mov       %eax,0x2C(%rsp)
063c81a2 mov       0x2C(%rsp),%eax
063c81a6 add       $0x38,%rsp
063c81aa ret

core::iter::traits::collect::impl$0::into_iter<core::char::EscapeDebug>:
063c81b0 mov       %rcx,%rax
063c81b3 mov       (%rdx),%r8
063c81b6 mov       %r8,(%rcx)
063c81b9 mov       8(%rdx),%r8
063c81bd mov       %r8,8(%rcx)
063c81c1 mov       0x10(%rdx),%rdx
063c81c5 mov       %rdx,0x10(%rcx)
063c81c9 ret

core::slice::memchr::contains_zero_byte:
063c81d0 sub       $0x28,%rsp
063c81d4 mov       %rcx,(%rsp)
063c81d8 mov       %rcx,0x10(%rsp)
063c81dd mov       %rcx,0x18(%rsp)
063c81e2 movabs    $0x101`0101`0101`0101,%rax
063c81ec mov       %rax,0x20(%rsp)
063c81f1 movabs    $0x101`0101`0101`0101,%rax
063c81fb sub       %rax,%rcx
063c81fe mov       %rcx,8(%rsp)
063c8203 mov       8(%rsp),%rax
063c8208 mov       (%rsp),%rcx
063c820c xor       $0xFFFF`FFFF`FFFF`FFFF,%rcx
063c8210 and       %rcx,%rax
063c8213 movabs    $0x8080`8080`8080`8080,%rcx
063c821d and       %rcx,%rax
063c8220 cmp       $0,%rax
063c8224 setne     %al
063c8227 and       $1,%al
063c8229 movzbl    %al,%eax
063c822c add       $0x28,%rsp
063c8230 ret

core::slice::memchr::repeat_byte:
063c8240 sub       $0x38,%rsp
063c8244 mov       %cl,0x37(%rsp)
063c8248 movzbl    %cl,%eax
063c824b movabs    $0x101`0101`0101`0101,%rcx
063c8255 mul       %rcx
063c8258 mov       %rax,0x28(%rsp)
063c825d seto      %al
063c8260 test      $1,%al
063c8262 jne       0x0000`0000`063C`826E
063c8264 mov       0x28(%rsp),%rax
063c8269 add       $0x38,%rsp
063c826d ret
063c826e lea       0x63D`1B30,%rcx
063c8275 lea       0x63D`1D00,%r8
063c827c mov       $0x21,%edx
063c8281 call      0x0000`0000`063B`2030
063c8286 ud2

core::slice::memchr::memchr:
063c8290 sub       $0x78,%rsp
063c8294 mov       %r8,0x28(%rsp)
063c8299 mov       %rdx,0x30(%rsp)
063c829e mov       %cl,0x3F(%rsp)
063c82a2 mov       %rdx,0x68(%rsp)
063c82a7 mov       %r8,0x70(%rsp)
063c82ac cmp       $0x10,%r8
063c82b0 jb        0x0000`0000`063C`82D1
063c82b2 mov       0x28(%rsp),%r8
063c82b7 mov       0x30(%rsp),%rdx
063c82bc mov       0x3F(%rsp),%cl
063c82c0 call      0x0000`0000`063C`8350
063c82c5 mov       %rdx,0x48(%rsp)
063c82ca mov       %rax,0x40(%rsp)
063c82cf jmp       0x0000`0000`063C`830D
063c82d1 mov       0x28(%rsp),%rdx
063c82d6 mov       0x30(%rsp),%rcx
063c82db call      0x0000`0000`063C`01E0
063c82e0 mov       %rdx,0x58(%rsp)
063c82e5 mov       %rax,0x50(%rsp)
063c82ea lea       0x3F(%rsp),%rax
063c82ef mov       %rax,0x60(%rsp)
063c82f4 mov       0x60(%rsp),%rdx
063c82f9 lea       0x50(%rsp),%rcx
063c82fe call      0x0000`0000`063C`7590
063c8303 mov       %rdx,0x48(%rsp)
063c8308 mov       %rax,0x40(%rsp)
063c830d mov       0x40(%rsp),%rax
063c8312 mov       0x48(%rsp),%rdx
063c8317 add       $0x78,%rsp
063c831b ret

core::slice::memchr::memchr::closure$0:
063c8320 sub       $0x18,%rsp
063c8324 mov       %rcx,(%rsp)
063c8328 mov       (%rsp),%rax
063c832c mov       (%rax),%rax
063c832f mov       %rax,8(%rsp)
063c8334 mov       %rdx,0x10(%rsp)
063c8339 mov       (%rdx),%al
063c833b mov       (%rcx),%rcx
063c833e cmp       (%rcx),%al
063c8340 sete      %al
063c8343 and       $1,%al
063c8345 movzbl    %al,%eax
063c8348 add       $0x18,%rsp
063c834c ret

core::slice::memchr::memchr_general_case:
063c8350 sub       $0x1E8,%rsp
063c8357 mov       %r8,0xB8(%rsp)
063c835f mov       %rdx,%rax
063c8362 mov       0xB8(%rsp),%rdx
063c836a mov       %rax,0xC0(%rsp)
063c8372 mov       %cl,%al
063c8374 mov       0xC0(%rsp),%rcx
063c837c mov       %al,0xD7(%rsp)
063c8383 mov       %rcx,0x150(%rsp)
063c838b mov       %rdx,0x158(%rsp)
063c8393 mov       %rdx,0x160(%rsp)
063c839b call      0x0000`0000`063C`0180
063c83a0 mov       %rax,0xC8(%rsp)
063c83a8 mov       %rax,0x168(%rsp)
063c83b0 mov       0xC8(%rsp),%rcx
063c83b8 mov       $8,%edx
063c83bd call      0x0000`0000`063C`4930
063c83c2 mov       %rax,0xE8(%rsp)
063c83ca cmpq      $0,0xE8(%rsp)
063c83d3 ja        0x0000`0000`063C`83F6
063c83d5 mov       0xD7(%rsp),%cl
063c83dc call      0x0000`0000`063C`8240
063c83e1 mov       %rax,0xB0(%rsp)
063c83e9 mov       %rax,0x178(%rsp)
063c83f1 jmp       0x0000`0000`063C`850C
063c83f6 mov       0xB8(%rsp),%rdx
063c83fe mov       0xE8(%rsp),%rcx
063c8406 call      0x0000`0000`063B`10F0
063c840b mov       %rax,0xA8(%rsp)
063c8413 mov       0xB8(%rsp),%rdx
063c841b mov       0xC0(%rsp),%rcx
063c8423 mov       0xA8(%rsp),%rax
063c842b mov       %rax,0xE8(%rsp)
063c8433 mov       0xE8(%rsp),%rax
063c843b mov       %rax,0x110(%rsp)
063c8443 mov       0x110(%rsp),%r8
063c844b lea       0x63D`1D18,%r9
063c8452 call      0x0000`0000`063B`A210
063c8457 mov       %rax,0x98(%rsp)
063c845f mov       %rdx,0xA0(%rsp)
063c8467 mov       0xA0(%rsp),%rdx
063c846f mov       0x98(%rsp),%rcx
063c8477 call      0x0000`0000`063C`01E0
063c847c mov       %rdx,0x108(%rsp)
063c8484 mov       %rax,0x100(%rsp)
063c848c lea       0xD7(%rsp),%rax
063c8494 mov       %rax,0x118(%rsp)
063c849c mov       0x118(%rsp),%rdx
063c84a4 lea       0x100(%rsp),%rcx
063c84ac call      0x0000`0000`063C`7390
063c84b1 mov       %rdx,0xF8(%rsp)
063c84b9 mov       %rax,0xF0(%rsp)
063c84c1 cmpq      $1,0xF0(%rsp)
063c84ca jne       0x0000`0000`063C`83D5
063c84d0 mov       0xF8(%rsp),%rax
063c84d8 mov       %rax,0x170(%rsp)
063c84e0 mov       %rax,0xE0(%rsp)
063c84e8 movq      $1,0xD8(%rsp)
063c84f4 mov       0xD8(%rsp),%rax
063c84fc mov       0xE0(%rsp),%rdx
063c8504 add       $0x1E8,%rsp
063c850b ret
063c850c mov       0xB8(%rsp),%rax
063c8514 mov       0xE8(%rsp),%rcx
063c851c mov       %rcx,0x88(%rsp)
063c8524 sub       $0x10,%rax
063c8528 mov       %rax,0x90(%rsp)
063c8530 setb      %al
063c8533 test      $1,%al
063c8535 jne       0x0000`0000`063C`854E
063c8537 mov       0x88(%rsp),%rax
063c853f mov       0x90(%rsp),%rcx
063c8547 cmp       %rcx,%rax
063c854a jbe       0x0000`0000`063C`85AE
063c854c jmp       0x0000`0000`063C`8568
063c854e lea       0x63D`1B00,%rcx
063c8555 lea       0x63D`1D30,%r8
063c855c mov       $0x21,%edx
063c8561 call      0x0000`0000`063B`2030
063c8566 ud2
063c8568 mov       0xB8(%rsp),%rdx
063c8570 mov       0xC0(%rsp),%rcx
063c8578 mov       0xE8(%rsp),%rax
063c8580 mov       %rax,0x138(%rsp)
063c8588 mov       0x138(%rsp),%r8
063c8590 lea       0x63D`1D78,%r9
063c8597 call      0x0000`0000`063B`A160
063c859c mov       %rax,0x78(%rsp)
063c85a1 mov       %rdx,0x80(%rsp)
063c85a9 jmp       0x0000`0000`063C`8750
063c85ae mov       0xC8(%rsp),%rax
063c85b6 mov       0xE8(%rsp),%rcx
063c85be mov       %rax,0x1C0(%rsp)
063c85c6 mov       %rcx,0x1C8(%rsp)
063c85ce mov       %rax,0x1D0(%rsp)
063c85d6 mov       %rcx,0x1D8(%rsp)
063c85de add       %rcx,%rax
063c85e1 mov       %rax,0x1E0(%rsp)
063c85e9 mov       0x1E0(%rsp),%rax
063c85f1 mov       %rax,0x70(%rsp)
063c85f6 mov       0x70(%rsp),%rax
063c85fb mov       (%rax),%rax
063c85fe mov       %rax,0x60(%rsp)
063c8603 mov       %rax,0x180(%rsp)
063c860b mov       0xE8(%rsp),%rax
063c8613 add       $8,%rax
063c8617 mov       %rax,0x68(%rsp)
063c861c setb      %al
063c861f test      $1,%al
063c8621 jne       0x0000`0000`063C`866A
063c8623 mov       0x68(%rsp),%rcx
063c8628 mov       0xC8(%rsp),%rax
063c8630 mov       %rax,0x198(%rsp)
063c8638 mov       %rcx,0x1A0(%rsp)
063c8640 mov       %rax,0x1A8(%rsp)
063c8648 mov       %rcx,0x1B0(%rsp)
063c8650 add       %rcx,%rax
063c8653 mov       %rax,0x1B8(%rsp)
063c865b mov       0x1B8(%rsp),%rax
063c8663 mov       %rax,0x58(%rsp)
063c8668 jmp       0x0000`0000`063C`8684
063c866a lea       0x63D`1B60,%rcx
063c8671 lea       0x63D`1D48,%r8
063c8678 mov       $0x1C,%edx
063c867d call      0x0000`0000`063B`2030
063c8682 ud2
063c8684 mov       0xB0(%rsp),%rax
063c868c mov       0x60(%rsp),%rcx
063c8691 mov       0x58(%rsp),%rdx
063c8696 mov       (%rdx),%rdx
063c8699 mov       %rdx,0x48(%rsp)
063c869e mov       %rdx,0x188(%rsp)
063c86a6 xor       %rax,%rcx
063c86a9 call      0x0000`0000`063C`81D0
063c86ae mov       %al,0x57(%rsp)
063c86b2 and       $1,%al
063c86b4 mov       %al,0x196(%rsp)
063c86bb mov       0xB0(%rsp),%rax
063c86c3 mov       0x48(%rsp),%rcx
063c86c8 xor       %rax,%rcx
063c86cb call      0x0000`0000`063C`81D0
063c86d0 mov       %al,0x47(%rsp)
063c86d4 and       $1,%al
063c86d6 mov       %al,0x197(%rsp)
063c86dd mov       0x57(%rsp),%al
063c86e1 test      $1,%al
063c86e3 jne       0x0000`0000`063C`86F6
063c86e5 jmp       0x0000`0000`063C`86E7
063c86e7 mov       0x47(%rsp),%al
063c86eb and       $1,%al
063c86ed mov       %al,0x127(%rsp)
063c86f4 jmp       0x0000`0000`063C`86FE
063c86f6 movb      $1,0x127(%rsp)
063c86fe testb     $1,0x127(%rsp)
063c8706 jne       0x0000`0000`063C`8568
063c870c mov       0xE8(%rsp),%rax
063c8714 add       $0x10,%rax
063c8718 mov       %rax,0x38(%rsp)
063c871d setb      %al
063c8720 test      $1,%al
063c8722 jne       0x0000`0000`063C`8736
063c8724 mov       0x38(%rsp),%rax
063c8729 mov       %rax,0xE8(%rsp)
063c8731 jmp       0x0000`0000`063C`850C
063c8736 lea       0x63D`1B60,%rcx
063c873d lea       0x63D`1D60,%r8
063c8744 mov       $0x1C,%edx
063c8749 call      0x0000`0000`063B`2030
063c874e ud2
063c8750 mov       0x80(%rsp),%rdx
063c8758 mov       0x78(%rsp),%rcx
063c875d call      0x0000`0000`063C`01E0
063c8762 mov       %rdx,0x130(%rsp)
063c876a mov       %rax,0x128(%rsp)
063c8772 lea       0xD7(%rsp),%rax
063c877a mov       %rax,0x140(%rsp)
063c8782 mov       0x140(%rsp),%rdx
063c878a lea       0x128(%rsp),%rcx
063c8792 call      0x0000`0000`063C`7790
063c8797 mov       %rax,0x28(%rsp)
063c879c mov       %rdx,0x30(%rsp)
063c87a1 mov       0x30(%rsp),%rdx
063c87a6 mov       0x28(%rsp),%rcx
063c87ab lea       0xE8(%rsp),%rax
063c87b3 mov       %rax,0x148(%rsp)
063c87bb mov       0x148(%rsp),%r8
063c87c3 call      0x0000`0000`063B`1B20
063c87c8 mov       %rdx,0xE0(%rsp)
063c87d0 mov       %rax,0xD8(%rsp)
063c87d8 jmp       0x0000`0000`063C`84F4

core::slice::memchr::memchr_general_case::closure$0:
063c87e0 sub       $0x18,%rsp
063c87e4 mov       %rcx,(%rsp)
063c87e8 mov       (%rsp),%rax
063c87ec mov       (%rax),%rax
063c87ef mov       %rax,8(%rsp)
063c87f4 mov       %rdx,0x10(%rsp)
063c87f9 mov       (%rdx),%al
063c87fb mov       (%rcx),%rcx
063c87fe cmp       (%rcx),%al
063c8800 sete      %al
063c8803 and       $1,%al
063c8805 movzbl    %al,%eax
063c8808 add       $0x18,%rsp
063c880c ret

core::slice::memchr::memchr_general_case::closure$1:
063c8810 sub       $0x18,%rsp
063c8814 mov       %rcx,(%rsp)
063c8818 mov       (%rsp),%rax
063c881c mov       (%rax),%rax
063c881f mov       %rax,8(%rsp)
063c8824 mov       %rdx,0x10(%rsp)
063c8829 mov       (%rdx),%al
063c882b mov       (%rcx),%rcx
063c882e cmp       (%rcx),%al
063c8830 sete      %al
063c8833 and       $1,%al
063c8835 movzbl    %al,%eax
063c8838 add       $0x18,%rsp
063c883c ret

core::slice::memchr::memchr_general_case::closure$2:
063c8840 sub       $0x38,%rsp
063c8844 mov       %rcx,0x28(%rsp)
063c8849 mov       %rdx,0x30(%rsp)
063c884e add       (%rcx),%rdx
063c8851 mov       %rdx,0x20(%rsp)
063c8856 setb      %al
063c8859 test      $1,%al
063c885b jne       0x0000`0000`063C`8867
063c885d mov       0x20(%rsp),%rax
063c8862 add       $0x38,%rsp
063c8866 ret
063c8867 lea       0x63D`1B60,%rcx
063c886e lea       0x63D`1D90,%r8
063c8875 mov       $0x1C,%edx
063c887a call      0x0000`0000`063B`2030
063c887f ud2

core::slice::index::impl$0::index<core::mem::maybe_uninit::MaybeUninit<u8>,core::ops::range::RangeFrom<usize> >:
063c8890 sub       $0x58,%rsp
063c8894 mov       %r8,0x28(%rsp)
063c8899 mov       %rdx,%r8
063c889c mov       %rcx,%rdx
063c889f mov       0x28(%rsp),%rcx
063c88a4 mov       %rdx,0x40(%rsp)
063c88a9 mov       %r8,0x48(%rsp)
063c88ae mov       %rcx,0x50(%rsp)
063c88b3 call      0x0000`0000`063B`2E40
063c88b8 mov       %rax,0x30(%rsp)
063c88bd mov       %rdx,0x38(%rsp)
063c88c2 mov       0x38(%rsp),%rdx
063c88c7 mov       0x30(%rsp),%rax
063c88cc add       $0x58,%rsp
063c88d0 ret

core::slice::impl$0::as_ptr<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c88e0 sub       $0x10,%rsp
063c88e4 mov       %rcx,%rax
063c88e7 mov       %rax,(%rsp)
063c88eb mov       %rdx,8(%rsp)
063c88f0 add       $0x10,%rsp
063c88f4 ret

core::slice::impl$0::as_mut_ptr<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c8900 sub       $0x10,%rsp
063c8904 mov       %rcx,%rax
063c8907 mov       %rax,(%rsp)
063c890b mov       %rdx,8(%rsp)
063c8910 add       $0x10,%rsp
063c8914 ret

core::slice::impl$0::iter_mut<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c8920 sub       $0x48,%rsp
063c8924 mov       %rcx,0x38(%rsp)
063c8929 mov       %rdx,0x40(%rsp)
063c892e call      0x0000`0000`063C`5660
063c8933 mov       %rax,0x28(%rsp)
063c8938 mov       %rdx,0x30(%rsp)
063c893d mov       0x30(%rsp),%rdx
063c8942 mov       0x28(%rsp),%rax
063c8947 add       $0x48,%rsp
063c894b ret

core::num::impl$6::is_utf8_char_boundary:
063c8950 push      %rax
063c8951 mov       %cl,7(%rsp)
063c8955 cmp       $0xC0,%cl
063c8958 setge     %al
063c895b and       $1,%al
063c895d movzbl    %al,%eax
063c8960 pop       %rcx
063c8961 ret

core::num::impl$11::checked_sub:
063c8970 sub       $0x88,%rsp
063c8977 mov       %rcx,0x28(%rsp)
063c897c mov       %rdx,0x30(%rsp)
063c8981 mov       %rcx,0x58(%rsp)
063c8986 mov       %rdx,0x60(%rsp)
063c898b sub       %rdx,%rcx
063c898e mov       %rcx,0x68(%rsp)
063c8993 setb      0x70(%rsp)
063c8998 mov       0x68(%rsp),%rcx
063c899d mov       0x70(%rsp),%al
063c89a1 mov       %rcx,0x78(%rsp)
063c89a6 mov       %al,0x87(%rsp)
063c89ad mov       %rcx,0x48(%rsp)
063c89b2 mov       %al,0x50(%rsp)
063c89b6 mov       0x48(%rsp),%rax
063c89bb mov       %rax,8(%rsp)
063c89c0 mov       0x50(%rsp),%al
063c89c4 mov       %al,0x17(%rsp)
063c89c8 mov       0x17(%rsp),%al
063c89cc mov       8(%rsp),%rcx
063c89d1 mov       %rcx,0x38(%rsp)
063c89d6 mov       %al,%cl
063c89d8 and       $1,%cl
063c89db mov       %cl,0x46(%rsp)
063c89df and       $1,%al
063c89e1 mov       %al,0x47(%rsp)
063c89e5 mov       0x47(%rsp),%al
063c89e9 mov       %al,7(%rsp)
063c89ed mov       7(%rsp),%al
063c89f1 test      $1,%al
063c89f3 jne       0x0000`0000`063C`8A0C
063c89f5 jmp       0x0000`0000`063C`89F7
063c89f7 mov       8(%rsp),%rax
063c89fc mov       %rax,0x20(%rsp)
063c8a01 movq      $1,0x18(%rsp)
063c8a0a jmp       0x0000`0000`063C`8A15
063c8a0c movq      $0,0x18(%rsp)
063c8a15 mov       0x18(%rsp),%rax
063c8a1a mov       0x20(%rsp),%rdx
063c8a1f add       $0x88,%rsp
063c8a26 ret

core::num::impl$11::checked_mul:
063c8a30 sub       $0x88,%rsp
063c8a37 mov       %rcx,%rax
063c8a3a mov       %rax,0x28(%rsp)
063c8a3f mov       %rdx,0x30(%rsp)
063c8a44 mov       %rax,0x58(%rsp)
063c8a49 mov       %rdx,0x60(%rsp)
063c8a4e mul       %rdx
063c8a51 mov       %rax,0x68(%rsp)
063c8a56 seto      0x70(%rsp)
063c8a5b mov       0x68(%rsp),%rcx
063c8a60 mov       0x70(%rsp),%al
063c8a64 mov       %rcx,0x78(%rsp)
063c8a69 mov       %al,0x87(%rsp)
063c8a70 mov       %rcx,0x48(%rsp)
063c8a75 mov       %al,0x50(%rsp)
063c8a79 mov       0x48(%rsp),%rax
063c8a7e mov       %rax,8(%rsp)
063c8a83 mov       0x50(%rsp),%al
063c8a87 mov       %al,0x17(%rsp)
063c8a8b mov       0x17(%rsp),%al
063c8a8f mov       8(%rsp),%rcx
063c8a94 mov       %rcx,0x38(%rsp)
063c8a99 mov       %al,%cl
063c8a9b and       $1,%cl
063c8a9e mov       %cl,0x46(%rsp)
063c8aa2 and       $1,%al
063c8aa4 mov       %al,0x47(%rsp)
063c8aa8 mov       0x47(%rsp),%al
063c8aac mov       %al,7(%rsp)
063c8ab0 mov       7(%rsp),%al
063c8ab4 test      $1,%al
063c8ab6 jne       0x0000`0000`063C`8ACF
063c8ab8 jmp       0x0000`0000`063C`8ABA
063c8aba mov       8(%rsp),%rax
063c8abf mov       %rax,0x20(%rsp)
063c8ac4 movq      $1,0x18(%rsp)
063c8acd jmp       0x0000`0000`063C`8AD8
063c8acf movq      $0,0x18(%rsp)
063c8ad8 mov       0x18(%rsp),%rax
063c8add mov       0x20(%rsp),%rdx
063c8ae2 add       $0x88,%rsp
063c8ae9 ret

core::num::impl$11::saturating_mul:
063c8af0 sub       $0x58,%rsp
063c8af4 mov       %rcx,0x40(%rsp)
063c8af9 mov       %rdx,0x48(%rsp)
063c8afe call      0x0000`0000`063C`8A30
063c8b03 mov       %rdx,0x38(%rsp)
063c8b08 mov       %rax,0x30(%rsp)
063c8b0d mov       0x30(%rsp),%rax
063c8b12 test      %rax,%rax
063c8b15 je        0x0000`0000`063C`8B1D
063c8b17 jmp       0x0000`0000`063C`8B19
063c8b19 jmp       0x0000`0000`063C`8B28
063c8b1b ud2
063c8b1d movq      $0xFFFF`FFFF`FFFF`FFFF,0x28(%rsp)
063c8b26 jmp       0x0000`0000`063C`8B37
063c8b28 mov       0x38(%rsp),%rax
063c8b2d mov       %rax,0x50(%rsp)
063c8b32 mov       %rax,0x28(%rsp)
063c8b37 mov       0x28(%rsp),%rax
063c8b3c add       $0x58,%rsp
063c8b40 ret

core::ptr::slice_from_raw_parts<array$<usize,4> >:
063c8b50 sub       $0x58,%rsp
063c8b54 mov       %rdx,0x38(%rsp)
063c8b59 mov       %rcx,0x48(%rsp)
063c8b5e mov       %rdx,0x50(%rsp)
063c8b63 call      0x0000`0000`063C`48F0
063c8b68 mov       %rax,0x40(%rsp)
063c8b6d mov       0x38(%rsp),%rdx
063c8b72 mov       0x40(%rsp),%rcx
063c8b77 call      0x0000`0000`063B`3BA0
063c8b7c mov       %rax,0x28(%rsp)
063c8b81 mov       %rdx,0x30(%rsp)
063c8b86 mov       0x30(%rsp),%rdx
063c8b8b mov       0x28(%rsp),%rax
063c8b90 add       $0x58,%rsp
063c8b94 ret

core::ptr::slice_from_raw_parts<u8>:
063c8ba0 sub       $0x58,%rsp
063c8ba4 mov       %rdx,0x38(%rsp)
063c8ba9 mov       %rcx,0x48(%rsp)
063c8bae mov       %rdx,0x50(%rsp)
063c8bb3 call      0x0000`0000`063C`48C0
063c8bb8 mov       %rax,0x40(%rsp)
063c8bbd mov       0x38(%rsp),%rdx
063c8bc2 mov       0x40(%rsp),%rcx
063c8bc7 call      0x0000`0000`063B`3BE0
063c8bcc mov       %rax,0x28(%rsp)
063c8bd1 mov       %rdx,0x30(%rsp)
063c8bd6 mov       0x30(%rsp),%rdx
063c8bdb mov       0x28(%rsp),%rax
063c8be0 add       $0x58,%rsp
063c8be4 ret

core::ptr::slice_from_raw_parts<usize>:
063c8bf0 sub       $0x58,%rsp
063c8bf4 mov       %rdx,0x38(%rsp)
063c8bf9 mov       %rcx,0x48(%rsp)
063c8bfe mov       %rdx,0x50(%rsp)
063c8c03 call      0x0000`0000`063C`48E0
063c8c08 mov       %rax,0x40(%rsp)
063c8c0d mov       0x38(%rsp),%rdx
063c8c12 mov       0x40(%rsp),%rcx
063c8c17 call      0x0000`0000`063B`3B20
063c8c1c mov       %rax,0x28(%rsp)
063c8c21 mov       %rdx,0x30(%rsp)
063c8c26 mov       0x30(%rsp),%rdx
063c8c2b mov       0x28(%rsp),%rax
063c8c30 add       $0x58,%rsp
063c8c34 ret

core::ptr::slice_from_raw_parts<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c8c40 sub       $0x58,%rsp
063c8c44 mov       %rdx,0x38(%rsp)
063c8c49 mov       %rcx,0x48(%rsp)
063c8c4e mov       %rdx,0x50(%rsp)
063c8c53 call      0x0000`0000`063C`7DE0
063c8c58 mov       %rax,0x40(%rsp)
063c8c5d mov       0x38(%rsp),%rdx
063c8c62 mov       0x40(%rsp),%rcx
063c8c67 call      0x0000`0000`063B`3B60
063c8c6c mov       %rax,0x28(%rsp)
063c8c71 mov       %rdx,0x30(%rsp)
063c8c76 mov       0x30(%rsp),%rdx
063c8c7b mov       0x28(%rsp),%rax
063c8c80 add       $0x58,%rsp
063c8c84 ret

core::ptr::slice_from_raw_parts_mut<u8>:
063c8c90 sub       $0x58,%rsp
063c8c94 mov       %rdx,0x30(%rsp)
063c8c99 mov       %rcx,0x40(%rsp)
063c8c9e mov       %rdx,0x48(%rsp)
063c8ca3 mov       %rcx,0x50(%rsp)
063c8ca8 mov       %rcx,0x38(%rsp)
063c8cad mov       0x30(%rsp),%rdx
063c8cb2 mov       0x38(%rsp),%rcx
063c8cb7 call      0x0000`0000`063B`3C20
063c8cbc mov       %rax,0x20(%rsp)
063c8cc1 mov       %rdx,0x28(%rsp)
063c8cc6 mov       0x28(%rsp),%rdx
063c8ccb mov       0x20(%rsp),%rax
063c8cd0 add       $0x58,%rsp
063c8cd4 ret

core::ptr::swap_nonoverlapping<usize>:
063c8ce0 sub       $0xF8,%rsp
063c8ce7 mov       %r8,0x58(%rsp)
063c8cec mov       %rdx,0x60(%rsp)
063c8cf1 mov       %rcx,0x68(%rsp)
063c8cf6 mov       %rcx,0x78(%rsp)
063c8cfb mov       %rdx,0x80(%rsp)
063c8d03 mov       %r8,0x88(%rsp)
063c8d0b jmp       0x0000`0000`063C`8D0D
063c8d0d jmp       0x0000`0000`063C`8D19
063c8d0f movb      $0,0x74(%rsp)
063c8d14 jmp       0x0000`0000`063C`8DBB
063c8d19 jmp       0x0000`0000`063C`8D1B
063c8d1b movq      $8,0xE0(%rsp)
063c8d27 movq      $8,0xE8(%rsp)
063c8d33 movq      $1,0xF0(%rsp)
063c8d3f mov       0xF0(%rsp),%rax
063c8d47 cmp       $1,%eax
063c8d4a sete      %al
063c8d4d mov       %al,0x57(%rsp)
063c8d51 mov       0x57(%rsp),%al
063c8d55 xor       $0xFF,%al
063c8d57 test      $1,%al
063c8d59 jne       0x0000`0000`063C`8D5D
063c8d5b jmp       0x0000`0000`063C`8D6E
063c8d5d movb      $1,0x75(%rsp)
063c8d62 mov       0x75(%rsp),%al
063c8d66 and       $1,%al
063c8d68 mov       %al,0x74(%rsp)
063c8d6c jmp       0x0000`0000`063C`8DBB
063c8d6e jmp       0x0000`0000`063C`8D70
063c8d70 mov       $8,%eax
063c8d75 mov       $2,%ecx
063c8d7a mul       %rcx
063c8d7d mov       %rax,0x48(%rsp)
063c8d82 seto      %al
063c8d85 test      $1,%al
063c8d87 jne       0x0000`0000`063C`8DA1
063c8d89 mov       0x48(%rsp),%rcx
063c8d8e mov       $8,%eax
063c8d93 cmp       %rcx,%rax
063c8d96 seta      %al
063c8d99 and       $1,%al
063c8d9b mov       %al,0x75(%rsp)
063c8d9f jmp       0x0000`0000`063C`8D62
063c8da1 lea       0x63D`1E40,%rcx
063c8da8 lea       0x63D`1E20,%r8
063c8daf mov       $0x21,%edx
063c8db4 call      0x0000`0000`063B`2030
063c8db9 ud2
063c8dbb testb     $1,0x74(%rsp)
063c8dc0 jne       0x0000`0000`063C`8DDB
063c8dc2 mov       0x58(%rsp),%r8
063c8dc7 mov       0x60(%rsp),%rdx
063c8dcc mov       0x68(%rsp),%rcx
063c8dd1 call      0x0000`0000`063C`9280
063c8dd6 jmp       0x0000`0000`063C`8EE9
063c8ddb jmp       0x0000`0000`063C`8DDD
063c8ddd jmp       0x0000`0000`063C`8DDF
063c8ddf jmp       0x0000`0000`063C`8DE8
063c8de1 movb      $0,0x76(%rsp)
063c8de6 jmp       0x0000`0000`063C`8E2E
063c8de8 jmp       0x0000`0000`063C`8DEA
063c8dea jmp       0x0000`0000`063C`8DEC
063c8dec mov       $8,%eax
063c8df1 cmp       $0,%rax
063c8df5 sete      %al
063c8df8 test      $1,%al
063c8dfa jne       0x0000`0000`063C`8E14
063c8dfc mov       $8,%eax
063c8e01 and       $7,%rax
063c8e05 cmp       $0,%rax
063c8e09 sete      %al
063c8e0c and       $1,%al
063c8e0e mov       %al,0x76(%rsp)
063c8e12 jmp       0x0000`0000`063C`8E2E
063c8e14 lea       0x63D`1E80,%rcx
063c8e1b lea       0x63D`1E68,%r8
063c8e22 mov       $0x39,%edx
063c8e27 call      0x0000`0000`063B`2030
063c8e2c ud2
063c8e2e testb     $1,0x76(%rsp)
063c8e33 jne       0x0000`0000`063C`8E3A
063c8e35 jmp       0x0000`0000`063C`8EF1
063c8e3a mov       0x68(%rsp),%rax
063c8e3f mov       %rax,0xC8(%rsp)
063c8e47 mov       %rax,0x90(%rsp)
063c8e4f mov       0x60(%rsp),%rax
063c8e54 mov       %rax,0xC0(%rsp)
063c8e5c mov       %rax,0x98(%rsp)
063c8e64 jmp       0x0000`0000`063C`8E66
063c8e66 jmp       0x0000`0000`063C`8E68
063c8e68 mov       $8,%eax
063c8e6d cmp       $0,%rax
063c8e71 sete      %al
063c8e74 test      $1,%al
063c8e76 jne       0x0000`0000`063C`8E97
063c8e78 mov       0x58(%rsp),%rax
063c8e7d mov       $8,%ecx
063c8e82 shr       $3,%rcx
063c8e86 mul       %rcx
063c8e89 mov       %rax,0x40(%rsp)
063c8e8e seto      %al
063c8e91 test      $1,%al
063c8e93 jne       0x0000`0000`063C`8ECF
063c8e95 jmp       0x0000`0000`063C`8EB1
063c8e97 lea       0x63D`1EC0,%rcx
063c8e9e lea       0x63D`1E68,%r8
063c8ea5 mov       $0x19,%edx
063c8eaa call      0x0000`0000`063B`2030
063c8eaf ud2
063c8eb1 mov       0x40(%rsp),%r8
063c8eb6 mov       0x60(%rsp),%rdx
063c8ebb mov       0x68(%rsp),%rcx
063c8ec0 mov       %r8,0xA0(%rsp)
063c8ec8 call      0x0000`0000`063C`9020
063c8ecd jmp       0x0000`0000`063C`8EE9
063c8ecf lea       0x63D`1E40,%rcx
063c8ed6 lea       0x63D`1E68,%r8
063c8edd mov       $0x21,%edx
063c8ee2 call      0x0000`0000`063B`2030
063c8ee7 ud2
063c8ee9 add       $0xF8,%rsp
063c8ef0 ret
063c8ef1 jmp       0x0000`0000`063C`8EF3
063c8ef3 mov       $8,%eax
063c8ef8 cmp       $1,%rax
063c8efc jae       0x0000`0000`063C`8F05
063c8efe movb      $0,0x77(%rsp)
063c8f03 jmp       0x0000`0000`063C`8F4B
063c8f05 jmp       0x0000`0000`063C`8F07
063c8f07 jmp       0x0000`0000`063C`8F09
063c8f09 mov       $1,%eax
063c8f0e cmp       $0,%rax
063c8f12 sete      %al
063c8f15 test      $1,%al
063c8f17 jne       0x0000`0000`063C`8F31
063c8f19 mov       $8,%eax
063c8f1e and       $0,%rax
063c8f22 cmp       $0,%rax
063c8f26 sete      %al
063c8f29 and       $1,%al
063c8f2b mov       %al,0x77(%rsp)
063c8f2f jmp       0x0000`0000`063C`8F4B
063c8f31 lea       0x63D`1E80,%rcx
063c8f38 lea       0x63D`1EE0,%r8
063c8f3f mov       $0x39,%edx
063c8f44 call      0x0000`0000`063B`2030
063c8f49 ud2
063c8f4b testb     $1,0x77(%rsp)
063c8f50 je        0x0000`0000`063C`8DC2
063c8f56 mov       0x68(%rsp),%rax
063c8f5b mov       %rax,0xD8(%rsp)
063c8f63 mov       %rax,0x38(%rsp)
063c8f68 mov       %rax,0xA8(%rsp)
063c8f70 mov       0x60(%rsp),%rax
063c8f75 mov       %rax,0xD0(%rsp)
063c8f7d mov       %rax,0x30(%rsp)
063c8f82 mov       %rax,0xB0(%rsp)
063c8f8a jmp       0x0000`0000`063C`8F8C
063c8f8c jmp       0x0000`0000`063C`8F8E
063c8f8e mov       $1,%eax
063c8f93 cmp       $0,%rax
063c8f97 sete      %al
063c8f9a test      $1,%al
063c8f9c jne       0x0000`0000`063C`8FBD
063c8f9e mov       0x58(%rsp),%rax
063c8fa3 mov       $8,%ecx
063c8fa8 shr       $0,%rcx
063c8fac mul       %rcx
063c8faf mov       %rax,0x28(%rsp)
063c8fb4 seto      %al
063c8fb7 test      $1,%al
063c8fb9 jne       0x0000`0000`063C`8FF8
063c8fbb jmp       0x0000`0000`063C`8FD7
063c8fbd lea       0x63D`1EC0,%rcx
063c8fc4 lea       0x63D`1EE0,%r8
063c8fcb mov       $0x19,%edx
063c8fd0 call      0x0000`0000`063B`2030
063c8fd5 ud2
063c8fd7 mov       0x28(%rsp),%r8
063c8fdc mov       0x30(%rsp),%rdx
063c8fe1 mov       0x38(%rsp),%rcx
063c8fe6 mov       %r8,0xB8(%rsp)
063c8fee call      0x0000`0000`063C`9150
063c8ff3 jmp       0x0000`0000`063C`8EE9
063c8ff8 lea       0x63D`1E40,%rcx
063c8fff lea       0x63D`1EE0,%r8
063c9006 mov       $0x21,%edx
063c900b call      0x0000`0000`063B`2030
063c9010 ud2

core::ptr::swap_nonoverlapping_simple<core::mem::maybe_uninit::MaybeUninit<usize> >:
063c9020 sub       $0xD8,%rsp
063c9027 mov       %r8,0x40(%rsp)
063c902c mov       %rdx,0x48(%rsp)
063c9031 mov       %rcx,0x50(%rsp)
063c9036 mov       %rcx,0x60(%rsp)
063c903b mov       %rdx,0x68(%rsp)
063c9040 mov       %r8,0x70(%rsp)
063c9045 movq      $0,0x58(%rsp)
063c904e mov       0x40(%rsp),%rax
063c9053 cmp       %rax,0x58(%rsp)
063c9058 jb        0x0000`0000`063C`9062
063c905a add       $0xD8,%rsp
063c9061 ret
063c9062 mov       0x50(%rsp),%rax
063c9067 mov       0x58(%rsp),%rcx
063c906c mov       %rax,0xB0(%rsp)
063c9074 mov       %rcx,0xB8(%rsp)
063c907c mov       %rax,0xC0(%rsp)
063c9084 mov       %rcx,0xC8(%rsp)
063c908c shl       $3,%rcx
063c9090 add       %rcx,%rax
063c9093 mov       %rax,0xD0(%rsp)
063c909b mov       0xD0(%rsp),%rax
063c90a3 mov       %rax,0x38(%rsp)
063c90a8 mov       0x48(%rsp),%rax
063c90ad mov       0x38(%rsp),%rcx
063c90b2 mov       %rcx,0x78(%rsp)
063c90b7 mov       0x58(%rsp),%rcx
063c90bc mov       %rax,0x88(%rsp)
063c90c4 mov       %rcx,0x90(%rsp)
063c90cc mov       %rax,0x98(%rsp)
063c90d4 mov       %rcx,0xA0(%rsp)
063c90dc shl       $3,%rcx
063c90e0 add       %rcx,%rax
063c90e3 mov       %rax,0xA8(%rsp)
063c90eb mov       0xA8(%rsp),%rax
063c90f3 mov       %rax,0x30(%rsp)
063c90f8 mov       0x30(%rsp),%rdx
063c90fd mov       0x38(%rsp),%rcx
063c9102 mov       %rdx,0x80(%rsp)
063c910a call      0x0000`0000`063B`9400
063c910f mov       0x58(%rsp),%rax
063c9114 add       $1,%rax
063c9118 mov       %rax,0x28(%rsp)
063c911d setb      %al
063c9120 test      $1,%al
063c9122 jne       0x0000`0000`063C`9133
063c9124 mov       0x28(%rsp),%rax
063c9129 mov       %rax,0x58(%rsp)
063c912e jmp       0x0000`0000`063C`904E
063c9133 lea       0x63D`1F10,%rcx
063c913a lea       0x63D`1EF8,%r8
063c9141 mov       $0x1C,%edx
063c9146 call      0x0000`0000`063B`2030
063c914b ud2

core::ptr::swap_nonoverlapping_simple<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c9150 sub       $0xD8,%rsp
063c9157 mov       %r8,0x40(%rsp)
063c915c mov       %rdx,0x48(%rsp)
063c9161 mov       %rcx,0x50(%rsp)
063c9166 mov       %rcx,0x60(%rsp)
063c916b mov       %rdx,0x68(%rsp)
063c9170 mov       %r8,0x70(%rsp)
063c9175 movq      $0,0x58(%rsp)
063c917e mov       0x40(%rsp),%rax
063c9183 cmp       %rax,0x58(%rsp)
063c9188 jb        0x0000`0000`063C`9192
063c918a add       $0xD8,%rsp
063c9191 ret
063c9192 mov       0x50(%rsp),%rax
063c9197 mov       0x58(%rsp),%rcx
063c919c mov       %rax,0xB0(%rsp)
063c91a4 mov       %rcx,0xB8(%rsp)
063c91ac mov       %rax,0xC0(%rsp)
063c91b4 mov       %rcx,0xC8(%rsp)
063c91bc add       %rcx,%rax
063c91bf mov       %rax,0xD0(%rsp)
063c91c7 mov       0xD0(%rsp),%rax
063c91cf mov       %rax,0x38(%rsp)
063c91d4 mov       0x48(%rsp),%rax
063c91d9 mov       0x38(%rsp),%rcx
063c91de mov       %rcx,0x78(%rsp)
063c91e3 mov       0x58(%rsp),%rcx
063c91e8 mov       %rax,0x88(%rsp)
063c91f0 mov       %rcx,0x90(%rsp)
063c91f8 mov       %rax,0x98(%rsp)
063c9200 mov       %rcx,0xA0(%rsp)
063c9208 add       %rcx,%rax
063c920b mov       %rax,0xA8(%rsp)
063c9213 mov       0xA8(%rsp),%rax
063c921b mov       %rax,0x30(%rsp)
063c9220 mov       0x30(%rsp),%rdx
063c9225 mov       0x38(%rsp),%rcx
063c922a mov       %rdx,0x80(%rsp)
063c9232 call      0x0000`0000`063B`93A0
063c9237 mov       0x58(%rsp),%rax
063c923c add       $1,%rax
063c9240 mov       %rax,0x28(%rsp)
063c9245 setb      %al
063c9248 test      $1,%al
063c924a jne       0x0000`0000`063C`925B
063c924c mov       0x28(%rsp),%rax
063c9251 mov       %rax,0x58(%rsp)
063c9256 jmp       0x0000`0000`063C`917E
063c925b lea       0x63D`1F10,%rcx
063c9262 lea       0x63D`1EF8,%r8
063c9269 mov       $0x1C,%edx
063c926e call      0x0000`0000`063B`2030
063c9273 ud2

core::ptr::swap_nonoverlapping_simple<usize>:
063c9280 sub       $0xD8,%rsp
063c9287 mov       %r8,0x40(%rsp)
063c928c mov       %rdx,0x48(%rsp)
063c9291 mov       %rcx,0x50(%rsp)
063c9296 mov       %rcx,0x60(%rsp)
063c929b mov       %rdx,0x68(%rsp)
063c92a0 mov       %r8,0x70(%rsp)
063c92a5 movq      $0,0x58(%rsp)
063c92ae mov       0x40(%rsp),%rax
063c92b3 cmp       %rax,0x58(%rsp)
063c92b8 jb        0x0000`0000`063C`92C2
063c92ba add       $0xD8,%rsp
063c92c1 ret
063c92c2 mov       0x50(%rsp),%rax
063c92c7 mov       0x58(%rsp),%rcx
063c92cc mov       %rax,0xB0(%rsp)
063c92d4 mov       %rcx,0xB8(%rsp)
063c92dc mov       %rax,0xC0(%rsp)
063c92e4 mov       %rcx,0xC8(%rsp)
063c92ec shl       $3,%rcx
063c92f0 add       %rcx,%rax
063c92f3 mov       %rax,0xD0(%rsp)
063c92fb mov       0xD0(%rsp),%rax
063c9303 mov       %rax,0x38(%rsp)
063c9308 mov       0x48(%rsp),%rax
063c930d mov       0x38(%rsp),%rcx
063c9312 mov       %rcx,0x78(%rsp)
063c9317 mov       0x58(%rsp),%rcx
063c931c mov       %rax,0x88(%rsp)
063c9324 mov       %rcx,0x90(%rsp)
063c932c mov       %rax,0x98(%rsp)
063c9334 mov       %rcx,0xA0(%rsp)
063c933c shl       $3,%rcx
063c9340 add       %rcx,%rax
063c9343 mov       %rax,0xA8(%rsp)
063c934b mov       0xA8(%rsp),%rax
063c9353 mov       %rax,0x30(%rsp)
063c9358 mov       0x30(%rsp),%rdx
063c935d mov       0x38(%rsp),%rcx
063c9362 mov       %rdx,0x80(%rsp)
063c936a call      0x0000`0000`063B`9460
063c936f mov       0x58(%rsp),%rax
063c9374 add       $1,%rax
063c9378 mov       %rax,0x28(%rsp)
063c937d setb      %al
063c9380 test      $1,%al
063c9382 jne       0x0000`0000`063C`9393
063c9384 mov       0x28(%rsp),%rax
063c9389 mov       %rax,0x58(%rsp)
063c938e jmp       0x0000`0000`063C`92AE
063c9393 lea       0x63D`1F10,%rcx
063c939a lea       0x63D`1EF8,%r8
063c93a1 mov       $0x1C,%edx
063c93a6 call      0x0000`0000`063B`2030
063c93ab ud2

core::ptr::read<core::mem::maybe_uninit::MaybeUninit<usize> >:
063c93b0 sub       $0x40,%rsp
063c93b4 mov       %rcx,8(%rsp)
063c93b9 mov       %rcx,0x18(%rsp)
063c93be mov       0x20(%rsp),%rax
063c93c3 mov       %rax,0x10(%rsp)
063c93c8 lea       0x10(%rsp),%rax
063c93cd mov       %rax,0x28(%rsp)
063c93d2 mov       8(%rsp),%rax
063c93d7 mov       (%rax),%rax
063c93da mov       %rax,0x10(%rsp)
063c93df mov       0x10(%rsp),%rax
063c93e4 mov       %rax,(%rsp)
063c93e8 mov       %rax,0x30(%rsp)
063c93ed mov       %rax,0x38(%rsp)
063c93f2 mov       (%rsp),%rax
063c93f6 add       $0x40,%rsp
063c93fa ret

core::ptr::read<char>:
063c9400 sub       $0x38,%rsp
063c9404 mov       %rcx,8(%rsp)
063c9409 mov       %rcx,0x18(%rsp)
063c940e mov       0x24(%rsp),%eax
063c9412 mov       %eax,0x14(%rsp)
063c9416 lea       0x14(%rsp),%rax
063c941b mov       %rax,0x28(%rsp)
063c9420 mov       8(%rsp),%rax
063c9425 mov       (%rax),%eax
063c9427 mov       %eax,0x14(%rsp)
063c942b mov       0x14(%rsp),%eax
063c942f mov       %eax,4(%rsp)
063c9433 mov       %eax,0x30(%rsp)
063c9437 mov       %eax,0x34(%rsp)
063c943b mov       4(%rsp),%eax
063c943f add       $0x38,%rsp
063c9443 ret

core::ptr::read<enum$<core::fmt::rt::v1::Alignment> >:
063c9450 sub       $0x38,%rsp
063c9454 mov       %rcx,8(%rsp)
063c9459 mov       %rcx,0x18(%rsp)
063c945e mov       0x27(%rsp),%al
063c9462 mov       %al,0x17(%rsp)
063c9466 lea       0x17(%rsp),%rax
063c946b mov       %rax,0x28(%rsp)
063c9470 mov       8(%rsp),%rax
063c9475 mov       (%rax),%al
063c9477 mov       %al,0x17(%rsp)
063c947b mov       0x17(%rsp),%al
063c947f mov       %al,7(%rsp)
063c9483 mov       %al,0x36(%rsp)
063c9487 mov       %al,0x37(%rsp)
063c948b mov       7(%rsp),%al
063c948f add       $0x38,%rsp
063c9493 ret

core::ptr::read<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c94a0 sub       $0x38,%rsp
063c94a4 mov       %rcx,8(%rsp)
063c94a9 mov       %rcx,0x18(%rsp)
063c94ae mov       0x27(%rsp),%al
063c94b2 mov       %al,0x17(%rsp)
063c94b6 lea       0x17(%rsp),%rax
063c94bb mov       %rax,0x28(%rsp)
063c94c0 mov       8(%rsp),%rax
063c94c5 mov       (%rax),%al
063c94c7 mov       %al,0x17(%rsp)
063c94cb mov       0x17(%rsp),%al
063c94cf mov       %al,7(%rsp)
063c94d3 mov       %al,0x36(%rsp)
063c94d7 mov       %al,0x37(%rsp)
063c94db mov       7(%rsp),%al
063c94df add       $0x38,%rsp
063c94e3 ret

core::ptr::read<usize>:
063c94f0 sub       $0x40,%rsp
063c94f4 mov       %rcx,8(%rsp)
063c94f9 mov       %rcx,0x18(%rsp)
063c94fe mov       0x20(%rsp),%rax
063c9503 mov       %rax,0x10(%rsp)
063c9508 lea       0x10(%rsp),%rax
063c950d mov       %rax,0x28(%rsp)
063c9512 mov       8(%rsp),%rax
063c9517 mov       (%rax),%rax
063c951a mov       %rax,0x10(%rsp)
063c951f mov       0x10(%rsp),%rax
063c9524 mov       %rax,(%rsp)
063c9528 mov       %rax,0x30(%rsp)
063c952d mov       %rax,0x38(%rsp)
063c9532 mov       (%rsp),%rax
063c9536 add       $0x40,%rsp
063c953a ret

core::ptr::write<char>:
063c9540 sub       $0x10,%rsp
063c9544 mov       %edx,4(%rsp)
063c9548 mov       %rcx,8(%rsp)
063c954d mov       4(%rsp),%eax
063c9551 mov       %eax,(%rcx)
063c9553 add       $0x10,%rsp
063c9557 ret

core::ptr::write<core::mem::maybe_uninit::MaybeUninit<usize> >:
063c9560 sub       $0x10,%rsp
063c9564 mov       %rdx,(%rsp)
063c9568 mov       %rcx,8(%rsp)
063c956d mov       (%rsp),%rax
063c9571 mov       %rax,(%rcx)
063c9574 add       $0x10,%rsp
063c9578 ret

core::ptr::write<core::mem::maybe_uninit::MaybeUninit<u8> >:
063c9580 sub       $0x10,%rsp
063c9584 mov       %dl,7(%rsp)
063c9588 mov       %rcx,8(%rsp)
063c958d mov       7(%rsp),%al
063c9591 mov       %al,(%rcx)
063c9593 add       $0x10,%rsp
063c9597 ret

core::ptr::write<usize>:
063c95a0 sub       $0x10,%rsp
063c95a4 mov       %rdx,(%rsp)
063c95a8 mov       %rcx,8(%rsp)
063c95ad mov       (%rsp),%rax
063c95b1 mov       %rax,(%rcx)
063c95b4 add       $0x10,%rsp
063c95b8 ret

core::ptr::write<enum$<core::fmt::rt::v1::Alignment> >:
063c95c0 sub       $0x10,%rsp
063c95c4 mov       %dl,7(%rsp)
063c95c8 mov       %rcx,8(%rsp)
063c95cd mov       7(%rsp),%al
063c95d1 mov       %al,(%rcx)
063c95d3 add       $0x10,%rsp
063c95d7 ret

core::ptr::read_volatile<usize>:
063c95e0 sub       $0x48,%rsp
063c95e4 mov       %rcx,0x28(%rsp)
063c95e9 mov       %rcx,0x38(%rsp)
063c95ee call      0x0000`0000`063C`2370
063c95f3 mov       %al,0x37(%rsp)
063c95f7 mov       0x37(%rsp),%al
063c95fb xor       $0xFF,%al
063c95fd test      $1,%al
063c95ff jne       0x0000`0000`063C`961A
063c9601 mov       0x28(%rsp),%rax
063c9606 mov       (%rax),%rax
063c9609 mov       %rax,0x40(%rsp)
063c960e mov       0x40(%rsp),%rax
063c9613 mov       %rax,0x20(%rsp)
063c9618 jmp       0x0000`0000`063C`961E
063c961a ud2
063c961c ud2
063c961e mov       0x20(%rsp),%rax
063c9623 add       $0x48,%rsp
063c9627 ret

core::ptr::align_offset<u8>:
063c9630 sub       $0x158,%rsp
063c9637 mov       %rdx,0x90(%rsp)
063c963f mov       %rcx,0x98(%rsp)
063c9647 mov       %rcx,0xA8(%rsp)
063c964f mov       %rdx,0xB0(%rsp)
063c9657 movq      $1,0xB8(%rsp)
063c9663 mov       0x90(%rsp),%rax
063c966b sub       $1,%rax
063c966f mov       %rax,0xC0(%rsp)
063c9677 mov       0xC0(%rsp),%rax
063c967f mov       %rax,0x88(%rsp)
063c9687 mov       %rax,0xC8(%rsp)
063c968f mov       0x98(%rsp),%rcx
063c9697 mov       0x90(%rsp),%r8
063c969f mov       0x88(%rsp),%rdx
063c96a7 mov       %rcx,%rax
063c96aa add       %rdx,%rax
063c96ad xor       %edx,%edx
063c96af sub       %r8,%rdx
063c96b2 and       %rdx,%rax
063c96b5 sub       %rcx,%rax
063c96b8 mov       %rax,0xA0(%rsp)
063c96c0 jmp       0x0000`0000`063C`9821
063c96c5 mov       0x88(%rsp),%rcx
063c96cd mov       0x98(%rsp),%rax
063c96d5 and       %rcx,%rax
063c96d8 mov       %rax,0x80(%rsp)
063c96e0 mov       %rax,0xD0(%rsp)
063c96e8 cmp       $0,%rax
063c96ec jne       0x0000`0000`063C`96FF
063c96ee movq      $0,0xA0(%rsp)
063c96fa jmp       0x0000`0000`063C`9821
063c96ff mov       $1,%eax
063c9704 cmp       $0,%rax
063c9708 jne       0x0000`0000`063C`971B
063c970a movq      $0xFFFF`FFFF`FFFF`FFFF,0xA0(%rsp)
063c9716 jmp       0x0000`0000`063C`9821
063c971b mov       0x88(%rsp),%rax
063c9723 and       $1,%rax
063c9727 mov       %rax,0x70(%rsp)
063c972c mov       %rax,0xD8(%rsp)
063c9734 xor       %eax,%eax
063c9736 mov       %rax,0xE0(%rsp)
063c973e mov       0xE0(%rsp),%rax
063c9746 mov       %rax,0x78(%rsp)
063c974b mov       0x90(%rsp),%rax
063c9753 bsf       %rax,%rax
063c9757 mov       %rax,0xE8(%rsp)
063c975f mov       0xE8(%rsp),%rax
063c9767 mov       %rax,0x68(%rsp)
063c976c mov       0x68(%rsp),%rdx
063c9771 mov       0x78(%rsp),%rcx
063c9776 call      0x0000`0000`063B`10C0
063c977b mov       %rax,0x60(%rsp)
063c9780 mov       %rax,0xF0(%rsp)
063c9788 mov       0x60(%rsp),%rcx
063c978d mov       $1,%eax
063c9792 shl       %cl,%rax
063c9795 mov       %rax,0xF8(%rsp)
063c979d mov       0xF8(%rsp),%rax
063c97a5 mov       %rax,0x58(%rsp)
063c97aa mov       %rax,0x100(%rsp)
063c97b2 mov       0x58(%rsp),%rax
063c97b7 sub       $1,%rax
063c97bb mov       %rax,0x108(%rsp)
063c97c3 mov       0x108(%rsp),%rax
063c97cb mov       %rax,0x50(%rsp)
063c97d0 mov       0x50(%rsp),%rcx
063c97d5 mov       0x98(%rsp),%rax
063c97dd and       %rcx,%rax
063c97e0 cmp       $0,%rax
063c97e4 jne       0x0000`0000`063C`9815
063c97e6 mov       0x90(%rsp),%rax
063c97ee mov       0x60(%rsp),%rcx
063c97f3 shr       %cl,%rax
063c97f6 mov       %rax,0x110(%rsp)
063c97fe mov       0x110(%rsp),%rax
063c9806 mov       %rax,0x48(%rsp)
063c980b mov       %rax,0x118(%rsp)
063c9813 jmp       0x0000`0000`063C`9831
063c9815 movq      $0xFFFF`FFFF`FFFF`FFFF,0xA0(%rsp)
063c9821 mov       0xA0(%rsp),%rax
063c9829 add       $0x158,%rsp
063c9830 ret
063c9831 mov       0x48(%rsp),%rax
063c9836 sub       $1,%rax
063c983a mov       %rax,0x120(%rsp)
063c9842 mov       0x120(%rsp),%rax
063c984a mov       %rax,0x40(%rsp)
063c984f mov       %rax,0x128(%rsp)
063c9857 mov       0x70(%rsp),%rax
063c985c mov       0x60(%rsp),%rcx
063c9861 shr       %cl,%rax
063c9864 mov       %rax,0x130(%rsp)
063c986c mov       0x130(%rsp),%rax
063c9874 mov       %rax,0x38(%rsp)
063c9879 mov       %rax,0x138(%rsp)
063c9881 mov       0x80(%rsp),%rax
063c9889 mov       0x60(%rsp),%rcx
063c988e shr       %cl,%rax
063c9891 mov       %rax,0x140(%rsp)
063c9899 mov       0x140(%rsp),%rax
063c98a1 mov       %rax,0x30(%rsp)
063c98a6 mov       0x30(%rsp),%rcx
063c98ab mov       0x48(%rsp),%rax
063c98b0 sub       %rcx,%rax
063c98b3 mov       %rax,0x148(%rsp)
063c98bb mov       0x148(%rsp),%rax
063c98c3 mov       %rax,0x28(%rsp)
063c98c8 mov       %rax,0x150(%rsp)
063c98d0 mov       0x48(%rsp),%rdx
063c98d5 mov       0x38(%rsp),%rcx
063c98da call      0x0000`0000`063C`9910
063c98df mov       %rax,0x20(%rsp)
063c98e4 mov       0x40(%rsp),%rcx
063c98e9 mov       0x20(%rsp),%rdx
063c98ee mov       0x28(%rsp),%rax
063c98f3 imul      %rdx,%rax
063c98f7 and       %rcx,%rax
063c98fa mov       %rax,0xA0(%rsp)
063c9902 jmp       0x0000`0000`063C`9821

core::ptr::align_offset::mod_inv:
063c9910 sub       $0x98,%rsp
063c9917 mov       %rdx,0x38(%rsp)
063c991c mov       %rcx,%rax
063c991f mov       %rax,0x40(%rsp)
063c9924 mov       %rax,0x70(%rsp)
063c9929 mov       %rdx,0x78(%rsp)
063c992e mov       0x63D`1F2C,%rcx
063c9935 mov       %rcx,0x58(%rsp)
063c993a and       $0xF,%rax
063c993e shr       $1,%rax
063c9942 mov       %rax,0x48(%rsp)
063c9947 mov       0x48(%rsp),%rax
063c994c cmp       $8,%rax
063c9950 setb      %al
063c9953 test      $1,%al
063c9955 jne       0x0000`0000`063C`9959
063c9957 jmp       0x0000`0000`063C`9998
063c9959 mov       0x38(%rsp),%rax
063c995e mov       0x48(%rsp),%rcx
063c9963 movzbl    0x58(%rsp,%rcx),%ecx
063c9968 mov       %rcx,0x28(%rsp)
063c996d mov       %rcx,0x80(%rsp)
063c9975 sub       $1,%rax
063c9979 mov       %rax,0x88(%rsp)
063c9981 mov       0x88(%rsp),%rax
063c9989 mov       %rax,0x30(%rsp)
063c998e mov       %rax,0x90(%rsp)
063c9996 jmp       0x0000`0000`063C`99B0
063c9998 mov       0x48(%rsp),%rcx
063c999d lea       0x63D`1F38,%r8
063c99a4 mov       $8,%edx
063c99a9 call      0x0000`0000`063B`2090
063c99ae ud2
063c99b0 mov       0x38(%rsp),%rax
063c99b5 cmp       $0x10,%rax
063c99b9 jbe       0x0000`0000`063C`99D0
063c99bb mov       0x28(%rsp),%rax
063c99c0 mov       %rax,0x60(%rsp)
063c99c5 movq      $0x100,0x68(%rsp)
063c99ce jmp       0x0000`0000`063C`99EF
063c99d0 mov       0x30(%rsp),%rcx
063c99d5 mov       0x28(%rsp),%rax
063c99da and       %rcx,%rax
063c99dd mov       %rax,0x50(%rsp)
063c99e2 mov       0x50(%rsp),%rax
063c99e7 add       $0x98,%rsp
063c99ee ret
063c99ef mov       0x38(%rsp),%rax
063c99f4 mov       0x40(%rsp),%r8
063c99f9 mov       0x60(%rsp),%rcx
063c99fe imul      0x60(%rsp),%r8
063c9a04 mov       $2,%edx
063c9a09 sub       %r8,%rdx
063c9a0c imul      %rdx,%rcx
063c9a10 mov       %rcx,0x60(%rsp)
063c9a15 cmp       %rax,0x68(%rsp)
063c9a1a jae       0x0000`0000`063C`9A2E
063c9a1c mov       0x68(%rsp),%rax
063c9a21 imul      0x68(%rsp),%rax
063c9a27 mov       %rax,0x68(%rsp)
063c9a2c jmp       0x0000`0000`063C`99EF
063c9a2e mov       0x30(%rsp),%rax
063c9a33 and       0x60(%rsp),%rax
063c9a38 mov       %rax,0x50(%rsp)
063c9a3d jmp       0x0000`0000`063C`99E2

core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<core::fmt::rt::v1::Argument> >::new<core::slice::iter::Iter<core::fmt::rt::v1::Argument> >:
063c9a40 sub       $0x10,%rsp
063c9a44 mov       %rcx,%rax
063c9a47 mov       %rdx,(%rsp)
063c9a4b mov       %r8,8(%rsp)
063c9a50 mov       %rdx,(%rcx)
063c9a53 mov       %r8,8(%rcx)
063c9a57 movq      $0,0x10(%rcx)
063c9a5f add       $0x10,%rsp
063c9a63 ret

core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<core::fmt::ArgumentV1> >::new<core::slice::iter::Iter<core::fmt::ArgumentV1> >:
063c9a70 sub       $0x10,%rsp
063c9a74 mov       %rcx,%rax
063c9a77 mov       %rdx,(%rsp)
063c9a7b mov       %r8,8(%rsp)
063c9a80 mov       %rdx,(%rcx)
063c9a83 mov       %r8,8(%rcx)
063c9a87 movq      $0,0x10(%rcx)
063c9a8f add       $0x10,%rsp
063c9a93 ret

core::iter::adapters::enumerate::impl$1::next<core::slice::iter::Iter<core::fmt::ArgumentV1> >:
063c9aa0 sub       $0x98,%rsp
063c9aa7 mov       %rcx,0x38(%rsp)
063c9aac mov       %rcx,0x70(%rsp)
063c9ab1 call      0x0000`0000`063C`6CD0
063c9ab6 mov       %rax,0x40(%rsp)
063c9abb mov       0x40(%rsp),%rcx
063c9ac0 call      0x0000`0000`063B`1E40
063c9ac5 mov       %rax,0x58(%rsp)
063c9aca mov       0x58(%rsp),%rax
063c9acf test      %rax,%rax
063c9ad2 sete      %al
063c9ad5 movzbl    %al,%eax
063c9ad8 jne       0x0000`0000`063C`9AE0
063c9ada jmp       0x0000`0000`063C`9ADC
063c9adc jmp       0x0000`0000`063C`9B26
063c9ade ud2
063c9ae0 mov       0x38(%rsp),%rax
063c9ae5 mov       0x58(%rsp),%rcx
063c9aea mov       %rcx,0x20(%rsp)
063c9aef mov       %rcx,0x80(%rsp)
063c9af7 mov       %rcx,0x88(%rsp)
063c9aff mov       0x10(%rax),%rcx
063c9b03 mov       %rcx,0x28(%rsp)
063c9b08 mov       %rcx,0x90(%rsp)
063c9b10 mov       0x10(%rax),%rax
063c9b14 add       $1,%rax
063c9b18 mov       %rax,0x30(%rsp)
063c9b1d setb      %al
063c9b20 test      $1,%al
063c9b22 jne       0x0000`0000`063C`9B7F
063c9b24 jmp       0x0000`0000`063C`9B47
063c9b26 call      0x0000`0000`063B`1FD0
063c9b2b mov       %rdx,0x50(%rsp)
063c9b30 mov       %rax,0x48(%rsp)
063c9b35 mov       0x48(%rsp),%rax
063c9b3a mov       0x50(%rsp),%rdx
063c9b3f add       $0x98,%rsp
063c9b46 ret
063c9b47 mov       0x20(%rsp),%rax
063c9b4c mov       0x28(%rsp),%rcx
063c9b51 mov       0x38(%rsp),%rdx
063c9b56 mov       0x30(%rsp),%r8
063c9b5b mov       %r8,0x10(%rdx)
063c9b5f mov       %rcx,0x60(%rsp)
063c9b64 mov       %rax,0x68(%rsp)
063c9b69 mov       0x60(%rsp),%rcx
063c9b6e mov       0x68(%rsp),%rax
063c9b73 mov       %rcx,0x48(%rsp)
063c9b78 mov       %rax,0x50(%rsp)
063c9b7d jmp       0x0000`0000`063C`9B35
063c9b7f lea       0x63D`1F10,%rcx
063c9b86 lea       0x63D`1FD8,%r8
063c9b8d mov       $0x1C,%edx
063c9b92 call      0x0000`0000`063B`2030
063c9b97 ud2

core::iter::adapters::enumerate::impl$1::next<core::slice::iter::Iter<core::fmt::rt::v1::Argument> >:
063c9ba0 sub       $0x98,%rsp
063c9ba7 mov       %rcx,0x38(%rsp)
063c9bac mov       %rcx,0x70(%rsp)
063c9bb1 call      0x0000`0000`063C`7270
063c9bb6 mov       %rax,0x40(%rsp)
063c9bbb mov       0x40(%rsp),%rcx
063c9bc0 call      0x0000`0000`063B`1F60
063c9bc5 mov       %rax,0x58(%rsp)
063c9bca mov       0x58(%rsp),%rax
063c9bcf test      %rax,%rax
063c9bd2 sete      %al
063c9bd5 movzbl    %al,%eax
063c9bd8 jne       0x0000`0000`063C`9BE0
063c9bda jmp       0x0000`0000`063C`9BDC
063c9bdc jmp       0x0000`0000`063C`9C26
063c9bde ud2
063c9be0 mov       0x38(%rsp),%rax
063c9be5 mov       0x58(%rsp),%rcx
063c9bea mov       %rcx,0x20(%rsp)
063c9bef mov       %rcx,0x80(%rsp)
063c9bf7 mov       %rcx,0x88(%rsp)
063c9bff mov       0x10(%rax),%rcx
063c9c03 mov       %rcx,0x28(%rsp)
063c9c08 mov       %rcx,0x90(%rsp)
063c9c10 mov       0x10(%rax),%rax
063c9c14 add       $1,%rax
063c9c18 mov       %rax,0x30(%rsp)
063c9c1d setb      %al
063c9c20 test      $1,%al
063c9c22 jne       0x0000`0000`063C`9C7F
063c9c24 jmp       0x0000`0000`063C`9C47
063c9c26 call      0x0000`0000`063B`1FB0
063c9c2b mov       %rdx,0x50(%rsp)
063c9c30 mov       %rax,0x48(%rsp)
063c9c35 mov       0x48(%rsp),%rax
063c9c3a mov       0x50(%rsp),%rdx
063c9c3f add       $0x98,%rsp
063c9c46 ret
063c9c47 mov       0x20(%rsp),%rax
063c9c4c mov       0x28(%rsp),%rcx
063c9c51 mov       0x38(%rsp),%rdx
063c9c56 mov       0x30(%rsp),%r8
063c9c5b mov       %r8,0x10(%rdx)
063c9c5f mov       %rcx,0x60(%rsp)
063c9c64 mov       %rax,0x68(%rsp)
063c9c69 mov       0x60(%rsp),%rcx
063c9c6e mov       0x68(%rsp),%rax
063c9c73 mov       %rcx,0x48(%rsp)
063c9c78 mov       %rax,0x50(%rsp)
063c9c7d jmp       0x0000`0000`063C`9C35
063c9c7f lea       0x63D`1F10,%rcx
063c9c86 lea       0x63D`1FD8,%r8
063c9c8d mov       $0x1C,%edx
063c9c92 call      0x0000`0000`063B`2030
063c9c97 ud2

core::iter::traits::collect::impl$0::into_iter<core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<core::fmt::ArgumentV1> > >:
063c9ca0 mov       %rcx,%rax
063c9ca3 mov       (%rdx),%r8
063c9ca6 mov       %r8,(%rcx)
063c9ca9 mov       8(%rdx),%r8
063c9cad mov       %r8,8(%rcx)
063c9cb1 mov       0x10(%rdx),%rdx
063c9cb5 mov       %rdx,0x10(%rcx)
063c9cb9 ret

core::iter::traits::collect::impl$0::into_iter<core::iter::adapters::enumerate::Enumerate<core::slice::iter::Iter<core::fmt::rt::v1::Argument> > >:
063c9cc0 mov       %rcx,%rax
063c9cc3 mov       (%rdx),%r8
063c9cc6 mov       %r8,(%rcx)
063c9cc9 mov       8(%rdx),%r8
063c9ccd mov       %r8,8(%rcx)
063c9cd1 mov       0x10(%rdx),%rdx
063c9cd5 mov       %rdx,0x10(%rcx)
063c9cd9 ret

core::hint::unreachable_unchecked:
063c9ce0 ud2

compiler_builtins::mem::memcpy:
063c9cf0 push      %rsi
063c9cf1 push      %rdi
063c9cf2 sub       $0x48,%rsp
063c9cf6 mov       %r8,%rax
063c9cf9 mov       %rdx,%rsi
063c9cfc mov       %rcx,%rdi
063c9cff mov       %rdi,(%rsp)
063c9d03 mov       %rdi,8(%rsp)
063c9d08 mov       %rsi,0x10(%rsp)
063c9d0d mov       %rax,0x18(%rsp)
063c9d12 mov       %rdi,0x20(%rsp)
063c9d17 mov       %rsi,0x28(%rsp)
063c9d1c mov       %rax,0x30(%rsp)
063c9d21 mov       %rax,%rcx
063c9d24 shr       $3,%rcx
063c9d28 mov       %rcx,0x38(%rsp)
063c9d2d and       $7,%rax
063c9d31 mov       %rax,0x40(%rsp)
063c9d36 rep movsq (%rsi),(%rdi)
063c9d39 mov       %eax,%ecx
063c9d3b rep movsb (%rsi),(%rdi)
063c9d3d mov       (%rsp),%rax
063c9d41 add       $0x48,%rsp
063c9d45 pop       %rdi
063c9d46 pop       %rsi
063c9d47 ret

compiler_builtins::mem::memset:
063c9d50 push      %rdi
063c9d51 sub       $0x80,%rsp
063c9d58 mov       %rcx,0x20(%rsp)
063c9d5d mov       %rcx,0x40(%rsp)
063c9d62 mov       %edx,0x4C(%rsp)
063c9d66 mov       %r8,0x50(%rsp)
063c9d6b mov       %dl,%al
063c9d6d mov       %rcx,0x58(%rsp)
063c9d72 mov       %al,0x67(%rsp)
063c9d76 mov       %r8,0x68(%rsp)
063c9d7b mov       %r8,%rcx
063c9d7e shr       $3,%rcx
063c9d82 mov       %rcx,0x28(%rsp)
063c9d87 mov       %rcx,0x70(%rsp)
063c9d8c and       $7,%r8
063c9d90 mov       %r8,0x30(%rsp)
063c9d95 mov       %r8,0x78(%rsp)
063c9d9a movzbl    %al,%eax
063c9d9d movabs    $0x101`0101`0101`0101,%rcx
063c9da7 mul       %rcx
063c9daa mov       %rax,0x38(%rsp)
063c9daf seto      %al
063c9db2 test      $1,%al
063c9db4 jne       0x0000`0000`063C`9DB8
063c9db6 jmp       0x0000`0000`063C`9DD2
063c9db8 lea       0x63D`20C0,%rcx
063c9dbf lea       0x63D`20A8,%r8
063c9dc6 mov       $0x21,%edx
063c9dcb call      0x0000`0000`063B`2030
063c9dd0 ud2
063c9dd2 mov       0x38(%rsp),%rax
063c9dd7 mov       0x20(%rsp),%rdi
063c9ddc mov       0x28(%rsp),%rcx
063c9de1 mov       0x30(%rsp),%rdx
063c9de6 rep stos  %rax,(%rdi)
063c9de9 mov       %edx,%ecx
063c9deb rep stos  %al,(%rdi)
063c9ded mov       0x20(%rsp),%rax
063c9df2 add       $0x80,%rsp
063c9df9 pop       %rdi
063c9dfa ret

compiler_builtins::mem::memcmp:
063c9e00 sub       $0xE8,%rsp
063c9e07 mov       %r8,0x50(%rsp)
063c9e0c mov       %rdx,0x58(%rsp)
063c9e11 mov       %rcx,0x60(%rsp)
063c9e16 mov       %rcx,0x78(%rsp)
063c9e1b mov       %rdx,0x80(%rsp)
063c9e23 mov       %r8,0x88(%rsp)
063c9e2b movq      $0,0x70(%rsp)
063c9e34 mov       0x50(%rsp),%rax
063c9e39 cmp       %rax,0x70(%rsp)
063c9e3e jb        0x0000`0000`063C`9E4D
063c9e40 movl      $0,0x6C(%rsp)
063c9e48 jmp       0x0000`0000`063C`9F53
063c9e4d mov       0x60(%rsp),%rax
063c9e52 mov       0x70(%rsp),%rcx
063c9e57 mov       %rax,0xA8(%rsp)
063c9e5f mov       %rcx,0xB0(%rsp)
063c9e67 mov       %rax,0xB8(%rsp)
063c9e6f mov       %rcx,0xC0(%rsp)
063c9e77 add       %rcx,%rax
063c9e7a mov       %rax,0xC8(%rsp)
063c9e82 mov       0xC8(%rsp),%rax
063c9e8a mov       %rax,0x48(%rsp)
063c9e8f mov       0x58(%rsp),%rax
063c9e94 mov       0x48(%rsp),%rcx
063c9e99 mov       (%rcx),%cl
063c9e9b mov       %cl,0x3F(%rsp)
063c9e9f mov       %cl,0x96(%rsp)
063c9ea6 mov       0x70(%rsp),%rcx
063c9eab mov       %rax,0x98(%rsp)
063c9eb3 mov       %rcx,0xA0(%rsp)
063c9ebb mov       %rax,0xD0(%rsp)
063c9ec3 mov       %rcx,0xD8(%rsp)
063c9ecb add       %rcx,%rax
063c9ece mov       %rax,0xE0(%rsp)
063c9ed6 mov       0xE0(%rsp),%rax
063c9ede mov       %rax,0x40(%rsp)
063c9ee3 mov       0x3F(%rsp),%al
063c9ee7 mov       0x40(%rsp),%rcx
063c9eec mov       (%rcx),%cl
063c9eee mov       %cl,0x3E(%rsp)
063c9ef2 mov       %cl,0x97(%rsp)
063c9ef9 cmp       %cl,%al
063c9efb jne       0x0000`0000`063C`9F14
063c9efd mov       0x70(%rsp),%rax
063c9f02 add       $1,%rax
063c9f06 mov       %rax,0x30(%rsp)
063c9f0b setb      %al
063c9f0e test      $1,%al
063c9f10 jne       0x0000`0000`063C`9F6E
063c9f12 jmp       0x0000`0000`063C`9F5F
063c9f14 mov       0x3E(%rsp),%cl
063c9f18 mov       0x3F(%rsp),%al
063c9f1c movzbl    %al,%eax
063c9f1f movzbl    %cl,%ecx
063c9f22 sub       %ecx,%eax
063c9f24 mov       %eax,0x2C(%rsp)
063c9f28 seto      %al
063c9f2b test      $1,%al
063c9f2d jne       0x0000`0000`063C`9F39
063c9f2f mov       0x2C(%rsp),%eax
063c9f33 mov       %eax,0x6C(%rsp)
063c9f37 jmp       0x0000`0000`063C`9F53
063c9f39 lea       0x63D`1FF0,%rcx
063c9f40 lea       0x63D`2150,%r8
063c9f47 mov       $0x21,%edx
063c9f4c call      0x0000`0000`063B`2030
063c9f51 ud2
063c9f53 mov       0x6C(%rsp),%eax
063c9f57 add       $0xE8,%rsp
063c9f5e ret
063c9f5f mov       0x30(%rsp),%rax
063c9f64 mov       %rax,0x70(%rsp)
063c9f69 jmp       0x0000`0000`063C`9E34
063c9f6e lea       0x63D`2020,%rcx
063c9f75 lea       0x63D`2168,%r8
063c9f7c mov       $0x1C,%edx
063c9f81 call      0x0000`0000`063B`2030
063c9f86 ud2

core::num::impl$9::checked_div:
063c9f90 sub       $0x50,%rsp
063c9f94 mov       %rdx,8(%rsp)
063c9f99 mov       %rcx,0x10(%rsp)
063c9f9e mov       %rcx,0x30(%rsp)
063c9fa3 mov       %rdx,0x38(%rsp)
063c9fa8 cmp       $0,%rdx
063c9fac sete      %al
063c9faf and       $1,%al
063c9fb1 mov       %al,0x47(%rsp)
063c9fb5 mov       0x47(%rsp),%al
063c9fb9 mov       %al,0x1F(%rsp)
063c9fbd mov       0x1F(%rsp),%al
063c9fc1 test      $1,%al
063c9fc3 jne       0x0000`0000`063C`9FE6
063c9fc5 jmp       0x0000`0000`063C`9FC7
063c9fc7 mov       8(%rsp),%rcx
063c9fcc mov       0x10(%rsp),%rax
063c9fd1 xor       %edx,%edx
063c9fd3 div       %rcx
063c9fd6 mov       %rax,0x48(%rsp)
063c9fdb mov       0x48(%rsp),%rax
063c9fe0 mov       %rax,(%rsp)
063c9fe4 jmp       0x0000`0000`063C`9FFE
063c9fe6 movq      $0,0x20(%rsp)
063c9fef mov       0x20(%rsp),%rax
063c9ff4 mov       0x28(%rsp),%rdx
063c9ff9 add       $0x50,%rsp
063c9ffd ret
063c9ffe mov       (%rsp),%rax
063ca002 mov       %rax,0x28(%rsp)
063ca007 movq      $1,0x20(%rsp)
063ca010 jmp       0x0000`0000`063C`9FEF

core::num::impl$9::checked_rem:
063ca020 sub       $0x50,%rsp
063ca024 mov       %rdx,8(%rsp)
063ca029 mov       %rcx,0x10(%rsp)
063ca02e mov       %rcx,0x30(%rsp)
063ca033 mov       %rdx,0x38(%rsp)
063ca038 cmp       $0,%rdx
063ca03c sete      %al
063ca03f and       $1,%al
063ca041 mov       %al,0x47(%rsp)
063ca045 mov       0x47(%rsp),%al
063ca049 mov       %al,0x1F(%rsp)
063ca04d mov       0x1F(%rsp),%al
063ca051 test      $1,%al
063ca053 jne       0x0000`0000`063C`A076
063ca055 jmp       0x0000`0000`063C`A057
063ca057 mov       8(%rsp),%rcx
063ca05c mov       0x10(%rsp),%rax
063ca061 xor       %edx,%edx
063ca063 div       %rcx
063ca066 mov       %rdx,0x48(%rsp)
063ca06b mov       0x48(%rsp),%rax
063ca070 mov       %rax,(%rsp)
063ca074 jmp       0x0000`0000`063C`A08E
063ca076 movq      $0,0x20(%rsp)
063ca07f mov       0x20(%rsp),%rax
063ca084 mov       0x28(%rsp),%rdx
063ca089 add       $0x50,%rsp
063ca08d ret
063ca08e mov       (%rsp),%rax
063ca092 mov       %rax,0x28(%rsp)
063ca097 movq      $1,0x20(%rsp)
063ca0a0 jmp       0x0000`0000`063C`A07F

compiler_builtins::int::specialized_div_rem::zero_div_fn:
063ca0e0 sub       $0x28,%rsp
063ca0e4 call      0x0000`0000`063C`9CE0
063ca0e9 ud2

compiler_builtins::int::specialized_div_rem::u64_by_u64_div_rem:
063ca0f0 sub       $0x88,%rsp
063ca0f7 mov       %rdx,0x28(%rsp)
063ca0fc mov       %rcx,0x30(%rsp)
063ca101 mov       %rcx,0x68(%rsp)
063ca106 mov       %rdx,0x70(%rsp)
063ca10b call      0x0000`0000`063C`9F90
063ca110 mov       %rdx,0x50(%rsp)
063ca115 mov       %rax,0x48(%rsp)
063ca11a cmpq      $1,0x48(%rsp)
063ca120 jne       0x0000`0000`063C`A14C
063ca122 mov       0x28(%rsp),%rdx
063ca127 mov       0x30(%rsp),%rcx
063ca12c mov       0x50(%rsp),%rax
063ca131 mov       %rax,0x20(%rsp)
063ca136 mov       %rax,0x78(%rsp)
063ca13b call      0x0000`0000`063C`A020
063ca140 mov       %rdx,0x60(%rsp)
063ca145 mov       %rax,0x58(%rsp)
063ca14a jmp       0x0000`0000`063C`A153
063ca14c call      0x0000`0000`063C`A0E0
063ca151 ud2
063ca153 cmpq      $1,0x58(%rsp)
063ca159 jne       0x0000`0000`063C`A14C
063ca15b mov       0x20(%rsp),%rcx
063ca160 mov       0x60(%rsp),%rax
063ca165 mov       %rax,0x80(%rsp)
063ca16d mov       %rcx,0x38(%rsp)
063ca172 mov       %rax,0x40(%rsp)
063ca177 mov       0x38(%rsp),%rax
063ca17c mov       0x40(%rsp),%rdx
063ca181 add       $0x88,%rsp
063ca188 ret

compiler_builtins::int::specialized_div_rem::u128_by_u64_div_rem:
063ca190 sub       $0x60,%rsp
063ca194 mov       %r8,(%rsp)
063ca198 mov       %rcx,0x38(%rsp)
063ca19d mov       %rdx,0x40(%rsp)
063ca1a2 mov       %r8,0x48(%rsp)
063ca1a7 mov       %rcx,%rax
063ca1aa mov       %rax,8(%rsp)
063ca1af mov       %rcx,0x50(%rsp)
063ca1b4 xor       %eax,%eax
063ca1b6 mov       %rdx,0x10(%rsp)
063ca1bb mov       8(%rsp),%rax
063ca1c0 mov       (%rsp),%rcx
063ca1c4 mov       0x10(%rsp),%rdx
063ca1c9 mov       %rdx,0x58(%rsp)
063ca1ce div       %rcx
063ca1d1 mov       %rax,0x28(%rsp)
063ca1d6 mov       %rdx,0x30(%rsp)
063ca1db mov       0x28(%rsp),%rcx
063ca1e0 mov       0x30(%rsp),%rax
063ca1e5 mov       %rcx,0x18(%rsp)
063ca1ea mov       %rax,0x20(%rsp)
063ca1ef mov       0x18(%rsp),%rax
063ca1f4 mov       0x20(%rsp),%rdx
063ca1f9 add       $0x60,%rsp
063ca1fd ret

compiler_builtins::int::specialized_div_rem::u128_div_rem:
063ca200 sub       $0x278,%rsp
063ca207 mov       %rcx,%rax
063ca20a mov       %rax,0x138(%rsp)
063ca212 mov       0x2A0(%rsp),%rax
063ca21a mov       %rax,0x140(%rsp)
063ca222 mov       %r9,0x148(%rsp)
063ca22a mov       %r8,0x150(%rsp)
063ca232 mov       %rdx,0x158(%rsp)
063ca23a mov       %rcx,0x160(%rsp)
063ca242 mov       %rdx,0x1B0(%rsp)
063ca24a mov       %r8,0x1B8(%rsp)
063ca252 mov       %rax,0x1C8(%rsp)
063ca25a mov       %r9,0x1C0(%rsp)
063ca262 movl      $0x40,0x1D4(%rsp)
063ca26d mov       %rdx,%rax
063ca270 mov       %rax,0x168(%rsp)
063ca278 mov       %rdx,0x1D8(%rsp)
063ca280 xor       %eax,%eax
063ca282 mov       %r8,0x170(%rsp)
063ca28a mov       0x140(%rsp),%rax
063ca292 mov       0x148(%rsp),%rcx
063ca29a mov       0x170(%rsp),%rdx
063ca2a2 mov       %rdx,%r8
063ca2a5 mov       %r8,0x120(%rsp)
063ca2ad mov       %rdx,0x1E0(%rsp)
063ca2b5 mov       %rcx,%rdx
063ca2b8 mov       %rdx,0x128(%rsp)
063ca2c0 mov       %rcx,0x1E8(%rsp)
063ca2c8 xor       %ecx,%ecx
063ca2ca mov       %rax,0x130(%rsp)
063ca2d2 mov       0x130(%rsp),%rax
063ca2da mov       %rax,0x118(%rsp)
063ca2e2 mov       %rax,0x1F0(%rsp)
063ca2ea cmp       $0,%rax
063ca2ee jne       0x0000`0000`063C`A307
063ca2f0 mov       0x128(%rsp),%rax
063ca2f8 cmp       $0,%rax
063ca2fc je        0x0000`0000`063C`A7CC
063ca302 jmp       0x0000`0000`063C`A7D3
063ca307 mov       0x118(%rsp),%rax
063ca30f mov       %rax,0x248(%rsp)
063ca317 bsr       %rax,%rax
063ca31b mov       $0x7F,%ecx
063ca320 cmove     %rcx,%rax
063ca324 xor       $0x3F,%rax
063ca328 mov       %rax,0x250(%rsp)
063ca330 mov       0x250(%rsp),%rax
063ca338 mov       %eax,0x114(%rsp)
063ca33f mov       %eax,0x1F8(%rsp)
063ca346 mov       0x114(%rsp),%ecx
063ca34d mov       $0x40,%eax
063ca352 sub       %ecx,%eax
063ca354 mov       %eax,0x110(%rsp)
063ca35b setb      %al
063ca35e test      $1,%al
063ca360 jne       0x0000`0000`063C`A3B8
063ca362 mov       0x140(%rsp),%rdx
063ca36a mov       0x148(%rsp),%r8
063ca372 mov       0x110(%rsp),%ecx
063ca379 mov       %ecx,0x1FC(%rsp)
063ca380 test      $0xFFFF`FF80,%ecx
063ca386 setne     %al
063ca389 mov       %cl,%r9b
063ca38c mov       %r9b,%cl
063ca38f shrd      %cl,%rdx,%r8
063ca393 mov       %r9b,%cl
063ca396 shr       %cl,%rdx
063ca399 mov       %rdx,%rcx
063ca39c xor       %edx,%edx
063ca39e test      $0x40,%r9b
063ca3a2 cmovne    %rcx,%r8
063ca3a6 mov       %r8,0x108(%rsp)
063ca3ae cmovne    %rdx,%rcx
063ca3b2 test      $1,%al
063ca3b4 jne       0x0000`0000`063C`A41A
063ca3b6 jmp       0x0000`0000`063C`A3D2
063ca3b8 lea       0x63D`21A0,%rcx
063ca3bf lea       0x63D`2278,%r8
063ca3c6 mov       $0x21,%edx
063ca3cb call      0x0000`0000`063B`2030
063ca3d0 ud2
063ca3d2 mov       0x150(%rsp),%rax
063ca3da mov       0x158(%rsp),%rdx
063ca3e2 mov       0x108(%rsp),%rcx
063ca3ea mov       %rcx,%r8
063ca3ed mov       %r8,0xF0(%rsp)
063ca3f5 mov       %rcx,0x200(%rsp)
063ca3fd mov       %rax,%rcx
063ca400 shld      $0x3F,%rdx,%rcx
063ca405 mov       %rcx,0xF8(%rsp)
063ca40d shr       $1,%rax
063ca410 mov       %rax,0x100(%rsp)
063ca418 jmp       0x0000`0000`063C`A434
063ca41a lea       0x63D`21D0,%rcx
063ca421 lea       0x63D`2278,%r8
063ca428 mov       $0x24,%edx
063ca42d call      0x0000`0000`063B`2030
063ca432 ud2
063ca434 mov       0xF0(%rsp),%r8
063ca43c mov       0x100(%rsp),%rdx
063ca444 mov       0xF8(%rsp),%rcx
063ca44c call      0x0000`0000`063C`A190
063ca451 mov       %rax,0xE8(%rsp)
063ca459 mov       %rax,0x208(%rsp)
063ca461 mov       %rdx,0x210(%rsp)
063ca469 mov       $0x40,%eax
063ca46e sub       $1,%eax
063ca471 mov       %eax,0xE4(%rsp)
063ca478 setb      %al
063ca47b test      $1,%al
063ca47d jne       0x0000`0000`063C`A49F
063ca47f mov       0x114(%rsp),%ecx
063ca486 mov       0xE4(%rsp),%eax
063ca48d sub       %ecx,%eax
063ca48f mov       %eax,0xE0(%rsp)
063ca496 setb      %al
063ca499 test      $1,%al
063ca49b jne       0x0000`0000`063C`A4EA
063ca49d jmp       0x0000`0000`063C`A4B9
063ca49f lea       0x63D`21A0,%rcx
063ca4a6 lea       0x63D`2278,%r8
063ca4ad mov       $0x21,%edx
063ca4b2 call      0x0000`0000`063B`2030
063ca4b7 ud2
063ca4b9 mov       0xE8(%rsp),%rdx
063ca4c1 mov       0xE0(%rsp),%ecx
063ca4c8 mov       %ecx,%eax
063ca4ca and       $0xFFFF`FFC0,%eax
063ca4cd cmp       $0,%eax
063ca4d0 setne     %al
063ca4d3 mov       %ecx,%ecx
063ca4d5 and       $0x3F,%rcx
063ca4d9 shr       %cl,%rdx
063ca4dc mov       %rdx,0xD8(%rsp)
063ca4e4 test      $1,%al
063ca4e6 jne       0x0000`0000`063C`A521
063ca4e8 jmp       0x0000`0000`063C`A504
063ca4ea lea       0x63D`21A0,%rcx
063ca4f1 lea       0x63D`2278,%r8
063ca4f8 mov       $0x21,%edx
063ca4fd call      0x0000`0000`063B`2030
063ca502 ud2
063ca504 mov       0xD8(%rsp),%rax
063ca50c mov       %rax,0x198(%rsp)
063ca514 cmpq      $0,0x198(%rsp)
063ca51d je        0x0000`0000`063C`A53B
063ca51f jmp       0x0000`0000`063C`A596
063ca521 lea       0x63D`21D0,%rcx
063ca528 lea       0x63D`2278,%r8
063ca52f mov       $0x24,%edx
063ca534 call      0x0000`0000`063B`2030
063ca539 ud2
063ca53b mov       0x140(%rsp),%r8
063ca543 mov       0x148(%rsp),%rdx
063ca54b mov       0x198(%rsp),%rcx
063ca553 mov       %rcx,0x258(%rsp)
063ca55b movq      $0,0x260(%rsp)
063ca567 mov       %r8,0x270(%rsp)
063ca56f mov       %rdx,0x268(%rsp)
063ca577 mov       %rcx,%rax
063ca57a mul       %rdx
063ca57d imul      %r8,%rcx
063ca581 add       %rcx,%rdx
063ca584 mov       %rdx,0xC8(%rsp)
063ca58c mov       %rax,0xD0(%rsp)
063ca594 jmp       0x0000`0000`063C`A5E0
063ca596 mov       0x198(%rsp),%rax
063ca59e sub       $1,%rax
063ca5a2 mov       %rax,0xC0(%rsp)
063ca5aa setb      %al
063ca5ad test      $1,%al
063ca5af jne       0x0000`0000`063C`A5C6
063ca5b1 mov       0xC0(%rsp),%rax
063ca5b9 mov       %rax,0x198(%rsp)
063ca5c1 jmp       0x0000`0000`063C`A53B
063ca5c6 lea       0x63D`21A0,%rcx
063ca5cd lea       0x63D`2278,%r8
063ca5d4 mov       $0x21,%edx
063ca5d9 call      0x0000`0000`063B`2030
063ca5de ud2
063ca5e0 mov       0xC8(%rsp),%rax
063ca5e8 mov       0x150(%rsp),%rcx
063ca5f0 mov       0xD0(%rsp),%r8
063ca5f8 mov       0x158(%rsp),%rdx
063ca600 sub       %r8,%rdx
063ca603 mov       %rdx,0xB0(%rsp)
063ca60b sbb       %rax,%rcx
063ca60e setb      %al
063ca611 mov       %rcx,0xB8(%rsp)
063ca619 test      $1,%al
063ca61b jne       0x0000`0000`063C`A667
063ca61d mov       0x140(%rsp),%rcx
063ca625 mov       0x148(%rsp),%r8
063ca62d mov       0xB8(%rsp),%rax
063ca635 mov       0xB0(%rsp),%rdx
063ca63d mov       %rdx,0x1A0(%rsp)
063ca645 mov       %rax,0x1A8(%rsp)
063ca64d mov       0x1A0(%rsp),%rdx
063ca655 mov       0x1A8(%rsp),%rax
063ca65d sub       %r8,%rdx
063ca660 sbb       %rcx,%rax
063ca663 jae       0x0000`0000`063C`A6C2
063ca665 jmp       0x0000`0000`063C`A681
063ca667 lea       0x63D`21A0,%rcx
063ca66e lea       0x63D`2278,%r8
063ca675 mov       $0x21,%edx
063ca67a call      0x0000`0000`063B`2030
063ca67f ud2
063ca681 mov       0x198(%rsp),%rdx
063ca689 mov       0x1A0(%rsp),%rax
063ca691 mov       0x1A8(%rsp),%rcx
063ca699 mov       %rdx,0x178(%rsp)
063ca6a1 movq      $0,0x180(%rsp)
063ca6ad mov       %rcx,0x190(%rsp)
063ca6b5 mov       %rax,0x188(%rsp)
063ca6bd jmp       0x0000`0000`063C`A785
063ca6c2 mov       0x198(%rsp),%rax
063ca6ca add       $1,%rax
063ca6ce mov       %rax,0xA8(%rsp)
063ca6d6 setb      %al
063ca6d9 test      $1,%al
063ca6db jne       0x0000`0000`063C`A72C
063ca6dd mov       0x140(%rsp),%rax
063ca6e5 mov       0x148(%rsp),%r8
063ca6ed mov       0xA8(%rsp),%rcx
063ca6f5 mov       %rcx,0x198(%rsp)
063ca6fd mov       0x1A0(%rsp),%rdx
063ca705 mov       0x1A8(%rsp),%rcx
063ca70d sub       %r8,%rdx
063ca710 mov       %rdx,0x98(%rsp)
063ca718 sbb       %rax,%rcx
063ca71b setb      %al
063ca71e mov       %rcx,0xA0(%rsp)
063ca726 test      $1,%al
063ca728 jne       0x0000`0000`063C`A76B
063ca72a jmp       0x0000`0000`063C`A746
063ca72c lea       0x63D`2180,%rcx
063ca733 lea       0x63D`2278,%r8
063ca73a mov       $0x1C,%edx
063ca73f call      0x0000`0000`063B`2030
063ca744 ud2
063ca746 mov       0xA0(%rsp),%rax
063ca74e mov       0x98(%rsp),%rcx
063ca756 mov       %rcx,0x1A0(%rsp)
063ca75e mov       %rax,0x1A8(%rsp)
063ca766 jmp       0x0000`0000`063C`A681
063ca76b lea       0x63D`21A0,%rcx
063ca772 lea       0x63D`2278,%r8
063ca779 mov       $0x21,%edx
063ca77e call      0x0000`0000`063B`2030
063ca783 ud2
063ca785 mov       0x138(%rsp),%rax
063ca78d mov       0x160(%rsp),%rcx
063ca795 mov       0x178(%rsp),%rdx
063ca79d mov       0x180(%rsp),%r8
063ca7a5 mov       0x188(%rsp),%r9
063ca7ad mov       0x190(%rsp),%r10
063ca7b5 mov       %r10,0x18(%rcx)
063ca7b9 mov       %r9,0x10(%rcx)
063ca7bd mov       %r8,8(%rcx)
063ca7c1 mov       %rdx,(%rcx)
063ca7c4 add       $0x278,%rsp
063ca7cb ret
063ca7cc call      0x0000`0000`063C`A0E0
063ca7d1 ud2
063ca7d3 mov       0x120(%rsp),%rax
063ca7db mov       0x128(%rsp),%rcx
063ca7e3 cmp       %rcx,%rax
063ca7e6 jb        0x0000`0000`063C`A80F
063ca7e8 mov       0x128(%rsp),%rdx
063ca7f0 mov       0x120(%rsp),%rcx
063ca7f8 call      0x0000`0000`063C`A0F0
063ca7fd mov       %rax,0x88(%rsp)
063ca805 mov       %rdx,0x90(%rsp)
063ca80d jmp       0x0000`0000`063C`A883
063ca80f mov       0x128(%rsp),%r8
063ca817 mov       0x150(%rsp),%rdx
063ca81f mov       0x158(%rsp),%rcx
063ca827 call      0x0000`0000`063C`A190
063ca82c mov       %rdx,0x78(%rsp)
063ca831 mov       %rax,0x80(%rsp)
063ca839 mov       0x78(%rsp),%rax
063ca83e mov       0x80(%rsp),%rcx
063ca846 mov       %rcx,0x218(%rsp)
063ca84e mov       %rax,0x220(%rsp)
063ca856 mov       %rcx,0x178(%rsp)
063ca85e movq      $0,0x180(%rsp)
063ca86a mov       %rax,0x188(%rsp)
063ca872 movq      $0,0x190(%rsp)
063ca87e jmp       0x0000`0000`063C`A785
063ca883 mov       0x90(%rsp),%rcx
063ca88b mov       0x168(%rsp),%rax
063ca893 mov       0x88(%rsp),%rdx
063ca89b mov       %rdx,0x228(%rsp)
063ca8a3 mov       %rcx,0x230(%rsp)
063ca8ab mov       %rax,0x58(%rsp)
063ca8b0 xor       %eax,%eax
063ca8b2 mov       %rax,0x60(%rsp)
063ca8b7 mov       %rcx,0x68(%rsp)
063ca8bc mov       %rax,0x70(%rsp)
063ca8c1 mov       0x128(%rsp),%r8
063ca8c9 mov       0x68(%rsp),%rax
063ca8ce mov       0x60(%rsp),%rdx
063ca8d3 mov       0x70(%rsp),%r9
063ca8d8 mov       0x58(%rsp),%rcx
063ca8dd or        %r9,%rcx
063ca8e0 or        %rax,%rdx
063ca8e3 call      0x0000`0000`063C`A190
063ca8e8 mov       %rdx,0x48(%rsp)
063ca8ed mov       %rax,0x50(%rsp)
063ca8f2 mov       %rax,0x238(%rsp)
063ca8fa mov       %rdx,0x240(%rsp)
063ca902 mov       0x88(%rsp),%rax
063ca90a mov       0x50(%rsp),%rcx
063ca90f mov       %rcx,0x28(%rsp)
063ca914 xor       %ecx,%ecx
063ca916 mov       %rcx,0x30(%rsp)
063ca91b mov       %rcx,0x38(%rsp)
063ca920 mov       %rax,0x40(%rsp)
063ca925 mov       0x48(%rsp),%rax
063ca92a mov       0x30(%rsp),%r8
063ca92f mov       0x28(%rsp),%rdx
063ca934 mov       0x40(%rsp),%r9
063ca939 mov       0x38(%rsp),%rcx
063ca93e or        %r9,%rcx
063ca941 or        %r8,%rdx
063ca944 mov       %rdx,0x178(%rsp)
063ca94c mov       %rcx,0x180(%rsp)
063ca954 mov       %rax,0x188(%rsp)
063ca95c movq      $0,0x190(%rsp)
063ca968 jmp       0x0000`0000`063C`A785

core::str::pattern::impl$0::next_match:
063ca970 sub       $0x1D8,%rsp
063ca977 mov       %rdx,0xA8(%rsp)
063ca97f mov       %rcx,0xB0(%rsp)
063ca987 mov       %rcx,0xB8(%rsp)
063ca98f mov       %rdx,0x150(%rsp)
063ca997 mov       0xA8(%rsp),%rax
063ca99f mov       (%rax),%rcx
063ca9a2 mov       8(%rax),%rax
063ca9a6 mov       %rcx,0x1B8(%rsp)
063ca9ae mov       %rax,0x1C0(%rsp)
063ca9b6 mov       %rcx,0x1C8(%rsp)
063ca9be mov       %rax,0x1D0(%rsp)
063ca9c6 mov       0x1C8(%rsp),%rax
063ca9ce mov       %rax,0x98(%rsp)
063ca9d6 mov       0x1D0(%rsp),%rax
063ca9de mov       %rax,0xA0(%rsp)
063ca9e6 mov       0xA0(%rsp),%rdx
063ca9ee mov       0x98(%rsp),%rcx
063ca9f6 mov       0xA8(%rsp),%rax
063ca9fe mov       0x10(%rax),%r8
063caa02 mov       0x18(%rax),%rax
063caa06 mov       %r8,0xD0(%rsp)
063caa0e mov       %rax,0xD8(%rsp)
063caa16 mov       0xD0(%rsp),%r8
063caa1e mov       0xD8(%rsp),%r9
063caa26 call      0x0000`0000`063B`FF10
063caa2b mov       %rax,0x88(%rsp)
063caa33 mov       %rdx,0x90(%rsp)
063caa3b mov       0x90(%rsp),%rdx
063caa43 mov       0x88(%rsp),%rcx
063caa4b call      0x0000`0000`063B`1EC0
063caa50 mov       %rdx,0xC8(%rsp)
063caa58 mov       %rax,0xC0(%rsp)
063caa60 mov       0xC0(%rsp),%rax
063caa68 test      %rax,%rax
063caa6b sete      %al
063caa6e movzbl    %al,%eax
063caa71 jne       0x0000`0000`063C`AA79
063caa73 jmp       0x0000`0000`063C`AA75
063caa75 jmp       0x0000`0000`063C`AAE0
063caa77 ud2
063caa79 mov       0xA8(%rsp),%rax
063caa81 mov       0xC0(%rsp),%rdx
063caa89 mov       %rdx,0x68(%rsp)
063caa8e mov       0xC8(%rsp),%rcx
063caa96 mov       %rcx,0x70(%rsp)
063caa9b mov       %rdx,0x160(%rsp)
063caaa3 mov       %rcx,0x168(%rsp)
063caaab mov       %rdx,0x170(%rsp)
063caab3 mov       %rcx,0x178(%rsp)
063caabb mov       %rax,%rcx
063caabe add       $0x2C,%rcx
063caac2 mov       %rcx,0x78(%rsp)
063caac7 mov       0x20(%rax),%rax
063caacb sub       $1,%rax
063caacf mov       %rax,0x80(%rsp)
063caad7 setb      %al
063caada test      $1,%al
063caadc jne       0x0000`0000`063C`AB1B
063caade jmp       0x0000`0000`063C`AAFD
063caae0 mov       0xB0(%rsp),%rcx
063caae8 call      0x0000`0000`063B`1FA0
063caaed mov       0xB8(%rsp),%rax
063caaf5 add       $0x1D8,%rsp
063caafc ret
063caafd mov       0x80(%rsp),%r8
063cab05 mov       0x78(%rsp),%rcx
063cab0a mov       $4,%edx
063cab0f call      0x0000`0000`063C`0080
063cab14 mov       %rax,0x60(%rsp)
063cab19 jmp       0x0000`0000`063C`AB35
063cab1b lea       0x63D`2330,%rcx
063cab22 lea       0x63D`2310,%r8
063cab29 mov       $0x21,%edx
063cab2e call      0x0000`0000`063B`2030
063cab33 ud2
063cab35 mov       0x70(%rsp),%r8
063cab3a mov       0x68(%rsp),%rdx
063cab3f mov       0x60(%rsp),%rax
063cab44 mov       (%rax),%cl
063cab46 mov       %cl,0x187(%rsp)
063cab4d call      0x0000`0000`063C`8290
063cab52 mov       %rdx,0xE8(%rsp)
063cab5a mov       %rax,0xE0(%rsp)
063cab62 cmpq      $1,0xE0(%rsp)
063cab6b jne       0x0000`0000`063C`AB8F
063cab6d mov       0xE8(%rsp),%rax
063cab75 mov       %rax,0x188(%rsp)
063cab7d add       $1,%rax
063cab81 mov       %rax,0x58(%rsp)
063cab86 setb      %al
063cab89 test      $1,%al
063cab8b jne       0x0000`0000`063C`ABD2
063cab8d jmp       0x0000`0000`063C`ABB3
063cab8f mov       0xB0(%rsp),%rax
063cab97 mov       0xA8(%rsp),%rcx
063cab9f mov       0x18(%rcx),%rdx
063caba3 mov       %rdx,0x10(%rcx)
063caba7 movq      $0,(%rax)
063cabae jmp       0x0000`0000`063C`AAED
063cabb3 mov       0xA8(%rsp),%rcx
063cabbb mov       0x58(%rsp),%rax
063cabc0 add       0x10(%rcx),%rax
063cabc4 mov       %rax,0x50(%rsp)
063cabc9 setb      %al
063cabcc test      $1,%al
063cabce jne       0x0000`0000`063C`AC0C
063cabd0 jmp       0x0000`0000`063C`ABEC
063cabd2 lea       0x63D`2370,%rcx
063cabd9 lea       0x63D`2358,%r8
063cabe0 mov       $0x1C,%edx
063cabe5 call      0x0000`0000`063B`2030
063cabea ud2
063cabec mov       0xA8(%rsp),%rcx
063cabf4 mov       0x50(%rsp),%rax
063cabf9 mov       %rax,0x10(%rcx)
063cabfd mov       0x10(%rcx),%rax
063cac01 cmp       0x20(%rcx),%rax
063cac05 jae       0x0000`0000`063C`AC26
063cac07 jmp       0x0000`0000`063C`A997
063cac0c lea       0x63D`2370,%rcx
063cac13 lea       0x63D`2390,%r8
063cac1a mov       $0x1C,%edx
063cac1f call      0x0000`0000`063B`2030
063cac24 ud2
063cac26 mov       0xA8(%rsp),%rcx
063cac2e mov       0x10(%rcx),%rax
063cac32 sub       0x20(%rcx),%rax
063cac36 mov       %rax,0x48(%rsp)
063cac3b setb      %al
063cac3e test      $1,%al
063cac40 jne       0x0000`0000`063C`AC9A
063cac42 mov       0xA8(%rsp),%rax
063cac4a mov       0x48(%rsp),%rcx
063cac4f mov       %rcx,0x190(%rsp)
063cac57 mov       (%rax),%rcx
063cac5a mov       8(%rax),%rax
063cac5e mov       %rcx,0x198(%rsp)
063cac66 mov       %rax,0x1A0(%rsp)
063cac6e mov       %rcx,0x1A8(%rsp)
063cac76 mov       %rax,0x1B0(%rsp)
063cac7e mov       0x1A8(%rsp),%rax
063cac86 mov       %rax,0x38(%rsp)
063cac8b mov       0x1B0(%rsp),%rax
063cac93 mov       %rax,0x40(%rsp)
063cac98 jmp       0x0000`0000`063C`ACB4
063cac9a lea       0x63D`2330,%rcx
063caca1 lea       0x63D`23A8,%r8
063caca8 mov       $0x21,%edx
063cacad call      0x0000`0000`063B`2030
063cacb2 ud2
063cacb4 mov       0x40(%rsp),%rdx
063cacb9 mov       0x38(%rsp),%rcx
063cacbe mov       0x48(%rsp),%r8
063cacc3 mov       0xA8(%rsp),%rax
063caccb mov       0x10(%rax),%rax
063caccf mov       %r8,0x100(%rsp)
063cacd7 mov       %rax,0x108(%rsp)
063cacdf mov       0x100(%rsp),%r8
063cace7 mov       0x108(%rsp),%r9
063cacef call      0x0000`0000`063B`FF10
063cacf4 mov       %rdx,0xF8(%rsp)
063cacfc mov       %rax,0xF0(%rsp)
063cad04 mov       $1,%eax
063cad09 xor       %ecx,%ecx
063cad0b cmpq      $0,0xF0(%rsp)
063cad14 cmove     %rcx,%rax
063cad18 cmp       $1,%rax
063cad1c jne       0x0000`0000`063C`A997
063cad22 mov       0xA8(%rsp),%rax
063cad2a mov       0xF0(%rsp),%rdx
063cad32 mov       0xF8(%rsp),%rcx
063cad3a mov       %rdx,0x110(%rsp)
063cad42 mov       %rcx,0x118(%rsp)
063cad4a mov       %rax,%rcx
063cad4d add       $0x2C,%rcx
063cad51 mov       0x20(%rax),%rax
063cad55 movq      $0,0x130(%rsp)
063cad61 mov       %rax,0x138(%rsp)
063cad69 mov       0x130(%rsp),%rdx
063cad71 mov       0x138(%rsp),%r8
063cad79 lea       0x63D`23C0,%r9
063cad80 call      0x0000`0000`063B`C8C0
063cad85 mov       %rax,0x28(%rsp)
063cad8a mov       %rdx,0x30(%rsp)
063cad8f mov       0x30(%rsp),%rax
063cad94 mov       0x28(%rsp),%rcx
063cad99 mov       %rcx,0x120(%rsp)
063cada1 mov       %rax,0x128(%rsp)
063cada9 lea       0x110(%rsp),%rcx
063cadb1 lea       0x120(%rsp),%rdx
063cadb9 call      0x0000`0000`063C`4B80
063cadbe mov       %al,0x27(%rsp)
063cadc2 mov       0x27(%rsp),%al
063cadc6 test      $1,%al
063cadc8 jne       0x0000`0000`063C`ADCF
063cadca jmp       0x0000`0000`063C`A997
063cadcf mov       0xB0(%rsp),%rax
063cadd7 mov       0x48(%rsp),%rdx
063caddc mov       0xA8(%rsp),%rcx
063cade4 mov       0x10(%rcx),%rcx
063cade8 mov       %rdx,0x140(%rsp)
063cadf0 mov       %rcx,0x148(%rsp)
063cadf8 mov       0x140(%rsp),%rdx
063cae00 mov       0x148(%rsp),%rcx
063cae08 mov       %rdx,8(%rax)
063cae0c mov       %rcx,0x10(%rax)
063cae10 movq      $1,(%rax)
063cae17 jmp       0x0000`0000`063C`AAED

core::str::pattern::impl$3::into_searcher:
063cae20 push      %rsi
063cae21 sub       $0x90,%rsp
063cae28 mov       %r9,0x30(%rsp)
063cae2d mov       %r8,0x38(%rsp)
063cae32 mov       %edx,0x54(%rsp)
063cae36 mov       %rcx,0x40(%rsp)
063cae3b mov       %rcx,0x48(%rsp)
063cae40 mov       %edx,0x74(%rsp)
063cae44 mov       %r8,0x78(%rsp)
063cae49 mov       %r9,0x80(%rsp)
063cae51 lea       0x6C(%rsp),%rcx
063cae56 xor       %edx,%edx
063cae58 mov       $4,%r8d
063cae5e call      0x0000`0000`063B`BE10
063cae63 mov       0x54(%rsp),%ecx
063cae67 lea       0x6C(%rsp),%rdx
063cae6c mov       $4,%r8d
063cae72 call      0x0000`0000`063B`98C0
063cae77 mov       %rax,0x58(%rsp)
063cae7c mov       %rdx,0x60(%rsp)
063cae81 mov       0x60(%rsp),%rdx
063cae86 mov       0x58(%rsp),%rcx
063cae8b call      0x0000`0000`063B`D700
063cae90 mov       %rax,0x28(%rsp)
063cae95 mov       %rax,0x88(%rsp)
063cae9d mov       0x30(%rsp),%rdx
063caea2 mov       0x38(%rsp),%rcx
063caea7 call      0x0000`0000`063B`D700
063caeac mov       %rax,0x20(%rsp)
063caeb1 mov       0x48(%rsp),%rax
063caeb6 mov       0x40(%rsp),%rcx
063caebb mov       0x28(%rsp),%rdx
063caec0 mov       0x54(%rsp),%r8d
063caec5 mov       0x20(%rsp),%r9
063caeca mov       0x30(%rsp),%r10
063caecf mov       0x38(%rsp),%r11
063caed4 mov       0x6C(%rsp),%esi
063caed8 mov       %esi,0x70(%rsp)
063caedc mov       %r11,(%rcx)
063caedf mov       %r10,8(%rcx)
063caee3 movq      $0,0x10(%rcx)
063caeeb mov       %r9,0x18(%rcx)
063caeef mov       %r8d,0x28(%rcx)
063caef3 mov       %rdx,0x20(%rcx)
063caef7 mov       0x70(%rsp),%edx
063caefb mov       %edx,0x2C(%rcx)
063caefe add       $0x90,%rsp
063caf05 pop       %rsi
063caf06 ret

core::cmp::impls::impl$62::lt:
063caf10 sub       $0x10,%rsp
063caf14 mov       %rcx,(%rsp)
063caf18 mov       %rdx,8(%rsp)
063caf1d mov       (%rcx),%rax
063caf20 cmp       (%rdx),%rax
063caf23 setb      %al
063caf26 and       $1,%al
063caf28 movzbl    %al,%eax
063caf2b add       $0x10,%rsp
063caf2f ret

core::clone::impls::impl$9::clone:
063caf30 push      %rax
063caf31 mov       %rcx,(%rsp)
063caf35 mov       (%rcx),%rax
063caf38 pop       %rcx
063caf39 ret

core::iter::range::impl$35::forward_unchecked:
063caf40 sub       $0x30,%rsp
063caf44 mov       %rcx,8(%rsp)
063caf49 mov       %rdx,0x10(%rsp)
063caf4e mov       %rcx,0x18(%rsp)
063caf53 mov       %rdx,0x20(%rsp)
063caf58 add       %rdx,%rcx
063caf5b mov       %rcx,0x28(%rsp)
063caf60 mov       0x28(%rsp),%rax
063caf65 mov       %rax,(%rsp)
063caf69 mov       (%rsp),%rax
063caf6d add       $0x30,%rsp
063caf71 ret

core::mem::replace<u64>:
063caf80 sub       $0x58,%rsp
063caf84 mov       %rdx,0x28(%rsp)
063caf89 mov       %rcx,0x30(%rsp)
063caf8e mov       %rcx,0x40(%rsp)
063caf93 mov       %rdx,0x48(%rsp)
063caf98 call      0x0000`0000`063B`BC90
063caf9d mov       %rax,0x38(%rsp)
063cafa2 mov       %rax,0x50(%rsp)
063cafa7 mov       0x28(%rsp),%rdx
063cafac mov       0x30(%rsp),%rcx
063cafb1 call      0x0000`0000`063B`E080
063cafb6 mov       0x38(%rsp),%rax
063cafbb add       $0x58,%rsp
063cafbf ret

core::intrinsics::is_aligned_and_not_null<u64>:
063cafc0 sub       $0x38,%rsp
063cafc4 mov       %rcx,0x20(%rsp)
063cafc9 mov       %rcx,0x30(%rsp)
063cafce call      0x0000`0000`063B`8BE0
063cafd3 mov       %al,0x2E(%rsp)
063cafd7 mov       0x2E(%rsp),%al
063cafdb xor       $0xFF,%al
063cafdd test      $1,%al
063cafdf jne       0x0000`0000`063C`AFE8
063cafe1 movb      $0,0x2F(%rsp)
063cafe6 jmp       0x0000`0000`063C`B02A
063cafe8 mov       $8,%eax
063cafed cmp       $0,%rax
063caff1 sete      %al
063caff4 test      $1,%al
063caff6 jne       0x0000`0000`063C`B010
063caff8 mov       0x20(%rsp),%rax
063caffd and       $7,%rax
063cb001 cmp       $0,%rax
063cb005 sete      %al
063cb008 and       $1,%al
063cb00a mov       %al,0x2F(%rsp)
063cb00e jmp       0x0000`0000`063C`B02A
063cb010 lea       0x63D`2470,%rcx
063cb017 lea       0x63D`2458,%r8
063cb01e mov       $0x39,%edx
063cb023 call      0x0000`0000`063B`2030
063cb028 ud2
063cb02a mov       0x2F(%rsp),%al
063cb02e and       $1,%al
063cb030 movzbl    %al,%eax
063cb033 add       $0x38,%rsp
063cb037 ret

core::slice::iter::Iter<u16>::new<u16>:
063cb040 sub       $0xC8,%rsp
063cb047 mov       %rdx,0x38(%rsp)
063cb04c mov       %rcx,0x60(%rsp)
063cb051 mov       %rdx,0x68(%rsp)
063cb056 call      0x0000`0000`063C`1520
063cb05b mov       %rax,0x40(%rsp)
063cb060 mov       %rax,0x70(%rsp)
063cb065 mov       0x40(%rsp),%rcx
063cb06a call      0x0000`0000`063C`B300
063cb06f jmp       0x0000`0000`063C`B071
063cb071 mov       $2,%eax
063cb076 cmp       $0,%rax
063cb07a jne       0x0000`0000`063C`B0BD
063cb07c mov       0x38(%rsp),%rcx
063cb081 mov       0x40(%rsp),%rax
063cb086 mov       %rax,0x78(%rsp)
063cb08b mov       %rcx,0x80(%rsp)
063cb093 mov       %rax,0x88(%rsp)
063cb09b mov       %rcx,0x90(%rsp)
063cb0a3 add       %rcx,%rax
063cb0a6 mov       %rax,0x98(%rsp)
063cb0ae mov       0x98(%rsp),%rax
063cb0b6 mov       %rax,0x30(%rsp)
063cb0bb jmp       0x0000`0000`063C`B114
063cb0bd mov       0x40(%rsp),%rax
063cb0c2 mov       0x38(%rsp),%rcx
063cb0c7 mov       %rax,0xA0(%rsp)
063cb0cf mov       %rcx,0xA8(%rsp)
063cb0d7 mov       %rax,0xB0(%rsp)
063cb0df mov       %rcx,0xB8(%rsp)
063cb0e7 shl       $1,%rcx
063cb0eb add       %rcx,%rax
063cb0ee mov       %rax,0xC0(%rsp)
063cb0f6 mov       0xC0(%rsp),%rax
063cb0fe mov       %rax,0x58(%rsp)
063cb103 mov       0x40(%rsp),%rcx
063cb108 call      0x0000`0000`063C`B330
063cb10d mov       %rax,0x28(%rsp)
063cb112 jmp       0x0000`0000`063C`B120
063cb114 mov       0x30(%rsp),%rax
063cb119 mov       %rax,0x58(%rsp)
063cb11e jmp       0x0000`0000`063C`B103
063cb120 mov       0x28(%rsp),%rcx
063cb125 mov       0x58(%rsp),%rax
063cb12a mov       %rcx,0x48(%rsp)
063cb12f mov       %rax,0x50(%rsp)
063cb134 mov       0x48(%rsp),%rax
063cb139 mov       0x50(%rsp),%rdx
063cb13e add       $0xC8,%rsp
063cb145 ret

core::slice::iter::impl$173::next<u16>:
063cb150 sub       $0x98,%rsp
063cb157 mov       %rcx,0x40(%rsp)
063cb15c mov       %rcx,0x58(%rsp)
063cb161 mov       (%rcx),%rcx
063cb164 call      0x0000`0000`063C`B350
063cb169 mov       %rax,0x48(%rsp)
063cb16e mov       0x48(%rsp),%rcx
063cb173 call      0x0000`0000`063C`B360
063cb178 jmp       0x0000`0000`063C`B17A
063cb17a mov       $2,%eax
063cb17f cmp       $0,%rax
063cb183 jne       0x0000`0000`063C`B199
063cb185 mov       0x40(%rsp),%rax
063cb18a mov       (%rax),%rcx
063cb18d call      0x0000`0000`063C`B350
063cb192 mov       %rax,0x38(%rsp)
063cb197 jmp       0x0000`0000`063C`B1A9
063cb199 mov       0x40(%rsp),%rax
063cb19e mov       8(%rax),%rcx
063cb1a2 call      0x0000`0000`063C`B300
063cb1a7 jmp       0x0000`0000`063C`B185
063cb1a9 mov       0x38(%rsp),%rax
063cb1ae mov       0x40(%rsp),%rcx
063cb1b3 cmp       8(%rcx),%rax
063cb1b7 je        0x0000`0000`063C`B240
063cb1bd mov       0x40(%rsp),%rax
063cb1c2 mov       %rax,0x68(%rsp)
063cb1c7 movq      $1,0x70(%rsp)
063cb1d0 mov       (%rax),%rcx
063cb1d3 call      0x0000`0000`063C`B350
063cb1d8 mov       %rax,%rcx
063cb1db mov       0x40(%rsp),%rax
063cb1e0 mov       %rcx,0x28(%rsp)
063cb1e5 mov       %rcx,0x78(%rsp)
063cb1ea mov       (%rax),%rcx
063cb1ed call      0x0000`0000`063C`B350
063cb1f2 mov       %rax,0x80(%rsp)
063cb1fa movq      $1,0x88(%rsp)
063cb206 add       $2,%rax
063cb20a mov       %rax,0x90(%rsp)
063cb212 mov       0x90(%rsp),%rcx
063cb21a call      0x0000`0000`063C`B330
063cb21f mov       0x40(%rsp),%rcx
063cb224 mov       %rax,%rdx
063cb227 mov       0x28(%rsp),%rax
063cb22c mov       %rdx,(%rcx)
063cb22f mov       %rax,0x60(%rsp)
063cb234 mov       0x60(%rsp),%rax
063cb239 mov       %rax,0x30(%rsp)
063cb23e jmp       0x0000`0000`063C`B256
063cb240 movq      $0,0x50(%rsp)
063cb249 mov       0x50(%rsp),%rax
063cb24e add       $0x98,%rsp
063cb255 ret
063cb256 mov       0x30(%rsp),%rax
063cb25b mov       %rax,0x50(%rsp)
063cb260 jmp       0x0000`0000`063C`B249

core::result::impl$28::from_residual<tuple$<>,enum$<ucs2::Error>,enum$<ucs2::Error> >:
063cb270 sub       $0x28,%rsp
063cb274 and       $1,%cl
063cb277 mov       %cl,0x25(%rsp)
063cb27b mov       0x25(%rsp),%cl
063cb27f mov       %cl,%al
063cb281 and       $1,%al
063cb283 mov       %al,0x27(%rsp)
063cb287 and       $1,%cl
063cb28a call      0x0000`0000`063C`B390
063cb28f mov       %al,0x24(%rsp)
063cb293 mov       0x24(%rsp),%al
063cb297 and       $1,%al
063cb299 mov       %al,0x26(%rsp)
063cb29d mov       0x26(%rsp),%al
063cb2a1 add       $0x28,%rsp
063cb2a5 ret

core::result::impl$27::branch<tuple$<>,enum$<ucs2::Error> >:
063cb2b0 sub       $0x10,%rsp
063cb2b4 mov       %cl,5(%rsp)
063cb2b8 mov       5(%rsp),%al
063cb2bc add       $0xFE,%al
063cb2be setne     %al
063cb2c1 movzbl    %al,%eax
063cb2c4 je        0x0000`0000`063C`B2CC
063cb2c6 jmp       0x0000`0000`063C`B2C8
063cb2c8 jmp       0x0000`0000`063C`B2D3
063cb2ca ud2
063cb2cc movb      $2,6(%rsp)
063cb2d1 jmp       0x0000`0000`063C`B2F0
063cb2d3 mov       5(%rsp),%al
063cb2d7 mov       %al,%cl
063cb2d9 and       $1,%cl
063cb2dc mov       %cl,0xF(%rsp)
063cb2e0 and       $1,%al
063cb2e2 mov       %al,7(%rsp)
063cb2e6 mov       7(%rsp),%al
063cb2ea and       $1,%al
063cb2ec mov       %al,6(%rsp)
063cb2f0 mov       6(%rsp),%al
063cb2f4 add       $0x10,%rsp
063cb2f8 ret

core::ptr::const_ptr::impl$0::is_null<u16>:
063cb300 sub       $0x38,%rsp
063cb304 mov       %rcx,0x30(%rsp)
063cb309 mov       %rcx,0x28(%rsp)
063cb30e mov       0x28(%rsp),%rcx
063cb313 xor       %eax,%eax
063cb315 mov       %eax,%edx
063cb317 call      0x0000`0000`063C`4900
063cb31c mov       %al,0x27(%rsp)
063cb320 mov       0x27(%rsp),%al
063cb324 and       $1,%al
063cb326 movzbl    %al,%eax
063cb329 add       $0x38,%rsp
063cb32d ret

core::ptr::non_null::NonNull<u16>::new_unchecked<u16>:
063cb330 sub       $0x10,%rsp
063cb334 mov       %rcx,8(%rsp)
063cb339 mov       %rcx,(%rsp)
063cb33d mov       (%rsp),%rax
063cb341 add       $0x10,%rsp
063cb345 ret

core::ptr::non_null::NonNull<u16>::as_ptr<u16>:
063cb350 push      %rax
063cb351 mov       %rcx,%rax
063cb354 mov       %rax,(%rsp)
063cb358 pop       %rcx
063cb359 ret

core::ptr::mut_ptr::impl$0::is_null<u16>:
063cb360 sub       $0x38,%rsp
063cb364 mov       %rcx,0x30(%rsp)
063cb369 mov       %rcx,0x28(%rsp)
063cb36e mov       0x28(%rsp),%rcx
063cb373 xor       %eax,%eax
063cb375 mov       %eax,%edx
063cb377 call      0x0000`0000`063B`FE00
063cb37c mov       %al,0x27(%rsp)
063cb380 mov       0x27(%rsp),%al
063cb384 and       $1,%al
063cb386 movzbl    %al,%eax
063cb389 add       $0x38,%rsp
063cb38d ret

core::convert::impl$4::from<enum$<ucs2::Error> >:
063cb390 push      %rax
063cb391 mov       %cl,%al
063cb393 and       $1,%al
063cb395 mov       %al,7(%rsp)
063cb399 and       $1,%cl
063cb39c movzbl    %cl,%eax
063cb39f pop       %rcx
063cb3a0 ret

